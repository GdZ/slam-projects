# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import apsw

import nds.smart.metadata.smart_layer_definition
import nds.smart.metadata.smart_layer_registry_metadata
import nds.system.types.module_definition
import nds.system.types.nds_node_legal_info
import nds.system.types.nds_system_token
import zserio

class SmartLayerMetadataTable:
    class Rows:
        def __init__(self, rows: typing.Iterator[typing.Tuple]) -> None:
            self._rows = rows

        def __iter__(self) -> typing.Iterator['SmartLayerMetadataTable.ROW_ANNOTATION']:
            for row in self._rows:
                yield self._read_row(row)

        @staticmethod
        def _read_row(row: typing.Tuple) -> 'SmartLayerMetadataTable.ROW_ANNOTATION':
            id_ = row[0]
            registry_metadata_ = row[1]
            if registry_metadata_ is not None:
                reader = zserio.BitStreamReader(registry_metadata_)
                registry_metadata_ = nds.smart.metadata.smart_layer_registry_metadata.SmartLayerRegistryMetadata.from_reader(reader)
            module_definition_ = row[2]
            if module_definition_ is not None:
                reader = zserio.BitStreamReader(module_definition_)
                module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(reader)
            definition_ = row[3]
            if definition_ is not None:
                reader = zserio.BitStreamReader(definition_)
                definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader(reader)
            node_system_reference_ = row[4]
            if node_system_reference_ is not None:
                reader = zserio.BitStreamReader(node_system_reference_)
                node_system_reference_ = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)
            node_legal_info_ = row[5]
            if node_legal_info_ is not None:
                reader = zserio.BitStreamReader(node_legal_info_)
                node_legal_info_ = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader(reader)

            return (id_, registry_metadata_, module_definition_, definition_, node_system_reference_, node_legal_info_)

    def __init__(self, connection: apsw.Connection, table_name: str, attached_db_name: str = None) -> None:
        self._connection: apsw.Connection = connection
        self._table_name: str = table_name
        self._attached_db_name: str = attached_db_name

    def create_table(self) -> None:
        sql_query = self._get_create_table_query()
        cursor = self._connection.cursor()
        cursor.execute(sql_query)

    def delete_table(self) -> None:
        sql_query = "DROP TABLE "
        sql_query += self._get_table_name_in_query()
        cursor = self._connection.cursor()
        cursor.execute(sql_query)

    def read(self, condition: str = None) -> 'SmartLayerMetadataTable.Rows':
        sql_query = ("SELECT "
                    "id, "
                    "registryMetadata, "
                    "moduleDefinition, "
                    "definition, "
                    "nodeSystemReference, "
                    "nodeLegalInfo"
                    " FROM ")
        sql_query += self._get_table_name_in_query()
        if condition:
            sql_query += " WHERE " + condition

        cursor = self._connection.cursor()
        read_rows = cursor.execute(sql_query)

        return SmartLayerMetadataTable.Rows(read_rows)

    def write(self, rows: typing.Sequence['SmartLayerMetadataTable.ROW_ANNOTATION']) -> None:
        sql_query = "INSERT INTO "
        sql_query += self._get_table_name_in_query()
        sql_query += ("("
                     "id, "
                     "registryMetadata, "
                     "moduleDefinition, "
                     "definition, "
                     "nodeSystemReference, "
                     "nodeLegalInfo"
                     ") VALUES (?, ?, ?, ?, ?, ?)")

        cursor = self._connection.cursor()
        has_autocommit = self._connection.getautocommit()
        if has_autocommit:
            cursor.execute("BEGIN")

        for row in rows:
            cursor.execute(sql_query, self._write_row(row))

        if has_autocommit:
            cursor.execute("COMMIT")

    def update(self, row: 'SmartLayerMetadataTable.ROW_ANNOTATION', where_condition: str) -> None:
        sql_query = "UPDATE "
        sql_query += self._get_table_name_in_query()
        sql_query += (" SET"
                     " id=?,"
                     " registryMetadata=?,"
                     " moduleDefinition=?,"
                     " definition=?,"
                     " nodeSystemReference=?,"
                     " nodeLegalInfo=?"
                     " WHERE ") + where_condition

        cursor = self._connection.cursor()
        cursor.execute(sql_query, self._write_row(row))

    def _get_table_name_in_query(self) -> str:
        return (self._attached_db_name + "." + self._table_name) if self._attached_db_name else self._table_name

    def _get_create_table_query(self) -> str:
        sql_query = "CREATE TABLE "
        sql_query += self._get_table_name_in_query()
        sql_query += ("(" +
                     "id INTEGER" + " " + "PRIMARY KEY DEFAULT 0 NOT NULL" + "," +
                     "registryMetadata BLOB" + "," +
                     "moduleDefinition BLOB" + "," +
                     "definition BLOB" + "," +
                     "nodeSystemReference BLOB" + "," +
                     "nodeLegalInfo BLOB" +
                     ", " +
                     ("check(id == 0)") +
                     ")")

        return sql_query

    @staticmethod
    def _write_row(row: 'SmartLayerMetadataTable.ROW_ANNOTATION') -> typing.List:
        row_in_list : typing.List = list(row)

        registry_metadata_ = row_in_list[1]
        if isinstance(registry_metadata_, nds.smart.metadata.smart_layer_registry_metadata.SmartLayerRegistryMetadata):
            writer = zserio.BitStreamWriter()
            registry_metadata_.write(writer)
            row_in_list[1] = writer.byte_array

        module_definition_ = row_in_list[2]
        if isinstance(module_definition_, nds.system.types.module_definition.ModuleDefinition):
            writer = zserio.BitStreamWriter()
            module_definition_.write(writer)
            row_in_list[2] = writer.byte_array

        definition_ = row_in_list[3]
        if isinstance(definition_, nds.smart.metadata.smart_layer_definition.SmartLayerDefinition):
            writer = zserio.BitStreamWriter()
            definition_.write(writer)
            row_in_list[3] = writer.byte_array

        node_system_reference_ = row_in_list[4]
        if isinstance(node_system_reference_, nds.system.types.nds_system_token.NdsSystemToken):
            writer = zserio.BitStreamWriter()
            node_system_reference_.write(writer)
            row_in_list[4] = writer.byte_array

        node_legal_info_ = row_in_list[5]
        if isinstance(node_legal_info_, nds.system.types.nds_node_legal_info.NdsNodeLegalInfo):
            writer = zserio.BitStreamWriter()
            node_legal_info_.write(writer)
            row_in_list[5] = writer.byte_array

        return row_in_list

    ROW_ANNOTATION = typing.Tuple[
        int,
        nds.smart.metadata.smart_layer_registry_metadata.SmartLayerRegistryMetadata,
        nds.system.types.module_definition.ModuleDefinition,
        nds.smart.metadata.smart_layer_definition.SmartLayerDefinition,
        nds.system.types.nds_system_token.NdsSystemToken,
        nds.system.types.nds_node_legal_info.NdsNodeLegalInfo]
