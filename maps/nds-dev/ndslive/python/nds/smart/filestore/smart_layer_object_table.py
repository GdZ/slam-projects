# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import apsw

import nds.smart.object.smart_layer_object
import nds.smart.object.smart_layer_object_class
import nds.smart.object.smart_layer_object_id
import nds.smart.types.smart_layer_header
import zserio

class SmartLayerObjectTable:
    class Rows:
        def __init__(self, rows: typing.Iterator[typing.Tuple]) -> None:
            self._rows = rows

        def __iter__(self) -> typing.Iterator['SmartLayerObjectTable.ROW_ANNOTATION']:
            for row in self._rows:
                yield self._read_row(row)

        @staticmethod
        def _read_row(row: typing.Tuple) -> 'SmartLayerObjectTable.ROW_ANNOTATION':
            object_id_ = row[0]
            object_class_ = row[1]
            smart_layer_ = row[2]
            if smart_layer_ is not None:
                reader = zserio.BitStreamReader(smart_layer_)
                smart_layer_ = nds.smart.object.smart_layer_object.SmartLayerObject.from_reader(reader)
            header_ = row[3]
            if header_ is not None:
                reader = zserio.BitStreamReader(header_)
                header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(reader)

            return (object_id_, object_class_, smart_layer_, header_)

    def __init__(self, connection: apsw.Connection, table_name: str, attached_db_name: str = None) -> None:
        self._connection: apsw.Connection = connection
        self._table_name: str = table_name
        self._attached_db_name: str = attached_db_name

    def create_table(self) -> None:
        sql_query = self._get_create_table_query()
        cursor = self._connection.cursor()
        cursor.execute(sql_query)

    def delete_table(self) -> None:
        sql_query = "DROP TABLE "
        sql_query += self._get_table_name_in_query()
        cursor = self._connection.cursor()
        cursor.execute(sql_query)

    def read(self, condition: str = None) -> 'SmartLayerObjectTable.Rows':
        sql_query = ("SELECT "
                    "objectId, "
                    "objectClass, "
                    "smartLayer, "
                    "header"
                    " FROM ")
        sql_query += self._get_table_name_in_query()
        if condition:
            sql_query += " WHERE " + condition

        cursor = self._connection.cursor()
        read_rows = cursor.execute(sql_query)

        return SmartLayerObjectTable.Rows(read_rows)

    def write(self, rows: typing.Sequence['SmartLayerObjectTable.ROW_ANNOTATION']) -> None:
        sql_query = "INSERT INTO "
        sql_query += self._get_table_name_in_query()
        sql_query += ("("
                     "objectId, "
                     "objectClass, "
                     "smartLayer, "
                     "header"
                     ") VALUES (?, ?, ?, ?)")

        cursor = self._connection.cursor()
        has_autocommit = self._connection.getautocommit()
        if has_autocommit:
            cursor.execute("BEGIN")

        for row in rows:
            cursor.execute(sql_query, self._write_row(row))

        if has_autocommit:
            cursor.execute("COMMIT")

    def update(self, row: 'SmartLayerObjectTable.ROW_ANNOTATION', where_condition: str) -> None:
        sql_query = "UPDATE "
        sql_query += self._get_table_name_in_query()
        sql_query += (" SET"
                     " objectId=?,"
                     " objectClass=?,"
                     " smartLayer=?,"
                     " header=?"
                     " WHERE ") + where_condition

        cursor = self._connection.cursor()
        cursor.execute(sql_query, self._write_row(row))

    def _get_table_name_in_query(self) -> str:
        return (self._attached_db_name + "." + self._table_name) if self._attached_db_name else self._table_name

    def _get_create_table_query(self) -> str:
        sql_query = "CREATE TABLE "
        sql_query += self._get_table_name_in_query()
        sql_query += ("(" +
                     "objectId INTEGER" + " " + "NOT NULL" + "," +
                     "objectClass INTEGER" + " " + "NOT NULL" + "," +
                     "smartLayer BLOB" + " " + "NOT NULL" + "," +
                     "header BLOB" + " " + "NULL" +
                     ", " +
                     "primary key (objectId, objectClass)" +
                     ")")

        return sql_query

    @staticmethod
    def _write_row(row: 'SmartLayerObjectTable.ROW_ANNOTATION') -> typing.List:
        row_in_list : typing.List = list(row)

        smart_layer_ = row_in_list[2]
        if isinstance(smart_layer_, nds.smart.object.smart_layer_object.SmartLayerObject):
            writer = zserio.BitStreamWriter()
            smart_layer_.write(writer)
            row_in_list[2] = writer.byte_array

        header_ = row_in_list[3]
        if isinstance(header_, nds.smart.types.smart_layer_header.SmartLayerHeader):
            writer = zserio.BitStreamWriter()
            header_.write(writer)
            row_in_list[3] = writer.byte_array

        return row_in_list

    ROW_ANNOTATION = typing.Tuple[
        nds.smart.object.smart_layer_object_id.SmartLayerObjectId,
        nds.smart.object.smart_layer_object_class.SmartLayerObjectClass,
        nds.smart.object.smart_layer_object.SmartLayerObject,
        nds.smart.types.smart_layer_header.SmartLayerHeader]
