# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_id_range
import nds.core.types.packed_tile_id
import nds.smart.types.data_layer
import nds.smart.types.smart_layer_header

class SmartLayerLocationIdPathSegment:
    def __init__(
            self,
            header_: nds.smart.types.smart_layer_header.SmartLayerHeader,
            range_: typing.Union[nds.core.location.road_location_id_range.RoadLocationIdRange, None] = None,
            tile_id_: nds.core.types.packed_tile_id.PackedTileId = nds.core.types.packed_tile_id.PackedTileId(),
            layers_: typing.List[nds.smart.types.data_layer.DataLayer] = None) -> None:
        self._header_ = header_
        self._range_ = range_
        self._tile_id_ = tile_id_
        self._layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), layers_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerLocationIdPathSegment'],
            zserio_reader: zserio.BitStreamReader,
            header_: nds.smart.types.smart_layer_header.SmartLayerHeader) -> 'SmartLayerLocationIdPathSegment':
        self = object.__new__(cls)
        self._header_ = header_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerLocationIdPathSegment'],
            zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            header_: nds.smart.types.smart_layer_header.SmartLayerHeader) -> 'SmartLayerLocationIdPathSegment':
        self = object.__new__(cls)
        self._header_ = header_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerLocationIdPathSegment):
            return (self._header_ == other._header_ and
                    (self._range_ == other._range_) and
                    (self._tile_id_ == other._tile_id_) and
                    (self._layers_ == other._layers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._range_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._tile_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._layers_)

        return result

    @property
    def header(self) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
        return self._header_

    @property
    def range(self) -> typing.Union[nds.core.location.road_location_id_range.RoadLocationIdRange, None]:
        return self._range_

    @range.setter
    def range(self, range_: typing.Union[nds.core.location.road_location_id_range.RoadLocationIdRange, None]) -> None:
        self._range_ = range_

    @property
    def tile_id(self) -> nds.core.types.packed_tile_id.PackedTileId:
        return self._tile_id_

    @tile_id.setter
    def tile_id(self, tile_id_: nds.core.types.packed_tile_id.PackedTileId) -> None:
        self._tile_id_ = tile_id_

    @property
    def layers(self) -> typing.List[nds.smart.types.data_layer.DataLayer]:
        return self._layers_.raw_array

    @layers.setter
    def layers(self, layers_: typing.List[nds.smart.types.data_layer.DataLayer]) -> None:
        self._layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), layers_)

    def init_packing_context(self, zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext) -> None:
        self._range_.init_packing_context(zserio_context.range)
        zserio_context.tile_id.init(zserio.array.SignedBitFieldArrayTraits(32), self._tile_id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof(end_bitposition)
        end_bitposition += 32
        end_bitposition += self._layers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof_packed(zserio_context.range, end_bitposition)
        end_bitposition += zserio_context.tile_id.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._tile_id_)
        end_bitposition += self._layers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets(end_bitposition)
        end_bitposition += 32
        end_bitposition = self._layers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets_packed(zserio_context.range, end_bitposition)
        end_bitposition += zserio_context.tile_id.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._tile_id_)
        end_bitposition = self._layers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.core.location.road_location_id_range.RoadLocationIdRange.from_reader(zserio_reader)
        self._tile_id_ = zserio_reader.read_signed_bits(32)
        self._layers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), zserio_reader, self._header_.num_data_layers)

    def read_packed(self, zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.core.location.road_location_id_range.RoadLocationIdRange.from_reader_packed(zserio_context.range, zserio_reader)

        self._tile_id_ = zserio_context.tile_id.read(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader)

        self._layers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), zserio_reader, self._header_.num_data_layers)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._range_.write(zserio_writer)

        zserio_writer.write_signed_bits(self._tile_id_, 32)

        # check array length
        if len(self._layers_) != (self._header_.num_data_layers):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerLocationIdPathSegment.layers: "
                                                f"{len(self._layers_)} != {self._header_.num_data_layers}!")
        self._layers_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerLocationIdPathSegment.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._range_.write_packed(zserio_context.range, zserio_writer)

        zserio_context.tile_id.write(zserio.array.SignedBitFieldArrayTraits(32), zserio_writer, self._tile_id_)

        # check array length
        if len(self._layers_) != (self._header_.num_data_layers):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerLocationIdPathSegment.layers: "
                                                f"{len(self._layers_)} != {self._header_.num_data_layers}!")
        self._layers_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._range_ = nds.core.location.road_location_id_range.RoadLocationIdRange.ZserioPackingContext()
            self._tile_id_ = zserio.array.DeltaContext()

        @property
        def range(self):
            return self._range_

        @property
        def tile_id(self):
            return self._tile_id_

    class _ZserioElementFactory_layers:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.data_layer.DataLayer:
            del zserio_index
            return nds.smart.types.data_layer.DataLayer.from_reader(zserio_reader)
