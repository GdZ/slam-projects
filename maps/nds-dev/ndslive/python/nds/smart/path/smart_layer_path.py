# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.path.smart_layer_path_location
import nds.smart.path.smart_layer_path_segment
import nds.smart.types.smart_layer_header

class SmartLayerPath:
    def __init__(
            self,
            header_: typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None] = None,
            num_segments_: int = int(),
            exact_match_: bool = bool(),
            path_location_: typing.Optional[nds.smart.path.smart_layer_path_location.SmartLayerPathLocation] = None,
            segments_: typing.List[nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment] = None) -> None:
        self._header_ = header_
        self._num_segments_ = num_segments_
        self._exact_match_ = exact_match_
        self._path_location_ = path_location_
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments(self)), segments_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerPath'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerPath':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerPath'],
            zserio_context: SmartLayerPath.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerPath':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerPath):
            return ((self._header_ == other._header_) and
                    (self._num_segments_ == other._num_segments_) and
                    (self._exact_match_ == other._exact_match_) and
                    (not other.is_path_location_used() if not self.is_path_location_used() else (self._path_location_ == other._path_location_)) and
                    (self._segments_ == other._segments_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_segments_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._exact_match_)
        if self.is_path_location_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._path_location_)
        result = zserio.hashcode.calc_hashcode_object(result, self._segments_)

        return result

    @property
    def header(self) -> typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def num_segments(self) -> int:
        return self._num_segments_

    @num_segments.setter
    def num_segments(self, num_segments_: int) -> None:
        self._num_segments_ = num_segments_

    @property
    def exact_match(self) -> bool:
        return self._exact_match_

    @exact_match.setter
    def exact_match(self, exact_match_: bool) -> None:
        self._exact_match_ = exact_match_

    @property
    def path_location(self) -> typing.Optional[nds.smart.path.smart_layer_path_location.SmartLayerPathLocation]:
        return self._path_location_

    @path_location.setter
    def path_location(self, path_location_: typing.Optional[nds.smart.path.smart_layer_path_location.SmartLayerPathLocation]) -> None:
        self._path_location_ = path_location_

    def is_path_location_used(self) -> bool:
        return not (self._exact_match_ and self._num_segments_ == 1)

    def is_path_location_set(self) -> bool:
        return not self._path_location_ is None

    def reset_path_location(self) -> None:
        self._path_location_ = None

    @property
    def segments(self) -> typing.List[nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment]:
        return self._segments_.raw_array

    @segments.setter
    def segments(self, segments_: typing.List[nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment]) -> None:
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments(self)), segments_)

    def init_packing_context(self, zserio_context: SmartLayerPath.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)
        zserio_context.num_segments.init(zserio.array.VarSizeArrayTraits(), self._num_segments_)
        if self.is_path_location_used():
            self._path_location_.init_packing_context(zserio_context.path_location)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_segments_)
        end_bitposition += 1
        if self.is_path_location_used():
            end_bitposition += self._path_location_.bitsizeof(end_bitposition)
        end_bitposition += self._segments_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerPath.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += zserio_context.num_segments.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_segments_)
        end_bitposition += 1
        if self.is_path_location_used():
            end_bitposition += self._path_location_.bitsizeof_packed(zserio_context.path_location, end_bitposition)
        end_bitposition += self._segments_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_segments_)
        end_bitposition += 1
        if self.is_path_location_used():
            end_bitposition = self._path_location_.initialize_offsets(end_bitposition)
        end_bitposition = self._segments_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerPath.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition += zserio_context.num_segments.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_segments_)
        end_bitposition += 1
        if self.is_path_location_used():
            end_bitposition = self._path_location_.initialize_offsets_packed(zserio_context.path_location, end_bitposition)
        end_bitposition = self._segments_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(zserio_reader)

        self._num_segments_ = zserio_reader.read_varsize()
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerPath.numSegments!")

        self._exact_match_ = zserio_reader.read_bool()

        if self.is_path_location_used():
            self._path_location_ = nds.smart.path.smart_layer_path_location.SmartLayerPathLocation.from_reader(zserio_reader, self._num_segments_)
        else:
            self._path_location_ = None

        self._segments_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments(self)), zserio_reader, self._num_segments_)

    def read_packed(self, zserio_context: SmartLayerPath.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._num_segments_ = zserio_context.num_segments.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerPath.numSegments!")

        self._exact_match_ = zserio_reader.read_bool()

        if self.is_path_location_used():
            self._path_location_ = nds.smart.path.smart_layer_path_location.SmartLayerPathLocation.from_reader_packed(zserio_context.path_location, zserio_reader, self._num_segments_)
        else:
            self._path_location_ = None

        self._segments_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments(self)), zserio_reader, self._num_segments_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)

        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerPath.numSegments!")
        zserio_writer.write_varsize(self._num_segments_)

        zserio_writer.write_bool(self._exact_match_)

        if self.is_path_location_used():
            # check parameters
            if self._path_location_.num_segments != (self._num_segments_):
                raise zserio.PythonRuntimeException("Wrong parameter numSegments for field SmartLayerPath.pathLocation: "
                                                    f"{self._path_location_.num_segments} != {self._num_segments_}!")
            self._path_location_.write(zserio_writer)

        # check array length
        if len(self._segments_) != (self._num_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerPath.segments: "
                                                f"{len(self._segments_)} != {self._num_segments_}!")
        self._segments_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerPath.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerPath.numSegments!")
        zserio_context.num_segments.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_segments_)

        zserio_writer.write_bool(self._exact_match_)

        if self.is_path_location_used():
            # check parameters
            if self._path_location_.num_segments != (self._num_segments_):
                raise zserio.PythonRuntimeException("Wrong parameter numSegments for field SmartLayerPath.pathLocation: "
                                                    f"{self._path_location_.num_segments} != {self._num_segments_}!")
            self._path_location_.write_packed(zserio_context.path_location, zserio_writer)

        # check array length
        if len(self._segments_) != (self._num_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerPath.segments: "
                                                f"{len(self._segments_)} != {self._num_segments_}!")
        self._segments_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext()
            self._num_segments_ = zserio.array.DeltaContext()
            self._path_location_ = nds.smart.path.smart_layer_path_location.SmartLayerPathLocation.ZserioPackingContext()

        @property
        def header(self):
            return self._header_

        @property
        def num_segments(self):
            return self._num_segments_

        @property
        def path_location(self):
            return self._path_location_

    class _ZserioElementFactory_segments:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment:
            del zserio_index
            return nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment.from_reader(zserio_reader, self._owner._header_)

        @staticmethod
        def create_packing_context() -> nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment.ZserioPackingContext:
            return nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment:
            del zserio_index
            return nds.smart.path.smart_layer_path_segment.SmartLayerPathSegment.from_reader_packed(zserio_context, zserio_reader, self._owner._header_)
