# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.line2d
import nds.core.location.location_geometry
import nds.core.location.location_path_range

class SmartLayerPathLocation:
    def __init__(
            self,
            num_segments_: int,
            path_: typing.Union[nds.core.location.location_geometry.LocationGeometry, None] = None,
            ranges_: typing.Optional[typing.List[nds.core.location.location_path_range.LocationPathRange]] = None) -> None:
        self._num_segments_ = num_segments_
        self._path_ = path_
        if ranges_ is None:
            self._ranges_ = None
        else:
            self._ranges_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ranges(self)), ranges_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerPathLocation'],
            zserio_reader: zserio.BitStreamReader,
            num_segments_: int) -> 'SmartLayerPathLocation':
        self = object.__new__(cls)
        self._num_segments_ = num_segments_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerPathLocation'],
            zserio_context: SmartLayerPathLocation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_segments_: int) -> 'SmartLayerPathLocation':
        self = object.__new__(cls)
        self._num_segments_ = num_segments_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerPathLocation):
            return (self._num_segments_ == other._num_segments_ and
                    (self._path_ == other._path_) and
                    (not other.is_ranges_used() if not self.is_ranges_used() else (self._ranges_ == other._ranges_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_segments_)
        result = zserio.hashcode.calc_hashcode_object(result, self._path_)
        if self.is_ranges_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._ranges_)

        return result

    @property
    def num_segments(self) -> int:
        return self._num_segments_

    @property
    def path(self) -> typing.Union[nds.core.location.location_geometry.LocationGeometry, None]:
        return self._path_

    @path.setter
    def path(self, path_: typing.Union[nds.core.location.location_geometry.LocationGeometry, None]) -> None:
        self._path_ = path_

    @property
    def ranges(self) -> typing.Optional[typing.List[nds.core.location.location_path_range.LocationPathRange]]:
        return None if self._ranges_ is None else self._ranges_.raw_array

    @ranges.setter
    def ranges(self, ranges_: typing.Optional[typing.List[nds.core.location.location_path_range.LocationPathRange]]) -> None:
        if ranges_ is None:
            self._ranges_ = None
        else:
            self._ranges_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ranges(self)), ranges_)

    def is_ranges_used(self) -> bool:
        return self._num_segments_ > 1

    def is_ranges_set(self) -> bool:
        return not self._ranges_ is None

    def reset_ranges(self) -> None:
        self._ranges_ = None

    def init_packing_context(self, zserio_context: SmartLayerPathLocation.ZserioPackingContext) -> None:
        self._path_.init_packing_context(zserio_context.path)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._path_.bitsizeof(end_bitposition)
        if self.is_ranges_used():
            end_bitposition += self._ranges_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerPathLocation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._path_.bitsizeof_packed(zserio_context.path, end_bitposition)
        if self.is_ranges_used():
            end_bitposition += self._ranges_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._path_.initialize_offsets(end_bitposition)
        if self.is_ranges_used():
            end_bitposition = self._ranges_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerPathLocation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._path_.initialize_offsets_packed(zserio_context.path, end_bitposition)
        if self.is_ranges_used():
            end_bitposition = self._ranges_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_ = nds.core.location.location_geometry.LocationGeometry.from_reader(zserio_reader)
        if self.is_ranges_used():
            self._ranges_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ranges(self)), zserio_reader, self._num_segments_)
        else:
            self._ranges_ = None

    def read_packed(self, zserio_context: SmartLayerPathLocation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_ = nds.core.location.location_geometry.LocationGeometry.from_reader_packed(zserio_context.path, zserio_reader)

        if self.is_ranges_used():
            self._ranges_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ranges(self)), zserio_reader, self._num_segments_)
        else:
            self._ranges_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._path_.write(zserio_writer)

        if self.is_ranges_used():
            # check array length
            if len(self._ranges_) != (self._num_segments_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerPathLocation.ranges: "
                                                    f"{len(self._ranges_)} != {self._num_segments_}!")
            self._ranges_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerPathLocation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._path_.write_packed(zserio_context.path, zserio_writer)

        if self.is_ranges_used():
            # check array length
            if len(self._ranges_) != (self._num_segments_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerPathLocation.ranges: "
                                                    f"{len(self._ranges_)} != {self._num_segments_}!")
            self._ranges_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._path_ = nds.core.location.location_geometry.LocationGeometry.ZserioPackingContext()

        @property
        def path(self):
            return self._path_

    class _ZserioElementFactory_ranges:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.location.location_path_range.LocationPathRange:
            del zserio_index
            return nds.core.location.location_path_range.LocationPathRange.from_reader(zserio_reader, self._owner._path_.line)

        @staticmethod
        def create_packing_context() -> nds.core.location.location_path_range.LocationPathRange.ZserioPackingContext:
            return nds.core.location.location_path_range.LocationPathRange.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.location.location_path_range.LocationPathRange.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.location.location_path_range.LocationPathRange:
            del zserio_index
            return nds.core.location.location_path_range.LocationPathRange.from_reader_packed(zserio_context, zserio_reader, self._owner._path_.line)
