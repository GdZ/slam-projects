# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.version_id
import nds.smart.types.data_layer_lifetime_type
import nds.smart.types.dynamic_data_lifetime_info

class DataLayerLifetimeInfo:
    def __init__(
            self,
            lifetime_: nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType,
            *,
            version_id_: typing.Union[nds.core.types.version_id.VersionId, None] = None,
            dynamic_data_lifetime_info_: typing.Union[nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo, None] = None) -> None:
        self._lifetime_ = lifetime_
        self._choice: typing.Any = None
        if version_id_ is not None:
            self._choice = version_id_
        if dynamic_data_lifetime_info_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DataLayerLifetimeInfo is ambiguous!")
            self._choice = dynamic_data_lifetime_info_

    @classmethod
    def from_reader(
            cls: typing.Type['DataLayerLifetimeInfo'],
            zserio_reader: zserio.BitStreamReader,
            lifetime_: nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType) -> 'DataLayerLifetimeInfo':
        self = object.__new__(cls)
        self._lifetime_ = lifetime_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DataLayerLifetimeInfo'],
            zserio_context: DataLayerLifetimeInfo.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            lifetime_: nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType) -> 'DataLayerLifetimeInfo':
        self = object.__new__(cls)
        self._lifetime_ = lifetime_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DataLayerLifetimeInfo):
            return (self._lifetime_ == other._lifetime_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._lifetime_)
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            pass

        return result

    @property
    def lifetime(self) -> nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType:
        return self._lifetime_

    @property
    def version_id(self) -> nds.core.types.version_id.VersionId:
        return self._choice

    @version_id.setter
    def version_id(self, version_id_: nds.core.types.version_id.VersionId) -> None:
        self._choice = version_id_

    @property
    def dynamic_data_lifetime_info(self) -> typing.Union[nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo, None]:
        return self._choice

    @dynamic_data_lifetime_info.setter
    def dynamic_data_lifetime_info(self, dynamic_data_lifetime_info_: typing.Union[nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo, None]) -> None:
        self._choice = dynamic_data_lifetime_info_

    @property
    def choice_tag(self) -> int:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            return self.CHOICE_VERSION_ID
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            return self.CHOICE_DYNAMIC_DATA_LIFETIME_INFO
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            return self.UNDEFINED_CHOICE
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: DataLayerLifetimeInfo.ZserioPackingContext) -> None:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            zserio_context.version_id.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            self._choice.init_packing_context(zserio_context.dynamic_data_lifetime_info)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DataLayerLifetimeInfo.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            end_bitposition += zserio_context.version_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.dynamic_data_lifetime_info, end_bitposition)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DataLayerLifetimeInfo.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            end_bitposition += zserio_context.version_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.dynamic_data_lifetime_info, end_bitposition)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            self._choice = nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo.from_reader(zserio_reader)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

    def read_packed(self, zserio_context: DataLayerLifetimeInfo.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            self._choice = zserio_context.version_id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            self._choice = nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo.from_reader_packed(zserio_context.dynamic_data_lifetime_info, zserio_reader)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            self._choice.write(zserio_writer)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

    def write_packed(self, zserio_context: DataLayerLifetimeInfo.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._lifetime_

        if selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.STATIC):
            zserio_context.version_id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.DYNAMIC):
            self._choice.write_packed(zserio_context.dynamic_data_lifetime_info, zserio_writer)
        elif selector == (nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.LIVE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DataLayerLifetimeInfo!")

    class ZserioPackingContext:
        def __init__(self):
            self._version_id_ = zserio.array.DeltaContext()
            self._dynamic_data_lifetime_info_ = nds.smart.types.dynamic_data_lifetime_info.DynamicDataLifetimeInfo.ZserioPackingContext()

        @property
        def version_id(self):
            return self._version_id_

        @property
        def dynamic_data_lifetime_info(self):
            return self._dynamic_data_lifetime_info_

    CHOICE_VERSION_ID = 0
    CHOICE_DYNAMIC_DATA_LIFETIME_INFO = 1
    UNDEFINED_CHOICE = -1
