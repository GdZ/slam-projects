# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.tile_id
import nds.smart.types.raster_image_config_base64
import nds.smart.types.raster_image_lifetime

class RasterTileImageVersionRequest:
    def __init__(
            self,
            tile_id_: typing.Union[nds.core.types.tile_id.TileId, None] = None,
            configuration_: nds.smart.types.raster_image_config_base64.RasterImageConfigBase64 = nds.smart.types.raster_image_config_base64.RasterImageConfigBase64(),
            lifetime_info_: typing.Union[nds.smart.types.raster_image_lifetime.RasterImageLifetime, None] = None) -> None:
        self._tile_id_ = tile_id_
        self._configuration_ = configuration_
        self._lifetime_info_ = lifetime_info_

    @classmethod
    def from_reader(
            cls: typing.Type['RasterTileImageVersionRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'RasterTileImageVersionRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RasterTileImageVersionRequest'],
            zserio_context: RasterTileImageVersionRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RasterTileImageVersionRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RasterTileImageVersionRequest):
            return ((self._tile_id_ == other._tile_id_) and
                    (self._configuration_ == other._configuration_) and
                    (self._lifetime_info_ == other._lifetime_info_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._tile_id_)
        result = zserio.hashcode.calc_hashcode_string(result, self._configuration_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lifetime_info_)

        return result

    @property
    def tile_id(self) -> typing.Union[nds.core.types.tile_id.TileId, None]:
        return self._tile_id_

    @tile_id.setter
    def tile_id(self, tile_id_: typing.Union[nds.core.types.tile_id.TileId, None]) -> None:
        self._tile_id_ = tile_id_

    @property
    def configuration(self) -> nds.smart.types.raster_image_config_base64.RasterImageConfigBase64:
        return self._configuration_

    @configuration.setter
    def configuration(self, configuration_: nds.smart.types.raster_image_config_base64.RasterImageConfigBase64) -> None:
        self._configuration_ = configuration_

    @property
    def lifetime_info(self) -> typing.Union[nds.smart.types.raster_image_lifetime.RasterImageLifetime, None]:
        return self._lifetime_info_

    @lifetime_info.setter
    def lifetime_info(self, lifetime_info_: typing.Union[nds.smart.types.raster_image_lifetime.RasterImageLifetime, None]) -> None:
        self._lifetime_info_ = lifetime_info_

    def init_packing_context(self, zserio_context: RasterTileImageVersionRequest.ZserioPackingContext) -> None:
        self._tile_id_.init_packing_context(zserio_context.tile_id)
        self._lifetime_info_.init_packing_context(zserio_context.lifetime_info)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._tile_id_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._configuration_)
        end_bitposition += self._lifetime_info_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RasterTileImageVersionRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._tile_id_.bitsizeof_packed(zserio_context.tile_id, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._configuration_)
        end_bitposition += self._lifetime_info_.bitsizeof_packed(zserio_context.lifetime_info, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._tile_id_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._configuration_)
        end_bitposition = self._lifetime_info_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RasterTileImageVersionRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._tile_id_.initialize_offsets_packed(zserio_context.tile_id, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._configuration_)
        end_bitposition = self._lifetime_info_.initialize_offsets_packed(zserio_context.lifetime_info, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._tile_id_ = nds.core.types.tile_id.TileId.from_reader(zserio_reader)
        self._configuration_ = zserio_reader.read_string()
        self._lifetime_info_ = nds.smart.types.raster_image_lifetime.RasterImageLifetime.from_reader(zserio_reader)

    def read_packed(self, zserio_context: RasterTileImageVersionRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._tile_id_ = nds.core.types.tile_id.TileId.from_reader_packed(zserio_context.tile_id, zserio_reader)

        self._configuration_ = zserio_reader.read_string()

        self._lifetime_info_ = nds.smart.types.raster_image_lifetime.RasterImageLifetime.from_reader_packed(zserio_context.lifetime_info, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._tile_id_.write(zserio_writer)
        zserio_writer.write_string(self._configuration_)
        self._lifetime_info_.write(zserio_writer)

    def write_packed(self, zserio_context: RasterTileImageVersionRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._tile_id_.write_packed(zserio_context.tile_id, zserio_writer)

        zserio_writer.write_string(self._configuration_)

        self._lifetime_info_.write_packed(zserio_context.lifetime_info, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._tile_id_ = nds.core.types.tile_id.TileId.ZserioPackingContext()
            self._lifetime_info_ = nds.smart.types.raster_image_lifetime.RasterImageLifetime.ZserioPackingContext()

        @property
        def tile_id(self):
            return self._tile_id_

        @property
        def lifetime_info(self):
            return self._lifetime_info_
