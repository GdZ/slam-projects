# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp

class DynamicDataLifetimeInfo:
    def __init__(
            self,
            collection_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            expiration_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None) -> None:
        self._collection_time_ = collection_time_
        self._expiration_time_ = expiration_time_

    @classmethod
    def from_reader(
            cls: typing.Type['DynamicDataLifetimeInfo'],
            zserio_reader: zserio.BitStreamReader) -> 'DynamicDataLifetimeInfo':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DynamicDataLifetimeInfo'],
            zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DynamicDataLifetimeInfo':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DynamicDataLifetimeInfo):
            return ((self._collection_time_ == other._collection_time_) and
                    (self._expiration_time_ == other._expiration_time_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._collection_time_)
        result = zserio.hashcode.calc_hashcode_object(result, self._expiration_time_)

        return result

    @property
    def collection_time(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._collection_time_

    @collection_time.setter
    def collection_time(self, collection_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._collection_time_ = collection_time_

    @property
    def expiration_time(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._expiration_time_

    @expiration_time.setter
    def expiration_time(self, expiration_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._expiration_time_ = expiration_time_

    def init_packing_context(self, zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext) -> None:
        self._collection_time_.init_packing_context(zserio_context.collection_time)
        self._expiration_time_.init_packing_context(zserio_context.expiration_time)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._collection_time_.bitsizeof(end_bitposition)
        end_bitposition += self._expiration_time_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._collection_time_.bitsizeof_packed(zserio_context.collection_time, end_bitposition)
        end_bitposition += self._expiration_time_.bitsizeof_packed(zserio_context.expiration_time, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._collection_time_.initialize_offsets(end_bitposition)
        end_bitposition = self._expiration_time_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._collection_time_.initialize_offsets_packed(zserio_context.collection_time, end_bitposition)
        end_bitposition = self._expiration_time_.initialize_offsets_packed(zserio_context.expiration_time, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._collection_time_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._expiration_time_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)

    def read_packed(self, zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._collection_time_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.collection_time, zserio_reader)

        self._expiration_time_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.expiration_time, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._collection_time_.write(zserio_writer)
        self._expiration_time_.write(zserio_writer)

    def write_packed(self, zserio_context: DynamicDataLifetimeInfo.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._collection_time_.write_packed(zserio_context.collection_time, zserio_writer)

        self._expiration_time_.write_packed(zserio_context.expiration_time, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._collection_time_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()
            self._expiration_time_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()

        @property
        def collection_time(self):
            return self._collection_time_

        @property
        def expiration_time(self):
            return self._expiration_time_
