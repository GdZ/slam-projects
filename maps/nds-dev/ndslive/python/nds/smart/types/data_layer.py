# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.system.types.extern_data

class DataLayer:
    def __init__(
            self,
            has_signature_: bool = bool(),
            signature_: typing.Optional[zserio.bitbuffer.BitBuffer] = None,
            layer_: typing.Union[nds.system.types.extern_data.ExternData, None] = None) -> None:
        self._has_signature_ = has_signature_
        self._signature_ = signature_
        self._layer_ = layer_

    @classmethod
    def from_reader(
            cls: typing.Type['DataLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'DataLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DataLayer):
            return ((self._has_signature_ == other._has_signature_) and
                    (not other.is_signature_used() if not self.is_signature_used() else (self._signature_ == other._signature_)) and
                    (self._layer_ == other._layer_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_signature_)
        if self.is_signature_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._signature_)
        result = zserio.hashcode.calc_hashcode_object(result, self._layer_)

        return result

    @property
    def has_signature(self) -> bool:
        return self._has_signature_

    @has_signature.setter
    def has_signature(self, has_signature_: bool) -> None:
        self._has_signature_ = has_signature_

    @property
    def signature(self) -> typing.Optional[zserio.bitbuffer.BitBuffer]:
        return self._signature_

    @signature.setter
    def signature(self, signature_: typing.Optional[zserio.bitbuffer.BitBuffer]) -> None:
        self._signature_ = signature_

    def is_signature_used(self) -> bool:
        return self._has_signature_

    def is_signature_set(self) -> bool:
        return not self._signature_ is None

    def reset_signature(self) -> None:
        self._signature_ = None

    @property
    def layer(self) -> typing.Union[nds.system.types.extern_data.ExternData, None]:
        return self._layer_

    @layer.setter
    def layer(self, layer_: typing.Union[nds.system.types.extern_data.ExternData, None]) -> None:
        self._layer_ = layer_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_signature_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._signature_)
        end_bitposition += self._layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_signature_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._signature_)
        end_bitposition = self._layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_signature_ = zserio_reader.read_bool()
        if self.is_signature_used():
            zserio_reader.alignto(8)
            self._signature_ = zserio_reader.read_bitbuffer()
        else:
            self._signature_ = None
        self._layer_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_signature_)
        if self.is_signature_used():
            zserio_writer.alignto(8)
            zserio_writer.write_bitbuffer(self._signature_)
        self._layer_.write(zserio_writer)
