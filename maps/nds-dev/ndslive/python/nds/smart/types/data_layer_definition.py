# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.packaging.signature_definition
import nds.smart.types.custom_extension_identifier
import nds.smart.types.data_layer_content_type
import nds.smart.types.data_layer_id
import nds.smart.types.data_layer_lifetime_type
import nds.smart.types.data_layer_name
import nds.system.types.extern_data
import nds.system.types.extern_descriptor

class DataLayerDefinition:
    def __init__(
            self,
            data_layer_id_: nds.smart.types.data_layer_id.DataLayerId = nds.smart.types.data_layer_id.DataLayerId(),
            lifetime_: typing.Union[nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType, None] = None,
            is_custom_extension_: bool = False,
            layer_descriptor_: typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None] = None,
            custom_extension_identifier_: typing.Optional[nds.smart.types.custom_extension_identifier.CustomExtensionIdentifier] = None,
            name_: nds.smart.types.data_layer_name.DataLayerName = nds.smart.types.data_layer_name.DataLayerName(),
            content_type_: typing.Union[nds.smart.types.data_layer_content_type.DataLayerContentType, None] = None,
            signature_definition_: typing.Optional[nds.core.packaging.signature_definition.SignatureDefinition] = None,
            layer_metadata_: typing.Optional[nds.system.types.extern_data.ExternData] = None,
            custom_extension_metadata_: typing.Optional[zserio.bitbuffer.BitBuffer] = None) -> None:
        self._data_layer_id_ = data_layer_id_
        self._lifetime_ = lifetime_
        self._is_custom_extension_ = is_custom_extension_
        self._layer_descriptor_ = layer_descriptor_
        self._custom_extension_identifier_ = custom_extension_identifier_
        self._name_ = name_
        self._content_type_ = content_type_
        self._signature_definition_ = signature_definition_
        self._layer_metadata_ = layer_metadata_
        self._custom_extension_metadata_ = custom_extension_metadata_

    @classmethod
    def from_reader(
            cls: typing.Type['DataLayerDefinition'],
            zserio_reader: zserio.BitStreamReader) -> 'DataLayerDefinition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DataLayerDefinition'],
            zserio_context: DataLayerDefinition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DataLayerDefinition':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DataLayerDefinition):
            return ((self._data_layer_id_ == other._data_layer_id_) and
                    (self._lifetime_ == other._lifetime_) and
                    (self._is_custom_extension_ == other._is_custom_extension_) and
                    (self._layer_descriptor_ == other._layer_descriptor_) and
                    (not other.is_custom_extension_identifier_used() if not self.is_custom_extension_identifier_used() else (self._custom_extension_identifier_ == other._custom_extension_identifier_)) and
                    (self._name_ == other._name_) and
                    (self._content_type_ == other._content_type_) and
                    (not other.is_signature_definition_used() if not self.is_signature_definition_used() else (self._signature_definition_ == other._signature_definition_)) and
                    (not other.is_layer_metadata_used() if not self.is_layer_metadata_used() else (self._layer_metadata_ == other._layer_metadata_)) and
                    (not other.is_custom_extension_metadata_used() if not self.is_custom_extension_metadata_used() else (self._custom_extension_metadata_ == other._custom_extension_metadata_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._data_layer_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lifetime_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_custom_extension_)
        result = zserio.hashcode.calc_hashcode_object(result, self._layer_descriptor_)
        if self.is_custom_extension_identifier_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._custom_extension_identifier_)
        result = zserio.hashcode.calc_hashcode_string(result, self._name_)
        result = zserio.hashcode.calc_hashcode_object(result, self._content_type_)
        if self.is_signature_definition_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._signature_definition_)
        if self.is_layer_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._layer_metadata_)
        if self.is_custom_extension_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._custom_extension_metadata_)

        return result

    @property
    def data_layer_id(self) -> nds.smart.types.data_layer_id.DataLayerId:
        return self._data_layer_id_

    @data_layer_id.setter
    def data_layer_id(self, data_layer_id_: nds.smart.types.data_layer_id.DataLayerId) -> None:
        self._data_layer_id_ = data_layer_id_

    @property
    def lifetime(self) -> typing.Union[nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType, None]:
        return self._lifetime_

    @lifetime.setter
    def lifetime(self, lifetime_: typing.Union[nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType, None]) -> None:
        self._lifetime_ = lifetime_

    @property
    def is_custom_extension(self) -> bool:
        return self._is_custom_extension_

    @is_custom_extension.setter
    def is_custom_extension(self, is_custom_extension_: bool) -> None:
        self._is_custom_extension_ = is_custom_extension_

    @property
    def layer_descriptor(self) -> typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None]:
        return self._layer_descriptor_

    @layer_descriptor.setter
    def layer_descriptor(self, layer_descriptor_: typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None]) -> None:
        self._layer_descriptor_ = layer_descriptor_

    @property
    def custom_extension_identifier(self) -> typing.Optional[nds.smart.types.custom_extension_identifier.CustomExtensionIdentifier]:
        return self._custom_extension_identifier_

    @custom_extension_identifier.setter
    def custom_extension_identifier(self, custom_extension_identifier_: typing.Optional[nds.smart.types.custom_extension_identifier.CustomExtensionIdentifier]) -> None:
        self._custom_extension_identifier_ = custom_extension_identifier_

    def is_custom_extension_identifier_used(self) -> bool:
        return self._is_custom_extension_

    def is_custom_extension_identifier_set(self) -> bool:
        return not self._custom_extension_identifier_ is None

    def reset_custom_extension_identifier(self) -> None:
        self._custom_extension_identifier_ = None

    @property
    def name(self) -> nds.smart.types.data_layer_name.DataLayerName:
        return self._name_

    @name.setter
    def name(self, name_: nds.smart.types.data_layer_name.DataLayerName) -> None:
        self._name_ = name_

    @property
    def content_type(self) -> typing.Union[nds.smart.types.data_layer_content_type.DataLayerContentType, None]:
        return self._content_type_

    @content_type.setter
    def content_type(self, content_type_: typing.Union[nds.smart.types.data_layer_content_type.DataLayerContentType, None]) -> None:
        self._content_type_ = content_type_

    @property
    def signature_definition(self) -> typing.Optional[nds.core.packaging.signature_definition.SignatureDefinition]:
        return self._signature_definition_

    @signature_definition.setter
    def signature_definition(self, signature_definition_: typing.Optional[nds.core.packaging.signature_definition.SignatureDefinition]) -> None:
        self._signature_definition_ = signature_definition_

    def is_signature_definition_used(self) -> bool:
        return self.is_signature_definition_set()

    def is_signature_definition_set(self) -> bool:
        return not self._signature_definition_ is None

    def reset_signature_definition(self) -> None:
        self._signature_definition_ = None

    @property
    def layer_metadata(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._layer_metadata_

    @layer_metadata.setter
    def layer_metadata(self, layer_metadata_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._layer_metadata_ = layer_metadata_

    def is_layer_metadata_used(self) -> bool:
        return not self._is_custom_extension_

    def is_layer_metadata_set(self) -> bool:
        return not self._layer_metadata_ is None

    def reset_layer_metadata(self) -> None:
        self._layer_metadata_ = None

    @property
    def custom_extension_metadata(self) -> typing.Optional[zserio.bitbuffer.BitBuffer]:
        return self._custom_extension_metadata_

    @custom_extension_metadata.setter
    def custom_extension_metadata(self, custom_extension_metadata_: typing.Optional[zserio.bitbuffer.BitBuffer]) -> None:
        self._custom_extension_metadata_ = custom_extension_metadata_

    def is_custom_extension_metadata_used(self) -> bool:
        return self._is_custom_extension_

    def is_custom_extension_metadata_set(self) -> bool:
        return not self._custom_extension_metadata_ is None

    def reset_custom_extension_metadata(self) -> None:
        self._custom_extension_metadata_ = None

    def init_packing_context(self, zserio_context: DataLayerDefinition.ZserioPackingContext) -> None:
        zserio_context.data_layer_id.init(zserio.array.VarUInt16ArrayTraits(), self._data_layer_id_)
        self._lifetime_.init_packing_context(zserio_context.lifetime)
        self._content_type_.init_packing_context(zserio_context.content_type)
        if self.is_signature_definition_used():
            self._signature_definition_.init_packing_context(zserio_context.signature_definition)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._data_layer_id_)
        end_bitposition += self._lifetime_.bitsizeof(end_bitposition)
        end_bitposition += 1
        end_bitposition += self._layer_descriptor_.bitsizeof(end_bitposition)
        if self.is_custom_extension_identifier_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_extension_identifier_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += self._content_type_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_signature_definition_used():
            end_bitposition += self._signature_definition_.bitsizeof(end_bitposition)
        if self.is_layer_metadata_used():
            end_bitposition += self._layer_metadata_.bitsizeof(end_bitposition)
        if self.is_custom_extension_metadata_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_extension_metadata_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DataLayerDefinition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.data_layer_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._data_layer_id_)
        end_bitposition += self._lifetime_.bitsizeof_packed(zserio_context.lifetime, end_bitposition)
        end_bitposition += 1
        end_bitposition += self._layer_descriptor_.bitsizeof(end_bitposition)
        if self.is_custom_extension_identifier_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_extension_identifier_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += self._content_type_.bitsizeof_packed(zserio_context.content_type, end_bitposition)
        end_bitposition += 1
        if self.is_signature_definition_used():
            end_bitposition += self._signature_definition_.bitsizeof_packed(zserio_context.signature_definition, end_bitposition)
        if self.is_layer_metadata_used():
            end_bitposition += self._layer_metadata_.bitsizeof(end_bitposition)
        if self.is_custom_extension_metadata_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_extension_metadata_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._data_layer_id_)
        end_bitposition = self._lifetime_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        end_bitposition = self._layer_descriptor_.initialize_offsets(end_bitposition)
        if self.is_custom_extension_identifier_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_extension_identifier_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition = self._content_type_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_signature_definition_used():
            end_bitposition = self._signature_definition_.initialize_offsets(end_bitposition)
        if self.is_layer_metadata_used():
            end_bitposition = self._layer_metadata_.initialize_offsets(end_bitposition)
        if self.is_custom_extension_metadata_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_extension_metadata_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DataLayerDefinition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.data_layer_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._data_layer_id_)
        end_bitposition = self._lifetime_.initialize_offsets_packed(zserio_context.lifetime, end_bitposition)
        end_bitposition += 1
        end_bitposition = self._layer_descriptor_.initialize_offsets(end_bitposition)
        if self.is_custom_extension_identifier_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_extension_identifier_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition = self._content_type_.initialize_offsets_packed(zserio_context.content_type, end_bitposition)
        end_bitposition += 1
        if self.is_signature_definition_used():
            end_bitposition = self._signature_definition_.initialize_offsets_packed(zserio_context.signature_definition, end_bitposition)
        if self.is_layer_metadata_used():
            end_bitposition = self._layer_metadata_.initialize_offsets(end_bitposition)
        if self.is_custom_extension_metadata_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_extension_metadata_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._data_layer_id_ = zserio_reader.read_varuint16()
        self._lifetime_ = nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.from_reader(zserio_reader)
        self._is_custom_extension_ = zserio_reader.read_bool()
        self._layer_descriptor_ = nds.system.types.extern_descriptor.ExternDescriptor.from_reader(zserio_reader)
        if self.is_custom_extension_identifier_used():
            self._custom_extension_identifier_ = zserio_reader.read_string()
        else:
            self._custom_extension_identifier_ = None
        self._name_ = zserio_reader.read_string()
        self._content_type_ = nds.smart.types.data_layer_content_type.DataLayerContentType.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._signature_definition_ = nds.core.packaging.signature_definition.SignatureDefinition.from_reader(zserio_reader)
        else:
            self._signature_definition_ = None
        if self.is_layer_metadata_used():
            self._layer_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._layer_metadata_ = None
        if self.is_custom_extension_metadata_used():
            zserio_reader.alignto(8)
            self._custom_extension_metadata_ = zserio_reader.read_bitbuffer()
        else:
            self._custom_extension_metadata_ = None

    def read_packed(self, zserio_context: DataLayerDefinition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._data_layer_id_ = zserio_context.data_layer_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._lifetime_ = nds.smart.types.data_layer_lifetime_type.DataLayerLifetimeType.from_reader_packed(zserio_context.lifetime, zserio_reader)

        self._is_custom_extension_ = zserio_reader.read_bool()

        self._layer_descriptor_ = nds.system.types.extern_descriptor.ExternDescriptor.from_reader(zserio_reader)

        if self.is_custom_extension_identifier_used():
            self._custom_extension_identifier_ = zserio_reader.read_string()
        else:
            self._custom_extension_identifier_ = None

        self._name_ = zserio_reader.read_string()

        self._content_type_ = nds.smart.types.data_layer_content_type.DataLayerContentType.from_reader_packed(zserio_context.content_type, zserio_reader)

        if zserio_reader.read_bool():
            self._signature_definition_ = nds.core.packaging.signature_definition.SignatureDefinition.from_reader_packed(zserio_context.signature_definition, zserio_reader)
        else:
            self._signature_definition_ = None

        if self.is_layer_metadata_used():
            self._layer_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._layer_metadata_ = None

        if self.is_custom_extension_metadata_used():
            zserio_reader.alignto(8)
            self._custom_extension_metadata_ = zserio_reader.read_bitbuffer()
        else:
            self._custom_extension_metadata_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._data_layer_id_)
        self._lifetime_.write(zserio_writer)
        zserio_writer.write_bool(self._is_custom_extension_)
        self._layer_descriptor_.write(zserio_writer)
        if self.is_custom_extension_identifier_used():
            zserio_writer.write_string(self._custom_extension_identifier_)
        zserio_writer.write_string(self._name_)
        self._content_type_.write(zserio_writer)
        if self.is_signature_definition_used():
            zserio_writer.write_bool(True)
            self._signature_definition_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_layer_metadata_used():
            self._layer_metadata_.write(zserio_writer)
        if self.is_custom_extension_metadata_used():
            zserio_writer.alignto(8)
            zserio_writer.write_bitbuffer(self._custom_extension_metadata_)

    def write_packed(self, zserio_context: DataLayerDefinition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.data_layer_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._data_layer_id_)

        self._lifetime_.write_packed(zserio_context.lifetime, zserio_writer)

        zserio_writer.write_bool(self._is_custom_extension_)

        self._layer_descriptor_.write(zserio_writer)

        if self.is_custom_extension_identifier_used():
            zserio_writer.write_string(self._custom_extension_identifier_)

        zserio_writer.write_string(self._name_)

        self._content_type_.write_packed(zserio_context.content_type, zserio_writer)

        if self.is_signature_definition_used():
            zserio_writer.write_bool(True)
            self._signature_definition_.write_packed(zserio_context.signature_definition, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_layer_metadata_used():
            self._layer_metadata_.write(zserio_writer)

        if self.is_custom_extension_metadata_used():
            zserio_writer.alignto(8)
            zserio_writer.write_bitbuffer(self._custom_extension_metadata_)

    class ZserioPackingContext:
        def __init__(self):
            self._data_layer_id_ = zserio.array.DeltaContext()
            self._lifetime_ = zserio.array.DeltaContext()
            self._content_type_ = zserio.array.DeltaContext()
            self._signature_definition_ = nds.core.packaging.signature_definition.SignatureDefinition.ZserioPackingContext()

        @property
        def data_layer_id(self):
            return self._data_layer_id_

        @property
        def lifetime(self):
            return self._lifetime_

        @property
        def content_type(self):
            return self._content_type_

        @property
        def signature_definition(self):
            return self._signature_definition_
