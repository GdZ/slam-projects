# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class ServerStatsTopic:
    def __init__(
            self,
            request_num_received_: typing.Optional[int] = None,
            request_payload_bytes_: typing.Optional[int] = None,
            request_avg_payload_bytes_: typing.Optional[float] = None,
            avg_time_request_to_response_: typing.Optional[float] = None,
            response_num_sent_: typing.Optional[int] = None,
            response_payload_bytes_: typing.Optional[int] = None,
            response_avg_payload_bytes_: typing.Optional[float] = None) -> None:
        self._request_num_received_ = request_num_received_
        self._request_payload_bytes_ = request_payload_bytes_
        self._request_avg_payload_bytes_ = request_avg_payload_bytes_
        self._avg_time_request_to_response_ = avg_time_request_to_response_
        self._response_num_sent_ = response_num_sent_
        self._response_payload_bytes_ = response_payload_bytes_
        self._response_avg_payload_bytes_ = response_avg_payload_bytes_

    @classmethod
    def from_reader(
            cls: typing.Type['ServerStatsTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'ServerStatsTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ServerStatsTopic'],
            zserio_context: ServerStatsTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ServerStatsTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ServerStatsTopic):
            return ((not other.is_request_num_received_used() if not self.is_request_num_received_used() else (self._request_num_received_ == other._request_num_received_)) and
                    (not other.is_request_payload_bytes_used() if not self.is_request_payload_bytes_used() else (self._request_payload_bytes_ == other._request_payload_bytes_)) and
                    (not other.is_request_avg_payload_bytes_used() if not self.is_request_avg_payload_bytes_used() else (self._request_avg_payload_bytes_ == other._request_avg_payload_bytes_)) and
                    (not other.is_avg_time_request_to_response_used() if not self.is_avg_time_request_to_response_used() else (self._avg_time_request_to_response_ == other._avg_time_request_to_response_)) and
                    (not other.is_response_num_sent_used() if not self.is_response_num_sent_used() else (self._response_num_sent_ == other._response_num_sent_)) and
                    (not other.is_response_payload_bytes_used() if not self.is_response_payload_bytes_used() else (self._response_payload_bytes_ == other._response_payload_bytes_)) and
                    (not other.is_response_avg_payload_bytes_used() if not self.is_response_avg_payload_bytes_used() else (self._response_avg_payload_bytes_ == other._response_avg_payload_bytes_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        if self.is_request_num_received_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._request_num_received_)
        if self.is_request_payload_bytes_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._request_payload_bytes_)
        if self.is_request_avg_payload_bytes_used():
            result = zserio.hashcode.calc_hashcode_float32(result, self._request_avg_payload_bytes_)
        if self.is_avg_time_request_to_response_used():
            result = zserio.hashcode.calc_hashcode_float32(result, self._avg_time_request_to_response_)
        if self.is_response_num_sent_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._response_num_sent_)
        if self.is_response_payload_bytes_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._response_payload_bytes_)
        if self.is_response_avg_payload_bytes_used():
            result = zserio.hashcode.calc_hashcode_float32(result, self._response_avg_payload_bytes_)

        return result

    @property
    def request_num_received(self) -> typing.Optional[int]:
        return self._request_num_received_

    @request_num_received.setter
    def request_num_received(self, request_num_received_: typing.Optional[int]) -> None:
        self._request_num_received_ = request_num_received_

    def is_request_num_received_used(self) -> bool:
        return self.is_request_num_received_set()

    def is_request_num_received_set(self) -> bool:
        return not self._request_num_received_ is None

    def reset_request_num_received(self) -> None:
        self._request_num_received_ = None

    @property
    def request_payload_bytes(self) -> typing.Optional[int]:
        return self._request_payload_bytes_

    @request_payload_bytes.setter
    def request_payload_bytes(self, request_payload_bytes_: typing.Optional[int]) -> None:
        self._request_payload_bytes_ = request_payload_bytes_

    def is_request_payload_bytes_used(self) -> bool:
        return self.is_request_payload_bytes_set()

    def is_request_payload_bytes_set(self) -> bool:
        return not self._request_payload_bytes_ is None

    def reset_request_payload_bytes(self) -> None:
        self._request_payload_bytes_ = None

    @property
    def request_avg_payload_bytes(self) -> typing.Optional[float]:
        return self._request_avg_payload_bytes_

    @request_avg_payload_bytes.setter
    def request_avg_payload_bytes(self, request_avg_payload_bytes_: typing.Optional[float]) -> None:
        self._request_avg_payload_bytes_ = request_avg_payload_bytes_

    def is_request_avg_payload_bytes_used(self) -> bool:
        return self.is_request_avg_payload_bytes_set()

    def is_request_avg_payload_bytes_set(self) -> bool:
        return not self._request_avg_payload_bytes_ is None

    def reset_request_avg_payload_bytes(self) -> None:
        self._request_avg_payload_bytes_ = None

    @property
    def avg_time_request_to_response(self) -> typing.Optional[float]:
        return self._avg_time_request_to_response_

    @avg_time_request_to_response.setter
    def avg_time_request_to_response(self, avg_time_request_to_response_: typing.Optional[float]) -> None:
        self._avg_time_request_to_response_ = avg_time_request_to_response_

    def is_avg_time_request_to_response_used(self) -> bool:
        return self.is_avg_time_request_to_response_set()

    def is_avg_time_request_to_response_set(self) -> bool:
        return not self._avg_time_request_to_response_ is None

    def reset_avg_time_request_to_response(self) -> None:
        self._avg_time_request_to_response_ = None

    @property
    def response_num_sent(self) -> typing.Optional[int]:
        return self._response_num_sent_

    @response_num_sent.setter
    def response_num_sent(self, response_num_sent_: typing.Optional[int]) -> None:
        self._response_num_sent_ = response_num_sent_

    def is_response_num_sent_used(self) -> bool:
        return self.is_response_num_sent_set()

    def is_response_num_sent_set(self) -> bool:
        return not self._response_num_sent_ is None

    def reset_response_num_sent(self) -> None:
        self._response_num_sent_ = None

    @property
    def response_payload_bytes(self) -> typing.Optional[int]:
        return self._response_payload_bytes_

    @response_payload_bytes.setter
    def response_payload_bytes(self, response_payload_bytes_: typing.Optional[int]) -> None:
        self._response_payload_bytes_ = response_payload_bytes_

    def is_response_payload_bytes_used(self) -> bool:
        return self.is_response_payload_bytes_set()

    def is_response_payload_bytes_set(self) -> bool:
        return not self._response_payload_bytes_ is None

    def reset_response_payload_bytes(self) -> None:
        self._response_payload_bytes_ = None

    @property
    def response_avg_payload_bytes(self) -> typing.Optional[float]:
        return self._response_avg_payload_bytes_

    @response_avg_payload_bytes.setter
    def response_avg_payload_bytes(self, response_avg_payload_bytes_: typing.Optional[float]) -> None:
        self._response_avg_payload_bytes_ = response_avg_payload_bytes_

    def is_response_avg_payload_bytes_used(self) -> bool:
        return self.is_response_avg_payload_bytes_set()

    def is_response_avg_payload_bytes_set(self) -> bool:
        return not self._response_avg_payload_bytes_ is None

    def reset_response_avg_payload_bytes(self) -> None:
        self._response_avg_payload_bytes_ = None

    def init_packing_context(self, zserio_context: ServerStatsTopic.ZserioPackingContext) -> None:
        if self.is_request_num_received_used():
            zserio_context.request_num_received.init(zserio.array.VarUIntArrayTraits(), self._request_num_received_)
        if self.is_request_payload_bytes_used():
            zserio_context.request_payload_bytes.init(zserio.array.VarUIntArrayTraits(), self._request_payload_bytes_)
        if self.is_response_num_sent_used():
            zserio_context.response_num_sent.init(zserio.array.VarUIntArrayTraits(), self._response_num_sent_)
        if self.is_response_payload_bytes_used():
            zserio_context.response_payload_bytes.init(zserio.array.VarUIntArrayTraits(), self._response_payload_bytes_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_request_num_received_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._request_num_received_)
        end_bitposition += 1
        if self.is_request_payload_bytes_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._request_payload_bytes_)
        end_bitposition += 1
        if self.is_request_avg_payload_bytes_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_avg_time_request_to_response_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_response_num_sent_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._response_num_sent_)
        end_bitposition += 1
        if self.is_response_payload_bytes_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._response_payload_bytes_)
        end_bitposition += 1
        if self.is_response_avg_payload_bytes_used():
            end_bitposition += 32

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ServerStatsTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_request_num_received_used():
            end_bitposition += zserio_context.request_num_received.bitsizeof(zserio.array.VarUIntArrayTraits(), self._request_num_received_)
        end_bitposition += 1
        if self.is_request_payload_bytes_used():
            end_bitposition += zserio_context.request_payload_bytes.bitsizeof(zserio.array.VarUIntArrayTraits(), self._request_payload_bytes_)
        end_bitposition += 1
        if self.is_request_avg_payload_bytes_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_avg_time_request_to_response_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_response_num_sent_used():
            end_bitposition += zserio_context.response_num_sent.bitsizeof(zserio.array.VarUIntArrayTraits(), self._response_num_sent_)
        end_bitposition += 1
        if self.is_response_payload_bytes_used():
            end_bitposition += zserio_context.response_payload_bytes.bitsizeof(zserio.array.VarUIntArrayTraits(), self._response_payload_bytes_)
        end_bitposition += 1
        if self.is_response_avg_payload_bytes_used():
            end_bitposition += 32

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_request_num_received_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._request_num_received_)
        end_bitposition += 1
        if self.is_request_payload_bytes_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._request_payload_bytes_)
        end_bitposition += 1
        if self.is_request_avg_payload_bytes_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_avg_time_request_to_response_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_response_num_sent_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._response_num_sent_)
        end_bitposition += 1
        if self.is_response_payload_bytes_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._response_payload_bytes_)
        end_bitposition += 1
        if self.is_response_avg_payload_bytes_used():
            end_bitposition += 32

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ServerStatsTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_request_num_received_used():
            end_bitposition += zserio_context.request_num_received.bitsizeof(zserio.array.VarUIntArrayTraits(), self._request_num_received_)
        end_bitposition += 1
        if self.is_request_payload_bytes_used():
            end_bitposition += zserio_context.request_payload_bytes.bitsizeof(zserio.array.VarUIntArrayTraits(), self._request_payload_bytes_)
        end_bitposition += 1
        if self.is_request_avg_payload_bytes_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_avg_time_request_to_response_used():
            end_bitposition += 32
        end_bitposition += 1
        if self.is_response_num_sent_used():
            end_bitposition += zserio_context.response_num_sent.bitsizeof(zserio.array.VarUIntArrayTraits(), self._response_num_sent_)
        end_bitposition += 1
        if self.is_response_payload_bytes_used():
            end_bitposition += zserio_context.response_payload_bytes.bitsizeof(zserio.array.VarUIntArrayTraits(), self._response_payload_bytes_)
        end_bitposition += 1
        if self.is_response_avg_payload_bytes_used():
            end_bitposition += 32

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._request_num_received_ = zserio_reader.read_varuint()
        else:
            self._request_num_received_ = None
        if zserio_reader.read_bool():
            self._request_payload_bytes_ = zserio_reader.read_varuint()
        else:
            self._request_payload_bytes_ = None
        if zserio_reader.read_bool():
            self._request_avg_payload_bytes_ = zserio_reader.read_float32()
        else:
            self._request_avg_payload_bytes_ = None
        if zserio_reader.read_bool():
            self._avg_time_request_to_response_ = zserio_reader.read_float32()
        else:
            self._avg_time_request_to_response_ = None
        if zserio_reader.read_bool():
            self._response_num_sent_ = zserio_reader.read_varuint()
        else:
            self._response_num_sent_ = None
        if zserio_reader.read_bool():
            self._response_payload_bytes_ = zserio_reader.read_varuint()
        else:
            self._response_payload_bytes_ = None
        if zserio_reader.read_bool():
            self._response_avg_payload_bytes_ = zserio_reader.read_float32()
        else:
            self._response_avg_payload_bytes_ = None

    def read_packed(self, zserio_context: ServerStatsTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._request_num_received_ = zserio_context.request_num_received.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._request_num_received_ = None

        if zserio_reader.read_bool():
            self._request_payload_bytes_ = zserio_context.request_payload_bytes.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._request_payload_bytes_ = None

        if zserio_reader.read_bool():
            self._request_avg_payload_bytes_ = zserio_reader.read_float32()
        else:
            self._request_avg_payload_bytes_ = None

        if zserio_reader.read_bool():
            self._avg_time_request_to_response_ = zserio_reader.read_float32()
        else:
            self._avg_time_request_to_response_ = None

        if zserio_reader.read_bool():
            self._response_num_sent_ = zserio_context.response_num_sent.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._response_num_sent_ = None

        if zserio_reader.read_bool():
            self._response_payload_bytes_ = zserio_context.response_payload_bytes.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._response_payload_bytes_ = None

        if zserio_reader.read_bool():
            self._response_avg_payload_bytes_ = zserio_reader.read_float32()
        else:
            self._response_avg_payload_bytes_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_request_num_received_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._request_num_received_)
        else:
            zserio_writer.write_bool(False)
        if self.is_request_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._request_payload_bytes_)
        else:
            zserio_writer.write_bool(False)
        if self.is_request_avg_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._request_avg_payload_bytes_)
        else:
            zserio_writer.write_bool(False)
        if self.is_avg_time_request_to_response_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._avg_time_request_to_response_)
        else:
            zserio_writer.write_bool(False)
        if self.is_response_num_sent_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._response_num_sent_)
        else:
            zserio_writer.write_bool(False)
        if self.is_response_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._response_payload_bytes_)
        else:
            zserio_writer.write_bool(False)
        if self.is_response_avg_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._response_avg_payload_bytes_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: ServerStatsTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_request_num_received_used():
            zserio_writer.write_bool(True)
            zserio_context.request_num_received.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._request_num_received_)
        else:
            zserio_writer.write_bool(False)

        if self.is_request_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_context.request_payload_bytes.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._request_payload_bytes_)
        else:
            zserio_writer.write_bool(False)

        if self.is_request_avg_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._request_avg_payload_bytes_)
        else:
            zserio_writer.write_bool(False)

        if self.is_avg_time_request_to_response_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._avg_time_request_to_response_)
        else:
            zserio_writer.write_bool(False)

        if self.is_response_num_sent_used():
            zserio_writer.write_bool(True)
            zserio_context.response_num_sent.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._response_num_sent_)
        else:
            zserio_writer.write_bool(False)

        if self.is_response_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_context.response_payload_bytes.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._response_payload_bytes_)
        else:
            zserio_writer.write_bool(False)

        if self.is_response_avg_payload_bytes_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float32(self._response_avg_payload_bytes_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._request_num_received_ = zserio.array.DeltaContext()
            self._request_payload_bytes_ = zserio.array.DeltaContext()
            self._response_num_sent_ = zserio.array.DeltaContext()
            self._response_payload_bytes_ = zserio.array.DeltaContext()

        @property
        def request_num_received(self):
            return self._request_num_received_

        @property
        def request_payload_bytes(self):
            return self._request_payload_bytes_

        @property
        def response_num_sent(self):
            return self._response_num_sent_

        @property
        def response_payload_bytes(self):
            return self._response_payload_bytes_
