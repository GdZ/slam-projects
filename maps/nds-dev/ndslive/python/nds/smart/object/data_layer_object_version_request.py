# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.object.smart_layer_object_reference
import nds.smart.types.data_layer_id
import nds.smart.types.data_layer_lifetime

class DataLayerObjectVersionRequest:
    def __init__(
            self,
            object_reference_: typing.Union[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, None] = None,
            layer_id_: nds.smart.types.data_layer_id.DataLayerId = nds.smart.types.data_layer_id.DataLayerId(),
            lifetime_info_: typing.Union[nds.smart.types.data_layer_lifetime.DataLayerLifetime, None] = None) -> None:
        self._object_reference_ = object_reference_
        self._layer_id_ = layer_id_
        self._lifetime_info_ = lifetime_info_

    @classmethod
    def from_reader(
            cls: typing.Type['DataLayerObjectVersionRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'DataLayerObjectVersionRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DataLayerObjectVersionRequest'],
            zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DataLayerObjectVersionRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DataLayerObjectVersionRequest):
            return ((self._object_reference_ == other._object_reference_) and
                    (self._layer_id_ == other._layer_id_) and
                    (self._lifetime_info_ == other._lifetime_info_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._object_reference_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._layer_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lifetime_info_)

        return result

    @property
    def object_reference(self) -> typing.Union[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, None]:
        return self._object_reference_

    @object_reference.setter
    def object_reference(self, object_reference_: typing.Union[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, None]) -> None:
        self._object_reference_ = object_reference_

    @property
    def layer_id(self) -> nds.smart.types.data_layer_id.DataLayerId:
        return self._layer_id_

    @layer_id.setter
    def layer_id(self, layer_id_: nds.smart.types.data_layer_id.DataLayerId) -> None:
        self._layer_id_ = layer_id_

    @property
    def lifetime_info(self) -> typing.Union[nds.smart.types.data_layer_lifetime.DataLayerLifetime, None]:
        return self._lifetime_info_

    @lifetime_info.setter
    def lifetime_info(self, lifetime_info_: typing.Union[nds.smart.types.data_layer_lifetime.DataLayerLifetime, None]) -> None:
        self._lifetime_info_ = lifetime_info_

    def init_packing_context(self, zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext) -> None:
        self._object_reference_.init_packing_context(zserio_context.object_reference)
        zserio_context.layer_id.init(zserio.array.VarUInt16ArrayTraits(), self._layer_id_)
        self._lifetime_info_.init_packing_context(zserio_context.lifetime_info)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._object_reference_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._layer_id_)
        end_bitposition += self._lifetime_info_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._object_reference_.bitsizeof_packed(zserio_context.object_reference, end_bitposition)
        end_bitposition += zserio_context.layer_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._layer_id_)
        end_bitposition += self._lifetime_info_.bitsizeof_packed(zserio_context.lifetime_info, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._object_reference_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._layer_id_)
        end_bitposition = self._lifetime_info_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._object_reference_.initialize_offsets_packed(zserio_context.object_reference, end_bitposition)
        end_bitposition += zserio_context.layer_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._layer_id_)
        end_bitposition = self._lifetime_info_.initialize_offsets_packed(zserio_context.lifetime_info, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._object_reference_ = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(zserio_reader)
        self._layer_id_ = zserio_reader.read_varuint16()
        self._lifetime_info_ = nds.smart.types.data_layer_lifetime.DataLayerLifetime.from_reader(zserio_reader)

    def read_packed(self, zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._object_reference_ = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader_packed(zserio_context.object_reference, zserio_reader)

        self._layer_id_ = zserio_context.layer_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._lifetime_info_ = nds.smart.types.data_layer_lifetime.DataLayerLifetime.from_reader_packed(zserio_context.lifetime_info, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._object_reference_.write(zserio_writer)
        zserio_writer.write_varuint16(self._layer_id_)
        self._lifetime_info_.write(zserio_writer)

    def write_packed(self, zserio_context: DataLayerObjectVersionRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._object_reference_.write_packed(zserio_context.object_reference, zserio_writer)

        zserio_context.layer_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._layer_id_)

        self._lifetime_info_.write_packed(zserio_context.lifetime_info, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._object_reference_ = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.ZserioPackingContext()
            self._layer_id_ = zserio.array.DeltaContext()
            self._lifetime_info_ = nds.smart.types.data_layer_lifetime.DataLayerLifetime.ZserioPackingContext()

        @property
        def object_reference(self):
            return self._object_reference_

        @property
        def layer_id(self):
            return self._layer_id_

        @property
        def lifetime_info(self):
            return self._lifetime_info_
