# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.object.smart_layer_object_reference
import nds.smart.types.smart_layer_header

class SmartLayerObjectHeaderList:
    def __init__(
            self,
            num_objects_: int = int(),
            references_: typing.List[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference] = None,
            headers_: typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader] = None) -> None:
        self._num_objects_ = num_objects_
        self._references_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_references()), references_)
        self._headers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_headers()), headers_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerObjectHeaderList'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectHeaderList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerObjectHeaderList'],
            zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectHeaderList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerObjectHeaderList):
            return ((self._num_objects_ == other._num_objects_) and
                    (self._references_ == other._references_) and
                    (self._headers_ == other._headers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_objects_)
        result = zserio.hashcode.calc_hashcode_object(result, self._references_)
        result = zserio.hashcode.calc_hashcode_object(result, self._headers_)

        return result

    @property
    def num_objects(self) -> int:
        return self._num_objects_

    @num_objects.setter
    def num_objects(self, num_objects_: int) -> None:
        self._num_objects_ = num_objects_

    @property
    def references(self) -> typing.List[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference]:
        return self._references_.raw_array

    @references.setter
    def references(self, references_: typing.List[nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference]) -> None:
        self._references_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_references()), references_)

    @property
    def headers(self) -> typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader]:
        return self._headers_.raw_array

    @headers.setter
    def headers(self, headers_: typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader]) -> None:
        self._headers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_headers()), headers_)

    def init_packing_context(self, zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext) -> None:
        zserio_context.num_objects.init(zserio.array.VarSizeArrayTraits(), self._num_objects_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_objects_)
        end_bitposition += self._references_.bitsizeof(end_bitposition)
        end_bitposition += self._headers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_objects.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_objects_)
        end_bitposition += self._references_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._headers_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_objects_)
        end_bitposition = self._references_.initialize_offsets(end_bitposition)
        end_bitposition = self._headers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_objects.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_objects_)
        end_bitposition = self._references_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._headers_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_objects_ = zserio_reader.read_varsize()
        self._references_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_references()), zserio_reader, self._num_objects_)
        self._headers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_headers()), zserio_reader, self._num_objects_)

    def read_packed(self, zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_objects_ = zserio_context.num_objects.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._references_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_references()), zserio_reader, self._num_objects_)

        self._headers_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_headers()), zserio_reader, self._num_objects_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_objects_)

        # check array length
        if len(self._references_) != (self._num_objects_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObjectHeaderList.references: "
                                                f"{len(self._references_)} != {self._num_objects_}!")
        self._references_.write(zserio_writer)

        # check array length
        if len(self._headers_) != (self._num_objects_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObjectHeaderList.headers: "
                                                f"{len(self._headers_)} != {self._num_objects_}!")
        self._headers_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerObjectHeaderList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_objects.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_objects_)

        # check array length
        if len(self._references_) != (self._num_objects_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObjectHeaderList.references: "
                                                f"{len(self._references_)} != {self._num_objects_}!")
        self._references_.write_packed(zserio_writer)

        # check array length
        if len(self._headers_) != (self._num_objects_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObjectHeaderList.headers: "
                                                f"{len(self._headers_)} != {self._num_objects_}!")
        self._headers_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_objects_ = zserio.array.DeltaContext()

        @property
        def num_objects(self):
            return self._num_objects_

    class _ZserioElementFactory_references:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference:
            del zserio_index
            return nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.ZserioPackingContext:
            return nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference:
            del zserio_index
            return nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_headers:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            del zserio_index
            return nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext:
            return nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            del zserio_index
            return nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader_packed(zserio_context, zserio_reader)
