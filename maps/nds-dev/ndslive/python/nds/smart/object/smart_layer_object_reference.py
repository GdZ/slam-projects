# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.object.smart_layer_object_id

class SmartLayerObjectReference:
    def __init__(
            self,
            id_: nds.smart.object.smart_layer_object_id.SmartLayerObjectId = nds.smart.object.smart_layer_object_id.SmartLayerObjectId()) -> None:
        self._id_ = id_

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerObjectReference'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerObjectReference'],
            zserio_context: SmartLayerObjectReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerObjectReference):
            return (self._id_ == other._id_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._id_)

        return result

    @property
    def id(self) -> nds.smart.object.smart_layer_object_id.SmartLayerObjectId:
        return self._id_

    @id.setter
    def id(self, id_: nds.smart.object.smart_layer_object_id.SmartLayerObjectId) -> None:
        self._id_ = id_

    def init_packing_context(self, zserio_context: SmartLayerObjectReference.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUIntArrayTraits(), self._id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerObjectReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerObjectReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint()

    def read_packed(self, zserio_context: SmartLayerObjectReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._id_)

    def write_packed(self, zserio_context: SmartLayerObjectReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._id_)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()

        @property
        def id(self):
            return self._id_
