# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.object.smart_layer_object_id
import nds.smart.types.data_layer
import nds.smart.types.smart_layer_header

class SmartLayerObject:
    def __init__(
            self,
            id_: nds.smart.object.smart_layer_object_id.SmartLayerObjectId = nds.smart.object.smart_layer_object_id.SmartLayerObjectId(),
            header_: typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None] = None,
            layers_: typing.List[nds.smart.types.data_layer.DataLayer] = None) -> None:
        self._id_ = id_
        self._header_ = header_
        self._layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), layers_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerObject'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObject':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerObject'],
            zserio_context: SmartLayerObject.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObject':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerObject):
            return ((self._id_ == other._id_) and
                    (self._header_ == other._header_) and
                    (self._layers_ == other._layers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._layers_)

        return result

    @property
    def id(self) -> nds.smart.object.smart_layer_object_id.SmartLayerObjectId:
        return self._id_

    @id.setter
    def id(self, id_: nds.smart.object.smart_layer_object_id.SmartLayerObjectId) -> None:
        self._id_ = id_

    @property
    def header(self) -> typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.smart.types.smart_layer_header.SmartLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def layers(self) -> typing.List[nds.smart.types.data_layer.DataLayer]:
        return self._layers_.raw_array

    @layers.setter
    def layers(self, layers_: typing.List[nds.smart.types.data_layer.DataLayer]) -> None:
        self._layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), layers_)

    def init_packing_context(self, zserio_context: SmartLayerObject.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUIntArrayTraits(), self._id_)
        self._header_.init_packing_context(zserio_context.header)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += self._layers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerObject.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += self._layers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition = self._layers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerObject.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition = self._layers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint()
        self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(zserio_reader)
        self._layers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), zserio_reader, self._header_.num_data_layers)

    def read_packed(self, zserio_context: SmartLayerObject.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._layers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layers()), zserio_reader, self._header_.num_data_layers)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._id_)

        self._header_.write(zserio_writer)

        # check array length
        if len(self._layers_) != (self._header_.num_data_layers):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObject.layers: "
                                                f"{len(self._layers_)} != {self._header_.num_data_layers}!")
        self._layers_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerObject.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._id_)

        self._header_.write_packed(zserio_context.header, zserio_writer)

        # check array length
        if len(self._layers_) != (self._header_.num_data_layers):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartLayerObject.layers: "
                                                f"{len(self._layers_)} != {self._header_.num_data_layers}!")
        self._layers_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()
            self._header_ = nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

        @property
        def header(self):
            return self._header_

    class _ZserioElementFactory_layers:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.data_layer.DataLayer:
            del zserio_index
            return nds.smart.types.data_layer.DataLayer.from_reader(zserio_reader)
