# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.metadata.smart_layer_definition
import nds.smart.object.smart_layer_object_class

class SmartLayerObjectDefinition:
    def __init__(
            self,
            smart_object_class_: nds.smart.object.smart_layer_object_class.SmartLayerObjectClass = nds.smart.object.smart_layer_object_class.SmartLayerObjectClass(),
            smart_layer_definition_: typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None] = None) -> None:
        self._smart_object_class_ = smart_object_class_
        self._smart_layer_definition_ = smart_layer_definition_

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerObjectDefinition'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectDefinition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerObjectDefinition'],
            zserio_context: SmartLayerObjectDefinition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerObjectDefinition':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerObjectDefinition):
            return ((self._smart_object_class_ == other._smart_object_class_) and
                    (self._smart_layer_definition_ == other._smart_layer_definition_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._smart_object_class_)
        result = zserio.hashcode.calc_hashcode_object(result, self._smart_layer_definition_)

        return result

    @property
    def smart_object_class(self) -> nds.smart.object.smart_layer_object_class.SmartLayerObjectClass:
        return self._smart_object_class_

    @smart_object_class.setter
    def smart_object_class(self, smart_object_class_: nds.smart.object.smart_layer_object_class.SmartLayerObjectClass) -> None:
        self._smart_object_class_ = smart_object_class_

    @property
    def smart_layer_definition(self) -> typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None]:
        return self._smart_layer_definition_

    @smart_layer_definition.setter
    def smart_layer_definition(self, smart_layer_definition_: typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None]) -> None:
        self._smart_layer_definition_ = smart_layer_definition_

    def init_packing_context(self, zserio_context: SmartLayerObjectDefinition.ZserioPackingContext) -> None:
        zserio_context.smart_object_class.init(zserio.array.VarUInt32ArrayTraits(), self._smart_object_class_)
        self._smart_layer_definition_.init_packing_context(zserio_context.smart_layer_definition)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._smart_object_class_)
        end_bitposition += self._smart_layer_definition_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerObjectDefinition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.smart_object_class.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._smart_object_class_)
        end_bitposition += self._smart_layer_definition_.bitsizeof_packed(zserio_context.smart_layer_definition, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._smart_object_class_)
        end_bitposition = self._smart_layer_definition_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerObjectDefinition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.smart_object_class.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._smart_object_class_)
        end_bitposition = self._smart_layer_definition_.initialize_offsets_packed(zserio_context.smart_layer_definition, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._smart_object_class_ = zserio_reader.read_varuint32()
        self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader(zserio_reader)

    def read_packed(self, zserio_context: SmartLayerObjectDefinition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._smart_object_class_ = zserio_context.smart_object_class.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader_packed(zserio_context.smart_layer_definition, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._smart_object_class_)
        self._smart_layer_definition_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerObjectDefinition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.smart_object_class.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._smart_object_class_)

        self._smart_layer_definition_.write_packed(zserio_context.smart_layer_definition, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._smart_object_class_ = zserio.array.DeltaContext()
            self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.ZserioPackingContext()

        @property
        def smart_object_class(self):
            return self._smart_object_class_

        @property
        def smart_layer_definition(self):
            return self._smart_layer_definition_
