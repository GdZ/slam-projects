# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.metadata.smart_layer_content
import nds.smart.types.data_layer_definition

class SmartLayerDefinition:
    def __init__(
            self,
            data_contents_: typing.Union[nds.smart.metadata.smart_layer_content.SmartLayerContent, None] = None,
            layer_definitions_: typing.List[nds.smart.types.data_layer_definition.DataLayerDefinition] = None) -> None:
        self._data_contents_ = data_contents_
        self._layer_definitions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layer_definitions()), layer_definitions_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerDefinition'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerDefinition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerDefinition'],
            zserio_context: SmartLayerDefinition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerDefinition':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerDefinition):
            return ((self._data_contents_ == other._data_contents_) and
                    (self._layer_definitions_ == other._layer_definitions_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._data_contents_)
        result = zserio.hashcode.calc_hashcode_object(result, self._layer_definitions_)

        return result

    @property
    def data_contents(self) -> typing.Union[nds.smart.metadata.smart_layer_content.SmartLayerContent, None]:
        return self._data_contents_

    @data_contents.setter
    def data_contents(self, data_contents_: typing.Union[nds.smart.metadata.smart_layer_content.SmartLayerContent, None]) -> None:
        self._data_contents_ = data_contents_

    @property
    def layer_definitions(self) -> typing.List[nds.smart.types.data_layer_definition.DataLayerDefinition]:
        return self._layer_definitions_.raw_array

    @layer_definitions.setter
    def layer_definitions(self, layer_definitions_: typing.List[nds.smart.types.data_layer_definition.DataLayerDefinition]) -> None:
        self._layer_definitions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layer_definitions()), layer_definitions_, is_auto=True)

    def init_packing_context(self, zserio_context: SmartLayerDefinition.ZserioPackingContext) -> None:
        self._data_contents_.init_packing_context(zserio_context.data_contents)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._data_contents_.bitsizeof(end_bitposition)
        end_bitposition += self._layer_definitions_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerDefinition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._data_contents_.bitsizeof_packed(zserio_context.data_contents, end_bitposition)
        end_bitposition += self._layer_definitions_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._data_contents_.initialize_offsets(end_bitposition)
        end_bitposition = self._layer_definitions_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerDefinition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._data_contents_.initialize_offsets_packed(zserio_context.data_contents, end_bitposition)
        end_bitposition = self._layer_definitions_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._data_contents_ = nds.smart.metadata.smart_layer_content.SmartLayerContent.from_reader(zserio_reader)

        self._layer_definitions_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layer_definitions()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._layer_definitions_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerDefinition.layerDefinitions!")

    def read_packed(self, zserio_context: SmartLayerDefinition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._data_contents_ = nds.smart.metadata.smart_layer_content.SmartLayerContent.from_reader_packed(zserio_context.data_contents, zserio_reader)

        self._layer_definitions_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_layer_definitions()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._layer_definitions_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerDefinition.layerDefinitions!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._data_contents_.write(zserio_writer)

        # check constraint
        if not (len(self._layer_definitions_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerDefinition.layerDefinitions!")
        self._layer_definitions_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartLayerDefinition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._data_contents_.write_packed(zserio_context.data_contents, zserio_writer)

        # check constraint
        if not (len(self._layer_definitions_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SmartLayerDefinition.layerDefinitions!")
        self._layer_definitions_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._data_contents_ = nds.smart.metadata.smart_layer_content.SmartLayerContent.ZserioPackingContext()

        @property
        def data_contents(self):
            return self._data_contents_

    class _ZserioElementFactory_layer_definitions:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.data_layer_definition.DataLayerDefinition:
            del zserio_index
            return nds.smart.types.data_layer_definition.DataLayerDefinition.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.types.data_layer_definition.DataLayerDefinition.ZserioPackingContext:
            return nds.smart.types.data_layer_definition.DataLayerDefinition.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.types.data_layer_definition.DataLayerDefinition.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.data_layer_definition.DataLayerDefinition:
            del zserio_index
            return nds.smart.types.data_layer_definition.DataLayerDefinition.from_reader_packed(zserio_context, zserio_reader)
