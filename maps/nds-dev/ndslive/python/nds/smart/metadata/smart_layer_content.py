# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.road_type
import nds.core.vehicle.vehicle_class_specification
import nds.core.vehicle.vehicle_type_information

class SmartLayerContent:
    def __init__(
            self,
            covered_road_types_: typing.List[nds.core.types.road_type.RoadType] = None,
            vehicle_types_: typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None] = None,
            vehicle_class_: typing.Optional[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification] = None) -> None:
        self._covered_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_covered_road_types()), covered_road_types_, is_auto=True)
        self._vehicle_types_ = vehicle_types_
        self._vehicle_class_ = vehicle_class_

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerContent'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerContent':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerContent'],
            zserio_context: SmartLayerContent.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerContent':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerContent):
            return ((self._covered_road_types_ == other._covered_road_types_) and
                    (self._vehicle_types_ == other._vehicle_types_) and
                    (not other.is_vehicle_class_used() if not self.is_vehicle_class_used() else (self._vehicle_class_ == other._vehicle_class_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._covered_road_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_types_)
        if self.is_vehicle_class_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_class_)

        return result

    @property
    def covered_road_types(self) -> typing.List[nds.core.types.road_type.RoadType]:
        return self._covered_road_types_.raw_array

    @covered_road_types.setter
    def covered_road_types(self, covered_road_types_: typing.List[nds.core.types.road_type.RoadType]) -> None:
        self._covered_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_covered_road_types()), covered_road_types_, is_auto=True)

    @property
    def vehicle_types(self) -> typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None]:
        return self._vehicle_types_

    @vehicle_types.setter
    def vehicle_types(self, vehicle_types_: typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None]) -> None:
        self._vehicle_types_ = vehicle_types_

    @property
    def vehicle_class(self) -> typing.Optional[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification]:
        return self._vehicle_class_

    @vehicle_class.setter
    def vehicle_class(self, vehicle_class_: typing.Optional[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification]) -> None:
        self._vehicle_class_ = vehicle_class_

    def is_vehicle_class_used(self) -> bool:
        return self.is_vehicle_class_set()

    def is_vehicle_class_set(self) -> bool:
        return not self._vehicle_class_ is None

    def reset_vehicle_class(self) -> None:
        self._vehicle_class_ = None

    def init_packing_context(self, zserio_context: SmartLayerContent.ZserioPackingContext) -> None:
        self._vehicle_types_.init_packing_context(zserio_context.vehicle_types)
        if self.is_vehicle_class_used():
            self._vehicle_class_.init_packing_context(zserio_context.vehicle_class)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._covered_road_types_.bitsizeof(end_bitposition)
        end_bitposition += self._vehicle_types_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_class_used():
            end_bitposition += self._vehicle_class_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerContent.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._covered_road_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._vehicle_types_.bitsizeof_packed(zserio_context.vehicle_types, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_class_used():
            end_bitposition += self._vehicle_class_.bitsizeof_packed(zserio_context.vehicle_class, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._covered_road_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._vehicle_types_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_class_used():
            end_bitposition = self._vehicle_class_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerContent.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._covered_road_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._vehicle_types_.initialize_offsets_packed(zserio_context.vehicle_types, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_class_used():
            end_bitposition = self._vehicle_class_.initialize_offsets_packed(zserio_context.vehicle_class, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._covered_road_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_covered_road_types()), zserio_reader, is_auto=True)
        self._vehicle_types_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._vehicle_class_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.from_reader(zserio_reader)
        else:
            self._vehicle_class_ = None

    def read_packed(self, zserio_context: SmartLayerContent.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._covered_road_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_covered_road_types()), zserio_reader, is_auto=True)

        self._vehicle_types_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.from_reader_packed(zserio_context.vehicle_types, zserio_reader)

        if zserio_reader.read_bool():
            self._vehicle_class_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.from_reader_packed(zserio_context.vehicle_class, zserio_reader)
        else:
            self._vehicle_class_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._covered_road_types_.write(zserio_writer)
        self._vehicle_types_.write(zserio_writer)
        if self.is_vehicle_class_used():
            zserio_writer.write_bool(True)
            self._vehicle_class_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: SmartLayerContent.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._covered_road_types_.write_packed(zserio_writer)

        self._vehicle_types_.write_packed(zserio_context.vehicle_types, zserio_writer)

        if self.is_vehicle_class_used():
            zserio_writer.write_bool(True)
            self._vehicle_class_.write_packed(zserio_context.vehicle_class, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._vehicle_types_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.ZserioPackingContext()
            self._vehicle_class_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.ZserioPackingContext()

        @property
        def vehicle_types(self):
            return self._vehicle_types_

        @property
        def vehicle_class(self):
            return self._vehicle_class_

    class _ZserioElementFactory_covered_road_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.road_type.RoadType.ZserioPackingContext:
            return nds.core.types.road_type.RoadType.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.road_type.RoadType.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader_packed(zserio_context, zserio_reader)
