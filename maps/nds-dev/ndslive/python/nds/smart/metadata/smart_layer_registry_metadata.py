# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.metadata.smart_layer_definition
import nds.smart.metadata.smart_layer_mesh_index_content
import nds.smart.metadata.smart_layer_service_capabilities
import nds.smart.object.smart_layer_object_class
import nds.smart.types.smart_layer_type

class SmartLayerRegistryMetadata:
    def __init__(
            self,
            smart_layer_type_: typing.Union[nds.smart.types.smart_layer_type.SmartLayerType, None] = None,
            smart_layer_definition_: typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None] = None,
            capabilities_: typing.Union[nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities, None] = None,
            supported_levels_: typing.Optional[typing.List[int]] = None,
            mesh_index_content_: typing.Optional[nds.smart.metadata.smart_layer_mesh_index_content.SmartLayerMeshIndexContent] = None,
            object_class_: typing.Optional[nds.smart.object.smart_layer_object_class.SmartLayerObjectClass] = None) -> None:
        self._smart_layer_type_ = smart_layer_type_
        self._smart_layer_definition_ = smart_layer_definition_
        self._capabilities_ = capabilities_
        if supported_levels_ is None:
            self._supported_levels_ = None
        else:
            self._supported_levels_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(4), supported_levels_, is_auto=True)
        self._mesh_index_content_ = mesh_index_content_
        self._object_class_ = object_class_

    @classmethod
    def from_reader(
            cls: typing.Type['SmartLayerRegistryMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerRegistryMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartLayerRegistryMetadata'],
            zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartLayerRegistryMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartLayerRegistryMetadata):
            return ((self._smart_layer_type_ == other._smart_layer_type_) and
                    (self._smart_layer_definition_ == other._smart_layer_definition_) and
                    (self._capabilities_ == other._capabilities_) and
                    (not other.is_supported_levels_used() if not self.is_supported_levels_used() else (self._supported_levels_ == other._supported_levels_)) and
                    (not other.is_mesh_index_content_used() if not self.is_mesh_index_content_used() else (self._mesh_index_content_ == other._mesh_index_content_)) and
                    (not other.is_object_class_used() if not self.is_object_class_used() else (self._object_class_ == other._object_class_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._smart_layer_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._smart_layer_definition_)
        result = zserio.hashcode.calc_hashcode_object(result, self._capabilities_)
        if self.is_supported_levels_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._supported_levels_)
        if self.is_mesh_index_content_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._mesh_index_content_)
        if self.is_object_class_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._object_class_)

        return result

    @property
    def smart_layer_type(self) -> typing.Union[nds.smart.types.smart_layer_type.SmartLayerType, None]:
        return self._smart_layer_type_

    @smart_layer_type.setter
    def smart_layer_type(self, smart_layer_type_: typing.Union[nds.smart.types.smart_layer_type.SmartLayerType, None]) -> None:
        self._smart_layer_type_ = smart_layer_type_

    @property
    def smart_layer_definition(self) -> typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None]:
        return self._smart_layer_definition_

    @smart_layer_definition.setter
    def smart_layer_definition(self, smart_layer_definition_: typing.Union[nds.smart.metadata.smart_layer_definition.SmartLayerDefinition, None]) -> None:
        self._smart_layer_definition_ = smart_layer_definition_

    @property
    def capabilities(self) -> typing.Union[nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities, None]:
        return self._capabilities_

    @capabilities.setter
    def capabilities(self, capabilities_: typing.Union[nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities, None]) -> None:
        self._capabilities_ = capabilities_

    @property
    def supported_levels(self) -> typing.Optional[typing.List[int]]:
        return None if self._supported_levels_ is None else self._supported_levels_.raw_array

    @supported_levels.setter
    def supported_levels(self, supported_levels_: typing.Optional[typing.List[int]]) -> None:
        if supported_levels_ is None:
            self._supported_levels_ = None
        else:
            self._supported_levels_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(4), supported_levels_, is_auto=True)

    def is_supported_levels_used(self) -> bool:
        return self._smart_layer_type_ == nds.smart.types.smart_layer_type.SmartLayerType.SMART_LAYER_TILE or self._smart_layer_type_ == nds.smart.types.smart_layer_type.SmartLayerType.SMART_LAYER_MESH

    def is_supported_levels_set(self) -> bool:
        return not self._supported_levels_ is None

    def reset_supported_levels(self) -> None:
        self._supported_levels_ = None

    @property
    def mesh_index_content(self) -> typing.Optional[nds.smart.metadata.smart_layer_mesh_index_content.SmartLayerMeshIndexContent]:
        return self._mesh_index_content_

    @mesh_index_content.setter
    def mesh_index_content(self, mesh_index_content_: typing.Optional[nds.smart.metadata.smart_layer_mesh_index_content.SmartLayerMeshIndexContent]) -> None:
        self._mesh_index_content_ = mesh_index_content_

    def is_mesh_index_content_used(self) -> bool:
        return self._smart_layer_type_ == nds.smart.types.smart_layer_type.SmartLayerType.SMART_LAYER_MESH

    def is_mesh_index_content_set(self) -> bool:
        return not self._mesh_index_content_ is None

    def reset_mesh_index_content(self) -> None:
        self._mesh_index_content_ = None

    @property
    def object_class(self) -> typing.Optional[nds.smart.object.smart_layer_object_class.SmartLayerObjectClass]:
        return self._object_class_

    @object_class.setter
    def object_class(self, object_class_: typing.Optional[nds.smart.object.smart_layer_object_class.SmartLayerObjectClass]) -> None:
        self._object_class_ = object_class_

    def is_object_class_used(self) -> bool:
        return self._smart_layer_type_ == nds.smart.types.smart_layer_type.SmartLayerType.SMART_LAYER_OBJECT

    def is_object_class_set(self) -> bool:
        return not self._object_class_ is None

    def reset_object_class(self) -> None:
        self._object_class_ = None

    def init_packing_context(self, zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext) -> None:
        self._smart_layer_type_.init_packing_context(zserio_context.smart_layer_type)
        self._smart_layer_definition_.init_packing_context(zserio_context.smart_layer_definition)
        self._capabilities_.init_packing_context(zserio_context.capabilities)
        if self.is_object_class_used():
            zserio_context.object_class.init(zserio.array.VarUInt32ArrayTraits(), self._object_class_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._smart_layer_type_.bitsizeof(end_bitposition)
        end_bitposition += self._smart_layer_definition_.bitsizeof(end_bitposition)
        end_bitposition += self._capabilities_.bitsizeof(end_bitposition)
        if self.is_supported_levels_used():
            end_bitposition += self._supported_levels_.bitsizeof(end_bitposition)
        if self.is_mesh_index_content_used():
            end_bitposition += self._mesh_index_content_.bitsizeof(end_bitposition)
        if self.is_object_class_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._object_class_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._smart_layer_type_.bitsizeof_packed(zserio_context.smart_layer_type, end_bitposition)
        end_bitposition += self._smart_layer_definition_.bitsizeof_packed(zserio_context.smart_layer_definition, end_bitposition)
        end_bitposition += self._capabilities_.bitsizeof_packed(zserio_context.capabilities, end_bitposition)
        if self.is_supported_levels_used():
            end_bitposition += self._supported_levels_.bitsizeof_packed(end_bitposition)
        if self.is_mesh_index_content_used():
            end_bitposition += self._mesh_index_content_.bitsizeof(end_bitposition)
        if self.is_object_class_used():
            end_bitposition += zserio_context.object_class.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._object_class_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._smart_layer_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._smart_layer_definition_.initialize_offsets(end_bitposition)
        end_bitposition = self._capabilities_.initialize_offsets(end_bitposition)
        if self.is_supported_levels_used():
            end_bitposition = self._supported_levels_.initialize_offsets(end_bitposition)
        if self.is_mesh_index_content_used():
            end_bitposition = self._mesh_index_content_.initialize_offsets(end_bitposition)
        if self.is_object_class_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._object_class_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._smart_layer_type_.initialize_offsets_packed(zserio_context.smart_layer_type, end_bitposition)
        end_bitposition = self._smart_layer_definition_.initialize_offsets_packed(zserio_context.smart_layer_definition, end_bitposition)
        end_bitposition = self._capabilities_.initialize_offsets_packed(zserio_context.capabilities, end_bitposition)
        if self.is_supported_levels_used():
            end_bitposition = self._supported_levels_.initialize_offsets_packed(end_bitposition)
        if self.is_mesh_index_content_used():
            end_bitposition = self._mesh_index_content_.initialize_offsets(end_bitposition)
        if self.is_object_class_used():
            end_bitposition += zserio_context.object_class.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._object_class_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._smart_layer_type_ = nds.smart.types.smart_layer_type.SmartLayerType.from_reader(zserio_reader)
        self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader(zserio_reader)
        self._capabilities_ = nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities.from_reader(zserio_reader, self._smart_layer_type_)
        if self.is_supported_levels_used():
            self._supported_levels_ = zserio.array.Array.from_reader(zserio.array.BitFieldArrayTraits(4), zserio_reader, is_auto=True)
        else:
            self._supported_levels_ = None
        if self.is_mesh_index_content_used():
            self._mesh_index_content_ = nds.smart.metadata.smart_layer_mesh_index_content.SmartLayerMeshIndexContent.from_reader(zserio_reader)
        else:
            self._mesh_index_content_ = None
        if self.is_object_class_used():
            self._object_class_ = zserio_reader.read_varuint32()
        else:
            self._object_class_ = None

    def read_packed(self, zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._smart_layer_type_ = nds.smart.types.smart_layer_type.SmartLayerType.from_reader_packed(zserio_context.smart_layer_type, zserio_reader)

        self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader_packed(zserio_context.smart_layer_definition, zserio_reader)

        self._capabilities_ = nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities.from_reader_packed(zserio_context.capabilities, zserio_reader, self._smart_layer_type_)

        if self.is_supported_levels_used():
            self._supported_levels_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(4), zserio_reader, is_auto=True)
        else:
            self._supported_levels_ = None

        if self.is_mesh_index_content_used():
            self._mesh_index_content_ = nds.smart.metadata.smart_layer_mesh_index_content.SmartLayerMeshIndexContent.from_reader(zserio_reader)
        else:
            self._mesh_index_content_ = None

        if self.is_object_class_used():
            self._object_class_ = zserio_context.object_class.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._object_class_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._smart_layer_type_.write(zserio_writer)

        self._smart_layer_definition_.write(zserio_writer)

        # check parameters
        if self._capabilities_.type is not (self._smart_layer_type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field SmartLayerRegistryMetadata.capabilities: "
                                                f"{self._capabilities_.type} != {self._smart_layer_type_}!")
        self._capabilities_.write(zserio_writer)

        if self.is_supported_levels_used():
            self._supported_levels_.write(zserio_writer)

        if self.is_mesh_index_content_used():
            self._mesh_index_content_.write(zserio_writer)

        if self.is_object_class_used():
            zserio_writer.write_varuint32(self._object_class_)

    def write_packed(self, zserio_context: SmartLayerRegistryMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._smart_layer_type_.write_packed(zserio_context.smart_layer_type, zserio_writer)

        self._smart_layer_definition_.write_packed(zserio_context.smart_layer_definition, zserio_writer)

        # check parameters
        if self._capabilities_.type is not (self._smart_layer_type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field SmartLayerRegistryMetadata.capabilities: "
                                                f"{self._capabilities_.type} != {self._smart_layer_type_}!")
        self._capabilities_.write_packed(zserio_context.capabilities, zserio_writer)

        if self.is_supported_levels_used():
            self._supported_levels_.write_packed(zserio_writer)

        if self.is_mesh_index_content_used():
            self._mesh_index_content_.write(zserio_writer)

        if self.is_object_class_used():
            zserio_context.object_class.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._object_class_)

    class ZserioPackingContext:
        def __init__(self):
            self._smart_layer_type_ = zserio.array.DeltaContext()
            self._smart_layer_definition_ = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.ZserioPackingContext()
            self._capabilities_ = nds.smart.metadata.smart_layer_service_capabilities.SmartLayerServiceCapabilities.ZserioPackingContext()
            self._object_class_ = zserio.array.DeltaContext()

        @property
        def smart_layer_type(self):
            return self._smart_layer_type_

        @property
        def smart_layer_definition(self):
            return self._smart_layer_definition_

        @property
        def capabilities(self):
            return self._capabilities_

        @property
        def object_class(self):
            return self._object_class_
