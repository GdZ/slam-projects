# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.packed_tile_id
import nds.smart.mesh.smart_mesh_id
import nds.smart.types.smart_layer_header

class SmartMeshIndex:
    def __init__(
            self,
            has_headers_: bool = bool(),
            has_mesh_sizes_: bool = bool(),
            num_entries_: int = int(),
            tile_ids_: typing.List[nds.core.types.packed_tile_id.PackedTileId] = None,
            mesh_ids_: typing.List[nds.smart.mesh.smart_mesh_id.SmartMeshId] = None,
            header_: typing.Optional[typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader]] = None,
            mesh_size_: typing.Optional[typing.List[int]] = None) -> None:
        self._has_headers_ = has_headers_
        self._has_mesh_sizes_ = has_mesh_sizes_
        self._num_entries_ = num_entries_
        self._tile_ids_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(32), tile_ids_)
        self._mesh_ids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh_ids()), mesh_ids_)
        if header_ is None:
            self._header_ = None
        else:
            self._header_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_header()), header_)
        if mesh_size_ is None:
            self._mesh_size_ = None
        else:
            self._mesh_size_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), mesh_size_)

    @classmethod
    def from_reader(
            cls: typing.Type['SmartMeshIndex'],
            zserio_reader: zserio.BitStreamReader) -> 'SmartMeshIndex':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SmartMeshIndex'],
            zserio_context: SmartMeshIndex.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SmartMeshIndex':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SmartMeshIndex):
            return ((self._has_headers_ == other._has_headers_) and
                    (self._has_mesh_sizes_ == other._has_mesh_sizes_) and
                    (self._num_entries_ == other._num_entries_) and
                    (self._tile_ids_ == other._tile_ids_) and
                    (self._mesh_ids_ == other._mesh_ids_) and
                    (not other.is_header_used() if not self.is_header_used() else (self._header_ == other._header_)) and
                    (not other.is_mesh_size_used() if not self.is_mesh_size_used() else (self._mesh_size_ == other._mesh_size_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_headers_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_mesh_sizes_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_entries_)
        result = zserio.hashcode.calc_hashcode_object(result, self._tile_ids_)
        result = zserio.hashcode.calc_hashcode_object(result, self._mesh_ids_)
        if self.is_header_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        if self.is_mesh_size_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._mesh_size_)

        return result

    @property
    def has_headers(self) -> bool:
        return self._has_headers_

    @has_headers.setter
    def has_headers(self, has_headers_: bool) -> None:
        self._has_headers_ = has_headers_

    @property
    def has_mesh_sizes(self) -> bool:
        return self._has_mesh_sizes_

    @has_mesh_sizes.setter
    def has_mesh_sizes(self, has_mesh_sizes_: bool) -> None:
        self._has_mesh_sizes_ = has_mesh_sizes_

    @property
    def num_entries(self) -> int:
        return self._num_entries_

    @num_entries.setter
    def num_entries(self, num_entries_: int) -> None:
        self._num_entries_ = num_entries_

    @property
    def tile_ids(self) -> typing.List[nds.core.types.packed_tile_id.PackedTileId]:
        return self._tile_ids_.raw_array

    @tile_ids.setter
    def tile_ids(self, tile_ids_: typing.List[nds.core.types.packed_tile_id.PackedTileId]) -> None:
        self._tile_ids_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(32), tile_ids_)

    @property
    def mesh_ids(self) -> typing.List[nds.smart.mesh.smart_mesh_id.SmartMeshId]:
        return self._mesh_ids_.raw_array

    @mesh_ids.setter
    def mesh_ids(self, mesh_ids_: typing.List[nds.smart.mesh.smart_mesh_id.SmartMeshId]) -> None:
        self._mesh_ids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh_ids()), mesh_ids_)

    @property
    def header(self) -> typing.Optional[typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader]]:
        return None if self._header_ is None else self._header_.raw_array

    @header.setter
    def header(self, header_: typing.Optional[typing.List[nds.smart.types.smart_layer_header.SmartLayerHeader]]) -> None:
        if header_ is None:
            self._header_ = None
        else:
            self._header_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_header()), header_)

    def is_header_used(self) -> bool:
        return self._has_headers_

    def is_header_set(self) -> bool:
        return not self._header_ is None

    def reset_header(self) -> None:
        self._header_ = None

    @property
    def mesh_size(self) -> typing.Optional[typing.List[int]]:
        return None if self._mesh_size_ is None else self._mesh_size_.raw_array

    @mesh_size.setter
    def mesh_size(self, mesh_size_: typing.Optional[typing.List[int]]) -> None:
        if mesh_size_ is None:
            self._mesh_size_ = None
        else:
            self._mesh_size_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), mesh_size_)

    def is_mesh_size_used(self) -> bool:
        return self._has_mesh_sizes_

    def is_mesh_size_set(self) -> bool:
        return not self._mesh_size_ is None

    def reset_mesh_size(self) -> None:
        self._mesh_size_ = None

    def init_packing_context(self, zserio_context: SmartMeshIndex.ZserioPackingContext) -> None:
        zserio_context.num_entries.init(zserio.array.VarSizeArrayTraits(), self._num_entries_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_entries_)
        end_bitposition += self._tile_ids_.bitsizeof(end_bitposition)
        end_bitposition += self._mesh_ids_.bitsizeof(end_bitposition)
        if self.is_header_used():
            end_bitposition += self._header_.bitsizeof(end_bitposition)
        if self.is_mesh_size_used():
            end_bitposition += self._mesh_size_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SmartMeshIndex.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_entries_)
        end_bitposition += self._tile_ids_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._mesh_ids_.bitsizeof_packed(end_bitposition)
        if self.is_header_used():
            end_bitposition += self._header_.bitsizeof_packed(end_bitposition)
        if self.is_mesh_size_used():
            end_bitposition += self._mesh_size_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_entries_)
        end_bitposition = self._tile_ids_.initialize_offsets(end_bitposition)
        end_bitposition = self._mesh_ids_.initialize_offsets(end_bitposition)
        if self.is_header_used():
            end_bitposition = self._header_.initialize_offsets(end_bitposition)
        if self.is_mesh_size_used():
            end_bitposition = self._mesh_size_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SmartMeshIndex.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_entries_)
        end_bitposition = self._tile_ids_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._mesh_ids_.initialize_offsets_packed(end_bitposition)
        if self.is_header_used():
            end_bitposition = self._header_.initialize_offsets_packed(end_bitposition)
        if self.is_mesh_size_used():
            end_bitposition = self._mesh_size_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_headers_ = zserio_reader.read_bool()
        self._has_mesh_sizes_ = zserio_reader.read_bool()
        zserio_reader.alignto(8)
        self._num_entries_ = zserio_reader.read_varsize()
        self._tile_ids_ = zserio.array.Array.from_reader(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader, self._num_entries_)
        self._mesh_ids_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh_ids()), zserio_reader, self._num_entries_)
        if self.is_header_used():
            self._header_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_header()), zserio_reader, self._num_entries_)
        else:
            self._header_ = None
        if self.is_mesh_size_used():
            self._mesh_size_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_entries_)
        else:
            self._mesh_size_ = None

    def read_packed(self, zserio_context: SmartMeshIndex.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_headers_ = zserio_reader.read_bool()

        self._has_mesh_sizes_ = zserio_reader.read_bool()

        zserio_reader.alignto(8)
        self._num_entries_ = zserio_context.num_entries.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._tile_ids_ = zserio.array.Array.from_reader_packed(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader, self._num_entries_)

        self._mesh_ids_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh_ids()), zserio_reader, self._num_entries_)

        if self.is_header_used():
            self._header_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_header()), zserio_reader, self._num_entries_)
        else:
            self._header_ = None

        if self.is_mesh_size_used():
            self._mesh_size_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_entries_)
        else:
            self._mesh_size_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_headers_)

        zserio_writer.write_bool(self._has_mesh_sizes_)

        zserio_writer.alignto(8)
        zserio_writer.write_varsize(self._num_entries_)

        # check array length
        if len(self._tile_ids_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.tileIds: "
                                                f"{len(self._tile_ids_)} != {self._num_entries_}!")
        self._tile_ids_.write(zserio_writer)

        # check array length
        if len(self._mesh_ids_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.meshIds: "
                                                f"{len(self._mesh_ids_)} != {self._num_entries_}!")
        self._mesh_ids_.write(zserio_writer)

        if self.is_header_used():
            # check array length
            if len(self._header_) != (self._num_entries_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.header: "
                                                    f"{len(self._header_)} != {self._num_entries_}!")
            self._header_.write(zserio_writer)

        if self.is_mesh_size_used():
            # check array length
            if len(self._mesh_size_) != (self._num_entries_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.meshSize: "
                                                    f"{len(self._mesh_size_)} != {self._num_entries_}!")
            self._mesh_size_.write(zserio_writer)

    def write_packed(self, zserio_context: SmartMeshIndex.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_headers_)

        zserio_writer.write_bool(self._has_mesh_sizes_)

        zserio_writer.alignto(8)
        zserio_context.num_entries.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_entries_)

        # check array length
        if len(self._tile_ids_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.tileIds: "
                                                f"{len(self._tile_ids_)} != {self._num_entries_}!")
        self._tile_ids_.write_packed(zserio_writer)

        # check array length
        if len(self._mesh_ids_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.meshIds: "
                                                f"{len(self._mesh_ids_)} != {self._num_entries_}!")
        self._mesh_ids_.write_packed(zserio_writer)

        if self.is_header_used():
            # check array length
            if len(self._header_) != (self._num_entries_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.header: "
                                                    f"{len(self._header_)} != {self._num_entries_}!")
            self._header_.write_packed(zserio_writer)

        if self.is_mesh_size_used():
            # check array length
            if len(self._mesh_size_) != (self._num_entries_):
                raise zserio.PythonRuntimeException("Wrong array length for field SmartMeshIndex.meshSize: "
                                                    f"{len(self._mesh_size_)} != {self._num_entries_}!")
            self._mesh_size_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_entries_ = zserio.array.DeltaContext()

        @property
        def num_entries(self):
            return self._num_entries_

    class _ZserioElementFactory_mesh_ids:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.mesh.smart_mesh_id.SmartMeshId:
            del zserio_index
            return nds.smart.mesh.smart_mesh_id.SmartMeshId.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.mesh.smart_mesh_id.SmartMeshId.ZserioPackingContext:
            return nds.smart.mesh.smart_mesh_id.SmartMeshId.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.mesh.smart_mesh_id.SmartMeshId.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.mesh.smart_mesh_id.SmartMeshId:
            del zserio_index
            return nds.smart.mesh.smart_mesh_id.SmartMeshId.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_header:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            del zserio_index
            return nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext:
            return nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.types.smart_layer_header.SmartLayerHeader.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            del zserio_index
            return nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader_packed(zserio_context, zserio_reader)
