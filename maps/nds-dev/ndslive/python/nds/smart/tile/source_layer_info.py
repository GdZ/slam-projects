# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.version_id
import nds.smart.types.data_layer_id

class SourceLayerInfo:
    def __init__(
            self,
            num_data_layers_: int = int(),
            available_layers_: typing.List[nds.smart.types.data_layer_id.DataLayerId] = None,
            version_id_: typing.List[nds.core.types.version_id.VersionId] = None) -> None:
        self._num_data_layers_ = num_data_layers_
        self._available_layers_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), available_layers_)
        self._version_id_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), version_id_)

    @classmethod
    def from_reader(
            cls: typing.Type['SourceLayerInfo'],
            zserio_reader: zserio.BitStreamReader) -> 'SourceLayerInfo':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SourceLayerInfo'],
            zserio_context: SourceLayerInfo.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SourceLayerInfo':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SourceLayerInfo):
            return ((self._num_data_layers_ == other._num_data_layers_) and
                    (self._available_layers_ == other._available_layers_) and
                    (self._version_id_ == other._version_id_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_data_layers_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_layers_)
        result = zserio.hashcode.calc_hashcode_object(result, self._version_id_)

        return result

    @property
    def num_data_layers(self) -> int:
        return self._num_data_layers_

    @num_data_layers.setter
    def num_data_layers(self, num_data_layers_: int) -> None:
        self._num_data_layers_ = num_data_layers_

    @property
    def available_layers(self) -> typing.List[nds.smart.types.data_layer_id.DataLayerId]:
        return self._available_layers_.raw_array

    @available_layers.setter
    def available_layers(self, available_layers_: typing.List[nds.smart.types.data_layer_id.DataLayerId]) -> None:
        self._available_layers_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), available_layers_)

    @property
    def version_id(self) -> typing.List[nds.core.types.version_id.VersionId]:
        return self._version_id_.raw_array

    @version_id.setter
    def version_id(self, version_id_: typing.List[nds.core.types.version_id.VersionId]) -> None:
        self._version_id_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), version_id_)

    def init_packing_context(self, zserio_context: SourceLayerInfo.ZserioPackingContext) -> None:
        zserio_context.num_data_layers.init(zserio.array.VarUInt16ArrayTraits(), self._num_data_layers_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_data_layers_)
        end_bitposition += self._available_layers_.bitsizeof(end_bitposition)
        end_bitposition += self._version_id_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SourceLayerInfo.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_data_layers.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_data_layers_)
        end_bitposition += self._available_layers_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._version_id_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_data_layers_)
        end_bitposition = self._available_layers_.initialize_offsets(end_bitposition)
        end_bitposition = self._version_id_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SourceLayerInfo.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_data_layers.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_data_layers_)
        end_bitposition = self._available_layers_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._version_id_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_data_layers_ = zserio_reader.read_varuint16()
        self._available_layers_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_data_layers_)
        self._version_id_ = zserio.array.Array.from_reader(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_data_layers_)

    def read_packed(self, zserio_context: SourceLayerInfo.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_data_layers_ = zserio_context.num_data_layers.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._available_layers_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_data_layers_)

        self._version_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_data_layers_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._num_data_layers_)

        # check array length
        if len(self._available_layers_) != (self._num_data_layers_):
            raise zserio.PythonRuntimeException("Wrong array length for field SourceLayerInfo.availableLayers: "
                                                f"{len(self._available_layers_)} != {self._num_data_layers_}!")
        self._available_layers_.write(zserio_writer)

        # check array length
        if len(self._version_id_) != (self._num_data_layers_):
            raise zserio.PythonRuntimeException("Wrong array length for field SourceLayerInfo.versionId: "
                                                f"{len(self._version_id_)} != {self._num_data_layers_}!")
        self._version_id_.write(zserio_writer)

    def write_packed(self, zserio_context: SourceLayerInfo.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_data_layers.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_data_layers_)

        # check array length
        if len(self._available_layers_) != (self._num_data_layers_):
            raise zserio.PythonRuntimeException("Wrong array length for field SourceLayerInfo.availableLayers: "
                                                f"{len(self._available_layers_)} != {self._num_data_layers_}!")
        self._available_layers_.write_packed(zserio_writer)

        # check array length
        if len(self._version_id_) != (self._num_data_layers_):
            raise zserio.PythonRuntimeException("Wrong array length for field SourceLayerInfo.versionId: "
                                                f"{len(self._version_id_)} != {self._num_data_layers_}!")
        self._version_id_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_data_layers_ = zserio.array.DeltaContext()

        @property
        def num_data_layers(self):
            return self._num_data_layers_
