# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.smart.tile.multi_data_layer_tile_response

class MultiDataLayerMultiTileResponse:
    def __init__(
            self,
            num_tiles_: int = int(),
            tile_version_responses_: typing.List[nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse] = None) -> None:
        self._num_tiles_ = num_tiles_
        self._tile_version_responses_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_tile_version_responses()), tile_version_responses_)

    @classmethod
    def from_reader(
            cls: typing.Type['MultiDataLayerMultiTileResponse'],
            zserio_reader: zserio.BitStreamReader) -> 'MultiDataLayerMultiTileResponse':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MultiDataLayerMultiTileResponse'],
            zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MultiDataLayerMultiTileResponse':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MultiDataLayerMultiTileResponse):
            return ((self._num_tiles_ == other._num_tiles_) and
                    (self._tile_version_responses_ == other._tile_version_responses_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_tiles_)
        result = zserio.hashcode.calc_hashcode_object(result, self._tile_version_responses_)

        return result

    @property
    def num_tiles(self) -> int:
        return self._num_tiles_

    @num_tiles.setter
    def num_tiles(self, num_tiles_: int) -> None:
        self._num_tiles_ = num_tiles_

    @property
    def tile_version_responses(self) -> typing.List[nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse]:
        return self._tile_version_responses_.raw_array

    @tile_version_responses.setter
    def tile_version_responses(self, tile_version_responses_: typing.List[nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse]) -> None:
        self._tile_version_responses_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_tile_version_responses()), tile_version_responses_)

    def init_packing_context(self, zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext) -> None:
        zserio_context.num_tiles.init(zserio.array.VarSizeArrayTraits(), self._num_tiles_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_tiles_)
        end_bitposition += self._tile_version_responses_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_tiles.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_tiles_)
        end_bitposition += self._tile_version_responses_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_tiles_)
        end_bitposition = self._tile_version_responses_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_tiles.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_tiles_)
        end_bitposition = self._tile_version_responses_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_tiles_ = zserio_reader.read_varsize()
        self._tile_version_responses_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_tile_version_responses()), zserio_reader, self._num_tiles_)

    def read_packed(self, zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_tiles_ = zserio_context.num_tiles.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._tile_version_responses_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_tile_version_responses()), zserio_reader, self._num_tiles_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_tiles_)

        # check array length
        if len(self._tile_version_responses_) != (self._num_tiles_):
            raise zserio.PythonRuntimeException("Wrong array length for field MultiDataLayerMultiTileResponse.tileVersionResponses: "
                                                f"{len(self._tile_version_responses_)} != {self._num_tiles_}!")
        self._tile_version_responses_.write(zserio_writer)

    def write_packed(self, zserio_context: MultiDataLayerMultiTileResponse.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_tiles.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_tiles_)

        # check array length
        if len(self._tile_version_responses_) != (self._num_tiles_):
            raise zserio.PythonRuntimeException("Wrong array length for field MultiDataLayerMultiTileResponse.tileVersionResponses: "
                                                f"{len(self._tile_version_responses_)} != {self._num_tiles_}!")
        self._tile_version_responses_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_tiles_ = zserio.array.DeltaContext()

        @property
        def num_tiles(self):
            return self._num_tiles_

    class _ZserioElementFactory_tile_version_responses:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse:
            del zserio_index
            return nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse.ZserioPackingContext:
            return nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse:
            del zserio_index
            return nds.smart.tile.multi_data_layer_tile_response.MultiDataLayerTileResponse.from_reader_packed(zserio_context, zserio_reader)
