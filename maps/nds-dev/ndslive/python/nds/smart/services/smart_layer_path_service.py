# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_id
import nds.core.types.empty
import nds.core.types.tile_id
import nds.core.types.tile_id_list
import nds.smart.metadata.path_service_capabilities_response
import nds.smart.metadata.smart_layer_definition
import nds.smart.path.smart_layer_location_id_path
import nds.smart.path.smart_layer_path
import nds.smart.path.smart_layer_path_list
import nds.smart.path.smart_layer_path_reference
import nds.smart.tile.smart_layer_tile_header_list
import nds.smart.types.smart_layer_header
import nds.system.types.module_definition
import nds.system.types.nds_node_legal_info
import nds.system.types.nds_system_token

class SmartLayerPathService:
    class Service(zserio.ServiceInterface):
        def __init__(self) -> None:
            self._method_map = {
                self._METHOD_NAMES[0]: self._get_service_module_definition_method,
                self._METHOD_NAMES[1]: self._get_service_definition_method,
                self._METHOD_NAMES[2]: self._get_service_node_system_reference_method,
                self._METHOD_NAMES[3]: self._get_service_node_legal_info_method,
                self._METHOD_NAMES[4]: self._get_path_service_capabilities_method,
                self._METHOD_NAMES[5]: self._get_data_along_path_method,
                self._METHOD_NAMES[6]: self._get_data_along_location_id_method,
                self._METHOD_NAMES[7]: self._get_paths_in_tile_method,
                self._METHOD_NAMES[8]: self._get_header_only_by_path_method,
                self._METHOD_NAMES[9]: self._get_header_only_list_in_tile_method
            }

        def call_method(self, method_name: str, request_data: bytes, context: typing.Any = None) -> zserio.ServiceData:
            method = self._method_map.get(method_name)
            if not method:
                raise zserio.ServiceException(f"nds.smart.services.SmartLayerPathService: Method '{method_name}' does not exist!")

            return method(request_data, context)

        @property
        def service_full_name(self) -> str:
            return self._SERVICE_FULL_NAME

        @property
        def method_names(self) -> typing.List:
            return self._METHOD_NAMES

        def _get_service_module_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            raise NotImplementedError()

        def _get_service_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.smart_layer_definition.SmartLayerDefinition:
            raise NotImplementedError()

        def _get_service_node_system_reference_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            raise NotImplementedError()

        def _get_service_node_legal_info_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            raise NotImplementedError()

        def _get_path_service_capabilities_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.path_service_capabilities_response.PathServiceCapabilitiesResponse:
            raise NotImplementedError()

        def _get_data_along_path_impl(self, request: nds.smart.path.smart_layer_path_reference.SmartLayerPathReference, context: typing.Any = None) -> nds.smart.path.smart_layer_path.SmartLayerPath:
            raise NotImplementedError()

        def _get_data_along_location_id_impl(self, request: nds.core.location.road_location_id.RoadLocationId, context: typing.Any = None) -> nds.smart.path.smart_layer_location_id_path.SmartLayerLocationIdPath:
            raise NotImplementedError()

        def _get_paths_in_tile_impl(self, request: nds.core.types.tile_id_list.TileIdList, context: typing.Any = None) -> nds.smart.path.smart_layer_path_list.SmartLayerPathList:
            raise NotImplementedError()

        def _get_header_only_by_path_impl(self, request: nds.smart.path.smart_layer_path_reference.SmartLayerPathReference, context: typing.Any = None) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            raise NotImplementedError()

        def _get_header_only_list_in_tile_impl(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.tile.smart_layer_tile_header_list.SmartLayerTileHeaderList:
            raise NotImplementedError()

        def _get_service_module_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_module_definition_impl(request, context))

        def _get_service_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_definition_impl(request, context))

        def _get_service_node_system_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_system_reference_impl(request, context))

        def _get_service_node_legal_info_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_legal_info_impl(request, context))

        def _get_path_service_capabilities_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_path_service_capabilities_impl(request, context))

        def _get_data_along_path_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.path.smart_layer_path_reference.SmartLayerPathReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_data_along_path_impl(request, context))

        def _get_data_along_location_id_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.location.road_location_id.RoadLocationId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_data_along_location_id_impl(request, context))

        def _get_paths_in_tile_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id_list.TileIdList.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_paths_in_tile_impl(request, context))

        def _get_header_only_by_path_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.path.smart_layer_path_reference.SmartLayerPathReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_header_only_by_path_impl(request, context))

        def _get_header_only_list_in_tile_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id.TileId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_header_only_list_in_tile_impl(request, context))

        _SERVICE_FULL_NAME = "nds.smart.services.SmartLayerPathService"
        _METHOD_NAMES = [
            "getServiceModuleDefinition",
            "getServiceDefinition",
            "getServiceNodeSystemReference",
            "getServiceNodeLegalInfo",
            "getPathServiceCapabilities",
            "getDataAlongPath",
            "getDataAlongLocationId",
            "getPathsInTile",
            "getHeaderOnlyByPath",
            "getHeaderOnlyListInTile"
        ]

    class Client:
        def __init__(self, service_client: zserio.ServiceClientInterface) -> None:
            self._service_client = service_client

        def get_service_module_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            response_data = self._service_client.call_method("getServiceModuleDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.module_definition.ModuleDefinition.from_reader(reader)

            return response

        def get_service_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.smart_layer_definition.SmartLayerDefinition:
            response_data = self._service_client.call_method("getServiceDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.metadata.smart_layer_definition.SmartLayerDefinition.from_reader(reader)

            return response

        def get_service_node_system_reference(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            response_data = self._service_client.call_method("getServiceNodeSystemReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)

            return response

        def get_service_node_legal_info(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            response_data = self._service_client.call_method("getServiceNodeLegalInfo",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader(reader)

            return response

        def get_path_service_capabilities(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.path_service_capabilities_response.PathServiceCapabilitiesResponse:
            response_data = self._service_client.call_method("getPathServiceCapabilities",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.metadata.path_service_capabilities_response.PathServiceCapabilitiesResponse.from_reader(reader)

            return response

        def get_data_along_path(self, request: nds.smart.path.smart_layer_path_reference.SmartLayerPathReference, context: typing.Any = None) -> nds.smart.path.smart_layer_path.SmartLayerPath:
            response_data = self._service_client.call_method("getDataAlongPath",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.path.smart_layer_path.SmartLayerPath.from_reader(reader)

            return response

        def get_data_along_location_id(self, request: nds.core.location.road_location_id.RoadLocationId, context: typing.Any = None) -> nds.smart.path.smart_layer_location_id_path.SmartLayerLocationIdPath:
            response_data = self._service_client.call_method("getDataAlongLocationId",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.path.smart_layer_location_id_path.SmartLayerLocationIdPath.from_reader(reader)

            return response

        def get_paths_in_tile(self, request: nds.core.types.tile_id_list.TileIdList, context: typing.Any = None) -> nds.smart.path.smart_layer_path_list.SmartLayerPathList:
            response_data = self._service_client.call_method("getPathsInTile",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.path.smart_layer_path_list.SmartLayerPathList.from_reader(reader)

            return response

        def get_header_only_by_path(self, request: nds.smart.path.smart_layer_path_reference.SmartLayerPathReference, context: typing.Any = None) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            response_data = self._service_client.call_method("getHeaderOnlyByPath",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(reader)

            return response

        def get_header_only_list_in_tile(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.tile.smart_layer_tile_header_list.SmartLayerTileHeaderList:
            response_data = self._service_client.call_method("getHeaderOnlyListInTile",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.tile.smart_layer_tile_header_list.SmartLayerTileHeaderList.from_reader(reader)

            return response
