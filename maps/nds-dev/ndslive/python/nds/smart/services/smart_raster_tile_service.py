# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.empty
import nds.core.types.tile_id
import nds.smart.metadata.raster_tile_service_capabilities_response
import nds.smart.types.raster_image
import nds.smart.types.raster_tile_image_request
import nds.smart.types.raster_tile_image_version_request
import nds.smart.types.raster_tile_info
import nds.system.types.module_definition
import nds.system.types.nds_node_legal_info
import nds.system.types.nds_system_token

class SmartRasterTileService:
    class Service(zserio.ServiceInterface):
        def __init__(self) -> None:
            self._method_map = {
                self._METHOD_NAMES[0]: self._get_service_module_definition_method,
                self._METHOD_NAMES[1]: self._get_service_node_system_reference_method,
                self._METHOD_NAMES[2]: self._get_service_node_legal_info_method,
                self._METHOD_NAMES[3]: self._get_raster_tile_service_capabilities_method,
                self._METHOD_NAMES[4]: self._get_image_method,
                self._METHOD_NAMES[5]: self._get_tile_metadata_method,
                self._METHOD_NAMES[6]: self._get_image_versioned_method
            }

        def call_method(self, method_name: str, request_data: bytes, context: typing.Any = None) -> zserio.ServiceData:
            method = self._method_map.get(method_name)
            if not method:
                raise zserio.ServiceException(f"nds.smart.services.SmartRasterTileService: Method '{method_name}' does not exist!")

            return method(request_data, context)

        @property
        def service_full_name(self) -> str:
            return self._SERVICE_FULL_NAME

        @property
        def method_names(self) -> typing.List:
            return self._METHOD_NAMES

        def _get_service_module_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            raise NotImplementedError()

        def _get_service_node_system_reference_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            raise NotImplementedError()

        def _get_service_node_legal_info_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            raise NotImplementedError()

        def _get_raster_tile_service_capabilities_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.raster_tile_service_capabilities_response.RasterTileServiceCapabilitiesResponse:
            raise NotImplementedError()

        def _get_image_impl(self, request: nds.smart.types.raster_tile_image_request.RasterTileImageRequest, context: typing.Any = None) -> bytes:
            raise NotImplementedError()

        def _get_tile_metadata_impl(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.types.raster_tile_info.RasterTileInfo:
            raise NotImplementedError()

        def _get_image_versioned_impl(self, request: nds.smart.types.raster_tile_image_version_request.RasterTileImageVersionRequest, context: typing.Any = None) -> bytes:
            raise NotImplementedError()

        def _get_service_module_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_module_definition_impl(request, context))

        def _get_service_node_system_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_system_reference_impl(request, context))

        def _get_service_node_legal_info_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_legal_info_impl(request, context))

        def _get_raster_tile_service_capabilities_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_raster_tile_service_capabilities_impl(request, context))

        def _get_image_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.types.raster_tile_image_request.RasterTileImageRequest.from_reader(reader)

            return zserio.service.RawServiceData(self._get_image_impl(request, context))

        def _get_tile_metadata_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id.TileId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_tile_metadata_impl(request, context))

        def _get_image_versioned_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.types.raster_tile_image_version_request.RasterTileImageVersionRequest.from_reader(reader)

            return zserio.service.RawServiceData(self._get_image_versioned_impl(request, context))

        _SERVICE_FULL_NAME = "nds.smart.services.SmartRasterTileService"
        _METHOD_NAMES = [
            "getServiceModuleDefinition",
            "getServiceNodeSystemReference",
            "getServiceNodeLegalInfo",
            "getRasterTileServiceCapabilities",
            "getImage",
            "getTileMetadata",
            "getImageVersioned"
        ]

    class Client:
        def __init__(self, service_client: zserio.ServiceClientInterface) -> None:
            self._service_client = service_client

        def get_service_module_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            response_data = self._service_client.call_method("getServiceModuleDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.module_definition.ModuleDefinition.from_reader(reader)

            return response

        def get_service_node_system_reference(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            response_data = self._service_client.call_method("getServiceNodeSystemReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)

            return response

        def get_service_node_legal_info(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            response_data = self._service_client.call_method("getServiceNodeLegalInfo",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader(reader)

            return response

        def get_raster_tile_service_capabilities(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.raster_tile_service_capabilities_response.RasterTileServiceCapabilitiesResponse:
            response_data = self._service_client.call_method("getRasterTileServiceCapabilities",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.metadata.raster_tile_service_capabilities_response.RasterTileServiceCapabilitiesResponse.from_reader(reader)

            return response

        def get_image(self, request: nds.smart.types.raster_tile_image_request.RasterTileImageRequest, context: typing.Any = None) -> bytes:
            response_data = self._service_client.call_method("getImage",
                                                             zserio.service.ObjectServiceData(request), context)
            return response_data

        def get_tile_metadata(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.types.raster_tile_info.RasterTileInfo:
            response_data = self._service_client.call_method("getTileMetadata",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.types.raster_tile_info.RasterTileInfo.from_reader(reader)

            return response

        def get_image_versioned(self, request: nds.smart.types.raster_tile_image_version_request.RasterTileImageVersionRequest, context: typing.Any = None) -> bytes:
            response_data = self._service_client.call_method("getImageVersioned",
                                                             zserio.service.ObjectServiceData(request), context)
            return response_data
