# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_id
import nds.core.location.road_location_path
import nds.core.types.empty
import nds.core.types.tile_id
import nds.smart.metadata.object_service_capabilities_response
import nds.smart.object.data_layer_object_version_request
import nds.smart.object.smart_layer_object
import nds.smart.object.smart_layer_object_definition
import nds.smart.object.smart_layer_object_header_list
import nds.smart.object.smart_layer_object_list
import nds.smart.object.smart_layer_object_reference
import nds.smart.object.smart_layer_object_reference_list
import nds.smart.types.data_layer
import nds.smart.types.smart_layer_header
import nds.system.types.module_definition
import nds.system.types.nds_node_legal_info
import nds.system.types.nds_system_token

class SmartLayerObjectService:
    class Service(zserio.ServiceInterface):
        def __init__(self) -> None:
            self._method_map = {
                self._METHOD_NAMES[0]: self._get_service_module_definition_method,
                self._METHOD_NAMES[1]: self._get_object_service_definition_method,
                self._METHOD_NAMES[2]: self._get_service_node_system_reference_method,
                self._METHOD_NAMES[3]: self._get_service_node_legal_info_method,
                self._METHOD_NAMES[4]: self._get_object_service_capabilities_method,
                self._METHOD_NAMES[5]: self._get_object_by_reference_method,
                self._METHOD_NAMES[6]: self._get_references_in_tile_method,
                self._METHOD_NAMES[7]: self._get_location_path_for_object_reference_method,
                self._METHOD_NAMES[8]: self._get_location_id_for_object_reference_method,
                self._METHOD_NAMES[9]: self._get_objects_in_tile_method,
                self._METHOD_NAMES[10]: self._get_header_only_by_object_reference_method,
                self._METHOD_NAMES[11]: self._get_header_only_list_in_tile_method,
                self._METHOD_NAMES[12]: self._get_single_data_layer_by_object_reference_method
            }

        def call_method(self, method_name: str, request_data: bytes, context: typing.Any = None) -> zserio.ServiceData:
            method = self._method_map.get(method_name)
            if not method:
                raise zserio.ServiceException(f"nds.smart.services.SmartLayerObjectService: Method '{method_name}' does not exist!")

            return method(request_data, context)

        @property
        def service_full_name(self) -> str:
            return self._SERVICE_FULL_NAME

        @property
        def method_names(self) -> typing.List:
            return self._METHOD_NAMES

        def _get_service_module_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            raise NotImplementedError()

        def _get_object_service_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.object.smart_layer_object_definition.SmartLayerObjectDefinition:
            raise NotImplementedError()

        def _get_service_node_system_reference_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            raise NotImplementedError()

        def _get_service_node_legal_info_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            raise NotImplementedError()

        def _get_object_service_capabilities_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.object_service_capabilities_response.ObjectServiceCapabilitiesResponse:
            raise NotImplementedError()

        def _get_object_by_reference_impl(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.smart.object.smart_layer_object.SmartLayerObject:
            raise NotImplementedError()

        def _get_references_in_tile_impl(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_reference_list.SmartLayerObjectReferenceList:
            raise NotImplementedError()

        def _get_location_path_for_object_reference_impl(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.core.location.road_location_path.RoadLocationPath:
            raise NotImplementedError()

        def _get_location_id_for_object_reference_impl(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.core.location.road_location_id.RoadLocationId:
            raise NotImplementedError()

        def _get_objects_in_tile_impl(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_list.SmartLayerObjectList:
            raise NotImplementedError()

        def _get_header_only_by_object_reference_impl(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            raise NotImplementedError()

        def _get_header_only_list_in_tile_impl(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_header_list.SmartLayerObjectHeaderList:
            raise NotImplementedError()

        def _get_single_data_layer_by_object_reference_impl(self, request: nds.smart.object.data_layer_object_version_request.DataLayerObjectVersionRequest, context: typing.Any = None) -> nds.smart.types.data_layer.DataLayer:
            raise NotImplementedError()

        def _get_service_module_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_module_definition_impl(request, context))

        def _get_object_service_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_object_service_definition_impl(request, context))

        def _get_service_node_system_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_system_reference_impl(request, context))

        def _get_service_node_legal_info_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_service_node_legal_info_impl(request, context))

        def _get_object_service_capabilities_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_object_service_capabilities_impl(request, context))

        def _get_object_by_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_object_by_reference_impl(request, context))

        def _get_references_in_tile_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id.TileId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_references_in_tile_impl(request, context))

        def _get_location_path_for_object_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_location_path_for_object_reference_impl(request, context))

        def _get_location_id_for_object_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_location_id_for_object_reference_impl(request, context))

        def _get_objects_in_tile_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id.TileId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_objects_in_tile_impl(request, context))

        def _get_header_only_by_object_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_header_only_by_object_reference_impl(request, context))

        def _get_header_only_list_in_tile_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.tile_id.TileId.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_header_only_list_in_tile_impl(request, context))

        def _get_single_data_layer_by_object_reference_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.smart.object.data_layer_object_version_request.DataLayerObjectVersionRequest.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_single_data_layer_by_object_reference_impl(request, context))

        _SERVICE_FULL_NAME = "nds.smart.services.SmartLayerObjectService"
        _METHOD_NAMES = [
            "getServiceModuleDefinition",
            "getObjectServiceDefinition",
            "getServiceNodeSystemReference",
            "getServiceNodeLegalInfo",
            "getObjectServiceCapabilities",
            "getObjectByReference",
            "getReferencesInTile",
            "getLocationPathForObjectReference",
            "getLocationIdForObjectReference",
            "getObjectsInTile",
            "getHeaderOnlyByObjectReference",
            "getHeaderOnlyListInTile",
            "getSingleDataLayerByObjectReference"
        ]

    class Client:
        def __init__(self, service_client: zserio.ServiceClientInterface) -> None:
            self._service_client = service_client

        def get_service_module_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            response_data = self._service_client.call_method("getServiceModuleDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.module_definition.ModuleDefinition.from_reader(reader)

            return response

        def get_object_service_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.object.smart_layer_object_definition.SmartLayerObjectDefinition:
            response_data = self._service_client.call_method("getObjectServiceDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.object.smart_layer_object_definition.SmartLayerObjectDefinition.from_reader(reader)

            return response

        def get_service_node_system_reference(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_system_token.NdsSystemToken:
            response_data = self._service_client.call_method("getServiceNodeSystemReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)

            return response

        def get_service_node_legal_info(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.nds_node_legal_info.NdsNodeLegalInfo:
            response_data = self._service_client.call_method("getServiceNodeLegalInfo",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader(reader)

            return response

        def get_object_service_capabilities(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.smart.metadata.object_service_capabilities_response.ObjectServiceCapabilitiesResponse:
            response_data = self._service_client.call_method("getObjectServiceCapabilities",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.metadata.object_service_capabilities_response.ObjectServiceCapabilitiesResponse.from_reader(reader)

            return response

        def get_object_by_reference(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.smart.object.smart_layer_object.SmartLayerObject:
            response_data = self._service_client.call_method("getObjectByReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.object.smart_layer_object.SmartLayerObject.from_reader(reader)

            return response

        def get_references_in_tile(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_reference_list.SmartLayerObjectReferenceList:
            response_data = self._service_client.call_method("getReferencesInTile",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.object.smart_layer_object_reference_list.SmartLayerObjectReferenceList.from_reader(reader)

            return response

        def get_location_path_for_object_reference(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.core.location.road_location_path.RoadLocationPath:
            response_data = self._service_client.call_method("getLocationPathForObjectReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.core.location.road_location_path.RoadLocationPath.from_reader(reader)

            return response

        def get_location_id_for_object_reference(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.core.location.road_location_id.RoadLocationId:
            response_data = self._service_client.call_method("getLocationIdForObjectReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.core.location.road_location_id.RoadLocationId.from_reader(reader)

            return response

        def get_objects_in_tile(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_list.SmartLayerObjectList:
            response_data = self._service_client.call_method("getObjectsInTile",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.object.smart_layer_object_list.SmartLayerObjectList.from_reader(reader)

            return response

        def get_header_only_by_object_reference(self, request: nds.smart.object.smart_layer_object_reference.SmartLayerObjectReference, context: typing.Any = None) -> nds.smart.types.smart_layer_header.SmartLayerHeader:
            response_data = self._service_client.call_method("getHeaderOnlyByObjectReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.types.smart_layer_header.SmartLayerHeader.from_reader(reader)

            return response

        def get_header_only_list_in_tile(self, request: nds.core.types.tile_id.TileId, context: typing.Any = None) -> nds.smart.object.smart_layer_object_header_list.SmartLayerObjectHeaderList:
            response_data = self._service_client.call_method("getHeaderOnlyListInTile",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.object.smart_layer_object_header_list.SmartLayerObjectHeaderList.from_reader(reader)

            return response

        def get_single_data_layer_by_object_reference(self, request: nds.smart.object.data_layer_object_version_request.DataLayerObjectVersionRequest, context: typing.Any = None) -> nds.smart.types.data_layer.DataLayer:
            response_data = self._service_client.call_method("getSingleDataLayerByObjectReference",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.smart.types.data_layer.DataLayer.from_reader(reader)

            return response
