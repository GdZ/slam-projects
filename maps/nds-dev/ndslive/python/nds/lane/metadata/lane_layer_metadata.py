# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.road_type
import nds.lane.lanegroups.lane_group_type
import nds.lane.metadata.boundary_geometry_usage
import nds.lane.types.logical_boundary_type
import nds.lane.types.marking_boundary_type
import nds.lane.types.physical_divider_boundary_type
import nds.lane.types.physical_marking_boundary_type

class LaneLayerMetadata:
    def __init__(
            self,
            included_road_types_: typing.List[nds.core.types.road_type.RoadType] = None,
            included_lane_group_types_: typing.List[nds.lane.lanegroups.lane_group_type.LaneGroupType] = None,
            included_logical_boundary_types_: typing.List[nds.lane.types.logical_boundary_type.LogicalBoundaryType] = None,
            included_marking_boundary_types_: typing.List[nds.lane.types.marking_boundary_type.MarkingBoundaryType] = None,
            included_physical_divider_boundary_types_: typing.List[nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType] = None,
            included_physical_marking_boundary_types_: typing.List[nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType] = None,
            boundary_geometry_usage_: typing.Union[nds.lane.metadata.boundary_geometry_usage.BoundaryGeometryUsage, None] = None) -> None:
        self._included_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), included_road_types_, is_auto=True)
        self._included_lane_group_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_lane_group_types()), included_lane_group_types_, is_auto=True)
        self._included_logical_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_logical_boundary_types()), included_logical_boundary_types_, is_auto=True)
        self._included_marking_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_marking_boundary_types()), included_marking_boundary_types_, is_auto=True)
        self._included_physical_divider_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_divider_boundary_types()), included_physical_divider_boundary_types_, is_auto=True)
        self._included_physical_marking_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_marking_boundary_types()), included_physical_marking_boundary_types_, is_auto=True)
        self._boundary_geometry_usage_ = boundary_geometry_usage_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneLayerMetadata'],
            zserio_context: LaneLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneLayerMetadata):
            return ((self._included_road_types_ == other._included_road_types_) and
                    (self._included_lane_group_types_ == other._included_lane_group_types_) and
                    (self._included_logical_boundary_types_ == other._included_logical_boundary_types_) and
                    (self._included_marking_boundary_types_ == other._included_marking_boundary_types_) and
                    (self._included_physical_divider_boundary_types_ == other._included_physical_divider_boundary_types_) and
                    (self._included_physical_marking_boundary_types_ == other._included_physical_marking_boundary_types_) and
                    (self._boundary_geometry_usage_ == other._boundary_geometry_usage_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._included_road_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_lane_group_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_logical_boundary_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_marking_boundary_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_physical_divider_boundary_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_physical_marking_boundary_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundary_geometry_usage_)

        return result

    @property
    def included_road_types(self) -> typing.List[nds.core.types.road_type.RoadType]:
        return self._included_road_types_.raw_array

    @included_road_types.setter
    def included_road_types(self, included_road_types_: typing.List[nds.core.types.road_type.RoadType]) -> None:
        self._included_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), included_road_types_, is_auto=True)

    @property
    def included_lane_group_types(self) -> typing.List[nds.lane.lanegroups.lane_group_type.LaneGroupType]:
        return self._included_lane_group_types_.raw_array

    @included_lane_group_types.setter
    def included_lane_group_types(self, included_lane_group_types_: typing.List[nds.lane.lanegroups.lane_group_type.LaneGroupType]) -> None:
        self._included_lane_group_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_lane_group_types()), included_lane_group_types_, is_auto=True)

    @property
    def included_logical_boundary_types(self) -> typing.List[nds.lane.types.logical_boundary_type.LogicalBoundaryType]:
        return self._included_logical_boundary_types_.raw_array

    @included_logical_boundary_types.setter
    def included_logical_boundary_types(self, included_logical_boundary_types_: typing.List[nds.lane.types.logical_boundary_type.LogicalBoundaryType]) -> None:
        self._included_logical_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_logical_boundary_types()), included_logical_boundary_types_, is_auto=True)

    @property
    def included_marking_boundary_types(self) -> typing.List[nds.lane.types.marking_boundary_type.MarkingBoundaryType]:
        return self._included_marking_boundary_types_.raw_array

    @included_marking_boundary_types.setter
    def included_marking_boundary_types(self, included_marking_boundary_types_: typing.List[nds.lane.types.marking_boundary_type.MarkingBoundaryType]) -> None:
        self._included_marking_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_marking_boundary_types()), included_marking_boundary_types_, is_auto=True)

    @property
    def included_physical_divider_boundary_types(self) -> typing.List[nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType]:
        return self._included_physical_divider_boundary_types_.raw_array

    @included_physical_divider_boundary_types.setter
    def included_physical_divider_boundary_types(self, included_physical_divider_boundary_types_: typing.List[nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType]) -> None:
        self._included_physical_divider_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_divider_boundary_types()), included_physical_divider_boundary_types_, is_auto=True)

    @property
    def included_physical_marking_boundary_types(self) -> typing.List[nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType]:
        return self._included_physical_marking_boundary_types_.raw_array

    @included_physical_marking_boundary_types.setter
    def included_physical_marking_boundary_types(self, included_physical_marking_boundary_types_: typing.List[nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType]) -> None:
        self._included_physical_marking_boundary_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_marking_boundary_types()), included_physical_marking_boundary_types_, is_auto=True)

    @property
    def boundary_geometry_usage(self) -> typing.Union[nds.lane.metadata.boundary_geometry_usage.BoundaryGeometryUsage, None]:
        return self._boundary_geometry_usage_

    @boundary_geometry_usage.setter
    def boundary_geometry_usage(self, boundary_geometry_usage_: typing.Union[nds.lane.metadata.boundary_geometry_usage.BoundaryGeometryUsage, None]) -> None:
        self._boundary_geometry_usage_ = boundary_geometry_usage_

    def init_packing_context(self, zserio_context: LaneLayerMetadata.ZserioPackingContext) -> None:
        self._boundary_geometry_usage_.init_packing_context(zserio_context.boundary_geometry_usage)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._included_road_types_.bitsizeof(end_bitposition)
        end_bitposition += self._included_lane_group_types_.bitsizeof(end_bitposition)
        end_bitposition += self._included_logical_boundary_types_.bitsizeof(end_bitposition)
        end_bitposition += self._included_marking_boundary_types_.bitsizeof(end_bitposition)
        end_bitposition += self._included_physical_divider_boundary_types_.bitsizeof(end_bitposition)
        end_bitposition += self._included_physical_marking_boundary_types_.bitsizeof(end_bitposition)
        end_bitposition += self._boundary_geometry_usage_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._included_road_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._included_lane_group_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._included_logical_boundary_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._included_marking_boundary_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._included_physical_divider_boundary_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._included_physical_marking_boundary_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._boundary_geometry_usage_.bitsizeof_packed(zserio_context.boundary_geometry_usage, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._included_road_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_lane_group_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_logical_boundary_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_marking_boundary_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_physical_divider_boundary_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_physical_marking_boundary_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._boundary_geometry_usage_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._included_road_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._included_lane_group_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._included_logical_boundary_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._included_marking_boundary_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._included_physical_divider_boundary_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._included_physical_marking_boundary_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._boundary_geometry_usage_.initialize_offsets_packed(zserio_context.boundary_geometry_usage, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._included_road_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), zserio_reader, is_auto=True)
        self._included_lane_group_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_lane_group_types()), zserio_reader, is_auto=True)
        self._included_logical_boundary_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_logical_boundary_types()), zserio_reader, is_auto=True)
        self._included_marking_boundary_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_marking_boundary_types()), zserio_reader, is_auto=True)
        self._included_physical_divider_boundary_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_divider_boundary_types()), zserio_reader, is_auto=True)
        self._included_physical_marking_boundary_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_marking_boundary_types()), zserio_reader, is_auto=True)
        self._boundary_geometry_usage_ = nds.lane.metadata.boundary_geometry_usage.BoundaryGeometryUsage.from_reader(zserio_reader)

    def read_packed(self, zserio_context: LaneLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._included_road_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), zserio_reader, is_auto=True)

        self._included_lane_group_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_lane_group_types()), zserio_reader, is_auto=True)

        self._included_logical_boundary_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_logical_boundary_types()), zserio_reader, is_auto=True)

        self._included_marking_boundary_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_marking_boundary_types()), zserio_reader, is_auto=True)

        self._included_physical_divider_boundary_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_divider_boundary_types()), zserio_reader, is_auto=True)

        self._included_physical_marking_boundary_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_physical_marking_boundary_types()), zserio_reader, is_auto=True)

        self._boundary_geometry_usage_ = nds.lane.metadata.boundary_geometry_usage.BoundaryGeometryUsage.from_reader_packed(zserio_context.boundary_geometry_usage, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._included_road_types_.write(zserio_writer)
        self._included_lane_group_types_.write(zserio_writer)
        self._included_logical_boundary_types_.write(zserio_writer)
        self._included_marking_boundary_types_.write(zserio_writer)
        self._included_physical_divider_boundary_types_.write(zserio_writer)
        self._included_physical_marking_boundary_types_.write(zserio_writer)
        self._boundary_geometry_usage_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._included_road_types_.write_packed(zserio_writer)

        self._included_lane_group_types_.write_packed(zserio_writer)

        self._included_logical_boundary_types_.write_packed(zserio_writer)

        self._included_marking_boundary_types_.write_packed(zserio_writer)

        self._included_physical_divider_boundary_types_.write_packed(zserio_writer)

        self._included_physical_marking_boundary_types_.write_packed(zserio_writer)

        self._boundary_geometry_usage_.write_packed(zserio_context.boundary_geometry_usage, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._boundary_geometry_usage_ = zserio.array.DeltaContext()

        @property
        def boundary_geometry_usage(self):
            return self._boundary_geometry_usage_

    class _ZserioElementFactory_included_road_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.road_type.RoadType.ZserioPackingContext:
            return nds.core.types.road_type.RoadType.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.road_type.RoadType.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_included_lane_group_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_type.LaneGroupType:
            del zserio_index
            return nds.lane.lanegroups.lane_group_type.LaneGroupType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_type.LaneGroupType:
            del zserio_index
            return nds.lane.lanegroups.lane_group_type.LaneGroupType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_included_logical_boundary_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.logical_boundary_type.LogicalBoundaryType:
            del zserio_index
            return nds.lane.types.logical_boundary_type.LogicalBoundaryType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.logical_boundary_type.LogicalBoundaryType:
            del zserio_index
            return nds.lane.types.logical_boundary_type.LogicalBoundaryType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_included_marking_boundary_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.marking_boundary_type.MarkingBoundaryType:
            del zserio_index
            return nds.lane.types.marking_boundary_type.MarkingBoundaryType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.marking_boundary_type.MarkingBoundaryType:
            del zserio_index
            return nds.lane.types.marking_boundary_type.MarkingBoundaryType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_included_physical_divider_boundary_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType:
            del zserio_index
            return nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType:
            del zserio_index
            return nds.lane.types.physical_divider_boundary_type.PhysicalDividerBoundaryType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_included_physical_marking_boundary_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType:
            del zserio_index
            return nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType:
            del zserio_index
            return nds.lane.types.physical_marking_boundary_type.PhysicalMarkingBoundaryType.from_reader_packed(zserio_context, zserio_reader)
