# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.geometry_layer_type
import nds.lane.instantiations.road_surface_line_geometry_layer
import nds.lane.instantiations.road_surface_polygon_geometry_layer
import nds.lane.roadsurface.road_surface_lane_group_relation
import nds.system.types.layer_type

class RoadSurfaceLayer:
    def __init__(
            self,
            road_surface_polygon_layer_: typing.Union[nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer, None] = None,
            road_surface_lines_layer_: typing.Union[nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer, None] = None,
            lanegroup_relations_: typing.List[nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation] = None) -> None:
        self._road_surface_polygon_layer_ = road_surface_polygon_layer_
        self._road_surface_lines_layer_ = road_surface_lines_layer_
        self._lanegroup_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanegroup_relations()), lanegroup_relations_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['RoadSurfaceLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadSurfaceLayer'],
            zserio_context: RoadSurfaceLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadSurfaceLayer):
            return ((self._road_surface_polygon_layer_ == other._road_surface_polygon_layer_) and
                    (self._road_surface_lines_layer_ == other._road_surface_lines_layer_) and
                    (self._lanegroup_relations_ == other._lanegroup_relations_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._road_surface_polygon_layer_)
        result = zserio.hashcode.calc_hashcode_object(result, self._road_surface_lines_layer_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lanegroup_relations_)

        return result

    @property
    def road_surface_polygon_layer(self) -> typing.Union[nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer, None]:
        return self._road_surface_polygon_layer_

    @road_surface_polygon_layer.setter
    def road_surface_polygon_layer(self, road_surface_polygon_layer_: typing.Union[nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer, None]) -> None:
        self._road_surface_polygon_layer_ = road_surface_polygon_layer_

    @property
    def road_surface_lines_layer(self) -> typing.Union[nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer, None]:
        return self._road_surface_lines_layer_

    @road_surface_lines_layer.setter
    def road_surface_lines_layer(self, road_surface_lines_layer_: typing.Union[nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer, None]) -> None:
        self._road_surface_lines_layer_ = road_surface_lines_layer_

    @property
    def lanegroup_relations(self) -> typing.List[nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation]:
        return self._lanegroup_relations_.raw_array

    @lanegroup_relations.setter
    def lanegroup_relations(self, lanegroup_relations_: typing.List[nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation]) -> None:
        self._lanegroup_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanegroup_relations()), lanegroup_relations_, is_auto=True)

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.GEOMETRY

    def init_packing_context(self, zserio_context: RoadSurfaceLayer.ZserioPackingContext) -> None:
        self._road_surface_polygon_layer_.init_packing_context(zserio_context.road_surface_polygon_layer)
        self._road_surface_lines_layer_.init_packing_context(zserio_context.road_surface_lines_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._road_surface_polygon_layer_.bitsizeof(end_bitposition)
        end_bitposition += self._road_surface_lines_layer_.bitsizeof(end_bitposition)
        end_bitposition += self._lanegroup_relations_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadSurfaceLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._road_surface_polygon_layer_.bitsizeof_packed(zserio_context.road_surface_polygon_layer, end_bitposition)
        end_bitposition += self._road_surface_lines_layer_.bitsizeof_packed(zserio_context.road_surface_lines_layer, end_bitposition)
        end_bitposition += self._lanegroup_relations_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._road_surface_polygon_layer_.initialize_offsets(end_bitposition)
        end_bitposition = self._road_surface_lines_layer_.initialize_offsets(end_bitposition)
        end_bitposition = self._lanegroup_relations_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadSurfaceLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._road_surface_polygon_layer_.initialize_offsets_packed(zserio_context.road_surface_polygon_layer, end_bitposition)
        end_bitposition = self._road_surface_lines_layer_.initialize_offsets_packed(zserio_context.road_surface_lines_layer, end_bitposition)
        end_bitposition = self._lanegroup_relations_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._road_surface_polygon_layer_ = nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D, True, True)
        self._road_surface_lines_layer_ = nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, True, True)
        self._lanegroup_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanegroup_relations()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: RoadSurfaceLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._road_surface_polygon_layer_ = nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer.from_reader_packed(zserio_context.road_surface_polygon_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D, True, True)

        self._road_surface_lines_layer_ = nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer.from_reader_packed(zserio_context.road_surface_lines_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, True, True)

        self._lanegroup_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanegroup_relations()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._road_surface_polygon_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D}!")
        if self._road_surface_polygon_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.has_ids} != {True}!")
        if self._road_surface_polygon_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.has_types} != {True}!")
        self._road_surface_polygon_layer_.write(zserio_writer)

        # check parameters
        if self._road_surface_lines_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._road_surface_lines_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.has_ids} != {True}!")
        if self._road_surface_lines_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.has_types} != {True}!")
        self._road_surface_lines_layer_.write(zserio_writer)

        self._lanegroup_relations_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: RoadSurfaceLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._road_surface_polygon_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D}!")
        if self._road_surface_polygon_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.has_ids} != {True}!")
        if self._road_surface_polygon_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field RoadSurfaceLayer.roadSurfacePolygonLayer: "
                                                f"{self._road_surface_polygon_layer_.has_types} != {True}!")
        self._road_surface_polygon_layer_.write_packed(zserio_context.road_surface_polygon_layer, zserio_writer)

        # check parameters
        if self._road_surface_lines_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._road_surface_lines_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.has_ids} != {True}!")
        if self._road_surface_lines_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field RoadSurfaceLayer.roadSurfaceLinesLayer: "
                                                f"{self._road_surface_lines_layer_.has_types} != {True}!")
        self._road_surface_lines_layer_.write_packed(zserio_context.road_surface_lines_layer, zserio_writer)

        self._lanegroup_relations_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._road_surface_polygon_layer_ = nds.lane.instantiations.road_surface_polygon_geometry_layer.RoadSurfacePolygonGeometryLayer.ZserioPackingContext()
            self._road_surface_lines_layer_ = nds.lane.instantiations.road_surface_line_geometry_layer.RoadSurfaceLineGeometryLayer.ZserioPackingContext()

        @property
        def road_surface_polygon_layer(self):
            return self._road_surface_polygon_layer_

        @property
        def road_surface_lines_layer(self):
            return self._road_surface_lines_layer_

    class _ZserioElementFactory_lanegroup_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation:
            del zserio_index
            return nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation.ZserioPackingContext:
            return nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation:
            del zserio_index
            return nds.lane.roadsurface.road_surface_lane_group_relation.RoadSurfaceLaneGroupRelation.from_reader_packed(zserio_context, zserio_reader)
