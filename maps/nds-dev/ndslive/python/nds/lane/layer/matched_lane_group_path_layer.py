# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.lanegroups.matched_lane_group_segment
import nds.system.types.layer_type

class MatchedLaneGroupPathLayer:
    def __init__(
            self,
            num_segments_: int = int(),
            segments_: typing.List[nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment] = None,
            path_ends_: bool = bool()) -> None:
        self._num_segments_ = num_segments_
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), segments_)
        self._path_ends_ = path_ends_

    @classmethod
    def from_reader(
            cls: typing.Type['MatchedLaneGroupPathLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'MatchedLaneGroupPathLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MatchedLaneGroupPathLayer'],
            zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MatchedLaneGroupPathLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MatchedLaneGroupPathLayer):
            return ((self._num_segments_ == other._num_segments_) and
                    (self._segments_ == other._segments_) and
                    (self._path_ends_ == other._path_ends_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_segments_)
        result = zserio.hashcode.calc_hashcode_object(result, self._segments_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._path_ends_)

        return result

    @property
    def num_segments(self) -> int:
        return self._num_segments_

    @num_segments.setter
    def num_segments(self, num_segments_: int) -> None:
        self._num_segments_ = num_segments_

    @property
    def segments(self) -> typing.List[nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment]:
        return self._segments_.raw_array

    @segments.setter
    def segments(self, segments_: typing.List[nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment]) -> None:
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), segments_)

    @property
    def path_ends(self) -> bool:
        return self._path_ends_

    @path_ends.setter
    def path_ends(self, path_ends_: bool) -> None:
        self._path_ends_ = path_ends_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext) -> None:
        zserio_context.num_segments.init(zserio.array.VarUInt16ArrayTraits(), self._num_segments_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_segments_)
        end_bitposition += self._segments_.bitsizeof(end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_segments.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_segments_)
        end_bitposition += self._segments_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_segments_)
        end_bitposition = self._segments_.initialize_offsets(end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_segments.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_segments_)
        end_bitposition = self._segments_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_segments_ = zserio_reader.read_varuint16()
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchedLaneGroupPathLayer.numSegments!")

        self._segments_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), zserio_reader, self._num_segments_)

        self._path_ends_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_segments_ = zserio_context.num_segments.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchedLaneGroupPathLayer.numSegments!")

        self._segments_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), zserio_reader, self._num_segments_)

        self._path_ends_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchedLaneGroupPathLayer.numSegments!")
        zserio_writer.write_varuint16(self._num_segments_)

        # check array length
        if len(self._segments_) != (self._num_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field MatchedLaneGroupPathLayer.segments: "
                                                f"{len(self._segments_)} != {self._num_segments_}!")
        self._segments_.write(zserio_writer)

        zserio_writer.write_bool(self._path_ends_)

    def write_packed(self, zserio_context: MatchedLaneGroupPathLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._num_segments_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchedLaneGroupPathLayer.numSegments!")
        zserio_context.num_segments.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_segments_)

        # check array length
        if len(self._segments_) != (self._num_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field MatchedLaneGroupPathLayer.segments: "
                                                f"{len(self._segments_)} != {self._num_segments_}!")
        self._segments_.write_packed(zserio_writer)

        zserio_writer.write_bool(self._path_ends_)

    class ZserioPackingContext:
        def __init__(self):
            self._num_segments_ = zserio.array.DeltaContext()

        @property
        def num_segments(self):
            return self._num_segments_

    class _ZserioElementFactory_segments:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment:
            del zserio_index
            return nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment.ZserioPackingContext:
            return nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment:
            del zserio_index
            return nds.lane.lanegroups.matched_lane_group_segment.MatchedLaneGroupSegment.from_reader_packed(zserio_context, zserio_reader)
