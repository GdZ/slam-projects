# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary
import nds.lane.boundaries.boundary_element_definitions
import nds.lane.lanegroups.lane_group
import nds.system.types.layer_type

class LaneLayer:
    def __init__(
            self,
            boundary_definitions_: typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None] = None,
            boundary_list_: typing.List[nds.lane.boundaries.boundary.Boundary] = None,
            lane_group_list_: typing.List[nds.lane.lanegroups.lane_group.LaneGroup] = None) -> None:
        self._boundary_definitions_ = boundary_definitions_
        self._boundary_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_list()), boundary_list_, is_auto=True)
        self._lane_group_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_list()), lane_group_list_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneLayer'],
            zserio_context: LaneLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneLayer):
            return ((self._boundary_definitions_ == other._boundary_definitions_) and
                    (self._boundary_list_ == other._boundary_list_) and
                    (self._lane_group_list_ == other._lane_group_list_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._boundary_definitions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundary_list_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lane_group_list_)

        return result

    @property
    def boundary_definitions(self) -> typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None]:
        return self._boundary_definitions_

    @boundary_definitions.setter
    def boundary_definitions(self, boundary_definitions_: typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None]) -> None:
        self._boundary_definitions_ = boundary_definitions_

    @property
    def boundary_list(self) -> typing.List[nds.lane.boundaries.boundary.Boundary]:
        return self._boundary_list_.raw_array

    @boundary_list.setter
    def boundary_list(self, boundary_list_: typing.List[nds.lane.boundaries.boundary.Boundary]) -> None:
        self._boundary_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_list()), boundary_list_, is_auto=True)

    @property
    def lane_group_list(self) -> typing.List[nds.lane.lanegroups.lane_group.LaneGroup]:
        return self._lane_group_list_.raw_array

    @lane_group_list.setter
    def lane_group_list(self, lane_group_list_: typing.List[nds.lane.lanegroups.lane_group.LaneGroup]) -> None:
        self._lane_group_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_list()), lane_group_list_, is_auto=True)

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: LaneLayer.ZserioPackingContext) -> None:
        self._boundary_definitions_.init_packing_context(zserio_context.boundary_definitions)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._boundary_definitions_.bitsizeof(end_bitposition)
        end_bitposition += self._boundary_list_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._lane_group_list_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._boundary_definitions_.bitsizeof_packed(zserio_context.boundary_definitions, end_bitposition)
        end_bitposition += self._boundary_list_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._lane_group_list_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._boundary_definitions_.initialize_offsets(end_bitposition)
        end_bitposition = self._boundary_list_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._lane_group_list_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._boundary_definitions_.initialize_offsets_packed(zserio_context.boundary_definitions, end_bitposition)
        end_bitposition = self._boundary_list_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._lane_group_list_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.from_reader(zserio_reader)
        self._boundary_list_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_list()), zserio_reader, is_auto=True)
        self._lane_group_list_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_list()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: LaneLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.from_reader_packed(zserio_context.boundary_definitions, zserio_reader)

        self._boundary_list_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_list()), zserio_reader, is_auto=True)

        self._lane_group_list_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_list()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._boundary_definitions_.write(zserio_writer)
        self._boundary_list_.write_packed(zserio_writer)
        self._lane_group_list_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: LaneLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._boundary_definitions_.write_packed(zserio_context.boundary_definitions, zserio_writer)

        self._boundary_list_.write_packed(zserio_writer)

        self._lane_group_list_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.ZserioPackingContext()

        @property
        def boundary_definitions(self):
            return self._boundary_definitions_

    class _ZserioElementFactory_boundary_list:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary.Boundary:
            del zserio_index
            return nds.lane.boundaries.boundary.Boundary.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.boundaries.boundary.Boundary.ZserioPackingContext:
            return nds.lane.boundaries.boundary.Boundary.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.boundaries.boundary.Boundary.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary.Boundary:
            del zserio_index
            return nds.lane.boundaries.boundary.Boundary.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_lane_group_list:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group.LaneGroup:
            del zserio_index
            return nds.lane.lanegroups.lane_group.LaneGroup.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext:
            return nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group.LaneGroup:
            del zserio_index
            return nds.lane.lanegroups.lane_group.LaneGroup.from_reader_packed(zserio_context, zserio_reader)
