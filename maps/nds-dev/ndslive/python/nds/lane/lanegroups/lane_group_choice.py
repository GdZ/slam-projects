# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.lanegroups.artificial_intersection_lane_group
import nds.lane.lanegroups.artificial_road_lane_group
import nds.lane.lanegroups.border_lane_group
import nds.lane.lanegroups.fork_lane_group
import nds.lane.lanegroups.intersection_lane_group
import nds.lane.lanegroups.lane_group_type
import nds.lane.lanegroups.road_lane_group

class LaneGroupChoice:
    def __init__(
            self,
            type_: nds.lane.lanegroups.lane_group_type.LaneGroupType,
            has_boundary_geometry_: bool,
            *,
            road_: typing.Union[nds.lane.lanegroups.road_lane_group.RoadLaneGroup, None] = None,
            intersection_: typing.Union[nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup, None] = None,
            border_: typing.Union[nds.lane.lanegroups.border_lane_group.BorderLaneGroup, None] = None,
            fork_: typing.Union[nds.lane.lanegroups.fork_lane_group.ForkLaneGroup, None] = None,
            artificial_road_: typing.Union[nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup, None] = None,
            artificial_intersection_: typing.Union[nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup, None] = None) -> None:
        self._type_ = type_
        self._has_boundary_geometry_ = has_boundary_geometry_
        self._choice: typing.Any = None
        if road_ is not None:
            self._choice = road_
        if intersection_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice LaneGroupChoice is ambiguous!")
            self._choice = intersection_
        if border_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice LaneGroupChoice is ambiguous!")
            self._choice = border_
        if fork_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice LaneGroupChoice is ambiguous!")
            self._choice = fork_
        if artificial_road_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice LaneGroupChoice is ambiguous!")
            self._choice = artificial_road_
        if artificial_intersection_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice LaneGroupChoice is ambiguous!")
            self._choice = artificial_intersection_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroupChoice'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.lane.lanegroups.lane_group_type.LaneGroupType,
            has_boundary_geometry_: bool) -> 'LaneGroupChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._has_boundary_geometry_ = has_boundary_geometry_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroupChoice'],
            zserio_context: LaneGroupChoice.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.lane.lanegroups.lane_group_type.LaneGroupType,
            has_boundary_geometry_: bool) -> 'LaneGroupChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._has_boundary_geometry_ = has_boundary_geometry_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroupChoice):
            return (self._type_ == other._type_ and
                    self._has_boundary_geometry_ == other._has_boundary_geometry_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_boundary_geometry_)
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.lane.lanegroups.lane_group_type.LaneGroupType:
        return self._type_

    @property
    def has_boundary_geometry(self) -> bool:
        return self._has_boundary_geometry_

    @property
    def road(self) -> typing.Union[nds.lane.lanegroups.road_lane_group.RoadLaneGroup, None]:
        return self._choice

    @road.setter
    def road(self, road_: typing.Union[nds.lane.lanegroups.road_lane_group.RoadLaneGroup, None]) -> None:
        self._choice = road_

    @property
    def intersection(self) -> typing.Union[nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup, None]:
        return self._choice

    @intersection.setter
    def intersection(self, intersection_: typing.Union[nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup, None]) -> None:
        self._choice = intersection_

    @property
    def border(self) -> typing.Union[nds.lane.lanegroups.border_lane_group.BorderLaneGroup, None]:
        return self._choice

    @border.setter
    def border(self, border_: typing.Union[nds.lane.lanegroups.border_lane_group.BorderLaneGroup, None]) -> None:
        self._choice = border_

    @property
    def fork(self) -> typing.Union[nds.lane.lanegroups.fork_lane_group.ForkLaneGroup, None]:
        return self._choice

    @fork.setter
    def fork(self, fork_: typing.Union[nds.lane.lanegroups.fork_lane_group.ForkLaneGroup, None]) -> None:
        self._choice = fork_

    @property
    def artificial_road(self) -> typing.Union[nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup, None]:
        return self._choice

    @artificial_road.setter
    def artificial_road(self, artificial_road_: typing.Union[nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup, None]) -> None:
        self._choice = artificial_road_

    @property
    def artificial_intersection(self) -> typing.Union[nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup, None]:
        return self._choice

    @artificial_intersection.setter
    def artificial_intersection(self, artificial_intersection_: typing.Union[nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup, None]) -> None:
        self._choice = artificial_intersection_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            return self.CHOICE_ROAD
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            return self.CHOICE_INTERSECTION
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            return self.CHOICE_BORDER
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            return self.CHOICE_FORK
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            return self.CHOICE_ARTIFICIAL_ROAD
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            return self.CHOICE_ARTIFICIAL_INTERSECTION
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: LaneGroupChoice.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            self._choice.init_packing_context(zserio_context.road)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            self._choice.init_packing_context(zserio_context.intersection)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            self._choice.init_packing_context(zserio_context.border)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            self._choice.init_packing_context(zserio_context.fork)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            self._choice.init_packing_context(zserio_context.artificial_road)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            self._choice.init_packing_context(zserio_context.artificial_intersection)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroupChoice.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.intersection, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.border, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.fork, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.artificial_road, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.artificial_intersection, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroupChoice.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.intersection, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.border, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.fork, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.artificial_road, end_bitposition)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.artificial_intersection, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            self._choice = nds.lane.lanegroups.road_lane_group.RoadLaneGroup.from_reader(zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            self._choice = nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup.from_reader(zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            self._choice = nds.lane.lanegroups.border_lane_group.BorderLaneGroup.from_reader(zserio_reader)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            self._choice = nds.lane.lanegroups.fork_lane_group.ForkLaneGroup.from_reader(zserio_reader)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            self._choice = nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup.from_reader(zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            self._choice = nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

    def read_packed(self, zserio_context: LaneGroupChoice.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            self._choice = nds.lane.lanegroups.road_lane_group.RoadLaneGroup.from_reader_packed(zserio_context.road, zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            self._choice = nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup.from_reader_packed(zserio_context.intersection, zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            self._choice = nds.lane.lanegroups.border_lane_group.BorderLaneGroup.from_reader_packed(zserio_context.border, zserio_reader)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            self._choice = nds.lane.lanegroups.fork_lane_group.ForkLaneGroup.from_reader_packed(zserio_context.fork, zserio_reader)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            self._choice = nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup.from_reader_packed(zserio_context.artificial_road, zserio_reader, self._has_boundary_geometry_)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            self._choice = nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup.from_reader_packed(zserio_context.artificial_intersection, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.road: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.intersection: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.artificialRoad: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

    def write_packed(self, zserio_context: LaneGroupChoice.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ROAD):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.road: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write_packed(zserio_context.road, zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.INTERSECTION):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.intersection: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write_packed(zserio_context.intersection, zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.BORDER):
            self._choice.write_packed(zserio_context.border, zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.FORK):
            self._choice.write_packed(zserio_context.fork, zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_ROAD):
            # check parameters
            if self._choice.has_boundary_geometry != (self._has_boundary_geometry_):
                raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.artificialRoad: "
                                                    f"{self._choice.has_boundary_geometry} != {self._has_boundary_geometry_}!")
            self._choice.write_packed(zserio_context.artificial_road, zserio_writer)
        elif selector == (nds.lane.lanegroups.lane_group_type.LaneGroupType.ARTIFICIAL_INTERSECTION):
            self._choice.write_packed(zserio_context.artificial_intersection, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice LaneGroupChoice!")

    class ZserioPackingContext:
        def __init__(self):
            self._road_ = nds.lane.lanegroups.road_lane_group.RoadLaneGroup.ZserioPackingContext()
            self._intersection_ = nds.lane.lanegroups.intersection_lane_group.IntersectionLaneGroup.ZserioPackingContext()
            self._border_ = nds.lane.lanegroups.border_lane_group.BorderLaneGroup.ZserioPackingContext()
            self._fork_ = nds.lane.lanegroups.fork_lane_group.ForkLaneGroup.ZserioPackingContext()
            self._artificial_road_ = nds.lane.lanegroups.artificial_road_lane_group.ArtificialRoadLaneGroup.ZserioPackingContext()
            self._artificial_intersection_ = nds.lane.lanegroups.artificial_intersection_lane_group.ArtificialIntersectionLaneGroup.ZserioPackingContext()

        @property
        def road(self):
            return self._road_

        @property
        def intersection(self):
            return self._intersection_

        @property
        def border(self):
            return self._border_

        @property
        def fork(self):
            return self._fork_

        @property
        def artificial_road(self):
            return self._artificial_road_

        @property
        def artificial_intersection(self):
            return self._artificial_intersection_

    CHOICE_ROAD = 0
    CHOICE_INTERSECTION = 1
    CHOICE_BORDER = 2
    CHOICE_FORK = 3
    CHOICE_ARTIFICIAL_ROAD = 4
    CHOICE_ARTIFICIAL_INTERSECTION = 5
    UNDEFINED_CHOICE = -1
