# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.lanegroups.lane_group_choice
import nds.lane.lanegroups.lane_group_type
import nds.lane.reference.types.lane_group_id

class LaneGroup:
    def __init__(
            self,
            id_: typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None] = None,
            type_: typing.Union[nds.lane.lanegroups.lane_group_type.LaneGroupType, None] = None,
            has_boundary_geometry_: bool = bool(),
            lane_group_: typing.Union[nds.lane.lanegroups.lane_group_choice.LaneGroupChoice, None] = None) -> None:
        self._id_ = id_
        self._type_ = type_
        self._has_boundary_geometry_ = has_boundary_geometry_
        self._lane_group_ = lane_group_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroup'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroup':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroup'],
            zserio_context: LaneGroup.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroup':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroup):
            return ((self._id_ == other._id_) and
                    (self._type_ == other._type_) and
                    (self._has_boundary_geometry_ == other._has_boundary_geometry_) and
                    (self._lane_group_ == other._lane_group_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_boundary_geometry_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lane_group_)

        return result

    @property
    def id(self) -> typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None]:
        return self._id_

    @id.setter
    def id(self, id_: typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None]) -> None:
        self._id_ = id_

    @property
    def type(self) -> typing.Union[nds.lane.lanegroups.lane_group_type.LaneGroupType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.lane.lanegroups.lane_group_type.LaneGroupType, None]) -> None:
        self._type_ = type_

    @property
    def has_boundary_geometry(self) -> bool:
        return self._has_boundary_geometry_

    @has_boundary_geometry.setter
    def has_boundary_geometry(self, has_boundary_geometry_: bool) -> None:
        self._has_boundary_geometry_ = has_boundary_geometry_

    @property
    def lane_group(self) -> typing.Union[nds.lane.lanegroups.lane_group_choice.LaneGroupChoice, None]:
        return self._lane_group_

    @lane_group.setter
    def lane_group(self, lane_group_: typing.Union[nds.lane.lanegroups.lane_group_choice.LaneGroupChoice, None]) -> None:
        self._lane_group_ = lane_group_

    def init_packing_context(self, zserio_context: LaneGroup.ZserioPackingContext) -> None:
        self._id_.init_packing_context(zserio_context.id)
        self._type_.init_packing_context(zserio_context.type)
        self._lane_group_.init_packing_context(zserio_context.lane_group)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof(end_bitposition)
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += 1
        end_bitposition += self._lane_group_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroup.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof_packed(zserio_context.id, end_bitposition)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        end_bitposition += self._lane_group_.bitsizeof_packed(zserio_context.lane_group, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets(end_bitposition)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        end_bitposition = self._lane_group_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroup.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets_packed(zserio_context.id, end_bitposition)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        end_bitposition = self._lane_group_.initialize_offsets_packed(zserio_context.lane_group, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.from_reader(zserio_reader)
        self._type_ = nds.lane.lanegroups.lane_group_type.LaneGroupType.from_reader(zserio_reader)
        self._has_boundary_geometry_ = zserio_reader.read_bool()
        self._lane_group_ = nds.lane.lanegroups.lane_group_choice.LaneGroupChoice.from_reader(zserio_reader, self._type_, self._has_boundary_geometry_)

    def read_packed(self, zserio_context: LaneGroup.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.from_reader_packed(zserio_context.id, zserio_reader)

        self._type_ = nds.lane.lanegroups.lane_group_type.LaneGroupType.from_reader_packed(zserio_context.type, zserio_reader)

        self._has_boundary_geometry_ = zserio_reader.read_bool()

        self._lane_group_ = nds.lane.lanegroups.lane_group_choice.LaneGroupChoice.from_reader_packed(zserio_context.lane_group, zserio_reader, self._type_, self._has_boundary_geometry_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write(zserio_writer)

        self._type_.write(zserio_writer)

        zserio_writer.write_bool(self._has_boundary_geometry_)

        # check parameters
        if self._lane_group_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field LaneGroup.laneGroup: "
                                                f"{self._lane_group_.type} != {self._type_}!")
        if self._lane_group_.has_boundary_geometry != (self._has_boundary_geometry_):
            raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroup.laneGroup: "
                                                f"{self._lane_group_.has_boundary_geometry} != {self._has_boundary_geometry_}!")
        self._lane_group_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneGroup.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write_packed(zserio_context.id, zserio_writer)

        self._type_.write_packed(zserio_context.type, zserio_writer)

        zserio_writer.write_bool(self._has_boundary_geometry_)

        # check parameters
        if self._lane_group_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field LaneGroup.laneGroup: "
                                                f"{self._lane_group_.type} != {self._type_}!")
        if self._lane_group_.has_boundary_geometry != (self._has_boundary_geometry_):
            raise zserio.PythonRuntimeException("Wrong parameter hasBoundaryGeometry for field LaneGroup.laneGroup: "
                                                f"{self._lane_group_.has_boundary_geometry} != {self._has_boundary_geometry_}!")
        self._lane_group_.write_packed(zserio_context.lane_group, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.ZserioPackingContext()
            self._type_ = zserio.array.DeltaContext()
            self._lane_group_ = nds.lane.lanegroups.lane_group_choice.LaneGroupChoice.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

        @property
        def type(self):
            return self._type_

        @property
        def lane_group(self):
            return self._lane_group_
