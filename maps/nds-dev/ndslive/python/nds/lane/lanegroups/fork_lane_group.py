# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.lanegroups.lane_group_connector
import nds.lane.lanes.zero_length_lane

class ForkLaneGroup:
    def __init__(
            self,
            start_connector_: typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector] = None,
            end_connector_: typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector] = None,
            lanes_: typing.List[nds.lane.lanes.zero_length_lane.ZeroLengthLane] = None) -> None:
        self._start_connector_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_start_connector()), start_connector_, is_auto=True)
        self._end_connector_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_end_connector()), end_connector_, is_auto=True)
        self._lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), lanes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['ForkLaneGroup'],
            zserio_reader: zserio.BitStreamReader) -> 'ForkLaneGroup':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ForkLaneGroup'],
            zserio_context: ForkLaneGroup.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ForkLaneGroup':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ForkLaneGroup):
            return ((self._start_connector_ == other._start_connector_) and
                    (self._end_connector_ == other._end_connector_) and
                    (self._lanes_ == other._lanes_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._start_connector_)
        result = zserio.hashcode.calc_hashcode_object(result, self._end_connector_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lanes_)

        return result

    @property
    def start_connector(self) -> typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector]:
        return self._start_connector_.raw_array

    @start_connector.setter
    def start_connector(self, start_connector_: typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector]) -> None:
        self._start_connector_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_start_connector()), start_connector_, is_auto=True)

    @property
    def end_connector(self) -> typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector]:
        return self._end_connector_.raw_array

    @end_connector.setter
    def end_connector(self, end_connector_: typing.List[nds.lane.lanegroups.lane_group_connector.LaneGroupConnector]) -> None:
        self._end_connector_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_end_connector()), end_connector_, is_auto=True)

    @property
    def lanes(self) -> typing.List[nds.lane.lanes.zero_length_lane.ZeroLengthLane]:
        return self._lanes_.raw_array

    @lanes.setter
    def lanes(self, lanes_: typing.List[nds.lane.lanes.zero_length_lane.ZeroLengthLane]) -> None:
        self._lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), lanes_, is_auto=True)

    def init_packing_context(self, zserio_context: ForkLaneGroup.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_connector_.bitsizeof(end_bitposition)
        end_bitposition += self._end_connector_.bitsizeof(end_bitposition)
        end_bitposition += self._lanes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ForkLaneGroup.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._start_connector_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._end_connector_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._lanes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_connector_.initialize_offsets(end_bitposition)
        end_bitposition = self._end_connector_.initialize_offsets(end_bitposition)
        end_bitposition = self._lanes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ForkLaneGroup.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._start_connector_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._end_connector_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._lanes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_connector_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_start_connector()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._start_connector_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.startConnector!")

        self._end_connector_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_end_connector()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._end_connector_) > 0 and (len(self._start_connector_) > 1 or len(self._end_connector_) > 1)):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.endConnector!")

        self._lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: ForkLaneGroup.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._start_connector_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_start_connector()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._start_connector_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.startConnector!")

        self._end_connector_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_end_connector()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._end_connector_) > 0 and (len(self._start_connector_) > 1 or len(self._end_connector_) > 1)):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.endConnector!")

        self._lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (len(self._start_connector_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.startConnector!")
        self._start_connector_.write(zserio_writer)

        # check constraint
        if not (len(self._end_connector_) > 0 and (len(self._start_connector_) > 1 or len(self._end_connector_) > 1)):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.endConnector!")
        self._end_connector_.write(zserio_writer)

        self._lanes_.write(zserio_writer)

    def write_packed(self, zserio_context: ForkLaneGroup.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        # check constraint
        if not (len(self._start_connector_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.startConnector!")
        self._start_connector_.write_packed(zserio_writer)

        # check constraint
        if not (len(self._end_connector_) > 0 and (len(self._start_connector_) > 1 or len(self._end_connector_) > 1)):
            raise zserio.PythonRuntimeException("Constraint violated for field ForkLaneGroup.endConnector!")
        self._end_connector_.write_packed(zserio_writer)

        self._lanes_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_start_connector:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector:
            del zserio_index
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.from_reader(zserio_reader, False)

        @staticmethod
        def create_packing_context() -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext:
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector:
            del zserio_index
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.from_reader_packed(zserio_context, zserio_reader, False)

    class _ZserioElementFactory_end_connector:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector:
            del zserio_index
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.from_reader(zserio_reader, False)

        @staticmethod
        def create_packing_context() -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext:
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group_connector.LaneGroupConnector:
            del zserio_index
            return nds.lane.lanegroups.lane_group_connector.LaneGroupConnector.from_reader_packed(zserio_context, zserio_reader, False)

    class _ZserioElementFactory_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.zero_length_lane.ZeroLengthLane:
            del zserio_index
            return nds.lane.lanes.zero_length_lane.ZeroLengthLane.from_reader(zserio_reader, False)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.zero_length_lane.ZeroLengthLane.ZserioPackingContext:
            return nds.lane.lanes.zero_length_lane.ZeroLengthLane.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.zero_length_lane.ZeroLengthLane.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.zero_length_lane.ZeroLengthLane:
            del zserio_index
            return nds.lane.lanes.zero_length_lane.ZeroLengthLane.from_reader_packed(zserio_context, zserio_reader, False)
