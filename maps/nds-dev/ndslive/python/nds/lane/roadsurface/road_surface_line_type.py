# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.roadsurface.road_surface_line_logical_type
import nds.lane.roadsurface.road_surface_line_marking
import nds.lane.roadsurface.road_surface_line_physical_type

class RoadSurfaceLineType:
    def __init__(
            self,
            physical_type_: typing.Union[nds.lane.roadsurface.road_surface_line_physical_type.RoadSurfaceLinePhysicalType, None] = None,
            logical_type_: typing.Union[nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType, None] = None,
            marking_details_: typing.Optional[nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking] = None) -> None:
        self._physical_type_ = physical_type_
        self._logical_type_ = logical_type_
        self._marking_details_ = marking_details_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadSurfaceLineType'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLineType':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadSurfaceLineType'],
            zserio_context: RoadSurfaceLineType.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLineType':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadSurfaceLineType):
            return ((self._physical_type_ == other._physical_type_) and
                    (self._logical_type_ == other._logical_type_) and
                    (not other.is_marking_details_used() if not self.is_marking_details_used() else (self._marking_details_ == other._marking_details_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._physical_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._logical_type_)
        if self.is_marking_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._marking_details_)

        return result

    @property
    def physical_type(self) -> typing.Union[nds.lane.roadsurface.road_surface_line_physical_type.RoadSurfaceLinePhysicalType, None]:
        return self._physical_type_

    @physical_type.setter
    def physical_type(self, physical_type_: typing.Union[nds.lane.roadsurface.road_surface_line_physical_type.RoadSurfaceLinePhysicalType, None]) -> None:
        self._physical_type_ = physical_type_

    @property
    def logical_type(self) -> typing.Union[nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType, None]:
        return self._logical_type_

    @logical_type.setter
    def logical_type(self, logical_type_: typing.Union[nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType, None]) -> None:
        self._logical_type_ = logical_type_

    @property
    def marking_details(self) -> typing.Optional[nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking]:
        return self._marking_details_

    @marking_details.setter
    def marking_details(self, marking_details_: typing.Optional[nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking]) -> None:
        self._marking_details_ = marking_details_

    def is_marking_details_used(self) -> bool:
        return self._logical_type_ == nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType.MARKING_LINE

    def is_marking_details_set(self) -> bool:
        return not self._marking_details_ is None

    def reset_marking_details(self) -> None:
        self._marking_details_ = None

    def init_packing_context(self, zserio_context: RoadSurfaceLineType.ZserioPackingContext) -> None:
        self._physical_type_.init_packing_context(zserio_context.physical_type)
        self._logical_type_.init_packing_context(zserio_context.logical_type)
        if self.is_marking_details_used():
            self._marking_details_.init_packing_context(zserio_context.marking_details)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._physical_type_.bitsizeof(end_bitposition)
        end_bitposition += self._logical_type_.bitsizeof(end_bitposition)
        if self.is_marking_details_used():
            end_bitposition += self._marking_details_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadSurfaceLineType.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._physical_type_.bitsizeof_packed(zserio_context.physical_type, end_bitposition)
        end_bitposition += self._logical_type_.bitsizeof_packed(zserio_context.logical_type, end_bitposition)
        if self.is_marking_details_used():
            end_bitposition += self._marking_details_.bitsizeof_packed(zserio_context.marking_details, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._physical_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._logical_type_.initialize_offsets(end_bitposition)
        if self.is_marking_details_used():
            end_bitposition = self._marking_details_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadSurfaceLineType.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._physical_type_.initialize_offsets_packed(zserio_context.physical_type, end_bitposition)
        end_bitposition = self._logical_type_.initialize_offsets_packed(zserio_context.logical_type, end_bitposition)
        if self.is_marking_details_used():
            end_bitposition = self._marking_details_.initialize_offsets_packed(zserio_context.marking_details, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._physical_type_ = nds.lane.roadsurface.road_surface_line_physical_type.RoadSurfaceLinePhysicalType.from_reader(zserio_reader)
        self._logical_type_ = nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType.from_reader(zserio_reader)
        if self.is_marking_details_used():
            self._marking_details_ = nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking.from_reader(zserio_reader)
        else:
            self._marking_details_ = None

    def read_packed(self, zserio_context: RoadSurfaceLineType.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._physical_type_ = nds.lane.roadsurface.road_surface_line_physical_type.RoadSurfaceLinePhysicalType.from_reader_packed(zserio_context.physical_type, zserio_reader)

        self._logical_type_ = nds.lane.roadsurface.road_surface_line_logical_type.RoadSurfaceLineLogicalType.from_reader_packed(zserio_context.logical_type, zserio_reader)

        if self.is_marking_details_used():
            self._marking_details_ = nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking.from_reader_packed(zserio_context.marking_details, zserio_reader)
        else:
            self._marking_details_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._physical_type_.write(zserio_writer)
        self._logical_type_.write(zserio_writer)
        if self.is_marking_details_used():
            self._marking_details_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadSurfaceLineType.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._physical_type_.write_packed(zserio_context.physical_type, zserio_writer)

        self._logical_type_.write_packed(zserio_context.logical_type, zserio_writer)

        if self.is_marking_details_used():
            self._marking_details_.write_packed(zserio_context.marking_details, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._physical_type_ = zserio.array.DeltaContext()
            self._logical_type_ = zserio.array.DeltaContext()
            self._marking_details_ = nds.lane.roadsurface.road_surface_line_marking.RoadSurfaceLineMarking.ZserioPackingContext()

        @property
        def physical_type(self):
            return self._physical_type_

        @property
        def logical_type(self):
            return self._logical_type_

        @property
        def marking_details(self):
            return self._marking_details_
