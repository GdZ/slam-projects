# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RoadSurfacePolygonMarkingType(zserio.Enum):
    UNKNOWN = 0
    DASH = 1
    TEXT = 2
    ARROW_STRAIGHT = 3
    ARROW_LEFT = 4
    ARROW_RIGHT = 5
    ARROW_STRAIGHT_AND_LEFT = 6
    ARROW_STRAIGHT_AND_RIGHT = 7
    ARROW_LEFT_AND_RIGHT = 8
    ARROW_SLIGHT_LEFT = 9
    ARROW_SLIGHT_RIGHT = 10
    ARROW_U_TURN = 11
    ARROW_STRAIGHT_AND_U_TURN = 12
    ARROW_LEFT_AND_U_TURN = 13
    ARROW_RIGHT_AND_U_TURN = 14
    SIGN = 15
    YIELD_INDICATION = 16
    VISUAL_SPEED_BUMP = 17
    SHADED_AREA = 18

    @classmethod
    def from_name(cls: typing.Type['RoadSurfacePolygonMarkingType'], item_name: str) -> 'RoadSurfacePolygonMarkingType':
        if item_name == 'UNKNOWN':
            item = RoadSurfacePolygonMarkingType.UNKNOWN
        elif item_name == 'DASH':
            item = RoadSurfacePolygonMarkingType.DASH
        elif item_name == 'TEXT':
            item = RoadSurfacePolygonMarkingType.TEXT
        elif item_name == 'ARROW_STRAIGHT':
            item = RoadSurfacePolygonMarkingType.ARROW_STRAIGHT
        elif item_name == 'ARROW_LEFT':
            item = RoadSurfacePolygonMarkingType.ARROW_LEFT
        elif item_name == 'ARROW_RIGHT':
            item = RoadSurfacePolygonMarkingType.ARROW_RIGHT
        elif item_name == 'ARROW_STRAIGHT_AND_LEFT':
            item = RoadSurfacePolygonMarkingType.ARROW_STRAIGHT_AND_LEFT
        elif item_name == 'ARROW_STRAIGHT_AND_RIGHT':
            item = RoadSurfacePolygonMarkingType.ARROW_STRAIGHT_AND_RIGHT
        elif item_name == 'ARROW_LEFT_AND_RIGHT':
            item = RoadSurfacePolygonMarkingType.ARROW_LEFT_AND_RIGHT
        elif item_name == 'ARROW_SLIGHT_LEFT':
            item = RoadSurfacePolygonMarkingType.ARROW_SLIGHT_LEFT
        elif item_name == 'ARROW_SLIGHT_RIGHT':
            item = RoadSurfacePolygonMarkingType.ARROW_SLIGHT_RIGHT
        elif item_name == 'ARROW_U_TURN':
            item = RoadSurfacePolygonMarkingType.ARROW_U_TURN
        elif item_name == 'ARROW_STRAIGHT_AND_U_TURN':
            item = RoadSurfacePolygonMarkingType.ARROW_STRAIGHT_AND_U_TURN
        elif item_name == 'ARROW_LEFT_AND_U_TURN':
            item = RoadSurfacePolygonMarkingType.ARROW_LEFT_AND_U_TURN
        elif item_name == 'ARROW_RIGHT_AND_U_TURN':
            item = RoadSurfacePolygonMarkingType.ARROW_RIGHT_AND_U_TURN
        elif item_name == 'SIGN':
            item = RoadSurfacePolygonMarkingType.SIGN
        elif item_name == 'YIELD_INDICATION':
            item = RoadSurfacePolygonMarkingType.YIELD_INDICATION
        elif item_name == 'VISUAL_SPEED_BUMP':
            item = RoadSurfacePolygonMarkingType.VISUAL_SPEED_BUMP
        elif item_name == 'SHADED_AREA':
            item = RoadSurfacePolygonMarkingType.SHADED_AREA
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RoadSurfacePolygonMarkingType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RoadSurfacePolygonMarkingType'], reader: zserio.BitStreamReader) -> 'RoadSurfacePolygonMarkingType':
        return cls(reader.read_varuint32())

    @classmethod
    def from_reader_packed(cls: typing.Type['RoadSurfacePolygonMarkingType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RoadSurfacePolygonMarkingType':
        return cls(delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(), writer, self.value)
