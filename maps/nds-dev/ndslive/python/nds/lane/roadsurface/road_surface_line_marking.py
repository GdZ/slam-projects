# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.reference.types.marking_color
import nds.lane.roadsurface.marking_width
import nds.lane.roadsurface.road_surface_line_marking_type
import nds.lane.types.marking_material

class RoadSurfaceLineMarking:
    def __init__(
            self,
            marking_type_: typing.Union[nds.lane.roadsurface.road_surface_line_marking_type.RoadSurfaceLineMarkingType, None] = None,
            marking_color_: typing.Union[nds.lane.reference.types.marking_color.MarkingColor, None] = None,
            marking_material_: typing.Union[nds.lane.types.marking_material.MarkingMaterial, None] = None,
            marking_width_: nds.lane.roadsurface.marking_width.MarkingWidth = nds.lane.roadsurface.marking_width.MarkingWidth()) -> None:
        self._marking_type_ = marking_type_
        self._marking_color_ = marking_color_
        self._marking_material_ = marking_material_
        self._marking_width_ = marking_width_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadSurfaceLineMarking'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLineMarking':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadSurfaceLineMarking'],
            zserio_context: RoadSurfaceLineMarking.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLineMarking':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadSurfaceLineMarking):
            return ((self._marking_type_ == other._marking_type_) and
                    (self._marking_color_ == other._marking_color_) and
                    (self._marking_material_ == other._marking_material_) and
                    (self._marking_width_ == other._marking_width_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._marking_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._marking_color_)
        result = zserio.hashcode.calc_hashcode_object(result, self._marking_material_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._marking_width_)

        return result

    @property
    def marking_type(self) -> typing.Union[nds.lane.roadsurface.road_surface_line_marking_type.RoadSurfaceLineMarkingType, None]:
        return self._marking_type_

    @marking_type.setter
    def marking_type(self, marking_type_: typing.Union[nds.lane.roadsurface.road_surface_line_marking_type.RoadSurfaceLineMarkingType, None]) -> None:
        self._marking_type_ = marking_type_

    @property
    def marking_color(self) -> typing.Union[nds.lane.reference.types.marking_color.MarkingColor, None]:
        return self._marking_color_

    @marking_color.setter
    def marking_color(self, marking_color_: typing.Union[nds.lane.reference.types.marking_color.MarkingColor, None]) -> None:
        self._marking_color_ = marking_color_

    @property
    def marking_material(self) -> typing.Union[nds.lane.types.marking_material.MarkingMaterial, None]:
        return self._marking_material_

    @marking_material.setter
    def marking_material(self, marking_material_: typing.Union[nds.lane.types.marking_material.MarkingMaterial, None]) -> None:
        self._marking_material_ = marking_material_

    @property
    def marking_width(self) -> nds.lane.roadsurface.marking_width.MarkingWidth:
        return self._marking_width_

    @marking_width.setter
    def marking_width(self, marking_width_: nds.lane.roadsurface.marking_width.MarkingWidth) -> None:
        self._marking_width_ = marking_width_

    def init_packing_context(self, zserio_context: RoadSurfaceLineMarking.ZserioPackingContext) -> None:
        self._marking_type_.init_packing_context(zserio_context.marking_type)
        self._marking_color_.init_packing_context(zserio_context.marking_color)
        self._marking_material_.init_packing_context(zserio_context.marking_material)
        zserio_context.marking_width.init(zserio.array.VarUInt32ArrayTraits(), self._marking_width_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._marking_type_.bitsizeof(end_bitposition)
        end_bitposition += self._marking_color_.bitsizeof(end_bitposition)
        end_bitposition += self._marking_material_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._marking_width_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadSurfaceLineMarking.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._marking_type_.bitsizeof_packed(zserio_context.marking_type, end_bitposition)
        end_bitposition += self._marking_color_.bitsizeof_packed(zserio_context.marking_color, end_bitposition)
        end_bitposition += self._marking_material_.bitsizeof_packed(zserio_context.marking_material, end_bitposition)
        end_bitposition += zserio_context.marking_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._marking_width_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._marking_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._marking_color_.initialize_offsets(end_bitposition)
        end_bitposition = self._marking_material_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._marking_width_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadSurfaceLineMarking.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._marking_type_.initialize_offsets_packed(zserio_context.marking_type, end_bitposition)
        end_bitposition = self._marking_color_.initialize_offsets_packed(zserio_context.marking_color, end_bitposition)
        end_bitposition = self._marking_material_.initialize_offsets_packed(zserio_context.marking_material, end_bitposition)
        end_bitposition += zserio_context.marking_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._marking_width_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._marking_type_ = nds.lane.roadsurface.road_surface_line_marking_type.RoadSurfaceLineMarkingType.from_reader(zserio_reader)
        self._marking_color_ = nds.lane.reference.types.marking_color.MarkingColor.from_reader(zserio_reader)
        self._marking_material_ = nds.lane.types.marking_material.MarkingMaterial.from_reader(zserio_reader)
        self._marking_width_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: RoadSurfaceLineMarking.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._marking_type_ = nds.lane.roadsurface.road_surface_line_marking_type.RoadSurfaceLineMarkingType.from_reader_packed(zserio_context.marking_type, zserio_reader)

        self._marking_color_ = nds.lane.reference.types.marking_color.MarkingColor.from_reader_packed(zserio_context.marking_color, zserio_reader)

        self._marking_material_ = nds.lane.types.marking_material.MarkingMaterial.from_reader_packed(zserio_context.marking_material, zserio_reader)

        self._marking_width_ = zserio_context.marking_width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._marking_type_.write(zserio_writer)
        self._marking_color_.write(zserio_writer)
        self._marking_material_.write(zserio_writer)
        zserio_writer.write_varuint32(self._marking_width_)

    def write_packed(self, zserio_context: RoadSurfaceLineMarking.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._marking_type_.write_packed(zserio_context.marking_type, zserio_writer)

        self._marking_color_.write_packed(zserio_context.marking_color, zserio_writer)

        self._marking_material_.write_packed(zserio_context.marking_material, zserio_writer)

        zserio_context.marking_width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._marking_width_)

    class ZserioPackingContext:
        def __init__(self):
            self._marking_type_ = zserio.array.DeltaContext()
            self._marking_color_ = zserio.array.DeltaContext()
            self._marking_material_ = zserio.array.DeltaContext()
            self._marking_width_ = zserio.array.DeltaContext()

        @property
        def marking_type(self):
            return self._marking_type_

        @property
        def marking_color(self):
            return self._marking_color_

        @property
        def marking_material(self):
            return self._marking_material_

        @property
        def marking_width(self):
            return self._marking_width_
