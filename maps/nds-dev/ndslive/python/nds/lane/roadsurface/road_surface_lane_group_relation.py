# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.reference.types.lane_group_id
import nds.lane.reference.types.lane_id
import nds.lane.reference.types.road_surface_id

class RoadSurfaceLaneGroupRelation:
    def __init__(
            self,
            lane_group_id_: typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None] = None,
            has_lane_relation_: bool = bool(),
            lane_id_: typing.Optional[typing.List[nds.lane.reference.types.lane_id.LaneId]] = None,
            num_surfaces_: int = int(),
            related_surfaces_: typing.List[nds.lane.reference.types.road_surface_id.RoadSurfaceId] = None) -> None:
        self._lane_group_id_ = lane_group_id_
        self._has_lane_relation_ = has_lane_relation_
        if lane_id_ is None:
            self._lane_id_ = None
        else:
            self._lane_id_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_id()), lane_id_, is_auto=True)
        self._num_surfaces_ = num_surfaces_
        self._related_surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_surfaces()), related_surfaces_)

    @classmethod
    def from_reader(
            cls: typing.Type['RoadSurfaceLaneGroupRelation'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLaneGroupRelation':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadSurfaceLaneGroupRelation'],
            zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadSurfaceLaneGroupRelation':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadSurfaceLaneGroupRelation):
            return ((self._lane_group_id_ == other._lane_group_id_) and
                    (self._has_lane_relation_ == other._has_lane_relation_) and
                    (not other.is_lane_id_used() if not self.is_lane_id_used() else (self._lane_id_ == other._lane_id_)) and
                    (self._num_surfaces_ == other._num_surfaces_) and
                    (self._related_surfaces_ == other._related_surfaces_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._lane_group_id_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_lane_relation_)
        if self.is_lane_id_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_id_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_surfaces_)
        result = zserio.hashcode.calc_hashcode_object(result, self._related_surfaces_)

        return result

    @property
    def lane_group_id(self) -> typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None]:
        return self._lane_group_id_

    @lane_group_id.setter
    def lane_group_id(self, lane_group_id_: typing.Union[nds.lane.reference.types.lane_group_id.LaneGroupId, None]) -> None:
        self._lane_group_id_ = lane_group_id_

    @property
    def has_lane_relation(self) -> bool:
        return self._has_lane_relation_

    @has_lane_relation.setter
    def has_lane_relation(self, has_lane_relation_: bool) -> None:
        self._has_lane_relation_ = has_lane_relation_

    @property
    def lane_id(self) -> typing.Optional[typing.List[nds.lane.reference.types.lane_id.LaneId]]:
        return None if self._lane_id_ is None else self._lane_id_.raw_array

    @lane_id.setter
    def lane_id(self, lane_id_: typing.Optional[typing.List[nds.lane.reference.types.lane_id.LaneId]]) -> None:
        if lane_id_ is None:
            self._lane_id_ = None
        else:
            self._lane_id_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_id()), lane_id_, is_auto=True)

    def is_lane_id_used(self) -> bool:
        return self._has_lane_relation_

    def is_lane_id_set(self) -> bool:
        return not self._lane_id_ is None

    def reset_lane_id(self) -> None:
        self._lane_id_ = None

    @property
    def num_surfaces(self) -> int:
        return self._num_surfaces_

    @num_surfaces.setter
    def num_surfaces(self, num_surfaces_: int) -> None:
        self._num_surfaces_ = num_surfaces_

    @property
    def related_surfaces(self) -> typing.List[nds.lane.reference.types.road_surface_id.RoadSurfaceId]:
        return self._related_surfaces_.raw_array

    @related_surfaces.setter
    def related_surfaces(self, related_surfaces_: typing.List[nds.lane.reference.types.road_surface_id.RoadSurfaceId]) -> None:
        self._related_surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_surfaces()), related_surfaces_)

    def init_packing_context(self, zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext) -> None:
        self._lane_group_id_.init_packing_context(zserio_context.lane_group_id)
        zserio_context.num_surfaces.init(zserio.array.VarSizeArrayTraits(), self._num_surfaces_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._lane_group_id_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_lane_id_used():
            end_bitposition += self._lane_id_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_surfaces_)
        end_bitposition += self._related_surfaces_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._lane_group_id_.bitsizeof_packed(zserio_context.lane_group_id, end_bitposition)
        end_bitposition += 1
        if self.is_lane_id_used():
            end_bitposition += self._lane_id_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.num_surfaces.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_surfaces_)
        end_bitposition += self._related_surfaces_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._lane_group_id_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_lane_id_used():
            end_bitposition = self._lane_id_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_surfaces_)
        end_bitposition = self._related_surfaces_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._lane_group_id_.initialize_offsets_packed(zserio_context.lane_group_id, end_bitposition)
        end_bitposition += 1
        if self.is_lane_id_used():
            end_bitposition = self._lane_id_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.num_surfaces.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_surfaces_)
        end_bitposition = self._related_surfaces_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._lane_group_id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.from_reader(zserio_reader)
        self._has_lane_relation_ = zserio_reader.read_bool()
        if self.is_lane_id_used():
            self._lane_id_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_id()), zserio_reader, is_auto=True)
        else:
            self._lane_id_ = None
        self._num_surfaces_ = zserio_reader.read_varsize()
        self._related_surfaces_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_surfaces()), zserio_reader, self._num_surfaces_)

    def read_packed(self, zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._lane_group_id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.from_reader_packed(zserio_context.lane_group_id, zserio_reader)

        self._has_lane_relation_ = zserio_reader.read_bool()

        if self.is_lane_id_used():
            self._lane_id_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_id()), zserio_reader, is_auto=True)
        else:
            self._lane_id_ = None

        self._num_surfaces_ = zserio_context.num_surfaces.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._related_surfaces_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_surfaces()), zserio_reader, self._num_surfaces_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._lane_group_id_.write(zserio_writer)

        zserio_writer.write_bool(self._has_lane_relation_)

        if self.is_lane_id_used():
            self._lane_id_.write(zserio_writer)

        zserio_writer.write_varsize(self._num_surfaces_)

        # check array length
        if len(self._related_surfaces_) != (self._num_surfaces_):
            raise zserio.PythonRuntimeException("Wrong array length for field RoadSurfaceLaneGroupRelation.relatedSurfaces: "
                                                f"{len(self._related_surfaces_)} != {self._num_surfaces_}!")
        self._related_surfaces_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadSurfaceLaneGroupRelation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._lane_group_id_.write_packed(zserio_context.lane_group_id, zserio_writer)

        zserio_writer.write_bool(self._has_lane_relation_)

        if self.is_lane_id_used():
            self._lane_id_.write_packed(zserio_writer)

        zserio_context.num_surfaces.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_surfaces_)

        # check array length
        if len(self._related_surfaces_) != (self._num_surfaces_):
            raise zserio.PythonRuntimeException("Wrong array length for field RoadSurfaceLaneGroupRelation.relatedSurfaces: "
                                                f"{len(self._related_surfaces_)} != {self._num_surfaces_}!")
        self._related_surfaces_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._lane_group_id_ = nds.lane.reference.types.lane_group_id.LaneGroupId.ZserioPackingContext()
            self._num_surfaces_ = zserio.array.DeltaContext()

        @property
        def lane_group_id(self):
            return self._lane_group_id_

        @property
        def num_surfaces(self):
            return self._num_surfaces_

    class _ZserioElementFactory_lane_id:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_id.LaneId:
            del zserio_index
            return nds.lane.reference.types.lane_id.LaneId.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext:
            return nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_id.LaneId:
            del zserio_index
            return nds.lane.reference.types.lane_id.LaneId.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_related_surfaces:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.road_surface_id.RoadSurfaceId:
            del zserio_index
            return nds.lane.reference.types.road_surface_id.RoadSurfaceId.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.reference.types.road_surface_id.RoadSurfaceId.ZserioPackingContext:
            return nds.lane.reference.types.road_surface_id.RoadSurfaceId.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.reference.types.road_surface_id.RoadSurfaceId.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.road_surface_id.RoadSurfaceId:
            del zserio_index
            return nds.lane.reference.types.road_surface_id.RoadSurfaceId.from_reader_packed(zserio_context, zserio_reader)
