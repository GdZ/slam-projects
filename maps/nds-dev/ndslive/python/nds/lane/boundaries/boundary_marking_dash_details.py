# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary_marking_dash_length
import nds.lane.boundaries.boundary_marking_dash_spacing

import nds.lane.boundaries.unknown_marking_dash_spacing

class BoundaryMarkingDashDetails:
    def __init__(
            self,
            dash_length_: nds.lane.boundaries.boundary_marking_dash_length.BoundaryMarkingDashLength = nds.lane.boundaries.boundary_marking_dash_length.BoundaryMarkingDashLength(),
            dash_spacing_: nds.lane.boundaries.boundary_marking_dash_spacing.BoundaryMarkingDashSpacing = nds.lane.boundaries.boundary_marking_dash_spacing.BoundaryMarkingDashSpacing(),
            space_at_start_: typing.Optional[bool] = None,
            space_at_end_: typing.Optional[bool] = None) -> None:
        self._dash_length_ = dash_length_
        self._dash_spacing_ = dash_spacing_
        self._space_at_start_ = space_at_start_
        self._space_at_end_ = space_at_end_

    @classmethod
    def from_reader(
            cls: typing.Type['BoundaryMarkingDashDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryMarkingDashDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundaryMarkingDashDetails'],
            zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryMarkingDashDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundaryMarkingDashDetails):
            return ((self._dash_length_ == other._dash_length_) and
                    (self._dash_spacing_ == other._dash_spacing_) and
                    (not other.is_space_at_start_used() if not self.is_space_at_start_used() else (self._space_at_start_ == other._space_at_start_)) and
                    (not other.is_space_at_end_used() if not self.is_space_at_end_used() else (self._space_at_end_ == other._space_at_end_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._dash_length_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._dash_spacing_)
        if self.is_space_at_start_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._space_at_start_)
        if self.is_space_at_end_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._space_at_end_)

        return result

    @property
    def dash_length(self) -> nds.lane.boundaries.boundary_marking_dash_length.BoundaryMarkingDashLength:
        return self._dash_length_

    @dash_length.setter
    def dash_length(self, dash_length_: nds.lane.boundaries.boundary_marking_dash_length.BoundaryMarkingDashLength) -> None:
        self._dash_length_ = dash_length_

    @property
    def dash_spacing(self) -> nds.lane.boundaries.boundary_marking_dash_spacing.BoundaryMarkingDashSpacing:
        return self._dash_spacing_

    @dash_spacing.setter
    def dash_spacing(self, dash_spacing_: nds.lane.boundaries.boundary_marking_dash_spacing.BoundaryMarkingDashSpacing) -> None:
        self._dash_spacing_ = dash_spacing_

    @property
    def space_at_start(self) -> typing.Optional[bool]:
        return self._space_at_start_

    @space_at_start.setter
    def space_at_start(self, space_at_start_: typing.Optional[bool]) -> None:
        self._space_at_start_ = space_at_start_

    def is_space_at_start_used(self) -> bool:
        return self._dash_spacing_ != nds.lane.boundaries.unknown_marking_dash_spacing.UNKNOWN_MARKING_DASH_SPACING

    def is_space_at_start_set(self) -> bool:
        return not self._space_at_start_ is None

    def reset_space_at_start(self) -> None:
        self._space_at_start_ = None

    @property
    def space_at_end(self) -> typing.Optional[bool]:
        return self._space_at_end_

    @space_at_end.setter
    def space_at_end(self, space_at_end_: typing.Optional[bool]) -> None:
        self._space_at_end_ = space_at_end_

    def is_space_at_end_used(self) -> bool:
        return self._dash_spacing_ != nds.lane.boundaries.unknown_marking_dash_spacing.UNKNOWN_MARKING_DASH_SPACING

    def is_space_at_end_set(self) -> bool:
        return not self._space_at_end_ is None

    def reset_space_at_end(self) -> None:
        self._space_at_end_ = None

    def init_packing_context(self, zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext) -> None:
        zserio_context.dash_length.init(zserio.array.VarUInt32ArrayTraits(), self._dash_length_)
        zserio_context.dash_spacing.init(zserio.array.VarUInt32ArrayTraits(), self._dash_spacing_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._dash_length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._dash_spacing_)
        if self.is_space_at_start_used():
            end_bitposition += 1
        if self.is_space_at_end_used():
            end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.dash_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._dash_length_)
        end_bitposition += zserio_context.dash_spacing.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._dash_spacing_)
        if self.is_space_at_start_used():
            end_bitposition += 1
        if self.is_space_at_end_used():
            end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._dash_length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._dash_spacing_)
        if self.is_space_at_start_used():
            end_bitposition += 1
        if self.is_space_at_end_used():
            end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.dash_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._dash_length_)
        end_bitposition += zserio_context.dash_spacing.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._dash_spacing_)
        if self.is_space_at_start_used():
            end_bitposition += 1
        if self.is_space_at_end_used():
            end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._dash_length_ = zserio_reader.read_varuint32()
        self._dash_spacing_ = zserio_reader.read_varuint32()
        if self.is_space_at_start_used():
            self._space_at_start_ = zserio_reader.read_bool()
        else:
            self._space_at_start_ = None
        if self.is_space_at_end_used():
            self._space_at_end_ = zserio_reader.read_bool()
        else:
            self._space_at_end_ = None

    def read_packed(self, zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._dash_length_ = zserio_context.dash_length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._dash_spacing_ = zserio_context.dash_spacing.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if self.is_space_at_start_used():
            self._space_at_start_ = zserio_reader.read_bool()
        else:
            self._space_at_start_ = None

        if self.is_space_at_end_used():
            self._space_at_end_ = zserio_reader.read_bool()
        else:
            self._space_at_end_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._dash_length_)
        zserio_writer.write_varuint32(self._dash_spacing_)
        if self.is_space_at_start_used():
            zserio_writer.write_bool(self._space_at_start_)
        if self.is_space_at_end_used():
            zserio_writer.write_bool(self._space_at_end_)

    def write_packed(self, zserio_context: BoundaryMarkingDashDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.dash_length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._dash_length_)

        zserio_context.dash_spacing.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._dash_spacing_)

        if self.is_space_at_start_used():
            zserio_writer.write_bool(self._space_at_start_)

        if self.is_space_at_end_used():
            zserio_writer.write_bool(self._space_at_end_)

    class ZserioPackingContext:
        def __init__(self):
            self._dash_length_ = zserio.array.DeltaContext()
            self._dash_spacing_ = zserio.array.DeltaContext()

        @property
        def dash_length(self):
            return self._dash_length_

        @property
        def dash_spacing(self):
            return self._dash_spacing_
