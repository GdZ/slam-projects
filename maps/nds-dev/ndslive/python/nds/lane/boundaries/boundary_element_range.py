# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary_element_id
import nds.lane.reference.types.boundary_geometry_range

class BoundaryElementRange:
    def __init__(
            self,
            boundary_element_id_: nds.lane.boundaries.boundary_element_id.BoundaryElementId = nds.lane.boundaries.boundary_element_id.BoundaryElementId(),
            range_: typing.Union[nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange, None] = None) -> None:
        self._boundary_element_id_ = boundary_element_id_
        self._range_ = range_

    @classmethod
    def from_reader(
            cls: typing.Type['BoundaryElementRange'],
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryElementRange':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundaryElementRange'],
            zserio_context: BoundaryElementRange.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryElementRange':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundaryElementRange):
            return ((self._boundary_element_id_ == other._boundary_element_id_) and
                    (self._range_ == other._range_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._boundary_element_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._range_)

        return result

    @property
    def boundary_element_id(self) -> nds.lane.boundaries.boundary_element_id.BoundaryElementId:
        return self._boundary_element_id_

    @boundary_element_id.setter
    def boundary_element_id(self, boundary_element_id_: nds.lane.boundaries.boundary_element_id.BoundaryElementId) -> None:
        self._boundary_element_id_ = boundary_element_id_

    @property
    def range(self) -> typing.Union[nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange, None]:
        return self._range_

    @range.setter
    def range(self, range_: typing.Union[nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange, None]) -> None:
        self._range_ = range_

    def init_packing_context(self, zserio_context: BoundaryElementRange.ZserioPackingContext) -> None:
        zserio_context.boundary_element_id.init(zserio.array.VarUInt16ArrayTraits(), self._boundary_element_id_)
        self._range_.init_packing_context(zserio_context.range)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._boundary_element_id_)
        end_bitposition += self._range_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundaryElementRange.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.boundary_element_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._boundary_element_id_)
        end_bitposition += self._range_.bitsizeof_packed(zserio_context.range, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._boundary_element_id_)
        end_bitposition = self._range_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundaryElementRange.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.boundary_element_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._boundary_element_id_)
        end_bitposition = self._range_.initialize_offsets_packed(zserio_context.range, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._boundary_element_id_ = zserio_reader.read_varuint16()
        self._range_ = nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange.from_reader(zserio_reader)

    def read_packed(self, zserio_context: BoundaryElementRange.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._boundary_element_id_ = zserio_context.boundary_element_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._range_ = nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange.from_reader_packed(zserio_context.range, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._boundary_element_id_)
        self._range_.write(zserio_writer)

    def write_packed(self, zserio_context: BoundaryElementRange.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.boundary_element_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._boundary_element_id_)

        self._range_.write_packed(zserio_context.range, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._boundary_element_id_ = zserio.array.DeltaContext()
            self._range_ = nds.lane.reference.types.boundary_geometry_range.BoundaryGeometryRange.ZserioPackingContext()

        @property
        def boundary_element_id(self):
            return self._boundary_element_id_

        @property
        def range(self):
            return self._range_
