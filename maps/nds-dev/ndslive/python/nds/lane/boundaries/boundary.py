# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary_element_range
import nds.lane.boundaries.boundary_geometry_reference
import nds.lane.boundaries.boundary_id

class Boundary:
    def __init__(
            self,
            id_: typing.Union[nds.lane.boundaries.boundary_id.BoundaryId, None] = None,
            geometry_reference_: typing.Union[nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference, None] = None,
            boundary_element_ranges_: typing.List[nds.lane.boundaries.boundary_element_range.BoundaryElementRange] = None) -> None:
        self._id_ = id_
        self._geometry_reference_ = geometry_reference_
        self._boundary_element_ranges_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_element_ranges()), boundary_element_ranges_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Boundary'],
            zserio_reader: zserio.BitStreamReader) -> 'Boundary':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Boundary'],
            zserio_context: Boundary.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Boundary':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Boundary):
            return ((self._id_ == other._id_) and
                    (self._geometry_reference_ == other._geometry_reference_) and
                    (self._boundary_element_ranges_ == other._boundary_element_ranges_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._geometry_reference_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundary_element_ranges_)

        return result

    @property
    def id(self) -> typing.Union[nds.lane.boundaries.boundary_id.BoundaryId, None]:
        return self._id_

    @id.setter
    def id(self, id_: typing.Union[nds.lane.boundaries.boundary_id.BoundaryId, None]) -> None:
        self._id_ = id_

    @property
    def geometry_reference(self) -> typing.Union[nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference, None]:
        return self._geometry_reference_

    @geometry_reference.setter
    def geometry_reference(self, geometry_reference_: typing.Union[nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference, None]) -> None:
        self._geometry_reference_ = geometry_reference_

    @property
    def boundary_element_ranges(self) -> typing.List[nds.lane.boundaries.boundary_element_range.BoundaryElementRange]:
        return self._boundary_element_ranges_.raw_array

    @boundary_element_ranges.setter
    def boundary_element_ranges(self, boundary_element_ranges_: typing.List[nds.lane.boundaries.boundary_element_range.BoundaryElementRange]) -> None:
        self._boundary_element_ranges_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_element_ranges()), boundary_element_ranges_, is_auto=True)

    def init_packing_context(self, zserio_context: Boundary.ZserioPackingContext) -> None:
        self._id_.init_packing_context(zserio_context.id)
        self._geometry_reference_.init_packing_context(zserio_context.geometry_reference)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof(end_bitposition)
        end_bitposition += self._geometry_reference_.bitsizeof(end_bitposition)
        end_bitposition += self._boundary_element_ranges_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Boundary.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof_packed(zserio_context.id, end_bitposition)
        end_bitposition += self._geometry_reference_.bitsizeof_packed(zserio_context.geometry_reference, end_bitposition)
        end_bitposition += self._boundary_element_ranges_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets(end_bitposition)
        end_bitposition = self._geometry_reference_.initialize_offsets(end_bitposition)
        end_bitposition = self._boundary_element_ranges_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Boundary.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets_packed(zserio_context.id, end_bitposition)
        end_bitposition = self._geometry_reference_.initialize_offsets_packed(zserio_context.geometry_reference, end_bitposition)
        end_bitposition = self._boundary_element_ranges_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.lane.boundaries.boundary_id.BoundaryId.from_reader(zserio_reader)

        self._geometry_reference_ = nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference.from_reader(zserio_reader)

        self._boundary_element_ranges_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_element_ranges()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._boundary_element_ranges_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field Boundary.boundaryElementRanges!")

    def read_packed(self, zserio_context: Boundary.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.lane.boundaries.boundary_id.BoundaryId.from_reader_packed(zserio_context.id, zserio_reader)

        self._geometry_reference_ = nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference.from_reader_packed(zserio_context.geometry_reference, zserio_reader)

        self._boundary_element_ranges_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundary_element_ranges()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._boundary_element_ranges_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field Boundary.boundaryElementRanges!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write(zserio_writer)

        self._geometry_reference_.write(zserio_writer)

        # check constraint
        if not (len(self._boundary_element_ranges_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field Boundary.boundaryElementRanges!")
        self._boundary_element_ranges_.write(zserio_writer)

    def write_packed(self, zserio_context: Boundary.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write_packed(zserio_context.id, zserio_writer)

        self._geometry_reference_.write_packed(zserio_context.geometry_reference, zserio_writer)

        # check constraint
        if not (len(self._boundary_element_ranges_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field Boundary.boundaryElementRanges!")
        self._boundary_element_ranges_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = nds.lane.boundaries.boundary_id.BoundaryId.ZserioPackingContext()
            self._geometry_reference_ = nds.lane.boundaries.boundary_geometry_reference.BoundaryGeometryReference.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

        @property
        def geometry_reference(self):
            return self._geometry_reference_

    class _ZserioElementFactory_boundary_element_ranges:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_element_range.BoundaryElementRange:
            del zserio_index
            return nds.lane.boundaries.boundary_element_range.BoundaryElementRange.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.boundaries.boundary_element_range.BoundaryElementRange.ZserioPackingContext:
            return nds.lane.boundaries.boundary_element_range.BoundaryElementRange.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.boundaries.boundary_element_range.BoundaryElementRange.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_element_range.BoundaryElementRange:
            del zserio_index
            return nds.lane.boundaries.boundary_element_range.BoundaryElementRange.from_reader_packed(zserio_context, zserio_reader)
