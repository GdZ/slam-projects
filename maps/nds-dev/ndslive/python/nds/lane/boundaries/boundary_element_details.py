# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.logical_boundary_element
import nds.lane.boundaries.marking_boundary_element
import nds.lane.boundaries.physical_divider_boundary_element
import nds.lane.boundaries.physical_marking_boundary_element
import nds.lane.types.boundary_element_type

class BoundaryElementDetails:
    def __init__(
            self,
            type_: nds.lane.types.boundary_element_type.BoundaryElementType,
            *,
            logical_element_: typing.Union[nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement, None] = None,
            marking_element_: typing.Union[nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement, None] = None,
            physical_divider_element_: typing.Union[nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement, None] = None,
            physical_marking_element_: typing.Union[nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if logical_element_ is not None:
            self._choice = logical_element_
        if marking_element_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice BoundaryElementDetails is ambiguous!")
            self._choice = marking_element_
        if physical_divider_element_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice BoundaryElementDetails is ambiguous!")
            self._choice = physical_divider_element_
        if physical_marking_element_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice BoundaryElementDetails is ambiguous!")
            self._choice = physical_marking_element_

    @classmethod
    def from_reader(
            cls: typing.Type['BoundaryElementDetails'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.lane.types.boundary_element_type.BoundaryElementType) -> 'BoundaryElementDetails':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundaryElementDetails'],
            zserio_context: BoundaryElementDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.lane.types.boundary_element_type.BoundaryElementType) -> 'BoundaryElementDetails':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundaryElementDetails):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.lane.types.boundary_element_type.BoundaryElementType:
        return self._type_

    @property
    def logical_element(self) -> typing.Union[nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement, None]:
        return self._choice

    @logical_element.setter
    def logical_element(self, logical_element_: typing.Union[nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement, None]) -> None:
        self._choice = logical_element_

    @property
    def marking_element(self) -> typing.Union[nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement, None]:
        return self._choice

    @marking_element.setter
    def marking_element(self, marking_element_: typing.Union[nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement, None]) -> None:
        self._choice = marking_element_

    @property
    def physical_divider_element(self) -> typing.Union[nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement, None]:
        return self._choice

    @physical_divider_element.setter
    def physical_divider_element(self, physical_divider_element_: typing.Union[nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement, None]) -> None:
        self._choice = physical_divider_element_

    @property
    def physical_marking_element(self) -> typing.Union[nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement, None]:
        return self._choice

    @physical_marking_element.setter
    def physical_marking_element(self, physical_marking_element_: typing.Union[nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement, None]) -> None:
        self._choice = physical_marking_element_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            return self.CHOICE_LOGICAL_ELEMENT
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            return self.CHOICE_MARKING_ELEMENT
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            return self.CHOICE_PHYSICAL_DIVIDER_ELEMENT
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            return self.CHOICE_PHYSICAL_MARKING_ELEMENT
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: BoundaryElementDetails.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            self._choice.init_packing_context(zserio_context.logical_element)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            self._choice.init_packing_context(zserio_context.marking_element)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            self._choice.init_packing_context(zserio_context.physical_divider_element)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            self._choice.init_packing_context(zserio_context.physical_marking_element)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundaryElementDetails.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.logical_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.marking_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.physical_divider_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.physical_marking_element, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundaryElementDetails.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.logical_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.marking_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.physical_divider_element, end_bitposition)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.physical_marking_element, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            self._choice = nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement.from_reader(zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            self._choice = nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement.from_reader(zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            self._choice = nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement.from_reader(zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            self._choice = nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

    def read_packed(self, zserio_context: BoundaryElementDetails.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            self._choice = nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement.from_reader_packed(zserio_context.logical_element, zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            self._choice = nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement.from_reader_packed(zserio_context.marking_element, zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            self._choice = nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement.from_reader_packed(zserio_context.physical_divider_element, zserio_reader)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            self._choice = nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement.from_reader_packed(zserio_context.physical_marking_element, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            self._choice.write(zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

    def write_packed(self, zserio_context: BoundaryElementDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.lane.types.boundary_element_type.BoundaryElementType.LOGICAL):
            self._choice.write_packed(zserio_context.logical_element, zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.MARKING):
            self._choice.write_packed(zserio_context.marking_element, zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_DIVIDER):
            self._choice.write_packed(zserio_context.physical_divider_element, zserio_writer)
        elif selector == (nds.lane.types.boundary_element_type.BoundaryElementType.PHYSICAL_MARKING):
            self._choice.write_packed(zserio_context.physical_marking_element, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice BoundaryElementDetails!")

    class ZserioPackingContext:
        def __init__(self):
            self._logical_element_ = nds.lane.boundaries.logical_boundary_element.LogicalBoundaryElement.ZserioPackingContext()
            self._marking_element_ = nds.lane.boundaries.marking_boundary_element.MarkingBoundaryElement.ZserioPackingContext()
            self._physical_divider_element_ = nds.lane.boundaries.physical_divider_boundary_element.PhysicalDividerBoundaryElement.ZserioPackingContext()
            self._physical_marking_element_ = nds.lane.boundaries.physical_marking_boundary_element.PhysicalMarkingBoundaryElement.ZserioPackingContext()

        @property
        def logical_element(self):
            return self._logical_element_

        @property
        def marking_element(self):
            return self._marking_element_

        @property
        def physical_divider_element(self):
            return self._physical_divider_element_

        @property
        def physical_marking_element(self):
            return self._physical_marking_element_

    CHOICE_LOGICAL_ELEMENT = 0
    CHOICE_MARKING_ELEMENT = 1
    CHOICE_PHYSICAL_DIVIDER_ELEMENT = 2
    CHOICE_PHYSICAL_MARKING_ELEMENT = 3
    UNDEFINED_CHOICE = -1
