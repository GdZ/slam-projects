# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary_geometry_position
import nds.lane.boundaries.boundary_reference

class BoundaryReferenceWithPosition:
    def __init__(
            self,
            reference_: typing.Union[nds.lane.boundaries.boundary_reference.BoundaryReference, None] = None,
            position_: nds.lane.boundaries.boundary_geometry_position.BoundaryGeometryPosition = nds.lane.boundaries.boundary_geometry_position.BoundaryGeometryPosition()) -> None:
        self._reference_ = reference_
        self._position_ = position_

    @classmethod
    def from_reader(
            cls: typing.Type['BoundaryReferenceWithPosition'],
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryReferenceWithPosition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundaryReferenceWithPosition'],
            zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BoundaryReferenceWithPosition':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundaryReferenceWithPosition):
            return ((self._reference_ == other._reference_) and
                    (self._position_ == other._position_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._reference_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._position_)

        return result

    @property
    def reference(self) -> typing.Union[nds.lane.boundaries.boundary_reference.BoundaryReference, None]:
        return self._reference_

    @reference.setter
    def reference(self, reference_: typing.Union[nds.lane.boundaries.boundary_reference.BoundaryReference, None]) -> None:
        self._reference_ = reference_

    @property
    def position(self) -> nds.lane.boundaries.boundary_geometry_position.BoundaryGeometryPosition:
        return self._position_

    @position.setter
    def position(self, position_: nds.lane.boundaries.boundary_geometry_position.BoundaryGeometryPosition) -> None:
        self._position_ = position_

    def init_packing_context(self, zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext) -> None:
        self._reference_.init_packing_context(zserio_context.reference)
        zserio_context.position.init(zserio.array.VarSizeArrayTraits(), self._position_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reference_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._position_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reference_.bitsizeof_packed(zserio_context.reference, end_bitposition)
        end_bitposition += zserio_context.position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._position_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reference_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._position_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reference_.initialize_offsets_packed(zserio_context.reference, end_bitposition)
        end_bitposition += zserio_context.position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._position_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._reference_ = nds.lane.boundaries.boundary_reference.BoundaryReference.from_reader(zserio_reader)
        self._position_ = zserio_reader.read_varsize()

    def read_packed(self, zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._reference_ = nds.lane.boundaries.boundary_reference.BoundaryReference.from_reader_packed(zserio_context.reference, zserio_reader)

        self._position_ = zserio_context.position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._reference_.write(zserio_writer)
        zserio_writer.write_varsize(self._position_)

    def write_packed(self, zserio_context: BoundaryReferenceWithPosition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._reference_.write_packed(zserio_context.reference, zserio_writer)

        zserio_context.position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._position_)

    class ZserioPackingContext:
        def __init__(self):
            self._reference_ = nds.lane.boundaries.boundary_reference.BoundaryReference.ZserioPackingContext()
            self._position_ = zserio.array.DeltaContext()

        @property
        def reference(self):
            return self._reference_

        @property
        def position(self):
            return self._position_
