# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.geometry_layer_type
import nds.core.types.time_stamp
import nds.lane.instantiations.center_line_geometry_layer
import nds.vehicle.reference.types.horizon_path_id

class LaneGeometryOnPathTopic:
    def __init__(
            self,
            stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId = nds.vehicle.reference.types.horizon_path_id.HorizonPathId(),
            center_line_geometry_layer_: typing.Union[nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer, None] = None) -> None:
        self._stamp_ = stamp_
        self._path_id_ = path_id_
        self._center_line_geometry_layer_ = center_line_geometry_layer_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGeometryOnPathTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneGeometryOnPathTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGeometryOnPathTopic'],
            zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneGeometryOnPathTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGeometryOnPathTopic):
            return ((self._stamp_ == other._stamp_) and
                    (self._path_id_ == other._path_id_) and
                    (self._center_line_geometry_layer_ == other._center_line_geometry_layer_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._stamp_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._path_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._center_line_geometry_layer_)

        return result

    @property
    def stamp(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._stamp_

    @stamp.setter
    def stamp(self, stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._stamp_ = stamp_

    @property
    def path_id(self) -> nds.vehicle.reference.types.horizon_path_id.HorizonPathId:
        return self._path_id_

    @path_id.setter
    def path_id(self, path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId) -> None:
        self._path_id_ = path_id_

    @property
    def center_line_geometry_layer(self) -> typing.Union[nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer, None]:
        return self._center_line_geometry_layer_

    @center_line_geometry_layer.setter
    def center_line_geometry_layer(self, center_line_geometry_layer_: typing.Union[nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer, None]) -> None:
        self._center_line_geometry_layer_ = center_line_geometry_layer_

    def init_packing_context(self, zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext) -> None:
        self._stamp_.init_packing_context(zserio_context.stamp)
        zserio_context.path_id.init(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        self._center_line_geometry_layer_.init_packing_context(zserio_context.center_line_geometry_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition += self._center_line_geometry_layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition += self._center_line_geometry_layer_.bitsizeof_packed(zserio_context.center_line_geometry_layer, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition = self._center_line_geometry_layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition = self._center_line_geometry_layer_.initialize_offsets_packed(zserio_context.center_line_geometry_layer, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._path_id_ = zserio_reader.read_varuint32()
        self._center_line_geometry_layer_ = nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, True, False)

    def read_packed(self, zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.stamp, zserio_reader)

        self._path_id_ = zserio_context.path_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._center_line_geometry_layer_ = nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer.from_reader_packed(zserio_context.center_line_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, True, False)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write(zserio_writer)

        zserio_writer.write_varuint32(self._path_id_)

        # check parameters
        if self._center_line_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._center_line_geometry_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.has_ids} != {True}!")
        if self._center_line_geometry_layer_.has_types != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.has_types} != {False}!")
        self._center_line_geometry_layer_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneGeometryOnPathTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write_packed(zserio_context.stamp, zserio_writer)

        zserio_context.path_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._path_id_)

        # check parameters
        if self._center_line_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._center_line_geometry_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.has_ids} != {True}!")
        if self._center_line_geometry_layer_.has_types != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field LaneGeometryOnPathTopic.centerLineGeometryLayer: "
                                                f"{self._center_line_geometry_layer_.has_types} != {False}!")
        self._center_line_geometry_layer_.write_packed(zserio_context.center_line_geometry_layer, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._stamp_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()
            self._path_id_ = zserio.array.DeltaContext()
            self._center_line_geometry_layer_ = nds.lane.instantiations.center_line_geometry_layer.CenterLineGeometryLayer.ZserioPackingContext()

        @property
        def stamp(self):
            return self._stamp_

        @property
        def path_id(self):
            return self._path_id_

        @property
        def center_line_geometry_layer(self):
            return self._center_line_geometry_layer_
