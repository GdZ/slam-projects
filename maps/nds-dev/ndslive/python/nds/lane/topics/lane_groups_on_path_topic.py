# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp
import nds.lane.boundaries.boundary_element_definitions
import nds.lane.lanegroups.lane_group
import nds.vehicle.reference.types.horizon_path_id

class LaneGroupsOnPathTopic:
    def __init__(
            self,
            stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId = nds.vehicle.reference.types.horizon_path_id.HorizonPathId(),
            boundary_definitions_: typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None] = None,
            lane_group_path_: typing.List[nds.lane.lanegroups.lane_group.LaneGroup] = None) -> None:
        self._stamp_ = stamp_
        self._path_id_ = path_id_
        self._boundary_definitions_ = boundary_definitions_
        self._lane_group_path_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_path()), lane_group_path_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroupsOnPathTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupsOnPathTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroupsOnPathTopic'],
            zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupsOnPathTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroupsOnPathTopic):
            return ((self._stamp_ == other._stamp_) and
                    (self._path_id_ == other._path_id_) and
                    (self._boundary_definitions_ == other._boundary_definitions_) and
                    (self._lane_group_path_ == other._lane_group_path_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._stamp_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._path_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundary_definitions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lane_group_path_)

        return result

    @property
    def stamp(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._stamp_

    @stamp.setter
    def stamp(self, stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._stamp_ = stamp_

    @property
    def path_id(self) -> nds.vehicle.reference.types.horizon_path_id.HorizonPathId:
        return self._path_id_

    @path_id.setter
    def path_id(self, path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId) -> None:
        self._path_id_ = path_id_

    @property
    def boundary_definitions(self) -> typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None]:
        return self._boundary_definitions_

    @boundary_definitions.setter
    def boundary_definitions(self, boundary_definitions_: typing.Union[nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions, None]) -> None:
        self._boundary_definitions_ = boundary_definitions_

    @property
    def lane_group_path(self) -> typing.List[nds.lane.lanegroups.lane_group.LaneGroup]:
        return self._lane_group_path_.raw_array

    @lane_group_path.setter
    def lane_group_path(self, lane_group_path_: typing.List[nds.lane.lanegroups.lane_group.LaneGroup]) -> None:
        self._lane_group_path_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_path()), lane_group_path_, is_auto=True)

    def init_packing_context(self, zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext) -> None:
        self._stamp_.init_packing_context(zserio_context.stamp)
        zserio_context.path_id.init(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        self._boundary_definitions_.init_packing_context(zserio_context.boundary_definitions)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition += self._boundary_definitions_.bitsizeof(end_bitposition)
        end_bitposition += self._lane_group_path_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition += self._boundary_definitions_.bitsizeof_packed(zserio_context.boundary_definitions, end_bitposition)
        end_bitposition += self._lane_group_path_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition = self._boundary_definitions_.initialize_offsets(end_bitposition)
        end_bitposition = self._lane_group_path_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition = self._boundary_definitions_.initialize_offsets_packed(zserio_context.boundary_definitions, end_bitposition)
        end_bitposition = self._lane_group_path_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._path_id_ = zserio_reader.read_varuint32()
        self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.from_reader(zserio_reader)
        self._lane_group_path_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_path()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.stamp, zserio_reader)

        self._path_id_ = zserio_context.path_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.from_reader_packed(zserio_context.boundary_definitions, zserio_reader)

        self._lane_group_path_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_group_path()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write(zserio_writer)
        zserio_writer.write_varuint32(self._path_id_)
        self._boundary_definitions_.write(zserio_writer)
        self._lane_group_path_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneGroupsOnPathTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write_packed(zserio_context.stamp, zserio_writer)

        zserio_context.path_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._path_id_)

        self._boundary_definitions_.write_packed(zserio_context.boundary_definitions, zserio_writer)

        self._lane_group_path_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._stamp_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()
            self._path_id_ = zserio.array.DeltaContext()
            self._boundary_definitions_ = nds.lane.boundaries.boundary_element_definitions.BoundaryElementDefinitions.ZserioPackingContext()

        @property
        def stamp(self):
            return self._stamp_

        @property
        def path_id(self):
            return self._path_id_

        @property
        def boundary_definitions(self):
            return self._boundary_definitions_

    class _ZserioElementFactory_lane_group_path:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group.LaneGroup:
            del zserio_index
            return nds.lane.lanegroups.lane_group.LaneGroup.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext:
            return nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanegroups.lane_group.LaneGroup.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanegroups.lane_group.LaneGroup:
            del zserio_index
            return nds.lane.lanegroups.lane_group.LaneGroup.from_reader_packed(zserio_context, zserio_reader)
