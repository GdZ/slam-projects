# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.lanes.lane_connector
import nds.lane.reference.types.lane_id

class ZeroLengthLane:
    def __init__(
            self,
            on_border_: bool,
            lane_id_: typing.Union[nds.lane.reference.types.lane_id.LaneId, None] = None,
            previous_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector] = None,
            next_lanes_: typing.Optional[typing.List[nds.lane.lanes.lane_connector.LaneConnector]] = None) -> None:
        self._on_border_ = on_border_
        self._lane_id_ = lane_id_
        self._previous_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), previous_lanes_, is_auto=True)
        if next_lanes_ is None:
            self._next_lanes_ = None
        else:
            self._next_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), next_lanes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['ZeroLengthLane'],
            zserio_reader: zserio.BitStreamReader,
            on_border_: bool) -> 'ZeroLengthLane':
        self = object.__new__(cls)
        self._on_border_ = on_border_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ZeroLengthLane'],
            zserio_context: ZeroLengthLane.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            on_border_: bool) -> 'ZeroLengthLane':
        self = object.__new__(cls)
        self._on_border_ = on_border_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ZeroLengthLane):
            return (self._on_border_ == other._on_border_ and
                    (self._lane_id_ == other._lane_id_) and
                    (self._previous_lanes_ == other._previous_lanes_) and
                    (not other.is_next_lanes_used() if not self.is_next_lanes_used() else (self._next_lanes_ == other._next_lanes_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._on_border_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lane_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._previous_lanes_)
        if self.is_next_lanes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._next_lanes_)

        return result

    @property
    def on_border(self) -> bool:
        return self._on_border_

    @property
    def lane_id(self) -> typing.Union[nds.lane.reference.types.lane_id.LaneId, None]:
        return self._lane_id_

    @lane_id.setter
    def lane_id(self, lane_id_: typing.Union[nds.lane.reference.types.lane_id.LaneId, None]) -> None:
        self._lane_id_ = lane_id_

    @property
    def previous_lanes(self) -> typing.List[nds.lane.lanes.lane_connector.LaneConnector]:
        return self._previous_lanes_.raw_array

    @previous_lanes.setter
    def previous_lanes(self, previous_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector]) -> None:
        self._previous_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), previous_lanes_, is_auto=True)

    @property
    def next_lanes(self) -> typing.Optional[typing.List[nds.lane.lanes.lane_connector.LaneConnector]]:
        return None if self._next_lanes_ is None else self._next_lanes_.raw_array

    @next_lanes.setter
    def next_lanes(self, next_lanes_: typing.Optional[typing.List[nds.lane.lanes.lane_connector.LaneConnector]]) -> None:
        if next_lanes_ is None:
            self._next_lanes_ = None
        else:
            self._next_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), next_lanes_, is_auto=True)

    def is_next_lanes_used(self) -> bool:
        return not self._on_border_

    def is_next_lanes_set(self) -> bool:
        return not self._next_lanes_ is None

    def reset_next_lanes(self) -> None:
        self._next_lanes_ = None

    def init_packing_context(self, zserio_context: ZeroLengthLane.ZserioPackingContext) -> None:
        self._lane_id_.init_packing_context(zserio_context.lane_id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._lane_id_.bitsizeof(end_bitposition)
        end_bitposition += self._previous_lanes_.bitsizeof(end_bitposition)
        if self.is_next_lanes_used():
            end_bitposition += self._next_lanes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ZeroLengthLane.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._lane_id_.bitsizeof_packed(zserio_context.lane_id, end_bitposition)
        end_bitposition += self._previous_lanes_.bitsizeof_packed(end_bitposition)
        if self.is_next_lanes_used():
            end_bitposition += self._next_lanes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._lane_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._previous_lanes_.initialize_offsets(end_bitposition)
        if self.is_next_lanes_used():
            end_bitposition = self._next_lanes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ZeroLengthLane.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._lane_id_.initialize_offsets_packed(zserio_context.lane_id, end_bitposition)
        end_bitposition = self._previous_lanes_.initialize_offsets_packed(end_bitposition)
        if self.is_next_lanes_used():
            end_bitposition = self._next_lanes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.from_reader(zserio_reader)

        self._previous_lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._previous_lanes_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.previousLanes!")

        if self.is_next_lanes_used():
            self._next_lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), zserio_reader, is_auto=True)
            # check constraint
            if not (len(self._next_lanes_) > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.nextLanes!")
        else:
            self._next_lanes_ = None

    def read_packed(self, zserio_context: ZeroLengthLane.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.from_reader_packed(zserio_context.lane_id, zserio_reader)

        self._previous_lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._previous_lanes_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.previousLanes!")

        if self.is_next_lanes_used():
            self._next_lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), zserio_reader, is_auto=True)
            # check constraint
            if not (len(self._next_lanes_) > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.nextLanes!")
        else:
            self._next_lanes_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._lane_id_.write(zserio_writer)

        # check constraint
        if not (len(self._previous_lanes_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.previousLanes!")
        self._previous_lanes_.write(zserio_writer)

        if self.is_next_lanes_used():
            # check constraint
            if not (len(self._next_lanes_) > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.nextLanes!")
            self._next_lanes_.write(zserio_writer)

    def write_packed(self, zserio_context: ZeroLengthLane.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._lane_id_.write_packed(zserio_context.lane_id, zserio_writer)

        # check constraint
        if not (len(self._previous_lanes_) > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.previousLanes!")
        self._previous_lanes_.write_packed(zserio_writer)

        if self.is_next_lanes_used():
            # check constraint
            if not (len(self._next_lanes_) > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field ZeroLengthLane.nextLanes!")
            self._next_lanes_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext()

        @property
        def lane_id(self):
            return self._lane_id_

    class _ZserioElementFactory_previous_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext:
            return nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_next_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext:
            return nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader_packed(zserio_context, zserio_reader)
