# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.boundaries.boundary_set
import nds.lane.lanes.directed_lane_id
import nds.lane.lanes.lane_center_line_geometry_id
import nds.lane.lanes.lane_connector
import nds.lane.lanes.lane_relation
import nds.lane.lanes.lane_traversability
import nds.lane.reference.types.lane_id
import nds.lane.reference.types.lane_length
import nds.lane.types.lane_layout_type

class Lane:
    def __init__(
            self,
            layout_: nds.lane.types.lane_layout_type.LaneLayoutType,
            has_boundary_geometry_: bool,
            directed_lane_id_: typing.Optional[nds.lane.lanes.directed_lane_id.DirectedLaneId] = None,
            lane_id_: typing.Optional[nds.lane.reference.types.lane_id.LaneId] = None,
            previous_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector] = None,
            next_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector] = None,
            length_: nds.lane.reference.types.lane_length.LaneLength = nds.lane.reference.types.lane_length.LaneLength(),
            center_line_geometry_ref_: nds.lane.lanes.lane_center_line_geometry_id.LaneCenterLineGeometryId = nds.lane.lanes.lane_center_line_geometry_id.LaneCenterLineGeometryId(),
            lane_relations_: typing.Optional[typing.List[nds.lane.lanes.lane_relation.LaneRelation]] = None,
            open_to_left_: typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None] = None,
            open_to_right_: typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None] = None,
            boundaries_left_: typing.List[nds.lane.boundaries.boundary_set.BoundarySet] = None,
            boundaries_right_: typing.List[nds.lane.boundaries.boundary_set.BoundarySet] = None) -> None:
        self._layout_ = layout_
        self._has_boundary_geometry_ = has_boundary_geometry_
        self._directed_lane_id_ = directed_lane_id_
        self._lane_id_ = lane_id_
        self._previous_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), previous_lanes_, is_auto=True)
        self._next_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), next_lanes_, is_auto=True)
        self._length_ = length_
        self._center_line_geometry_ref_ = center_line_geometry_ref_
        if lane_relations_ is None:
            self._lane_relations_ = None
        else:
            self._lane_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_relations()), lane_relations_, is_auto=True)
        self._open_to_left_ = open_to_left_
        self._open_to_right_ = open_to_right_
        self._boundaries_left_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_left(self)), boundaries_left_, is_auto=True)
        self._boundaries_right_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_right(self)), boundaries_right_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Lane'],
            zserio_reader: zserio.BitStreamReader,
            layout_: nds.lane.types.lane_layout_type.LaneLayoutType,
            has_boundary_geometry_: bool) -> 'Lane':
        self = object.__new__(cls)
        self._layout_ = layout_
        self._has_boundary_geometry_ = has_boundary_geometry_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Lane'],
            zserio_context: Lane.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            layout_: nds.lane.types.lane_layout_type.LaneLayoutType,
            has_boundary_geometry_: bool) -> 'Lane':
        self = object.__new__(cls)
        self._layout_ = layout_
        self._has_boundary_geometry_ = has_boundary_geometry_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Lane):
            return (self._layout_ == other._layout_ and
                    self._has_boundary_geometry_ == other._has_boundary_geometry_ and
                    (not other.is_directed_lane_id_used() if not self.is_directed_lane_id_used() else (self._directed_lane_id_ == other._directed_lane_id_)) and
                    (not other.is_lane_id_used() if not self.is_lane_id_used() else (self._lane_id_ == other._lane_id_)) and
                    (self._previous_lanes_ == other._previous_lanes_) and
                    (self._next_lanes_ == other._next_lanes_) and
                    (self._length_ == other._length_) and
                    (self._center_line_geometry_ref_ == other._center_line_geometry_ref_) and
                    (not other.is_lane_relations_used() if not self.is_lane_relations_used() else (self._lane_relations_ == other._lane_relations_)) and
                    (self._open_to_left_ == other._open_to_left_) and
                    (self._open_to_right_ == other._open_to_right_) and
                    (self._boundaries_left_ == other._boundaries_left_) and
                    (self._boundaries_right_ == other._boundaries_right_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._layout_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_boundary_geometry_)
        if self.is_directed_lane_id_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._directed_lane_id_)
        if self.is_lane_id_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._previous_lanes_)
        result = zserio.hashcode.calc_hashcode_object(result, self._next_lanes_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_relations_)
        result = zserio.hashcode.calc_hashcode_object(result, self._open_to_left_)
        result = zserio.hashcode.calc_hashcode_object(result, self._open_to_right_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundaries_left_)
        result = zserio.hashcode.calc_hashcode_object(result, self._boundaries_right_)

        return result

    @property
    def layout(self) -> nds.lane.types.lane_layout_type.LaneLayoutType:
        return self._layout_

    @property
    def has_boundary_geometry(self) -> bool:
        return self._has_boundary_geometry_

    @property
    def directed_lane_id(self) -> typing.Optional[nds.lane.lanes.directed_lane_id.DirectedLaneId]:
        return self._directed_lane_id_

    @directed_lane_id.setter
    def directed_lane_id(self, directed_lane_id_: typing.Optional[nds.lane.lanes.directed_lane_id.DirectedLaneId]) -> None:
        self._directed_lane_id_ = directed_lane_id_

    def is_directed_lane_id_used(self) -> bool:
        return self._layout_ == nds.lane.types.lane_layout_type.LaneLayoutType.ORDERED

    def is_directed_lane_id_set(self) -> bool:
        return not self._directed_lane_id_ is None

    def reset_directed_lane_id(self) -> None:
        self._directed_lane_id_ = None

    @property
    def lane_id(self) -> typing.Optional[nds.lane.reference.types.lane_id.LaneId]:
        return self._lane_id_

    @lane_id.setter
    def lane_id(self, lane_id_: typing.Optional[nds.lane.reference.types.lane_id.LaneId]) -> None:
        self._lane_id_ = lane_id_

    def is_lane_id_used(self) -> bool:
        return self._layout_ == nds.lane.types.lane_layout_type.LaneLayoutType.UNORDERED

    def is_lane_id_set(self) -> bool:
        return not self._lane_id_ is None

    def reset_lane_id(self) -> None:
        self._lane_id_ = None

    @property
    def previous_lanes(self) -> typing.List[nds.lane.lanes.lane_connector.LaneConnector]:
        return self._previous_lanes_.raw_array

    @previous_lanes.setter
    def previous_lanes(self, previous_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector]) -> None:
        self._previous_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), previous_lanes_, is_auto=True)

    @property
    def next_lanes(self) -> typing.List[nds.lane.lanes.lane_connector.LaneConnector]:
        return self._next_lanes_.raw_array

    @next_lanes.setter
    def next_lanes(self, next_lanes_: typing.List[nds.lane.lanes.lane_connector.LaneConnector]) -> None:
        self._next_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), next_lanes_, is_auto=True)

    @property
    def length(self) -> nds.lane.reference.types.lane_length.LaneLength:
        return self._length_

    @length.setter
    def length(self, length_: nds.lane.reference.types.lane_length.LaneLength) -> None:
        self._length_ = length_

    @property
    def center_line_geometry_ref(self) -> nds.lane.lanes.lane_center_line_geometry_id.LaneCenterLineGeometryId:
        return self._center_line_geometry_ref_

    @center_line_geometry_ref.setter
    def center_line_geometry_ref(self, center_line_geometry_ref_: nds.lane.lanes.lane_center_line_geometry_id.LaneCenterLineGeometryId) -> None:
        self._center_line_geometry_ref_ = center_line_geometry_ref_

    @property
    def lane_relations(self) -> typing.Optional[typing.List[nds.lane.lanes.lane_relation.LaneRelation]]:
        return None if self._lane_relations_ is None else self._lane_relations_.raw_array

    @lane_relations.setter
    def lane_relations(self, lane_relations_: typing.Optional[typing.List[nds.lane.lanes.lane_relation.LaneRelation]]) -> None:
        if lane_relations_ is None:
            self._lane_relations_ = None
        else:
            self._lane_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_relations()), lane_relations_, is_auto=True)

    def is_lane_relations_used(self) -> bool:
        return self._layout_ == nds.lane.types.lane_layout_type.LaneLayoutType.UNORDERED

    def is_lane_relations_set(self) -> bool:
        return not self._lane_relations_ is None

    def reset_lane_relations(self) -> None:
        self._lane_relations_ = None

    @property
    def open_to_left(self) -> typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None]:
        return self._open_to_left_

    @open_to_left.setter
    def open_to_left(self, open_to_left_: typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None]) -> None:
        self._open_to_left_ = open_to_left_

    @property
    def open_to_right(self) -> typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None]:
        return self._open_to_right_

    @open_to_right.setter
    def open_to_right(self, open_to_right_: typing.Union[nds.lane.lanes.lane_traversability.LaneTraversability, None]) -> None:
        self._open_to_right_ = open_to_right_

    @property
    def boundaries_left(self) -> typing.List[nds.lane.boundaries.boundary_set.BoundarySet]:
        return self._boundaries_left_.raw_array

    @boundaries_left.setter
    def boundaries_left(self, boundaries_left_: typing.List[nds.lane.boundaries.boundary_set.BoundarySet]) -> None:
        self._boundaries_left_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_left(self)), boundaries_left_, is_auto=True)

    @property
    def boundaries_right(self) -> typing.List[nds.lane.boundaries.boundary_set.BoundarySet]:
        return self._boundaries_right_.raw_array

    @boundaries_right.setter
    def boundaries_right(self, boundaries_right_: typing.List[nds.lane.boundaries.boundary_set.BoundarySet]) -> None:
        self._boundaries_right_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_right(self)), boundaries_right_, is_auto=True)

    def init_packing_context(self, zserio_context: Lane.ZserioPackingContext) -> None:
        if self.is_directed_lane_id_used():
            self._directed_lane_id_.init_packing_context(zserio_context.directed_lane_id)
        if self.is_lane_id_used():
            self._lane_id_.init_packing_context(zserio_context.lane_id)
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)
        zserio_context.center_line_geometry_ref.init(zserio.array.VarUInt32ArrayTraits(), self._center_line_geometry_ref_)
        self._open_to_left_.init_packing_context(zserio_context.open_to_left)
        self._open_to_right_.init_packing_context(zserio_context.open_to_right)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_directed_lane_id_used():
            end_bitposition += self._directed_lane_id_.bitsizeof(end_bitposition)
        if self.is_lane_id_used():
            end_bitposition += self._lane_id_.bitsizeof(end_bitposition)
        end_bitposition += self._previous_lanes_.bitsizeof(end_bitposition)
        end_bitposition += self._next_lanes_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            end_bitposition += self._lane_relations_.bitsizeof(end_bitposition)
        end_bitposition += self._open_to_left_.bitsizeof(end_bitposition)
        end_bitposition += self._open_to_right_.bitsizeof(end_bitposition)
        end_bitposition += self._boundaries_left_.bitsizeof(end_bitposition)
        end_bitposition += self._boundaries_right_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Lane.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_directed_lane_id_used():
            end_bitposition += self._directed_lane_id_.bitsizeof_packed(zserio_context.directed_lane_id, end_bitposition)
        if self.is_lane_id_used():
            end_bitposition += self._lane_id_.bitsizeof_packed(zserio_context.lane_id, end_bitposition)
        end_bitposition += self._previous_lanes_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._next_lanes_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.center_line_geometry_ref.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            end_bitposition += self._lane_relations_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._open_to_left_.bitsizeof_packed(zserio_context.open_to_left, end_bitposition)
        end_bitposition += self._open_to_right_.bitsizeof_packed(zserio_context.open_to_right, end_bitposition)
        end_bitposition += self._boundaries_left_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._boundaries_right_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_directed_lane_id_used():
            end_bitposition = self._directed_lane_id_.initialize_offsets(end_bitposition)
        if self.is_lane_id_used():
            end_bitposition = self._lane_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._previous_lanes_.initialize_offsets(end_bitposition)
        end_bitposition = self._next_lanes_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            end_bitposition = self._lane_relations_.initialize_offsets(end_bitposition)
        end_bitposition = self._open_to_left_.initialize_offsets(end_bitposition)
        end_bitposition = self._open_to_right_.initialize_offsets(end_bitposition)
        end_bitposition = self._boundaries_left_.initialize_offsets(end_bitposition)
        end_bitposition = self._boundaries_right_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Lane.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        if self.is_directed_lane_id_used():
            end_bitposition = self._directed_lane_id_.initialize_offsets_packed(zserio_context.directed_lane_id, end_bitposition)
        if self.is_lane_id_used():
            end_bitposition = self._lane_id_.initialize_offsets_packed(zserio_context.lane_id, end_bitposition)
        end_bitposition = self._previous_lanes_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._next_lanes_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.center_line_geometry_ref.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            end_bitposition = self._lane_relations_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._open_to_left_.initialize_offsets_packed(zserio_context.open_to_left, end_bitposition)
        end_bitposition = self._open_to_right_.initialize_offsets_packed(zserio_context.open_to_right, end_bitposition)
        end_bitposition = self._boundaries_left_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._boundaries_right_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_directed_lane_id_used():
            self._directed_lane_id_ = nds.lane.lanes.directed_lane_id.DirectedLaneId.from_reader(zserio_reader)
        else:
            self._directed_lane_id_ = None
        if self.is_lane_id_used():
            self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.from_reader(zserio_reader)
        else:
            self._lane_id_ = None
        self._previous_lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), zserio_reader, is_auto=True)
        self._next_lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), zserio_reader, is_auto=True)
        self._length_ = zserio_reader.read_varuint32()
        self._center_line_geometry_ref_ = zserio_reader.read_varuint32()
        if self.is_lane_relations_used():
            self._lane_relations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_relations()), zserio_reader, is_auto=True)
        else:
            self._lane_relations_ = None
        self._open_to_left_ = nds.lane.lanes.lane_traversability.LaneTraversability.from_reader(zserio_reader)
        self._open_to_right_ = nds.lane.lanes.lane_traversability.LaneTraversability.from_reader(zserio_reader)
        self._boundaries_left_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_left(self)), zserio_reader, is_auto=True)
        self._boundaries_right_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_right(self)), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: Lane.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_directed_lane_id_used():
            self._directed_lane_id_ = nds.lane.lanes.directed_lane_id.DirectedLaneId.from_reader_packed(zserio_context.directed_lane_id, zserio_reader)
        else:
            self._directed_lane_id_ = None

        if self.is_lane_id_used():
            self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.from_reader_packed(zserio_context.lane_id, zserio_reader)
        else:
            self._lane_id_ = None

        self._previous_lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_previous_lanes()), zserio_reader, is_auto=True)

        self._next_lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_next_lanes()), zserio_reader, is_auto=True)

        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._center_line_geometry_ref_ = zserio_context.center_line_geometry_ref.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if self.is_lane_relations_used():
            self._lane_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_relations()), zserio_reader, is_auto=True)
        else:
            self._lane_relations_ = None

        self._open_to_left_ = nds.lane.lanes.lane_traversability.LaneTraversability.from_reader_packed(zserio_context.open_to_left, zserio_reader)

        self._open_to_right_ = nds.lane.lanes.lane_traversability.LaneTraversability.from_reader_packed(zserio_context.open_to_right, zserio_reader)

        self._boundaries_left_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_left(self)), zserio_reader, is_auto=True)

        self._boundaries_right_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_boundaries_right(self)), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_directed_lane_id_used():
            self._directed_lane_id_.write(zserio_writer)
        if self.is_lane_id_used():
            self._lane_id_.write(zserio_writer)
        self._previous_lanes_.write(zserio_writer)
        self._next_lanes_.write(zserio_writer)
        zserio_writer.write_varuint32(self._length_)
        zserio_writer.write_varuint32(self._center_line_geometry_ref_)
        if self.is_lane_relations_used():
            self._lane_relations_.write(zserio_writer)
        self._open_to_left_.write(zserio_writer)
        self._open_to_right_.write(zserio_writer)
        self._boundaries_left_.write(zserio_writer)
        self._boundaries_right_.write(zserio_writer)

    def write_packed(self, zserio_context: Lane.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_directed_lane_id_used():
            self._directed_lane_id_.write_packed(zserio_context.directed_lane_id, zserio_writer)

        if self.is_lane_id_used():
            self._lane_id_.write_packed(zserio_context.lane_id, zserio_writer)

        self._previous_lanes_.write_packed(zserio_writer)

        self._next_lanes_.write_packed(zserio_writer)

        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        zserio_context.center_line_geometry_ref.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._center_line_geometry_ref_)

        if self.is_lane_relations_used():
            self._lane_relations_.write_packed(zserio_writer)

        self._open_to_left_.write_packed(zserio_context.open_to_left, zserio_writer)

        self._open_to_right_.write_packed(zserio_context.open_to_right, zserio_writer)

        self._boundaries_left_.write_packed(zserio_writer)

        self._boundaries_right_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._directed_lane_id_ = nds.lane.lanes.directed_lane_id.DirectedLaneId.ZserioPackingContext()
            self._lane_id_ = nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext()
            self._length_ = zserio.array.DeltaContext()
            self._center_line_geometry_ref_ = zserio.array.DeltaContext()
            self._open_to_left_ = nds.lane.lanes.lane_traversability.LaneTraversability.ZserioPackingContext()
            self._open_to_right_ = nds.lane.lanes.lane_traversability.LaneTraversability.ZserioPackingContext()

        @property
        def directed_lane_id(self):
            return self._directed_lane_id_

        @property
        def lane_id(self):
            return self._lane_id_

        @property
        def length(self):
            return self._length_

        @property
        def center_line_geometry_ref(self):
            return self._center_line_geometry_ref_

        @property
        def open_to_left(self):
            return self._open_to_left_

        @property
        def open_to_right(self):
            return self._open_to_right_

    class _ZserioElementFactory_previous_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext:
            return nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_next_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext:
            return nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.lane_connector.LaneConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_connector.LaneConnector:
            del zserio_index
            return nds.lane.lanes.lane_connector.LaneConnector.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_lane_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_relation.LaneRelation:
            del zserio_index
            return nds.lane.lanes.lane_relation.LaneRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.lanes.lane_relation.LaneRelation.ZserioPackingContext:
            return nds.lane.lanes.lane_relation.LaneRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.lanes.lane_relation.LaneRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.lanes.lane_relation.LaneRelation:
            del zserio_index
            return nds.lane.lanes.lane_relation.LaneRelation.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_boundaries_left:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_set.BoundarySet:
            del zserio_index
            return nds.lane.boundaries.boundary_set.BoundarySet.from_reader(zserio_reader, self._owner._has_boundary_geometry_)

        @staticmethod
        def create_packing_context() -> nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext:
            return nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_set.BoundarySet:
            del zserio_index
            return nds.lane.boundaries.boundary_set.BoundarySet.from_reader_packed(zserio_context, zserio_reader, self._owner._has_boundary_geometry_)

    class _ZserioElementFactory_boundaries_right:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_set.BoundarySet:
            del zserio_index
            return nds.lane.boundaries.boundary_set.BoundarySet.from_reader(zserio_reader, self._owner._has_boundary_geometry_)

        @staticmethod
        def create_packing_context() -> nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext:
            return nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.lane.boundaries.boundary_set.BoundarySet.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.boundaries.boundary_set.BoundarySet:
            del zserio_index
            return nds.lane.boundaries.boundary_set.BoundarySet.from_reader_packed(zserio_context, zserio_reader, self._owner._has_boundary_geometry_)
