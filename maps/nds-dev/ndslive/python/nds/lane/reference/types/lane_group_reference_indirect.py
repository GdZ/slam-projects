# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.location_geometry
import nds.lane.reference.types.lane_group_location_segment

class LaneGroupReferenceIndirect:
    def __init__(
            self,
            reference_geometry_: typing.Union[nds.core.location.location_geometry.LocationGeometry, None] = None,
            reference_segments_: typing.List[nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment] = None) -> None:
        self._reference_geometry_ = reference_geometry_
        self._reference_segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_reference_segments(self)), reference_segments_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroupReferenceIndirect'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupReferenceIndirect':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroupReferenceIndirect'],
            zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupReferenceIndirect':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroupReferenceIndirect):
            return ((self._reference_geometry_ == other._reference_geometry_) and
                    (self._reference_segments_ == other._reference_segments_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._reference_geometry_)
        result = zserio.hashcode.calc_hashcode_object(result, self._reference_segments_)

        return result

    @property
    def reference_geometry(self) -> typing.Union[nds.core.location.location_geometry.LocationGeometry, None]:
        return self._reference_geometry_

    @reference_geometry.setter
    def reference_geometry(self, reference_geometry_: typing.Union[nds.core.location.location_geometry.LocationGeometry, None]) -> None:
        self._reference_geometry_ = reference_geometry_

    @property
    def reference_segments(self) -> typing.List[nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment]:
        return self._reference_segments_.raw_array

    @reference_segments.setter
    def reference_segments(self, reference_segments_: typing.List[nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment]) -> None:
        self._reference_segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_reference_segments(self)), reference_segments_, is_auto=True)

    def init_packing_context(self, zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext) -> None:
        self._reference_geometry_.init_packing_context(zserio_context.reference_geometry)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reference_geometry_.bitsizeof(end_bitposition)
        end_bitposition += self._reference_segments_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reference_geometry_.bitsizeof_packed(zserio_context.reference_geometry, end_bitposition)
        end_bitposition += self._reference_segments_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reference_geometry_.initialize_offsets(end_bitposition)
        end_bitposition = self._reference_segments_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reference_geometry_.initialize_offsets_packed(zserio_context.reference_geometry, end_bitposition)
        end_bitposition = self._reference_segments_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._reference_geometry_ = nds.core.location.location_geometry.LocationGeometry.from_reader(zserio_reader)
        self._reference_segments_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_reference_segments(self)), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._reference_geometry_ = nds.core.location.location_geometry.LocationGeometry.from_reader_packed(zserio_context.reference_geometry, zserio_reader)

        self._reference_segments_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_reference_segments(self)), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._reference_geometry_.write(zserio_writer)
        self._reference_segments_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneGroupReferenceIndirect.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._reference_geometry_.write_packed(zserio_context.reference_geometry, zserio_writer)

        self._reference_segments_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._reference_geometry_ = nds.core.location.location_geometry.LocationGeometry.ZserioPackingContext()

        @property
        def reference_geometry(self):
            return self._reference_geometry_

    class _ZserioElementFactory_reference_segments:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment:
            del zserio_index
            return nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment.from_reader(zserio_reader, self._owner._reference_geometry_)

        @staticmethod
        def create_packing_context() -> nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment.ZserioPackingContext:
            return nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment:
            del zserio_index
            return nds.lane.reference.types.lane_group_location_segment.LaneGroupLocationSegment.from_reader_packed(zserio_context, zserio_reader, self._owner._reference_geometry_)
