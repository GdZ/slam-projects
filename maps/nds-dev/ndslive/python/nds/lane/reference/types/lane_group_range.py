# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.reference.types.lane_range
import nds.lane.reference.types.lane_validity_type
import nds.lane.reference.types.lanes_in_group

class LaneGroupRange:
    def __init__(
            self,
            range_: typing.Union[nds.lane.reference.types.lane_range.LaneRange, None] = None,
            reference_lane_idx_: typing.Optional[nds.lane.reference.types.lanes_in_group.LanesInGroup] = None) -> None:
        self._range_ = range_
        self._reference_lane_idx_ = reference_lane_idx_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroupRange'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupRange':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroupRange'],
            zserio_context: LaneGroupRange.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneGroupRange':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroupRange):
            return ((self._range_ == other._range_) and
                    (not other.is_reference_lane_idx_used() if not self.is_reference_lane_idx_used() else (self._reference_lane_idx_ == other._reference_lane_idx_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._range_)
        if self.is_reference_lane_idx_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._reference_lane_idx_)

        return result

    @property
    def range(self) -> typing.Union[nds.lane.reference.types.lane_range.LaneRange, None]:
        return self._range_

    @range.setter
    def range(self, range_: typing.Union[nds.lane.reference.types.lane_range.LaneRange, None]) -> None:
        self._range_ = range_

    @property
    def reference_lane_idx(self) -> typing.Optional[nds.lane.reference.types.lanes_in_group.LanesInGroup]:
        return self._reference_lane_idx_

    @reference_lane_idx.setter
    def reference_lane_idx(self, reference_lane_idx_: typing.Optional[nds.lane.reference.types.lanes_in_group.LanesInGroup]) -> None:
        self._reference_lane_idx_ = reference_lane_idx_

    def is_reference_lane_idx_used(self) -> bool:
        return self._range_.type != nds.lane.reference.types.lane_validity_type.LaneValidityType.COMPLETE

    def is_reference_lane_idx_set(self) -> bool:
        return not self._reference_lane_idx_ is None

    def reset_reference_lane_idx(self) -> None:
        self._reference_lane_idx_ = None

    def init_packing_context(self, zserio_context: LaneGroupRange.ZserioPackingContext) -> None:
        self._range_.init_packing_context(zserio_context.range)
        if self.is_reference_lane_idx_used():
            zserio_context.reference_lane_idx.init(zserio.array.VarUInt16ArrayTraits(), self._reference_lane_idx_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof(end_bitposition)
        if self.is_reference_lane_idx_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._reference_lane_idx_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroupRange.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof_packed(zserio_context.range, end_bitposition)
        if self.is_reference_lane_idx_used():
            end_bitposition += zserio_context.reference_lane_idx.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._reference_lane_idx_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets(end_bitposition)
        if self.is_reference_lane_idx_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._reference_lane_idx_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroupRange.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets_packed(zserio_context.range, end_bitposition)
        if self.is_reference_lane_idx_used():
            end_bitposition += zserio_context.reference_lane_idx.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._reference_lane_idx_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.lane.reference.types.lane_range.LaneRange.from_reader(zserio_reader)
        if self.is_reference_lane_idx_used():
            self._reference_lane_idx_ = zserio_reader.read_varuint16()
        else:
            self._reference_lane_idx_ = None

    def read_packed(self, zserio_context: LaneGroupRange.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.lane.reference.types.lane_range.LaneRange.from_reader_packed(zserio_context.range, zserio_reader)

        if self.is_reference_lane_idx_used():
            self._reference_lane_idx_ = zserio_context.reference_lane_idx.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._reference_lane_idx_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._range_.write(zserio_writer)
        if self.is_reference_lane_idx_used():
            zserio_writer.write_varuint16(self._reference_lane_idx_)

    def write_packed(self, zserio_context: LaneGroupRange.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._range_.write_packed(zserio_context.range, zserio_writer)

        if self.is_reference_lane_idx_used():
            zserio_context.reference_lane_idx.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._reference_lane_idx_)

    class ZserioPackingContext:
        def __init__(self):
            self._range_ = nds.lane.reference.types.lane_range.LaneRange.ZserioPackingContext()
            self._reference_lane_idx_ = zserio.array.DeltaContext()

        @property
        def range(self):
            return self._range_

        @property
        def reference_lane_idx(self):
            return self._reference_lane_idx_
