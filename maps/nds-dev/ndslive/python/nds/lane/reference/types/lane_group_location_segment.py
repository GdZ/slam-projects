# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.location_geometry
import nds.core.location.location_segment
import nds.core.types.lane_type
import nds.lane.reference.types.lanes_in_mask

class LaneGroupLocationSegment:
    def __init__(
            self,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry,
            location_segment_: typing.Union[nds.core.location.location_segment.LocationSegment, None] = None,
            num_lanes_: nds.lane.reference.types.lanes_in_mask.LanesInMask = nds.lane.reference.types.lanes_in_mask.LanesInMask(),
            lane_types_: typing.Optional[typing.List[nds.core.types.lane_type.LaneType]] = None) -> None:
        self._path_geometry_ = path_geometry_
        self._location_segment_ = location_segment_
        self._num_lanes_ = num_lanes_
        if lane_types_ is None:
            self._lane_types_ = None
        else:
            self._lane_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_types()), lane_types_)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneGroupLocationSegment'],
            zserio_reader: zserio.BitStreamReader,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry) -> 'LaneGroupLocationSegment':
        self = object.__new__(cls)
        self._path_geometry_ = path_geometry_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneGroupLocationSegment'],
            zserio_context: LaneGroupLocationSegment.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry) -> 'LaneGroupLocationSegment':
        self = object.__new__(cls)
        self._path_geometry_ = path_geometry_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneGroupLocationSegment):
            return (self._path_geometry_ == other._path_geometry_ and
                    (self._location_segment_ == other._location_segment_) and
                    (self._num_lanes_ == other._num_lanes_) and
                    (not other.is_lane_types_used() if not self.is_lane_types_used() else (self._lane_types_ == other._lane_types_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._path_geometry_)
        result = zserio.hashcode.calc_hashcode_object(result, self._location_segment_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_lanes_)
        if self.is_lane_types_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_types_)

        return result

    @property
    def path_geometry(self) -> nds.core.location.location_geometry.LocationGeometry:
        return self._path_geometry_

    @property
    def location_segment(self) -> typing.Union[nds.core.location.location_segment.LocationSegment, None]:
        return self._location_segment_

    @location_segment.setter
    def location_segment(self, location_segment_: typing.Union[nds.core.location.location_segment.LocationSegment, None]) -> None:
        self._location_segment_ = location_segment_

    @property
    def num_lanes(self) -> nds.lane.reference.types.lanes_in_mask.LanesInMask:
        return self._num_lanes_

    @num_lanes.setter
    def num_lanes(self, num_lanes_: nds.lane.reference.types.lanes_in_mask.LanesInMask) -> None:
        self._num_lanes_ = num_lanes_

    @property
    def lane_types(self) -> typing.Optional[typing.List[nds.core.types.lane_type.LaneType]]:
        return None if self._lane_types_ is None else self._lane_types_.raw_array

    @lane_types.setter
    def lane_types(self, lane_types_: typing.Optional[typing.List[nds.core.types.lane_type.LaneType]]) -> None:
        if lane_types_ is None:
            self._lane_types_ = None
        else:
            self._lane_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_types()), lane_types_)

    def is_lane_types_used(self) -> bool:
        return self.is_lane_types_set()

    def is_lane_types_set(self) -> bool:
        return not self._lane_types_ is None

    def reset_lane_types(self) -> None:
        self._lane_types_ = None

    def init_packing_context(self, zserio_context: LaneGroupLocationSegment.ZserioPackingContext) -> None:
        self._location_segment_.init_packing_context(zserio_context.location_segment)
        zserio_context.num_lanes.init(zserio.array.VarUInt16ArrayTraits(), self._num_lanes_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._location_segment_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_lanes_)
        end_bitposition += 1
        if self.is_lane_types_used():
            end_bitposition += self._lane_types_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneGroupLocationSegment.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._location_segment_.bitsizeof_packed(zserio_context.location_segment, end_bitposition)
        end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_lanes_)
        end_bitposition += 1
        if self.is_lane_types_used():
            end_bitposition += self._lane_types_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._location_segment_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_lanes_)
        end_bitposition += 1
        if self.is_lane_types_used():
            end_bitposition = self._lane_types_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneGroupLocationSegment.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._location_segment_.initialize_offsets_packed(zserio_context.location_segment, end_bitposition)
        end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_lanes_)
        end_bitposition += 1
        if self.is_lane_types_used():
            end_bitposition = self._lane_types_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._location_segment_ = nds.core.location.location_segment.LocationSegment.from_reader(zserio_reader, self._path_geometry_)
        self._num_lanes_ = zserio_reader.read_varuint16()
        if zserio_reader.read_bool():
            self._lane_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_types()), zserio_reader, self._num_lanes_)
        else:
            self._lane_types_ = None

    def read_packed(self, zserio_context: LaneGroupLocationSegment.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._location_segment_ = nds.core.location.location_segment.LocationSegment.from_reader_packed(zserio_context.location_segment, zserio_reader, self._path_geometry_)

        self._num_lanes_ = zserio_context.num_lanes.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._lane_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lane_types()), zserio_reader, self._num_lanes_)
        else:
            self._lane_types_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._location_segment_.path_geometry is not (self._path_geometry_):
            raise zserio.PythonRuntimeException("Wrong parameter pathGeometry for field LaneGroupLocationSegment.locationSegment: "
                                                f"{self._location_segment_.path_geometry} != {self._path_geometry_}!")
        self._location_segment_.write(zserio_writer)

        zserio_writer.write_varuint16(self._num_lanes_)

        if self.is_lane_types_used():
            zserio_writer.write_bool(True)
            # check array length
            if len(self._lane_types_) != (self._num_lanes_):
                raise zserio.PythonRuntimeException("Wrong array length for field LaneGroupLocationSegment.laneTypes: "
                                                    f"{len(self._lane_types_)} != {self._num_lanes_}!")
            self._lane_types_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: LaneGroupLocationSegment.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._location_segment_.path_geometry is not (self._path_geometry_):
            raise zserio.PythonRuntimeException("Wrong parameter pathGeometry for field LaneGroupLocationSegment.locationSegment: "
                                                f"{self._location_segment_.path_geometry} != {self._path_geometry_}!")
        self._location_segment_.write_packed(zserio_context.location_segment, zserio_writer)

        zserio_context.num_lanes.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_lanes_)

        if self.is_lane_types_used():
            zserio_writer.write_bool(True)
            # check array length
            if len(self._lane_types_) != (self._num_lanes_):
                raise zserio.PythonRuntimeException("Wrong array length for field LaneGroupLocationSegment.laneTypes: "
                                                    f"{len(self._lane_types_)} != {self._num_lanes_}!")
            self._lane_types_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._location_segment_ = nds.core.location.location_segment.LocationSegment.ZserioPackingContext()
            self._num_lanes_ = zserio.array.DeltaContext()

        @property
        def location_segment(self):
            return self._location_segment_

        @property
        def num_lanes(self):
            return self._num_lanes_

    class _ZserioElementFactory_lane_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.lane_type.LaneType:
            del zserio_index
            return nds.core.types.lane_type.LaneType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.lane_type.LaneType.ZserioPackingContext:
            return nds.core.types.lane_type.LaneType.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.lane_type.LaneType.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.lane_type.LaneType:
            del zserio_index
            return nds.core.types.lane_type.LaneType.from_reader_packed(zserio_context, zserio_reader)
