# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.properties.property_type
import nds.rules.types.roadworks_type
import nds.rules.types.supplementary_warning_sign_text
import nds.rules.types.traffic_light_cycle
import nds.rules.types.traffic_light_face_list
import nds.rules.types.traffic_light_layout
import nds.rules.types.traffic_light_target_group
import nds.rules.types.traffic_light_usage_type
import nds.signs.warning.supplementary_warning_sign
import nds.signs.warning.variable_warning_sign_properties

class PropertyValue:
    def __init__(
            self,
            type_: nds.rules.properties.property_type.PropertyType,
            *,
            supplementary_warning_sign_: typing.Union[nds.signs.warning.supplementary_warning_sign.SupplementaryWarningSign, None] = None,
            variable_warning_sign_properties_: typing.Union[nds.signs.warning.variable_warning_sign_properties.VariableWarningSignProperties, None] = None,
            roadworks_type_: typing.Union[nds.rules.types.roadworks_type.RoadworksType, None] = None,
            traffic_light_layout_: typing.Union[nds.rules.types.traffic_light_layout.TrafficLightLayout, None] = None,
            traffic_light_faces_: typing.Union[nds.rules.types.traffic_light_face_list.TrafficLightFaceList, None] = None,
            traffic_light_usage_type_: typing.Union[nds.rules.types.traffic_light_usage_type.TrafficLightUsageType, None] = None,
            traffic_light_target_group_: typing.Union[nds.rules.types.traffic_light_target_group.TrafficLightTargetGroup, None] = None,
            traffic_light_cycle_: typing.Union[nds.rules.types.traffic_light_cycle.TrafficLightCycle, None] = None,
            supplementary_warning_sign_text_: typing.Union[nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if supplementary_warning_sign_ is not None:
            self._choice = supplementary_warning_sign_
        if variable_warning_sign_properties_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = variable_warning_sign_properties_
        if roadworks_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = roadworks_type_
        if traffic_light_layout_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = traffic_light_layout_
        if traffic_light_faces_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = traffic_light_faces_
        if traffic_light_usage_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = traffic_light_usage_type_
        if traffic_light_target_group_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = traffic_light_target_group_
        if traffic_light_cycle_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = traffic_light_cycle_
        if supplementary_warning_sign_text_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = supplementary_warning_sign_text_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.rules.properties.property_type.PropertyType:
        return self._type_

    @property
    def supplementary_warning_sign(self) -> typing.Union[nds.signs.warning.supplementary_warning_sign.SupplementaryWarningSign, None]:
        return self._choice

    @supplementary_warning_sign.setter
    def supplementary_warning_sign(self, supplementary_warning_sign_: typing.Union[nds.signs.warning.supplementary_warning_sign.SupplementaryWarningSign, None]) -> None:
        self._choice = supplementary_warning_sign_

    @property
    def variable_warning_sign_properties(self) -> typing.Union[nds.signs.warning.variable_warning_sign_properties.VariableWarningSignProperties, None]:
        return self._choice

    @variable_warning_sign_properties.setter
    def variable_warning_sign_properties(self, variable_warning_sign_properties_: typing.Union[nds.signs.warning.variable_warning_sign_properties.VariableWarningSignProperties, None]) -> None:
        self._choice = variable_warning_sign_properties_

    @property
    def roadworks_type(self) -> typing.Union[nds.rules.types.roadworks_type.RoadworksType, None]:
        return self._choice

    @roadworks_type.setter
    def roadworks_type(self, roadworks_type_: typing.Union[nds.rules.types.roadworks_type.RoadworksType, None]) -> None:
        self._choice = roadworks_type_

    @property
    def traffic_light_layout(self) -> typing.Union[nds.rules.types.traffic_light_layout.TrafficLightLayout, None]:
        return self._choice

    @traffic_light_layout.setter
    def traffic_light_layout(self, traffic_light_layout_: typing.Union[nds.rules.types.traffic_light_layout.TrafficLightLayout, None]) -> None:
        self._choice = traffic_light_layout_

    @property
    def traffic_light_faces(self) -> typing.Union[nds.rules.types.traffic_light_face_list.TrafficLightFaceList, None]:
        return self._choice

    @traffic_light_faces.setter
    def traffic_light_faces(self, traffic_light_faces_: typing.Union[nds.rules.types.traffic_light_face_list.TrafficLightFaceList, None]) -> None:
        self._choice = traffic_light_faces_

    @property
    def traffic_light_usage_type(self) -> typing.Union[nds.rules.types.traffic_light_usage_type.TrafficLightUsageType, None]:
        return self._choice

    @traffic_light_usage_type.setter
    def traffic_light_usage_type(self, traffic_light_usage_type_: typing.Union[nds.rules.types.traffic_light_usage_type.TrafficLightUsageType, None]) -> None:
        self._choice = traffic_light_usage_type_

    @property
    def traffic_light_target_group(self) -> typing.Union[nds.rules.types.traffic_light_target_group.TrafficLightTargetGroup, None]:
        return self._choice

    @traffic_light_target_group.setter
    def traffic_light_target_group(self, traffic_light_target_group_: typing.Union[nds.rules.types.traffic_light_target_group.TrafficLightTargetGroup, None]) -> None:
        self._choice = traffic_light_target_group_

    @property
    def traffic_light_cycle(self) -> typing.Union[nds.rules.types.traffic_light_cycle.TrafficLightCycle, None]:
        return self._choice

    @traffic_light_cycle.setter
    def traffic_light_cycle(self, traffic_light_cycle_: typing.Union[nds.rules.types.traffic_light_cycle.TrafficLightCycle, None]) -> None:
        self._choice = traffic_light_cycle_

    @property
    def supplementary_warning_sign_text(self) -> typing.Union[nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText, None]:
        return self._choice

    @supplementary_warning_sign_text.setter
    def supplementary_warning_sign_text(self, supplementary_warning_sign_text_: typing.Union[nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText, None]) -> None:
        self._choice = supplementary_warning_sign_text_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            return self.CHOICE_SUPPLEMENTARY_WARNING_SIGN
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            return self.CHOICE_VARIABLE_WARNING_SIGN_PROPERTIES
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            return self.CHOICE_ROADWORKS_TYPE
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            return self.CHOICE_TRAFFIC_LIGHT_LAYOUT
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            return self.CHOICE_TRAFFIC_LIGHT_FACES
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            return self.CHOICE_TRAFFIC_LIGHT_USAGE_TYPE
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            return self.CHOICE_TRAFFIC_LIGHT_TARGET_GROUP
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            return self.CHOICE_TRAFFIC_LIGHT_CYCLE
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            return self.CHOICE_SUPPLEMENTARY_WARNING_SIGN_TEXT
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            self._choice.init_packing_context(zserio_context.supplementary_warning_sign)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            self._choice.init_packing_context(zserio_context.variable_warning_sign_properties)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            self._choice.init_packing_context(zserio_context.roadworks_type)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            self._choice.init_packing_context(zserio_context.traffic_light_layout)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            self._choice.init_packing_context(zserio_context.traffic_light_faces)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            self._choice.init_packing_context(zserio_context.traffic_light_usage_type)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            self._choice.init_packing_context(zserio_context.traffic_light_target_group)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            self._choice.init_packing_context(zserio_context.traffic_light_cycle)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            self._choice.init_packing_context(zserio_context.supplementary_warning_sign_text)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.supplementary_warning_sign, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.variable_warning_sign_properties, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.roadworks_type, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_light_layout, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_light_faces, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_light_usage_type, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_light_target_group, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_light_cycle, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.supplementary_warning_sign_text, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.supplementary_warning_sign, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.variable_warning_sign_properties, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.roadworks_type, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_light_layout, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_light_faces, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_light_usage_type, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_light_target_group, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_light_cycle, end_bitposition)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.supplementary_warning_sign_text, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            self._choice = nds.signs.warning.supplementary_warning_sign.SupplementaryWarningSign.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            self._choice = nds.signs.warning.variable_warning_sign_properties.VariableWarningSignProperties.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            self._choice = nds.rules.types.roadworks_type.RoadworksType.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            self._choice = nds.rules.types.traffic_light_layout.TrafficLightLayout.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            self._choice = nds.rules.types.traffic_light_face_list.TrafficLightFaceList.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            self._choice = nds.rules.types.traffic_light_usage_type.TrafficLightUsageType.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            self._choice = nds.rules.types.traffic_light_target_group.TrafficLightTargetGroup.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            self._choice = nds.rules.types.traffic_light_cycle.TrafficLightCycle.from_reader(zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            self._choice = nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            self._choice = nds.signs.warning.supplementary_warning_sign.SupplementaryWarningSign.from_reader_packed(zserio_context.supplementary_warning_sign, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            self._choice = nds.signs.warning.variable_warning_sign_properties.VariableWarningSignProperties.from_reader_packed(zserio_context.variable_warning_sign_properties, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            self._choice = nds.rules.types.roadworks_type.RoadworksType.from_reader_packed(zserio_context.roadworks_type, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            self._choice = nds.rules.types.traffic_light_layout.TrafficLightLayout.from_reader_packed(zserio_context.traffic_light_layout, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            self._choice = nds.rules.types.traffic_light_face_list.TrafficLightFaceList.from_reader_packed(zserio_context.traffic_light_faces, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            self._choice = nds.rules.types.traffic_light_usage_type.TrafficLightUsageType.from_reader_packed(zserio_context.traffic_light_usage_type, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            self._choice = nds.rules.types.traffic_light_target_group.TrafficLightTargetGroup.from_reader_packed(zserio_context.traffic_light_target_group, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            self._choice = nds.rules.types.traffic_light_cycle.TrafficLightCycle.from_reader_packed(zserio_context.traffic_light_cycle, zserio_reader)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            self._choice = nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText.from_reader_packed(zserio_context.supplementary_warning_sign_text, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN):
            self._choice.write_packed(zserio_context.supplementary_warning_sign, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.VARIABLE_WARNING_SIGN_PROPERTIES):
            self._choice.write_packed(zserio_context.variable_warning_sign_properties, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.ROADWORKS_TYPE):
            self._choice.write_packed(zserio_context.roadworks_type, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_LAYOUT):
            self._choice.write_packed(zserio_context.traffic_light_layout, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_FACES):
            self._choice.write_packed(zserio_context.traffic_light_faces, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_USAGE_TYPE):
            self._choice.write_packed(zserio_context.traffic_light_usage_type, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_TARGET_GROUP):
            self._choice.write_packed(zserio_context.traffic_light_target_group, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.TRAFFIC_LIGHTS_CYCLE):
            self._choice.write_packed(zserio_context.traffic_light_cycle, zserio_writer)
        elif selector == (nds.rules.properties.property_type.PropertyType.SUPPLEMENTARY_WARNING_SIGN_TEXT):
            self._choice.write_packed(zserio_context.supplementary_warning_sign_text, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._supplementary_warning_sign_ = zserio.array.DeltaContext()
            self._variable_warning_sign_properties_ = zserio.array.DeltaContext()
            self._roadworks_type_ = zserio.array.DeltaContext()
            self._traffic_light_layout_ = nds.rules.types.traffic_light_layout.TrafficLightLayout.ZserioPackingContext()
            self._traffic_light_faces_ = nds.rules.types.traffic_light_face_list.TrafficLightFaceList.ZserioPackingContext()
            self._traffic_light_usage_type_ = zserio.array.DeltaContext()
            self._traffic_light_target_group_ = zserio.array.DeltaContext()
            self._traffic_light_cycle_ = nds.rules.types.traffic_light_cycle.TrafficLightCycle.ZserioPackingContext()
            self._supplementary_warning_sign_text_ = nds.rules.types.supplementary_warning_sign_text.SupplementaryWarningSignText.ZserioPackingContext()

        @property
        def supplementary_warning_sign(self):
            return self._supplementary_warning_sign_

        @property
        def variable_warning_sign_properties(self):
            return self._variable_warning_sign_properties_

        @property
        def roadworks_type(self):
            return self._roadworks_type_

        @property
        def traffic_light_layout(self):
            return self._traffic_light_layout_

        @property
        def traffic_light_faces(self):
            return self._traffic_light_faces_

        @property
        def traffic_light_usage_type(self):
            return self._traffic_light_usage_type_

        @property
        def traffic_light_target_group(self):
            return self._traffic_light_target_group_

        @property
        def traffic_light_cycle(self):
            return self._traffic_light_cycle_

        @property
        def supplementary_warning_sign_text(self):
            return self._supplementary_warning_sign_text_

    CHOICE_SUPPLEMENTARY_WARNING_SIGN = 0
    CHOICE_VARIABLE_WARNING_SIGN_PROPERTIES = 1
    CHOICE_ROADWORKS_TYPE = 2
    CHOICE_TRAFFIC_LIGHT_LAYOUT = 3
    CHOICE_TRAFFIC_LIGHT_FACES = 4
    CHOICE_TRAFFIC_LIGHT_USAGE_TYPE = 5
    CHOICE_TRAFFIC_LIGHT_TARGET_GROUP = 6
    CHOICE_TRAFFIC_LIGHT_CYCLE = 7
    CHOICE_SUPPLEMENTARY_WARNING_SIGN_TEXT = 8
    UNDEFINED_CHOICE = -1
