# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.reference.types.lane_geometry_range
import nds.lane.reference.types.lane_id
import nds.rules.types.lane_traffic_priority_reason

class LaneTrafficPriority:
    def __init__(
            self,
            reason_: typing.Union[nds.rules.types.lane_traffic_priority_reason.LaneTrafficPriorityReason, None] = None,
            num_lanes_: int = int(),
            other_lanes_: typing.List[nds.lane.reference.types.lane_id.LaneId] = None,
            range_: typing.List[nds.lane.reference.types.lane_geometry_range.LaneGeometryRange] = None) -> None:
        self._reason_ = reason_
        self._num_lanes_ = num_lanes_
        self._other_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_other_lanes()), other_lanes_)
        self._range_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_range()), range_)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneTrafficPriority'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneTrafficPriority':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneTrafficPriority'],
            zserio_context: LaneTrafficPriority.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneTrafficPriority':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneTrafficPriority):
            return ((self._reason_ == other._reason_) and
                    (self._num_lanes_ == other._num_lanes_) and
                    (self._other_lanes_ == other._other_lanes_) and
                    (self._range_ == other._range_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._reason_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_lanes_)
        result = zserio.hashcode.calc_hashcode_object(result, self._other_lanes_)
        result = zserio.hashcode.calc_hashcode_object(result, self._range_)

        return result

    @property
    def reason(self) -> typing.Union[nds.rules.types.lane_traffic_priority_reason.LaneTrafficPriorityReason, None]:
        return self._reason_

    @reason.setter
    def reason(self, reason_: typing.Union[nds.rules.types.lane_traffic_priority_reason.LaneTrafficPriorityReason, None]) -> None:
        self._reason_ = reason_

    @property
    def num_lanes(self) -> int:
        return self._num_lanes_

    @num_lanes.setter
    def num_lanes(self, num_lanes_: int) -> None:
        self._num_lanes_ = num_lanes_

    @property
    def other_lanes(self) -> typing.List[nds.lane.reference.types.lane_id.LaneId]:
        return self._other_lanes_.raw_array

    @other_lanes.setter
    def other_lanes(self, other_lanes_: typing.List[nds.lane.reference.types.lane_id.LaneId]) -> None:
        self._other_lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_other_lanes()), other_lanes_)

    @property
    def range(self) -> typing.List[nds.lane.reference.types.lane_geometry_range.LaneGeometryRange]:
        return self._range_.raw_array

    @range.setter
    def range(self, range_: typing.List[nds.lane.reference.types.lane_geometry_range.LaneGeometryRange]) -> None:
        self._range_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_range()), range_)

    def init_packing_context(self, zserio_context: LaneTrafficPriority.ZserioPackingContext) -> None:
        self._reason_.init_packing_context(zserio_context.reason)
        zserio_context.num_lanes.init(zserio.array.VarSizeArrayTraits(), self._num_lanes_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reason_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_lanes_)
        end_bitposition += self._other_lanes_.bitsizeof(end_bitposition)
        end_bitposition += self._range_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneTrafficPriority.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reason_.bitsizeof_packed(zserio_context.reason, end_bitposition)
        end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_lanes_)
        end_bitposition += self._other_lanes_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._range_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reason_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_lanes_)
        end_bitposition = self._other_lanes_.initialize_offsets(end_bitposition)
        end_bitposition = self._range_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneTrafficPriority.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reason_.initialize_offsets_packed(zserio_context.reason, end_bitposition)
        end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_lanes_)
        end_bitposition = self._other_lanes_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._range_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._reason_ = nds.rules.types.lane_traffic_priority_reason.LaneTrafficPriorityReason.from_reader(zserio_reader)
        self._num_lanes_ = zserio_reader.read_varsize()
        self._other_lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_other_lanes()), zserio_reader, self._num_lanes_)
        self._range_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_range()), zserio_reader, self._num_lanes_)

    def read_packed(self, zserio_context: LaneTrafficPriority.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._reason_ = nds.rules.types.lane_traffic_priority_reason.LaneTrafficPriorityReason.from_reader_packed(zserio_context.reason, zserio_reader)

        self._num_lanes_ = zserio_context.num_lanes.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._other_lanes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_other_lanes()), zserio_reader, self._num_lanes_)

        self._range_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_range()), zserio_reader, self._num_lanes_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._reason_.write(zserio_writer)

        zserio_writer.write_varsize(self._num_lanes_)

        # check array length
        if len(self._other_lanes_) != (self._num_lanes_):
            raise zserio.PythonRuntimeException("Wrong array length for field LaneTrafficPriority.otherLanes: "
                                                f"{len(self._other_lanes_)} != {self._num_lanes_}!")
        self._other_lanes_.write(zserio_writer)

        # check array length
        if len(self._range_) != (self._num_lanes_):
            raise zserio.PythonRuntimeException("Wrong array length for field LaneTrafficPriority.range: "
                                                f"{len(self._range_)} != {self._num_lanes_}!")
        self._range_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneTrafficPriority.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._reason_.write_packed(zserio_context.reason, zserio_writer)

        zserio_context.num_lanes.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_lanes_)

        # check array length
        if len(self._other_lanes_) != (self._num_lanes_):
            raise zserio.PythonRuntimeException("Wrong array length for field LaneTrafficPriority.otherLanes: "
                                                f"{len(self._other_lanes_)} != {self._num_lanes_}!")
        self._other_lanes_.write_packed(zserio_writer)

        # check array length
        if len(self._range_) != (self._num_lanes_):
            raise zserio.PythonRuntimeException("Wrong array length for field LaneTrafficPriority.range: "
                                                f"{len(self._range_)} != {self._num_lanes_}!")
        self._range_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._reason_ = zserio.array.DeltaContext()
            self._num_lanes_ = zserio.array.DeltaContext()

        @property
        def reason(self):
            return self._reason_

        @property
        def num_lanes(self):
            return self._num_lanes_

    class _ZserioElementFactory_other_lanes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_id.LaneId:
            del zserio_index
            return nds.lane.reference.types.lane_id.LaneId.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext:
            return nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.reference.types.lane_id.LaneId.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_id.LaneId:
            del zserio_index
            return nds.lane.reference.types.lane_id.LaneId.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_range:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_geometry_range.LaneGeometryRange:
            del zserio_index
            return nds.lane.reference.types.lane_geometry_range.LaneGeometryRange.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.lane.reference.types.lane_geometry_range.LaneGeometryRange.ZserioPackingContext:
            return nds.lane.reference.types.lane_geometry_range.LaneGeometryRange.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.lane.reference.types.lane_geometry_range.LaneGeometryRange.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.lane.reference.types.lane_geometry_range.LaneGeometryRange:
            del zserio_index
            return nds.lane.reference.types.lane_geometry_range.LaneGeometryRange.from_reader_packed(zserio_context, zserio_reader)
