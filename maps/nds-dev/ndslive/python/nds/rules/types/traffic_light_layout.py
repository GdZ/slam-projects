# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.traffic_light_construction_type
import nds.rules.types.traffic_light_lens

class TrafficLightLayout:
    def __init__(
            self,
            construction_type_: typing.Union[nds.rules.types.traffic_light_construction_type.TrafficLightConstructionType, None] = None,
            num_lenses_: int = int(),
            lens_value_: typing.List[nds.rules.types.traffic_light_lens.TrafficLightLens] = None) -> None:
        self._construction_type_ = construction_type_
        self._num_lenses_ = num_lenses_
        self._lens_value_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_value()), lens_value_)

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficLightLayout'],
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightLayout':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficLightLayout'],
            zserio_context: TrafficLightLayout.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightLayout':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficLightLayout):
            return ((self._construction_type_ == other._construction_type_) and
                    (self._num_lenses_ == other._num_lenses_) and
                    (self._lens_value_ == other._lens_value_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._construction_type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_lenses_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lens_value_)

        return result

    @property
    def construction_type(self) -> typing.Union[nds.rules.types.traffic_light_construction_type.TrafficLightConstructionType, None]:
        return self._construction_type_

    @construction_type.setter
    def construction_type(self, construction_type_: typing.Union[nds.rules.types.traffic_light_construction_type.TrafficLightConstructionType, None]) -> None:
        self._construction_type_ = construction_type_

    @property
    def num_lenses(self) -> int:
        return self._num_lenses_

    @num_lenses.setter
    def num_lenses(self, num_lenses_: int) -> None:
        self._num_lenses_ = num_lenses_

    @property
    def lens_value(self) -> typing.List[nds.rules.types.traffic_light_lens.TrafficLightLens]:
        return self._lens_value_.raw_array

    @lens_value.setter
    def lens_value(self, lens_value_: typing.List[nds.rules.types.traffic_light_lens.TrafficLightLens]) -> None:
        self._lens_value_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_value()), lens_value_)

    def init_packing_context(self, zserio_context: TrafficLightLayout.ZserioPackingContext) -> None:
        self._construction_type_.init_packing_context(zserio_context.construction_type)
        zserio_context.num_lenses.init(zserio.array.BitFieldArrayTraits(4), self._num_lenses_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._construction_type_.bitsizeof(end_bitposition)
        end_bitposition += 4
        end_bitposition += self._lens_value_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficLightLayout.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._construction_type_.bitsizeof_packed(zserio_context.construction_type, end_bitposition)
        end_bitposition += zserio_context.num_lenses.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._num_lenses_)
        end_bitposition += self._lens_value_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._construction_type_.initialize_offsets(end_bitposition)
        end_bitposition += 4
        end_bitposition = self._lens_value_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficLightLayout.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._construction_type_.initialize_offsets_packed(zserio_context.construction_type, end_bitposition)
        end_bitposition += zserio_context.num_lenses.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._num_lenses_)
        end_bitposition = self._lens_value_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._construction_type_ = nds.rules.types.traffic_light_construction_type.TrafficLightConstructionType.from_reader(zserio_reader)
        self._num_lenses_ = zserio_reader.read_bits(4)
        self._lens_value_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_value()), zserio_reader, self._num_lenses_)

    def read_packed(self, zserio_context: TrafficLightLayout.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._construction_type_ = nds.rules.types.traffic_light_construction_type.TrafficLightConstructionType.from_reader_packed(zserio_context.construction_type, zserio_reader)

        self._num_lenses_ = zserio_context.num_lenses.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)

        self._lens_value_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_value()), zserio_reader, self._num_lenses_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._construction_type_.write(zserio_writer)

        zserio_writer.write_bits(self._num_lenses_, 4)

        # check array length
        if len(self._lens_value_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightLayout.lensValue: "
                                                f"{len(self._lens_value_)} != {self._num_lenses_}!")
        self._lens_value_.write(zserio_writer)

    def write_packed(self, zserio_context: TrafficLightLayout.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._construction_type_.write_packed(zserio_context.construction_type, zserio_writer)

        zserio_context.num_lenses.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._num_lenses_)

        # check array length
        if len(self._lens_value_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightLayout.lensValue: "
                                                f"{len(self._lens_value_)} != {self._num_lenses_}!")
        self._lens_value_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._construction_type_ = zserio.array.DeltaContext()
            self._num_lenses_ = zserio.array.DeltaContext()

        @property
        def construction_type(self):
            return self._construction_type_

        @property
        def num_lenses(self):
            return self._num_lenses_

    class _ZserioElementFactory_lens_value:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_lens.TrafficLightLens:
            del zserio_index
            return nds.rules.types.traffic_light_lens.TrafficLightLens.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.types.traffic_light_lens.TrafficLightLens.ZserioPackingContext:
            return nds.rules.types.traffic_light_lens.TrafficLightLens.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.types.traffic_light_lens.TrafficLightLens.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_lens.TrafficLightLens:
            del zserio_index
            return nds.rules.types.traffic_light_lens.TrafficLightLens.from_reader_packed(zserio_context, zserio_reader)
