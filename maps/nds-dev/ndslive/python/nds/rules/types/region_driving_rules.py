# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.lane.reference.types.marking_color
import nds.rules.types.driving_rules_content
import nds.rules.types.emergency_rules
import nds.rules.types.lane_merge_rules
import nds.rules.types.road_side_parking_rules
import nds.rules.types.solid_line_crossing_rules

class RegionDrivingRules:
    def __init__(
            self,
            content_: typing.Union[nds.rules.types.driving_rules_content.DrivingRulesContent, None] = None,
            stay_curbside_: typing.Optional[bool] = None,
            temporary_lane_marking_color_: typing.Optional[nds.lane.reference.types.marking_color.MarkingColor] = None,
            curbside_passing_allowed_: typing.Optional[bool] = None,
            emergency_rules_: typing.Optional[nds.rules.types.emergency_rules.EmergencyRules] = None,
            yield_oncoming_: typing.Optional[bool] = None,
            yield_curb_side_: typing.Optional[bool] = None,
            always_allowed_: typing.Optional[bool] = None,
            solid_line_crossing_rules_: typing.Optional[nds.rules.types.solid_line_crossing_rules.SolidLineCrossingRules] = None,
            road_side_parking_rules_: typing.Optional[nds.rules.types.road_side_parking_rules.RoadSideParkingRules] = None,
            lane_merge_rules_: typing.Optional[nds.rules.types.lane_merge_rules.LaneMergeRules] = None) -> None:
        self._content_ = content_
        self._stay_curbside_ = stay_curbside_
        self._temporary_lane_marking_color_ = temporary_lane_marking_color_
        self._curbside_passing_allowed_ = curbside_passing_allowed_
        self._emergency_rules_ = emergency_rules_
        self._yield_oncoming_ = yield_oncoming_
        self._yield_curb_side_ = yield_curb_side_
        self._always_allowed_ = always_allowed_
        self._solid_line_crossing_rules_ = solid_line_crossing_rules_
        self._road_side_parking_rules_ = road_side_parking_rules_
        self._lane_merge_rules_ = lane_merge_rules_

    @classmethod
    def from_reader(
            cls: typing.Type['RegionDrivingRules'],
            zserio_reader: zserio.BitStreamReader) -> 'RegionDrivingRules':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RegionDrivingRules'],
            zserio_context: RegionDrivingRules.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RegionDrivingRules':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RegionDrivingRules):
            return ((self._content_ == other._content_) and
                    (not other.is_stay_curbside_used() if not self.is_stay_curbside_used() else (self._stay_curbside_ == other._stay_curbside_)) and
                    (not other.is_temporary_lane_marking_color_used() if not self.is_temporary_lane_marking_color_used() else (self._temporary_lane_marking_color_ == other._temporary_lane_marking_color_)) and
                    (not other.is_curbside_passing_allowed_used() if not self.is_curbside_passing_allowed_used() else (self._curbside_passing_allowed_ == other._curbside_passing_allowed_)) and
                    (not other.is_emergency_rules_used() if not self.is_emergency_rules_used() else (self._emergency_rules_ == other._emergency_rules_)) and
                    (not other.is_yield_oncoming_used() if not self.is_yield_oncoming_used() else (self._yield_oncoming_ == other._yield_oncoming_)) and
                    (not other.is_yield_curb_side_used() if not self.is_yield_curb_side_used() else (self._yield_curb_side_ == other._yield_curb_side_)) and
                    (not other.is_always_allowed_used() if not self.is_always_allowed_used() else (self._always_allowed_ == other._always_allowed_)) and
                    (not other.is_solid_line_crossing_rules_used() if not self.is_solid_line_crossing_rules_used() else (self._solid_line_crossing_rules_ == other._solid_line_crossing_rules_)) and
                    (not other.is_road_side_parking_rules_used() if not self.is_road_side_parking_rules_used() else (self._road_side_parking_rules_ == other._road_side_parking_rules_)) and
                    (not other.is_lane_merge_rules_used() if not self.is_lane_merge_rules_used() else (self._lane_merge_rules_ == other._lane_merge_rules_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_stay_curbside_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._stay_curbside_)
        if self.is_temporary_lane_marking_color_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._temporary_lane_marking_color_)
        if self.is_curbside_passing_allowed_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._curbside_passing_allowed_)
        if self.is_emergency_rules_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._emergency_rules_)
        if self.is_yield_oncoming_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._yield_oncoming_)
        if self.is_yield_curb_side_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._yield_curb_side_)
        if self.is_always_allowed_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._always_allowed_)
        if self.is_solid_line_crossing_rules_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._solid_line_crossing_rules_)
        if self.is_road_side_parking_rules_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._road_side_parking_rules_)
        if self.is_lane_merge_rules_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_merge_rules_)

        return result

    @property
    def content(self) -> typing.Union[nds.rules.types.driving_rules_content.DrivingRulesContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.rules.types.driving_rules_content.DrivingRulesContent, None]) -> None:
        self._content_ = content_

    @property
    def stay_curbside(self) -> typing.Optional[bool]:
        return self._stay_curbside_

    @stay_curbside.setter
    def stay_curbside(self, stay_curbside_: typing.Optional[bool]) -> None:
        self._stay_curbside_ = stay_curbside_

    def is_stay_curbside_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.STAY_CURBSIDE) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.STAY_CURBSIDE

    def is_stay_curbside_set(self) -> bool:
        return not self._stay_curbside_ is None

    def reset_stay_curbside(self) -> None:
        self._stay_curbside_ = None

    @property
    def temporary_lane_marking_color(self) -> typing.Optional[nds.lane.reference.types.marking_color.MarkingColor]:
        return self._temporary_lane_marking_color_

    @temporary_lane_marking_color.setter
    def temporary_lane_marking_color(self, temporary_lane_marking_color_: typing.Optional[nds.lane.reference.types.marking_color.MarkingColor]) -> None:
        self._temporary_lane_marking_color_ = temporary_lane_marking_color_

    def is_temporary_lane_marking_color_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR

    def is_temporary_lane_marking_color_set(self) -> bool:
        return not self._temporary_lane_marking_color_ is None

    def reset_temporary_lane_marking_color(self) -> None:
        self._temporary_lane_marking_color_ = None

    @property
    def curbside_passing_allowed(self) -> typing.Optional[bool]:
        return self._curbside_passing_allowed_

    @curbside_passing_allowed.setter
    def curbside_passing_allowed(self, curbside_passing_allowed_: typing.Optional[bool]) -> None:
        self._curbside_passing_allowed_ = curbside_passing_allowed_

    def is_curbside_passing_allowed_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.CURBSIDE_PASSING) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.CURBSIDE_PASSING

    def is_curbside_passing_allowed_set(self) -> bool:
        return not self._curbside_passing_allowed_ is None

    def reset_curbside_passing_allowed(self) -> None:
        self._curbside_passing_allowed_ = None

    @property
    def emergency_rules(self) -> typing.Optional[nds.rules.types.emergency_rules.EmergencyRules]:
        return self._emergency_rules_

    @emergency_rules.setter
    def emergency_rules(self, emergency_rules_: typing.Optional[nds.rules.types.emergency_rules.EmergencyRules]) -> None:
        self._emergency_rules_ = emergency_rules_

    def is_emergency_rules_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.EMERGENCY_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.EMERGENCY_RULES

    def is_emergency_rules_set(self) -> bool:
        return not self._emergency_rules_ is None

    def reset_emergency_rules(self) -> None:
        self._emergency_rules_ = None

    @property
    def yield_oncoming(self) -> typing.Optional[bool]:
        return self._yield_oncoming_

    @yield_oncoming.setter
    def yield_oncoming(self, yield_oncoming_: typing.Optional[bool]) -> None:
        self._yield_oncoming_ = yield_oncoming_

    def is_yield_oncoming_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.YIELD_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.YIELD_RULES

    def is_yield_oncoming_set(self) -> bool:
        return not self._yield_oncoming_ is None

    def reset_yield_oncoming(self) -> None:
        self._yield_oncoming_ = None

    @property
    def yield_curb_side(self) -> typing.Optional[bool]:
        return self._yield_curb_side_

    @yield_curb_side.setter
    def yield_curb_side(self, yield_curb_side_: typing.Optional[bool]) -> None:
        self._yield_curb_side_ = yield_curb_side_

    def is_yield_curb_side_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.YIELD_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.YIELD_RULES

    def is_yield_curb_side_set(self) -> bool:
        return not self._yield_curb_side_ is None

    def reset_yield_curb_side(self) -> None:
        self._yield_curb_side_ = None

    @property
    def always_allowed(self) -> typing.Optional[bool]:
        return self._always_allowed_

    @always_allowed.setter
    def always_allowed(self, always_allowed_: typing.Optional[bool]) -> None:
        self._always_allowed_ = always_allowed_

    def is_always_allowed_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.SOLID_LINE_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.SOLID_LINE_RULES

    def is_always_allowed_set(self) -> bool:
        return not self._always_allowed_ is None

    def reset_always_allowed(self) -> None:
        self._always_allowed_ = None

    @property
    def solid_line_crossing_rules(self) -> typing.Optional[nds.rules.types.solid_line_crossing_rules.SolidLineCrossingRules]:
        return self._solid_line_crossing_rules_

    @solid_line_crossing_rules.setter
    def solid_line_crossing_rules(self, solid_line_crossing_rules_: typing.Optional[nds.rules.types.solid_line_crossing_rules.SolidLineCrossingRules]) -> None:
        self._solid_line_crossing_rules_ = solid_line_crossing_rules_

    def is_solid_line_crossing_rules_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.SOLID_LINE_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.SOLID_LINE_RULES and not self._always_allowed_

    def is_solid_line_crossing_rules_set(self) -> bool:
        return not self._solid_line_crossing_rules_ is None

    def reset_solid_line_crossing_rules(self) -> None:
        self._solid_line_crossing_rules_ = None

    @property
    def road_side_parking_rules(self) -> typing.Optional[nds.rules.types.road_side_parking_rules.RoadSideParkingRules]:
        return self._road_side_parking_rules_

    @road_side_parking_rules.setter
    def road_side_parking_rules(self, road_side_parking_rules_: typing.Optional[nds.rules.types.road_side_parking_rules.RoadSideParkingRules]) -> None:
        self._road_side_parking_rules_ = road_side_parking_rules_

    def is_road_side_parking_rules_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES

    def is_road_side_parking_rules_set(self) -> bool:
        return not self._road_side_parking_rules_ is None

    def reset_road_side_parking_rules(self) -> None:
        self._road_side_parking_rules_ = None

    @property
    def lane_merge_rules(self) -> typing.Optional[nds.rules.types.lane_merge_rules.LaneMergeRules]:
        return self._lane_merge_rules_

    @lane_merge_rules.setter
    def lane_merge_rules(self, lane_merge_rules_: typing.Optional[nds.rules.types.lane_merge_rules.LaneMergeRules]) -> None:
        self._lane_merge_rules_ = lane_merge_rules_

    def is_lane_merge_rules_used(self) -> bool:
        return (self._content_ & nds.rules.types.driving_rules_content.DrivingRulesContent.Values.LANE_MERGE_RULES) == nds.rules.types.driving_rules_content.DrivingRulesContent.Values.LANE_MERGE_RULES

    def is_lane_merge_rules_set(self) -> bool:
        return not self._lane_merge_rules_ is None

    def reset_lane_merge_rules(self) -> None:
        self._lane_merge_rules_ = None

    def init_packing_context(self, zserio_context: RegionDrivingRules.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_temporary_lane_marking_color_used():
            self._temporary_lane_marking_color_.init_packing_context(zserio_context.temporary_lane_marking_color)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_stay_curbside_used():
            end_bitposition += 1
        if self.is_temporary_lane_marking_color_used():
            end_bitposition += self._temporary_lane_marking_color_.bitsizeof(end_bitposition)
        if self.is_curbside_passing_allowed_used():
            end_bitposition += 1
        if self.is_emergency_rules_used():
            end_bitposition += self._emergency_rules_.bitsizeof(end_bitposition)
        if self.is_yield_oncoming_used():
            end_bitposition += 1
        if self.is_yield_curb_side_used():
            end_bitposition += 1
        if self.is_always_allowed_used():
            end_bitposition += 1
        if self.is_solid_line_crossing_rules_used():
            end_bitposition += self._solid_line_crossing_rules_.bitsizeof(end_bitposition)
        if self.is_road_side_parking_rules_used():
            end_bitposition += self._road_side_parking_rules_.bitsizeof(end_bitposition)
        if self.is_lane_merge_rules_used():
            end_bitposition += self._lane_merge_rules_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RegionDrivingRules.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_stay_curbside_used():
            end_bitposition += 1
        if self.is_temporary_lane_marking_color_used():
            end_bitposition += self._temporary_lane_marking_color_.bitsizeof_packed(zserio_context.temporary_lane_marking_color, end_bitposition)
        if self.is_curbside_passing_allowed_used():
            end_bitposition += 1
        if self.is_emergency_rules_used():
            end_bitposition += self._emergency_rules_.bitsizeof(end_bitposition)
        if self.is_yield_oncoming_used():
            end_bitposition += 1
        if self.is_yield_curb_side_used():
            end_bitposition += 1
        if self.is_always_allowed_used():
            end_bitposition += 1
        if self.is_solid_line_crossing_rules_used():
            end_bitposition += self._solid_line_crossing_rules_.bitsizeof(end_bitposition)
        if self.is_road_side_parking_rules_used():
            end_bitposition += self._road_side_parking_rules_.bitsizeof(end_bitposition)
        if self.is_lane_merge_rules_used():
            end_bitposition += self._lane_merge_rules_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_stay_curbside_used():
            end_bitposition += 1
        if self.is_temporary_lane_marking_color_used():
            end_bitposition = self._temporary_lane_marking_color_.initialize_offsets(end_bitposition)
        if self.is_curbside_passing_allowed_used():
            end_bitposition += 1
        if self.is_emergency_rules_used():
            end_bitposition = self._emergency_rules_.initialize_offsets(end_bitposition)
        if self.is_yield_oncoming_used():
            end_bitposition += 1
        if self.is_yield_curb_side_used():
            end_bitposition += 1
        if self.is_always_allowed_used():
            end_bitposition += 1
        if self.is_solid_line_crossing_rules_used():
            end_bitposition = self._solid_line_crossing_rules_.initialize_offsets(end_bitposition)
        if self.is_road_side_parking_rules_used():
            end_bitposition = self._road_side_parking_rules_.initialize_offsets(end_bitposition)
        if self.is_lane_merge_rules_used():
            end_bitposition = self._lane_merge_rules_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RegionDrivingRules.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_stay_curbside_used():
            end_bitposition += 1
        if self.is_temporary_lane_marking_color_used():
            end_bitposition = self._temporary_lane_marking_color_.initialize_offsets_packed(zserio_context.temporary_lane_marking_color, end_bitposition)
        if self.is_curbside_passing_allowed_used():
            end_bitposition += 1
        if self.is_emergency_rules_used():
            end_bitposition = self._emergency_rules_.initialize_offsets(end_bitposition)
        if self.is_yield_oncoming_used():
            end_bitposition += 1
        if self.is_yield_curb_side_used():
            end_bitposition += 1
        if self.is_always_allowed_used():
            end_bitposition += 1
        if self.is_solid_line_crossing_rules_used():
            end_bitposition = self._solid_line_crossing_rules_.initialize_offsets(end_bitposition)
        if self.is_road_side_parking_rules_used():
            end_bitposition = self._road_side_parking_rules_.initialize_offsets(end_bitposition)
        if self.is_lane_merge_rules_used():
            end_bitposition = self._lane_merge_rules_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.rules.types.driving_rules_content.DrivingRulesContent.from_reader(zserio_reader)
        if self.is_stay_curbside_used():
            self._stay_curbside_ = zserio_reader.read_bool()
        else:
            self._stay_curbside_ = None
        if self.is_temporary_lane_marking_color_used():
            self._temporary_lane_marking_color_ = nds.lane.reference.types.marking_color.MarkingColor.from_reader(zserio_reader)
        else:
            self._temporary_lane_marking_color_ = None
        if self.is_curbside_passing_allowed_used():
            self._curbside_passing_allowed_ = zserio_reader.read_bool()
        else:
            self._curbside_passing_allowed_ = None
        if self.is_emergency_rules_used():
            self._emergency_rules_ = nds.rules.types.emergency_rules.EmergencyRules.from_reader(zserio_reader)
        else:
            self._emergency_rules_ = None
        if self.is_yield_oncoming_used():
            self._yield_oncoming_ = zserio_reader.read_bool()
        else:
            self._yield_oncoming_ = None
        if self.is_yield_curb_side_used():
            self._yield_curb_side_ = zserio_reader.read_bool()
        else:
            self._yield_curb_side_ = None
        if self.is_always_allowed_used():
            self._always_allowed_ = zserio_reader.read_bool()
        else:
            self._always_allowed_ = None
        if self.is_solid_line_crossing_rules_used():
            self._solid_line_crossing_rules_ = nds.rules.types.solid_line_crossing_rules.SolidLineCrossingRules.from_reader(zserio_reader)
        else:
            self._solid_line_crossing_rules_ = None
        if self.is_road_side_parking_rules_used():
            self._road_side_parking_rules_ = nds.rules.types.road_side_parking_rules.RoadSideParkingRules.from_reader(zserio_reader)
        else:
            self._road_side_parking_rules_ = None
        if self.is_lane_merge_rules_used():
            self._lane_merge_rules_ = nds.rules.types.lane_merge_rules.LaneMergeRules.from_reader(zserio_reader)
        else:
            self._lane_merge_rules_ = None

    def read_packed(self, zserio_context: RegionDrivingRules.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.rules.types.driving_rules_content.DrivingRulesContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_stay_curbside_used():
            self._stay_curbside_ = zserio_reader.read_bool()
        else:
            self._stay_curbside_ = None

        if self.is_temporary_lane_marking_color_used():
            self._temporary_lane_marking_color_ = nds.lane.reference.types.marking_color.MarkingColor.from_reader_packed(zserio_context.temporary_lane_marking_color, zserio_reader)
        else:
            self._temporary_lane_marking_color_ = None

        if self.is_curbside_passing_allowed_used():
            self._curbside_passing_allowed_ = zserio_reader.read_bool()
        else:
            self._curbside_passing_allowed_ = None

        if self.is_emergency_rules_used():
            self._emergency_rules_ = nds.rules.types.emergency_rules.EmergencyRules.from_reader(zserio_reader)
        else:
            self._emergency_rules_ = None

        if self.is_yield_oncoming_used():
            self._yield_oncoming_ = zserio_reader.read_bool()
        else:
            self._yield_oncoming_ = None

        if self.is_yield_curb_side_used():
            self._yield_curb_side_ = zserio_reader.read_bool()
        else:
            self._yield_curb_side_ = None

        if self.is_always_allowed_used():
            self._always_allowed_ = zserio_reader.read_bool()
        else:
            self._always_allowed_ = None

        if self.is_solid_line_crossing_rules_used():
            self._solid_line_crossing_rules_ = nds.rules.types.solid_line_crossing_rules.SolidLineCrossingRules.from_reader(zserio_reader)
        else:
            self._solid_line_crossing_rules_ = None

        if self.is_road_side_parking_rules_used():
            self._road_side_parking_rules_ = nds.rules.types.road_side_parking_rules.RoadSideParkingRules.from_reader(zserio_reader)
        else:
            self._road_side_parking_rules_ = None

        if self.is_lane_merge_rules_used():
            self._lane_merge_rules_ = nds.rules.types.lane_merge_rules.LaneMergeRules.from_reader(zserio_reader)
        else:
            self._lane_merge_rules_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_stay_curbside_used():
            zserio_writer.write_bool(self._stay_curbside_)
        if self.is_temporary_lane_marking_color_used():
            self._temporary_lane_marking_color_.write(zserio_writer)
        if self.is_curbside_passing_allowed_used():
            zserio_writer.write_bool(self._curbside_passing_allowed_)
        if self.is_emergency_rules_used():
            self._emergency_rules_.write(zserio_writer)
        if self.is_yield_oncoming_used():
            zserio_writer.write_bool(self._yield_oncoming_)
        if self.is_yield_curb_side_used():
            zserio_writer.write_bool(self._yield_curb_side_)
        if self.is_always_allowed_used():
            zserio_writer.write_bool(self._always_allowed_)
        if self.is_solid_line_crossing_rules_used():
            self._solid_line_crossing_rules_.write(zserio_writer)
        if self.is_road_side_parking_rules_used():
            self._road_side_parking_rules_.write(zserio_writer)
        if self.is_lane_merge_rules_used():
            self._lane_merge_rules_.write(zserio_writer)

    def write_packed(self, zserio_context: RegionDrivingRules.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_stay_curbside_used():
            zserio_writer.write_bool(self._stay_curbside_)

        if self.is_temporary_lane_marking_color_used():
            self._temporary_lane_marking_color_.write_packed(zserio_context.temporary_lane_marking_color, zserio_writer)

        if self.is_curbside_passing_allowed_used():
            zserio_writer.write_bool(self._curbside_passing_allowed_)

        if self.is_emergency_rules_used():
            self._emergency_rules_.write(zserio_writer)

        if self.is_yield_oncoming_used():
            zserio_writer.write_bool(self._yield_oncoming_)

        if self.is_yield_curb_side_used():
            zserio_writer.write_bool(self._yield_curb_side_)

        if self.is_always_allowed_used():
            zserio_writer.write_bool(self._always_allowed_)

        if self.is_solid_line_crossing_rules_used():
            self._solid_line_crossing_rules_.write(zserio_writer)

        if self.is_road_side_parking_rules_used():
            self._road_side_parking_rules_.write(zserio_writer)

        if self.is_lane_merge_rules_used():
            self._lane_merge_rules_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._temporary_lane_marking_color_ = zserio.array.DeltaContext()

        @property
        def content(self):
            return self._content_

        @property
        def temporary_lane_marking_color(self):
            return self._temporary_lane_marking_color_
