# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.license_plate_digit_rule_type

class LicensePlateRestrictionRule:
    def __init__(
            self,
            no_permit_paper_: bool = bool(),
            is_specific_plates_: bool = bool(),
            is_first_digit_rule_: bool = bool(),
            is_last_digit_rule_: bool = bool(),
            first_digit_rule_type_: typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType] = None,
            num_first_special_digits_: typing.Optional[int] = None,
            first_special_digit_: typing.Optional[typing.List[str]] = None,
            last_digit_rule_type_: typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType] = None,
            num_last_special_digits_: typing.Optional[int] = None,
            last_special_digit_: typing.Optional[typing.List[str]] = None,
            num_specific_plates_: typing.Optional[int] = None,
            specific_plates_: typing.Optional[typing.List[str]] = None) -> None:
        self._no_permit_paper_ = no_permit_paper_
        self._is_specific_plates_ = is_specific_plates_
        self._is_first_digit_rule_ = is_first_digit_rule_
        self._is_last_digit_rule_ = is_last_digit_rule_
        self._first_digit_rule_type_ = first_digit_rule_type_
        self._num_first_special_digits_ = num_first_special_digits_
        if first_special_digit_ is None:
            self._first_special_digit_ = None
        else:
            self._first_special_digit_ = zserio.array.Array(zserio.array.StringArrayTraits(), first_special_digit_)
        self._last_digit_rule_type_ = last_digit_rule_type_
        self._num_last_special_digits_ = num_last_special_digits_
        if last_special_digit_ is None:
            self._last_special_digit_ = None
        else:
            self._last_special_digit_ = zserio.array.Array(zserio.array.StringArrayTraits(), last_special_digit_)
        self._num_specific_plates_ = num_specific_plates_
        if specific_plates_ is None:
            self._specific_plates_ = None
        else:
            self._specific_plates_ = zserio.array.Array(zserio.array.StringArrayTraits(), specific_plates_)

    @classmethod
    def from_reader(
            cls: typing.Type['LicensePlateRestrictionRule'],
            zserio_reader: zserio.BitStreamReader) -> 'LicensePlateRestrictionRule':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LicensePlateRestrictionRule'],
            zserio_context: LicensePlateRestrictionRule.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LicensePlateRestrictionRule':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LicensePlateRestrictionRule):
            return ((self._no_permit_paper_ == other._no_permit_paper_) and
                    (self._is_specific_plates_ == other._is_specific_plates_) and
                    (self._is_first_digit_rule_ == other._is_first_digit_rule_) and
                    (self._is_last_digit_rule_ == other._is_last_digit_rule_) and
                    (not other.is_first_digit_rule_type_used() if not self.is_first_digit_rule_type_used() else (self._first_digit_rule_type_ == other._first_digit_rule_type_)) and
                    (not other.is_num_first_special_digits_used() if not self.is_num_first_special_digits_used() else (self._num_first_special_digits_ == other._num_first_special_digits_)) and
                    (not other.is_first_special_digit_used() if not self.is_first_special_digit_used() else (self._first_special_digit_ == other._first_special_digit_)) and
                    (not other.is_last_digit_rule_type_used() if not self.is_last_digit_rule_type_used() else (self._last_digit_rule_type_ == other._last_digit_rule_type_)) and
                    (not other.is_num_last_special_digits_used() if not self.is_num_last_special_digits_used() else (self._num_last_special_digits_ == other._num_last_special_digits_)) and
                    (not other.is_last_special_digit_used() if not self.is_last_special_digit_used() else (self._last_special_digit_ == other._last_special_digit_)) and
                    (not other.is_num_specific_plates_used() if not self.is_num_specific_plates_used() else (self._num_specific_plates_ == other._num_specific_plates_)) and
                    (not other.is_specific_plates_used() if not self.is_specific_plates_used() else (self._specific_plates_ == other._specific_plates_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._no_permit_paper_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_specific_plates_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_first_digit_rule_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_last_digit_rule_)
        if self.is_first_digit_rule_type_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._first_digit_rule_type_)
        if self.is_num_first_special_digits_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._num_first_special_digits_)
        if self.is_first_special_digit_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._first_special_digit_)
        if self.is_last_digit_rule_type_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._last_digit_rule_type_)
        if self.is_num_last_special_digits_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._num_last_special_digits_)
        if self.is_last_special_digit_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._last_special_digit_)
        if self.is_num_specific_plates_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._num_specific_plates_)
        if self.is_specific_plates_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._specific_plates_)

        return result

    @property
    def no_permit_paper(self) -> bool:
        return self._no_permit_paper_

    @no_permit_paper.setter
    def no_permit_paper(self, no_permit_paper_: bool) -> None:
        self._no_permit_paper_ = no_permit_paper_

    @property
    def is_specific_plates(self) -> bool:
        return self._is_specific_plates_

    @is_specific_plates.setter
    def is_specific_plates(self, is_specific_plates_: bool) -> None:
        self._is_specific_plates_ = is_specific_plates_

    @property
    def is_first_digit_rule(self) -> bool:
        return self._is_first_digit_rule_

    @is_first_digit_rule.setter
    def is_first_digit_rule(self, is_first_digit_rule_: bool) -> None:
        self._is_first_digit_rule_ = is_first_digit_rule_

    @property
    def is_last_digit_rule(self) -> bool:
        return self._is_last_digit_rule_

    @is_last_digit_rule.setter
    def is_last_digit_rule(self, is_last_digit_rule_: bool) -> None:
        self._is_last_digit_rule_ = is_last_digit_rule_

    @property
    def first_digit_rule_type(self) -> typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType]:
        return self._first_digit_rule_type_

    @first_digit_rule_type.setter
    def first_digit_rule_type(self, first_digit_rule_type_: typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType]) -> None:
        self._first_digit_rule_type_ = first_digit_rule_type_

    def is_first_digit_rule_type_used(self) -> bool:
        return self._is_first_digit_rule_ == True

    def is_first_digit_rule_type_set(self) -> bool:
        return not self._first_digit_rule_type_ is None

    def reset_first_digit_rule_type(self) -> None:
        self._first_digit_rule_type_ = None

    @property
    def num_first_special_digits(self) -> typing.Optional[int]:
        return self._num_first_special_digits_

    @num_first_special_digits.setter
    def num_first_special_digits(self, num_first_special_digits_: typing.Optional[int]) -> None:
        self._num_first_special_digits_ = num_first_special_digits_

    def is_num_first_special_digits_used(self) -> bool:
        return self._is_first_digit_rule_ == True and self._first_digit_rule_type_ == nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.SPECIAL_DIGIT

    def is_num_first_special_digits_set(self) -> bool:
        return not self._num_first_special_digits_ is None

    def reset_num_first_special_digits(self) -> None:
        self._num_first_special_digits_ = None

    @property
    def first_special_digit(self) -> typing.Optional[typing.List[str]]:
        return None if self._first_special_digit_ is None else self._first_special_digit_.raw_array

    @first_special_digit.setter
    def first_special_digit(self, first_special_digit_: typing.Optional[typing.List[str]]) -> None:
        if first_special_digit_ is None:
            self._first_special_digit_ = None
        else:
            self._first_special_digit_ = zserio.array.Array(zserio.array.StringArrayTraits(), first_special_digit_)

    def is_first_special_digit_used(self) -> bool:
        return self._is_first_digit_rule_ == True and self._first_digit_rule_type_ == nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.SPECIAL_DIGIT

    def is_first_special_digit_set(self) -> bool:
        return not self._first_special_digit_ is None

    def reset_first_special_digit(self) -> None:
        self._first_special_digit_ = None

    @property
    def last_digit_rule_type(self) -> typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType]:
        return self._last_digit_rule_type_

    @last_digit_rule_type.setter
    def last_digit_rule_type(self, last_digit_rule_type_: typing.Optional[nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType]) -> None:
        self._last_digit_rule_type_ = last_digit_rule_type_

    def is_last_digit_rule_type_used(self) -> bool:
        return self._is_last_digit_rule_ == True

    def is_last_digit_rule_type_set(self) -> bool:
        return not self._last_digit_rule_type_ is None

    def reset_last_digit_rule_type(self) -> None:
        self._last_digit_rule_type_ = None

    @property
    def num_last_special_digits(self) -> typing.Optional[int]:
        return self._num_last_special_digits_

    @num_last_special_digits.setter
    def num_last_special_digits(self, num_last_special_digits_: typing.Optional[int]) -> None:
        self._num_last_special_digits_ = num_last_special_digits_

    def is_num_last_special_digits_used(self) -> bool:
        return self._is_last_digit_rule_ == True and self._last_digit_rule_type_ == nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.SPECIAL_DIGIT

    def is_num_last_special_digits_set(self) -> bool:
        return not self._num_last_special_digits_ is None

    def reset_num_last_special_digits(self) -> None:
        self._num_last_special_digits_ = None

    @property
    def last_special_digit(self) -> typing.Optional[typing.List[str]]:
        return None if self._last_special_digit_ is None else self._last_special_digit_.raw_array

    @last_special_digit.setter
    def last_special_digit(self, last_special_digit_: typing.Optional[typing.List[str]]) -> None:
        if last_special_digit_ is None:
            self._last_special_digit_ = None
        else:
            self._last_special_digit_ = zserio.array.Array(zserio.array.StringArrayTraits(), last_special_digit_)

    def is_last_special_digit_used(self) -> bool:
        return self._is_last_digit_rule_ == True and self._last_digit_rule_type_ == nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.SPECIAL_DIGIT

    def is_last_special_digit_set(self) -> bool:
        return not self._last_special_digit_ is None

    def reset_last_special_digit(self) -> None:
        self._last_special_digit_ = None

    @property
    def num_specific_plates(self) -> typing.Optional[int]:
        return self._num_specific_plates_

    @num_specific_plates.setter
    def num_specific_plates(self, num_specific_plates_: typing.Optional[int]) -> None:
        self._num_specific_plates_ = num_specific_plates_

    def is_num_specific_plates_used(self) -> bool:
        return self._is_specific_plates_ == True

    def is_num_specific_plates_set(self) -> bool:
        return not self._num_specific_plates_ is None

    def reset_num_specific_plates(self) -> None:
        self._num_specific_plates_ = None

    @property
    def specific_plates(self) -> typing.Optional[typing.List[str]]:
        return None if self._specific_plates_ is None else self._specific_plates_.raw_array

    @specific_plates.setter
    def specific_plates(self, specific_plates_: typing.Optional[typing.List[str]]) -> None:
        if specific_plates_ is None:
            self._specific_plates_ = None
        else:
            self._specific_plates_ = zserio.array.Array(zserio.array.StringArrayTraits(), specific_plates_)

    def is_specific_plates_used(self) -> bool:
        return self._is_specific_plates_ == True

    def is_specific_plates_set(self) -> bool:
        return not self._specific_plates_ is None

    def reset_specific_plates(self) -> None:
        self._specific_plates_ = None

    def init_packing_context(self, zserio_context: LicensePlateRestrictionRule.ZserioPackingContext) -> None:
        if self.is_first_digit_rule_type_used():
            self._first_digit_rule_type_.init_packing_context(zserio_context.first_digit_rule_type)
        if self.is_num_first_special_digits_used():
            zserio_context.num_first_special_digits.init(zserio.array.BitFieldArrayTraits(8), self._num_first_special_digits_)
        if self.is_last_digit_rule_type_used():
            self._last_digit_rule_type_.init_packing_context(zserio_context.last_digit_rule_type)
        if self.is_num_last_special_digits_used():
            zserio_context.num_last_special_digits.init(zserio.array.BitFieldArrayTraits(8), self._num_last_special_digits_)
        if self.is_num_specific_plates_used():
            zserio_context.num_specific_plates.init(zserio.array.BitFieldArrayTraits(8), self._num_specific_plates_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_first_digit_rule_type_used():
            end_bitposition += self._first_digit_rule_type_.bitsizeof(end_bitposition)
        if self.is_num_first_special_digits_used():
            end_bitposition += 8
        if self.is_first_special_digit_used():
            end_bitposition += self._first_special_digit_.bitsizeof(end_bitposition)
        if self.is_last_digit_rule_type_used():
            end_bitposition += self._last_digit_rule_type_.bitsizeof(end_bitposition)
        if self.is_num_last_special_digits_used():
            end_bitposition += 8
        if self.is_last_special_digit_used():
            end_bitposition += self._last_special_digit_.bitsizeof(end_bitposition)
        if self.is_num_specific_plates_used():
            end_bitposition += 8
        if self.is_specific_plates_used():
            end_bitposition += self._specific_plates_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LicensePlateRestrictionRule.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_first_digit_rule_type_used():
            end_bitposition += self._first_digit_rule_type_.bitsizeof_packed(zserio_context.first_digit_rule_type, end_bitposition)
        if self.is_num_first_special_digits_used():
            end_bitposition += zserio_context.num_first_special_digits.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_first_special_digits_)
        if self.is_first_special_digit_used():
            end_bitposition += self._first_special_digit_.bitsizeof(end_bitposition)
        if self.is_last_digit_rule_type_used():
            end_bitposition += self._last_digit_rule_type_.bitsizeof_packed(zserio_context.last_digit_rule_type, end_bitposition)
        if self.is_num_last_special_digits_used():
            end_bitposition += zserio_context.num_last_special_digits.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_last_special_digits_)
        if self.is_last_special_digit_used():
            end_bitposition += self._last_special_digit_.bitsizeof(end_bitposition)
        if self.is_num_specific_plates_used():
            end_bitposition += zserio_context.num_specific_plates.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_specific_plates_)
        if self.is_specific_plates_used():
            end_bitposition += self._specific_plates_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_first_digit_rule_type_used():
            end_bitposition = self._first_digit_rule_type_.initialize_offsets(end_bitposition)
        if self.is_num_first_special_digits_used():
            end_bitposition += 8
        if self.is_first_special_digit_used():
            end_bitposition = self._first_special_digit_.initialize_offsets(end_bitposition)
        if self.is_last_digit_rule_type_used():
            end_bitposition = self._last_digit_rule_type_.initialize_offsets(end_bitposition)
        if self.is_num_last_special_digits_used():
            end_bitposition += 8
        if self.is_last_special_digit_used():
            end_bitposition = self._last_special_digit_.initialize_offsets(end_bitposition)
        if self.is_num_specific_plates_used():
            end_bitposition += 8
        if self.is_specific_plates_used():
            end_bitposition = self._specific_plates_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LicensePlateRestrictionRule.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_first_digit_rule_type_used():
            end_bitposition = self._first_digit_rule_type_.initialize_offsets_packed(zserio_context.first_digit_rule_type, end_bitposition)
        if self.is_num_first_special_digits_used():
            end_bitposition += zserio_context.num_first_special_digits.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_first_special_digits_)
        if self.is_first_special_digit_used():
            end_bitposition = self._first_special_digit_.initialize_offsets(end_bitposition)
        if self.is_last_digit_rule_type_used():
            end_bitposition = self._last_digit_rule_type_.initialize_offsets_packed(zserio_context.last_digit_rule_type, end_bitposition)
        if self.is_num_last_special_digits_used():
            end_bitposition += zserio_context.num_last_special_digits.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_last_special_digits_)
        if self.is_last_special_digit_used():
            end_bitposition = self._last_special_digit_.initialize_offsets(end_bitposition)
        if self.is_num_specific_plates_used():
            end_bitposition += zserio_context.num_specific_plates.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_specific_plates_)
        if self.is_specific_plates_used():
            end_bitposition = self._specific_plates_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._no_permit_paper_ = zserio_reader.read_bool()
        self._is_specific_plates_ = zserio_reader.read_bool()
        self._is_first_digit_rule_ = zserio_reader.read_bool()
        self._is_last_digit_rule_ = zserio_reader.read_bool()
        if self.is_first_digit_rule_type_used():
            self._first_digit_rule_type_ = nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.from_reader(zserio_reader)
        else:
            self._first_digit_rule_type_ = None
        if self.is_num_first_special_digits_used():
            self._num_first_special_digits_ = zserio_reader.read_bits(8)
        else:
            self._num_first_special_digits_ = None
        if self.is_first_special_digit_used():
            self._first_special_digit_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_first_special_digits_)
        else:
            self._first_special_digit_ = None
        if self.is_last_digit_rule_type_used():
            self._last_digit_rule_type_ = nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.from_reader(zserio_reader)
        else:
            self._last_digit_rule_type_ = None
        if self.is_num_last_special_digits_used():
            self._num_last_special_digits_ = zserio_reader.read_bits(8)
        else:
            self._num_last_special_digits_ = None
        if self.is_last_special_digit_used():
            self._last_special_digit_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_last_special_digits_)
        else:
            self._last_special_digit_ = None
        if self.is_num_specific_plates_used():
            self._num_specific_plates_ = zserio_reader.read_bits(8)
        else:
            self._num_specific_plates_ = None
        if self.is_specific_plates_used():
            self._specific_plates_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_specific_plates_)
        else:
            self._specific_plates_ = None

    def read_packed(self, zserio_context: LicensePlateRestrictionRule.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._no_permit_paper_ = zserio_reader.read_bool()

        self._is_specific_plates_ = zserio_reader.read_bool()

        self._is_first_digit_rule_ = zserio_reader.read_bool()

        self._is_last_digit_rule_ = zserio_reader.read_bool()

        if self.is_first_digit_rule_type_used():
            self._first_digit_rule_type_ = nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.from_reader_packed(zserio_context.first_digit_rule_type, zserio_reader)
        else:
            self._first_digit_rule_type_ = None

        if self.is_num_first_special_digits_used():
            self._num_first_special_digits_ = zserio_context.num_first_special_digits.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._num_first_special_digits_ = None

        if self.is_first_special_digit_used():
            self._first_special_digit_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_first_special_digits_)
        else:
            self._first_special_digit_ = None

        if self.is_last_digit_rule_type_used():
            self._last_digit_rule_type_ = nds.rules.types.license_plate_digit_rule_type.LicensePlateDigitRuleType.from_reader_packed(zserio_context.last_digit_rule_type, zserio_reader)
        else:
            self._last_digit_rule_type_ = None

        if self.is_num_last_special_digits_used():
            self._num_last_special_digits_ = zserio_context.num_last_special_digits.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._num_last_special_digits_ = None

        if self.is_last_special_digit_used():
            self._last_special_digit_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_last_special_digits_)
        else:
            self._last_special_digit_ = None

        if self.is_num_specific_plates_used():
            self._num_specific_plates_ = zserio_context.num_specific_plates.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._num_specific_plates_ = None

        if self.is_specific_plates_used():
            self._specific_plates_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_specific_plates_)
        else:
            self._specific_plates_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._no_permit_paper_)

        zserio_writer.write_bool(self._is_specific_plates_)

        zserio_writer.write_bool(self._is_first_digit_rule_)

        zserio_writer.write_bool(self._is_last_digit_rule_)

        if self.is_first_digit_rule_type_used():
            self._first_digit_rule_type_.write(zserio_writer)

        if self.is_num_first_special_digits_used():
            zserio_writer.write_bits(self._num_first_special_digits_, 8)

        if self.is_first_special_digit_used():
            # check array length
            if len(self._first_special_digit_) != (self._num_first_special_digits_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.firstSpecialDigit: "
                                                    f"{len(self._first_special_digit_)} != {self._num_first_special_digits_}!")
            self._first_special_digit_.write(zserio_writer)

        if self.is_last_digit_rule_type_used():
            self._last_digit_rule_type_.write(zserio_writer)

        if self.is_num_last_special_digits_used():
            zserio_writer.write_bits(self._num_last_special_digits_, 8)

        if self.is_last_special_digit_used():
            # check array length
            if len(self._last_special_digit_) != (self._num_last_special_digits_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.lastSpecialDigit: "
                                                    f"{len(self._last_special_digit_)} != {self._num_last_special_digits_}!")
            self._last_special_digit_.write(zserio_writer)

        if self.is_num_specific_plates_used():
            zserio_writer.write_bits(self._num_specific_plates_, 8)

        if self.is_specific_plates_used():
            # check array length
            if len(self._specific_plates_) != (self._num_specific_plates_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.specificPlates: "
                                                    f"{len(self._specific_plates_)} != {self._num_specific_plates_}!")
            self._specific_plates_.write(zserio_writer)

    def write_packed(self, zserio_context: LicensePlateRestrictionRule.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._no_permit_paper_)

        zserio_writer.write_bool(self._is_specific_plates_)

        zserio_writer.write_bool(self._is_first_digit_rule_)

        zserio_writer.write_bool(self._is_last_digit_rule_)

        if self.is_first_digit_rule_type_used():
            self._first_digit_rule_type_.write_packed(zserio_context.first_digit_rule_type, zserio_writer)

        if self.is_num_first_special_digits_used():
            zserio_context.num_first_special_digits.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_first_special_digits_)

        if self.is_first_special_digit_used():
            # check array length
            if len(self._first_special_digit_) != (self._num_first_special_digits_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.firstSpecialDigit: "
                                                    f"{len(self._first_special_digit_)} != {self._num_first_special_digits_}!")
            self._first_special_digit_.write(zserio_writer)

        if self.is_last_digit_rule_type_used():
            self._last_digit_rule_type_.write_packed(zserio_context.last_digit_rule_type, zserio_writer)

        if self.is_num_last_special_digits_used():
            zserio_context.num_last_special_digits.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_last_special_digits_)

        if self.is_last_special_digit_used():
            # check array length
            if len(self._last_special_digit_) != (self._num_last_special_digits_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.lastSpecialDigit: "
                                                    f"{len(self._last_special_digit_)} != {self._num_last_special_digits_}!")
            self._last_special_digit_.write(zserio_writer)

        if self.is_num_specific_plates_used():
            zserio_context.num_specific_plates.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_specific_plates_)

        if self.is_specific_plates_used():
            # check array length
            if len(self._specific_plates_) != (self._num_specific_plates_):
                raise zserio.PythonRuntimeException("Wrong array length for field LicensePlateRestrictionRule.specificPlates: "
                                                    f"{len(self._specific_plates_)} != {self._num_specific_plates_}!")
            self._specific_plates_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._first_digit_rule_type_ = zserio.array.DeltaContext()
            self._num_first_special_digits_ = zserio.array.DeltaContext()
            self._last_digit_rule_type_ = zserio.array.DeltaContext()
            self._num_last_special_digits_ = zserio.array.DeltaContext()
            self._num_specific_plates_ = zserio.array.DeltaContext()

        @property
        def first_digit_rule_type(self):
            return self._first_digit_rule_type_

        @property
        def num_first_special_digits(self):
            return self._num_first_special_digits_

        @property
        def last_digit_rule_type(self):
            return self._last_digit_rule_type_

        @property
        def num_last_special_digits(self):
            return self._num_last_special_digits_

        @property
        def num_specific_plates(self):
            return self._num_specific_plates_
