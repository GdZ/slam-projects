# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.traffic_light_face

class TrafficLightFaceList:
    def __init__(
            self,
            has_lens_positions_: bool = bool(),
            faces_: typing.List[nds.rules.types.traffic_light_face.TrafficLightFace] = None) -> None:
        self._has_lens_positions_ = has_lens_positions_
        self._faces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_faces(self)), faces_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficLightFaceList'],
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightFaceList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficLightFaceList'],
            zserio_context: TrafficLightFaceList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightFaceList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficLightFaceList):
            return ((self._has_lens_positions_ == other._has_lens_positions_) and
                    (self._faces_ == other._faces_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_lens_positions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._faces_)

        return result

    @property
    def has_lens_positions(self) -> bool:
        return self._has_lens_positions_

    @has_lens_positions.setter
    def has_lens_positions(self, has_lens_positions_: bool) -> None:
        self._has_lens_positions_ = has_lens_positions_

    @property
    def faces(self) -> typing.List[nds.rules.types.traffic_light_face.TrafficLightFace]:
        return self._faces_.raw_array

    @faces.setter
    def faces(self, faces_: typing.List[nds.rules.types.traffic_light_face.TrafficLightFace]) -> None:
        self._faces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_faces(self)), faces_, is_auto=True)

    def init_packing_context(self, zserio_context: TrafficLightFaceList.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += self._faces_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficLightFaceList.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += self._faces_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition = self._faces_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficLightFaceList.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition = self._faces_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_lens_positions_ = zserio_reader.read_bool()
        self._faces_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_faces(self)), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: TrafficLightFaceList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._has_lens_positions_ = zserio_reader.read_bool()

        self._faces_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_faces(self)), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_lens_positions_)
        self._faces_.write(zserio_writer)

    def write_packed(self, zserio_context: TrafficLightFaceList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        zserio_writer.write_bool(self._has_lens_positions_)

        self._faces_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_faces:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_face.TrafficLightFace:
            del zserio_index
            return nds.rules.types.traffic_light_face.TrafficLightFace.from_reader(zserio_reader, self._owner._has_lens_positions_)

        @staticmethod
        def create_packing_context() -> nds.rules.types.traffic_light_face.TrafficLightFace.ZserioPackingContext:
            return nds.rules.types.traffic_light_face.TrafficLightFace.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.rules.types.traffic_light_face.TrafficLightFace.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_face.TrafficLightFace:
            del zserio_index
            return nds.rules.types.traffic_light_face.TrafficLightFace.from_reader_packed(zserio_context, zserio_reader, self._owner._has_lens_positions_)
