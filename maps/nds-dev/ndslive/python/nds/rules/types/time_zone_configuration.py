# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.conditions.day_of_year
import nds.core.types.quarter_hour_time_offset
import nds.rules.types.day_light_saving_time
import nds.rules.types.time_zone_name

class TimeZoneConfiguration:
    def __init__(
            self,
            valid_from_date_: typing.Union[nds.core.conditions.day_of_year.DayOfYear, None] = None,
            utc_offset_: nds.core.types.quarter_hour_time_offset.QuarterHourTimeOffset = nds.core.types.quarter_hour_time_offset.QuarterHourTimeOffset(),
            time_zone_names_: typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]] = None,
            time_zone_abbreviations_: typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]] = None,
            day_light_saving_time_: typing.Optional[nds.rules.types.day_light_saving_time.DayLightSavingTime] = None) -> None:
        self._valid_from_date_ = valid_from_date_
        self._utc_offset_ = utc_offset_
        if time_zone_names_ is None:
            self._time_zone_names_ = None
        else:
            self._time_zone_names_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_names()), time_zone_names_, is_auto=True)
        if time_zone_abbreviations_ is None:
            self._time_zone_abbreviations_ = None
        else:
            self._time_zone_abbreviations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_abbreviations()), time_zone_abbreviations_, is_auto=True)
        self._day_light_saving_time_ = day_light_saving_time_

    @classmethod
    def from_reader(
            cls: typing.Type['TimeZoneConfiguration'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeZoneConfiguration':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeZoneConfiguration'],
            zserio_context: TimeZoneConfiguration.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeZoneConfiguration':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeZoneConfiguration):
            return ((self._valid_from_date_ == other._valid_from_date_) and
                    (self._utc_offset_ == other._utc_offset_) and
                    (not other.is_time_zone_names_used() if not self.is_time_zone_names_used() else (self._time_zone_names_ == other._time_zone_names_)) and
                    (not other.is_time_zone_abbreviations_used() if not self.is_time_zone_abbreviations_used() else (self._time_zone_abbreviations_ == other._time_zone_abbreviations_)) and
                    (not other.is_day_light_saving_time_used() if not self.is_day_light_saving_time_used() else (self._day_light_saving_time_ == other._day_light_saving_time_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._valid_from_date_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._utc_offset_)
        if self.is_time_zone_names_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._time_zone_names_)
        if self.is_time_zone_abbreviations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._time_zone_abbreviations_)
        if self.is_day_light_saving_time_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._day_light_saving_time_)

        return result

    @property
    def valid_from_date(self) -> typing.Union[nds.core.conditions.day_of_year.DayOfYear, None]:
        return self._valid_from_date_

    @valid_from_date.setter
    def valid_from_date(self, valid_from_date_: typing.Union[nds.core.conditions.day_of_year.DayOfYear, None]) -> None:
        self._valid_from_date_ = valid_from_date_

    @property
    def utc_offset(self) -> nds.core.types.quarter_hour_time_offset.QuarterHourTimeOffset:
        return self._utc_offset_

    @utc_offset.setter
    def utc_offset(self, utc_offset_: nds.core.types.quarter_hour_time_offset.QuarterHourTimeOffset) -> None:
        self._utc_offset_ = utc_offset_

    @property
    def time_zone_names(self) -> typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]]:
        return None if self._time_zone_names_ is None else self._time_zone_names_.raw_array

    @time_zone_names.setter
    def time_zone_names(self, time_zone_names_: typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]]) -> None:
        if time_zone_names_ is None:
            self._time_zone_names_ = None
        else:
            self._time_zone_names_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_names()), time_zone_names_, is_auto=True)

    def is_time_zone_names_used(self) -> bool:
        return self.is_time_zone_names_set()

    def is_time_zone_names_set(self) -> bool:
        return not self._time_zone_names_ is None

    def reset_time_zone_names(self) -> None:
        self._time_zone_names_ = None

    @property
    def time_zone_abbreviations(self) -> typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]]:
        return None if self._time_zone_abbreviations_ is None else self._time_zone_abbreviations_.raw_array

    @time_zone_abbreviations.setter
    def time_zone_abbreviations(self, time_zone_abbreviations_: typing.Optional[typing.List[nds.rules.types.time_zone_name.TimeZoneName]]) -> None:
        if time_zone_abbreviations_ is None:
            self._time_zone_abbreviations_ = None
        else:
            self._time_zone_abbreviations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_abbreviations()), time_zone_abbreviations_, is_auto=True)

    def is_time_zone_abbreviations_used(self) -> bool:
        return self.is_time_zone_abbreviations_set()

    def is_time_zone_abbreviations_set(self) -> bool:
        return not self._time_zone_abbreviations_ is None

    def reset_time_zone_abbreviations(self) -> None:
        self._time_zone_abbreviations_ = None

    @property
    def day_light_saving_time(self) -> typing.Optional[nds.rules.types.day_light_saving_time.DayLightSavingTime]:
        return self._day_light_saving_time_

    @day_light_saving_time.setter
    def day_light_saving_time(self, day_light_saving_time_: typing.Optional[nds.rules.types.day_light_saving_time.DayLightSavingTime]) -> None:
        self._day_light_saving_time_ = day_light_saving_time_

    def is_day_light_saving_time_used(self) -> bool:
        return self.is_day_light_saving_time_set()

    def is_day_light_saving_time_set(self) -> bool:
        return not self._day_light_saving_time_ is None

    def reset_day_light_saving_time(self) -> None:
        self._day_light_saving_time_ = None

    def init_packing_context(self, zserio_context: TimeZoneConfiguration.ZserioPackingContext) -> None:
        self._valid_from_date_.init_packing_context(zserio_context.valid_from_date)
        zserio_context.utc_offset.init(zserio.array.SignedBitFieldArrayTraits(8), self._utc_offset_)
        if self.is_day_light_saving_time_used():
            self._day_light_saving_time_.init_packing_context(zserio_context.day_light_saving_time)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._valid_from_date_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_time_zone_names_used():
            end_bitposition += self._time_zone_names_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_time_zone_abbreviations_used():
            end_bitposition += self._time_zone_abbreviations_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_day_light_saving_time_used():
            end_bitposition += self._day_light_saving_time_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeZoneConfiguration.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._valid_from_date_.bitsizeof_packed(zserio_context.valid_from_date, end_bitposition)
        end_bitposition += zserio_context.utc_offset.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._utc_offset_)
        end_bitposition += 1
        if self.is_time_zone_names_used():
            end_bitposition += self._time_zone_names_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_time_zone_abbreviations_used():
            end_bitposition += self._time_zone_abbreviations_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_day_light_saving_time_used():
            end_bitposition += self._day_light_saving_time_.bitsizeof_packed(zserio_context.day_light_saving_time, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._valid_from_date_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_time_zone_names_used():
            end_bitposition = self._time_zone_names_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_time_zone_abbreviations_used():
            end_bitposition = self._time_zone_abbreviations_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_day_light_saving_time_used():
            end_bitposition = self._day_light_saving_time_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeZoneConfiguration.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._valid_from_date_.initialize_offsets_packed(zserio_context.valid_from_date, end_bitposition)
        end_bitposition += zserio_context.utc_offset.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._utc_offset_)
        end_bitposition += 1
        if self.is_time_zone_names_used():
            end_bitposition = self._time_zone_names_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_time_zone_abbreviations_used():
            end_bitposition = self._time_zone_abbreviations_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_day_light_saving_time_used():
            end_bitposition = self._day_light_saving_time_.initialize_offsets_packed(zserio_context.day_light_saving_time, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._valid_from_date_ = nds.core.conditions.day_of_year.DayOfYear.from_reader(zserio_reader)
        self._utc_offset_ = zserio_reader.read_signed_bits(8)
        if zserio_reader.read_bool():
            self._time_zone_names_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_names()), zserio_reader, is_auto=True)
        else:
            self._time_zone_names_ = None
        if zserio_reader.read_bool():
            self._time_zone_abbreviations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_abbreviations()), zserio_reader, is_auto=True)
        else:
            self._time_zone_abbreviations_ = None
        if zserio_reader.read_bool():
            self._day_light_saving_time_ = nds.rules.types.day_light_saving_time.DayLightSavingTime.from_reader(zserio_reader)
        else:
            self._day_light_saving_time_ = None

    def read_packed(self, zserio_context: TimeZoneConfiguration.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._valid_from_date_ = nds.core.conditions.day_of_year.DayOfYear.from_reader_packed(zserio_context.valid_from_date, zserio_reader)

        self._utc_offset_ = zserio_context.utc_offset.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)

        if zserio_reader.read_bool():
            self._time_zone_names_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_names()), zserio_reader, is_auto=True)
        else:
            self._time_zone_names_ = None

        if zserio_reader.read_bool():
            self._time_zone_abbreviations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_abbreviations()), zserio_reader, is_auto=True)
        else:
            self._time_zone_abbreviations_ = None

        if zserio_reader.read_bool():
            self._day_light_saving_time_ = nds.rules.types.day_light_saving_time.DayLightSavingTime.from_reader_packed(zserio_context.day_light_saving_time, zserio_reader)
        else:
            self._day_light_saving_time_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._valid_from_date_.write(zserio_writer)
        zserio_writer.write_signed_bits(self._utc_offset_, 8)
        if self.is_time_zone_names_used():
            zserio_writer.write_bool(True)
            self._time_zone_names_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_time_zone_abbreviations_used():
            zserio_writer.write_bool(True)
            self._time_zone_abbreviations_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_day_light_saving_time_used():
            zserio_writer.write_bool(True)
            self._day_light_saving_time_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: TimeZoneConfiguration.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._valid_from_date_.write_packed(zserio_context.valid_from_date, zserio_writer)

        zserio_context.utc_offset.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._utc_offset_)

        if self.is_time_zone_names_used():
            zserio_writer.write_bool(True)
            self._time_zone_names_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_time_zone_abbreviations_used():
            zserio_writer.write_bool(True)
            self._time_zone_abbreviations_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_day_light_saving_time_used():
            zserio_writer.write_bool(True)
            self._day_light_saving_time_.write_packed(zserio_context.day_light_saving_time, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._valid_from_date_ = nds.core.conditions.day_of_year.DayOfYear.ZserioPackingContext()
            self._utc_offset_ = zserio.array.DeltaContext()
            self._day_light_saving_time_ = nds.rules.types.day_light_saving_time.DayLightSavingTime.ZserioPackingContext()

        @property
        def valid_from_date(self):
            return self._valid_from_date_

        @property
        def utc_offset(self):
            return self._utc_offset_

        @property
        def day_light_saving_time(self):
            return self._day_light_saving_time_

    class _ZserioElementFactory_time_zone_names:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_name.TimeZoneName:
            del zserio_index
            return nds.rules.types.time_zone_name.TimeZoneName.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext:
            return nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_name.TimeZoneName:
            del zserio_index
            return nds.rules.types.time_zone_name.TimeZoneName.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_time_zone_abbreviations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_name.TimeZoneName:
            del zserio_index
            return nds.rules.types.time_zone_name.TimeZoneName.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext:
            return nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.types.time_zone_name.TimeZoneName.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_name.TimeZoneName:
            del zserio_index
            return nds.rules.types.time_zone_name.TimeZoneName.from_reader_packed(zserio_context, zserio_reader)
