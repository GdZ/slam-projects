# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.bounding_polygon3d
import nds.core.geometry.coord_shift
import nds.core.geometry.position3d

class TrafficLightFace:
    def __init__(
            self,
            has_lens_positions_: bool,
            face_: typing.Union[nds.core.geometry.bounding_polygon3d.BoundingPolygon3D, None] = None,
            lens_positions_: typing.List[nds.core.geometry.position3d.Position3D] = None) -> None:
        self._has_lens_positions_ = has_lens_positions_
        self._face_ = face_
        self._lens_positions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_positions()), lens_positions_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficLightFace'],
            zserio_reader: zserio.BitStreamReader,
            has_lens_positions_: bool) -> 'TrafficLightFace':
        self = object.__new__(cls)
        self._has_lens_positions_ = has_lens_positions_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficLightFace'],
            zserio_context: TrafficLightFace.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            has_lens_positions_: bool) -> 'TrafficLightFace':
        self = object.__new__(cls)
        self._has_lens_positions_ = has_lens_positions_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficLightFace):
            return (self._has_lens_positions_ == other._has_lens_positions_ and
                    (self._face_ == other._face_) and
                    (self._lens_positions_ == other._lens_positions_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_lens_positions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._face_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lens_positions_)

        return result

    @property
    def has_lens_positions(self) -> bool:
        return self._has_lens_positions_

    @property
    def face(self) -> typing.Union[nds.core.geometry.bounding_polygon3d.BoundingPolygon3D, None]:
        return self._face_

    @face.setter
    def face(self, face_: typing.Union[nds.core.geometry.bounding_polygon3d.BoundingPolygon3D, None]) -> None:
        self._face_ = face_

    @property
    def lens_positions(self) -> typing.List[nds.core.geometry.position3d.Position3D]:
        return self._lens_positions_.raw_array

    @lens_positions.setter
    def lens_positions(self, lens_positions_: typing.List[nds.core.geometry.position3d.Position3D]) -> None:
        self._lens_positions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_positions()), lens_positions_, is_auto=True)

    def init_packing_context(self, zserio_context: TrafficLightFace.ZserioPackingContext) -> None:
        self._face_.init_packing_context(zserio_context.face)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._face_.bitsizeof(end_bitposition)
        end_bitposition += self._lens_positions_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficLightFace.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._face_.bitsizeof_packed(zserio_context.face, end_bitposition)
        end_bitposition += self._lens_positions_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._face_.initialize_offsets(end_bitposition)
        end_bitposition = self._lens_positions_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficLightFace.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._face_.initialize_offsets_packed(zserio_context.face, end_bitposition)
        end_bitposition = self._lens_positions_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._face_ = nds.core.geometry.bounding_polygon3d.BoundingPolygon3D.from_reader(zserio_reader, 0, 0)
        self._lens_positions_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_positions()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: TrafficLightFace.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._face_ = nds.core.geometry.bounding_polygon3d.BoundingPolygon3D.from_reader_packed(zserio_context.face, zserio_reader, 0, 0)

        self._lens_positions_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_positions()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._face_.xy_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter xyShift for field TrafficLightFace.face: "
                                                f"{self._face_.xy_shift} != {0}!")
        if self._face_.z_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter zShift for field TrafficLightFace.face: "
                                                f"{self._face_.z_shift} != {0}!")
        self._face_.write(zserio_writer)

        self._lens_positions_.write(zserio_writer)

    def write_packed(self, zserio_context: TrafficLightFace.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._face_.xy_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter xyShift for field TrafficLightFace.face: "
                                                f"{self._face_.xy_shift} != {0}!")
        if self._face_.z_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter zShift for field TrafficLightFace.face: "
                                                f"{self._face_.z_shift} != {0}!")
        self._face_.write_packed(zserio_context.face, zserio_writer)

        self._lens_positions_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._face_ = nds.core.geometry.bounding_polygon3d.BoundingPolygon3D.ZserioPackingContext()

        @property
        def face(self):
            return self._face_

    class _ZserioElementFactory_lens_positions:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader(zserio_reader, 0, 0)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.position3d.Position3D.ZserioPackingContext:
            return nds.core.geometry.position3d.Position3D.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.geometry.position3d.Position3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader_packed(zserio_context, zserio_reader, 0, 0)
