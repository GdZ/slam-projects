# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TrafficZone(zserio.Enum):
    OTHER = 0
    ENVIRONMENT_ZONE = 1
    TOLL_ZONE = 2
    LIVING_STREET = 3
    SPEED_LIMIT_ZONE = 4
    SCHOOL_ZONE = 5
    LOW_EMISSION_ZONE = 6
    CONGESTION_ZONE = 7
    AUTONOMOUS_DRIVING_ZONE = 8
    NON_AUTONOMOUS_DRIVING_ZONE = 9
    RESIDENTIAL_AREA = 10
    GATED_AREA = 11
    CYCLIST_ROAD = 12
    RESTRICTED_PARKING_ZONE = 13
    NO_STOPPING_ZONE = 14
    NO_BOUNDARY_MARKINGS_ZONE = 15

    @classmethod
    def from_name(cls: typing.Type['TrafficZone'], item_name: str) -> 'TrafficZone':
        if item_name == 'OTHER':
            item = TrafficZone.OTHER
        elif item_name == 'ENVIRONMENT_ZONE':
            item = TrafficZone.ENVIRONMENT_ZONE
        elif item_name == 'TOLL_ZONE':
            item = TrafficZone.TOLL_ZONE
        elif item_name == 'LIVING_STREET':
            item = TrafficZone.LIVING_STREET
        elif item_name == 'SPEED_LIMIT_ZONE':
            item = TrafficZone.SPEED_LIMIT_ZONE
        elif item_name == 'SCHOOL_ZONE':
            item = TrafficZone.SCHOOL_ZONE
        elif item_name == 'LOW_EMISSION_ZONE':
            item = TrafficZone.LOW_EMISSION_ZONE
        elif item_name == 'CONGESTION_ZONE':
            item = TrafficZone.CONGESTION_ZONE
        elif item_name == 'AUTONOMOUS_DRIVING_ZONE':
            item = TrafficZone.AUTONOMOUS_DRIVING_ZONE
        elif item_name == 'NON_AUTONOMOUS_DRIVING_ZONE':
            item = TrafficZone.NON_AUTONOMOUS_DRIVING_ZONE
        elif item_name == 'RESIDENTIAL_AREA':
            item = TrafficZone.RESIDENTIAL_AREA
        elif item_name == 'GATED_AREA':
            item = TrafficZone.GATED_AREA
        elif item_name == 'CYCLIST_ROAD':
            item = TrafficZone.CYCLIST_ROAD
        elif item_name == 'RESTRICTED_PARKING_ZONE':
            item = TrafficZone.RESTRICTED_PARKING_ZONE
        elif item_name == 'NO_STOPPING_ZONE':
            item = TrafficZone.NO_STOPPING_ZONE
        elif item_name == 'NO_BOUNDARY_MARKINGS_ZONE':
            item = TrafficZone.NO_BOUNDARY_MARKINGS_ZONE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'TrafficZone'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['TrafficZone'], reader: zserio.BitStreamReader) -> 'TrafficZone':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['TrafficZone'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'TrafficZone':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
