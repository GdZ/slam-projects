# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.length_meters
import nds.core.types.traffic_enforcement_zone_type

class TrafficEnforcementZone:
    def __init__(
            self,
            traffic_enforcement_zone_type_: typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None] = None,
            zone_length_: nds.core.types.length_meters.LengthMeters = nds.core.types.length_meters.LengthMeters()) -> None:
        self._traffic_enforcement_zone_type_ = traffic_enforcement_zone_type_
        self._zone_length_ = zone_length_

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficEnforcementZone'],
            zserio_reader: zserio.BitStreamReader) -> 'TrafficEnforcementZone':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficEnforcementZone'],
            zserio_context: TrafficEnforcementZone.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrafficEnforcementZone':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficEnforcementZone):
            return ((self._traffic_enforcement_zone_type_ == other._traffic_enforcement_zone_type_) and
                    (self._zone_length_ == other._zone_length_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._traffic_enforcement_zone_type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._zone_length_)

        return result

    @property
    def traffic_enforcement_zone_type(self) -> typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None]:
        return self._traffic_enforcement_zone_type_

    @traffic_enforcement_zone_type.setter
    def traffic_enforcement_zone_type(self, traffic_enforcement_zone_type_: typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None]) -> None:
        self._traffic_enforcement_zone_type_ = traffic_enforcement_zone_type_

    @property
    def zone_length(self) -> nds.core.types.length_meters.LengthMeters:
        return self._zone_length_

    @zone_length.setter
    def zone_length(self, zone_length_: nds.core.types.length_meters.LengthMeters) -> None:
        self._zone_length_ = zone_length_

    def init_packing_context(self, zserio_context: TrafficEnforcementZone.ZserioPackingContext) -> None:
        self._traffic_enforcement_zone_type_.init_packing_context(zserio_context.traffic_enforcement_zone_type)
        zserio_context.zone_length.init(zserio.array.VarUInt32ArrayTraits(), self._zone_length_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._traffic_enforcement_zone_type_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._zone_length_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficEnforcementZone.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._traffic_enforcement_zone_type_.bitsizeof_packed(zserio_context.traffic_enforcement_zone_type, end_bitposition)
        end_bitposition += zserio_context.zone_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._zone_length_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._traffic_enforcement_zone_type_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._zone_length_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficEnforcementZone.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._traffic_enforcement_zone_type_.initialize_offsets_packed(zserio_context.traffic_enforcement_zone_type, end_bitposition)
        end_bitposition += zserio_context.zone_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._zone_length_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._traffic_enforcement_zone_type_ = nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType.from_reader(zserio_reader)
        self._zone_length_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: TrafficEnforcementZone.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._traffic_enforcement_zone_type_ = nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType.from_reader_packed(zserio_context.traffic_enforcement_zone_type, zserio_reader)

        self._zone_length_ = zserio_context.zone_length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._traffic_enforcement_zone_type_.write(zserio_writer)
        zserio_writer.write_varuint32(self._zone_length_)

    def write_packed(self, zserio_context: TrafficEnforcementZone.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._traffic_enforcement_zone_type_.write_packed(zserio_context.traffic_enforcement_zone_type, zserio_writer)

        zserio_context.zone_length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._zone_length_)

    class ZserioPackingContext:
        def __init__(self):
            self._traffic_enforcement_zone_type_ = zserio.array.DeltaContext()
            self._zone_length_ = zserio.array.DeltaContext()

        @property
        def traffic_enforcement_zone_type(self):
            return self._traffic_enforcement_zone_type_

        @property
        def zone_length(self):
            return self._zone_length_
