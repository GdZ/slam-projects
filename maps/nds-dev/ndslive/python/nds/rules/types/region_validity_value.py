# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.priority_road_class
import nds.rules.types.metric_road_width
import nds.rules.types.region_validity_type
import nds.rules.types.traffic_zone

class RegionValidityValue:
    def __init__(
            self,
            type_: nds.rules.types.region_validity_type.RegionValidityType,
            *,
            num_lanes_: typing.Union[int, None] = None,
            min_lanes_: typing.Union[int, None] = None,
            paved_: typing.Union[bool, None] = None,
            traffic_zone_: typing.Union[nds.rules.types.traffic_zone.TrafficZone, None] = None,
            priority_road_class_: typing.Union[nds.core.types.priority_road_class.PriorityRoadClass, None] = None,
            road_minimum_width_: typing.Union[nds.rules.types.metric_road_width.MetricRoadWidth, None] = None,
            road_maximum_width_: typing.Union[nds.rules.types.metric_road_width.MetricRoadWidth, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if num_lanes_ is not None:
            self._choice = num_lanes_
        if min_lanes_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = min_lanes_
        if paved_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = paved_
        if traffic_zone_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = traffic_zone_
        if priority_road_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = priority_road_class_
        if road_minimum_width_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = road_minimum_width_
        if road_maximum_width_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RegionValidityValue is ambiguous!")
            self._choice = road_maximum_width_

    @classmethod
    def from_reader(
            cls: typing.Type['RegionValidityValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.types.region_validity_type.RegionValidityType) -> 'RegionValidityValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RegionValidityValue'],
            zserio_context: RegionValidityValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.types.region_validity_type.RegionValidityType) -> 'RegionValidityValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RegionValidityValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            pass

        return result

    @property
    def type(self) -> nds.rules.types.region_validity_type.RegionValidityType:
        return self._type_

    @property
    def num_lanes(self) -> int:
        return self._choice

    @num_lanes.setter
    def num_lanes(self, num_lanes_: int) -> None:
        self._choice = num_lanes_

    @property
    def min_lanes(self) -> int:
        return self._choice

    @min_lanes.setter
    def min_lanes(self, min_lanes_: int) -> None:
        self._choice = min_lanes_

    @property
    def paved(self) -> bool:
        return self._choice

    @paved.setter
    def paved(self, paved_: bool) -> None:
        self._choice = paved_

    @property
    def traffic_zone(self) -> typing.Union[nds.rules.types.traffic_zone.TrafficZone, None]:
        return self._choice

    @traffic_zone.setter
    def traffic_zone(self, traffic_zone_: typing.Union[nds.rules.types.traffic_zone.TrafficZone, None]) -> None:
        self._choice = traffic_zone_

    @property
    def priority_road_class(self) -> nds.core.types.priority_road_class.PriorityRoadClass:
        return self._choice

    @priority_road_class.setter
    def priority_road_class(self, priority_road_class_: nds.core.types.priority_road_class.PriorityRoadClass) -> None:
        self._choice = priority_road_class_

    @property
    def road_minimum_width(self) -> nds.rules.types.metric_road_width.MetricRoadWidth:
        return self._choice

    @road_minimum_width.setter
    def road_minimum_width(self, road_minimum_width_: nds.rules.types.metric_road_width.MetricRoadWidth) -> None:
        self._choice = road_minimum_width_

    @property
    def road_maximum_width(self) -> nds.rules.types.metric_road_width.MetricRoadWidth:
        return self._choice

    @road_maximum_width.setter
    def road_maximum_width(self, road_maximum_width_: nds.rules.types.metric_road_width.MetricRoadWidth) -> None:
        self._choice = road_maximum_width_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            return self.CHOICE_NUM_LANES
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            return self.CHOICE_MIN_LANES
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            return self.CHOICE_PAVED
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            return self.CHOICE_TRAFFIC_ZONE
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            return self.CHOICE_PRIORITY_ROAD_CLASS
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            return self.CHOICE_ROAD_MINIMUM_WIDTH
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            return self.CHOICE_ROAD_MAXIMUM_WIDTH
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            return self.UNDEFINED_CHOICE
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RegionValidityValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            zserio_context.num_lanes.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            zserio_context.min_lanes.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            self._choice.init_packing_context(zserio_context.traffic_zone)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.init(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            zserio_context.road_minimum_width.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            zserio_context.road_maximum_width.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            end_bitposition += 1
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RegionValidityValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            end_bitposition += zserio_context.min_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            end_bitposition += 1
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_zone, end_bitposition)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            end_bitposition += zserio_context.road_minimum_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            end_bitposition += zserio_context.road_maximum_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            end_bitposition += 1
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RegionValidityValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            end_bitposition += zserio_context.min_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            end_bitposition += 1
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_zone, end_bitposition)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            end_bitposition += zserio_context.road_minimum_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            end_bitposition += zserio_context.road_maximum_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            self._choice = nds.rules.types.traffic_zone.TrafficZone.from_reader(zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_reader.read_bits(4)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

    def read_packed(self, zserio_context: RegionValidityValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            self._choice = zserio_context.num_lanes.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            self._choice = zserio_context.min_lanes.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            self._choice = nds.rules.types.traffic_zone.TrafficZone.from_reader_packed(zserio_context.traffic_zone, zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_context.priority_road_class.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            self._choice = zserio_context.road_minimum_width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            self._choice = zserio_context.road_maximum_width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            zserio_writer.write_bits(self._choice, 4)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

    def write_packed(self, zserio_context: RegionValidityValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.types.region_validity_type.RegionValidityType.NUM_LANES):
            zserio_context.num_lanes.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.MIN_LANES):
            zserio_context.min_lanes.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PAVED):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.TRAFFIC_ZONE):
            self._choice.write_packed(zserio_context.traffic_zone, zserio_writer)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.BEGINNER):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.NO_MARKINGS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MINIMUM_WIDTH):
            zserio_context.road_minimum_width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.ROAD_MAXIMUM_WIDTH):
            zserio_context.road_maximum_width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.rules.types.region_validity_type.RegionValidityType.IN_BUSINESS_DISTRICT):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RegionValidityValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._num_lanes_ = zserio.array.DeltaContext()
            self._min_lanes_ = zserio.array.DeltaContext()
            self._traffic_zone_ = zserio.array.DeltaContext()
            self._priority_road_class_ = zserio.array.DeltaContext()
            self._road_minimum_width_ = zserio.array.DeltaContext()
            self._road_maximum_width_ = zserio.array.DeltaContext()

        @property
        def num_lanes(self):
            return self._num_lanes_

        @property
        def min_lanes(self):
            return self._min_lanes_

        @property
        def traffic_zone(self):
            return self._traffic_zone_

        @property
        def priority_road_class(self):
            return self._priority_road_class_

        @property
        def road_minimum_width(self):
            return self._road_minimum_width_

        @property
        def road_maximum_width(self):
            return self._road_maximum_width_

    CHOICE_NUM_LANES = 0
    CHOICE_MIN_LANES = 1
    CHOICE_PAVED = 2
    CHOICE_TRAFFIC_ZONE = 3
    CHOICE_PRIORITY_ROAD_CLASS = 4
    CHOICE_ROAD_MINIMUM_WIDTH = 5
    CHOICE_ROAD_MAXIMUM_WIDTH = 6
    UNDEFINED_CHOICE = -1
