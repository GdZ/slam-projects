# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.traffic_light_phase_meaning

class TrafficLightPhase:
    def __init__(
            self,
            num_lenses_: int,
            active_lense_: typing.List[bool] = None,
            blinking_lense_: typing.List[bool] = None,
            meaning_: typing.Union[nds.rules.types.traffic_light_phase_meaning.TrafficLightPhaseMeaning, None] = None) -> None:
        self._num_lenses_ = num_lenses_
        self._active_lense_ = zserio.array.Array(zserio.array.BoolArrayTraits(), active_lense_)
        self._blinking_lense_ = zserio.array.Array(zserio.array.BoolArrayTraits(), blinking_lense_)
        self._meaning_ = meaning_

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficLightPhase'],
            zserio_reader: zserio.BitStreamReader,
            num_lenses_: int) -> 'TrafficLightPhase':
        self = object.__new__(cls)
        self._num_lenses_ = num_lenses_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficLightPhase'],
            zserio_context: TrafficLightPhase.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_lenses_: int) -> 'TrafficLightPhase':
        self = object.__new__(cls)
        self._num_lenses_ = num_lenses_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficLightPhase):
            return (self._num_lenses_ == other._num_lenses_ and
                    (self._active_lense_ == other._active_lense_) and
                    (self._blinking_lense_ == other._blinking_lense_) and
                    (self._meaning_ == other._meaning_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_lenses_)
        result = zserio.hashcode.calc_hashcode_object(result, self._active_lense_)
        result = zserio.hashcode.calc_hashcode_object(result, self._blinking_lense_)
        result = zserio.hashcode.calc_hashcode_object(result, self._meaning_)

        return result

    @property
    def num_lenses(self) -> int:
        return self._num_lenses_

    @property
    def active_lense(self) -> typing.List[bool]:
        return self._active_lense_.raw_array

    @active_lense.setter
    def active_lense(self, active_lense_: typing.List[bool]) -> None:
        self._active_lense_ = zserio.array.Array(zserio.array.BoolArrayTraits(), active_lense_)

    @property
    def blinking_lense(self) -> typing.List[bool]:
        return self._blinking_lense_.raw_array

    @blinking_lense.setter
    def blinking_lense(self, blinking_lense_: typing.List[bool]) -> None:
        self._blinking_lense_ = zserio.array.Array(zserio.array.BoolArrayTraits(), blinking_lense_)

    @property
    def meaning(self) -> typing.Union[nds.rules.types.traffic_light_phase_meaning.TrafficLightPhaseMeaning, None]:
        return self._meaning_

    @meaning.setter
    def meaning(self, meaning_: typing.Union[nds.rules.types.traffic_light_phase_meaning.TrafficLightPhaseMeaning, None]) -> None:
        self._meaning_ = meaning_

    def init_packing_context(self, zserio_context: TrafficLightPhase.ZserioPackingContext) -> None:
        self._meaning_.init_packing_context(zserio_context.meaning)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._active_lense_.bitsizeof(end_bitposition)
        end_bitposition += self._blinking_lense_.bitsizeof(end_bitposition)
        end_bitposition += self._meaning_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficLightPhase.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._active_lense_.bitsizeof(end_bitposition)
        end_bitposition += self._blinking_lense_.bitsizeof(end_bitposition)
        end_bitposition += self._meaning_.bitsizeof_packed(zserio_context.meaning, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._active_lense_.initialize_offsets(end_bitposition)
        end_bitposition = self._blinking_lense_.initialize_offsets(end_bitposition)
        end_bitposition = self._meaning_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficLightPhase.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._active_lense_.initialize_offsets(end_bitposition)
        end_bitposition = self._blinking_lense_.initialize_offsets(end_bitposition)
        end_bitposition = self._meaning_.initialize_offsets_packed(zserio_context.meaning, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._active_lense_ = zserio.array.Array.from_reader(zserio.array.BoolArrayTraits(), zserio_reader, self._num_lenses_)
        self._blinking_lense_ = zserio.array.Array.from_reader(zserio.array.BoolArrayTraits(), zserio_reader, self._num_lenses_)
        self._meaning_ = nds.rules.types.traffic_light_phase_meaning.TrafficLightPhaseMeaning.from_reader(zserio_reader)

    def read_packed(self, zserio_context: TrafficLightPhase.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._active_lense_ = zserio.array.Array.from_reader(zserio.array.BoolArrayTraits(), zserio_reader, self._num_lenses_)

        self._blinking_lense_ = zserio.array.Array.from_reader(zserio.array.BoolArrayTraits(), zserio_reader, self._num_lenses_)

        self._meaning_ = nds.rules.types.traffic_light_phase_meaning.TrafficLightPhaseMeaning.from_reader_packed(zserio_context.meaning, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check array length
        if len(self._active_lense_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightPhase.activeLense: "
                                                f"{len(self._active_lense_)} != {self._num_lenses_}!")
        self._active_lense_.write(zserio_writer)

        # check array length
        if len(self._blinking_lense_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightPhase.blinkingLense: "
                                                f"{len(self._blinking_lense_)} != {self._num_lenses_}!")
        self._blinking_lense_.write(zserio_writer)

        self._meaning_.write(zserio_writer)

    def write_packed(self, zserio_context: TrafficLightPhase.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check array length
        if len(self._active_lense_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightPhase.activeLense: "
                                                f"{len(self._active_lense_)} != {self._num_lenses_}!")
        self._active_lense_.write(zserio_writer)

        # check array length
        if len(self._blinking_lense_) != (self._num_lenses_):
            raise zserio.PythonRuntimeException("Wrong array length for field TrafficLightPhase.blinkingLense: "
                                                f"{len(self._blinking_lense_)} != {self._num_lenses_}!")
        self._blinking_lense_.write(zserio_writer)

        self._meaning_.write_packed(zserio_context.meaning, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._meaning_ = zserio.array.DeltaContext()

        @property
        def meaning(self):
            return self._meaning_
