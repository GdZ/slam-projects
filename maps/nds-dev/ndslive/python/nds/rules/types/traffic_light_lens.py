# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.traffic_light_lens_details
import nds.rules.types.traffic_light_lens_group
import nds.rules.types.traffic_light_lens_type

class TrafficLightLens:
    def __init__(
            self,
            grouped_lens_: bool = bool(),
            group_: typing.Optional[nds.rules.types.traffic_light_lens_group.TrafficLightLensGroup] = None,
            lens_type_: typing.Union[nds.rules.types.traffic_light_lens_type.TrafficLightLensType, None] = None,
            lens_details_: typing.Optional[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails] = None,
            lens_detail_list_: typing.Optional[typing.List[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails]] = None) -> None:
        self._grouped_lens_ = grouped_lens_
        self._group_ = group_
        self._lens_type_ = lens_type_
        self._lens_details_ = lens_details_
        if lens_detail_list_ is None:
            self._lens_detail_list_ = None
        else:
            self._lens_detail_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_detail_list()), lens_detail_list_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficLightLens'],
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightLens':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficLightLens'],
            zserio_context: TrafficLightLens.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrafficLightLens':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficLightLens):
            return ((self._grouped_lens_ == other._grouped_lens_) and
                    (not other.is_group_used() if not self.is_group_used() else (self._group_ == other._group_)) and
                    (self._lens_type_ == other._lens_type_) and
                    (not other.is_lens_details_used() if not self.is_lens_details_used() else (self._lens_details_ == other._lens_details_)) and
                    (not other.is_lens_detail_list_used() if not self.is_lens_detail_list_used() else (self._lens_detail_list_ == other._lens_detail_list_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._grouped_lens_)
        if self.is_group_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._group_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lens_type_)
        if self.is_lens_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lens_details_)
        if self.is_lens_detail_list_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lens_detail_list_)

        return result

    @property
    def grouped_lens(self) -> bool:
        return self._grouped_lens_

    @grouped_lens.setter
    def grouped_lens(self, grouped_lens_: bool) -> None:
        self._grouped_lens_ = grouped_lens_

    @property
    def group(self) -> typing.Optional[nds.rules.types.traffic_light_lens_group.TrafficLightLensGroup]:
        return self._group_

    @group.setter
    def group(self, group_: typing.Optional[nds.rules.types.traffic_light_lens_group.TrafficLightLensGroup]) -> None:
        self._group_ = group_

    def is_group_used(self) -> bool:
        return self._grouped_lens_

    def is_group_set(self) -> bool:
        return not self._group_ is None

    def reset_group(self) -> None:
        self._group_ = None

    @property
    def lens_type(self) -> typing.Union[nds.rules.types.traffic_light_lens_type.TrafficLightLensType, None]:
        return self._lens_type_

    @lens_type.setter
    def lens_type(self, lens_type_: typing.Union[nds.rules.types.traffic_light_lens_type.TrafficLightLensType, None]) -> None:
        self._lens_type_ = lens_type_

    @property
    def lens_details(self) -> typing.Optional[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails]:
        return self._lens_details_

    @lens_details.setter
    def lens_details(self, lens_details_: typing.Optional[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails]) -> None:
        self._lens_details_ = lens_details_

    def is_lens_details_used(self) -> bool:
        return self._lens_type_ != nds.rules.types.traffic_light_lens_type.TrafficLightLensType.MIXED

    def is_lens_details_set(self) -> bool:
        return not self._lens_details_ is None

    def reset_lens_details(self) -> None:
        self._lens_details_ = None

    @property
    def lens_detail_list(self) -> typing.Optional[typing.List[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails]]:
        return None if self._lens_detail_list_ is None else self._lens_detail_list_.raw_array

    @lens_detail_list.setter
    def lens_detail_list(self, lens_detail_list_: typing.Optional[typing.List[nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails]]) -> None:
        if lens_detail_list_ is None:
            self._lens_detail_list_ = None
        else:
            self._lens_detail_list_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_detail_list()), lens_detail_list_, is_auto=True)

    def is_lens_detail_list_used(self) -> bool:
        return self._lens_type_ == nds.rules.types.traffic_light_lens_type.TrafficLightLensType.MIXED

    def is_lens_detail_list_set(self) -> bool:
        return not self._lens_detail_list_ is None

    def reset_lens_detail_list(self) -> None:
        self._lens_detail_list_ = None

    def init_packing_context(self, zserio_context: TrafficLightLens.ZserioPackingContext) -> None:
        if self.is_group_used():
            zserio_context.group.init(zserio.array.BitFieldArrayTraits(4), self._group_)
        self._lens_type_.init_packing_context(zserio_context.lens_type)
        if self.is_lens_details_used():
            self._lens_details_.init_packing_context(zserio_context.lens_details)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_group_used():
            end_bitposition += 4
        end_bitposition += self._lens_type_.bitsizeof(end_bitposition)
        if self.is_lens_details_used():
            end_bitposition += self._lens_details_.bitsizeof(end_bitposition)
        if self.is_lens_detail_list_used():
            end_bitposition += self._lens_detail_list_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficLightLens.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_group_used():
            end_bitposition += zserio_context.group.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._group_)
        end_bitposition += self._lens_type_.bitsizeof_packed(zserio_context.lens_type, end_bitposition)
        if self.is_lens_details_used():
            end_bitposition += self._lens_details_.bitsizeof_packed(zserio_context.lens_details, end_bitposition)
        if self.is_lens_detail_list_used():
            end_bitposition += self._lens_detail_list_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_group_used():
            end_bitposition += 4
        end_bitposition = self._lens_type_.initialize_offsets(end_bitposition)
        if self.is_lens_details_used():
            end_bitposition = self._lens_details_.initialize_offsets(end_bitposition)
        if self.is_lens_detail_list_used():
            end_bitposition = self._lens_detail_list_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficLightLens.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_group_used():
            end_bitposition += zserio_context.group.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._group_)
        end_bitposition = self._lens_type_.initialize_offsets_packed(zserio_context.lens_type, end_bitposition)
        if self.is_lens_details_used():
            end_bitposition = self._lens_details_.initialize_offsets_packed(zserio_context.lens_details, end_bitposition)
        if self.is_lens_detail_list_used():
            end_bitposition = self._lens_detail_list_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._grouped_lens_ = zserio_reader.read_bool()
        if self.is_group_used():
            self._group_ = zserio_reader.read_bits(4)
        else:
            self._group_ = None
        self._lens_type_ = nds.rules.types.traffic_light_lens_type.TrafficLightLensType.from_reader(zserio_reader)
        if self.is_lens_details_used():
            self._lens_details_ = nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.from_reader(zserio_reader)
        else:
            self._lens_details_ = None
        if self.is_lens_detail_list_used():
            self._lens_detail_list_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_detail_list()), zserio_reader, is_auto=True)
        else:
            self._lens_detail_list_ = None

    def read_packed(self, zserio_context: TrafficLightLens.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._grouped_lens_ = zserio_reader.read_bool()

        if self.is_group_used():
            self._group_ = zserio_context.group.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)
        else:
            self._group_ = None

        self._lens_type_ = nds.rules.types.traffic_light_lens_type.TrafficLightLensType.from_reader_packed(zserio_context.lens_type, zserio_reader)

        if self.is_lens_details_used():
            self._lens_details_ = nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.from_reader_packed(zserio_context.lens_details, zserio_reader)
        else:
            self._lens_details_ = None

        if self.is_lens_detail_list_used():
            self._lens_detail_list_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lens_detail_list()), zserio_reader, is_auto=True)
        else:
            self._lens_detail_list_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._grouped_lens_)
        if self.is_group_used():
            zserio_writer.write_bits(self._group_, 4)
        self._lens_type_.write(zserio_writer)
        if self.is_lens_details_used():
            self._lens_details_.write(zserio_writer)
        if self.is_lens_detail_list_used():
            self._lens_detail_list_.write(zserio_writer)

    def write_packed(self, zserio_context: TrafficLightLens.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._grouped_lens_)

        if self.is_group_used():
            zserio_context.group.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._group_)

        self._lens_type_.write_packed(zserio_context.lens_type, zserio_writer)

        if self.is_lens_details_used():
            self._lens_details_.write_packed(zserio_context.lens_details, zserio_writer)

        if self.is_lens_detail_list_used():
            self._lens_detail_list_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._group_ = zserio.array.DeltaContext()
            self._lens_type_ = zserio.array.DeltaContext()
            self._lens_details_ = nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.ZserioPackingContext()

        @property
        def group(self):
            return self._group_

        @property
        def lens_type(self):
            return self._lens_type_

        @property
        def lens_details(self):
            return self._lens_details_

    class _ZserioElementFactory_lens_detail_list:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails:
            del zserio_index
            return nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.ZserioPackingContext:
            return nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails:
            del zserio_index
            return nds.rules.types.traffic_light_lens_details.TrafficLightLensDetails.from_reader_packed(zserio_context, zserio_reader)
