# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class DrivingRulesContent:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['DrivingRulesContent'], value: int) -> 'DrivingRulesContent':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'DrivingRulesContent' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['DrivingRulesContent'], reader: zserio.BitStreamReader) -> 'DrivingRulesContent':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['DrivingRulesContent'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'DrivingRulesContent':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DrivingRulesContent):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & DrivingRulesContent.Values.STAY_CURBSIDE) == DrivingRulesContent.Values.STAY_CURBSIDE:
            result += "STAY_CURBSIDE" if not result else " | STAY_CURBSIDE"
        if (self & DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR) == DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR:
            result += "TEMPORARY_LANE_MARKING_COLOR" if not result else " | TEMPORARY_LANE_MARKING_COLOR"
        if (self & DrivingRulesContent.Values.CURBSIDE_PASSING) == DrivingRulesContent.Values.CURBSIDE_PASSING:
            result += "CURBSIDE_PASSING" if not result else " | CURBSIDE_PASSING"
        if (self & DrivingRulesContent.Values.EMERGENCY_RULES) == DrivingRulesContent.Values.EMERGENCY_RULES:
            result += "EMERGENCY_RULES" if not result else " | EMERGENCY_RULES"
        if (self & DrivingRulesContent.Values.YIELD_RULES) == DrivingRulesContent.Values.YIELD_RULES:
            result += "YIELD_RULES" if not result else " | YIELD_RULES"
        if (self & DrivingRulesContent.Values.SOLID_LINE_RULES) == DrivingRulesContent.Values.SOLID_LINE_RULES:
            result += "SOLID_LINE_RULES" if not result else " | SOLID_LINE_RULES"
        if (self & DrivingRulesContent.Values.ROADSIDE_PARKING_RULES) == DrivingRulesContent.Values.ROADSIDE_PARKING_RULES:
            result += "ROADSIDE_PARKING_RULES" if not result else " | ROADSIDE_PARKING_RULES"
        if (self & DrivingRulesContent.Values.LANE_MERGE_RULES) == DrivingRulesContent.Values.LANE_MERGE_RULES:
            result += "LANE_MERGE_RULES" if not result else " | LANE_MERGE_RULES"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'DrivingRulesContent') -> 'DrivingRulesContent':
        return DrivingRulesContent.from_value(self._value | other._value)

    def __and__(self, other: 'DrivingRulesContent') -> 'DrivingRulesContent':
        return DrivingRulesContent.from_value(self._value & other._value)

    def __xor__(self, other: 'DrivingRulesContent') -> 'DrivingRulesContent':
        return DrivingRulesContent.from_value(self._value ^ other._value)

    def __invert__(self) -> 'DrivingRulesContent':
        return DrivingRulesContent.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        STAY_CURBSIDE: 'DrivingRulesContent' = None
        TEMPORARY_LANE_MARKING_COLOR: 'DrivingRulesContent' = None
        CURBSIDE_PASSING: 'DrivingRulesContent' = None
        EMERGENCY_RULES: 'DrivingRulesContent' = None
        YIELD_RULES: 'DrivingRulesContent' = None
        SOLID_LINE_RULES: 'DrivingRulesContent' = None
        ROADSIDE_PARKING_RULES: 'DrivingRulesContent' = None
        LANE_MERGE_RULES: 'DrivingRulesContent' = None

DrivingRulesContent.Values.STAY_CURBSIDE = DrivingRulesContent.from_value(1)
DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR = DrivingRulesContent.from_value(2)
DrivingRulesContent.Values.CURBSIDE_PASSING = DrivingRulesContent.from_value(4)
DrivingRulesContent.Values.EMERGENCY_RULES = DrivingRulesContent.from_value(8)
DrivingRulesContent.Values.YIELD_RULES = DrivingRulesContent.from_value(16)
DrivingRulesContent.Values.SOLID_LINE_RULES = DrivingRulesContent.from_value(32)
DrivingRulesContent.Values.ROADSIDE_PARKING_RULES = DrivingRulesContent.from_value(64)
DrivingRulesContent.Values.LANE_MERGE_RULES = DrivingRulesContent.from_value(128)
