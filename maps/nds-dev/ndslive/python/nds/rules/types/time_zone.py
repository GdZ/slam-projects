# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.types.time_zone_configuration

class TimeZone:
    def __init__(
            self,
            olson_id_: typing.Optional[str] = None,
            time_zone_configurations_: typing.List[nds.rules.types.time_zone_configuration.TimeZoneConfiguration] = None) -> None:
        self._olson_id_ = olson_id_
        self._time_zone_configurations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_configurations()), time_zone_configurations_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TimeZone'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeZone':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeZone'],
            zserio_context: TimeZone.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeZone':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeZone):
            return ((not other.is_olson_id_used() if not self.is_olson_id_used() else (self._olson_id_ == other._olson_id_)) and
                    (self._time_zone_configurations_ == other._time_zone_configurations_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        if self.is_olson_id_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._olson_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._time_zone_configurations_)

        return result

    @property
    def olson_id(self) -> typing.Optional[str]:
        return self._olson_id_

    @olson_id.setter
    def olson_id(self, olson_id_: typing.Optional[str]) -> None:
        self._olson_id_ = olson_id_

    def is_olson_id_used(self) -> bool:
        return self.is_olson_id_set()

    def is_olson_id_set(self) -> bool:
        return not self._olson_id_ is None

    def reset_olson_id(self) -> None:
        self._olson_id_ = None

    @property
    def time_zone_configurations(self) -> typing.List[nds.rules.types.time_zone_configuration.TimeZoneConfiguration]:
        return self._time_zone_configurations_.raw_array

    @time_zone_configurations.setter
    def time_zone_configurations(self, time_zone_configurations_: typing.List[nds.rules.types.time_zone_configuration.TimeZoneConfiguration]) -> None:
        self._time_zone_configurations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_configurations()), time_zone_configurations_, is_auto=True)

    def init_packing_context(self, zserio_context: TimeZone.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_olson_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._olson_id_)
        end_bitposition += self._time_zone_configurations_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeZone.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_olson_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._olson_id_)
        end_bitposition += self._time_zone_configurations_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_olson_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._olson_id_)
        end_bitposition = self._time_zone_configurations_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeZone.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_olson_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._olson_id_)
        end_bitposition = self._time_zone_configurations_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._olson_id_ = zserio_reader.read_string()
        else:
            self._olson_id_ = None

        self._time_zone_configurations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_configurations()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._time_zone_configurations_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeZone.timeZoneConfigurations!")

    def read_packed(self, zserio_context: TimeZone.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        if zserio_reader.read_bool():
            self._olson_id_ = zserio_reader.read_string()
        else:
            self._olson_id_ = None

        self._time_zone_configurations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_time_zone_configurations()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._time_zone_configurations_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeZone.timeZoneConfigurations!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_olson_id_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._olson_id_)
        else:
            zserio_writer.write_bool(False)

        # check constraint
        if not (len(self._time_zone_configurations_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeZone.timeZoneConfigurations!")
        self._time_zone_configurations_.write(zserio_writer)

    def write_packed(self, zserio_context: TimeZone.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        if self.is_olson_id_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._olson_id_)
        else:
            zserio_writer.write_bool(False)

        # check constraint
        if not (len(self._time_zone_configurations_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeZone.timeZoneConfigurations!")
        self._time_zone_configurations_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_time_zone_configurations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_configuration.TimeZoneConfiguration:
            del zserio_index
            return nds.rules.types.time_zone_configuration.TimeZoneConfiguration.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.types.time_zone_configuration.TimeZoneConfiguration.ZserioPackingContext:
            return nds.rules.types.time_zone_configuration.TimeZoneConfiguration.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.types.time_zone_configuration.TimeZoneConfiguration.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.types.time_zone_configuration.TimeZoneConfiguration:
            del zserio_index
            return nds.rules.types.time_zone_configuration.TimeZoneConfiguration.from_reader_packed(zserio_context, zserio_reader)
