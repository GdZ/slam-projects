# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.language_code

class TimeZoneName:
    def __init__(
            self,
            language_code_: nds.core.types.language_code.LanguageCode = nds.core.types.language_code.LanguageCode(),
            name_string_: str = str()) -> None:
        self._language_code_ = language_code_
        self._name_string_ = name_string_

    @classmethod
    def from_reader(
            cls: typing.Type['TimeZoneName'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeZoneName':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeZoneName'],
            zserio_context: TimeZoneName.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeZoneName':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeZoneName):
            return ((self._language_code_ == other._language_code_) and
                    (self._name_string_ == other._name_string_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._language_code_)
        result = zserio.hashcode.calc_hashcode_string(result, self._name_string_)

        return result

    @property
    def language_code(self) -> nds.core.types.language_code.LanguageCode:
        return self._language_code_

    @language_code.setter
    def language_code(self, language_code_: nds.core.types.language_code.LanguageCode) -> None:
        self._language_code_ = language_code_

    @property
    def name_string(self) -> str:
        return self._name_string_

    @name_string.setter
    def name_string(self, name_string_: str) -> None:
        self._name_string_ = name_string_

    def init_packing_context(self, zserio_context: TimeZoneName.ZserioPackingContext) -> None:
        zserio_context.language_code.init(zserio.array.VarUInt16ArrayTraits(), self._language_code_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_code_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_string_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeZoneName.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_code_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_string_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_code_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_string_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeZoneName.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_code_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_string_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._language_code_ = zserio_reader.read_varuint16()
        self._name_string_ = zserio_reader.read_string()

    def read_packed(self, zserio_context: TimeZoneName.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._language_code_ = zserio_context.language_code.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._name_string_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._language_code_)
        zserio_writer.write_string(self._name_string_)

    def write_packed(self, zserio_context: TimeZoneName.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.language_code.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._language_code_)

        zserio_writer.write_string(self._name_string_)

    class ZserioPackingContext:
        def __init__(self):
            self._language_code_ = zserio.array.DeltaContext()

        @property
        def language_code(self):
            return self._language_code_
