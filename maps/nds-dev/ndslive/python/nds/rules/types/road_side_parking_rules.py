# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RoadSideParkingRules:
    def __init__(
            self,
            both_sides_of_one_way_: bool = bool(),
            opposite_direction_: bool = bool()) -> None:
        self._both_sides_of_one_way_ = both_sides_of_one_way_
        self._opposite_direction_ = opposite_direction_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadSideParkingRules'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadSideParkingRules':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadSideParkingRules):
            return ((self._both_sides_of_one_way_ == other._both_sides_of_one_way_) and
                    (self._opposite_direction_ == other._opposite_direction_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._both_sides_of_one_way_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._opposite_direction_)

        return result

    @property
    def both_sides_of_one_way(self) -> bool:
        return self._both_sides_of_one_way_

    @both_sides_of_one_way.setter
    def both_sides_of_one_way(self, both_sides_of_one_way_: bool) -> None:
        self._both_sides_of_one_way_ = both_sides_of_one_way_

    @property
    def opposite_direction(self) -> bool:
        return self._opposite_direction_

    @opposite_direction.setter
    def opposite_direction(self, opposite_direction_: bool) -> None:
        self._opposite_direction_ = opposite_direction_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._both_sides_of_one_way_ = zserio_reader.read_bool()
        self._opposite_direction_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._both_sides_of_one_way_)
        zserio_writer.write_bool(self._opposite_direction_)
