# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.types.region_id
import nds.rules.instantiations.rules_region_attribute_map_list
import nds.rules.instantiations.rules_region_attribute_set_list
import nds.rules.layer.region_lane_group_relation_list
import nds.rules.metadata.region_rules_layer_content
import nds.system.types.layer_type

class RegionRulesLayerLanes:
    def __init__(
            self,
            num_regions_: int = int(),
            region_id_: typing.List[nds.core.types.region_id.RegionId] = None,
            content_: typing.Union[nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent, None] = None,
            region_rules_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList] = None,
            region_rules_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList] = None,
            has_feature_relations_: typing.Optional[bool] = None,
            feature_relations_: typing.Optional[typing.List[nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList]] = None) -> None:
        self._num_regions_ = num_regions_
        self._region_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), region_id_)
        self._content_ = content_
        self._region_rules_attribute_maps_ = region_rules_attribute_maps_
        self._region_rules_attribute_sets_ = region_rules_attribute_sets_
        self._has_feature_relations_ = has_feature_relations_
        if feature_relations_ is None:
            self._feature_relations_ = None
        else:
            self._feature_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_feature_relations()), feature_relations_)

    @classmethod
    def from_reader(
            cls: typing.Type['RegionRulesLayerLanes'],
            zserio_reader: zserio.BitStreamReader) -> 'RegionRulesLayerLanes':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RegionRulesLayerLanes'],
            zserio_context: RegionRulesLayerLanes.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RegionRulesLayerLanes':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RegionRulesLayerLanes):
            return ((self._num_regions_ == other._num_regions_) and
                    (self._region_id_ == other._region_id_) and
                    (self._content_ == other._content_) and
                    (not other.is_region_rules_attribute_maps_used() if not self.is_region_rules_attribute_maps_used() else (self._region_rules_attribute_maps_ == other._region_rules_attribute_maps_)) and
                    (not other.is_region_rules_attribute_sets_used() if not self.is_region_rules_attribute_sets_used() else (self._region_rules_attribute_sets_ == other._region_rules_attribute_sets_)) and
                    (not other.is_has_feature_relations_used() if not self.is_has_feature_relations_used() else (self._has_feature_relations_ == other._has_feature_relations_)) and
                    (not other.is_feature_relations_used() if not self.is_feature_relations_used() else (self._feature_relations_ == other._feature_relations_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_regions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._region_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_region_rules_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._region_rules_attribute_maps_)
        if self.is_region_rules_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._region_rules_attribute_sets_)
        if self.is_has_feature_relations_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._has_feature_relations_)
        if self.is_feature_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._feature_relations_)

        return result

    @property
    def num_regions(self) -> int:
        return self._num_regions_

    @num_regions.setter
    def num_regions(self, num_regions_: int) -> None:
        self._num_regions_ = num_regions_

    @property
    def region_id(self) -> typing.List[nds.core.types.region_id.RegionId]:
        return self._region_id_.raw_array

    @region_id.setter
    def region_id(self, region_id_: typing.List[nds.core.types.region_id.RegionId]) -> None:
        self._region_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), region_id_)

    @property
    def content(self) -> typing.Union[nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def region_rules_attribute_maps(self) -> typing.Optional[nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList]:
        return self._region_rules_attribute_maps_

    @region_rules_attribute_maps.setter
    def region_rules_attribute_maps(self, region_rules_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList]) -> None:
        self._region_rules_attribute_maps_ = region_rules_attribute_maps_

    def is_region_rules_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.Values.REGION_MAPS) == nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.Values.REGION_MAPS

    def is_region_rules_attribute_maps_set(self) -> bool:
        return not self._region_rules_attribute_maps_ is None

    def reset_region_rules_attribute_maps(self) -> None:
        self._region_rules_attribute_maps_ = None

    @property
    def region_rules_attribute_sets(self) -> typing.Optional[nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList]:
        return self._region_rules_attribute_sets_

    @region_rules_attribute_sets.setter
    def region_rules_attribute_sets(self, region_rules_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList]) -> None:
        self._region_rules_attribute_sets_ = region_rules_attribute_sets_

    def is_region_rules_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.Values.REGION_SETS) == nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.Values.REGION_SETS

    def is_region_rules_attribute_sets_set(self) -> bool:
        return not self._region_rules_attribute_sets_ is None

    def reset_region_rules_attribute_sets(self) -> None:
        self._region_rules_attribute_sets_ = None

    @property
    def has_feature_relations(self) -> typing.Optional[bool]:
        return self._has_feature_relations_

    @has_feature_relations.setter
    def has_feature_relations(self, has_feature_relations_: typing.Optional[bool]) -> None:
        self._has_feature_relations_ = has_feature_relations_

    def is_has_feature_relations_used(self) -> bool:
        return self._num_regions_ > 1

    def is_has_feature_relations_set(self) -> bool:
        return not self._has_feature_relations_ is None

    def reset_has_feature_relations(self) -> None:
        self._has_feature_relations_ = None

    @property
    def feature_relations(self) -> typing.Optional[typing.List[nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList]]:
        return None if self._feature_relations_ is None else self._feature_relations_.raw_array

    @feature_relations.setter
    def feature_relations(self, feature_relations_: typing.Optional[typing.List[nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList]]) -> None:
        if feature_relations_ is None:
            self._feature_relations_ = None
        else:
            self._feature_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_feature_relations()), feature_relations_)

    def is_feature_relations_used(self) -> bool:
        return self._num_regions_ > 1 and self._has_feature_relations_

    def is_feature_relations_set(self) -> bool:
        return not self._feature_relations_ is None

    def reset_feature_relations(self) -> None:
        self._feature_relations_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.ATTRIBUTE

    def init_packing_context(self, zserio_context: RegionRulesLayerLanes.ZserioPackingContext) -> None:
        zserio_context.num_regions.init(zserio.array.VarUInt16ArrayTraits(), self._num_regions_)
        self._content_.init_packing_context(zserio_context.content)
        if self.is_region_rules_attribute_maps_used():
            self._region_rules_attribute_maps_.init_packing_context(zserio_context.region_rules_attribute_maps)
        if self.is_region_rules_attribute_sets_used():
            self._region_rules_attribute_sets_.init_packing_context(zserio_context.region_rules_attribute_sets)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_regions_)
        end_bitposition += self._region_id_.bitsizeof(end_bitposition)
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_region_rules_attribute_maps_used():
            end_bitposition += self._region_rules_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_region_rules_attribute_sets_used():
            end_bitposition += self._region_rules_attribute_sets_.bitsizeof(end_bitposition)
        if self.is_has_feature_relations_used():
            end_bitposition += 1
        if self.is_feature_relations_used():
            end_bitposition += self._feature_relations_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RegionRulesLayerLanes.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_regions.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_regions_)
        end_bitposition += self._region_id_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_region_rules_attribute_maps_used():
            end_bitposition += self._region_rules_attribute_maps_.bitsizeof_packed(zserio_context.region_rules_attribute_maps, end_bitposition)
        if self.is_region_rules_attribute_sets_used():
            end_bitposition += self._region_rules_attribute_sets_.bitsizeof_packed(zserio_context.region_rules_attribute_sets, end_bitposition)
        if self.is_has_feature_relations_used():
            end_bitposition += 1
        if self.is_feature_relations_used():
            end_bitposition += self._feature_relations_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_regions_)
        end_bitposition = self._region_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_region_rules_attribute_maps_used():
            end_bitposition = self._region_rules_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_region_rules_attribute_sets_used():
            end_bitposition = self._region_rules_attribute_sets_.initialize_offsets(end_bitposition)
        if self.is_has_feature_relations_used():
            end_bitposition += 1
        if self.is_feature_relations_used():
            end_bitposition = self._feature_relations_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RegionRulesLayerLanes.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_regions.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_regions_)
        end_bitposition = self._region_id_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_region_rules_attribute_maps_used():
            end_bitposition = self._region_rules_attribute_maps_.initialize_offsets_packed(zserio_context.region_rules_attribute_maps, end_bitposition)
        if self.is_region_rules_attribute_sets_used():
            end_bitposition = self._region_rules_attribute_sets_.initialize_offsets_packed(zserio_context.region_rules_attribute_sets, end_bitposition)
        if self.is_has_feature_relations_used():
            end_bitposition += 1
        if self.is_feature_relations_used():
            end_bitposition = self._feature_relations_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_regions_ = zserio_reader.read_varuint16()
        # check constraint
        if not (self._num_regions_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field RegionRulesLayerLanes.numRegions!")

        self._region_id_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_regions_)

        self._content_ = nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.from_reader(zserio_reader)

        if self.is_region_rules_attribute_maps_used():
            self._region_rules_attribute_maps_ = nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._region_rules_attribute_maps_ = None

        if self.is_region_rules_attribute_sets_used():
            self._region_rules_attribute_sets_ = nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._region_rules_attribute_sets_ = None

        if self.is_has_feature_relations_used():
            self._has_feature_relations_ = zserio_reader.read_bool()
        else:
            self._has_feature_relations_ = None

        if self.is_feature_relations_used():
            self._feature_relations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_feature_relations()), zserio_reader, self._num_regions_)
        else:
            self._feature_relations_ = None

    def read_packed(self, zserio_context: RegionRulesLayerLanes.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_regions_ = zserio_context.num_regions.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        # check constraint
        if not (self._num_regions_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field RegionRulesLayerLanes.numRegions!")

        self._region_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_regions_)

        self._content_ = nds.rules.metadata.region_rules_layer_content.RegionRulesLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_region_rules_attribute_maps_used():
            self._region_rules_attribute_maps_ = nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList.from_reader_packed(zserio_context.region_rules_attribute_maps, zserio_reader, 0)
        else:
            self._region_rules_attribute_maps_ = None

        if self.is_region_rules_attribute_sets_used():
            self._region_rules_attribute_sets_ = nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList.from_reader_packed(zserio_context.region_rules_attribute_sets, zserio_reader, 0)
        else:
            self._region_rules_attribute_sets_ = None

        if self.is_has_feature_relations_used():
            self._has_feature_relations_ = zserio_reader.read_bool()
        else:
            self._has_feature_relations_ = None

        if self.is_feature_relations_used():
            self._feature_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_feature_relations()), zserio_reader, self._num_regions_)
        else:
            self._feature_relations_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._num_regions_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field RegionRulesLayerLanes.numRegions!")
        zserio_writer.write_varuint16(self._num_regions_)

        # check array length
        if len(self._region_id_) != (self._num_regions_):
            raise zserio.PythonRuntimeException("Wrong array length for field RegionRulesLayerLanes.regionId: "
                                                f"{len(self._region_id_)} != {self._num_regions_}!")
        self._region_id_.write(zserio_writer)

        self._content_.write(zserio_writer)

        if self.is_region_rules_attribute_maps_used():
            # check parameters
            if self._region_rules_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeMaps: "
                                                    f"{self._region_rules_attribute_maps_.coord_shift} != {0}!")
            self._region_rules_attribute_maps_.write(zserio_writer)

        if self.is_region_rules_attribute_sets_used():
            # check parameters
            if self._region_rules_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeSets: "
                                                    f"{self._region_rules_attribute_sets_.coord_shift} != {0}!")
            self._region_rules_attribute_sets_.write(zserio_writer)

        if self.is_has_feature_relations_used():
            zserio_writer.write_bool(self._has_feature_relations_)

        if self.is_feature_relations_used():
            # check array length
            if len(self._feature_relations_) != (self._num_regions_):
                raise zserio.PythonRuntimeException("Wrong array length for field RegionRulesLayerLanes.featureRelations: "
                                                    f"{len(self._feature_relations_)} != {self._num_regions_}!")
            self._feature_relations_.write(zserio_writer)

    def write_packed(self, zserio_context: RegionRulesLayerLanes.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._num_regions_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field RegionRulesLayerLanes.numRegions!")
        zserio_context.num_regions.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_regions_)

        # check array length
        if len(self._region_id_) != (self._num_regions_):
            raise zserio.PythonRuntimeException("Wrong array length for field RegionRulesLayerLanes.regionId: "
                                                f"{len(self._region_id_)} != {self._num_regions_}!")
        self._region_id_.write_packed(zserio_writer)

        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_region_rules_attribute_maps_used():
            # check parameters
            if self._region_rules_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeMaps: "
                                                    f"{self._region_rules_attribute_maps_.coord_shift} != {0}!")
            self._region_rules_attribute_maps_.write_packed(zserio_context.region_rules_attribute_maps, zserio_writer)

        if self.is_region_rules_attribute_sets_used():
            # check parameters
            if self._region_rules_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeSets: "
                                                    f"{self._region_rules_attribute_sets_.coord_shift} != {0}!")
            self._region_rules_attribute_sets_.write_packed(zserio_context.region_rules_attribute_sets, zserio_writer)

        if self.is_has_feature_relations_used():
            zserio_writer.write_bool(self._has_feature_relations_)

        if self.is_feature_relations_used():
            # check array length
            if len(self._feature_relations_) != (self._num_regions_):
                raise zserio.PythonRuntimeException("Wrong array length for field RegionRulesLayerLanes.featureRelations: "
                                                    f"{len(self._feature_relations_)} != {self._num_regions_}!")
            self._feature_relations_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_regions_ = zserio.array.DeltaContext()
            self._content_ = zserio.array.DeltaContext()
            self._region_rules_attribute_maps_ = nds.rules.instantiations.rules_region_attribute_map_list.RulesRegionAttributeMapList.ZserioPackingContext()
            self._region_rules_attribute_sets_ = nds.rules.instantiations.rules_region_attribute_set_list.RulesRegionAttributeSetList.ZserioPackingContext()

        @property
        def num_regions(self):
            return self._num_regions_

        @property
        def content(self):
            return self._content_

        @property
        def region_rules_attribute_maps(self):
            return self._region_rules_attribute_maps_

        @property
        def region_rules_attribute_sets(self):
            return self._region_rules_attribute_sets_

    class _ZserioElementFactory_feature_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList:
            del zserio_index
            return nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList.ZserioPackingContext:
            return nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList:
            del zserio_index
            return nds.rules.layer.region_lane_group_relation_list.RegionLaneGroupRelationList.from_reader_packed(zserio_context, zserio_reader)
