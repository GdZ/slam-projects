# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.rules.instantiations.rules_lane_position_attribute_map_list
import nds.rules.instantiations.rules_lane_position_attribute_set_list
import nds.rules.instantiations.rules_lane_range_attribute_map_list
import nds.rules.instantiations.rules_lane_range_attribute_set_list
import nds.rules.instantiations.rules_lane_transition_attribute_map_list
import nds.rules.instantiations.rules_lane_transition_attribute_set_list
import nds.rules.metadata.lane_rules_layer_content
import nds.system.types.layer_type

class LaneRulesLayer:
    def __init__(
            self,
            content_: typing.Union[nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent, None] = None,
            lane_range_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList] = None,
            lane_position_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList] = None,
            lane_transition_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList] = None,
            lane_range_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList] = None,
            lane_position_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList] = None,
            lane_transition_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList] = None) -> None:
        self._content_ = content_
        self._lane_range_attribute_maps_ = lane_range_attribute_maps_
        self._lane_position_attribute_maps_ = lane_position_attribute_maps_
        self._lane_transition_attribute_maps_ = lane_transition_attribute_maps_
        self._lane_range_attribute_sets_ = lane_range_attribute_sets_
        self._lane_position_attribute_sets_ = lane_position_attribute_sets_
        self._lane_transition_attribute_sets_ = lane_transition_attribute_sets_

    @classmethod
    def from_reader(
            cls: typing.Type['LaneRulesLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneRulesLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneRulesLayer'],
            zserio_context: LaneRulesLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneRulesLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneRulesLayer):
            return ((self._content_ == other._content_) and
                    (not other.is_lane_range_attribute_maps_used() if not self.is_lane_range_attribute_maps_used() else (self._lane_range_attribute_maps_ == other._lane_range_attribute_maps_)) and
                    (not other.is_lane_position_attribute_maps_used() if not self.is_lane_position_attribute_maps_used() else (self._lane_position_attribute_maps_ == other._lane_position_attribute_maps_)) and
                    (not other.is_lane_transition_attribute_maps_used() if not self.is_lane_transition_attribute_maps_used() else (self._lane_transition_attribute_maps_ == other._lane_transition_attribute_maps_)) and
                    (not other.is_lane_range_attribute_sets_used() if not self.is_lane_range_attribute_sets_used() else (self._lane_range_attribute_sets_ == other._lane_range_attribute_sets_)) and
                    (not other.is_lane_position_attribute_sets_used() if not self.is_lane_position_attribute_sets_used() else (self._lane_position_attribute_sets_ == other._lane_position_attribute_sets_)) and
                    (not other.is_lane_transition_attribute_sets_used() if not self.is_lane_transition_attribute_sets_used() else (self._lane_transition_attribute_sets_ == other._lane_transition_attribute_sets_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_lane_range_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_range_attribute_maps_)
        if self.is_lane_position_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_position_attribute_maps_)
        if self.is_lane_transition_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_transition_attribute_maps_)
        if self.is_lane_range_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_range_attribute_sets_)
        if self.is_lane_position_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_position_attribute_sets_)
        if self.is_lane_transition_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._lane_transition_attribute_sets_)

        return result

    @property
    def content(self) -> typing.Union[nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def lane_range_attribute_maps(self) -> typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList]:
        return self._lane_range_attribute_maps_

    @lane_range_attribute_maps.setter
    def lane_range_attribute_maps(self, lane_range_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList]) -> None:
        self._lane_range_attribute_maps_ = lane_range_attribute_maps_

    def is_lane_range_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_RANGE_MAPS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_RANGE_MAPS

    def is_lane_range_attribute_maps_set(self) -> bool:
        return not self._lane_range_attribute_maps_ is None

    def reset_lane_range_attribute_maps(self) -> None:
        self._lane_range_attribute_maps_ = None

    @property
    def lane_position_attribute_maps(self) -> typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList]:
        return self._lane_position_attribute_maps_

    @lane_position_attribute_maps.setter
    def lane_position_attribute_maps(self, lane_position_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList]) -> None:
        self._lane_position_attribute_maps_ = lane_position_attribute_maps_

    def is_lane_position_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_POSITION_MAPS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_POSITION_MAPS

    def is_lane_position_attribute_maps_set(self) -> bool:
        return not self._lane_position_attribute_maps_ is None

    def reset_lane_position_attribute_maps(self) -> None:
        self._lane_position_attribute_maps_ = None

    @property
    def lane_transition_attribute_maps(self) -> typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList]:
        return self._lane_transition_attribute_maps_

    @lane_transition_attribute_maps.setter
    def lane_transition_attribute_maps(self, lane_transition_attribute_maps_: typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList]) -> None:
        self._lane_transition_attribute_maps_ = lane_transition_attribute_maps_

    def is_lane_transition_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS

    def is_lane_transition_attribute_maps_set(self) -> bool:
        return not self._lane_transition_attribute_maps_ is None

    def reset_lane_transition_attribute_maps(self) -> None:
        self._lane_transition_attribute_maps_ = None

    @property
    def lane_range_attribute_sets(self) -> typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList]:
        return self._lane_range_attribute_sets_

    @lane_range_attribute_sets.setter
    def lane_range_attribute_sets(self, lane_range_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList]) -> None:
        self._lane_range_attribute_sets_ = lane_range_attribute_sets_

    def is_lane_range_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_RANGE_SETS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_RANGE_SETS

    def is_lane_range_attribute_sets_set(self) -> bool:
        return not self._lane_range_attribute_sets_ is None

    def reset_lane_range_attribute_sets(self) -> None:
        self._lane_range_attribute_sets_ = None

    @property
    def lane_position_attribute_sets(self) -> typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList]:
        return self._lane_position_attribute_sets_

    @lane_position_attribute_sets.setter
    def lane_position_attribute_sets(self, lane_position_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList]) -> None:
        self._lane_position_attribute_sets_ = lane_position_attribute_sets_

    def is_lane_position_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_POSITION_SETS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_POSITION_SETS

    def is_lane_position_attribute_sets_set(self) -> bool:
        return not self._lane_position_attribute_sets_ is None

    def reset_lane_position_attribute_sets(self) -> None:
        self._lane_position_attribute_sets_ = None

    @property
    def lane_transition_attribute_sets(self) -> typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList]:
        return self._lane_transition_attribute_sets_

    @lane_transition_attribute_sets.setter
    def lane_transition_attribute_sets(self, lane_transition_attribute_sets_: typing.Optional[nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList]) -> None:
        self._lane_transition_attribute_sets_ = lane_transition_attribute_sets_

    def is_lane_transition_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS) == nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS

    def is_lane_transition_attribute_sets_set(self) -> bool:
        return not self._lane_transition_attribute_sets_ is None

    def reset_lane_transition_attribute_sets(self) -> None:
        self._lane_transition_attribute_sets_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.ATTRIBUTE

    def init_packing_context(self, zserio_context: LaneRulesLayer.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_lane_range_attribute_maps_used():
            self._lane_range_attribute_maps_.init_packing_context(zserio_context.lane_range_attribute_maps)
        if self.is_lane_position_attribute_maps_used():
            self._lane_position_attribute_maps_.init_packing_context(zserio_context.lane_position_attribute_maps)
        if self.is_lane_transition_attribute_maps_used():
            self._lane_transition_attribute_maps_.init_packing_context(zserio_context.lane_transition_attribute_maps)
        if self.is_lane_range_attribute_sets_used():
            self._lane_range_attribute_sets_.init_packing_context(zserio_context.lane_range_attribute_sets)
        if self.is_lane_position_attribute_sets_used():
            self._lane_position_attribute_sets_.init_packing_context(zserio_context.lane_position_attribute_sets)
        if self.is_lane_transition_attribute_sets_used():
            self._lane_transition_attribute_sets_.init_packing_context(zserio_context.lane_transition_attribute_sets)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_lane_range_attribute_maps_used():
            end_bitposition += self._lane_range_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_lane_position_attribute_maps_used():
            end_bitposition += self._lane_position_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_lane_transition_attribute_maps_used():
            end_bitposition += self._lane_transition_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_lane_range_attribute_sets_used():
            end_bitposition += self._lane_range_attribute_sets_.bitsizeof(end_bitposition)
        if self.is_lane_position_attribute_sets_used():
            end_bitposition += self._lane_position_attribute_sets_.bitsizeof(end_bitposition)
        if self.is_lane_transition_attribute_sets_used():
            end_bitposition += self._lane_transition_attribute_sets_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneRulesLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_lane_range_attribute_maps_used():
            end_bitposition += self._lane_range_attribute_maps_.bitsizeof_packed(zserio_context.lane_range_attribute_maps, end_bitposition)
        if self.is_lane_position_attribute_maps_used():
            end_bitposition += self._lane_position_attribute_maps_.bitsizeof_packed(zserio_context.lane_position_attribute_maps, end_bitposition)
        if self.is_lane_transition_attribute_maps_used():
            end_bitposition += self._lane_transition_attribute_maps_.bitsizeof_packed(zserio_context.lane_transition_attribute_maps, end_bitposition)
        if self.is_lane_range_attribute_sets_used():
            end_bitposition += self._lane_range_attribute_sets_.bitsizeof_packed(zserio_context.lane_range_attribute_sets, end_bitposition)
        if self.is_lane_position_attribute_sets_used():
            end_bitposition += self._lane_position_attribute_sets_.bitsizeof_packed(zserio_context.lane_position_attribute_sets, end_bitposition)
        if self.is_lane_transition_attribute_sets_used():
            end_bitposition += self._lane_transition_attribute_sets_.bitsizeof_packed(zserio_context.lane_transition_attribute_sets, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_lane_range_attribute_maps_used():
            end_bitposition = self._lane_range_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_lane_position_attribute_maps_used():
            end_bitposition = self._lane_position_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_lane_transition_attribute_maps_used():
            end_bitposition = self._lane_transition_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_lane_range_attribute_sets_used():
            end_bitposition = self._lane_range_attribute_sets_.initialize_offsets(end_bitposition)
        if self.is_lane_position_attribute_sets_used():
            end_bitposition = self._lane_position_attribute_sets_.initialize_offsets(end_bitposition)
        if self.is_lane_transition_attribute_sets_used():
            end_bitposition = self._lane_transition_attribute_sets_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneRulesLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_lane_range_attribute_maps_used():
            end_bitposition = self._lane_range_attribute_maps_.initialize_offsets_packed(zserio_context.lane_range_attribute_maps, end_bitposition)
        if self.is_lane_position_attribute_maps_used():
            end_bitposition = self._lane_position_attribute_maps_.initialize_offsets_packed(zserio_context.lane_position_attribute_maps, end_bitposition)
        if self.is_lane_transition_attribute_maps_used():
            end_bitposition = self._lane_transition_attribute_maps_.initialize_offsets_packed(zserio_context.lane_transition_attribute_maps, end_bitposition)
        if self.is_lane_range_attribute_sets_used():
            end_bitposition = self._lane_range_attribute_sets_.initialize_offsets_packed(zserio_context.lane_range_attribute_sets, end_bitposition)
        if self.is_lane_position_attribute_sets_used():
            end_bitposition = self._lane_position_attribute_sets_.initialize_offsets_packed(zserio_context.lane_position_attribute_sets, end_bitposition)
        if self.is_lane_transition_attribute_sets_used():
            end_bitposition = self._lane_transition_attribute_sets_.initialize_offsets_packed(zserio_context.lane_transition_attribute_sets, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.from_reader(zserio_reader)
        if self.is_lane_range_attribute_maps_used():
            self._lane_range_attribute_maps_ = nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._lane_range_attribute_maps_ = None
        if self.is_lane_position_attribute_maps_used():
            self._lane_position_attribute_maps_ = nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._lane_position_attribute_maps_ = None
        if self.is_lane_transition_attribute_maps_used():
            self._lane_transition_attribute_maps_ = nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._lane_transition_attribute_maps_ = None
        if self.is_lane_range_attribute_sets_used():
            self._lane_range_attribute_sets_ = nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._lane_range_attribute_sets_ = None
        if self.is_lane_position_attribute_sets_used():
            self._lane_position_attribute_sets_ = nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._lane_position_attribute_sets_ = None
        if self.is_lane_transition_attribute_sets_used():
            self._lane_transition_attribute_sets_ = nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._lane_transition_attribute_sets_ = None

    def read_packed(self, zserio_context: LaneRulesLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.rules.metadata.lane_rules_layer_content.LaneRulesLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_lane_range_attribute_maps_used():
            self._lane_range_attribute_maps_ = nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList.from_reader_packed(zserio_context.lane_range_attribute_maps, zserio_reader, 0)
        else:
            self._lane_range_attribute_maps_ = None

        if self.is_lane_position_attribute_maps_used():
            self._lane_position_attribute_maps_ = nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList.from_reader_packed(zserio_context.lane_position_attribute_maps, zserio_reader, 0)
        else:
            self._lane_position_attribute_maps_ = None

        if self.is_lane_transition_attribute_maps_used():
            self._lane_transition_attribute_maps_ = nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList.from_reader_packed(zserio_context.lane_transition_attribute_maps, zserio_reader, 0)
        else:
            self._lane_transition_attribute_maps_ = None

        if self.is_lane_range_attribute_sets_used():
            self._lane_range_attribute_sets_ = nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList.from_reader_packed(zserio_context.lane_range_attribute_sets, zserio_reader, 0)
        else:
            self._lane_range_attribute_sets_ = None

        if self.is_lane_position_attribute_sets_used():
            self._lane_position_attribute_sets_ = nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList.from_reader_packed(zserio_context.lane_position_attribute_sets, zserio_reader, 0)
        else:
            self._lane_position_attribute_sets_ = None

        if self.is_lane_transition_attribute_sets_used():
            self._lane_transition_attribute_sets_ = nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList.from_reader_packed(zserio_context.lane_transition_attribute_sets, zserio_reader, 0)
        else:
            self._lane_transition_attribute_sets_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)

        if self.is_lane_range_attribute_maps_used():
            # check parameters
            if self._lane_range_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeMaps: "
                                                    f"{self._lane_range_attribute_maps_.coord_shift} != {0}!")
            self._lane_range_attribute_maps_.write(zserio_writer)

        if self.is_lane_position_attribute_maps_used():
            # check parameters
            if self._lane_position_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeMaps: "
                                                    f"{self._lane_position_attribute_maps_.coord_shift} != {0}!")
            self._lane_position_attribute_maps_.write(zserio_writer)

        if self.is_lane_transition_attribute_maps_used():
            # check parameters
            if self._lane_transition_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeMaps: "
                                                    f"{self._lane_transition_attribute_maps_.coord_shift} != {0}!")
            self._lane_transition_attribute_maps_.write(zserio_writer)

        if self.is_lane_range_attribute_sets_used():
            # check parameters
            if self._lane_range_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeSets: "
                                                    f"{self._lane_range_attribute_sets_.coord_shift} != {0}!")
            self._lane_range_attribute_sets_.write(zserio_writer)

        if self.is_lane_position_attribute_sets_used():
            # check parameters
            if self._lane_position_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeSets: "
                                                    f"{self._lane_position_attribute_sets_.coord_shift} != {0}!")
            self._lane_position_attribute_sets_.write(zserio_writer)

        if self.is_lane_transition_attribute_sets_used():
            # check parameters
            if self._lane_transition_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeSets: "
                                                    f"{self._lane_transition_attribute_sets_.coord_shift} != {0}!")
            self._lane_transition_attribute_sets_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneRulesLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_lane_range_attribute_maps_used():
            # check parameters
            if self._lane_range_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeMaps: "
                                                    f"{self._lane_range_attribute_maps_.coord_shift} != {0}!")
            self._lane_range_attribute_maps_.write_packed(zserio_context.lane_range_attribute_maps, zserio_writer)

        if self.is_lane_position_attribute_maps_used():
            # check parameters
            if self._lane_position_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeMaps: "
                                                    f"{self._lane_position_attribute_maps_.coord_shift} != {0}!")
            self._lane_position_attribute_maps_.write_packed(zserio_context.lane_position_attribute_maps, zserio_writer)

        if self.is_lane_transition_attribute_maps_used():
            # check parameters
            if self._lane_transition_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeMaps: "
                                                    f"{self._lane_transition_attribute_maps_.coord_shift} != {0}!")
            self._lane_transition_attribute_maps_.write_packed(zserio_context.lane_transition_attribute_maps, zserio_writer)

        if self.is_lane_range_attribute_sets_used():
            # check parameters
            if self._lane_range_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeSets: "
                                                    f"{self._lane_range_attribute_sets_.coord_shift} != {0}!")
            self._lane_range_attribute_sets_.write_packed(zserio_context.lane_range_attribute_sets, zserio_writer)

        if self.is_lane_position_attribute_sets_used():
            # check parameters
            if self._lane_position_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeSets: "
                                                    f"{self._lane_position_attribute_sets_.coord_shift} != {0}!")
            self._lane_position_attribute_sets_.write_packed(zserio_context.lane_position_attribute_sets, zserio_writer)

        if self.is_lane_transition_attribute_sets_used():
            # check parameters
            if self._lane_transition_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeSets: "
                                                    f"{self._lane_transition_attribute_sets_.coord_shift} != {0}!")
            self._lane_transition_attribute_sets_.write_packed(zserio_context.lane_transition_attribute_sets, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._lane_range_attribute_maps_ = nds.rules.instantiations.rules_lane_range_attribute_map_list.RulesLaneRangeAttributeMapList.ZserioPackingContext()
            self._lane_position_attribute_maps_ = nds.rules.instantiations.rules_lane_position_attribute_map_list.RulesLanePositionAttributeMapList.ZserioPackingContext()
            self._lane_transition_attribute_maps_ = nds.rules.instantiations.rules_lane_transition_attribute_map_list.RulesLaneTransitionAttributeMapList.ZserioPackingContext()
            self._lane_range_attribute_sets_ = nds.rules.instantiations.rules_lane_range_attribute_set_list.RulesLaneRangeAttributeSetList.ZserioPackingContext()
            self._lane_position_attribute_sets_ = nds.rules.instantiations.rules_lane_position_attribute_set_list.RulesLanePositionAttributeSetList.ZserioPackingContext()
            self._lane_transition_attribute_sets_ = nds.rules.instantiations.rules_lane_transition_attribute_set_list.RulesLaneTransitionAttributeSetList.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def lane_range_attribute_maps(self):
            return self._lane_range_attribute_maps_

        @property
        def lane_position_attribute_maps(self):
            return self._lane_position_attribute_maps_

        @property
        def lane_transition_attribute_maps(self):
            return self._lane_transition_attribute_maps_

        @property
        def lane_range_attribute_sets(self):
            return self._lane_range_attribute_sets_

        @property
        def lane_position_attribute_sets(self):
            return self._lane_position_attribute_sets_

        @property
        def lane_transition_attribute_sets(self):
            return self._lane_transition_attribute_sets_
