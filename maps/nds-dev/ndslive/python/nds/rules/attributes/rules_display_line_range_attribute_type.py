# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RulesDisplayLineRangeAttributeType(zserio.Enum):
    PROHIBITED_PASSAGE = 0
    OVERTAKING_PROHIBITION = 1
    SPEED_LIMIT_METRIC = 2
    SPEED_LIMIT_IMPERIAL = 3
    MINIMUM_SPEED_METRIC = 4
    MINIMUM_SPEED_IMPERIAL = 5
    ADVISORY_SPEED_LIMIT_METRIC = 6
    ADVISORY_SPEED_LIMIT_IMPERIAL = 7
    TRAFFIC_ENFORCEMENT_ZONE = 8
    NON_DEFAULT_DRIVING_SIDE = 9
    TRAFFIC_ZONE = 10
    ADR_TUNNEL_CATEGORY = 11
    LICENSE_PLATE_RESTRICTION = 12
    SEASONAL_CLOSED = 13
    PROHIBITED_PARKING = 14
    PROHIBITED_STOPPING = 15
    DONT_STOP_ZONE = 16
    AUTOMATED_DRIVING_CLEARANCE = 17
    ROADWORKS = 18

    @classmethod
    def from_name(cls: typing.Type['RulesDisplayLineRangeAttributeType'], item_name: str) -> 'RulesDisplayLineRangeAttributeType':
        if item_name == 'PROHIBITED_PASSAGE':
            item = RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE
        elif item_name == 'OVERTAKING_PROHIBITION':
            item = RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION
        elif item_name == 'SPEED_LIMIT_METRIC':
            item = RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC
        elif item_name == 'SPEED_LIMIT_IMPERIAL':
            item = RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL
        elif item_name == 'MINIMUM_SPEED_METRIC':
            item = RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC
        elif item_name == 'MINIMUM_SPEED_IMPERIAL':
            item = RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL
        elif item_name == 'ADVISORY_SPEED_LIMIT_METRIC':
            item = RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC
        elif item_name == 'ADVISORY_SPEED_LIMIT_IMPERIAL':
            item = RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL
        elif item_name == 'TRAFFIC_ENFORCEMENT_ZONE':
            item = RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE
        elif item_name == 'NON_DEFAULT_DRIVING_SIDE':
            item = RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE
        elif item_name == 'TRAFFIC_ZONE':
            item = RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE
        elif item_name == 'ADR_TUNNEL_CATEGORY':
            item = RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY
        elif item_name == 'LICENSE_PLATE_RESTRICTION':
            item = RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION
        elif item_name == 'SEASONAL_CLOSED':
            item = RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED
        elif item_name == 'PROHIBITED_PARKING':
            item = RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING
        elif item_name == 'PROHIBITED_STOPPING':
            item = RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING
        elif item_name == 'DONT_STOP_ZONE':
            item = RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE
        elif item_name == 'AUTOMATED_DRIVING_CLEARANCE':
            item = RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE
        elif item_name == 'ROADWORKS':
            item = RulesDisplayLineRangeAttributeType.ROADWORKS
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RulesDisplayLineRangeAttributeType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RulesDisplayLineRangeAttributeType'], reader: zserio.BitStreamReader) -> 'RulesDisplayLineRangeAttributeType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['RulesDisplayLineRangeAttributeType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RulesDisplayLineRangeAttributeType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
