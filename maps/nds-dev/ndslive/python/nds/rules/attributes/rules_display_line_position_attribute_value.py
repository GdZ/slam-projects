# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.attributes.rules_display_line_position_attribute_type
import nds.rules.types.movable_warning_sign
import nds.rules.types.traffic_enforcement_camera
import nds.rules.types.traffic_lights
import nds.signs.warning.warning_sign

class RulesDisplayLinePositionAttributeValue:
    def __init__(
            self,
            type_: nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType,
            *,
            traffic_lights_: typing.Union[nds.rules.types.traffic_lights.TrafficLights, None] = None,
            traffic_enforcement_camera_: typing.Union[nds.rules.types.traffic_enforcement_camera.TrafficEnforcementCamera, None] = None,
            movable_warning_sign_: typing.Union[nds.rules.types.movable_warning_sign.MovableWarningSign, None] = None,
            warning_sign_: typing.Union[nds.signs.warning.warning_sign.WarningSign, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if traffic_lights_ is not None:
            self._choice = traffic_lights_
        if traffic_enforcement_camera_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLinePositionAttributeValue is ambiguous!")
            self._choice = traffic_enforcement_camera_
        if movable_warning_sign_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLinePositionAttributeValue is ambiguous!")
            self._choice = movable_warning_sign_
        if warning_sign_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLinePositionAttributeValue is ambiguous!")
            self._choice = warning_sign_

    @classmethod
    def from_reader(
            cls: typing.Type['RulesDisplayLinePositionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType) -> 'RulesDisplayLinePositionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RulesDisplayLinePositionAttributeValue'],
            zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType) -> 'RulesDisplayLinePositionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RulesDisplayLinePositionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType:
        return self._type_

    @property
    def traffic_lights(self) -> typing.Union[nds.rules.types.traffic_lights.TrafficLights, None]:
        return self._choice

    @traffic_lights.setter
    def traffic_lights(self, traffic_lights_: typing.Union[nds.rules.types.traffic_lights.TrafficLights, None]) -> None:
        self._choice = traffic_lights_

    @property
    def traffic_enforcement_camera(self) -> typing.Union[nds.rules.types.traffic_enforcement_camera.TrafficEnforcementCamera, None]:
        return self._choice

    @traffic_enforcement_camera.setter
    def traffic_enforcement_camera(self, traffic_enforcement_camera_: typing.Union[nds.rules.types.traffic_enforcement_camera.TrafficEnforcementCamera, None]) -> None:
        self._choice = traffic_enforcement_camera_

    @property
    def movable_warning_sign(self) -> typing.Union[nds.rules.types.movable_warning_sign.MovableWarningSign, None]:
        return self._choice

    @movable_warning_sign.setter
    def movable_warning_sign(self, movable_warning_sign_: typing.Union[nds.rules.types.movable_warning_sign.MovableWarningSign, None]) -> None:
        self._choice = movable_warning_sign_

    @property
    def warning_sign(self) -> typing.Union[nds.signs.warning.warning_sign.WarningSign, None]:
        return self._choice

    @warning_sign.setter
    def warning_sign(self, warning_sign_: typing.Union[nds.signs.warning.warning_sign.WarningSign, None]) -> None:
        self._choice = warning_sign_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            return self.CHOICE_TRAFFIC_LIGHTS
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            return self.CHOICE_TRAFFIC_ENFORCEMENT_CAMERA
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            return self.CHOICE_MOVABLE_WARNING_SIGN
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            return self.CHOICE_WARNING_SIGN
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.init_packing_context(zserio_context.traffic_enforcement_camera)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            self._choice.init_packing_context(zserio_context.movable_warning_sign)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            self._choice.init_packing_context(zserio_context.warning_sign)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_enforcement_camera, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.movable_warning_sign, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.warning_sign, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_enforcement_camera, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.movable_warning_sign, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.warning_sign, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            self._choice = nds.rules.types.traffic_lights.TrafficLights.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice = nds.rules.types.traffic_enforcement_camera.TrafficEnforcementCamera.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            self._choice = nds.rules.types.movable_warning_sign.MovableWarningSign.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            self._choice = nds.signs.warning.warning_sign.WarningSign.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

    def read_packed(self, zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            self._choice = nds.rules.types.traffic_lights.TrafficLights.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice = nds.rules.types.traffic_enforcement_camera.TrafficEnforcementCamera.from_reader_packed(zserio_context.traffic_enforcement_camera, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            self._choice = nds.rules.types.movable_warning_sign.MovableWarningSign.from_reader_packed(zserio_context.movable_warning_sign, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            self._choice = nds.signs.warning.warning_sign.WarningSign.from_reader_packed(zserio_context.warning_sign, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

    def write_packed(self, zserio_context: RulesDisplayLinePositionAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.write_packed(zserio_context.traffic_enforcement_camera, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.MOVABLE_WARNING_SIGN):
            self._choice.write_packed(zserio_context.movable_warning_sign, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_position_attribute_type.RulesDisplayLinePositionAttributeType.WARNING_SIGN):
            self._choice.write_packed(zserio_context.warning_sign, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLinePositionAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._traffic_enforcement_camera_ = zserio.array.DeltaContext()
            self._movable_warning_sign_ = zserio.array.DeltaContext()
            self._warning_sign_ = zserio.array.DeltaContext()

        @property
        def traffic_enforcement_camera(self):
            return self._traffic_enforcement_camera_

        @property
        def movable_warning_sign(self):
            return self._movable_warning_sign_

        @property
        def warning_sign(self):
            return self._warning_sign_

    CHOICE_TRAFFIC_LIGHTS = 0
    CHOICE_TRAFFIC_ENFORCEMENT_CAMERA = 1
    CHOICE_MOVABLE_WARNING_SIGN = 2
    CHOICE_WARNING_SIGN = 3
    UNDEFINED_CHOICE = -1
