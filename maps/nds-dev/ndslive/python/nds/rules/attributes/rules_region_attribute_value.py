# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.attributes.rules_region_attribute_type
import nds.rules.types.admin_advisory_speed_limit_kmh
import nds.rules.types.admin_advisory_speed_limit_mph
import nds.rules.types.admin_minimum_speed_kmh
import nds.rules.types.admin_minimum_speed_mph
import nds.rules.types.admin_speed_limit_kmh
import nds.rules.types.admin_speed_limit_mph
import nds.rules.types.blood_alcohol_content_limit
import nds.rules.types.breathalizer_required
import nds.rules.types.daytime_running_light
import nds.rules.types.fire_extinguisher_required
import nds.rules.types.first_aid_kit_required
import nds.rules.types.iso_details
import nds.rules.types.official_languages
import nds.rules.types.prohibited_passage
import nds.rules.types.region_currencies
import nds.rules.types.region_driving_rules
import nds.rules.types.requires_toll_registration
import nds.rules.types.right_hand_traffic
import nds.rules.types.safety_vests_required
import nds.rules.types.system_of_measurement
import nds.rules.types.time_zone
import nds.rules.types.toll_vignette_info
import nds.rules.types.tow_rope_required
import nds.rules.types.turn_on_red_allowed
import nds.rules.types.vehicle_light_conditions
import nds.rules.types.warning_triangle_required
import nds.rules.types.winter_season
import nds.rules.types.winter_tires_required

class RulesRegionAttributeValue:
    def __init__(
            self,
            type_: nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType,
            *,
            blood_alcohol_content_limit_: typing.Union[nds.rules.types.blood_alcohol_content_limit.BloodAlcoholContentLimit, None] = None,
            warning_triangle_required_: typing.Union[nds.rules.types.warning_triangle_required.WarningTriangleRequired, None] = None,
            first_aid_kit_required_: typing.Union[nds.rules.types.first_aid_kit_required.FirstAidKitRequired, None] = None,
            safety_vests_required_: typing.Union[nds.rules.types.safety_vests_required.SafetyVestsRequired, None] = None,
            breathalizer_required_: typing.Union[nds.rules.types.breathalizer_required.BreathalizerRequired, None] = None,
            turn_on_red_allowed_: typing.Union[nds.rules.types.turn_on_red_allowed.TurnOnRedAllowed, None] = None,
            daytime_running_light_: typing.Union[nds.rules.types.daytime_running_light.DaytimeRunningLight, None] = None,
            admin_speed_limit_kmh_: typing.Union[nds.rules.types.admin_speed_limit_kmh.AdminSpeedLimitKmh, None] = None,
            admin_speed_limit_mph_: typing.Union[nds.rules.types.admin_speed_limit_mph.AdminSpeedLimitMph, None] = None,
            admin_minimum_speed_kmh_: typing.Union[nds.rules.types.admin_minimum_speed_kmh.AdminMinimumSpeedKmh, None] = None,
            admin_minimum_speed_mph_: typing.Union[nds.rules.types.admin_minimum_speed_mph.AdminMinimumSpeedMph, None] = None,
            admin_advisory_speed_limit_kmh_: typing.Union[nds.rules.types.admin_advisory_speed_limit_kmh.AdminAdvisorySpeedLimitKmh, None] = None,
            admin_advisory_speed_limit_mph_: typing.Union[nds.rules.types.admin_advisory_speed_limit_mph.AdminAdvisorySpeedLimitMph, None] = None,
            toll_vignette_info_: typing.Union[nds.rules.types.toll_vignette_info.TollVignetteInfo, None] = None,
            region_currencies_: typing.Union[nds.rules.types.region_currencies.RegionCurrencies, None] = None,
            region_driving_rules_: typing.Union[nds.rules.types.region_driving_rules.RegionDrivingRules, None] = None,
            vehicle_light_conditions_: typing.Union[nds.rules.types.vehicle_light_conditions.VehicleLightConditions, None] = None,
            requires_toll_registration_: typing.Union[nds.rules.types.requires_toll_registration.RequiresTollRegistration, None] = None,
            winter_season_: typing.Union[nds.rules.types.winter_season.WinterSeason, None] = None,
            winter_tires_required_: typing.Union[nds.rules.types.winter_tires_required.WinterTiresRequired, None] = None,
            fire_extinguisher_required_: typing.Union[nds.rules.types.fire_extinguisher_required.FireExtinguisherRequired, None] = None,
            tow_rope_required_: typing.Union[nds.rules.types.tow_rope_required.TowRopeRequired, None] = None,
            iso_details_: typing.Union[nds.rules.types.iso_details.IsoDetails, None] = None,
            right_hand_traffic_: typing.Union[nds.rules.types.right_hand_traffic.RightHandTraffic, None] = None,
            system_of_measurement_: typing.Union[nds.rules.types.system_of_measurement.SystemOfMeasurement, None] = None,
            prohibited_passage_: typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None] = None,
            time_zone_: typing.Union[nds.rules.types.time_zone.TimeZone, None] = None,
            official_languages_: typing.Union[nds.rules.types.official_languages.OfficialLanguages, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if blood_alcohol_content_limit_ is not None:
            self._choice = blood_alcohol_content_limit_
        if warning_triangle_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = warning_triangle_required_
        if first_aid_kit_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = first_aid_kit_required_
        if safety_vests_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = safety_vests_required_
        if breathalizer_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = breathalizer_required_
        if turn_on_red_allowed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = turn_on_red_allowed_
        if daytime_running_light_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = daytime_running_light_
        if admin_speed_limit_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_speed_limit_kmh_
        if admin_speed_limit_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_speed_limit_mph_
        if admin_minimum_speed_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_minimum_speed_kmh_
        if admin_minimum_speed_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_minimum_speed_mph_
        if admin_advisory_speed_limit_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_advisory_speed_limit_kmh_
        if admin_advisory_speed_limit_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = admin_advisory_speed_limit_mph_
        if toll_vignette_info_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = toll_vignette_info_
        if region_currencies_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = region_currencies_
        if region_driving_rules_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = region_driving_rules_
        if vehicle_light_conditions_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = vehicle_light_conditions_
        if requires_toll_registration_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = requires_toll_registration_
        if winter_season_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = winter_season_
        if winter_tires_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = winter_tires_required_
        if fire_extinguisher_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = fire_extinguisher_required_
        if tow_rope_required_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = tow_rope_required_
        if iso_details_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = iso_details_
        if right_hand_traffic_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = right_hand_traffic_
        if system_of_measurement_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = system_of_measurement_
        if prohibited_passage_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = prohibited_passage_
        if time_zone_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = time_zone_
        if official_languages_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesRegionAttributeValue is ambiguous!")
            self._choice = official_languages_

    @classmethod
    def from_reader(
            cls: typing.Type['RulesRegionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType) -> 'RulesRegionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RulesRegionAttributeValue'],
            zserio_context: RulesRegionAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType) -> 'RulesRegionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RulesRegionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType:
        return self._type_

    @property
    def blood_alcohol_content_limit(self) -> nds.rules.types.blood_alcohol_content_limit.BloodAlcoholContentLimit:
        return self._choice

    @blood_alcohol_content_limit.setter
    def blood_alcohol_content_limit(self, blood_alcohol_content_limit_: nds.rules.types.blood_alcohol_content_limit.BloodAlcoholContentLimit) -> None:
        self._choice = blood_alcohol_content_limit_

    @property
    def warning_triangle_required(self) -> typing.Union[nds.rules.types.warning_triangle_required.WarningTriangleRequired, None]:
        return self._choice

    @warning_triangle_required.setter
    def warning_triangle_required(self, warning_triangle_required_: typing.Union[nds.rules.types.warning_triangle_required.WarningTriangleRequired, None]) -> None:
        self._choice = warning_triangle_required_

    @property
    def first_aid_kit_required(self) -> typing.Union[nds.rules.types.first_aid_kit_required.FirstAidKitRequired, None]:
        return self._choice

    @first_aid_kit_required.setter
    def first_aid_kit_required(self, first_aid_kit_required_: typing.Union[nds.rules.types.first_aid_kit_required.FirstAidKitRequired, None]) -> None:
        self._choice = first_aid_kit_required_

    @property
    def safety_vests_required(self) -> typing.Union[nds.rules.types.safety_vests_required.SafetyVestsRequired, None]:
        return self._choice

    @safety_vests_required.setter
    def safety_vests_required(self, safety_vests_required_: typing.Union[nds.rules.types.safety_vests_required.SafetyVestsRequired, None]) -> None:
        self._choice = safety_vests_required_

    @property
    def breathalizer_required(self) -> typing.Union[nds.rules.types.breathalizer_required.BreathalizerRequired, None]:
        return self._choice

    @breathalizer_required.setter
    def breathalizer_required(self, breathalizer_required_: typing.Union[nds.rules.types.breathalizer_required.BreathalizerRequired, None]) -> None:
        self._choice = breathalizer_required_

    @property
    def turn_on_red_allowed(self) -> nds.rules.types.turn_on_red_allowed.TurnOnRedAllowed:
        return self._choice

    @turn_on_red_allowed.setter
    def turn_on_red_allowed(self, turn_on_red_allowed_: nds.rules.types.turn_on_red_allowed.TurnOnRedAllowed) -> None:
        self._choice = turn_on_red_allowed_

    @property
    def daytime_running_light(self) -> nds.rules.types.daytime_running_light.DaytimeRunningLight:
        return self._choice

    @daytime_running_light.setter
    def daytime_running_light(self, daytime_running_light_: nds.rules.types.daytime_running_light.DaytimeRunningLight) -> None:
        self._choice = daytime_running_light_

    @property
    def admin_speed_limit_kmh(self) -> nds.rules.types.admin_speed_limit_kmh.AdminSpeedLimitKmh:
        return self._choice

    @admin_speed_limit_kmh.setter
    def admin_speed_limit_kmh(self, admin_speed_limit_kmh_: nds.rules.types.admin_speed_limit_kmh.AdminSpeedLimitKmh) -> None:
        self._choice = admin_speed_limit_kmh_

    @property
    def admin_speed_limit_mph(self) -> nds.rules.types.admin_speed_limit_mph.AdminSpeedLimitMph:
        return self._choice

    @admin_speed_limit_mph.setter
    def admin_speed_limit_mph(self, admin_speed_limit_mph_: nds.rules.types.admin_speed_limit_mph.AdminSpeedLimitMph) -> None:
        self._choice = admin_speed_limit_mph_

    @property
    def admin_minimum_speed_kmh(self) -> nds.rules.types.admin_minimum_speed_kmh.AdminMinimumSpeedKmh:
        return self._choice

    @admin_minimum_speed_kmh.setter
    def admin_minimum_speed_kmh(self, admin_minimum_speed_kmh_: nds.rules.types.admin_minimum_speed_kmh.AdminMinimumSpeedKmh) -> None:
        self._choice = admin_minimum_speed_kmh_

    @property
    def admin_minimum_speed_mph(self) -> nds.rules.types.admin_minimum_speed_mph.AdminMinimumSpeedMph:
        return self._choice

    @admin_minimum_speed_mph.setter
    def admin_minimum_speed_mph(self, admin_minimum_speed_mph_: nds.rules.types.admin_minimum_speed_mph.AdminMinimumSpeedMph) -> None:
        self._choice = admin_minimum_speed_mph_

    @property
    def admin_advisory_speed_limit_kmh(self) -> nds.rules.types.admin_advisory_speed_limit_kmh.AdminAdvisorySpeedLimitKmh:
        return self._choice

    @admin_advisory_speed_limit_kmh.setter
    def admin_advisory_speed_limit_kmh(self, admin_advisory_speed_limit_kmh_: nds.rules.types.admin_advisory_speed_limit_kmh.AdminAdvisorySpeedLimitKmh) -> None:
        self._choice = admin_advisory_speed_limit_kmh_

    @property
    def admin_advisory_speed_limit_mph(self) -> nds.rules.types.admin_advisory_speed_limit_mph.AdminAdvisorySpeedLimitMph:
        return self._choice

    @admin_advisory_speed_limit_mph.setter
    def admin_advisory_speed_limit_mph(self, admin_advisory_speed_limit_mph_: nds.rules.types.admin_advisory_speed_limit_mph.AdminAdvisorySpeedLimitMph) -> None:
        self._choice = admin_advisory_speed_limit_mph_

    @property
    def toll_vignette_info(self) -> typing.Union[nds.rules.types.toll_vignette_info.TollVignetteInfo, None]:
        return self._choice

    @toll_vignette_info.setter
    def toll_vignette_info(self, toll_vignette_info_: typing.Union[nds.rules.types.toll_vignette_info.TollVignetteInfo, None]) -> None:
        self._choice = toll_vignette_info_

    @property
    def region_currencies(self) -> typing.Union[nds.rules.types.region_currencies.RegionCurrencies, None]:
        return self._choice

    @region_currencies.setter
    def region_currencies(self, region_currencies_: typing.Union[nds.rules.types.region_currencies.RegionCurrencies, None]) -> None:
        self._choice = region_currencies_

    @property
    def region_driving_rules(self) -> typing.Union[nds.rules.types.region_driving_rules.RegionDrivingRules, None]:
        return self._choice

    @region_driving_rules.setter
    def region_driving_rules(self, region_driving_rules_: typing.Union[nds.rules.types.region_driving_rules.RegionDrivingRules, None]) -> None:
        self._choice = region_driving_rules_

    @property
    def vehicle_light_conditions(self) -> typing.Union[nds.rules.types.vehicle_light_conditions.VehicleLightConditions, None]:
        return self._choice

    @vehicle_light_conditions.setter
    def vehicle_light_conditions(self, vehicle_light_conditions_: typing.Union[nds.rules.types.vehicle_light_conditions.VehicleLightConditions, None]) -> None:
        self._choice = vehicle_light_conditions_

    @property
    def requires_toll_registration(self) -> typing.Union[nds.rules.types.requires_toll_registration.RequiresTollRegistration, None]:
        return self._choice

    @requires_toll_registration.setter
    def requires_toll_registration(self, requires_toll_registration_: typing.Union[nds.rules.types.requires_toll_registration.RequiresTollRegistration, None]) -> None:
        self._choice = requires_toll_registration_

    @property
    def winter_season(self) -> typing.Union[nds.rules.types.winter_season.WinterSeason, None]:
        return self._choice

    @winter_season.setter
    def winter_season(self, winter_season_: typing.Union[nds.rules.types.winter_season.WinterSeason, None]) -> None:
        self._choice = winter_season_

    @property
    def winter_tires_required(self) -> typing.Union[nds.rules.types.winter_tires_required.WinterTiresRequired, None]:
        return self._choice

    @winter_tires_required.setter
    def winter_tires_required(self, winter_tires_required_: typing.Union[nds.rules.types.winter_tires_required.WinterTiresRequired, None]) -> None:
        self._choice = winter_tires_required_

    @property
    def fire_extinguisher_required(self) -> typing.Union[nds.rules.types.fire_extinguisher_required.FireExtinguisherRequired, None]:
        return self._choice

    @fire_extinguisher_required.setter
    def fire_extinguisher_required(self, fire_extinguisher_required_: typing.Union[nds.rules.types.fire_extinguisher_required.FireExtinguisherRequired, None]) -> None:
        self._choice = fire_extinguisher_required_

    @property
    def tow_rope_required(self) -> typing.Union[nds.rules.types.tow_rope_required.TowRopeRequired, None]:
        return self._choice

    @tow_rope_required.setter
    def tow_rope_required(self, tow_rope_required_: typing.Union[nds.rules.types.tow_rope_required.TowRopeRequired, None]) -> None:
        self._choice = tow_rope_required_

    @property
    def iso_details(self) -> typing.Union[nds.rules.types.iso_details.IsoDetails, None]:
        return self._choice

    @iso_details.setter
    def iso_details(self, iso_details_: typing.Union[nds.rules.types.iso_details.IsoDetails, None]) -> None:
        self._choice = iso_details_

    @property
    def right_hand_traffic(self) -> nds.rules.types.right_hand_traffic.RightHandTraffic:
        return self._choice

    @right_hand_traffic.setter
    def right_hand_traffic(self, right_hand_traffic_: nds.rules.types.right_hand_traffic.RightHandTraffic) -> None:
        self._choice = right_hand_traffic_

    @property
    def system_of_measurement(self) -> typing.Union[nds.rules.types.system_of_measurement.SystemOfMeasurement, None]:
        return self._choice

    @system_of_measurement.setter
    def system_of_measurement(self, system_of_measurement_: typing.Union[nds.rules.types.system_of_measurement.SystemOfMeasurement, None]) -> None:
        self._choice = system_of_measurement_

    @property
    def prohibited_passage(self) -> typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None]:
        return self._choice

    @prohibited_passage.setter
    def prohibited_passage(self, prohibited_passage_: typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None]) -> None:
        self._choice = prohibited_passage_

    @property
    def time_zone(self) -> typing.Union[nds.rules.types.time_zone.TimeZone, None]:
        return self._choice

    @time_zone.setter
    def time_zone(self, time_zone_: typing.Union[nds.rules.types.time_zone.TimeZone, None]) -> None:
        self._choice = time_zone_

    @property
    def official_languages(self) -> typing.Union[nds.rules.types.official_languages.OfficialLanguages, None]:
        return self._choice

    @official_languages.setter
    def official_languages(self, official_languages_: typing.Union[nds.rules.types.official_languages.OfficialLanguages, None]) -> None:
        self._choice = official_languages_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            return self.CHOICE_BLOOD_ALCOHOL_CONTENT_LIMIT
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            return self.CHOICE_WARNING_TRIANGLE_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            return self.CHOICE_FIRST_AID_KIT_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            return self.CHOICE_SAFETY_VESTS_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            return self.CHOICE_BREATHALIZER_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            return self.CHOICE_TURN_ON_RED_ALLOWED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            return self.CHOICE_DAYTIME_RUNNING_LIGHT
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            return self.CHOICE_ADMIN_SPEED_LIMIT_KMH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            return self.CHOICE_ADMIN_SPEED_LIMIT_MPH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            return self.CHOICE_ADMIN_MINIMUM_SPEED_KMH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            return self.CHOICE_ADMIN_MINIMUM_SPEED_MPH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            return self.CHOICE_ADMIN_ADVISORY_SPEED_LIMIT_KMH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            return self.CHOICE_ADMIN_ADVISORY_SPEED_LIMIT_MPH
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            return self.CHOICE_TOLL_VIGNETTE_INFO
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            return self.CHOICE_REGION_CURRENCIES
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            return self.CHOICE_REGION_DRIVING_RULES
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            return self.CHOICE_VEHICLE_LIGHT_CONDITIONS
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            return self.CHOICE_REQUIRES_TOLL_REGISTRATION
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            return self.CHOICE_WINTER_SEASON
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            return self.CHOICE_WINTER_TIRES_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            return self.CHOICE_FIRE_EXTINGUISHER_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            return self.CHOICE_TOW_ROPE_REQUIRED
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            return self.CHOICE_ISO_DETAILS
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            return self.CHOICE_RIGHT_HAND_TRAFFIC
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            return self.CHOICE_SYSTEM_OF_MEASUREMENT
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            return self.CHOICE_PROHIBITED_PASSAGE
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            return self.CHOICE_TIME_ZONE
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            return self.CHOICE_OFFICIAL_LANGUAGES
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RulesRegionAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            zserio_context.blood_alcohol_content_limit.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            zserio_context.admin_speed_limit_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            zserio_context.admin_speed_limit_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            zserio_context.admin_minimum_speed_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            zserio_context.admin_minimum_speed_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            zserio_context.admin_advisory_speed_limit_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_context.admin_advisory_speed_limit_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            self._choice.init_packing_context(zserio_context.region_currencies)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            self._choice.init_packing_context(zserio_context.region_driving_rules)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            self._choice.init_packing_context(zserio_context.winter_season)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            self._choice.init_packing_context(zserio_context.system_of_measurement)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            pass
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            self._choice.init_packing_context(zserio_context.time_zone)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            self._choice.init_packing_context(zserio_context.official_languages)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RulesRegionAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            end_bitposition += zserio_context.blood_alcohol_content_limit.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.admin_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.admin_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            end_bitposition += zserio_context.admin_minimum_speed_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            end_bitposition += zserio_context.admin_minimum_speed_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.admin_advisory_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.admin_advisory_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.region_currencies, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.region_driving_rules, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.winter_season, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.system_of_measurement, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.official_languages, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RulesRegionAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            end_bitposition += zserio_context.blood_alcohol_content_limit.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.admin_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.admin_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            end_bitposition += zserio_context.admin_minimum_speed_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            end_bitposition += zserio_context.admin_minimum_speed_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.admin_advisory_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.admin_advisory_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.region_currencies, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.region_driving_rules, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.winter_season, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            end_bitposition += 1
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.system_of_measurement, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.official_languages, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            self._choice = nds.rules.types.warning_triangle_required.WarningTriangleRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            self._choice = nds.rules.types.first_aid_kit_required.FirstAidKitRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            self._choice = nds.rules.types.safety_vests_required.SafetyVestsRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            self._choice = nds.rules.types.breathalizer_required.BreathalizerRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            self._choice = nds.rules.types.toll_vignette_info.TollVignetteInfo.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            self._choice = nds.rules.types.region_currencies.RegionCurrencies.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            self._choice = nds.rules.types.region_driving_rules.RegionDrivingRules.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            self._choice = nds.rules.types.vehicle_light_conditions.VehicleLightConditions.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            self._choice = nds.rules.types.requires_toll_registration.RequiresTollRegistration.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            self._choice = nds.rules.types.winter_season.WinterSeason.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            self._choice = nds.rules.types.winter_tires_required.WinterTiresRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            self._choice = nds.rules.types.fire_extinguisher_required.FireExtinguisherRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            self._choice = nds.rules.types.tow_rope_required.TowRopeRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            self._choice = nds.rules.types.iso_details.IsoDetails.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            self._choice = nds.rules.types.system_of_measurement.SystemOfMeasurement.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            self._choice = nds.rules.types.prohibited_passage.ProhibitedPassage.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            self._choice = nds.rules.types.time_zone.TimeZone.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            self._choice = nds.rules.types.official_languages.OfficialLanguages.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

    def read_packed(self, zserio_context: RulesRegionAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            self._choice = zserio_context.blood_alcohol_content_limit.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            self._choice = nds.rules.types.warning_triangle_required.WarningTriangleRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            self._choice = nds.rules.types.first_aid_kit_required.FirstAidKitRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            self._choice = nds.rules.types.safety_vests_required.SafetyVestsRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            self._choice = nds.rules.types.breathalizer_required.BreathalizerRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            self._choice = zserio_context.admin_speed_limit_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_context.admin_speed_limit_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            self._choice = zserio_context.admin_minimum_speed_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            self._choice = zserio_context.admin_minimum_speed_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            self._choice = zserio_context.admin_advisory_speed_limit_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_context.admin_advisory_speed_limit_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            self._choice = nds.rules.types.toll_vignette_info.TollVignetteInfo.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            self._choice = nds.rules.types.region_currencies.RegionCurrencies.from_reader_packed(zserio_context.region_currencies, zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            self._choice = nds.rules.types.region_driving_rules.RegionDrivingRules.from_reader_packed(zserio_context.region_driving_rules, zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            self._choice = nds.rules.types.vehicle_light_conditions.VehicleLightConditions.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            self._choice = nds.rules.types.requires_toll_registration.RequiresTollRegistration.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            self._choice = nds.rules.types.winter_season.WinterSeason.from_reader_packed(zserio_context.winter_season, zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            self._choice = nds.rules.types.winter_tires_required.WinterTiresRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            self._choice = nds.rules.types.fire_extinguisher_required.FireExtinguisherRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            self._choice = nds.rules.types.tow_rope_required.TowRopeRequired.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            self._choice = nds.rules.types.iso_details.IsoDetails.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            self._choice = nds.rules.types.system_of_measurement.SystemOfMeasurement.from_reader_packed(zserio_context.system_of_measurement, zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            self._choice = nds.rules.types.prohibited_passage.ProhibitedPassage.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            self._choice = nds.rules.types.time_zone.TimeZone.from_reader_packed(zserio_context.time_zone, zserio_reader)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            self._choice = nds.rules.types.official_languages.OfficialLanguages.from_reader_packed(zserio_context.official_languages, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

    def write_packed(self, zserio_context: RulesRegionAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT):
            zserio_context.blood_alcohol_content_limit.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SAFETY_VESTS_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.BREATHALIZER_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TURN_ON_RED_ALLOWED):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC):
            zserio_context.admin_speed_limit_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL):
            zserio_context.admin_speed_limit_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC):
            zserio_context.admin_minimum_speed_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL):
            zserio_context.admin_minimum_speed_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC):
            zserio_context.admin_advisory_speed_limit_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_context.admin_advisory_speed_limit_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOLL_VIGNETTE_INFO):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_CURRENCIES):
            self._choice.write_packed(zserio_context.region_currencies, zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REGION_DRIVING_RULES):
            self._choice.write_packed(zserio_context.region_driving_rules, zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.LIGHT_CONDITIONS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_SEASON):
            self._choice.write_packed(zserio_context.winter_season, zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.WINTER_TIRES_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TOW_ROPE_REQUIRED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.ISO_DETAILS):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.RIGHT_HAND_TRAFFIC):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT):
            self._choice.write_packed(zserio_context.system_of_measurement, zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.PROHIBITED_PASSAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.TIME_ZONE):
            self._choice.write_packed(zserio_context.time_zone, zserio_writer)
        elif selector == (nds.rules.attributes.rules_region_attribute_type.RulesRegionAttributeType.OFFICIAL_LANGUAGES):
            self._choice.write_packed(zserio_context.official_languages, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesRegionAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._blood_alcohol_content_limit_ = zserio.array.DeltaContext()
            self._admin_speed_limit_kmh_ = zserio.array.DeltaContext()
            self._admin_speed_limit_mph_ = zserio.array.DeltaContext()
            self._admin_minimum_speed_kmh_ = zserio.array.DeltaContext()
            self._admin_minimum_speed_mph_ = zserio.array.DeltaContext()
            self._admin_advisory_speed_limit_kmh_ = zserio.array.DeltaContext()
            self._admin_advisory_speed_limit_mph_ = zserio.array.DeltaContext()
            self._region_currencies_ = nds.rules.types.region_currencies.RegionCurrencies.ZserioPackingContext()
            self._region_driving_rules_ = nds.rules.types.region_driving_rules.RegionDrivingRules.ZserioPackingContext()
            self._winter_season_ = nds.rules.types.winter_season.WinterSeason.ZserioPackingContext()
            self._system_of_measurement_ = zserio.array.DeltaContext()
            self._time_zone_ = nds.rules.types.time_zone.TimeZone.ZserioPackingContext()
            self._official_languages_ = nds.rules.types.official_languages.OfficialLanguages.ZserioPackingContext()

        @property
        def blood_alcohol_content_limit(self):
            return self._blood_alcohol_content_limit_

        @property
        def admin_speed_limit_kmh(self):
            return self._admin_speed_limit_kmh_

        @property
        def admin_speed_limit_mph(self):
            return self._admin_speed_limit_mph_

        @property
        def admin_minimum_speed_kmh(self):
            return self._admin_minimum_speed_kmh_

        @property
        def admin_minimum_speed_mph(self):
            return self._admin_minimum_speed_mph_

        @property
        def admin_advisory_speed_limit_kmh(self):
            return self._admin_advisory_speed_limit_kmh_

        @property
        def admin_advisory_speed_limit_mph(self):
            return self._admin_advisory_speed_limit_mph_

        @property
        def region_currencies(self):
            return self._region_currencies_

        @property
        def region_driving_rules(self):
            return self._region_driving_rules_

        @property
        def winter_season(self):
            return self._winter_season_

        @property
        def system_of_measurement(self):
            return self._system_of_measurement_

        @property
        def time_zone(self):
            return self._time_zone_

        @property
        def official_languages(self):
            return self._official_languages_

    CHOICE_BLOOD_ALCOHOL_CONTENT_LIMIT = 0
    CHOICE_WARNING_TRIANGLE_REQUIRED = 1
    CHOICE_FIRST_AID_KIT_REQUIRED = 2
    CHOICE_SAFETY_VESTS_REQUIRED = 3
    CHOICE_BREATHALIZER_REQUIRED = 4
    CHOICE_TURN_ON_RED_ALLOWED = 5
    CHOICE_DAYTIME_RUNNING_LIGHT = 6
    CHOICE_ADMIN_SPEED_LIMIT_KMH = 7
    CHOICE_ADMIN_SPEED_LIMIT_MPH = 8
    CHOICE_ADMIN_MINIMUM_SPEED_KMH = 9
    CHOICE_ADMIN_MINIMUM_SPEED_MPH = 10
    CHOICE_ADMIN_ADVISORY_SPEED_LIMIT_KMH = 11
    CHOICE_ADMIN_ADVISORY_SPEED_LIMIT_MPH = 12
    CHOICE_TOLL_VIGNETTE_INFO = 13
    CHOICE_REGION_CURRENCIES = 14
    CHOICE_REGION_DRIVING_RULES = 15
    CHOICE_VEHICLE_LIGHT_CONDITIONS = 16
    CHOICE_REQUIRES_TOLL_REGISTRATION = 17
    CHOICE_WINTER_SEASON = 18
    CHOICE_WINTER_TIRES_REQUIRED = 19
    CHOICE_FIRE_EXTINGUISHER_REQUIRED = 20
    CHOICE_TOW_ROPE_REQUIRED = 21
    CHOICE_ISO_DETAILS = 22
    CHOICE_RIGHT_HAND_TRAFFIC = 23
    CHOICE_SYSTEM_OF_MEASUREMENT = 24
    CHOICE_PROHIBITED_PASSAGE = 25
    CHOICE_TIME_ZONE = 26
    CHOICE_OFFICIAL_LANGUAGES = 27
    UNDEFINED_CHOICE = -1
