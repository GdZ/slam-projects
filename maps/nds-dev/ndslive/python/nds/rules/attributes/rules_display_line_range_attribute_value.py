# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.rules.attributes.rules_display_line_range_attribute_type
import nds.rules.types.adr_tunnel_category
import nds.rules.types.advisory_speed_limit_kmh
import nds.rules.types.advisory_speed_limit_mph
import nds.rules.types.automated_driving_clearance
import nds.rules.types.dont_stop_zone
import nds.rules.types.license_plate_restriction
import nds.rules.types.minimum_speed_kmh
import nds.rules.types.minimum_speed_mph
import nds.rules.types.non_default_driving_side
import nds.rules.types.overtaking_prohibition
import nds.rules.types.prohibited_parking
import nds.rules.types.prohibited_passage
import nds.rules.types.prohibited_stopping
import nds.rules.types.roadworks
import nds.rules.types.seasonal_closed
import nds.rules.types.speed_limit_kmh
import nds.rules.types.speed_limit_mph
import nds.rules.types.traffic_enforcement_zone
import nds.rules.types.traffic_zone

class RulesDisplayLineRangeAttributeValue:
    def __init__(
            self,
            type_: nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType,
            *,
            prohibited_passage_: typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None] = None,
            overtaking_prohibition_: typing.Union[nds.rules.types.overtaking_prohibition.OvertakingProhibition, None] = None,
            speed_limit_kmh_: typing.Union[nds.rules.types.speed_limit_kmh.SpeedLimitKmh, None] = None,
            speed_limit_mph_: typing.Union[nds.rules.types.speed_limit_mph.SpeedLimitMph, None] = None,
            minimum_speed_kmh_: typing.Union[nds.rules.types.minimum_speed_kmh.MinimumSpeedKmh, None] = None,
            minimum_speed_mph_: typing.Union[nds.rules.types.minimum_speed_mph.MinimumSpeedMph, None] = None,
            advisory_speed_limit_kmh_: typing.Union[nds.rules.types.advisory_speed_limit_kmh.AdvisorySpeedLimitKmh, None] = None,
            advisory_speed_limit_mph_: typing.Union[nds.rules.types.advisory_speed_limit_mph.AdvisorySpeedLimitMph, None] = None,
            traffic_enforcement_zone_: typing.Union[nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone, None] = None,
            non_default_driving_side_: typing.Union[nds.rules.types.non_default_driving_side.NonDefaultDrivingSide, None] = None,
            traffic_zone_: typing.Union[nds.rules.types.traffic_zone.TrafficZone, None] = None,
            adr_tunnel_category_: typing.Union[nds.rules.types.adr_tunnel_category.AdrTunnelCategory, None] = None,
            license_plate_restriction_: typing.Union[nds.rules.types.license_plate_restriction.LicensePlateRestriction, None] = None,
            seasonal_closed_: typing.Union[nds.rules.types.seasonal_closed.SeasonalClosed, None] = None,
            prohibited_parking_: typing.Union[nds.rules.types.prohibited_parking.ProhibitedParking, None] = None,
            prohibited_stopping_: typing.Union[nds.rules.types.prohibited_stopping.ProhibitedStopping, None] = None,
            dont_stop_zone_: typing.Union[nds.rules.types.dont_stop_zone.DontStopZone, None] = None,
            automated_driving_clearance_: typing.Union[nds.rules.types.automated_driving_clearance.AutomatedDrivingClearance, None] = None,
            roadworks_: typing.Union[nds.rules.types.roadworks.Roadworks, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if prohibited_passage_ is not None:
            self._choice = prohibited_passage_
        if overtaking_prohibition_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = overtaking_prohibition_
        if speed_limit_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = speed_limit_kmh_
        if speed_limit_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = speed_limit_mph_
        if minimum_speed_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = minimum_speed_kmh_
        if minimum_speed_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = minimum_speed_mph_
        if advisory_speed_limit_kmh_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = advisory_speed_limit_kmh_
        if advisory_speed_limit_mph_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = advisory_speed_limit_mph_
        if traffic_enforcement_zone_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = traffic_enforcement_zone_
        if non_default_driving_side_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = non_default_driving_side_
        if traffic_zone_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = traffic_zone_
        if adr_tunnel_category_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = adr_tunnel_category_
        if license_plate_restriction_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = license_plate_restriction_
        if seasonal_closed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = seasonal_closed_
        if prohibited_parking_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = prohibited_parking_
        if prohibited_stopping_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = prohibited_stopping_
        if dont_stop_zone_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = dont_stop_zone_
        if automated_driving_clearance_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = automated_driving_clearance_
        if roadworks_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RulesDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = roadworks_

    @classmethod
    def from_reader(
            cls: typing.Type['RulesDisplayLineRangeAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType) -> 'RulesDisplayLineRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RulesDisplayLineRangeAttributeValue'],
            zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType) -> 'RulesDisplayLineRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RulesDisplayLineRangeAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType:
        return self._type_

    @property
    def prohibited_passage(self) -> typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None]:
        return self._choice

    @prohibited_passage.setter
    def prohibited_passage(self, prohibited_passage_: typing.Union[nds.rules.types.prohibited_passage.ProhibitedPassage, None]) -> None:
        self._choice = prohibited_passage_

    @property
    def overtaking_prohibition(self) -> typing.Union[nds.rules.types.overtaking_prohibition.OvertakingProhibition, None]:
        return self._choice

    @overtaking_prohibition.setter
    def overtaking_prohibition(self, overtaking_prohibition_: typing.Union[nds.rules.types.overtaking_prohibition.OvertakingProhibition, None]) -> None:
        self._choice = overtaking_prohibition_

    @property
    def speed_limit_kmh(self) -> nds.rules.types.speed_limit_kmh.SpeedLimitKmh:
        return self._choice

    @speed_limit_kmh.setter
    def speed_limit_kmh(self, speed_limit_kmh_: nds.rules.types.speed_limit_kmh.SpeedLimitKmh) -> None:
        self._choice = speed_limit_kmh_

    @property
    def speed_limit_mph(self) -> nds.rules.types.speed_limit_mph.SpeedLimitMph:
        return self._choice

    @speed_limit_mph.setter
    def speed_limit_mph(self, speed_limit_mph_: nds.rules.types.speed_limit_mph.SpeedLimitMph) -> None:
        self._choice = speed_limit_mph_

    @property
    def minimum_speed_kmh(self) -> nds.rules.types.minimum_speed_kmh.MinimumSpeedKmh:
        return self._choice

    @minimum_speed_kmh.setter
    def minimum_speed_kmh(self, minimum_speed_kmh_: nds.rules.types.minimum_speed_kmh.MinimumSpeedKmh) -> None:
        self._choice = minimum_speed_kmh_

    @property
    def minimum_speed_mph(self) -> nds.rules.types.minimum_speed_mph.MinimumSpeedMph:
        return self._choice

    @minimum_speed_mph.setter
    def minimum_speed_mph(self, minimum_speed_mph_: nds.rules.types.minimum_speed_mph.MinimumSpeedMph) -> None:
        self._choice = minimum_speed_mph_

    @property
    def advisory_speed_limit_kmh(self) -> nds.rules.types.advisory_speed_limit_kmh.AdvisorySpeedLimitKmh:
        return self._choice

    @advisory_speed_limit_kmh.setter
    def advisory_speed_limit_kmh(self, advisory_speed_limit_kmh_: nds.rules.types.advisory_speed_limit_kmh.AdvisorySpeedLimitKmh) -> None:
        self._choice = advisory_speed_limit_kmh_

    @property
    def advisory_speed_limit_mph(self) -> nds.rules.types.advisory_speed_limit_mph.AdvisorySpeedLimitMph:
        return self._choice

    @advisory_speed_limit_mph.setter
    def advisory_speed_limit_mph(self, advisory_speed_limit_mph_: nds.rules.types.advisory_speed_limit_mph.AdvisorySpeedLimitMph) -> None:
        self._choice = advisory_speed_limit_mph_

    @property
    def traffic_enforcement_zone(self) -> typing.Union[nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone, None]:
        return self._choice

    @traffic_enforcement_zone.setter
    def traffic_enforcement_zone(self, traffic_enforcement_zone_: typing.Union[nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone, None]) -> None:
        self._choice = traffic_enforcement_zone_

    @property
    def non_default_driving_side(self) -> typing.Union[nds.rules.types.non_default_driving_side.NonDefaultDrivingSide, None]:
        return self._choice

    @non_default_driving_side.setter
    def non_default_driving_side(self, non_default_driving_side_: typing.Union[nds.rules.types.non_default_driving_side.NonDefaultDrivingSide, None]) -> None:
        self._choice = non_default_driving_side_

    @property
    def traffic_zone(self) -> typing.Union[nds.rules.types.traffic_zone.TrafficZone, None]:
        return self._choice

    @traffic_zone.setter
    def traffic_zone(self, traffic_zone_: typing.Union[nds.rules.types.traffic_zone.TrafficZone, None]) -> None:
        self._choice = traffic_zone_

    @property
    def adr_tunnel_category(self) -> typing.Union[nds.rules.types.adr_tunnel_category.AdrTunnelCategory, None]:
        return self._choice

    @adr_tunnel_category.setter
    def adr_tunnel_category(self, adr_tunnel_category_: typing.Union[nds.rules.types.adr_tunnel_category.AdrTunnelCategory, None]) -> None:
        self._choice = adr_tunnel_category_

    @property
    def license_plate_restriction(self) -> typing.Union[nds.rules.types.license_plate_restriction.LicensePlateRestriction, None]:
        return self._choice

    @license_plate_restriction.setter
    def license_plate_restriction(self, license_plate_restriction_: typing.Union[nds.rules.types.license_plate_restriction.LicensePlateRestriction, None]) -> None:
        self._choice = license_plate_restriction_

    @property
    def seasonal_closed(self) -> typing.Union[nds.rules.types.seasonal_closed.SeasonalClosed, None]:
        return self._choice

    @seasonal_closed.setter
    def seasonal_closed(self, seasonal_closed_: typing.Union[nds.rules.types.seasonal_closed.SeasonalClosed, None]) -> None:
        self._choice = seasonal_closed_

    @property
    def prohibited_parking(self) -> typing.Union[nds.rules.types.prohibited_parking.ProhibitedParking, None]:
        return self._choice

    @prohibited_parking.setter
    def prohibited_parking(self, prohibited_parking_: typing.Union[nds.rules.types.prohibited_parking.ProhibitedParking, None]) -> None:
        self._choice = prohibited_parking_

    @property
    def prohibited_stopping(self) -> typing.Union[nds.rules.types.prohibited_stopping.ProhibitedStopping, None]:
        return self._choice

    @prohibited_stopping.setter
    def prohibited_stopping(self, prohibited_stopping_: typing.Union[nds.rules.types.prohibited_stopping.ProhibitedStopping, None]) -> None:
        self._choice = prohibited_stopping_

    @property
    def dont_stop_zone(self) -> typing.Union[nds.rules.types.dont_stop_zone.DontStopZone, None]:
        return self._choice

    @dont_stop_zone.setter
    def dont_stop_zone(self, dont_stop_zone_: typing.Union[nds.rules.types.dont_stop_zone.DontStopZone, None]) -> None:
        self._choice = dont_stop_zone_

    @property
    def automated_driving_clearance(self) -> typing.Union[nds.rules.types.automated_driving_clearance.AutomatedDrivingClearance, None]:
        return self._choice

    @automated_driving_clearance.setter
    def automated_driving_clearance(self, automated_driving_clearance_: typing.Union[nds.rules.types.automated_driving_clearance.AutomatedDrivingClearance, None]) -> None:
        self._choice = automated_driving_clearance_

    @property
    def roadworks(self) -> typing.Union[nds.rules.types.roadworks.Roadworks, None]:
        return self._choice

    @roadworks.setter
    def roadworks(self, roadworks_: typing.Union[nds.rules.types.roadworks.Roadworks, None]) -> None:
        self._choice = roadworks_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            return self.CHOICE_PROHIBITED_PASSAGE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            return self.CHOICE_OVERTAKING_PROHIBITION
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            return self.CHOICE_SPEED_LIMIT_KMH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            return self.CHOICE_SPEED_LIMIT_MPH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            return self.CHOICE_MINIMUM_SPEED_KMH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            return self.CHOICE_MINIMUM_SPEED_MPH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            return self.CHOICE_ADVISORY_SPEED_LIMIT_KMH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            return self.CHOICE_ADVISORY_SPEED_LIMIT_MPH
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            return self.CHOICE_TRAFFIC_ENFORCEMENT_ZONE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            return self.CHOICE_NON_DEFAULT_DRIVING_SIDE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            return self.CHOICE_TRAFFIC_ZONE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            return self.CHOICE_ADR_TUNNEL_CATEGORY
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            return self.CHOICE_LICENSE_PLATE_RESTRICTION
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            return self.CHOICE_SEASONAL_CLOSED
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            return self.CHOICE_PROHIBITED_PARKING
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            return self.CHOICE_PROHIBITED_STOPPING
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            return self.CHOICE_DONT_STOP_ZONE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            return self.CHOICE_AUTOMATED_DRIVING_CLEARANCE
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            return self.CHOICE_ROADWORKS
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            zserio_context.speed_limit_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            zserio_context.speed_limit_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            zserio_context.minimum_speed_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            zserio_context.minimum_speed_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            zserio_context.advisory_speed_limit_kmh.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_context.advisory_speed_limit_mph.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.init_packing_context(zserio_context.traffic_enforcement_zone)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            self._choice.init_packing_context(zserio_context.traffic_zone)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            self._choice.init_packing_context(zserio_context.adr_tunnel_category)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            self._choice.init_packing_context(zserio_context.license_plate_restriction)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            pass
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            self._choice.init_packing_context(zserio_context.automated_driving_clearance)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            end_bitposition += zserio_context.minimum_speed_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            end_bitposition += zserio_context.minimum_speed_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.advisory_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.advisory_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_enforcement_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.adr_tunnel_category, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.license_plate_restriction, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.automated_driving_clearance, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += 8
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            end_bitposition += zserio_context.minimum_speed_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            end_bitposition += zserio_context.minimum_speed_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            end_bitposition += zserio_context.advisory_speed_limit_kmh.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            end_bitposition += zserio_context.advisory_speed_limit_mph.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_enforcement_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_zone, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.adr_tunnel_category, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.license_plate_restriction, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.automated_driving_clearance, end_bitposition)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            self._choice = nds.rules.types.prohibited_passage.ProhibitedPassage.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            self._choice = nds.rules.types.overtaking_prohibition.OvertakingProhibition.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice = nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            self._choice = nds.rules.types.non_default_driving_side.NonDefaultDrivingSide.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            self._choice = nds.rules.types.traffic_zone.TrafficZone.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            self._choice = nds.rules.types.adr_tunnel_category.AdrTunnelCategory.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            self._choice = nds.rules.types.license_plate_restriction.LicensePlateRestriction.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            self._choice = nds.rules.types.seasonal_closed.SeasonalClosed.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            self._choice = nds.rules.types.prohibited_parking.ProhibitedParking.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            self._choice = nds.rules.types.prohibited_stopping.ProhibitedStopping.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            self._choice = nds.rules.types.dont_stop_zone.DontStopZone.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            self._choice = nds.rules.types.automated_driving_clearance.AutomatedDrivingClearance.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            self._choice = nds.rules.types.roadworks.Roadworks.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

    def read_packed(self, zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            self._choice = nds.rules.types.prohibited_passage.ProhibitedPassage.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            self._choice = nds.rules.types.overtaking_prohibition.OvertakingProhibition.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            self._choice = zserio_context.speed_limit_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_context.speed_limit_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            self._choice = zserio_context.minimum_speed_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            self._choice = zserio_context.minimum_speed_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            self._choice = zserio_context.advisory_speed_limit_kmh.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            self._choice = zserio_context.advisory_speed_limit_mph.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice = nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone.from_reader_packed(zserio_context.traffic_enforcement_zone, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            self._choice = nds.rules.types.non_default_driving_side.NonDefaultDrivingSide.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            self._choice = nds.rules.types.traffic_zone.TrafficZone.from_reader_packed(zserio_context.traffic_zone, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            self._choice = nds.rules.types.adr_tunnel_category.AdrTunnelCategory.from_reader_packed(zserio_context.adr_tunnel_category, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            self._choice = nds.rules.types.license_plate_restriction.LicensePlateRestriction.from_reader_packed(zserio_context.license_plate_restriction, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            self._choice = nds.rules.types.seasonal_closed.SeasonalClosed.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            self._choice = nds.rules.types.prohibited_parking.ProhibitedParking.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            self._choice = nds.rules.types.prohibited_stopping.ProhibitedStopping.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            self._choice = nds.rules.types.dont_stop_zone.DontStopZone.from_reader(zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            self._choice = nds.rules.types.automated_driving_clearance.AutomatedDrivingClearance.from_reader_packed(zserio_context.automated_driving_clearance, zserio_reader)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            self._choice = nds.rules.types.roadworks.Roadworks.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

    def write_packed(self, zserio_context: RulesDisplayLineRangeAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PASSAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.OVERTAKING_PROHIBITION):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_METRIC):
            zserio_context.speed_limit_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SPEED_LIMIT_IMPERIAL):
            zserio_context.speed_limit_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_METRIC):
            zserio_context.minimum_speed_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.MINIMUM_SPEED_IMPERIAL):
            zserio_context.minimum_speed_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_METRIC):
            zserio_context.advisory_speed_limit_kmh.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADVISORY_SPEED_LIMIT_IMPERIAL):
            zserio_context.advisory_speed_limit_mph.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.write_packed(zserio_context.traffic_enforcement_zone, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.NON_DEFAULT_DRIVING_SIDE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.TRAFFIC_ZONE):
            self._choice.write_packed(zserio_context.traffic_zone, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ADR_TUNNEL_CATEGORY):
            self._choice.write_packed(zserio_context.adr_tunnel_category, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.LICENSE_PLATE_RESTRICTION):
            self._choice.write_packed(zserio_context.license_plate_restriction, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.SEASONAL_CLOSED):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_PARKING):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.PROHIBITED_STOPPING):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.DONT_STOP_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.AUTOMATED_DRIVING_CLEARANCE):
            self._choice.write_packed(zserio_context.automated_driving_clearance, zserio_writer)
        elif selector == (nds.rules.attributes.rules_display_line_range_attribute_type.RulesDisplayLineRangeAttributeType.ROADWORKS):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RulesDisplayLineRangeAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._speed_limit_kmh_ = zserio.array.DeltaContext()
            self._speed_limit_mph_ = zserio.array.DeltaContext()
            self._minimum_speed_kmh_ = zserio.array.DeltaContext()
            self._minimum_speed_mph_ = zserio.array.DeltaContext()
            self._advisory_speed_limit_kmh_ = zserio.array.DeltaContext()
            self._advisory_speed_limit_mph_ = zserio.array.DeltaContext()
            self._traffic_enforcement_zone_ = nds.rules.types.traffic_enforcement_zone.TrafficEnforcementZone.ZserioPackingContext()
            self._traffic_zone_ = zserio.array.DeltaContext()
            self._adr_tunnel_category_ = zserio.array.DeltaContext()
            self._license_plate_restriction_ = nds.rules.types.license_plate_restriction.LicensePlateRestriction.ZserioPackingContext()
            self._automated_driving_clearance_ = zserio.array.DeltaContext()

        @property
        def speed_limit_kmh(self):
            return self._speed_limit_kmh_

        @property
        def speed_limit_mph(self):
            return self._speed_limit_mph_

        @property
        def minimum_speed_kmh(self):
            return self._minimum_speed_kmh_

        @property
        def minimum_speed_mph(self):
            return self._minimum_speed_mph_

        @property
        def advisory_speed_limit_kmh(self):
            return self._advisory_speed_limit_kmh_

        @property
        def advisory_speed_limit_mph(self):
            return self._advisory_speed_limit_mph_

        @property
        def traffic_enforcement_zone(self):
            return self._traffic_enforcement_zone_

        @property
        def traffic_zone(self):
            return self._traffic_zone_

        @property
        def adr_tunnel_category(self):
            return self._adr_tunnel_category_

        @property
        def license_plate_restriction(self):
            return self._license_plate_restriction_

        @property
        def automated_driving_clearance(self):
            return self._automated_driving_clearance_

    CHOICE_PROHIBITED_PASSAGE = 0
    CHOICE_OVERTAKING_PROHIBITION = 1
    CHOICE_SPEED_LIMIT_KMH = 2
    CHOICE_SPEED_LIMIT_MPH = 3
    CHOICE_MINIMUM_SPEED_KMH = 4
    CHOICE_MINIMUM_SPEED_MPH = 5
    CHOICE_ADVISORY_SPEED_LIMIT_KMH = 6
    CHOICE_ADVISORY_SPEED_LIMIT_MPH = 7
    CHOICE_TRAFFIC_ENFORCEMENT_ZONE = 8
    CHOICE_NON_DEFAULT_DRIVING_SIDE = 9
    CHOICE_TRAFFIC_ZONE = 10
    CHOICE_ADR_TUNNEL_CATEGORY = 11
    CHOICE_LICENSE_PLATE_RESTRICTION = 12
    CHOICE_SEASONAL_CLOSED = 13
    CHOICE_PROHIBITED_PARKING = 14
    CHOICE_PROHIBITED_STOPPING = 15
    CHOICE_DONT_STOP_ZONE = 16
    CHOICE_AUTOMATED_DRIVING_CLEARANCE = 17
    CHOICE_ROADWORKS = 18
    UNDEFINED_CHOICE = -1
