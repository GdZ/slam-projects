# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RulesRegionAttributeType(zserio.Enum):
    BLOOD_ALCOHOL_CONTENT_LIMIT = 0
    WARNING_TRIANGLE_REQUIRED = 1
    FIRST_AID_KIT_REQUIRED = 2
    SAFETY_VESTS_REQUIRED = 3
    BREATHALIZER_REQUIRED = 4
    TURN_ON_RED_ALLOWED = 5
    DAYTIME_RUNNING_LIGHT = 6
    ADMIN_SPEED_LIMIT_METRIC = 7
    ADMIN_SPEED_LIMIT_IMPERIAL = 8
    ADMIN_MINIMUM_SPEED_METRIC = 9
    ADMIN_MINIMUM_SPEED_IMPERIAL = 10
    ADMIN_ADVISORY_SPEED_LIMIT_METRIC = 11
    ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL = 12
    TOLL_VIGNETTE_INFO = 13
    REGION_CURRENCIES = 14
    REGION_DRIVING_RULES = 15
    LIGHT_CONDITIONS = 16
    REQUIRES_TOLL_REGISTRATION = 17
    WINTER_SEASON = 18
    WINTER_TIRES_REQUIRED = 19
    FIRE_EXTINGUISHER_REQUIRED = 20
    TOW_ROPE_REQUIRED = 21
    ISO_DETAILS = 22
    RIGHT_HAND_TRAFFIC = 23
    SYSTEM_OF_MEASUREMENT = 24
    PROHIBITED_PASSAGE = 25
    TIME_ZONE = 26
    OFFICIAL_LANGUAGES = 27

    @classmethod
    def from_name(cls: typing.Type['RulesRegionAttributeType'], item_name: str) -> 'RulesRegionAttributeType':
        if item_name == 'BLOOD_ALCOHOL_CONTENT_LIMIT':
            item = RulesRegionAttributeType.BLOOD_ALCOHOL_CONTENT_LIMIT
        elif item_name == 'WARNING_TRIANGLE_REQUIRED':
            item = RulesRegionAttributeType.WARNING_TRIANGLE_REQUIRED
        elif item_name == 'FIRST_AID_KIT_REQUIRED':
            item = RulesRegionAttributeType.FIRST_AID_KIT_REQUIRED
        elif item_name == 'SAFETY_VESTS_REQUIRED':
            item = RulesRegionAttributeType.SAFETY_VESTS_REQUIRED
        elif item_name == 'BREATHALIZER_REQUIRED':
            item = RulesRegionAttributeType.BREATHALIZER_REQUIRED
        elif item_name == 'TURN_ON_RED_ALLOWED':
            item = RulesRegionAttributeType.TURN_ON_RED_ALLOWED
        elif item_name == 'DAYTIME_RUNNING_LIGHT':
            item = RulesRegionAttributeType.DAYTIME_RUNNING_LIGHT
        elif item_name == 'ADMIN_SPEED_LIMIT_METRIC':
            item = RulesRegionAttributeType.ADMIN_SPEED_LIMIT_METRIC
        elif item_name == 'ADMIN_SPEED_LIMIT_IMPERIAL':
            item = RulesRegionAttributeType.ADMIN_SPEED_LIMIT_IMPERIAL
        elif item_name == 'ADMIN_MINIMUM_SPEED_METRIC':
            item = RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_METRIC
        elif item_name == 'ADMIN_MINIMUM_SPEED_IMPERIAL':
            item = RulesRegionAttributeType.ADMIN_MINIMUM_SPEED_IMPERIAL
        elif item_name == 'ADMIN_ADVISORY_SPEED_LIMIT_METRIC':
            item = RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_METRIC
        elif item_name == 'ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL':
            item = RulesRegionAttributeType.ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL
        elif item_name == 'TOLL_VIGNETTE_INFO':
            item = RulesRegionAttributeType.TOLL_VIGNETTE_INFO
        elif item_name == 'REGION_CURRENCIES':
            item = RulesRegionAttributeType.REGION_CURRENCIES
        elif item_name == 'REGION_DRIVING_RULES':
            item = RulesRegionAttributeType.REGION_DRIVING_RULES
        elif item_name == 'LIGHT_CONDITIONS':
            item = RulesRegionAttributeType.LIGHT_CONDITIONS
        elif item_name == 'REQUIRES_TOLL_REGISTRATION':
            item = RulesRegionAttributeType.REQUIRES_TOLL_REGISTRATION
        elif item_name == 'WINTER_SEASON':
            item = RulesRegionAttributeType.WINTER_SEASON
        elif item_name == 'WINTER_TIRES_REQUIRED':
            item = RulesRegionAttributeType.WINTER_TIRES_REQUIRED
        elif item_name == 'FIRE_EXTINGUISHER_REQUIRED':
            item = RulesRegionAttributeType.FIRE_EXTINGUISHER_REQUIRED
        elif item_name == 'TOW_ROPE_REQUIRED':
            item = RulesRegionAttributeType.TOW_ROPE_REQUIRED
        elif item_name == 'ISO_DETAILS':
            item = RulesRegionAttributeType.ISO_DETAILS
        elif item_name == 'RIGHT_HAND_TRAFFIC':
            item = RulesRegionAttributeType.RIGHT_HAND_TRAFFIC
        elif item_name == 'SYSTEM_OF_MEASUREMENT':
            item = RulesRegionAttributeType.SYSTEM_OF_MEASUREMENT
        elif item_name == 'PROHIBITED_PASSAGE':
            item = RulesRegionAttributeType.PROHIBITED_PASSAGE
        elif item_name == 'TIME_ZONE':
            item = RulesRegionAttributeType.TIME_ZONE
        elif item_name == 'OFFICIAL_LANGUAGES':
            item = RulesRegionAttributeType.OFFICIAL_LANGUAGES
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RulesRegionAttributeType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RulesRegionAttributeType'], reader: zserio.BitStreamReader) -> 'RulesRegionAttributeType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['RulesRegionAttributeType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RulesRegionAttributeType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
