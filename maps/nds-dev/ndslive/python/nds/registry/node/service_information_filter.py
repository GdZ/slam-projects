# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.registry.node.service_priority
import nds.system.types.module_definition
import nds.system.types.module_service

class ServiceInformationFilter:
    def __init__(
            self,
            module_definition_: typing.Union[nds.system.types.module_definition.ModuleDefinition, None] = None,
            module_service_: nds.system.types.module_service.ModuleService = nds.system.types.module_service.ModuleService(),
            min_service_priority_: nds.registry.node.service_priority.ServicePriority = nds.registry.node.service_priority.ServicePriority(),
            max_service_priority_: nds.registry.node.service_priority.ServicePriority = nds.registry.node.service_priority.ServicePriority()) -> None:
        self._module_definition_ = module_definition_
        self._module_service_ = module_service_
        self._min_service_priority_ = min_service_priority_
        self._max_service_priority_ = max_service_priority_

    @classmethod
    def from_reader(
            cls: typing.Type['ServiceInformationFilter'],
            zserio_reader: zserio.BitStreamReader) -> 'ServiceInformationFilter':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ServiceInformationFilter'],
            zserio_context: ServiceInformationFilter.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ServiceInformationFilter':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ServiceInformationFilter):
            return ((self._module_definition_ == other._module_definition_) and
                    (self._module_service_ == other._module_service_) and
                    (self._min_service_priority_ == other._min_service_priority_) and
                    (self._max_service_priority_ == other._max_service_priority_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._module_definition_)
        result = zserio.hashcode.calc_hashcode_string(result, self._module_service_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._min_service_priority_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_service_priority_)

        return result

    @property
    def module_definition(self) -> typing.Union[nds.system.types.module_definition.ModuleDefinition, None]:
        return self._module_definition_

    @module_definition.setter
    def module_definition(self, module_definition_: typing.Union[nds.system.types.module_definition.ModuleDefinition, None]) -> None:
        self._module_definition_ = module_definition_

    @property
    def module_service(self) -> nds.system.types.module_service.ModuleService:
        return self._module_service_

    @module_service.setter
    def module_service(self, module_service_: nds.system.types.module_service.ModuleService) -> None:
        self._module_service_ = module_service_

    @property
    def min_service_priority(self) -> nds.registry.node.service_priority.ServicePriority:
        return self._min_service_priority_

    @min_service_priority.setter
    def min_service_priority(self, min_service_priority_: nds.registry.node.service_priority.ServicePriority) -> None:
        self._min_service_priority_ = min_service_priority_

    @property
    def max_service_priority(self) -> nds.registry.node.service_priority.ServicePriority:
        return self._max_service_priority_

    @max_service_priority.setter
    def max_service_priority(self, max_service_priority_: nds.registry.node.service_priority.ServicePriority) -> None:
        self._max_service_priority_ = max_service_priority_

    def init_packing_context(self, zserio_context: ServiceInformationFilter.ZserioPackingContext) -> None:
        zserio_context.min_service_priority.init(zserio.array.BitFieldArrayTraits(8), self._min_service_priority_)
        zserio_context.max_service_priority.init(zserio.array.BitFieldArrayTraits(8), self._max_service_priority_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._module_definition_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ServiceInformationFilter.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._module_definition_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += zserio_context.min_service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._min_service_priority_)
        end_bitposition += zserio_context.max_service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._max_service_priority_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._module_definition_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ServiceInformationFilter.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._module_definition_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += zserio_context.min_service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._min_service_priority_)
        end_bitposition += zserio_context.max_service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._max_service_priority_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        self._module_service_ = zserio_reader.read_string()
        self._min_service_priority_ = zserio_reader.read_bits(8)
        self._max_service_priority_ = zserio_reader.read_bits(8)

    def read_packed(self, zserio_context: ServiceInformationFilter.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)

        self._module_service_ = zserio_reader.read_string()

        self._min_service_priority_ = zserio_context.min_service_priority.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._max_service_priority_ = zserio_context.max_service_priority.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._module_definition_.write(zserio_writer)
        zserio_writer.write_string(self._module_service_)
        zserio_writer.write_bits(self._min_service_priority_, 8)
        zserio_writer.write_bits(self._max_service_priority_, 8)

    def write_packed(self, zserio_context: ServiceInformationFilter.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._module_definition_.write(zserio_writer)

        zserio_writer.write_string(self._module_service_)

        zserio_context.min_service_priority.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._min_service_priority_)

        zserio_context.max_service_priority.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._max_service_priority_)

    class ZserioPackingContext:
        def __init__(self):
            self._min_service_priority_ = zserio.array.DeltaContext()
            self._max_service_priority_ = zserio.array.DeltaContext()

        @property
        def min_service_priority(self):
            return self._min_service_priority_

        @property
        def max_service_priority(self):
            return self._max_service_priority_
