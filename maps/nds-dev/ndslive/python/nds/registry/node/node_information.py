# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.spatial_extent
import nds.registry.node.connection_costs
import nds.registry.node.node_type
import nds.registry.node.protocol_type
import nds.registry.node.service_information
import nds.system.types.module_definition
import nds.system.types.nds_node_legal_info
import nds.system.types.nds_node_token
import nds.system.types.nds_system_token

class NodeInformation:
    def __init__(
            self,
            system_id_: typing.Union[nds.system.types.nds_system_token.NdsSystemToken, None] = None,
            node_token_: typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None] = None,
            legal_info_: typing.Union[nds.system.types.nds_node_legal_info.NdsNodeLegalInfo, None] = None,
            type_: typing.Union[nds.registry.node.node_type.NodeType, None] = None,
            connection_costs_: nds.registry.node.connection_costs.ConnectionCosts = nds.registry.node.connection_costs.ConnectionCosts(),
            spatial_coverage_: typing.Union[nds.core.geometry.spatial_extent.SpatialExtent, None] = None,
            protocol_type_: nds.registry.node.protocol_type.ProtocolType = nds.registry.node.protocol_type.ProtocolType(),
            protocol_details_uri_: str = str(),
            node_name_: str = str(),
            host_name_: str = str(),
            port_: int = int(),
            service_information_: typing.Optional[nds.registry.node.service_information.ServiceInformation] = None,
            registry_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition] = None) -> None:
        self._system_id_ = system_id_
        self._node_token_ = node_token_
        self._legal_info_ = legal_info_
        self._type_ = type_
        self._connection_costs_ = connection_costs_
        self._spatial_coverage_ = spatial_coverage_
        self._protocol_type_ = protocol_type_
        self._protocol_details_uri_ = protocol_details_uri_
        self._node_name_ = node_name_
        self._host_name_ = host_name_
        self._port_ = port_
        self._service_information_ = service_information_
        self._registry_definition_ = registry_definition_

    @classmethod
    def from_reader(
            cls: typing.Type['NodeInformation'],
            zserio_reader: zserio.BitStreamReader) -> 'NodeInformation':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['NodeInformation'],
            zserio_context: NodeInformation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'NodeInformation':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NodeInformation):
            return ((self._system_id_ == other._system_id_) and
                    (self._node_token_ == other._node_token_) and
                    (self._legal_info_ == other._legal_info_) and
                    (self._type_ == other._type_) and
                    (self._connection_costs_ == other._connection_costs_) and
                    (self._spatial_coverage_ == other._spatial_coverage_) and
                    (self._protocol_type_ == other._protocol_type_) and
                    (self._protocol_details_uri_ == other._protocol_details_uri_) and
                    (self._node_name_ == other._node_name_) and
                    (self._host_name_ == other._host_name_) and
                    (self._port_ == other._port_) and
                    (not other.is_service_information_used() if not self.is_service_information_used() else (self._service_information_ == other._service_information_)) and
                    (not other.is_registry_definition_used() if not self.is_registry_definition_used() else (self._registry_definition_ == other._registry_definition_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._system_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._node_token_)
        result = zserio.hashcode.calc_hashcode_object(result, self._legal_info_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._connection_costs_)
        result = zserio.hashcode.calc_hashcode_object(result, self._spatial_coverage_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._protocol_type_)
        result = zserio.hashcode.calc_hashcode_string(result, self._protocol_details_uri_)
        result = zserio.hashcode.calc_hashcode_string(result, self._node_name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._host_name_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._port_)
        if self.is_service_information_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._service_information_)
        if self.is_registry_definition_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._registry_definition_)

        return result

    @property
    def system_id(self) -> typing.Union[nds.system.types.nds_system_token.NdsSystemToken, None]:
        return self._system_id_

    @system_id.setter
    def system_id(self, system_id_: typing.Union[nds.system.types.nds_system_token.NdsSystemToken, None]) -> None:
        self._system_id_ = system_id_

    @property
    def node_token(self) -> typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None]:
        return self._node_token_

    @node_token.setter
    def node_token(self, node_token_: typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None]) -> None:
        self._node_token_ = node_token_

    @property
    def legal_info(self) -> typing.Union[nds.system.types.nds_node_legal_info.NdsNodeLegalInfo, None]:
        return self._legal_info_

    @legal_info.setter
    def legal_info(self, legal_info_: typing.Union[nds.system.types.nds_node_legal_info.NdsNodeLegalInfo, None]) -> None:
        self._legal_info_ = legal_info_

    @property
    def type(self) -> typing.Union[nds.registry.node.node_type.NodeType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.registry.node.node_type.NodeType, None]) -> None:
        self._type_ = type_

    @property
    def connection_costs(self) -> nds.registry.node.connection_costs.ConnectionCosts:
        return self._connection_costs_

    @connection_costs.setter
    def connection_costs(self, connection_costs_: nds.registry.node.connection_costs.ConnectionCosts) -> None:
        self._connection_costs_ = connection_costs_

    @property
    def spatial_coverage(self) -> typing.Union[nds.core.geometry.spatial_extent.SpatialExtent, None]:
        return self._spatial_coverage_

    @spatial_coverage.setter
    def spatial_coverage(self, spatial_coverage_: typing.Union[nds.core.geometry.spatial_extent.SpatialExtent, None]) -> None:
        self._spatial_coverage_ = spatial_coverage_

    @property
    def protocol_type(self) -> nds.registry.node.protocol_type.ProtocolType:
        return self._protocol_type_

    @protocol_type.setter
    def protocol_type(self, protocol_type_: nds.registry.node.protocol_type.ProtocolType) -> None:
        self._protocol_type_ = protocol_type_

    @property
    def protocol_details_uri(self) -> str:
        return self._protocol_details_uri_

    @protocol_details_uri.setter
    def protocol_details_uri(self, protocol_details_uri_: str) -> None:
        self._protocol_details_uri_ = protocol_details_uri_

    @property
    def node_name(self) -> str:
        return self._node_name_

    @node_name.setter
    def node_name(self, node_name_: str) -> None:
        self._node_name_ = node_name_

    @property
    def host_name(self) -> str:
        return self._host_name_

    @host_name.setter
    def host_name(self, host_name_: str) -> None:
        self._host_name_ = host_name_

    @property
    def port(self) -> int:
        return self._port_

    @port.setter
    def port(self, port_: int) -> None:
        self._port_ = port_

    @property
    def service_information(self) -> typing.Optional[nds.registry.node.service_information.ServiceInformation]:
        return self._service_information_

    @service_information.setter
    def service_information(self, service_information_: typing.Optional[nds.registry.node.service_information.ServiceInformation]) -> None:
        self._service_information_ = service_information_

    def is_service_information_used(self) -> bool:
        return self._type_ == nds.registry.node.node_type.NodeType.SERVICE

    def is_service_information_set(self) -> bool:
        return not self._service_information_ is None

    def reset_service_information(self) -> None:
        self._service_information_ = None

    @property
    def registry_definition(self) -> typing.Optional[nds.system.types.module_definition.ModuleDefinition]:
        return self._registry_definition_

    @registry_definition.setter
    def registry_definition(self, registry_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition]) -> None:
        self._registry_definition_ = registry_definition_

    def is_registry_definition_used(self) -> bool:
        return self._type_ == nds.registry.node.node_type.NodeType.REGISTRY

    def is_registry_definition_set(self) -> bool:
        return not self._registry_definition_ is None

    def reset_registry_definition(self) -> None:
        self._registry_definition_ = None

    def init_packing_context(self, zserio_context: NodeInformation.ZserioPackingContext) -> None:
        self._system_id_.init_packing_context(zserio_context.system_id)
        self._node_token_.init_packing_context(zserio_context.node_token)
        self._legal_info_.init_packing_context(zserio_context.legal_info)
        self._type_.init_packing_context(zserio_context.type)
        zserio_context.connection_costs.init(zserio.array.BitFieldArrayTraits(16), self._connection_costs_)
        self._spatial_coverage_.init_packing_context(zserio_context.spatial_coverage)
        zserio_context.protocol_type.init(zserio.array.BitFieldArrayTraits(8), self._protocol_type_)
        zserio_context.port.init(zserio.array.BitFieldArrayTraits(16), self._port_)
        if self.is_service_information_used():
            self._service_information_.init_packing_context(zserio_context.service_information)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._system_id_.bitsizeof(end_bitposition)
        end_bitposition += self._node_token_.bitsizeof(end_bitposition)
        end_bitposition += self._legal_info_.bitsizeof(end_bitposition)
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += 16
        end_bitposition += self._spatial_coverage_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._protocol_details_uri_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._node_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._host_name_)
        end_bitposition += 16
        if self.is_service_information_used():
            end_bitposition += self._service_information_.bitsizeof(end_bitposition)
        if self.is_registry_definition_used():
            end_bitposition += self._registry_definition_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: NodeInformation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._system_id_.bitsizeof_packed(zserio_context.system_id, end_bitposition)
        end_bitposition += self._node_token_.bitsizeof_packed(zserio_context.node_token, end_bitposition)
        end_bitposition += self._legal_info_.bitsizeof_packed(zserio_context.legal_info, end_bitposition)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += zserio_context.connection_costs.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._connection_costs_)
        end_bitposition += self._spatial_coverage_.bitsizeof_packed(zserio_context.spatial_coverage, end_bitposition)
        end_bitposition += zserio_context.protocol_type.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._protocol_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._protocol_details_uri_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._node_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._host_name_)
        end_bitposition += zserio_context.port.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._port_)
        if self.is_service_information_used():
            end_bitposition += self._service_information_.bitsizeof_packed(zserio_context.service_information, end_bitposition)
        if self.is_registry_definition_used():
            end_bitposition += self._registry_definition_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._system_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._node_token_.initialize_offsets(end_bitposition)
        end_bitposition = self._legal_info_.initialize_offsets(end_bitposition)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition += 16
        end_bitposition = self._spatial_coverage_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._protocol_details_uri_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._node_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._host_name_)
        end_bitposition += 16
        if self.is_service_information_used():
            end_bitposition = self._service_information_.initialize_offsets(end_bitposition)
        if self.is_registry_definition_used():
            end_bitposition = self._registry_definition_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: NodeInformation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._system_id_.initialize_offsets_packed(zserio_context.system_id, end_bitposition)
        end_bitposition = self._node_token_.initialize_offsets_packed(zserio_context.node_token, end_bitposition)
        end_bitposition = self._legal_info_.initialize_offsets_packed(zserio_context.legal_info, end_bitposition)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition += zserio_context.connection_costs.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._connection_costs_)
        end_bitposition = self._spatial_coverage_.initialize_offsets_packed(zserio_context.spatial_coverage, end_bitposition)
        end_bitposition += zserio_context.protocol_type.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._protocol_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._protocol_details_uri_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._node_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._host_name_)
        end_bitposition += zserio_context.port.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._port_)
        if self.is_service_information_used():
            end_bitposition = self._service_information_.initialize_offsets_packed(zserio_context.service_information, end_bitposition)
        if self.is_registry_definition_used():
            end_bitposition = self._registry_definition_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._system_id_ = nds.system.types.nds_system_token.NdsSystemToken.from_reader(zserio_reader)
        self._node_token_ = nds.system.types.nds_node_token.NdsNodeToken.from_reader(zserio_reader)
        self._legal_info_ = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader(zserio_reader)
        self._type_ = nds.registry.node.node_type.NodeType.from_reader(zserio_reader)
        self._connection_costs_ = zserio_reader.read_bits(16)
        self._spatial_coverage_ = nds.core.geometry.spatial_extent.SpatialExtent.from_reader(zserio_reader)
        self._protocol_type_ = zserio_reader.read_bits(8)
        self._protocol_details_uri_ = zserio_reader.read_string()
        self._node_name_ = zserio_reader.read_string()
        self._host_name_ = zserio_reader.read_string()
        self._port_ = zserio_reader.read_bits(16)
        if self.is_service_information_used():
            self._service_information_ = nds.registry.node.service_information.ServiceInformation.from_reader(zserio_reader)
        else:
            self._service_information_ = None
        if self.is_registry_definition_used():
            self._registry_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._registry_definition_ = None

    def read_packed(self, zserio_context: NodeInformation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._system_id_ = nds.system.types.nds_system_token.NdsSystemToken.from_reader_packed(zserio_context.system_id, zserio_reader)

        self._node_token_ = nds.system.types.nds_node_token.NdsNodeToken.from_reader_packed(zserio_context.node_token, zserio_reader)

        self._legal_info_ = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.from_reader_packed(zserio_context.legal_info, zserio_reader)

        self._type_ = nds.registry.node.node_type.NodeType.from_reader_packed(zserio_context.type, zserio_reader)

        self._connection_costs_ = zserio_context.connection_costs.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)

        self._spatial_coverage_ = nds.core.geometry.spatial_extent.SpatialExtent.from_reader_packed(zserio_context.spatial_coverage, zserio_reader)

        self._protocol_type_ = zserio_context.protocol_type.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._protocol_details_uri_ = zserio_reader.read_string()

        self._node_name_ = zserio_reader.read_string()

        self._host_name_ = zserio_reader.read_string()

        self._port_ = zserio_context.port.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)

        if self.is_service_information_used():
            self._service_information_ = nds.registry.node.service_information.ServiceInformation.from_reader_packed(zserio_context.service_information, zserio_reader)
        else:
            self._service_information_ = None

        if self.is_registry_definition_used():
            self._registry_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._registry_definition_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._system_id_.write(zserio_writer)
        self._node_token_.write(zserio_writer)
        self._legal_info_.write(zserio_writer)
        self._type_.write(zserio_writer)
        zserio_writer.write_bits(self._connection_costs_, 16)
        self._spatial_coverage_.write(zserio_writer)
        zserio_writer.write_bits(self._protocol_type_, 8)
        zserio_writer.write_string(self._protocol_details_uri_)
        zserio_writer.write_string(self._node_name_)
        zserio_writer.write_string(self._host_name_)
        zserio_writer.write_bits(self._port_, 16)
        if self.is_service_information_used():
            self._service_information_.write(zserio_writer)
        if self.is_registry_definition_used():
            self._registry_definition_.write(zserio_writer)

    def write_packed(self, zserio_context: NodeInformation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._system_id_.write_packed(zserio_context.system_id, zserio_writer)

        self._node_token_.write_packed(zserio_context.node_token, zserio_writer)

        self._legal_info_.write_packed(zserio_context.legal_info, zserio_writer)

        self._type_.write_packed(zserio_context.type, zserio_writer)

        zserio_context.connection_costs.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._connection_costs_)

        self._spatial_coverage_.write_packed(zserio_context.spatial_coverage, zserio_writer)

        zserio_context.protocol_type.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._protocol_type_)

        zserio_writer.write_string(self._protocol_details_uri_)

        zserio_writer.write_string(self._node_name_)

        zserio_writer.write_string(self._host_name_)

        zserio_context.port.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._port_)

        if self.is_service_information_used():
            self._service_information_.write_packed(zserio_context.service_information, zserio_writer)

        if self.is_registry_definition_used():
            self._registry_definition_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._system_id_ = nds.system.types.nds_system_token.NdsSystemToken.ZserioPackingContext()
            self._node_token_ = nds.system.types.nds_node_token.NdsNodeToken.ZserioPackingContext()
            self._legal_info_ = nds.system.types.nds_node_legal_info.NdsNodeLegalInfo.ZserioPackingContext()
            self._type_ = zserio.array.DeltaContext()
            self._connection_costs_ = zserio.array.DeltaContext()
            self._spatial_coverage_ = nds.core.geometry.spatial_extent.SpatialExtent.ZserioPackingContext()
            self._protocol_type_ = zserio.array.DeltaContext()
            self._port_ = zserio.array.DeltaContext()
            self._service_information_ = nds.registry.node.service_information.ServiceInformation.ZserioPackingContext()

        @property
        def system_id(self):
            return self._system_id_

        @property
        def node_token(self):
            return self._node_token_

        @property
        def legal_info(self):
            return self._legal_info_

        @property
        def type(self):
            return self._type_

        @property
        def connection_costs(self):
            return self._connection_costs_

        @property
        def spatial_coverage(self):
            return self._spatial_coverage_

        @property
        def protocol_type(self):
            return self._protocol_type_

        @property
        def port(self):
            return self._port_

        @property
        def service_information(self):
            return self._service_information_
