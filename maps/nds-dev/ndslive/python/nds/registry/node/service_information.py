# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.registry.node.service_priority
import nds.system.types.extern_data
import nds.system.types.module_definition
import nds.system.types.module_service

class ServiceInformation:
    def __init__(
            self,
            module_definition_: typing.Union[nds.system.types.module_definition.ModuleDefinition, None] = None,
            module_service_: nds.system.types.module_service.ModuleService = nds.system.types.module_service.ModuleService(),
            service_priority_: nds.registry.node.service_priority.ServicePriority = nds.registry.node.service_priority.ServicePriority(),
            service_metadata_: typing.Optional[nds.system.types.extern_data.ExternData] = None,
            service_certification_metadata_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._module_definition_ = module_definition_
        self._module_service_ = module_service_
        self._service_priority_ = service_priority_
        self._service_metadata_ = service_metadata_
        self._service_certification_metadata_ = service_certification_metadata_

    @classmethod
    def from_reader(
            cls: typing.Type['ServiceInformation'],
            zserio_reader: zserio.BitStreamReader) -> 'ServiceInformation':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ServiceInformation'],
            zserio_context: ServiceInformation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ServiceInformation':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ServiceInformation):
            return ((self._module_definition_ == other._module_definition_) and
                    (self._module_service_ == other._module_service_) and
                    (self._service_priority_ == other._service_priority_) and
                    (not other.is_service_metadata_used() if not self.is_service_metadata_used() else (self._service_metadata_ == other._service_metadata_)) and
                    (self._service_certification_metadata_ == other._service_certification_metadata_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._module_definition_)
        result = zserio.hashcode.calc_hashcode_string(result, self._module_service_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._service_priority_)
        if self.is_service_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._service_metadata_)
        result = zserio.hashcode.calc_hashcode_object(result, self._service_certification_metadata_)

        return result

    @property
    def module_definition(self) -> typing.Union[nds.system.types.module_definition.ModuleDefinition, None]:
        return self._module_definition_

    @module_definition.setter
    def module_definition(self, module_definition_: typing.Union[nds.system.types.module_definition.ModuleDefinition, None]) -> None:
        self._module_definition_ = module_definition_

    @property
    def module_service(self) -> nds.system.types.module_service.ModuleService:
        return self._module_service_

    @module_service.setter
    def module_service(self, module_service_: nds.system.types.module_service.ModuleService) -> None:
        self._module_service_ = module_service_

    @property
    def service_priority(self) -> nds.registry.node.service_priority.ServicePriority:
        return self._service_priority_

    @service_priority.setter
    def service_priority(self, service_priority_: nds.registry.node.service_priority.ServicePriority) -> None:
        self._service_priority_ = service_priority_

    @property
    def service_metadata(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._service_metadata_

    @service_metadata.setter
    def service_metadata(self, service_metadata_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._service_metadata_ = service_metadata_

    def is_service_metadata_used(self) -> bool:
        return self.is_service_metadata_set()

    def is_service_metadata_set(self) -> bool:
        return not self._service_metadata_ is None

    def reset_service_metadata(self) -> None:
        self._service_metadata_ = None

    @property
    def service_certification_metadata(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._service_certification_metadata_

    @service_certification_metadata.setter
    def service_certification_metadata(self, service_certification_metadata_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._service_certification_metadata_ = service_certification_metadata_

    def init_packing_context(self, zserio_context: ServiceInformation.ZserioPackingContext) -> None:
        zserio_context.service_priority.init(zserio.array.BitFieldArrayTraits(8), self._service_priority_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._module_definition_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_service_metadata_used():
            end_bitposition += self._service_metadata_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._service_certification_metadata_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ServiceInformation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._module_definition_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += zserio_context.service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._service_priority_)
        end_bitposition += 1
        if self.is_service_metadata_used():
            end_bitposition += self._service_metadata_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._service_certification_metadata_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._module_definition_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_service_metadata_used():
            end_bitposition = self._service_metadata_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._service_certification_metadata_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ServiceInformation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._module_definition_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_service_)
        end_bitposition += zserio_context.service_priority.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._service_priority_)
        end_bitposition += 1
        if self.is_service_metadata_used():
            end_bitposition = self._service_metadata_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._service_certification_metadata_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        self._module_service_ = zserio_reader.read_string()
        self._service_priority_ = zserio_reader.read_bits(8)
        if zserio_reader.read_bool():
            self._service_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._service_metadata_ = None
        zserio_reader.alignto(8)
        self._service_certification_metadata_ = zserio_reader.read_bitbuffer()

    def read_packed(self, zserio_context: ServiceInformation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)

        self._module_service_ = zserio_reader.read_string()

        self._service_priority_ = zserio_context.service_priority.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        if zserio_reader.read_bool():
            self._service_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._service_metadata_ = None

        zserio_reader.alignto(8)
        self._service_certification_metadata_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._module_definition_.write(zserio_writer)
        zserio_writer.write_string(self._module_service_)
        zserio_writer.write_bits(self._service_priority_, 8)
        if self.is_service_metadata_used():
            zserio_writer.write_bool(True)
            self._service_metadata_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._service_certification_metadata_)

    def write_packed(self, zserio_context: ServiceInformation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._module_definition_.write(zserio_writer)

        zserio_writer.write_string(self._module_service_)

        zserio_context.service_priority.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._service_priority_)

        if self.is_service_metadata_used():
            zserio_writer.write_bool(True)
            self._service_metadata_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._service_certification_metadata_)

    class ZserioPackingContext:
        def __init__(self):
            self._service_priority_ = zserio.array.DeltaContext()

        @property
        def service_priority(self):
            return self._service_priority_
