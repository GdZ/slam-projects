# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.empty
import nds.system.types.nds_system_token

class RegistryTopics:
    def __init__(self, pubsub: zserio.PubsubInterface) -> None:
        self._pubsub = pubsub

    def publish_nds_system_token(self, message: nds.system.types.nds_system_token.NdsSystemToken, context: typing.Any = None) -> None:
        self._publish("nds/registry/update/system", message, context)

    def subscribe_nds_system_token(self, callback: typing.Callable[[str, nds.system.types.nds_system_token.NdsSystemToken], None], context: typing.Any = None) -> int:
        def on_raw(topic: str, data: bytes) -> None:
            self._on_raw_nds_system_token(callback, topic, data)
        return self._pubsub.subscribe("nds/registry/update/system", on_raw, context)

    def publish_empty(self, message: nds.core.types.empty.Empty, context: typing.Any = None) -> None:
        self._publish("nds/registry/update/tier2registry", message, context)

    def subscribe_empty(self, callback: typing.Callable[[str, nds.core.types.empty.Empty], None], context: typing.Any = None) -> int:
        def on_raw(topic: str, data: bytes) -> None:
            self._on_raw_empty(callback, topic, data)
        return self._pubsub.subscribe("nds/registry/update/tier2registry", on_raw, context)

    def unsubscribe(self, subscription_id: int) -> None:
        self._pubsub.unsubscribe(subscription_id)

    def _on_raw_nds_system_token(self, callback: typing.Callable[[str, nds.system.types.nds_system_token.NdsSystemToken], None], topic: str, data: bytes) -> None:
        reader = zserio.BitStreamReader(data)
        message = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)
        callback(topic, message)

    def _on_raw_empty(self, callback: typing.Callable[[str, nds.core.types.empty.Empty], None], topic: str, data: bytes) -> None:
        reader = zserio.BitStreamReader(data)
        message = nds.core.types.empty.Empty.from_reader(reader)
        callback(topic, message)

    def _publish(self, topic: str, message: typing.Any, context: typing.Any) -> None:
        writer = zserio.BitStreamWriter()
        message.write(writer)
        self._pubsub.publish(topic, writer.byte_array, context)
