# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.empty
import nds.registry.node.node_information
import nds.registry.node.node_list
import nds.registry.node.node_search_filter
import nds.registry.services.registry_service_capabilities_response
import nds.system.types.module_definition
import nds.system.types.nds_node_token
import nds.system.types.nds_system_token

class NdsRegistry:
    class Service(zserio.ServiceInterface):
        def __init__(self) -> None:
            self._method_map = {
                self._METHOD_NAMES[0]: self._get_registry_module_definition_method,
                self._METHOD_NAMES[1]: self._get_registry_service_capabilities_method,
                self._METHOD_NAMES[2]: self._get_all_nodes_all_systems_method,
                self._METHOD_NAMES[3]: self._get_all_nodes_method,
                self._METHOD_NAMES[4]: self._search_nodes_method,
                self._METHOD_NAMES[5]: self._register_node_method,
                self._METHOD_NAMES[6]: self._unregister_node_method
            }

        def call_method(self, method_name: str, request_data: bytes, context: typing.Any = None) -> zserio.ServiceData:
            method = self._method_map.get(method_name)
            if not method:
                raise zserio.ServiceException(f"nds.registry.services.NdsRegistry: Method '{method_name}' does not exist!")

            return method(request_data, context)

        @property
        def service_full_name(self) -> str:
            return self._SERVICE_FULL_NAME

        @property
        def method_names(self) -> typing.List:
            return self._METHOD_NAMES

        def _get_registry_module_definition_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            raise NotImplementedError()

        def _get_registry_service_capabilities_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.registry.services.registry_service_capabilities_response.RegistryServiceCapabilitiesResponse:
            raise NotImplementedError()

        def _get_all_nodes_all_systems_impl(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            raise NotImplementedError()

        def _get_all_nodes_impl(self, request: nds.system.types.nds_system_token.NdsSystemToken, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            raise NotImplementedError()

        def _search_nodes_impl(self, request: nds.registry.node.node_search_filter.NodeSearchFilter, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            raise NotImplementedError()

        def _register_node_impl(self, request: nds.registry.node.node_information.NodeInformation, context: typing.Any = None) -> nds.core.types.empty.Empty:
            raise NotImplementedError()

        def _unregister_node_impl(self, request: nds.system.types.nds_node_token.NdsNodeToken, context: typing.Any = None) -> nds.core.types.empty.Empty:
            raise NotImplementedError()

        def _get_registry_module_definition_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_registry_module_definition_impl(request, context))

        def _get_registry_service_capabilities_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_registry_service_capabilities_impl(request, context))

        def _get_all_nodes_all_systems_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.core.types.empty.Empty.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_all_nodes_all_systems_impl(request, context))

        def _get_all_nodes_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.system.types.nds_system_token.NdsSystemToken.from_reader(reader)

            return zserio.service.ObjectServiceData(self._get_all_nodes_impl(request, context))

        def _search_nodes_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.registry.node.node_search_filter.NodeSearchFilter.from_reader(reader)

            return zserio.service.ObjectServiceData(self._search_nodes_impl(request, context))

        def _register_node_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.registry.node.node_information.NodeInformation.from_reader(reader)

            return zserio.service.ObjectServiceData(self._register_node_impl(request, context))

        def _unregister_node_method(self, request_data: bytes, context: typing.Any) -> zserio.ServiceData:
            reader = zserio.BitStreamReader(request_data)
            request = nds.system.types.nds_node_token.NdsNodeToken.from_reader(reader)

            return zserio.service.ObjectServiceData(self._unregister_node_impl(request, context))

        _SERVICE_FULL_NAME = "nds.registry.services.NdsRegistry"
        _METHOD_NAMES = [
            "getRegistryModuleDefinition",
            "getRegistryServiceCapabilities",
            "getAllNodesAllSystems",
            "getAllNodes",
            "searchNodes",
            "registerNode",
            "unregisterNode"
        ]

    class Client:
        def __init__(self, service_client: zserio.ServiceClientInterface) -> None:
            self._service_client = service_client

        def get_registry_module_definition(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.system.types.module_definition.ModuleDefinition:
            response_data = self._service_client.call_method("getRegistryModuleDefinition",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.system.types.module_definition.ModuleDefinition.from_reader(reader)

            return response

        def get_registry_service_capabilities(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.registry.services.registry_service_capabilities_response.RegistryServiceCapabilitiesResponse:
            response_data = self._service_client.call_method("getRegistryServiceCapabilities",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.registry.services.registry_service_capabilities_response.RegistryServiceCapabilitiesResponse.from_reader(reader)

            return response

        def get_all_nodes_all_systems(self, request: nds.core.types.empty.Empty, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            response_data = self._service_client.call_method("getAllNodesAllSystems",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.registry.node.node_list.NodeList.from_reader(reader)

            return response

        def get_all_nodes(self, request: nds.system.types.nds_system_token.NdsSystemToken, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            response_data = self._service_client.call_method("getAllNodes",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.registry.node.node_list.NodeList.from_reader(reader)

            return response

        def search_nodes(self, request: nds.registry.node.node_search_filter.NodeSearchFilter, context: typing.Any = None) -> nds.registry.node.node_list.NodeList:
            response_data = self._service_client.call_method("searchNodes",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.registry.node.node_list.NodeList.from_reader(reader)

            return response

        def register_node(self, request: nds.registry.node.node_information.NodeInformation, context: typing.Any = None) -> nds.core.types.empty.Empty:
            response_data = self._service_client.call_method("registerNode",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.core.types.empty.Empty.from_reader(reader)

            return response

        def unregister_node(self, request: nds.system.types.nds_node_token.NdsNodeToken, context: typing.Any = None) -> nds.core.types.empty.Empty:
            response_data = self._service_client.call_method("unregisterNode",
                                                             zserio.service.ObjectServiceData(request), context)
            reader = zserio.BitStreamReader(response_data)
            response = nds.core.types.empty.Empty.from_reader(reader)

            return response
