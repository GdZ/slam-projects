# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.seconds
import nds.traffic.types.traffic_event_reason

class TrafficEvent:
    def __init__(
            self,
            reason_: typing.Union[nds.traffic.types.traffic_event_reason.TrafficEventReason, None] = None,
            delay_: nds.core.types.seconds.Seconds = nds.core.types.seconds.Seconds(),
            blocked_passage_: bool = bool()) -> None:
        self._reason_ = reason_
        self._delay_ = delay_
        self._blocked_passage_ = blocked_passage_

    @classmethod
    def from_reader(
            cls: typing.Type['TrafficEvent'],
            zserio_reader: zserio.BitStreamReader) -> 'TrafficEvent':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrafficEvent'],
            zserio_context: TrafficEvent.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrafficEvent':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrafficEvent):
            return ((self._reason_ == other._reason_) and
                    (self._delay_ == other._delay_) and
                    (self._blocked_passage_ == other._blocked_passage_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._reason_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._delay_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._blocked_passage_)

        return result

    @property
    def reason(self) -> typing.Union[nds.traffic.types.traffic_event_reason.TrafficEventReason, None]:
        return self._reason_

    @reason.setter
    def reason(self, reason_: typing.Union[nds.traffic.types.traffic_event_reason.TrafficEventReason, None]) -> None:
        self._reason_ = reason_

    @property
    def delay(self) -> nds.core.types.seconds.Seconds:
        return self._delay_

    @delay.setter
    def delay(self, delay_: nds.core.types.seconds.Seconds) -> None:
        self._delay_ = delay_

    @property
    def blocked_passage(self) -> bool:
        return self._blocked_passage_

    @blocked_passage.setter
    def blocked_passage(self, blocked_passage_: bool) -> None:
        self._blocked_passage_ = blocked_passage_

    def init_packing_context(self, zserio_context: TrafficEvent.ZserioPackingContext) -> None:
        self._reason_.init_packing_context(zserio_context.reason)
        zserio_context.delay.init(zserio.array.VarUIntArrayTraits(), self._delay_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reason_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._delay_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrafficEvent.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._reason_.bitsizeof_packed(zserio_context.reason, end_bitposition)
        end_bitposition += zserio_context.delay.bitsizeof(zserio.array.VarUIntArrayTraits(), self._delay_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reason_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._delay_)
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrafficEvent.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._reason_.initialize_offsets_packed(zserio_context.reason, end_bitposition)
        end_bitposition += zserio_context.delay.bitsizeof(zserio.array.VarUIntArrayTraits(), self._delay_)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._reason_ = nds.traffic.types.traffic_event_reason.TrafficEventReason.from_reader(zserio_reader)
        self._delay_ = zserio_reader.read_varuint()
        self._blocked_passage_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: TrafficEvent.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._reason_ = nds.traffic.types.traffic_event_reason.TrafficEventReason.from_reader_packed(zserio_context.reason, zserio_reader)

        self._delay_ = zserio_context.delay.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._blocked_passage_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._reason_.write(zserio_writer)
        zserio_writer.write_varuint(self._delay_)
        zserio_writer.write_bool(self._blocked_passage_)

    def write_packed(self, zserio_context: TrafficEvent.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._reason_.write_packed(zserio_context.reason, zserio_writer)

        zserio_context.delay.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._delay_)

        zserio_writer.write_bool(self._blocked_passage_)

    class ZserioPackingContext:
        def __init__(self):
            self._reason_ = zserio.array.DeltaContext()
            self._delay_ = zserio.array.DeltaContext()

        @property
        def reason(self):
            return self._reason_

        @property
        def delay(self):
            return self._delay_
