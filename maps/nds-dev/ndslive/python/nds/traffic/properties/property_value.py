# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.seconds
import nds.core.types.speed_kmh
import nds.traffic.properties.property_type
import nds.traffic.types.traffic_event_advice
import nds.traffic.types.traffic_event_id
import nds.traffic.types.traffic_event_id_string
import nds.traffic.types.traffic_event_uuid

class PropertyValue:
    def __init__(
            self,
            type_: nds.traffic.properties.property_type.PropertyType,
            *,
            event_id_: typing.Union[nds.traffic.types.traffic_event_id.TrafficEventId, None] = None,
            event_uuid_: typing.Union[nds.traffic.types.traffic_event_uuid.TrafficEventUuid, None] = None,
            event_id_string_: typing.Union[nds.traffic.types.traffic_event_id_string.TrafficEventIdString, None] = None,
            advice_: typing.Union[nds.traffic.types.traffic_event_advice.TrafficEventAdvice, None] = None,
            estimated_travel_time_: typing.Union[nds.core.types.seconds.Seconds, None] = None,
            estimated_average_speed_: typing.Union[nds.core.types.speed_kmh.SpeedKmh, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if event_id_ is not None:
            self._choice = event_id_
        if event_uuid_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = event_uuid_
        if event_id_string_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = event_id_string_
        if advice_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = advice_
        if estimated_travel_time_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = estimated_travel_time_
        if estimated_average_speed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = estimated_average_speed_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.traffic.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.traffic.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.traffic.properties.property_type.PropertyType:
        return self._type_

    @property
    def event_id(self) -> nds.traffic.types.traffic_event_id.TrafficEventId:
        return self._choice

    @event_id.setter
    def event_id(self, event_id_: nds.traffic.types.traffic_event_id.TrafficEventId) -> None:
        self._choice = event_id_

    @property
    def event_uuid(self) -> typing.Union[nds.traffic.types.traffic_event_uuid.TrafficEventUuid, None]:
        return self._choice

    @event_uuid.setter
    def event_uuid(self, event_uuid_: typing.Union[nds.traffic.types.traffic_event_uuid.TrafficEventUuid, None]) -> None:
        self._choice = event_uuid_

    @property
    def event_id_string(self) -> nds.traffic.types.traffic_event_id_string.TrafficEventIdString:
        return self._choice

    @event_id_string.setter
    def event_id_string(self, event_id_string_: nds.traffic.types.traffic_event_id_string.TrafficEventIdString) -> None:
        self._choice = event_id_string_

    @property
    def advice(self) -> typing.Union[nds.traffic.types.traffic_event_advice.TrafficEventAdvice, None]:
        return self._choice

    @advice.setter
    def advice(self, advice_: typing.Union[nds.traffic.types.traffic_event_advice.TrafficEventAdvice, None]) -> None:
        self._choice = advice_

    @property
    def estimated_travel_time(self) -> nds.core.types.seconds.Seconds:
        return self._choice

    @estimated_travel_time.setter
    def estimated_travel_time(self, estimated_travel_time_: nds.core.types.seconds.Seconds) -> None:
        self._choice = estimated_travel_time_

    @property
    def estimated_average_speed(self) -> nds.core.types.speed_kmh.SpeedKmh:
        return self._choice

    @estimated_average_speed.setter
    def estimated_average_speed(self, estimated_average_speed_: nds.core.types.speed_kmh.SpeedKmh) -> None:
        self._choice = estimated_average_speed_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            return self.CHOICE_EVENT_ID
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            return self.CHOICE_EVENT_UUID
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            return self.CHOICE_EVENT_ID_STRING
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            return self.CHOICE_ADVICE
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            return self.CHOICE_ESTIMATED_TRAVEL_TIME
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            return self.CHOICE_ESTIMATED_AVERAGE_SPEED
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            zserio_context.event_id.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            self._choice.init_packing_context(zserio_context.event_uuid)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            self._choice.init_packing_context(zserio_context.advice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            zserio_context.estimated_travel_time.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            zserio_context.estimated_average_speed.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            end_bitposition += zserio_context.event_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.event_uuid, end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.advice, end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            end_bitposition += zserio_context.estimated_travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            end_bitposition += zserio_context.estimated_average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            end_bitposition += zserio_context.event_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.event_uuid, end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.advice, end_bitposition)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            end_bitposition += zserio_context.estimated_travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            end_bitposition += zserio_context.estimated_average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            self._choice = nds.traffic.types.traffic_event_uuid.TrafficEventUuid.from_reader(zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            self._choice = nds.traffic.types.traffic_event_advice.TrafficEventAdvice.from_reader(zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            self._choice = zserio_reader.read_bits(8)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            self._choice = zserio_context.event_id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            self._choice = nds.traffic.types.traffic_event_uuid.TrafficEventUuid.from_reader_packed(zserio_context.event_uuid, zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            self._choice = nds.traffic.types.traffic_event_advice.TrafficEventAdvice.from_reader_packed(zserio_context.advice, zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            self._choice = zserio_context.estimated_travel_time.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            self._choice = zserio_context.estimated_average_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            self._choice.write(zserio_writer)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            self._choice.write(zserio_writer)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            zserio_writer.write_bits(self._choice, 8)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.traffic.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID):
            zserio_context.event_id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_UUID):
            self._choice.write_packed(zserio_context.event_uuid, zserio_writer)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ID_STRING):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.TRAFFIC_EVENT_ADVICE):
            self._choice.write_packed(zserio_context.advice, zserio_writer)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_TRAVEL_TIME):
            zserio_context.estimated_travel_time.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.traffic.properties.property_type.PropertyType.ESTIMATED_AVERAGE_SPEED):
            zserio_context.estimated_average_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._event_id_ = zserio.array.DeltaContext()
            self._event_uuid_ = nds.traffic.types.traffic_event_uuid.TrafficEventUuid.ZserioPackingContext()
            self._advice_ = zserio.array.DeltaContext()
            self._estimated_travel_time_ = zserio.array.DeltaContext()
            self._estimated_average_speed_ = zserio.array.DeltaContext()

        @property
        def event_id(self):
            return self._event_id_

        @property
        def event_uuid(self):
            return self._event_uuid_

        @property
        def advice(self):
            return self._advice_

        @property
        def estimated_travel_time(self):
            return self._estimated_travel_time_

        @property
        def estimated_average_speed(self):
            return self._estimated_average_speed_

    CHOICE_EVENT_ID = 0
    CHOICE_EVENT_UUID = 1
    CHOICE_EVENT_ID_STRING = 2
    CHOICE_ADVICE = 3
    CHOICE_ESTIMATED_TRAVEL_TIME = 4
    CHOICE_ESTIMATED_AVERAGE_SPEED = 5
    UNDEFINED_CHOICE = -1
