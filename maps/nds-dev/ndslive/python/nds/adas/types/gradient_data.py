# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class GradientData:
    def __init__(
            self,
            has_radius_value_: bool = bool(),
            chainage_offset_: int = int(),
            relative_grade_line_elevation_: int = int(),
            radius_value_: typing.Optional[int] = None) -> None:
        self._has_radius_value_ = has_radius_value_
        self._chainage_offset_ = chainage_offset_
        self._relative_grade_line_elevation_ = relative_grade_line_elevation_
        self._radius_value_ = radius_value_

    @classmethod
    def from_reader(
            cls: typing.Type['GradientData'],
            zserio_reader: zserio.BitStreamReader) -> 'GradientData':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GradientData'],
            zserio_context: GradientData.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GradientData':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GradientData):
            return ((self._has_radius_value_ == other._has_radius_value_) and
                    (self._chainage_offset_ == other._chainage_offset_) and
                    (self._relative_grade_line_elevation_ == other._relative_grade_line_elevation_) and
                    (not other.is_radius_value_used() if not self.is_radius_value_used() else (self._radius_value_ == other._radius_value_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_radius_value_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._chainage_offset_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._relative_grade_line_elevation_)
        if self.is_radius_value_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._radius_value_)

        return result

    @property
    def has_radius_value(self) -> bool:
        return self._has_radius_value_

    @has_radius_value.setter
    def has_radius_value(self, has_radius_value_: bool) -> None:
        self._has_radius_value_ = has_radius_value_

    @property
    def chainage_offset(self) -> int:
        return self._chainage_offset_

    @chainage_offset.setter
    def chainage_offset(self, chainage_offset_: int) -> None:
        self._chainage_offset_ = chainage_offset_

    @property
    def relative_grade_line_elevation(self) -> int:
        return self._relative_grade_line_elevation_

    @relative_grade_line_elevation.setter
    def relative_grade_line_elevation(self, relative_grade_line_elevation_: int) -> None:
        self._relative_grade_line_elevation_ = relative_grade_line_elevation_

    @property
    def radius_value(self) -> typing.Optional[int]:
        return self._radius_value_

    @radius_value.setter
    def radius_value(self, radius_value_: typing.Optional[int]) -> None:
        self._radius_value_ = radius_value_

    def is_radius_value_used(self) -> bool:
        return self._has_radius_value_ == True

    def is_radius_value_set(self) -> bool:
        return not self._radius_value_ is None

    def reset_radius_value(self) -> None:
        self._radius_value_ = None

    def init_packing_context(self, zserio_context: GradientData.ZserioPackingContext) -> None:
        zserio_context.chainage_offset.init(zserio.array.VarSizeArrayTraits(), self._chainage_offset_)
        zserio_context.relative_grade_line_elevation.init(zserio.array.SignedBitFieldArrayTraits(8), self._relative_grade_line_elevation_)
        if self.is_radius_value_used():
            zserio_context.radius_value.init(zserio.array.BitFieldArrayTraits(8), self._radius_value_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._chainage_offset_)
        end_bitposition += 8
        if self.is_radius_value_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GradientData.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.chainage_offset.bitsizeof(zserio.array.VarSizeArrayTraits(), self._chainage_offset_)
        end_bitposition += zserio_context.relative_grade_line_elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._relative_grade_line_elevation_)
        if self.is_radius_value_used():
            end_bitposition += zserio_context.radius_value.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._radius_value_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._chainage_offset_)
        end_bitposition += 8
        if self.is_radius_value_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GradientData.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.chainage_offset.bitsizeof(zserio.array.VarSizeArrayTraits(), self._chainage_offset_)
        end_bitposition += zserio_context.relative_grade_line_elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._relative_grade_line_elevation_)
        if self.is_radius_value_used():
            end_bitposition += zserio_context.radius_value.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._radius_value_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_radius_value_ = zserio_reader.read_bool()
        self._chainage_offset_ = zserio_reader.read_varsize()
        self._relative_grade_line_elevation_ = zserio_reader.read_signed_bits(8)
        if self.is_radius_value_used():
            self._radius_value_ = zserio_reader.read_bits(8)
        else:
            self._radius_value_ = None

    def read_packed(self, zserio_context: GradientData.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_radius_value_ = zserio_reader.read_bool()

        self._chainage_offset_ = zserio_context.chainage_offset.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._relative_grade_line_elevation_ = zserio_context.relative_grade_line_elevation.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)

        if self.is_radius_value_used():
            self._radius_value_ = zserio_context.radius_value.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._radius_value_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_radius_value_)
        zserio_writer.write_varsize(self._chainage_offset_)
        zserio_writer.write_signed_bits(self._relative_grade_line_elevation_, 8)
        if self.is_radius_value_used():
            zserio_writer.write_bits(self._radius_value_, 8)

    def write_packed(self, zserio_context: GradientData.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_radius_value_)

        zserio_context.chainage_offset.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._chainage_offset_)

        zserio_context.relative_grade_line_elevation.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._relative_grade_line_elevation_)

        if self.is_radius_value_used():
            zserio_context.radius_value.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._radius_value_)

    class ZserioPackingContext:
        def __init__(self):
            self._chainage_offset_ = zserio.array.DeltaContext()
            self._relative_grade_line_elevation_ = zserio.array.DeltaContext()
            self._radius_value_ = zserio.array.DeltaContext()

        @property
        def chainage_offset(self):
            return self._chainage_offset_

        @property
        def relative_grade_line_elevation(self):
            return self._relative_grade_line_elevation_

        @property
        def radius_value(self):
            return self._radius_value_
