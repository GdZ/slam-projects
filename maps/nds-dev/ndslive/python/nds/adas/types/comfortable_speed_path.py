# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.comfortable_speed_point_list
import nds.adas.types.comfortable_speed_road

class ComfortableSpeedPath:
    def __init__(
            self,
            num_of_roads_: int = int(),
            speed_points_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None] = None,
            road_: typing.List[nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad] = None) -> None:
        self._num_of_roads_ = num_of_roads_
        self._speed_points_ = speed_points_
        self._road_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_road()), road_)

    @classmethod
    def from_reader(
            cls: typing.Type['ComfortableSpeedPath'],
            zserio_reader: zserio.BitStreamReader) -> 'ComfortableSpeedPath':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ComfortableSpeedPath'],
            zserio_context: ComfortableSpeedPath.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ComfortableSpeedPath':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ComfortableSpeedPath):
            return ((self._num_of_roads_ == other._num_of_roads_) and
                    (self._speed_points_ == other._speed_points_) and
                    (self._road_ == other._road_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_of_roads_)
        result = zserio.hashcode.calc_hashcode_object(result, self._speed_points_)
        result = zserio.hashcode.calc_hashcode_object(result, self._road_)

        return result

    @property
    def num_of_roads(self) -> int:
        return self._num_of_roads_

    @num_of_roads.setter
    def num_of_roads(self, num_of_roads_: int) -> None:
        self._num_of_roads_ = num_of_roads_

    @property
    def speed_points(self) -> typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]:
        return self._speed_points_

    @speed_points.setter
    def speed_points(self, speed_points_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]) -> None:
        self._speed_points_ = speed_points_

    @property
    def road(self) -> typing.List[nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad]:
        return self._road_.raw_array

    @road.setter
    def road(self, road_: typing.List[nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad]) -> None:
        self._road_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_road()), road_)

    def init_packing_context(self, zserio_context: ComfortableSpeedPath.ZserioPackingContext) -> None:
        zserio_context.num_of_roads.init(zserio.array.BitFieldArrayTraits(8), self._num_of_roads_)
        self._speed_points_.init_packing_context(zserio_context.speed_points)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += self._speed_points_.bitsizeof(end_bitposition)
        end_bitposition += self._road_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ComfortableSpeedPath.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_of_roads.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_of_roads_)
        end_bitposition += self._speed_points_.bitsizeof_packed(zserio_context.speed_points, end_bitposition)
        end_bitposition += self._road_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition = self._speed_points_.initialize_offsets(end_bitposition)
        end_bitposition = self._road_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ComfortableSpeedPath.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_of_roads.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_of_roads_)
        end_bitposition = self._speed_points_.initialize_offsets_packed(zserio_context.speed_points, end_bitposition)
        end_bitposition = self._road_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_of_roads_ = zserio_reader.read_bits(8)
        self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader(zserio_reader)
        self._road_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_road()), zserio_reader, self._num_of_roads_)

    def read_packed(self, zserio_context: ComfortableSpeedPath.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_of_roads_ = zserio_context.num_of_roads.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader_packed(zserio_context.speed_points, zserio_reader)

        self._road_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_road()), zserio_reader, self._num_of_roads_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_of_roads_, 8)

        self._speed_points_.write(zserio_writer)

        # check array length
        if len(self._road_) != (self._num_of_roads_):
            raise zserio.PythonRuntimeException("Wrong array length for field ComfortableSpeedPath.road: "
                                                f"{len(self._road_)} != {self._num_of_roads_}!")
        self._road_.write(zserio_writer)

    def write_packed(self, zserio_context: ComfortableSpeedPath.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_of_roads.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_of_roads_)

        self._speed_points_.write_packed(zserio_context.speed_points, zserio_writer)

        # check array length
        if len(self._road_) != (self._num_of_roads_):
            raise zserio.PythonRuntimeException("Wrong array length for field ComfortableSpeedPath.road: "
                                                f"{len(self._road_)} != {self._num_of_roads_}!")
        self._road_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_of_roads_ = zserio.array.DeltaContext()
            self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.ZserioPackingContext()

        @property
        def num_of_roads(self):
            return self._num_of_roads_

        @property
        def speed_points(self):
            return self._speed_points_

    class _ZserioElementFactory_road:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad:
            del zserio_index
            return nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad.ZserioPackingContext:
            return nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad:
            del zserio_index
            return nds.adas.types.comfortable_speed_road.ComfortableSpeedRoad.from_reader_packed(zserio_context, zserio_reader)
