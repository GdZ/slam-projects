# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.adas_geometry_position
import nds.adas.types.elevation

class ElevationArray:
    def __init__(
            self,
            num_values_: int = int(),
            point_: typing.List[nds.adas.types.adas_geometry_position.AdasGeometryPosition] = None,
            elevation_: typing.List[nds.adas.types.elevation.Elevation] = None) -> None:
        self._num_values_ = num_values_
        self._point_ = zserio.array.Array(zserio.array.VarSizeArrayTraits(), point_)
        self._elevation_ = zserio.array.Array(zserio.array.VarInt32ArrayTraits(), elevation_)

    @classmethod
    def from_reader(
            cls: typing.Type['ElevationArray'],
            zserio_reader: zserio.BitStreamReader) -> 'ElevationArray':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ElevationArray'],
            zserio_context: ElevationArray.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ElevationArray':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElevationArray):
            return ((self._num_values_ == other._num_values_) and
                    (self._point_ == other._point_) and
                    (self._elevation_ == other._elevation_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_values_)
        result = zserio.hashcode.calc_hashcode_object(result, self._point_)
        result = zserio.hashcode.calc_hashcode_object(result, self._elevation_)

        return result

    @property
    def num_values(self) -> int:
        return self._num_values_

    @num_values.setter
    def num_values(self, num_values_: int) -> None:
        self._num_values_ = num_values_

    @property
    def point(self) -> typing.List[nds.adas.types.adas_geometry_position.AdasGeometryPosition]:
        return self._point_.raw_array

    @point.setter
    def point(self, point_: typing.List[nds.adas.types.adas_geometry_position.AdasGeometryPosition]) -> None:
        self._point_ = zserio.array.Array(zserio.array.VarSizeArrayTraits(), point_)

    @property
    def elevation(self) -> typing.List[nds.adas.types.elevation.Elevation]:
        return self._elevation_.raw_array

    @elevation.setter
    def elevation(self, elevation_: typing.List[nds.adas.types.elevation.Elevation]) -> None:
        self._elevation_ = zserio.array.Array(zserio.array.VarInt32ArrayTraits(), elevation_)

    def init_packing_context(self, zserio_context: ElevationArray.ZserioPackingContext) -> None:
        zserio_context.num_values.init(zserio.array.VarUInt16ArrayTraits(), self._num_values_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_values_)
        end_bitposition += self._point_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._elevation_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ElevationArray.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_values.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_values_)
        end_bitposition += self._point_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._elevation_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_values_)
        end_bitposition = self._point_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._elevation_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ElevationArray.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_values.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_values_)
        end_bitposition = self._point_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._elevation_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_values_ = zserio_reader.read_varuint16()
        self._point_ = zserio.array.Array.from_reader_packed(zserio.array.VarSizeArrayTraits(), zserio_reader, self._num_values_)
        self._elevation_ = zserio.array.Array.from_reader_packed(zserio.array.VarInt32ArrayTraits(), zserio_reader, self._num_values_)

    def read_packed(self, zserio_context: ElevationArray.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_values_ = zserio_context.num_values.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._point_ = zserio.array.Array.from_reader_packed(zserio.array.VarSizeArrayTraits(), zserio_reader, self._num_values_)

        self._elevation_ = zserio.array.Array.from_reader_packed(zserio.array.VarInt32ArrayTraits(), zserio_reader, self._num_values_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._num_values_)

        # check array length
        if len(self._point_) != (self._num_values_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElevationArray.point: "
                                                f"{len(self._point_)} != {self._num_values_}!")
        self._point_.write_packed(zserio_writer)

        # check array length
        if len(self._elevation_) != (self._num_values_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElevationArray.elevation: "
                                                f"{len(self._elevation_)} != {self._num_values_}!")
        self._elevation_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: ElevationArray.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_values.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_values_)

        # check array length
        if len(self._point_) != (self._num_values_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElevationArray.point: "
                                                f"{len(self._point_)} != {self._num_values_}!")
        self._point_.write_packed(zserio_writer)

        # check array length
        if len(self._elevation_) != (self._num_values_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElevationArray.elevation: "
                                                f"{len(self._elevation_)} != {self._num_values_}!")
        self._elevation_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_values_ = zserio.array.DeltaContext()

        @property
        def num_values(self):
            return self._num_values_
