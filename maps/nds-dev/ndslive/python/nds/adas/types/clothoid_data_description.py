# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class ClothoidDataDescription:
    def __init__(
            self,
            number_of_steps_: int = int(),
            num_bits_: int = int(),
            has_coord_diff_: bool = bool(),
            has_t_start_: bool = bool(),
            has_t_end_: bool = bool(),
            has_c_start_: bool = bool(),
            has_c_end_: bool = bool(),
            has_chainage_diff_: bool = bool()) -> None:
        self._number_of_steps_ = number_of_steps_
        self._num_bits_ = num_bits_
        self._has_coord_diff_ = has_coord_diff_
        self._has_t_start_ = has_t_start_
        self._has_t_end_ = has_t_end_
        self._has_c_start_ = has_c_start_
        self._has_c_end_ = has_c_end_
        self._has_chainage_diff_ = has_chainage_diff_

    @classmethod
    def from_reader(
            cls: typing.Type['ClothoidDataDescription'],
            zserio_reader: zserio.BitStreamReader) -> 'ClothoidDataDescription':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ClothoidDataDescription'],
            zserio_context: ClothoidDataDescription.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ClothoidDataDescription':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ClothoidDataDescription):
            return ((self._number_of_steps_ == other._number_of_steps_) and
                    (self._num_bits_ == other._num_bits_) and
                    (self._has_coord_diff_ == other._has_coord_diff_) and
                    (self._has_t_start_ == other._has_t_start_) and
                    (self._has_t_end_ == other._has_t_end_) and
                    (self._has_c_start_ == other._has_c_start_) and
                    (self._has_c_end_ == other._has_c_end_) and
                    (self._has_chainage_diff_ == other._has_chainage_diff_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._number_of_steps_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_coord_diff_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_t_start_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_t_end_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_c_start_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_c_end_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_chainage_diff_)

        return result

    @property
    def number_of_steps(self) -> int:
        return self._number_of_steps_

    @number_of_steps.setter
    def number_of_steps(self, number_of_steps_: int) -> None:
        self._number_of_steps_ = number_of_steps_

    @property
    def num_bits(self) -> int:
        return self._num_bits_

    @num_bits.setter
    def num_bits(self, num_bits_: int) -> None:
        self._num_bits_ = num_bits_

    @property
    def has_coord_diff(self) -> bool:
        return self._has_coord_diff_

    @has_coord_diff.setter
    def has_coord_diff(self, has_coord_diff_: bool) -> None:
        self._has_coord_diff_ = has_coord_diff_

    @property
    def has_t_start(self) -> bool:
        return self._has_t_start_

    @has_t_start.setter
    def has_t_start(self, has_t_start_: bool) -> None:
        self._has_t_start_ = has_t_start_

    @property
    def has_t_end(self) -> bool:
        return self._has_t_end_

    @has_t_end.setter
    def has_t_end(self, has_t_end_: bool) -> None:
        self._has_t_end_ = has_t_end_

    @property
    def has_c_start(self) -> bool:
        return self._has_c_start_

    @has_c_start.setter
    def has_c_start(self, has_c_start_: bool) -> None:
        self._has_c_start_ = has_c_start_

    @property
    def has_c_end(self) -> bool:
        return self._has_c_end_

    @has_c_end.setter
    def has_c_end(self, has_c_end_: bool) -> None:
        self._has_c_end_ = has_c_end_

    @property
    def has_chainage_diff(self) -> bool:
        return self._has_chainage_diff_

    @has_chainage_diff.setter
    def has_chainage_diff(self, has_chainage_diff_: bool) -> None:
        self._has_chainage_diff_ = has_chainage_diff_

    def init_packing_context(self, zserio_context: ClothoidDataDescription.ZserioPackingContext) -> None:
        zserio_context.number_of_steps.init(zserio.array.VarUInt16ArrayTraits(), self._number_of_steps_)
        zserio_context.num_bits.init(zserio.array.BitFieldArrayTraits(5), self._num_bits_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._number_of_steps_)
        end_bitposition += 5
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ClothoidDataDescription.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.number_of_steps.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._number_of_steps_)
        end_bitposition += zserio_context.num_bits.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._number_of_steps_)
        end_bitposition += 5
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ClothoidDataDescription.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.number_of_steps.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._number_of_steps_)
        end_bitposition += zserio_context.num_bits.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._number_of_steps_ = zserio_reader.read_varuint16()
        self._num_bits_ = zserio_reader.read_bits(5)
        self._has_coord_diff_ = zserio_reader.read_bool()
        self._has_t_start_ = zserio_reader.read_bool()
        self._has_t_end_ = zserio_reader.read_bool()
        self._has_c_start_ = zserio_reader.read_bool()
        self._has_c_end_ = zserio_reader.read_bool()
        self._has_chainage_diff_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: ClothoidDataDescription.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._number_of_steps_ = zserio_context.number_of_steps.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._num_bits_ = zserio_context.num_bits.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._has_coord_diff_ = zserio_reader.read_bool()

        self._has_t_start_ = zserio_reader.read_bool()

        self._has_t_end_ = zserio_reader.read_bool()

        self._has_c_start_ = zserio_reader.read_bool()

        self._has_c_end_ = zserio_reader.read_bool()

        self._has_chainage_diff_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._number_of_steps_)
        zserio_writer.write_bits(self._num_bits_, 5)
        zserio_writer.write_bool(self._has_coord_diff_)
        zserio_writer.write_bool(self._has_t_start_)
        zserio_writer.write_bool(self._has_t_end_)
        zserio_writer.write_bool(self._has_c_start_)
        zserio_writer.write_bool(self._has_c_end_)
        zserio_writer.write_bool(self._has_chainage_diff_)

    def write_packed(self, zserio_context: ClothoidDataDescription.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.number_of_steps.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._number_of_steps_)

        zserio_context.num_bits.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._num_bits_)

        zserio_writer.write_bool(self._has_coord_diff_)

        zserio_writer.write_bool(self._has_t_start_)

        zserio_writer.write_bool(self._has_t_end_)

        zserio_writer.write_bool(self._has_c_start_)

        zserio_writer.write_bool(self._has_c_end_)

        zserio_writer.write_bool(self._has_chainage_diff_)

    class ZserioPackingContext:
        def __init__(self):
            self._number_of_steps_ = zserio.array.DeltaContext()
            self._num_bits_ = zserio.array.DeltaContext()

        @property
        def number_of_steps(self):
            return self._number_of_steps_

        @property
        def num_bits(self):
            return self._num_bits_
