# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.adas_accuracy
import nds.adas.types.degree_of_freedom
import nds.adas.types.standard_deviation

class GradientMetaData:
    def __init__(
            self,
            adas_accuracy_: typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None] = None,
            standard_deviation_: nds.adas.types.standard_deviation.StandardDeviation = nds.adas.types.standard_deviation.StandardDeviation(),
            degree_of_freedom_: nds.adas.types.degree_of_freedom.DegreeOfFreedom = nds.adas.types.degree_of_freedom.DegreeOfFreedom(),
            absolute_grade_line_elevation_: int = int(),
            delta_chainage_start_: int = int()) -> None:
        self._adas_accuracy_ = adas_accuracy_
        self._standard_deviation_ = standard_deviation_
        self._degree_of_freedom_ = degree_of_freedom_
        self._absolute_grade_line_elevation_ = absolute_grade_line_elevation_
        self._delta_chainage_start_ = delta_chainage_start_

    @classmethod
    def from_reader(
            cls: typing.Type['GradientMetaData'],
            zserio_reader: zserio.BitStreamReader) -> 'GradientMetaData':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GradientMetaData'],
            zserio_context: GradientMetaData.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GradientMetaData':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GradientMetaData):
            return ((self._adas_accuracy_ == other._adas_accuracy_) and
                    (self._standard_deviation_ == other._standard_deviation_) and
                    (self._degree_of_freedom_ == other._degree_of_freedom_) and
                    (self._absolute_grade_line_elevation_ == other._absolute_grade_line_elevation_) and
                    (self._delta_chainage_start_ == other._delta_chainage_start_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._adas_accuracy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._standard_deviation_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._degree_of_freedom_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._absolute_grade_line_elevation_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._delta_chainage_start_)

        return result

    @property
    def adas_accuracy(self) -> typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None]:
        return self._adas_accuracy_

    @adas_accuracy.setter
    def adas_accuracy(self, adas_accuracy_: typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None]) -> None:
        self._adas_accuracy_ = adas_accuracy_

    @property
    def standard_deviation(self) -> nds.adas.types.standard_deviation.StandardDeviation:
        return self._standard_deviation_

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation_: nds.adas.types.standard_deviation.StandardDeviation) -> None:
        self._standard_deviation_ = standard_deviation_

    @property
    def degree_of_freedom(self) -> nds.adas.types.degree_of_freedom.DegreeOfFreedom:
        return self._degree_of_freedom_

    @degree_of_freedom.setter
    def degree_of_freedom(self, degree_of_freedom_: nds.adas.types.degree_of_freedom.DegreeOfFreedom) -> None:
        self._degree_of_freedom_ = degree_of_freedom_

    @property
    def absolute_grade_line_elevation(self) -> int:
        return self._absolute_grade_line_elevation_

    @absolute_grade_line_elevation.setter
    def absolute_grade_line_elevation(self, absolute_grade_line_elevation_: int) -> None:
        self._absolute_grade_line_elevation_ = absolute_grade_line_elevation_

    @property
    def delta_chainage_start(self) -> int:
        return self._delta_chainage_start_

    @delta_chainage_start.setter
    def delta_chainage_start(self, delta_chainage_start_: int) -> None:
        self._delta_chainage_start_ = delta_chainage_start_

    def init_packing_context(self, zserio_context: GradientMetaData.ZserioPackingContext) -> None:
        self._adas_accuracy_.init_packing_context(zserio_context.adas_accuracy)
        zserio_context.standard_deviation.init(zserio.array.BitFieldArrayTraits(8), self._standard_deviation_)
        zserio_context.degree_of_freedom.init(zserio.array.BitFieldArrayTraits(16), self._degree_of_freedom_)
        zserio_context.absolute_grade_line_elevation.init(zserio.array.BitFieldArrayTraits(12), self._absolute_grade_line_elevation_)
        zserio_context.delta_chainage_start.init(zserio.array.SignedBitFieldArrayTraits(16), self._delta_chainage_start_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._adas_accuracy_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += 16
        end_bitposition += 12
        end_bitposition += 16

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GradientMetaData.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._adas_accuracy_.bitsizeof_packed(zserio_context.adas_accuracy, end_bitposition)
        end_bitposition += zserio_context.standard_deviation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._standard_deviation_)
        end_bitposition += zserio_context.degree_of_freedom.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._degree_of_freedom_)
        end_bitposition += zserio_context.absolute_grade_line_elevation.bitsizeof(zserio.array.BitFieldArrayTraits(12), self._absolute_grade_line_elevation_)
        end_bitposition += zserio_context.delta_chainage_start.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._delta_chainage_start_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._adas_accuracy_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += 16
        end_bitposition += 12
        end_bitposition += 16

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GradientMetaData.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._adas_accuracy_.initialize_offsets_packed(zserio_context.adas_accuracy, end_bitposition)
        end_bitposition += zserio_context.standard_deviation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._standard_deviation_)
        end_bitposition += zserio_context.degree_of_freedom.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._degree_of_freedom_)
        end_bitposition += zserio_context.absolute_grade_line_elevation.bitsizeof(zserio.array.BitFieldArrayTraits(12), self._absolute_grade_line_elevation_)
        end_bitposition += zserio_context.delta_chainage_start.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._delta_chainage_start_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._adas_accuracy_ = nds.adas.types.adas_accuracy.AdasAccuracy.from_reader(zserio_reader)
        self._standard_deviation_ = zserio_reader.read_bits(8)
        self._degree_of_freedom_ = zserio_reader.read_bits(16)
        self._absolute_grade_line_elevation_ = zserio_reader.read_bits(12)
        self._delta_chainage_start_ = zserio_reader.read_signed_bits(16)

    def read_packed(self, zserio_context: GradientMetaData.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._adas_accuracy_ = nds.adas.types.adas_accuracy.AdasAccuracy.from_reader_packed(zserio_context.adas_accuracy, zserio_reader)

        self._standard_deviation_ = zserio_context.standard_deviation.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._degree_of_freedom_ = zserio_context.degree_of_freedom.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)

        self._absolute_grade_line_elevation_ = zserio_context.absolute_grade_line_elevation.read(zserio.array.BitFieldArrayTraits(12), zserio_reader)

        self._delta_chainage_start_ = zserio_context.delta_chainage_start.read(zserio.array.SignedBitFieldArrayTraits(16), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._adas_accuracy_.write(zserio_writer)
        zserio_writer.write_bits(self._standard_deviation_, 8)
        zserio_writer.write_bits(self._degree_of_freedom_, 16)
        zserio_writer.write_bits(self._absolute_grade_line_elevation_, 12)
        zserio_writer.write_signed_bits(self._delta_chainage_start_, 16)

    def write_packed(self, zserio_context: GradientMetaData.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._adas_accuracy_.write_packed(zserio_context.adas_accuracy, zserio_writer)

        zserio_context.standard_deviation.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._standard_deviation_)

        zserio_context.degree_of_freedom.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._degree_of_freedom_)

        zserio_context.absolute_grade_line_elevation.write(zserio.array.BitFieldArrayTraits(12), zserio_writer, self._absolute_grade_line_elevation_)

        zserio_context.delta_chainage_start.write(zserio.array.SignedBitFieldArrayTraits(16), zserio_writer, self._delta_chainage_start_)

    class ZserioPackingContext:
        def __init__(self):
            self._adas_accuracy_ = zserio.array.DeltaContext()
            self._standard_deviation_ = zserio.array.DeltaContext()
            self._degree_of_freedom_ = zserio.array.DeltaContext()
            self._absolute_grade_line_elevation_ = zserio.array.DeltaContext()
            self._delta_chainage_start_ = zserio.array.DeltaContext()

        @property
        def adas_accuracy(self):
            return self._adas_accuracy_

        @property
        def standard_deviation(self):
            return self._standard_deviation_

        @property
        def degree_of_freedom(self):
            return self._degree_of_freedom_

        @property
        def absolute_grade_line_elevation(self):
            return self._absolute_grade_line_elevation_

        @property
        def delta_chainage_start(self):
            return self._delta_chainage_start_
