# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.adas_geometry_position
import nds.adas.types.clothoid_curvature
import nds.adas.types.clothoid_data_description
import nds.adas.types.tangent_arc

class ClothoidData:
    def __init__(
            self,
            clothoid_data_description_: typing.Union[nds.adas.types.clothoid_data_description.ClothoidDataDescription, None] = None,
            clothoid_position_: typing.Optional[nds.adas.types.adas_geometry_position.AdasGeometryPosition] = None,
            tangent_arc_start_: typing.Optional[nds.adas.types.tangent_arc.TangentArc] = None,
            tangent_arc_end_: typing.Optional[nds.adas.types.tangent_arc.TangentArc] = None,
            curvature_start_: typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature] = None,
            curvature_end_: typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature] = None,
            delta_chainage_: typing.Optional[int] = None) -> None:
        self._clothoid_data_description_ = clothoid_data_description_
        self._clothoid_position_ = clothoid_position_
        self._tangent_arc_start_ = tangent_arc_start_
        self._tangent_arc_end_ = tangent_arc_end_
        self._curvature_start_ = curvature_start_
        self._curvature_end_ = curvature_end_
        self._delta_chainage_ = delta_chainage_

    @classmethod
    def from_reader(
            cls: typing.Type['ClothoidData'],
            zserio_reader: zserio.BitStreamReader) -> 'ClothoidData':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ClothoidData'],
            zserio_context: ClothoidData.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ClothoidData':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ClothoidData):
            return ((self._clothoid_data_description_ == other._clothoid_data_description_) and
                    (not other.is_clothoid_position_used() if not self.is_clothoid_position_used() else (self._clothoid_position_ == other._clothoid_position_)) and
                    (not other.is_tangent_arc_start_used() if not self.is_tangent_arc_start_used() else (self._tangent_arc_start_ == other._tangent_arc_start_)) and
                    (not other.is_tangent_arc_end_used() if not self.is_tangent_arc_end_used() else (self._tangent_arc_end_ == other._tangent_arc_end_)) and
                    (not other.is_curvature_start_used() if not self.is_curvature_start_used() else (self._curvature_start_ == other._curvature_start_)) and
                    (not other.is_curvature_end_used() if not self.is_curvature_end_used() else (self._curvature_end_ == other._curvature_end_)) and
                    (not other.is_delta_chainage_used() if not self.is_delta_chainage_used() else (self._delta_chainage_ == other._delta_chainage_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._clothoid_data_description_)
        if self.is_clothoid_position_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._tangent_arc_start_)
        if self.is_tangent_arc_end_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._tangent_arc_end_)
        if self.is_curvature_start_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._curvature_start_)
        if self.is_curvature_end_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._curvature_end_)
        if self.is_delta_chainage_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._delta_chainage_)

        return result

    @property
    def clothoid_data_description(self) -> typing.Union[nds.adas.types.clothoid_data_description.ClothoidDataDescription, None]:
        return self._clothoid_data_description_

    @clothoid_data_description.setter
    def clothoid_data_description(self, clothoid_data_description_: typing.Union[nds.adas.types.clothoid_data_description.ClothoidDataDescription, None]) -> None:
        self._clothoid_data_description_ = clothoid_data_description_

    @property
    def clothoid_position(self) -> typing.Optional[nds.adas.types.adas_geometry_position.AdasGeometryPosition]:
        return self._clothoid_position_

    @clothoid_position.setter
    def clothoid_position(self, clothoid_position_: typing.Optional[nds.adas.types.adas_geometry_position.AdasGeometryPosition]) -> None:
        self._clothoid_position_ = clothoid_position_

    def is_clothoid_position_used(self) -> bool:
        return self._clothoid_data_description_.has_coord_diff == True

    def is_clothoid_position_set(self) -> bool:
        return not self._clothoid_position_ is None

    def reset_clothoid_position(self) -> None:
        self._clothoid_position_ = None

    @property
    def tangent_arc_start(self) -> typing.Optional[nds.adas.types.tangent_arc.TangentArc]:
        return self._tangent_arc_start_

    @tangent_arc_start.setter
    def tangent_arc_start(self, tangent_arc_start_: typing.Optional[nds.adas.types.tangent_arc.TangentArc]) -> None:
        self._tangent_arc_start_ = tangent_arc_start_

    def is_tangent_arc_start_used(self) -> bool:
        return self._clothoid_data_description_.has_t_start == True

    def is_tangent_arc_start_set(self) -> bool:
        return not self._tangent_arc_start_ is None

    def reset_tangent_arc_start(self) -> None:
        self._tangent_arc_start_ = None

    @property
    def tangent_arc_end(self) -> typing.Optional[nds.adas.types.tangent_arc.TangentArc]:
        return self._tangent_arc_end_

    @tangent_arc_end.setter
    def tangent_arc_end(self, tangent_arc_end_: typing.Optional[nds.adas.types.tangent_arc.TangentArc]) -> None:
        self._tangent_arc_end_ = tangent_arc_end_

    def is_tangent_arc_end_used(self) -> bool:
        return self._clothoid_data_description_.has_t_end == True

    def is_tangent_arc_end_set(self) -> bool:
        return not self._tangent_arc_end_ is None

    def reset_tangent_arc_end(self) -> None:
        self._tangent_arc_end_ = None

    @property
    def curvature_start(self) -> typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature]:
        return self._curvature_start_

    @curvature_start.setter
    def curvature_start(self, curvature_start_: typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature]) -> None:
        self._curvature_start_ = curvature_start_

    def is_curvature_start_used(self) -> bool:
        return self._clothoid_data_description_.has_c_start == True

    def is_curvature_start_set(self) -> bool:
        return not self._curvature_start_ is None

    def reset_curvature_start(self) -> None:
        self._curvature_start_ = None

    @property
    def curvature_end(self) -> typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature]:
        return self._curvature_end_

    @curvature_end.setter
    def curvature_end(self, curvature_end_: typing.Optional[nds.adas.types.clothoid_curvature.ClothoidCurvature]) -> None:
        self._curvature_end_ = curvature_end_

    def is_curvature_end_used(self) -> bool:
        return self._clothoid_data_description_.has_c_end == True

    def is_curvature_end_set(self) -> bool:
        return not self._curvature_end_ is None

    def reset_curvature_end(self) -> None:
        self._curvature_end_ = None

    @property
    def delta_chainage(self) -> typing.Optional[int]:
        return self._delta_chainage_

    @delta_chainage.setter
    def delta_chainage(self, delta_chainage_: typing.Optional[int]) -> None:
        self._delta_chainage_ = delta_chainage_

    def is_delta_chainage_used(self) -> bool:
        return self._clothoid_data_description_.has_chainage_diff == True

    def is_delta_chainage_set(self) -> bool:
        return not self._delta_chainage_ is None

    def reset_delta_chainage(self) -> None:
        self._delta_chainage_ = None

    def init_packing_context(self, zserio_context: ClothoidData.ZserioPackingContext) -> None:
        self._clothoid_data_description_.init_packing_context(zserio_context.clothoid_data_description)
        if self.is_clothoid_position_used():
            zserio_context.clothoid_position.init(zserio.array.VarSizeArrayTraits(), self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            zserio_context.tangent_arc_start.init(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_start_)
        if self.is_tangent_arc_end_used():
            zserio_context.tangent_arc_end.init(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_end_)
        if self.is_curvature_start_used():
            zserio_context.curvature_start.init(zserio.array.BitFieldArrayTraits(10), self._curvature_start_)
        if self.is_curvature_end_used():
            zserio_context.curvature_end.init(zserio.array.BitFieldArrayTraits(10), self._curvature_end_)
        if self.is_delta_chainage_used():
            zserio_context.delta_chainage.init(zserio.array.VarSizeArrayTraits(), self._delta_chainage_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._clothoid_data_description_.bitsizeof(end_bitposition)
        if self.is_clothoid_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            end_bitposition += 16
        if self.is_tangent_arc_end_used():
            end_bitposition += 16
        if self.is_curvature_start_used():
            end_bitposition += 10
        if self.is_curvature_end_used():
            end_bitposition += 10
        if self.is_delta_chainage_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._delta_chainage_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ClothoidData.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._clothoid_data_description_.bitsizeof_packed(zserio_context.clothoid_data_description, end_bitposition)
        if self.is_clothoid_position_used():
            end_bitposition += zserio_context.clothoid_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            end_bitposition += zserio_context.tangent_arc_start.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_start_)
        if self.is_tangent_arc_end_used():
            end_bitposition += zserio_context.tangent_arc_end.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_end_)
        if self.is_curvature_start_used():
            end_bitposition += zserio_context.curvature_start.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._curvature_start_)
        if self.is_curvature_end_used():
            end_bitposition += zserio_context.curvature_end.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._curvature_end_)
        if self.is_delta_chainage_used():
            end_bitposition += zserio_context.delta_chainage.bitsizeof(zserio.array.VarSizeArrayTraits(), self._delta_chainage_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._clothoid_data_description_.initialize_offsets(end_bitposition)
        if self.is_clothoid_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            end_bitposition += 16
        if self.is_tangent_arc_end_used():
            end_bitposition += 16
        if self.is_curvature_start_used():
            end_bitposition += 10
        if self.is_curvature_end_used():
            end_bitposition += 10
        if self.is_delta_chainage_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._delta_chainage_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ClothoidData.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._clothoid_data_description_.initialize_offsets_packed(zserio_context.clothoid_data_description, end_bitposition)
        if self.is_clothoid_position_used():
            end_bitposition += zserio_context.clothoid_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            end_bitposition += zserio_context.tangent_arc_start.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_start_)
        if self.is_tangent_arc_end_used():
            end_bitposition += zserio_context.tangent_arc_end.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._tangent_arc_end_)
        if self.is_curvature_start_used():
            end_bitposition += zserio_context.curvature_start.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._curvature_start_)
        if self.is_curvature_end_used():
            end_bitposition += zserio_context.curvature_end.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._curvature_end_)
        if self.is_delta_chainage_used():
            end_bitposition += zserio_context.delta_chainage.bitsizeof(zserio.array.VarSizeArrayTraits(), self._delta_chainage_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._clothoid_data_description_ = nds.adas.types.clothoid_data_description.ClothoidDataDescription.from_reader(zserio_reader)
        if self.is_clothoid_position_used():
            self._clothoid_position_ = zserio_reader.read_varsize()
        else:
            self._clothoid_position_ = None
        if self.is_tangent_arc_start_used():
            self._tangent_arc_start_ = zserio_reader.read_bits(16)
        else:
            self._tangent_arc_start_ = None
        if self.is_tangent_arc_end_used():
            self._tangent_arc_end_ = zserio_reader.read_bits(16)
        else:
            self._tangent_arc_end_ = None
        if self.is_curvature_start_used():
            self._curvature_start_ = zserio_reader.read_bits(10)
        else:
            self._curvature_start_ = None
        if self.is_curvature_end_used():
            self._curvature_end_ = zserio_reader.read_bits(10)
        else:
            self._curvature_end_ = None
        if self.is_delta_chainage_used():
            self._delta_chainage_ = zserio_reader.read_varsize()
        else:
            self._delta_chainage_ = None

    def read_packed(self, zserio_context: ClothoidData.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._clothoid_data_description_ = nds.adas.types.clothoid_data_description.ClothoidDataDescription.from_reader_packed(zserio_context.clothoid_data_description, zserio_reader)

        if self.is_clothoid_position_used():
            self._clothoid_position_ = zserio_context.clothoid_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        else:
            self._clothoid_position_ = None

        if self.is_tangent_arc_start_used():
            self._tangent_arc_start_ = zserio_context.tangent_arc_start.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)
        else:
            self._tangent_arc_start_ = None

        if self.is_tangent_arc_end_used():
            self._tangent_arc_end_ = zserio_context.tangent_arc_end.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)
        else:
            self._tangent_arc_end_ = None

        if self.is_curvature_start_used():
            self._curvature_start_ = zserio_context.curvature_start.read(zserio.array.BitFieldArrayTraits(10), zserio_reader)
        else:
            self._curvature_start_ = None

        if self.is_curvature_end_used():
            self._curvature_end_ = zserio_context.curvature_end.read(zserio.array.BitFieldArrayTraits(10), zserio_reader)
        else:
            self._curvature_end_ = None

        if self.is_delta_chainage_used():
            self._delta_chainage_ = zserio_context.delta_chainage.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        else:
            self._delta_chainage_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._clothoid_data_description_.write(zserio_writer)
        if self.is_clothoid_position_used():
            zserio_writer.write_varsize(self._clothoid_position_)
        if self.is_tangent_arc_start_used():
            zserio_writer.write_bits(self._tangent_arc_start_, 16)
        if self.is_tangent_arc_end_used():
            zserio_writer.write_bits(self._tangent_arc_end_, 16)
        if self.is_curvature_start_used():
            zserio_writer.write_bits(self._curvature_start_, 10)
        if self.is_curvature_end_used():
            zserio_writer.write_bits(self._curvature_end_, 10)
        if self.is_delta_chainage_used():
            zserio_writer.write_varsize(self._delta_chainage_)

    def write_packed(self, zserio_context: ClothoidData.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._clothoid_data_description_.write_packed(zserio_context.clothoid_data_description, zserio_writer)

        if self.is_clothoid_position_used():
            zserio_context.clothoid_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._clothoid_position_)

        if self.is_tangent_arc_start_used():
            zserio_context.tangent_arc_start.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._tangent_arc_start_)

        if self.is_tangent_arc_end_used():
            zserio_context.tangent_arc_end.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._tangent_arc_end_)

        if self.is_curvature_start_used():
            zserio_context.curvature_start.write(zserio.array.BitFieldArrayTraits(10), zserio_writer, self._curvature_start_)

        if self.is_curvature_end_used():
            zserio_context.curvature_end.write(zserio.array.BitFieldArrayTraits(10), zserio_writer, self._curvature_end_)

        if self.is_delta_chainage_used():
            zserio_context.delta_chainage.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._delta_chainage_)

    class ZserioPackingContext:
        def __init__(self):
            self._clothoid_data_description_ = nds.adas.types.clothoid_data_description.ClothoidDataDescription.ZserioPackingContext()
            self._clothoid_position_ = zserio.array.DeltaContext()
            self._tangent_arc_start_ = zserio.array.DeltaContext()
            self._tangent_arc_end_ = zserio.array.DeltaContext()
            self._curvature_start_ = zserio.array.DeltaContext()
            self._curvature_end_ = zserio.array.DeltaContext()
            self._delta_chainage_ = zserio.array.DeltaContext()

        @property
        def clothoid_data_description(self):
            return self._clothoid_data_description_

        @property
        def clothoid_position(self):
            return self._clothoid_position_

        @property
        def tangent_arc_start(self):
            return self._tangent_arc_start_

        @property
        def tangent_arc_end(self):
            return self._tangent_arc_end_

        @property
        def curvature_start(self):
            return self._curvature_start_

        @property
        def curvature_end(self):
            return self._curvature_end_

        @property
        def delta_chainage(self):
            return self._delta_chainage_
