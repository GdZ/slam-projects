# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.adas_geometry_position
import nds.adas.types.slope

class SlopePoint:
    def __init__(
            self,
            point_: nds.adas.types.adas_geometry_position.AdasGeometryPosition = nds.adas.types.adas_geometry_position.AdasGeometryPosition(),
            slope_: nds.adas.types.slope.Slope = nds.adas.types.slope.Slope()) -> None:
        self._point_ = point_
        self._slope_ = slope_

    @classmethod
    def from_reader(
            cls: typing.Type['SlopePoint'],
            zserio_reader: zserio.BitStreamReader) -> 'SlopePoint':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SlopePoint'],
            zserio_context: SlopePoint.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SlopePoint':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SlopePoint):
            return ((self._point_ == other._point_) and
                    (self._slope_ == other._slope_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._point_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._slope_)

        return result

    @property
    def point(self) -> nds.adas.types.adas_geometry_position.AdasGeometryPosition:
        return self._point_

    @point.setter
    def point(self, point_: nds.adas.types.adas_geometry_position.AdasGeometryPosition) -> None:
        self._point_ = point_

    @property
    def slope(self) -> nds.adas.types.slope.Slope:
        return self._slope_

    @slope.setter
    def slope(self, slope_: nds.adas.types.slope.Slope) -> None:
        self._slope_ = slope_

    def init_packing_context(self, zserio_context: SlopePoint.ZserioPackingContext) -> None:
        zserio_context.point.init(zserio.array.VarSizeArrayTraits(), self._point_)
        zserio_context.slope.init(zserio.array.SignedBitFieldArrayTraits(8), self._slope_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._point_)
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SlopePoint.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.point.bitsizeof(zserio.array.VarSizeArrayTraits(), self._point_)
        end_bitposition += zserio_context.slope.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._slope_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._point_)
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SlopePoint.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.point.bitsizeof(zserio.array.VarSizeArrayTraits(), self._point_)
        end_bitposition += zserio_context.slope.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._slope_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._point_ = zserio_reader.read_varsize()
        self._slope_ = zserio_reader.read_signed_bits(8)

    def read_packed(self, zserio_context: SlopePoint.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._point_ = zserio_context.point.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._slope_ = zserio_context.slope.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._point_)
        zserio_writer.write_signed_bits(self._slope_, 8)

    def write_packed(self, zserio_context: SlopePoint.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.point.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._point_)

        zserio_context.slope.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._slope_)

    class ZserioPackingContext:
        def __init__(self):
            self._point_ = zserio.array.DeltaContext()
            self._slope_ = zserio.array.DeltaContext()

        @property
        def point(self):
            return self._point_

        @property
        def slope(self):
            return self._slope_
