# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.types.comfortable_speed_point_list
import nds.road.reference.types.directed_road_reference

class ComfortableSpeedRoad:
    def __init__(
            self,
            feature_reference_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None] = None,
            speed_points_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None] = None) -> None:
        self._feature_reference_ = feature_reference_
        self._speed_points_ = speed_points_

    @classmethod
    def from_reader(
            cls: typing.Type['ComfortableSpeedRoad'],
            zserio_reader: zserio.BitStreamReader) -> 'ComfortableSpeedRoad':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ComfortableSpeedRoad'],
            zserio_context: ComfortableSpeedRoad.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ComfortableSpeedRoad':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ComfortableSpeedRoad):
            return ((self._feature_reference_ == other._feature_reference_) and
                    (self._speed_points_ == other._speed_points_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._feature_reference_)
        result = zserio.hashcode.calc_hashcode_object(result, self._speed_points_)

        return result

    @property
    def feature_reference(self) -> typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]:
        return self._feature_reference_

    @feature_reference.setter
    def feature_reference(self, feature_reference_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]) -> None:
        self._feature_reference_ = feature_reference_

    @property
    def speed_points(self) -> typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]:
        return self._speed_points_

    @speed_points.setter
    def speed_points(self, speed_points_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]) -> None:
        self._speed_points_ = speed_points_

    def init_packing_context(self, zserio_context: ComfortableSpeedRoad.ZserioPackingContext) -> None:
        self._feature_reference_.init_packing_context(zserio_context.feature_reference)
        self._speed_points_.init_packing_context(zserio_context.speed_points)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._feature_reference_.bitsizeof(end_bitposition)
        end_bitposition += self._speed_points_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ComfortableSpeedRoad.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._feature_reference_.bitsizeof_packed(zserio_context.feature_reference, end_bitposition)
        end_bitposition += self._speed_points_.bitsizeof_packed(zserio_context.speed_points, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._feature_reference_.initialize_offsets(end_bitposition)
        end_bitposition = self._speed_points_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ComfortableSpeedRoad.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._feature_reference_.initialize_offsets_packed(zserio_context.feature_reference, end_bitposition)
        end_bitposition = self._speed_points_.initialize_offsets_packed(zserio_context.speed_points, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._feature_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader(zserio_reader)
        self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader(zserio_reader)

    def read_packed(self, zserio_context: ComfortableSpeedRoad.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._feature_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader_packed(zserio_context.feature_reference, zserio_reader)

        self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader_packed(zserio_context.speed_points, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._feature_reference_.write(zserio_writer)
        self._speed_points_.write(zserio_writer)

    def write_packed(self, zserio_context: ComfortableSpeedRoad.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._feature_reference_.write_packed(zserio_context.feature_reference, zserio_writer)

        self._speed_points_.write_packed(zserio_context.speed_points, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._feature_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.ZserioPackingContext()
            self._speed_points_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.ZserioPackingContext()

        @property
        def feature_reference(self):
            return self._feature_reference_

        @property
        def speed_points(self):
            return self._speed_points_
