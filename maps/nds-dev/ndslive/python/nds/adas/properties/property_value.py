# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.properties.property_type
import nds.adas.types.adas_accuracy
import nds.adas.types.clothoid_meta_data
import nds.adas.types.gradient_meta_data

class PropertyValue:
    def __init__(
            self,
            type_: nds.adas.properties.property_type.PropertyType,
            *,
            adas_accuracy_: typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None] = None,
            clothoid_meta_data_: typing.Union[nds.adas.types.clothoid_meta_data.ClothoidMetaData, None] = None,
            gradient_meta_data_: typing.Union[nds.adas.types.gradient_meta_data.GradientMetaData, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if adas_accuracy_ is not None:
            self._choice = adas_accuracy_
        if clothoid_meta_data_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = clothoid_meta_data_
        if gradient_meta_data_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = gradient_meta_data_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            pass

        return result

    @property
    def type(self) -> nds.adas.properties.property_type.PropertyType:
        return self._type_

    @property
    def adas_accuracy(self) -> typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None]:
        return self._choice

    @adas_accuracy.setter
    def adas_accuracy(self, adas_accuracy_: typing.Union[nds.adas.types.adas_accuracy.AdasAccuracy, None]) -> None:
        self._choice = adas_accuracy_

    @property
    def clothoid_meta_data(self) -> typing.Union[nds.adas.types.clothoid_meta_data.ClothoidMetaData, None]:
        return self._choice

    @clothoid_meta_data.setter
    def clothoid_meta_data(self, clothoid_meta_data_: typing.Union[nds.adas.types.clothoid_meta_data.ClothoidMetaData, None]) -> None:
        self._choice = clothoid_meta_data_

    @property
    def gradient_meta_data(self) -> typing.Union[nds.adas.types.gradient_meta_data.GradientMetaData, None]:
        return self._choice

    @gradient_meta_data.setter
    def gradient_meta_data(self, gradient_meta_data_: typing.Union[nds.adas.types.gradient_meta_data.GradientMetaData, None]) -> None:
        self._choice = gradient_meta_data_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            return self.CHOICE_ADAS_ACCURACY
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            return self.CHOICE_CLOTHOID_META_DATA
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            return self.CHOICE_GRADIENT_META_DATA
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            self._choice.init_packing_context(zserio_context.adas_accuracy)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            self._choice.init_packing_context(zserio_context.clothoid_meta_data)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            self._choice.init_packing_context(zserio_context.gradient_meta_data)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.adas_accuracy, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.clothoid_meta_data, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.gradient_meta_data, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.adas_accuracy, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.clothoid_meta_data, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.gradient_meta_data, end_bitposition)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            self._choice = nds.adas.types.adas_accuracy.AdasAccuracy.from_reader(zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            self._choice = nds.adas.types.clothoid_meta_data.ClothoidMetaData.from_reader(zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            self._choice = nds.adas.types.gradient_meta_data.GradientMetaData.from_reader(zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            self._choice = nds.adas.types.adas_accuracy.AdasAccuracy.from_reader_packed(zserio_context.adas_accuracy, zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            self._choice = nds.adas.types.clothoid_meta_data.ClothoidMetaData.from_reader_packed(zserio_context.clothoid_meta_data, zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            self._choice = nds.adas.types.gradient_meta_data.GradientMetaData.from_reader_packed(zserio_context.gradient_meta_data, zserio_reader)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.properties.property_type.PropertyType.ADAS_ACCURACY):
            self._choice.write_packed(zserio_context.adas_accuracy, zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.CLOTHOID_META_DATA):
            self._choice.write_packed(zserio_context.clothoid_meta_data, zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.GRADIENT_META_DATA):
            self._choice.write_packed(zserio_context.gradient_meta_data, zserio_writer)
        elif selector == (nds.adas.properties.property_type.PropertyType.CORE):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._adas_accuracy_ = zserio.array.DeltaContext()
            self._clothoid_meta_data_ = nds.adas.types.clothoid_meta_data.ClothoidMetaData.ZserioPackingContext()
            self._gradient_meta_data_ = nds.adas.types.gradient_meta_data.GradientMetaData.ZserioPackingContext()

        @property
        def adas_accuracy(self):
            return self._adas_accuracy_

        @property
        def clothoid_meta_data(self):
            return self._clothoid_meta_data_

        @property
        def gradient_meta_data(self):
            return self._gradient_meta_data_

    CHOICE_ADAS_ACCURACY = 0
    CHOICE_CLOTHOID_META_DATA = 1
    CHOICE_GRADIENT_META_DATA = 2
    UNDEFINED_CHOICE = -1
