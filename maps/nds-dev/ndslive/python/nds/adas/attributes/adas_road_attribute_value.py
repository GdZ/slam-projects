# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.attributes.adas_road_attribute_type
import nds.adas.types.clothoid
import nds.adas.types.comfortable_speed_path
import nds.adas.types.comfortable_speed_point_list
import nds.adas.types.curvature_path
import nds.adas.types.curvature_point_list
import nds.adas.types.elevation_array
import nds.adas.types.enhanced_geometry
import nds.adas.types.gradient
import nds.adas.types.slope_array

class AdasRoadAttributeValue:
    def __init__(
            self,
            type_: nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType,
            *,
            slope_array_: typing.Union[nds.adas.types.slope_array.SlopeArray, None] = None,
            clothoid_: typing.Union[nds.adas.types.clothoid.Clothoid, None] = None,
            gradient_: typing.Union[nds.adas.types.gradient.Gradient, None] = None,
            enhanced_geometry_: typing.Union[nds.adas.types.enhanced_geometry.EnhancedGeometry, None] = None,
            curvature_point_list_: typing.Union[nds.adas.types.curvature_point_list.CurvaturePointList, None] = None,
            curvature_path_: typing.Union[nds.adas.types.curvature_path.CurvaturePath, None] = None,
            comfortable_speed_curve_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None] = None,
            comfortable_speed_path_: typing.Union[nds.adas.types.comfortable_speed_path.ComfortableSpeedPath, None] = None,
            elevation_array_: typing.Union[nds.adas.types.elevation_array.ElevationArray, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if slope_array_ is not None:
            self._choice = slope_array_
        if clothoid_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = clothoid_
        if gradient_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = gradient_
        if enhanced_geometry_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = enhanced_geometry_
        if curvature_point_list_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = curvature_point_list_
        if curvature_path_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = curvature_path_
        if comfortable_speed_curve_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = comfortable_speed_curve_
        if comfortable_speed_path_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = comfortable_speed_path_
        if elevation_array_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasRoadAttributeValue is ambiguous!")
            self._choice = elevation_array_

    @classmethod
    def from_reader(
            cls: typing.Type['AdasRoadAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType) -> 'AdasRoadAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AdasRoadAttributeValue'],
            zserio_context: AdasRoadAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType) -> 'AdasRoadAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AdasRoadAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType:
        return self._type_

    @property
    def slope_array(self) -> typing.Union[nds.adas.types.slope_array.SlopeArray, None]:
        return self._choice

    @slope_array.setter
    def slope_array(self, slope_array_: typing.Union[nds.adas.types.slope_array.SlopeArray, None]) -> None:
        self._choice = slope_array_

    @property
    def clothoid(self) -> typing.Union[nds.adas.types.clothoid.Clothoid, None]:
        return self._choice

    @clothoid.setter
    def clothoid(self, clothoid_: typing.Union[nds.adas.types.clothoid.Clothoid, None]) -> None:
        self._choice = clothoid_

    @property
    def gradient(self) -> typing.Union[nds.adas.types.gradient.Gradient, None]:
        return self._choice

    @gradient.setter
    def gradient(self, gradient_: typing.Union[nds.adas.types.gradient.Gradient, None]) -> None:
        self._choice = gradient_

    @property
    def enhanced_geometry(self) -> typing.Union[nds.adas.types.enhanced_geometry.EnhancedGeometry, None]:
        return self._choice

    @enhanced_geometry.setter
    def enhanced_geometry(self, enhanced_geometry_: typing.Union[nds.adas.types.enhanced_geometry.EnhancedGeometry, None]) -> None:
        self._choice = enhanced_geometry_

    @property
    def curvature_point_list(self) -> typing.Union[nds.adas.types.curvature_point_list.CurvaturePointList, None]:
        return self._choice

    @curvature_point_list.setter
    def curvature_point_list(self, curvature_point_list_: typing.Union[nds.adas.types.curvature_point_list.CurvaturePointList, None]) -> None:
        self._choice = curvature_point_list_

    @property
    def curvature_path(self) -> typing.Union[nds.adas.types.curvature_path.CurvaturePath, None]:
        return self._choice

    @curvature_path.setter
    def curvature_path(self, curvature_path_: typing.Union[nds.adas.types.curvature_path.CurvaturePath, None]) -> None:
        self._choice = curvature_path_

    @property
    def comfortable_speed_curve(self) -> typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]:
        return self._choice

    @comfortable_speed_curve.setter
    def comfortable_speed_curve(self, comfortable_speed_curve_: typing.Union[nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList, None]) -> None:
        self._choice = comfortable_speed_curve_

    @property
    def comfortable_speed_path(self) -> typing.Union[nds.adas.types.comfortable_speed_path.ComfortableSpeedPath, None]:
        return self._choice

    @comfortable_speed_path.setter
    def comfortable_speed_path(self, comfortable_speed_path_: typing.Union[nds.adas.types.comfortable_speed_path.ComfortableSpeedPath, None]) -> None:
        self._choice = comfortable_speed_path_

    @property
    def elevation_array(self) -> typing.Union[nds.adas.types.elevation_array.ElevationArray, None]:
        return self._choice

    @elevation_array.setter
    def elevation_array(self, elevation_array_: typing.Union[nds.adas.types.elevation_array.ElevationArray, None]) -> None:
        self._choice = elevation_array_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            return self.CHOICE_SLOPE_ARRAY
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            return self.CHOICE_CLOTHOID
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            return self.CHOICE_GRADIENT
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            return self.CHOICE_ENHANCED_GEOMETRY
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            return self.CHOICE_CURVATURE_POINT_LIST
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            return self.CHOICE_CURVATURE_PATH
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            return self.CHOICE_COMFORTABLE_SPEED_CURVE
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            return self.CHOICE_COMFORTABLE_SPEED_PATH
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            return self.CHOICE_ELEVATION_ARRAY
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: AdasRoadAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            self._choice.init_packing_context(zserio_context.slope_array)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            self._choice.init_packing_context(zserio_context.clothoid)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            self._choice.init_packing_context(zserio_context.gradient)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            pass
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            self._choice.init_packing_context(zserio_context.curvature_point_list)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            self._choice.init_packing_context(zserio_context.curvature_path)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            self._choice.init_packing_context(zserio_context.comfortable_speed_curve)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            self._choice.init_packing_context(zserio_context.comfortable_speed_path)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            self._choice.init_packing_context(zserio_context.elevation_array)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AdasRoadAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.slope_array, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.clothoid, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.gradient, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.curvature_point_list, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.curvature_path, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.comfortable_speed_curve, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.comfortable_speed_path, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.elevation_array, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AdasRoadAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.slope_array, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.clothoid, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.gradient, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.curvature_point_list, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.curvature_path, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.comfortable_speed_curve, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.comfortable_speed_path, end_bitposition)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.elevation_array, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            self._choice = nds.adas.types.slope_array.SlopeArray.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            self._choice = nds.adas.types.clothoid.Clothoid.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            self._choice = nds.adas.types.gradient.Gradient.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            self._choice = nds.adas.types.enhanced_geometry.EnhancedGeometry.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            self._choice = nds.adas.types.curvature_point_list.CurvaturePointList.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            self._choice = nds.adas.types.curvature_path.CurvaturePath.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            self._choice = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            self._choice = nds.adas.types.comfortable_speed_path.ComfortableSpeedPath.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            self._choice = nds.adas.types.elevation_array.ElevationArray.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

    def read_packed(self, zserio_context: AdasRoadAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            self._choice = nds.adas.types.slope_array.SlopeArray.from_reader_packed(zserio_context.slope_array, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            self._choice = nds.adas.types.clothoid.Clothoid.from_reader_packed(zserio_context.clothoid, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            self._choice = nds.adas.types.gradient.Gradient.from_reader_packed(zserio_context.gradient, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            self._choice = nds.adas.types.enhanced_geometry.EnhancedGeometry.from_reader(zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            self._choice = nds.adas.types.curvature_point_list.CurvaturePointList.from_reader_packed(zserio_context.curvature_point_list, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            self._choice = nds.adas.types.curvature_path.CurvaturePath.from_reader_packed(zserio_context.curvature_path, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            self._choice = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.from_reader_packed(zserio_context.comfortable_speed_curve, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            self._choice = nds.adas.types.comfortable_speed_path.ComfortableSpeedPath.from_reader_packed(zserio_context.comfortable_speed_path, zserio_reader)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            self._choice = nds.adas.types.elevation_array.ElevationArray.from_reader_packed(zserio_context.elevation_array, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

    def write_packed(self, zserio_context: AdasRoadAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.SLOPE_ARRAY):
            self._choice.write_packed(zserio_context.slope_array, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CLOTHOID):
            self._choice.write_packed(zserio_context.clothoid, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.GRADIENT):
            self._choice.write_packed(zserio_context.gradient, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ENHANCED_GEOMETRY):
            self._choice.write(zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE):
            self._choice.write_packed(zserio_context.curvature_point_list, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.CURVATURE_PATH):
            self._choice.write_packed(zserio_context.curvature_path, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_CURVE):
            self._choice.write_packed(zserio_context.comfortable_speed_curve, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.COMFORTABLE_SPEED_PATH):
            self._choice.write_packed(zserio_context.comfortable_speed_path, zserio_writer)
        elif selector == (nds.adas.attributes.adas_road_attribute_type.AdasRoadAttributeType.ELEVATION_ARRAY):
            self._choice.write_packed(zserio_context.elevation_array, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasRoadAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._slope_array_ = nds.adas.types.slope_array.SlopeArray.ZserioPackingContext()
            self._clothoid_ = nds.adas.types.clothoid.Clothoid.ZserioPackingContext()
            self._gradient_ = nds.adas.types.gradient.Gradient.ZserioPackingContext()
            self._curvature_point_list_ = nds.adas.types.curvature_point_list.CurvaturePointList.ZserioPackingContext()
            self._curvature_path_ = nds.adas.types.curvature_path.CurvaturePath.ZserioPackingContext()
            self._comfortable_speed_curve_ = nds.adas.types.comfortable_speed_point_list.ComfortableSpeedPointList.ZserioPackingContext()
            self._comfortable_speed_path_ = nds.adas.types.comfortable_speed_path.ComfortableSpeedPath.ZserioPackingContext()
            self._elevation_array_ = nds.adas.types.elevation_array.ElevationArray.ZserioPackingContext()

        @property
        def slope_array(self):
            return self._slope_array_

        @property
        def clothoid(self):
            return self._clothoid_

        @property
        def gradient(self):
            return self._gradient_

        @property
        def curvature_point_list(self):
            return self._curvature_point_list_

        @property
        def curvature_path(self):
            return self._curvature_path_

        @property
        def comfortable_speed_curve(self):
            return self._comfortable_speed_curve_

        @property
        def comfortable_speed_path(self):
            return self._comfortable_speed_path_

        @property
        def elevation_array(self):
            return self._elevation_array_

    CHOICE_SLOPE_ARRAY = 0
    CHOICE_CLOTHOID = 1
    CHOICE_GRADIENT = 2
    CHOICE_ENHANCED_GEOMETRY = 3
    CHOICE_CURVATURE_POINT_LIST = 4
    CHOICE_CURVATURE_PATH = 5
    CHOICE_COMFORTABLE_SPEED_CURVE = 6
    CHOICE_COMFORTABLE_SPEED_PATH = 7
    CHOICE_ELEVATION_ARRAY = 8
    UNDEFINED_CHOICE = -1
