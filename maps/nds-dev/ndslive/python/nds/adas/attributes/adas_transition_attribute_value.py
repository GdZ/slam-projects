# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.adas.attributes.adas_transition_attribute_type
import nds.adas.types.comfortable_speed
import nds.adas.types.curvature

class AdasTransitionAttributeValue:
    def __init__(
            self,
            type_: nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType,
            *,
            turn_geometry_curvature_: typing.Union[nds.adas.types.curvature.Curvature, None] = None,
            comfortable_speed_: typing.Union[nds.adas.types.comfortable_speed.ComfortableSpeed, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if turn_geometry_curvature_ is not None:
            self._choice = turn_geometry_curvature_
        if comfortable_speed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice AdasTransitionAttributeValue is ambiguous!")
            self._choice = comfortable_speed_

    @classmethod
    def from_reader(
            cls: typing.Type['AdasTransitionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType) -> 'AdasTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AdasTransitionAttributeValue'],
            zserio_context: AdasTransitionAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType) -> 'AdasTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AdasTransitionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType:
        return self._type_

    @property
    def turn_geometry_curvature(self) -> nds.adas.types.curvature.Curvature:
        return self._choice

    @turn_geometry_curvature.setter
    def turn_geometry_curvature(self, turn_geometry_curvature_: nds.adas.types.curvature.Curvature) -> None:
        self._choice = turn_geometry_curvature_

    @property
    def comfortable_speed(self) -> nds.adas.types.comfortable_speed.ComfortableSpeed:
        return self._choice

    @comfortable_speed.setter
    def comfortable_speed(self, comfortable_speed_: nds.adas.types.comfortable_speed.ComfortableSpeed) -> None:
        self._choice = comfortable_speed_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            return self.CHOICE_TURN_GEOMETRY_CURVATURE
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            return self.CHOICE_COMFORTABLE_SPEED
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: AdasTransitionAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            zserio_context.turn_geometry_curvature.init(zserio.array.BitFieldArrayTraits(10), self._choice)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            zserio_context.comfortable_speed.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            end_bitposition += 10
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AdasTransitionAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            end_bitposition += zserio_context.turn_geometry_curvature.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._choice)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            end_bitposition += zserio_context.comfortable_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            end_bitposition += 10
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AdasTransitionAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            end_bitposition += zserio_context.turn_geometry_curvature.bitsizeof(zserio.array.BitFieldArrayTraits(10), self._choice)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            end_bitposition += zserio_context.comfortable_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            self._choice = zserio_reader.read_bits(10)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            self._choice = zserio_reader.read_bits(8)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

    def read_packed(self, zserio_context: AdasTransitionAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            self._choice = zserio_context.turn_geometry_curvature.read(zserio.array.BitFieldArrayTraits(10), zserio_reader)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            self._choice = zserio_context.comfortable_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            zserio_writer.write_bits(self._choice, 10)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            zserio_writer.write_bits(self._choice, 8)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

    def write_packed(self, zserio_context: AdasTransitionAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.TURN_GEOMETRY_CURVATURE):
            zserio_context.turn_geometry_curvature.write(zserio.array.BitFieldArrayTraits(10), zserio_writer, self._choice)
        elif selector == (nds.adas.attributes.adas_transition_attribute_type.AdasTransitionAttributeType.COMFORTABLE_SPEED):
            zserio_context.comfortable_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice AdasTransitionAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._turn_geometry_curvature_ = zserio.array.DeltaContext()
            self._comfortable_speed_ = zserio.array.DeltaContext()

        @property
        def turn_geometry_curvature(self):
            return self._turn_geometry_curvature_

        @property
        def comfortable_speed(self):
            return self._comfortable_speed_

    CHOICE_TURN_GEOMETRY_CURVATURE = 0
    CHOICE_COMFORTABLE_SPEED = 1
    UNDEFINED_CHOICE = -1
