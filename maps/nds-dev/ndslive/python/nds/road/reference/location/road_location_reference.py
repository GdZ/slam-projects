# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_id
import nds.core.types.direction

class RoadLocationReference:
    def __init__(
            self,
            direction_: typing.Union[nds.core.types.direction.Direction, None] = None,
            location_id_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None] = None) -> None:
        self._direction_ = direction_
        self._location_id_ = location_id_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadLocationReference'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadLocationReference'],
            zserio_context: RoadLocationReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadLocationReference):
            return ((self._direction_ == other._direction_) and
                    (self._location_id_ == other._location_id_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._direction_)
        result = zserio.hashcode.calc_hashcode_object(result, self._location_id_)

        return result

    @property
    def direction(self) -> typing.Union[nds.core.types.direction.Direction, None]:
        return self._direction_

    @direction.setter
    def direction(self, direction_: typing.Union[nds.core.types.direction.Direction, None]) -> None:
        self._direction_ = direction_

    @property
    def location_id(self) -> typing.Union[nds.core.location.road_location_id.RoadLocationId, None]:
        return self._location_id_

    @location_id.setter
    def location_id(self, location_id_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None]) -> None:
        self._location_id_ = location_id_

    def init_packing_context(self, zserio_context: RoadLocationReference.ZserioPackingContext) -> None:
        self._direction_.init_packing_context(zserio_context.direction)
        self._location_id_.init_packing_context(zserio_context.location_id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._direction_.bitsizeof(end_bitposition)
        end_bitposition += self._location_id_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadLocationReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._direction_.bitsizeof_packed(zserio_context.direction, end_bitposition)
        end_bitposition += self._location_id_.bitsizeof_packed(zserio_context.location_id, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._direction_.initialize_offsets(end_bitposition)
        end_bitposition = self._location_id_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadLocationReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._direction_.initialize_offsets_packed(zserio_context.direction, end_bitposition)
        end_bitposition = self._location_id_.initialize_offsets_packed(zserio_context.location_id, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._direction_ = nds.core.types.direction.Direction.from_reader(zserio_reader)
        self._location_id_ = nds.core.location.road_location_id.RoadLocationId.from_reader(zserio_reader)

    def read_packed(self, zserio_context: RoadLocationReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._direction_ = nds.core.types.direction.Direction.from_reader_packed(zserio_context.direction, zserio_reader)

        self._location_id_ = nds.core.location.road_location_id.RoadLocationId.from_reader_packed(zserio_context.location_id, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._direction_.write(zserio_writer)
        self._location_id_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadLocationReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._direction_.write_packed(zserio_context.direction, zserio_writer)

        self._location_id_.write_packed(zserio_context.location_id, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._direction_ = zserio.array.DeltaContext()
            self._location_id_ = nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext()

        @property
        def direction(self):
            return self._direction_

        @property
        def location_id(self):
            return self._location_id_
