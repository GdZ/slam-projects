# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_id

class RoadLocationTransitionReference:
    def __init__(
            self,
            start_location_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None] = None,
            end_location_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None] = None,
            intermediate_locations_: typing.Optional[typing.List[nds.core.location.road_location_id.RoadLocationId]] = None) -> None:
        self._start_location_ = start_location_
        self._end_location_ = end_location_
        if intermediate_locations_ is None:
            self._intermediate_locations_ = None
        else:
            self._intermediate_locations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intermediate_locations()), intermediate_locations_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['RoadLocationTransitionReference'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationTransitionReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadLocationTransitionReference'],
            zserio_context: RoadLocationTransitionReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationTransitionReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadLocationTransitionReference):
            return ((self._start_location_ == other._start_location_) and
                    (self._end_location_ == other._end_location_) and
                    (not other.is_intermediate_locations_used() if not self.is_intermediate_locations_used() else (self._intermediate_locations_ == other._intermediate_locations_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._start_location_)
        result = zserio.hashcode.calc_hashcode_object(result, self._end_location_)
        if self.is_intermediate_locations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._intermediate_locations_)

        return result

    @property
    def start_location(self) -> typing.Union[nds.core.location.road_location_id.RoadLocationId, None]:
        return self._start_location_

    @start_location.setter
    def start_location(self, start_location_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None]) -> None:
        self._start_location_ = start_location_

    @property
    def end_location(self) -> typing.Union[nds.core.location.road_location_id.RoadLocationId, None]:
        return self._end_location_

    @end_location.setter
    def end_location(self, end_location_: typing.Union[nds.core.location.road_location_id.RoadLocationId, None]) -> None:
        self._end_location_ = end_location_

    @property
    def intermediate_locations(self) -> typing.Optional[typing.List[nds.core.location.road_location_id.RoadLocationId]]:
        return None if self._intermediate_locations_ is None else self._intermediate_locations_.raw_array

    @intermediate_locations.setter
    def intermediate_locations(self, intermediate_locations_: typing.Optional[typing.List[nds.core.location.road_location_id.RoadLocationId]]) -> None:
        if intermediate_locations_ is None:
            self._intermediate_locations_ = None
        else:
            self._intermediate_locations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intermediate_locations()), intermediate_locations_, is_auto=True)

    def is_intermediate_locations_used(self) -> bool:
        return self.is_intermediate_locations_set()

    def is_intermediate_locations_set(self) -> bool:
        return not self._intermediate_locations_ is None

    def reset_intermediate_locations(self) -> None:
        self._intermediate_locations_ = None

    def init_packing_context(self, zserio_context: RoadLocationTransitionReference.ZserioPackingContext) -> None:
        self._start_location_.init_packing_context(zserio_context.start_location)
        self._end_location_.init_packing_context(zserio_context.end_location)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_location_.bitsizeof(end_bitposition)
        end_bitposition += self._end_location_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_intermediate_locations_used():
            end_bitposition += self._intermediate_locations_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadLocationTransitionReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_location_.bitsizeof_packed(zserio_context.start_location, end_bitposition)
        end_bitposition += self._end_location_.bitsizeof_packed(zserio_context.end_location, end_bitposition)
        end_bitposition += 1
        if self.is_intermediate_locations_used():
            end_bitposition += self._intermediate_locations_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_location_.initialize_offsets(end_bitposition)
        end_bitposition = self._end_location_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_intermediate_locations_used():
            end_bitposition = self._intermediate_locations_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadLocationTransitionReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_location_.initialize_offsets_packed(zserio_context.start_location, end_bitposition)
        end_bitposition = self._end_location_.initialize_offsets_packed(zserio_context.end_location, end_bitposition)
        end_bitposition += 1
        if self.is_intermediate_locations_used():
            end_bitposition = self._intermediate_locations_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_location_ = nds.core.location.road_location_id.RoadLocationId.from_reader(zserio_reader)
        self._end_location_ = nds.core.location.road_location_id.RoadLocationId.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._intermediate_locations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intermediate_locations()), zserio_reader, is_auto=True)
        else:
            self._intermediate_locations_ = None

    def read_packed(self, zserio_context: RoadLocationTransitionReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_location_ = nds.core.location.road_location_id.RoadLocationId.from_reader_packed(zserio_context.start_location, zserio_reader)

        self._end_location_ = nds.core.location.road_location_id.RoadLocationId.from_reader_packed(zserio_context.end_location, zserio_reader)

        if zserio_reader.read_bool():
            self._intermediate_locations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intermediate_locations()), zserio_reader, is_auto=True)
        else:
            self._intermediate_locations_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._start_location_.write(zserio_writer)
        self._end_location_.write(zserio_writer)
        if self.is_intermediate_locations_used():
            zserio_writer.write_bool(True)
            self._intermediate_locations_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: RoadLocationTransitionReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._start_location_.write_packed(zserio_context.start_location, zserio_writer)

        self._end_location_.write_packed(zserio_context.end_location, zserio_writer)

        if self.is_intermediate_locations_used():
            zserio_writer.write_bool(True)
            self._intermediate_locations_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._start_location_ = nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext()
            self._end_location_ = nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext()

        @property
        def start_location(self):
            return self._start_location_

        @property
        def end_location(self):
            return self._end_location_

    class _ZserioElementFactory_intermediate_locations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.location.road_location_id.RoadLocationId:
            del zserio_index
            return nds.core.location.road_location_id.RoadLocationId.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext:
            return nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.location.road_location_id.RoadLocationId.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.location.road_location_id.RoadLocationId:
            del zserio_index
            return nds.core.location.road_location_id.RoadLocationId.from_reader_packed(zserio_context, zserio_reader)
