# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.line2d
import nds.road.reference.types.directed_road_reference

class TransitionGeoPathReference:
    def __init__(
            self,
            start_road_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None] = None,
            path_: typing.Union[nds.core.geometry.line2d.Line2D, None] = None) -> None:
        self._start_road_ = start_road_
        self._path_ = path_

    @classmethod
    def from_reader(
            cls: typing.Type['TransitionGeoPathReference'],
            zserio_reader: zserio.BitStreamReader) -> 'TransitionGeoPathReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TransitionGeoPathReference'],
            zserio_context: TransitionGeoPathReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TransitionGeoPathReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TransitionGeoPathReference):
            return ((self._start_road_ == other._start_road_) and
                    (self._path_ == other._path_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._start_road_)
        result = zserio.hashcode.calc_hashcode_object(result, self._path_)

        return result

    @property
    def start_road(self) -> typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]:
        return self._start_road_

    @start_road.setter
    def start_road(self, start_road_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]) -> None:
        self._start_road_ = start_road_

    @property
    def path(self) -> typing.Union[nds.core.geometry.line2d.Line2D, None]:
        return self._path_

    @path.setter
    def path(self, path_: typing.Union[nds.core.geometry.line2d.Line2D, None]) -> None:
        self._path_ = path_

    def init_packing_context(self, zserio_context: TransitionGeoPathReference.ZserioPackingContext) -> None:
        self._start_road_.init_packing_context(zserio_context.start_road)
        self._path_.init_packing_context(zserio_context.path)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_road_.bitsizeof(end_bitposition)
        end_bitposition += self._path_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TransitionGeoPathReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_road_.bitsizeof_packed(zserio_context.start_road, end_bitposition)
        end_bitposition += self._path_.bitsizeof_packed(zserio_context.path, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_road_.initialize_offsets(end_bitposition)
        end_bitposition = self._path_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TransitionGeoPathReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_road_.initialize_offsets_packed(zserio_context.start_road, end_bitposition)
        end_bitposition = self._path_.initialize_offsets_packed(zserio_context.path, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader(zserio_reader)
        self._path_ = nds.core.geometry.line2d.Line2D.from_reader(zserio_reader, 0)

    def read_packed(self, zserio_context: TransitionGeoPathReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader_packed(zserio_context.start_road, zserio_reader)

        self._path_ = nds.core.geometry.line2d.Line2D.from_reader_packed(zserio_context.path, zserio_reader, 0)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._start_road_.write(zserio_writer)

        # check parameters
        if self._path_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field TransitionGeoPathReference.path: "
                                                f"{self._path_.shift} != {0}!")
        self._path_.write(zserio_writer)

    def write_packed(self, zserio_context: TransitionGeoPathReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._start_road_.write_packed(zserio_context.start_road, zserio_writer)

        # check parameters
        if self._path_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field TransitionGeoPathReference.path: "
                                                f"{self._path_.shift} != {0}!")
        self._path_.write_packed(zserio_context.path, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._start_road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.ZserioPackingContext()
            self._path_ = nds.core.geometry.line2d.Line2D.ZserioPackingContext()

        @property
        def start_road(self):
            return self._start_road_

        @property
        def path(self):
            return self._path_
