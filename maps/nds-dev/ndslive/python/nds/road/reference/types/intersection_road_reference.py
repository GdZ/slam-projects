# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.intersection_sector
import nds.road.reference.types.directed_road_reference

class IntersectionRoadReference:
    def __init__(
            self,
            is_artificial_: bool,
            road_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None] = None,
            angle_: typing.Optional[nds.core.types.intersection_sector.IntersectionSector] = None) -> None:
        self._is_artificial_ = is_artificial_
        self._road_ = road_
        self._angle_ = angle_

    @classmethod
    def from_reader(
            cls: typing.Type['IntersectionRoadReference'],
            zserio_reader: zserio.BitStreamReader,
            is_artificial_: bool) -> 'IntersectionRoadReference':
        self = object.__new__(cls)
        self._is_artificial_ = is_artificial_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IntersectionRoadReference'],
            zserio_context: IntersectionRoadReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            is_artificial_: bool) -> 'IntersectionRoadReference':
        self = object.__new__(cls)
        self._is_artificial_ = is_artificial_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IntersectionRoadReference):
            return (self._is_artificial_ == other._is_artificial_ and
                    (self._road_ == other._road_) and
                    (not other.is_angle_used() if not self.is_angle_used() else (self._angle_ == other._angle_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_artificial_)
        result = zserio.hashcode.calc_hashcode_object(result, self._road_)
        if self.is_angle_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._angle_)

        return result

    @property
    def is_artificial(self) -> bool:
        return self._is_artificial_

    @property
    def road(self) -> typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]:
        return self._road_

    @road.setter
    def road(self, road_: typing.Union[nds.road.reference.types.directed_road_reference.DirectedRoadReference, None]) -> None:
        self._road_ = road_

    @property
    def angle(self) -> typing.Optional[nds.core.types.intersection_sector.IntersectionSector]:
        return self._angle_

    @angle.setter
    def angle(self, angle_: typing.Optional[nds.core.types.intersection_sector.IntersectionSector]) -> None:
        self._angle_ = angle_

    def is_angle_used(self) -> bool:
        return not self._is_artificial_

    def is_angle_set(self) -> bool:
        return not self._angle_ is None

    def reset_angle(self) -> None:
        self._angle_ = None

    def init_packing_context(self, zserio_context: IntersectionRoadReference.ZserioPackingContext) -> None:
        self._road_.init_packing_context(zserio_context.road)
        if self.is_angle_used():
            zserio_context.angle.init(zserio.array.BitFieldArrayTraits(8), self._angle_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._road_.bitsizeof(end_bitposition)
        if self.is_angle_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IntersectionRoadReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._road_.bitsizeof_packed(zserio_context.road, end_bitposition)
        if self.is_angle_used():
            end_bitposition += zserio_context.angle.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._angle_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._road_.initialize_offsets(end_bitposition)
        if self.is_angle_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IntersectionRoadReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._road_.initialize_offsets_packed(zserio_context.road, end_bitposition)
        if self.is_angle_used():
            end_bitposition += zserio_context.angle.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._angle_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader(zserio_reader)
        if self.is_angle_used():
            self._angle_ = zserio_reader.read_bits(8)
        else:
            self._angle_ = None

    def read_packed(self, zserio_context: IntersectionRoadReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader_packed(zserio_context.road, zserio_reader)

        if self.is_angle_used():
            self._angle_ = zserio_context.angle.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._angle_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._road_.write(zserio_writer)
        if self.is_angle_used():
            zserio_writer.write_bits(self._angle_, 8)

    def write_packed(self, zserio_context: IntersectionRoadReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._road_.write_packed(zserio_context.road, zserio_writer)

        if self.is_angle_used():
            zserio_context.angle.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._angle_)

    class ZserioPackingContext:
        def __init__(self):
            self._road_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.ZserioPackingContext()
            self._angle_ = zserio.array.DeltaContext()

        @property
        def road(self):
            return self._road_

        @property
        def angle(self):
            return self._angle_
