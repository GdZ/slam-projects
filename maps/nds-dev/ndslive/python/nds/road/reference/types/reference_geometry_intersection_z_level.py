# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.road.reference.types.intersection_z_level

class ReferenceGeometryIntersectionZLevel:
    def __init__(
            self,
            has_value_: bool = bool(),
            value_: typing.Optional[nds.road.reference.types.intersection_z_level.IntersectionZLevel] = None) -> None:
        self._has_value_ = has_value_
        self._value_ = value_

    @classmethod
    def from_reader(
            cls: typing.Type['ReferenceGeometryIntersectionZLevel'],
            zserio_reader: zserio.BitStreamReader) -> 'ReferenceGeometryIntersectionZLevel':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ReferenceGeometryIntersectionZLevel'],
            zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ReferenceGeometryIntersectionZLevel':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ReferenceGeometryIntersectionZLevel):
            return ((self._has_value_ == other._has_value_) and
                    (not other.is_value_used() if not self.is_value_used() else (self._value_ == other._value_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_value_)
        if self.is_value_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._value_)

        return result

    @property
    def has_value(self) -> bool:
        return self._has_value_

    @has_value.setter
    def has_value(self, has_value_: bool) -> None:
        self._has_value_ = has_value_

    @property
    def value(self) -> typing.Optional[nds.road.reference.types.intersection_z_level.IntersectionZLevel]:
        return self._value_

    @value.setter
    def value(self, value_: typing.Optional[nds.road.reference.types.intersection_z_level.IntersectionZLevel]) -> None:
        self._value_ = value_

    def is_value_used(self) -> bool:
        return self._has_value_

    def is_value_set(self) -> bool:
        return not self._value_ is None

    def reset_value(self) -> None:
        self._value_ = None

    def init_packing_context(self, zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext) -> None:
        if self.is_value_used():
            zserio_context.value.init(zserio.array.BitFieldArrayTraits(7), self._value_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_value_used():
            end_bitposition += 7

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_value_used():
            end_bitposition += zserio_context.value.bitsizeof(zserio.array.BitFieldArrayTraits(7), self._value_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_value_used():
            end_bitposition += 7

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_value_used():
            end_bitposition += zserio_context.value.bitsizeof(zserio.array.BitFieldArrayTraits(7), self._value_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_value_ = zserio_reader.read_bool()
        if self.is_value_used():
            self._value_ = zserio_reader.read_bits(7)
        else:
            self._value_ = None

    def read_packed(self, zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_value_ = zserio_reader.read_bool()

        if self.is_value_used():
            self._value_ = zserio_context.value.read(zserio.array.BitFieldArrayTraits(7), zserio_reader)
        else:
            self._value_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_value_)
        if self.is_value_used():
            zserio_writer.write_bits(self._value_, 7)

    def write_packed(self, zserio_context: ReferenceGeometryIntersectionZLevel.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_value_)

        if self.is_value_used():
            zserio_context.value.write(zserio.array.BitFieldArrayTraits(7), zserio_writer, self._value_)

    class ZserioPackingContext:
        def __init__(self):
            self._value_ = zserio.array.DeltaContext()

        @property
        def value(self):
            return self._value_
