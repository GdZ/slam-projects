# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.road.reference.types.intersection_transition
import nds.road.reference.types.transition_geo_path_reference
import nds.road.reference.types.transition_path_reference
import nds.road.reference.types.transition_reference_type

class TransitionReference:
    def __init__(
            self,
            type_: typing.Union[nds.road.reference.types.transition_reference_type.TransitionReferenceType, None] = None,
            intersection_transition_: typing.Optional[nds.road.reference.types.intersection_transition.IntersectionTransition] = None,
            transition_path_reference_: typing.Optional[nds.road.reference.types.transition_path_reference.TransitionPathReference] = None,
            transition_geo_path_reference_: typing.Optional[nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference] = None) -> None:
        self._type_ = type_
        self._intersection_transition_ = intersection_transition_
        self._transition_path_reference_ = transition_path_reference_
        self._transition_geo_path_reference_ = transition_geo_path_reference_

    @classmethod
    def from_reader(
            cls: typing.Type['TransitionReference'],
            zserio_reader: zserio.BitStreamReader) -> 'TransitionReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TransitionReference'],
            zserio_context: TransitionReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TransitionReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TransitionReference):
            return ((self._type_ == other._type_) and
                    (not other.is_intersection_transition_used() if not self.is_intersection_transition_used() else (self._intersection_transition_ == other._intersection_transition_)) and
                    (not other.is_transition_path_reference_used() if not self.is_transition_path_reference_used() else (self._transition_path_reference_ == other._transition_path_reference_)) and
                    (not other.is_transition_geo_path_reference_used() if not self.is_transition_geo_path_reference_used() else (self._transition_geo_path_reference_ == other._transition_geo_path_reference_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        if self.is_intersection_transition_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._intersection_transition_)
        if self.is_transition_path_reference_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._transition_path_reference_)
        if self.is_transition_geo_path_reference_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._transition_geo_path_reference_)

        return result

    @property
    def type(self) -> typing.Union[nds.road.reference.types.transition_reference_type.TransitionReferenceType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.road.reference.types.transition_reference_type.TransitionReferenceType, None]) -> None:
        self._type_ = type_

    @property
    def intersection_transition(self) -> typing.Optional[nds.road.reference.types.intersection_transition.IntersectionTransition]:
        return self._intersection_transition_

    @intersection_transition.setter
    def intersection_transition(self, intersection_transition_: typing.Optional[nds.road.reference.types.intersection_transition.IntersectionTransition]) -> None:
        self._intersection_transition_ = intersection_transition_

    def is_intersection_transition_used(self) -> bool:
        return self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.INTERSECTION or self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.TRANSITION

    def is_intersection_transition_set(self) -> bool:
        return not self._intersection_transition_ is None

    def reset_intersection_transition(self) -> None:
        self._intersection_transition_ = None

    @property
    def transition_path_reference(self) -> typing.Optional[nds.road.reference.types.transition_path_reference.TransitionPathReference]:
        return self._transition_path_reference_

    @transition_path_reference.setter
    def transition_path_reference(self, transition_path_reference_: typing.Optional[nds.road.reference.types.transition_path_reference.TransitionPathReference]) -> None:
        self._transition_path_reference_ = transition_path_reference_

    def is_transition_path_reference_used(self) -> bool:
        return self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.TRANSITION_PATH

    def is_transition_path_reference_set(self) -> bool:
        return not self._transition_path_reference_ is None

    def reset_transition_path_reference(self) -> None:
        self._transition_path_reference_ = None

    @property
    def transition_geo_path_reference(self) -> typing.Optional[nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference]:
        return self._transition_geo_path_reference_

    @transition_geo_path_reference.setter
    def transition_geo_path_reference(self, transition_geo_path_reference_: typing.Optional[nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference]) -> None:
        self._transition_geo_path_reference_ = transition_geo_path_reference_

    def is_transition_geo_path_reference_used(self) -> bool:
        return self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.TRANSITION_GEO_PATH

    def is_transition_geo_path_reference_set(self) -> bool:
        return not self._transition_geo_path_reference_ is None

    def reset_transition_geo_path_reference(self) -> None:
        self._transition_geo_path_reference_ = None

    def init_packing_context(self, zserio_context: TransitionReference.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        if self.is_intersection_transition_used():
            self._intersection_transition_.init_packing_context(zserio_context.intersection_transition)
        if self.is_transition_path_reference_used():
            self._transition_path_reference_.init_packing_context(zserio_context.transition_path_reference)
        if self.is_transition_geo_path_reference_used():
            self._transition_geo_path_reference_.init_packing_context(zserio_context.transition_geo_path_reference)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        if self.is_intersection_transition_used():
            end_bitposition += self._intersection_transition_.bitsizeof(end_bitposition)
        if self.is_transition_path_reference_used():
            end_bitposition += self._transition_path_reference_.bitsizeof(end_bitposition)
        if self.is_transition_geo_path_reference_used():
            end_bitposition += self._transition_geo_path_reference_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TransitionReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        if self.is_intersection_transition_used():
            end_bitposition += self._intersection_transition_.bitsizeof_packed(zserio_context.intersection_transition, end_bitposition)
        if self.is_transition_path_reference_used():
            end_bitposition += self._transition_path_reference_.bitsizeof_packed(zserio_context.transition_path_reference, end_bitposition)
        if self.is_transition_geo_path_reference_used():
            end_bitposition += self._transition_geo_path_reference_.bitsizeof_packed(zserio_context.transition_geo_path_reference, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        if self.is_intersection_transition_used():
            end_bitposition = self._intersection_transition_.initialize_offsets(end_bitposition)
        if self.is_transition_path_reference_used():
            end_bitposition = self._transition_path_reference_.initialize_offsets(end_bitposition)
        if self.is_transition_geo_path_reference_used():
            end_bitposition = self._transition_geo_path_reference_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TransitionReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        if self.is_intersection_transition_used():
            end_bitposition = self._intersection_transition_.initialize_offsets_packed(zserio_context.intersection_transition, end_bitposition)
        if self.is_transition_path_reference_used():
            end_bitposition = self._transition_path_reference_.initialize_offsets_packed(zserio_context.transition_path_reference, end_bitposition)
        if self.is_transition_geo_path_reference_used():
            end_bitposition = self._transition_geo_path_reference_.initialize_offsets_packed(zserio_context.transition_geo_path_reference, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.road.reference.types.transition_reference_type.TransitionReferenceType.from_reader(zserio_reader)
        if self.is_intersection_transition_used():
            self._intersection_transition_ = nds.road.reference.types.intersection_transition.IntersectionTransition.from_reader(zserio_reader, self._type_)
        else:
            self._intersection_transition_ = None
        if self.is_transition_path_reference_used():
            self._transition_path_reference_ = nds.road.reference.types.transition_path_reference.TransitionPathReference.from_reader(zserio_reader)
        else:
            self._transition_path_reference_ = None
        if self.is_transition_geo_path_reference_used():
            self._transition_geo_path_reference_ = nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference.from_reader(zserio_reader)
        else:
            self._transition_geo_path_reference_ = None

    def read_packed(self, zserio_context: TransitionReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.road.reference.types.transition_reference_type.TransitionReferenceType.from_reader_packed(zserio_context.type, zserio_reader)

        if self.is_intersection_transition_used():
            self._intersection_transition_ = nds.road.reference.types.intersection_transition.IntersectionTransition.from_reader_packed(zserio_context.intersection_transition, zserio_reader, self._type_)
        else:
            self._intersection_transition_ = None

        if self.is_transition_path_reference_used():
            self._transition_path_reference_ = nds.road.reference.types.transition_path_reference.TransitionPathReference.from_reader_packed(zserio_context.transition_path_reference, zserio_reader)
        else:
            self._transition_path_reference_ = None

        if self.is_transition_geo_path_reference_used():
            self._transition_geo_path_reference_ = nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference.from_reader_packed(zserio_context.transition_geo_path_reference, zserio_reader)
        else:
            self._transition_geo_path_reference_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)

        if self.is_intersection_transition_used():
            # check parameters
            if self._intersection_transition_.type is not (self._type_):
                raise zserio.PythonRuntimeException("Wrong parameter type for field TransitionReference.intersectionTransition: "
                                                    f"{self._intersection_transition_.type} != {self._type_}!")
            self._intersection_transition_.write(zserio_writer)

        if self.is_transition_path_reference_used():
            self._transition_path_reference_.write(zserio_writer)

        if self.is_transition_geo_path_reference_used():
            self._transition_geo_path_reference_.write(zserio_writer)

    def write_packed(self, zserio_context: TransitionReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        if self.is_intersection_transition_used():
            # check parameters
            if self._intersection_transition_.type is not (self._type_):
                raise zserio.PythonRuntimeException("Wrong parameter type for field TransitionReference.intersectionTransition: "
                                                    f"{self._intersection_transition_.type} != {self._type_}!")
            self._intersection_transition_.write_packed(zserio_context.intersection_transition, zserio_writer)

        if self.is_transition_path_reference_used():
            self._transition_path_reference_.write_packed(zserio_context.transition_path_reference, zserio_writer)

        if self.is_transition_geo_path_reference_used():
            self._transition_geo_path_reference_.write_packed(zserio_context.transition_geo_path_reference, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._intersection_transition_ = nds.road.reference.types.intersection_transition.IntersectionTransition.ZserioPackingContext()
            self._transition_path_reference_ = nds.road.reference.types.transition_path_reference.TransitionPathReference.ZserioPackingContext()
            self._transition_geo_path_reference_ = nds.road.reference.types.transition_geo_path_reference.TransitionGeoPathReference.ZserioPackingContext()

        @property
        def type(self):
            return self._type_

        @property
        def intersection_transition(self):
            return self._intersection_transition_

        @property
        def transition_path_reference(self):
            return self._transition_path_reference_

        @property
        def transition_geo_path_reference(self):
            return self._transition_geo_path_reference_
