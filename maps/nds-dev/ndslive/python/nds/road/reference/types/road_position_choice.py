# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.road.reference.types.road_geometry_offset_position
import nds.road.reference.types.road_geometry_position
import nds.road.reference.types.road_length_position
import nds.road.reference.types.road_percentage_position
import nds.road.reference.types.road_validity_position
import nds.road.reference.types.road_validity_type

class RoadPositionChoice:
    def __init__(
            self,
            type_: nds.road.reference.types.road_validity_type.RoadValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            *,
            validity_position_: typing.Union[nds.road.reference.types.road_validity_position.RoadValidityPosition, None] = None,
            length_position_: typing.Union[nds.road.reference.types.road_length_position.RoadLengthPosition, None] = None,
            geometry_position_: typing.Union[nds.road.reference.types.road_geometry_position.RoadGeometryPosition, None] = None,
            geometry_offset_position_: typing.Union[nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition, None] = None,
            percentage_position_: typing.Union[nds.road.reference.types.road_percentage_position.RoadPercentagePosition, None] = None) -> None:
        self._type_ = type_
        self._shift_ = shift_
        self._choice: typing.Any = None
        if validity_position_ is not None:
            self._choice = validity_position_
        if length_position_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoadPositionChoice is ambiguous!")
            self._choice = length_position_
        if geometry_position_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoadPositionChoice is ambiguous!")
            self._choice = geometry_position_
        if geometry_offset_position_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoadPositionChoice is ambiguous!")
            self._choice = geometry_offset_position_
        if percentage_position_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoadPositionChoice is ambiguous!")
            self._choice = percentage_position_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadPositionChoice'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.road.reference.types.road_validity_type.RoadValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'RoadPositionChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadPositionChoice'],
            zserio_context: RoadPositionChoice.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.road.reference.types.road_validity_type.RoadValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'RoadPositionChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadPositionChoice):
            return (self._type_ == other._type_ and
                    self._shift_ == other._shift_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.road.reference.types.road_validity_type.RoadValidityType:
        return self._type_

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def validity_position(self) -> typing.Union[nds.road.reference.types.road_validity_position.RoadValidityPosition, None]:
        return self._choice

    @validity_position.setter
    def validity_position(self, validity_position_: typing.Union[nds.road.reference.types.road_validity_position.RoadValidityPosition, None]) -> None:
        self._choice = validity_position_

    @property
    def length_position(self) -> typing.Union[nds.road.reference.types.road_length_position.RoadLengthPosition, None]:
        return self._choice

    @length_position.setter
    def length_position(self, length_position_: typing.Union[nds.road.reference.types.road_length_position.RoadLengthPosition, None]) -> None:
        self._choice = length_position_

    @property
    def geometry_position(self) -> nds.road.reference.types.road_geometry_position.RoadGeometryPosition:
        return self._choice

    @geometry_position.setter
    def geometry_position(self, geometry_position_: nds.road.reference.types.road_geometry_position.RoadGeometryPosition) -> None:
        self._choice = geometry_position_

    @property
    def geometry_offset_position(self) -> typing.Union[nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition, None]:
        return self._choice

    @geometry_offset_position.setter
    def geometry_offset_position(self, geometry_offset_position_: typing.Union[nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition, None]) -> None:
        self._choice = geometry_offset_position_

    @property
    def percentage_position(self) -> typing.Union[nds.road.reference.types.road_percentage_position.RoadPercentagePosition, None]:
        return self._choice

    @percentage_position.setter
    def percentage_position(self, percentage_position_: typing.Union[nds.road.reference.types.road_percentage_position.RoadPercentagePosition, None]) -> None:
        self._choice = percentage_position_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            return self.CHOICE_VALIDITY_POSITION
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            return self.CHOICE_LENGTH_POSITION
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            return self.CHOICE_GEOMETRY_POSITION
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            return self.CHOICE_GEOMETRY_OFFSET_POSITION
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            return self.CHOICE_PERCENTAGE_POSITION
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RoadPositionChoice.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            self._choice.init_packing_context(zserio_context.validity_position)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            self._choice.init_packing_context(zserio_context.length_position)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            zserio_context.geometry_position.init(zserio.array.VarSizeArrayTraits(), self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            self._choice.init_packing_context(zserio_context.geometry_offset_position)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            self._choice.init_packing_context(zserio_context.percentage_position)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadPositionChoice.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.validity_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.length_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            end_bitposition += zserio_context.geometry_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.geometry_offset_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.percentage_position, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadPositionChoice.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.validity_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.length_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            end_bitposition += zserio_context.geometry_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.geometry_offset_position, end_bitposition)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.percentage_position, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            self._choice = nds.road.reference.types.road_validity_position.RoadValidityPosition.from_reader(zserio_reader, self._shift_)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            self._choice = nds.road.reference.types.road_length_position.RoadLengthPosition.from_reader(zserio_reader)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            self._choice = zserio_reader.read_varsize()
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            self._choice = nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition.from_reader(zserio_reader, self._shift_)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            self._choice = nds.road.reference.types.road_percentage_position.RoadPercentagePosition.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

    def read_packed(self, zserio_context: RoadPositionChoice.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            self._choice = nds.road.reference.types.road_validity_position.RoadValidityPosition.from_reader_packed(zserio_context.validity_position, zserio_reader, self._shift_)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            self._choice = nds.road.reference.types.road_length_position.RoadLengthPosition.from_reader_packed(zserio_context.length_position, zserio_reader)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            self._choice = zserio_context.geometry_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            self._choice = nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition.from_reader_packed(zserio_context.geometry_offset_position, zserio_reader, self._shift_)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            self._choice = nds.road.reference.types.road_percentage_position.RoadPercentagePosition.from_reader_packed(zserio_context.percentage_position, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadPositionChoice.validityPosition: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            self._choice.write(zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            zserio_writer.write_varsize(self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadPositionChoice.geometryOffsetPosition: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

    def write_packed(self, zserio_context: RoadPositionChoice.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.road.reference.types.road_validity_type.RoadValidityType.COMPLETE):
            pass
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.POSITION):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadPositionChoice.validityPosition: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.validity_position, zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.LENGTH):
            self._choice.write_packed(zserio_context.length_position, zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY):
            zserio_context.geometry_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.GEOMETRY_OFFSET):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadPositionChoice.geometryOffsetPosition: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.geometry_offset_position, zserio_writer)
        elif selector == (nds.road.reference.types.road_validity_type.RoadValidityType.PERCENTAGE):
            self._choice.write_packed(zserio_context.percentage_position, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoadPositionChoice!")

    class ZserioPackingContext:
        def __init__(self):
            self._validity_position_ = nds.road.reference.types.road_validity_position.RoadValidityPosition.ZserioPackingContext()
            self._length_position_ = nds.road.reference.types.road_length_position.RoadLengthPosition.ZserioPackingContext()
            self._geometry_position_ = zserio.array.DeltaContext()
            self._geometry_offset_position_ = nds.road.reference.types.road_geometry_offset_position.RoadGeometryOffsetPosition.ZserioPackingContext()
            self._percentage_position_ = nds.road.reference.types.road_percentage_position.RoadPercentagePosition.ZserioPackingContext()

        @property
        def validity_position(self):
            return self._validity_position_

        @property
        def length_position(self):
            return self._length_position_

        @property
        def geometry_position(self):
            return self._geometry_position_

        @property
        def geometry_offset_position(self):
            return self._geometry_offset_position_

        @property
        def percentage_position(self):
            return self._percentage_position_

    CHOICE_VALIDITY_POSITION = 0
    CHOICE_LENGTH_POSITION = 1
    CHOICE_GEOMETRY_POSITION = 2
    CHOICE_GEOMETRY_OFFSET_POSITION = 3
    CHOICE_PERCENTAGE_POSITION = 4
    UNDEFINED_CHOICE = -1
