# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.road.reference.types.intersection_id
import nds.road.reference.types.transition_number
import nds.road.reference.types.transition_reference_type

class IntersectionTransition:
    def __init__(
            self,
            type_: nds.road.reference.types.transition_reference_type.TransitionReferenceType,
            intersection_id_: nds.road.reference.types.intersection_id.IntersectionId = nds.road.reference.types.intersection_id.IntersectionId(),
            num_transitions_: typing.Optional[int] = None,
            transition_number_: typing.Optional[typing.List[nds.road.reference.types.transition_number.TransitionNumber]] = None) -> None:
        self._type_ = type_
        self._intersection_id_ = intersection_id_
        self._num_transitions_ = num_transitions_
        if transition_number_ is None:
            self._transition_number_ = None
        else:
            self._transition_number_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), transition_number_)

    @classmethod
    def from_reader(
            cls: typing.Type['IntersectionTransition'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.road.reference.types.transition_reference_type.TransitionReferenceType) -> 'IntersectionTransition':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IntersectionTransition'],
            zserio_context: IntersectionTransition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.road.reference.types.transition_reference_type.TransitionReferenceType) -> 'IntersectionTransition':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IntersectionTransition):
            return (self._type_ == other._type_ and
                    (self._intersection_id_ == other._intersection_id_) and
                    (not other.is_num_transitions_used() if not self.is_num_transitions_used() else (self._num_transitions_ == other._num_transitions_)) and
                    (not other.is_transition_number_used() if not self.is_transition_number_used() else (self._transition_number_ == other._transition_number_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._intersection_id_)
        if self.is_num_transitions_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._num_transitions_)
        if self.is_transition_number_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._transition_number_)

        return result

    @property
    def type(self) -> nds.road.reference.types.transition_reference_type.TransitionReferenceType:
        return self._type_

    @property
    def intersection_id(self) -> nds.road.reference.types.intersection_id.IntersectionId:
        return self._intersection_id_

    @intersection_id.setter
    def intersection_id(self, intersection_id_: nds.road.reference.types.intersection_id.IntersectionId) -> None:
        self._intersection_id_ = intersection_id_

    @property
    def num_transitions(self) -> typing.Optional[int]:
        return self._num_transitions_

    @num_transitions.setter
    def num_transitions(self, num_transitions_: typing.Optional[int]) -> None:
        self._num_transitions_ = num_transitions_

    def is_num_transitions_used(self) -> bool:
        return self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.TRANSITION

    def is_num_transitions_set(self) -> bool:
        return not self._num_transitions_ is None

    def reset_num_transitions(self) -> None:
        self._num_transitions_ = None

    @property
    def transition_number(self) -> typing.Optional[typing.List[nds.road.reference.types.transition_number.TransitionNumber]]:
        return None if self._transition_number_ is None else self._transition_number_.raw_array

    @transition_number.setter
    def transition_number(self, transition_number_: typing.Optional[typing.List[nds.road.reference.types.transition_number.TransitionNumber]]) -> None:
        if transition_number_ is None:
            self._transition_number_ = None
        else:
            self._transition_number_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), transition_number_)

    def is_transition_number_used(self) -> bool:
        return self._type_ == nds.road.reference.types.transition_reference_type.TransitionReferenceType.TRANSITION

    def is_transition_number_set(self) -> bool:
        return not self._transition_number_ is None

    def reset_transition_number(self) -> None:
        self._transition_number_ = None

    def init_packing_context(self, zserio_context: IntersectionTransition.ZserioPackingContext) -> None:
        zserio_context.intersection_id.init(zserio.array.VarUInt32ArrayTraits(), self._intersection_id_)
        if self.is_num_transitions_used():
            zserio_context.num_transitions.init(zserio.array.VarSizeArrayTraits(), self._num_transitions_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._intersection_id_)
        if self.is_num_transitions_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_transitions_)
        if self.is_transition_number_used():
            end_bitposition += self._transition_number_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IntersectionTransition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.intersection_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._intersection_id_)
        if self.is_num_transitions_used():
            end_bitposition += zserio_context.num_transitions.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_transitions_)
        if self.is_transition_number_used():
            end_bitposition += self._transition_number_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._intersection_id_)
        if self.is_num_transitions_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_transitions_)
        if self.is_transition_number_used():
            end_bitposition = self._transition_number_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IntersectionTransition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.intersection_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._intersection_id_)
        if self.is_num_transitions_used():
            end_bitposition += zserio_context.num_transitions.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_transitions_)
        if self.is_transition_number_used():
            end_bitposition = self._transition_number_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._intersection_id_ = zserio_reader.read_varuint32()
        if self.is_num_transitions_used():
            self._num_transitions_ = zserio_reader.read_varsize()
        else:
            self._num_transitions_ = None
        if self.is_transition_number_used():
            self._transition_number_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_transitions_)
        else:
            self._transition_number_ = None

    def read_packed(self, zserio_context: IntersectionTransition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._intersection_id_ = zserio_context.intersection_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if self.is_num_transitions_used():
            self._num_transitions_ = zserio_context.num_transitions.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        else:
            self._num_transitions_ = None

        if self.is_transition_number_used():
            self._transition_number_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_transitions_)
        else:
            self._transition_number_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._intersection_id_)

        if self.is_num_transitions_used():
            zserio_writer.write_varsize(self._num_transitions_)

        if self.is_transition_number_used():
            # check array length
            if len(self._transition_number_) != (self._num_transitions_):
                raise zserio.PythonRuntimeException("Wrong array length for field IntersectionTransition.transitionNumber: "
                                                    f"{len(self._transition_number_)} != {self._num_transitions_}!")
            self._transition_number_.write(zserio_writer)

    def write_packed(self, zserio_context: IntersectionTransition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.intersection_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._intersection_id_)

        if self.is_num_transitions_used():
            zserio_context.num_transitions.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_transitions_)

        if self.is_transition_number_used():
            # check array length
            if len(self._transition_number_) != (self._num_transitions_):
                raise zserio.PythonRuntimeException("Wrong array length for field IntersectionTransition.transitionNumber: "
                                                    f"{len(self._transition_number_)} != {self._num_transitions_}!")
            self._transition_number_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._intersection_id_ = zserio.array.DeltaContext()
            self._num_transitions_ = zserio.array.DeltaContext()

        @property
        def intersection_id(self):
            return self._intersection_id_

        @property
        def num_transitions(self):
            return self._num_transitions_
