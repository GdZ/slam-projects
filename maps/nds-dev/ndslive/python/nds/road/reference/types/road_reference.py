# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.road.reference.types.directed_road_reference
import nds.road.reference.types.road_id

class RoadReference:
    def __init__(
            self,
            is_directed_: bool = bool(),
            directed_road_reference_: typing.Optional[nds.road.reference.types.directed_road_reference.DirectedRoadReference] = None,
            road_id_: typing.Optional[nds.road.reference.types.road_id.RoadId] = None) -> None:
        self._is_directed_ = is_directed_
        self._directed_road_reference_ = directed_road_reference_
        self._road_id_ = road_id_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadReference'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadReference'],
            zserio_context: RoadReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadReference):
            return ((self._is_directed_ == other._is_directed_) and
                    (not other.is_directed_road_reference_used() if not self.is_directed_road_reference_used() else (self._directed_road_reference_ == other._directed_road_reference_)) and
                    (not other.is_road_id_used() if not self.is_road_id_used() else (self._road_id_ == other._road_id_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_directed_)
        if self.is_directed_road_reference_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._directed_road_reference_)
        if self.is_road_id_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._road_id_)

        return result

    @property
    def is_directed(self) -> bool:
        return self._is_directed_

    @is_directed.setter
    def is_directed(self, is_directed_: bool) -> None:
        self._is_directed_ = is_directed_

    @property
    def directed_road_reference(self) -> typing.Optional[nds.road.reference.types.directed_road_reference.DirectedRoadReference]:
        return self._directed_road_reference_

    @directed_road_reference.setter
    def directed_road_reference(self, directed_road_reference_: typing.Optional[nds.road.reference.types.directed_road_reference.DirectedRoadReference]) -> None:
        self._directed_road_reference_ = directed_road_reference_

    def is_directed_road_reference_used(self) -> bool:
        return self._is_directed_

    def is_directed_road_reference_set(self) -> bool:
        return not self._directed_road_reference_ is None

    def reset_directed_road_reference(self) -> None:
        self._directed_road_reference_ = None

    @property
    def road_id(self) -> typing.Optional[nds.road.reference.types.road_id.RoadId]:
        return self._road_id_

    @road_id.setter
    def road_id(self, road_id_: typing.Optional[nds.road.reference.types.road_id.RoadId]) -> None:
        self._road_id_ = road_id_

    def is_road_id_used(self) -> bool:
        return not self._is_directed_

    def is_road_id_set(self) -> bool:
        return not self._road_id_ is None

    def reset_road_id(self) -> None:
        self._road_id_ = None

    def init_packing_context(self, zserio_context: RoadReference.ZserioPackingContext) -> None:
        if self.is_directed_road_reference_used():
            self._directed_road_reference_.init_packing_context(zserio_context.directed_road_reference)
        if self.is_road_id_used():
            self._road_id_.init_packing_context(zserio_context.road_id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_directed_road_reference_used():
            end_bitposition += self._directed_road_reference_.bitsizeof(end_bitposition)
        if self.is_road_id_used():
            end_bitposition += self._road_id_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_directed_road_reference_used():
            end_bitposition += self._directed_road_reference_.bitsizeof_packed(zserio_context.directed_road_reference, end_bitposition)
        if self.is_road_id_used():
            end_bitposition += self._road_id_.bitsizeof_packed(zserio_context.road_id, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_directed_road_reference_used():
            end_bitposition = self._directed_road_reference_.initialize_offsets(end_bitposition)
        if self.is_road_id_used():
            end_bitposition = self._road_id_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_directed_road_reference_used():
            end_bitposition = self._directed_road_reference_.initialize_offsets_packed(zserio_context.directed_road_reference, end_bitposition)
        if self.is_road_id_used():
            end_bitposition = self._road_id_.initialize_offsets_packed(zserio_context.road_id, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._is_directed_ = zserio_reader.read_bool()
        if self.is_directed_road_reference_used():
            self._directed_road_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader(zserio_reader)
        else:
            self._directed_road_reference_ = None
        if self.is_road_id_used():
            self._road_id_ = nds.road.reference.types.road_id.RoadId.from_reader(zserio_reader)
        else:
            self._road_id_ = None

    def read_packed(self, zserio_context: RoadReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._is_directed_ = zserio_reader.read_bool()

        if self.is_directed_road_reference_used():
            self._directed_road_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.from_reader_packed(zserio_context.directed_road_reference, zserio_reader)
        else:
            self._directed_road_reference_ = None

        if self.is_road_id_used():
            self._road_id_ = nds.road.reference.types.road_id.RoadId.from_reader_packed(zserio_context.road_id, zserio_reader)
        else:
            self._road_id_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._is_directed_)
        if self.is_directed_road_reference_used():
            self._directed_road_reference_.write(zserio_writer)
        if self.is_road_id_used():
            self._road_id_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._is_directed_)

        if self.is_directed_road_reference_used():
            self._directed_road_reference_.write_packed(zserio_context.directed_road_reference, zserio_writer)

        if self.is_road_id_used():
            self._road_id_.write_packed(zserio_context.road_id, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._directed_road_reference_ = nds.road.reference.types.directed_road_reference.DirectedRoadReference.ZserioPackingContext()
            self._road_id_ = nds.road.reference.types.road_id.RoadId.ZserioPackingContext()

        @property
        def directed_road_reference(self):
            return self._directed_road_reference_

        @property
        def road_id(self):
            return self._road_id_
