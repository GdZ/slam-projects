# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.road.road.intersection

class IntersectionList:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            intersections_: typing.List[nds.road.road.intersection.Intersection] = None) -> None:
        self._shift_ = shift_
        self._intersections_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intersections(self)), intersections_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['IntersectionList'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'IntersectionList':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IntersectionList'],
            zserio_context: IntersectionList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'IntersectionList':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IntersectionList):
            return (self._shift_ == other._shift_ and
                    (self._intersections_ == other._intersections_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._intersections_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def intersections(self) -> typing.List[nds.road.road.intersection.Intersection]:
        return self._intersections_.raw_array

    @intersections.setter
    def intersections(self, intersections_: typing.List[nds.road.road.intersection.Intersection]) -> None:
        self._intersections_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intersections(self)), intersections_, is_auto=True)

    def init_packing_context(self, zserio_context: IntersectionList.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._intersections_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IntersectionList.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._intersections_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._intersections_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IntersectionList.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._intersections_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._intersections_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intersections(self)), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: IntersectionList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._intersections_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_intersections(self)), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._intersections_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: IntersectionList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._intersections_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_intersections:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.road.intersection.Intersection:
            del zserio_index
            return nds.road.road.intersection.Intersection.from_reader(zserio_reader, self._owner._shift_)

        @staticmethod
        def create_packing_context() -> nds.road.road.intersection.Intersection.ZserioPackingContext:
            return nds.road.road.intersection.Intersection.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.road.road.intersection.Intersection.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.road.intersection.Intersection:
            del zserio_index
            return nds.road.road.intersection.Intersection.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_)
