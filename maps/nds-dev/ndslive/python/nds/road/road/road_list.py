# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.road.road.road

class RoadList:
    def __init__(
            self,
            roads_: typing.List[nds.road.road.road.Road] = None) -> None:
        self._roads_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_roads()), roads_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['RoadList'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadList'],
            zserio_context: RoadList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadList):
            return (self._roads_ == other._roads_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._roads_)

        return result

    @property
    def roads(self) -> typing.List[nds.road.road.road.Road]:
        return self._roads_.raw_array

    @roads.setter
    def roads(self, roads_: typing.List[nds.road.road.road.Road]) -> None:
        self._roads_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_roads()), roads_, is_auto=True)

    def init_packing_context(self, zserio_context: RoadList.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._roads_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadList.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._roads_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._roads_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadList.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._roads_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._roads_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_roads()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: RoadList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._roads_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_roads()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._roads_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: RoadList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._roads_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_roads:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.road.road.Road:
            del zserio_index
            return nds.road.road.road.Road.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.road.road.road.Road.ZserioPackingContext:
            return nds.road.road.road.Road.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.road.road.road.Road.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.road.road.Road:
            del zserio_index
            return nds.road.road.road.Road.from_reader_packed(zserio_context, zserio_reader)
