# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d
import nds.road.reference.types.intersection_id
import nds.road.reference.types.intersection_road_reference
import nds.road.reference.types.intersection_z_level

class Intersection:
    def __init__(
            self,
            coord_shift_: nds.core.geometry.coord_shift.CoordShift,
            id_: nds.road.reference.types.intersection_id.IntersectionId = nds.road.reference.types.intersection_id.IntersectionId(),
            is_artificial_: bool = bool(),
            z_level_: nds.road.reference.types.intersection_z_level.IntersectionZLevel = nds.road.reference.types.intersection_z_level.IntersectionZLevel(),
            num_roads_: int = int(),
            position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            connected_roads_: typing.List[nds.road.reference.types.intersection_road_reference.IntersectionRoadReference] = None) -> None:
        self._coord_shift_ = coord_shift_
        self._id_ = id_
        self._is_artificial_ = is_artificial_
        self._z_level_ = z_level_
        self._num_roads_ = num_roads_
        self._position_ = position_
        self._connected_roads_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connected_roads(self)), connected_roads_)

    @classmethod
    def from_reader(
            cls: typing.Type['Intersection'],
            zserio_reader: zserio.BitStreamReader,
            coord_shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Intersection':
        self = object.__new__(cls)
        self._coord_shift_ = coord_shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Intersection'],
            zserio_context: Intersection.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            coord_shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Intersection':
        self = object.__new__(cls)
        self._coord_shift_ = coord_shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Intersection):
            return (self._coord_shift_ == other._coord_shift_ and
                    (self._id_ == other._id_) and
                    (self._is_artificial_ == other._is_artificial_) and
                    (self._z_level_ == other._z_level_) and
                    (self._num_roads_ == other._num_roads_) and
                    (self._position_ == other._position_) and
                    (self._connected_roads_ == other._connected_roads_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._coord_shift_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._id_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_artificial_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._z_level_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_roads_)
        result = zserio.hashcode.calc_hashcode_object(result, self._position_)
        result = zserio.hashcode.calc_hashcode_object(result, self._connected_roads_)

        return result

    @property
    def coord_shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._coord_shift_

    @property
    def id(self) -> nds.road.reference.types.intersection_id.IntersectionId:
        return self._id_

    @id.setter
    def id(self, id_: nds.road.reference.types.intersection_id.IntersectionId) -> None:
        self._id_ = id_

    @property
    def is_artificial(self) -> bool:
        return self._is_artificial_

    @is_artificial.setter
    def is_artificial(self, is_artificial_: bool) -> None:
        self._is_artificial_ = is_artificial_

    @property
    def z_level(self) -> nds.road.reference.types.intersection_z_level.IntersectionZLevel:
        return self._z_level_

    @z_level.setter
    def z_level(self, z_level_: nds.road.reference.types.intersection_z_level.IntersectionZLevel) -> None:
        self._z_level_ = z_level_

    @property
    def num_roads(self) -> int:
        return self._num_roads_

    @num_roads.setter
    def num_roads(self, num_roads_: int) -> None:
        self._num_roads_ = num_roads_

    @property
    def position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._position_

    @position.setter
    def position(self, position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._position_ = position_

    @property
    def connected_roads(self) -> typing.List[nds.road.reference.types.intersection_road_reference.IntersectionRoadReference]:
        return self._connected_roads_.raw_array

    @connected_roads.setter
    def connected_roads(self, connected_roads_: typing.List[nds.road.reference.types.intersection_road_reference.IntersectionRoadReference]) -> None:
        self._connected_roads_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connected_roads(self)), connected_roads_)

    def init_packing_context(self, zserio_context: Intersection.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUInt32ArrayTraits(), self._id_)
        zserio_context.z_level.init(zserio.array.BitFieldArrayTraits(7), self._z_level_)
        zserio_context.num_roads.init(zserio.array.BitFieldArrayTraits(8), self._num_roads_)
        self._position_.init_packing_context(zserio_context.position)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._id_)
        end_bitposition += 1
        end_bitposition += 7
        end_bitposition += 8
        end_bitposition += self._position_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._connected_roads_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Intersection.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._id_)
        end_bitposition += 1
        end_bitposition += zserio_context.z_level.bitsizeof(zserio.array.BitFieldArrayTraits(7), self._z_level_)
        end_bitposition += zserio_context.num_roads.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_roads_)
        end_bitposition += self._position_.bitsizeof_packed(zserio_context.position, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._connected_roads_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._id_)
        end_bitposition += 1
        end_bitposition += 7
        end_bitposition += 8
        end_bitposition = self._position_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._connected_roads_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Intersection.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._id_)
        end_bitposition += 1
        end_bitposition += zserio_context.z_level.bitsizeof(zserio.array.BitFieldArrayTraits(7), self._z_level_)
        end_bitposition += zserio_context.num_roads.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_roads_)
        end_bitposition = self._position_.initialize_offsets_packed(zserio_context.position, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._connected_roads_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint32()

        self._is_artificial_ = zserio_reader.read_bool()

        self._z_level_ = zserio_reader.read_bits(7)

        self._num_roads_ = zserio_reader.read_bits(8)
        # check constraint
        if not ((self._num_roads_ < 181) and (self._num_roads_ > 0 or self._is_artificial_)):
            raise zserio.PythonRuntimeException("Constraint violated for field Intersection.numRoads!")

        self._position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._coord_shift_)

        zserio_reader.alignto(8)
        self._connected_roads_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connected_roads(self)), zserio_reader, self._num_roads_)

    def read_packed(self, zserio_context: Intersection.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._is_artificial_ = zserio_reader.read_bool()

        self._z_level_ = zserio_context.z_level.read(zserio.array.BitFieldArrayTraits(7), zserio_reader)

        self._num_roads_ = zserio_context.num_roads.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not ((self._num_roads_ < 181) and (self._num_roads_ > 0 or self._is_artificial_)):
            raise zserio.PythonRuntimeException("Constraint violated for field Intersection.numRoads!")

        self._position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.position, zserio_reader, self._coord_shift_)

        zserio_reader.alignto(8)
        self._connected_roads_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connected_roads(self)), zserio_reader, self._num_roads_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._id_)

        zserio_writer.write_bool(self._is_artificial_)

        zserio_writer.write_bits(self._z_level_, 7)

        # check constraint
        if not ((self._num_roads_ < 181) and (self._num_roads_ > 0 or self._is_artificial_)):
            raise zserio.PythonRuntimeException("Constraint violated for field Intersection.numRoads!")
        zserio_writer.write_bits(self._num_roads_, 8)

        # check parameters
        if self._position_.shift != (self._coord_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Intersection.position: "
                                                f"{self._position_.shift} != {self._coord_shift_}!")
        self._position_.write(zserio_writer)

        zserio_writer.alignto(8)
        # check array length
        if len(self._connected_roads_) != (self._num_roads_):
            raise zserio.PythonRuntimeException("Wrong array length for field Intersection.connectedRoads: "
                                                f"{len(self._connected_roads_)} != {self._num_roads_}!")
        self._connected_roads_.write(zserio_writer)

    def write_packed(self, zserio_context: Intersection.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._id_)

        zserio_writer.write_bool(self._is_artificial_)

        zserio_context.z_level.write(zserio.array.BitFieldArrayTraits(7), zserio_writer, self._z_level_)

        # check constraint
        if not ((self._num_roads_ < 181) and (self._num_roads_ > 0 or self._is_artificial_)):
            raise zserio.PythonRuntimeException("Constraint violated for field Intersection.numRoads!")
        zserio_context.num_roads.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_roads_)

        # check parameters
        if self._position_.shift != (self._coord_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Intersection.position: "
                                                f"{self._position_.shift} != {self._coord_shift_}!")
        self._position_.write_packed(zserio_context.position, zserio_writer)

        zserio_writer.alignto(8)
        # check array length
        if len(self._connected_roads_) != (self._num_roads_):
            raise zserio.PythonRuntimeException("Wrong array length for field Intersection.connectedRoads: "
                                                f"{len(self._connected_roads_)} != {self._num_roads_}!")
        self._connected_roads_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()
            self._z_level_ = zserio.array.DeltaContext()
            self._num_roads_ = zserio.array.DeltaContext()
            self._position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

        @property
        def z_level(self):
            return self._z_level_

        @property
        def num_roads(self):
            return self._num_roads_

        @property
        def position(self):
            return self._position_

    class _ZserioElementFactory_connected_roads:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.reference.types.intersection_road_reference.IntersectionRoadReference:
            del zserio_index
            return nds.road.reference.types.intersection_road_reference.IntersectionRoadReference.from_reader(zserio_reader, self._owner._is_artificial_)

        @staticmethod
        def create_packing_context() -> nds.road.reference.types.intersection_road_reference.IntersectionRoadReference.ZserioPackingContext:
            return nds.road.reference.types.intersection_road_reference.IntersectionRoadReference.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.road.reference.types.intersection_road_reference.IntersectionRoadReference.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.road.reference.types.intersection_road_reference.IntersectionRoadReference:
            del zserio_index
            return nds.road.reference.types.intersection_road_reference.IntersectionRoadReference.from_reader_packed(zserio_context, zserio_reader, self._owner._is_artificial_)
