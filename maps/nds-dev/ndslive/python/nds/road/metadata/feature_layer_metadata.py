# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.road_type
import nds.road.metadata.feature_layer_type

class FeatureLayerMetadata:
    def __init__(
            self,
            layer_type_: typing.Union[nds.road.metadata.feature_layer_type.FeatureLayerType, None] = None,
            included_road_types_: typing.List[nds.core.types.road_type.RoadType] = None) -> None:
        self._layer_type_ = layer_type_
        self._included_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), included_road_types_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['FeatureLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'FeatureLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['FeatureLayerMetadata'],
            zserio_context: FeatureLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'FeatureLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, FeatureLayerMetadata):
            return ((self._layer_type_ == other._layer_type_) and
                    (self._included_road_types_ == other._included_road_types_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._layer_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._included_road_types_)

        return result

    @property
    def layer_type(self) -> typing.Union[nds.road.metadata.feature_layer_type.FeatureLayerType, None]:
        return self._layer_type_

    @layer_type.setter
    def layer_type(self, layer_type_: typing.Union[nds.road.metadata.feature_layer_type.FeatureLayerType, None]) -> None:
        self._layer_type_ = layer_type_

    @property
    def included_road_types(self) -> typing.List[nds.core.types.road_type.RoadType]:
        return self._included_road_types_.raw_array

    @included_road_types.setter
    def included_road_types(self, included_road_types_: typing.List[nds.core.types.road_type.RoadType]) -> None:
        self._included_road_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), included_road_types_, is_auto=True)

    def init_packing_context(self, zserio_context: FeatureLayerMetadata.ZserioPackingContext) -> None:
        self._layer_type_.init_packing_context(zserio_context.layer_type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._layer_type_.bitsizeof(end_bitposition)
        end_bitposition += self._included_road_types_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: FeatureLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._layer_type_.bitsizeof_packed(zserio_context.layer_type, end_bitposition)
        end_bitposition += self._included_road_types_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._layer_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._included_road_types_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: FeatureLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._layer_type_.initialize_offsets_packed(zserio_context.layer_type, end_bitposition)
        end_bitposition = self._included_road_types_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._layer_type_ = nds.road.metadata.feature_layer_type.FeatureLayerType.from_reader(zserio_reader)
        self._included_road_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: FeatureLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._layer_type_ = nds.road.metadata.feature_layer_type.FeatureLayerType.from_reader_packed(zserio_context.layer_type, zserio_reader)

        self._included_road_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_included_road_types()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._layer_type_.write(zserio_writer)
        self._included_road_types_.write(zserio_writer)

    def write_packed(self, zserio_context: FeatureLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._layer_type_.write_packed(zserio_context.layer_type, zserio_writer)

        self._included_road_types_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._layer_type_ = zserio.array.DeltaContext()

        @property
        def layer_type(self):
            return self._layer_type_

    class _ZserioElementFactory_included_road_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.road_type.RoadType.ZserioPackingContext:
            return nds.core.types.road_type.RoadType.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.road_type.RoadType.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_type.RoadType:
            del zserio_index
            return nds.core.types.road_type.RoadType.from_reader_packed(zserio_context, zserio_reader)
