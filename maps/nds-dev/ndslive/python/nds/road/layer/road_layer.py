# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.road.road.intersection_list
import nds.road.road.road_list
import nds.system.types.layer_type

class RoadLayer:
    def __init__(
            self,
            coord_shift_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            road_list_: typing.Union[nds.road.road.road_list.RoadList, None] = None,
            intersection_list_: typing.Union[nds.road.road.intersection_list.IntersectionList, None] = None) -> None:
        self._coord_shift_ = coord_shift_
        self._road_list_ = road_list_
        self._intersection_list_ = intersection_list_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadLayer'],
            zserio_context: RoadLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadLayer):
            return ((self._coord_shift_ == other._coord_shift_) and
                    (self._road_list_ == other._road_list_) and
                    (self._intersection_list_ == other._intersection_list_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._coord_shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._road_list_)
        result = zserio.hashcode.calc_hashcode_object(result, self._intersection_list_)

        return result

    @property
    def coord_shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._coord_shift_

    @coord_shift.setter
    def coord_shift(self, coord_shift_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._coord_shift_ = coord_shift_

    @property
    def road_list(self) -> typing.Union[nds.road.road.road_list.RoadList, None]:
        return self._road_list_

    @road_list.setter
    def road_list(self, road_list_: typing.Union[nds.road.road.road_list.RoadList, None]) -> None:
        self._road_list_ = road_list_

    @property
    def intersection_list(self) -> typing.Union[nds.road.road.intersection_list.IntersectionList, None]:
        return self._intersection_list_

    @intersection_list.setter
    def intersection_list(self, intersection_list_: typing.Union[nds.road.road.intersection_list.IntersectionList, None]) -> None:
        self._intersection_list_ = intersection_list_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: RoadLayer.ZserioPackingContext) -> None:
        zserio_context.coord_shift.init(zserio.array.BitFieldArrayTraits(5), self._coord_shift_)
        self._road_list_.init_packing_context(zserio_context.road_list)
        self._intersection_list_.init_packing_context(zserio_context.intersection_list)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += self._road_list_.bitsizeof(end_bitposition)
        end_bitposition += self._intersection_list_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.coord_shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._coord_shift_)
        end_bitposition += self._road_list_.bitsizeof_packed(zserio_context.road_list, end_bitposition)
        end_bitposition += self._intersection_list_.bitsizeof_packed(zserio_context.intersection_list, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition = self._road_list_.initialize_offsets(end_bitposition)
        end_bitposition = self._intersection_list_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.coord_shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._coord_shift_)
        end_bitposition = self._road_list_.initialize_offsets_packed(zserio_context.road_list, end_bitposition)
        end_bitposition = self._intersection_list_.initialize_offsets_packed(zserio_context.intersection_list, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._coord_shift_ = zserio_reader.read_bits(5)
        self._road_list_ = nds.road.road.road_list.RoadList.from_reader(zserio_reader)
        self._intersection_list_ = nds.road.road.intersection_list.IntersectionList.from_reader(zserio_reader, self._coord_shift_)

    def read_packed(self, zserio_context: RoadLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._coord_shift_ = zserio_context.coord_shift.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._road_list_ = nds.road.road.road_list.RoadList.from_reader_packed(zserio_context.road_list, zserio_reader)

        self._intersection_list_ = nds.road.road.intersection_list.IntersectionList.from_reader_packed(zserio_context.intersection_list, zserio_reader, self._coord_shift_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._coord_shift_, 5)

        self._road_list_.write(zserio_writer)

        # check parameters
        if self._intersection_list_.shift != (self._coord_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadLayer.intersectionList: "
                                                f"{self._intersection_list_.shift} != {self._coord_shift_}!")
        self._intersection_list_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.coord_shift.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._coord_shift_)

        self._road_list_.write_packed(zserio_context.road_list, zserio_writer)

        # check parameters
        if self._intersection_list_.shift != (self._coord_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field RoadLayer.intersectionList: "
                                                f"{self._intersection_list_.shift} != {self._coord_shift_}!")
        self._intersection_list_.write_packed(zserio_context.intersection_list, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._coord_shift_ = zserio.array.DeltaContext()
            self._road_list_ = nds.road.road.road_list.RoadList.ZserioPackingContext()
            self._intersection_list_ = nds.road.road.intersection_list.IntersectionList.ZserioPackingContext()

        @property
        def coord_shift(self):
            return self._coord_shift_

        @property
        def road_list(self):
            return self._road_list_

        @property
        def intersection_list(self):
            return self._intersection_list_
