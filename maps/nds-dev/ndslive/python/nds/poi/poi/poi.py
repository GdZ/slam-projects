# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d
import nds.poi.reference.types.poi_category_id
import nds.poi.reference.types.poi_id
import nds.poi.types.brand_icon_set_reference
import nds.poi.types.poi_icon_set_reference
import nds.poi.types.poi_relation

class Poi:
    def __init__(
            self,
            poi_id_: nds.poi.reference.types.poi_id.PoiId = nds.poi.reference.types.poi_id.PoiId(),
            position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            category_id_list_: typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId] = None,
            poi_icon_set_reference_: typing.Optional[nds.poi.types.poi_icon_set_reference.PoiIconSetReference] = None,
            brand_icon_set_reference_: typing.Optional[nds.poi.types.brand_icon_set_reference.BrandIconSetReference] = None,
            related_children_: typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]] = None,
            related_parents_: typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]] = None) -> None:
        self._poi_id_ = poi_id_
        self._position_ = position_
        self._category_id_list_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), category_id_list_, is_auto=True)
        self._poi_icon_set_reference_ = poi_icon_set_reference_
        self._brand_icon_set_reference_ = brand_icon_set_reference_
        if related_children_ is None:
            self._related_children_ = None
        else:
            self._related_children_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_children()), related_children_, is_auto=True)
        if related_parents_ is None:
            self._related_parents_ = None
        else:
            self._related_parents_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_parents()), related_parents_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Poi'],
            zserio_reader: zserio.BitStreamReader) -> 'Poi':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Poi'],
            zserio_context: Poi.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Poi':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Poi):
            return ((self._poi_id_ == other._poi_id_) and
                    (self._position_ == other._position_) and
                    (self._category_id_list_ == other._category_id_list_) and
                    (not other.is_poi_icon_set_reference_used() if not self.is_poi_icon_set_reference_used() else (self._poi_icon_set_reference_ == other._poi_icon_set_reference_)) and
                    (not other.is_brand_icon_set_reference_used() if not self.is_brand_icon_set_reference_used() else (self._brand_icon_set_reference_ == other._brand_icon_set_reference_)) and
                    (not other.is_related_children_used() if not self.is_related_children_used() else (self._related_children_ == other._related_children_)) and
                    (not other.is_related_parents_used() if not self.is_related_parents_used() else (self._related_parents_ == other._related_parents_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._poi_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._position_)
        result = zserio.hashcode.calc_hashcode_object(result, self._category_id_list_)
        if self.is_poi_icon_set_reference_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._poi_icon_set_reference_)
        if self.is_brand_icon_set_reference_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._brand_icon_set_reference_)
        if self.is_related_children_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._related_children_)
        if self.is_related_parents_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._related_parents_)

        return result

    @property
    def poi_id(self) -> nds.poi.reference.types.poi_id.PoiId:
        return self._poi_id_

    @poi_id.setter
    def poi_id(self, poi_id_: nds.poi.reference.types.poi_id.PoiId) -> None:
        self._poi_id_ = poi_id_

    @property
    def position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._position_

    @position.setter
    def position(self, position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._position_ = position_

    @property
    def category_id_list(self) -> typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId]:
        return self._category_id_list_.raw_array

    @category_id_list.setter
    def category_id_list(self, category_id_list_: typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId]) -> None:
        self._category_id_list_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), category_id_list_, is_auto=True)

    @property
    def poi_icon_set_reference(self) -> typing.Optional[nds.poi.types.poi_icon_set_reference.PoiIconSetReference]:
        return self._poi_icon_set_reference_

    @poi_icon_set_reference.setter
    def poi_icon_set_reference(self, poi_icon_set_reference_: typing.Optional[nds.poi.types.poi_icon_set_reference.PoiIconSetReference]) -> None:
        self._poi_icon_set_reference_ = poi_icon_set_reference_

    def is_poi_icon_set_reference_used(self) -> bool:
        return self.is_poi_icon_set_reference_set()

    def is_poi_icon_set_reference_set(self) -> bool:
        return not self._poi_icon_set_reference_ is None

    def reset_poi_icon_set_reference(self) -> None:
        self._poi_icon_set_reference_ = None

    @property
    def brand_icon_set_reference(self) -> typing.Optional[nds.poi.types.brand_icon_set_reference.BrandIconSetReference]:
        return self._brand_icon_set_reference_

    @brand_icon_set_reference.setter
    def brand_icon_set_reference(self, brand_icon_set_reference_: typing.Optional[nds.poi.types.brand_icon_set_reference.BrandIconSetReference]) -> None:
        self._brand_icon_set_reference_ = brand_icon_set_reference_

    def is_brand_icon_set_reference_used(self) -> bool:
        return self.is_brand_icon_set_reference_set()

    def is_brand_icon_set_reference_set(self) -> bool:
        return not self._brand_icon_set_reference_ is None

    def reset_brand_icon_set_reference(self) -> None:
        self._brand_icon_set_reference_ = None

    @property
    def related_children(self) -> typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]]:
        return None if self._related_children_ is None else self._related_children_.raw_array

    @related_children.setter
    def related_children(self, related_children_: typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]]) -> None:
        if related_children_ is None:
            self._related_children_ = None
        else:
            self._related_children_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_children()), related_children_, is_auto=True)

    def is_related_children_used(self) -> bool:
        return self.is_related_children_set()

    def is_related_children_set(self) -> bool:
        return not self._related_children_ is None

    def reset_related_children(self) -> None:
        self._related_children_ = None

    @property
    def related_parents(self) -> typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]]:
        return None if self._related_parents_ is None else self._related_parents_.raw_array

    @related_parents.setter
    def related_parents(self, related_parents_: typing.Optional[typing.List[nds.poi.types.poi_relation.PoiRelation]]) -> None:
        if related_parents_ is None:
            self._related_parents_ = None
        else:
            self._related_parents_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_parents()), related_parents_, is_auto=True)

    def is_related_parents_used(self) -> bool:
        return self.is_related_parents_set()

    def is_related_parents_set(self) -> bool:
        return not self._related_parents_ is None

    def reset_related_parents(self) -> None:
        self._related_parents_ = None

    def init_packing_context(self, zserio_context: Poi.ZserioPackingContext) -> None:
        zserio_context.poi_id.init(zserio.array.VarUInt32ArrayTraits(), self._poi_id_)
        self._position_.init_packing_context(zserio_context.position)
        if self.is_poi_icon_set_reference_used():
            zserio_context.poi_icon_set_reference.init(zserio.array.VarUIntArrayTraits(), self._poi_icon_set_reference_)
        if self.is_brand_icon_set_reference_used():
            zserio_context.brand_icon_set_reference.init(zserio.array.VarUIntArrayTraits(), self._brand_icon_set_reference_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._poi_id_)
        end_bitposition += self._position_.bitsizeof(end_bitposition)
        end_bitposition += self._category_id_list_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_poi_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._poi_icon_set_reference_)
        end_bitposition += 1
        if self.is_brand_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._brand_icon_set_reference_)
        end_bitposition += 1
        if self.is_related_children_used():
            end_bitposition += self._related_children_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_related_parents_used():
            end_bitposition += self._related_parents_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Poi.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.poi_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._poi_id_)
        end_bitposition += self._position_.bitsizeof_packed(zserio_context.position, end_bitposition)
        end_bitposition += self._category_id_list_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_poi_icon_set_reference_used():
            end_bitposition += zserio_context.poi_icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._poi_icon_set_reference_)
        end_bitposition += 1
        if self.is_brand_icon_set_reference_used():
            end_bitposition += zserio_context.brand_icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._brand_icon_set_reference_)
        end_bitposition += 1
        if self.is_related_children_used():
            end_bitposition += self._related_children_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_related_parents_used():
            end_bitposition += self._related_parents_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._poi_id_)
        end_bitposition = self._position_.initialize_offsets(end_bitposition)
        end_bitposition = self._category_id_list_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_poi_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._poi_icon_set_reference_)
        end_bitposition += 1
        if self.is_brand_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._brand_icon_set_reference_)
        end_bitposition += 1
        if self.is_related_children_used():
            end_bitposition = self._related_children_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_related_parents_used():
            end_bitposition = self._related_parents_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Poi.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.poi_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._poi_id_)
        end_bitposition = self._position_.initialize_offsets_packed(zserio_context.position, end_bitposition)
        end_bitposition = self._category_id_list_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_poi_icon_set_reference_used():
            end_bitposition += zserio_context.poi_icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._poi_icon_set_reference_)
        end_bitposition += 1
        if self.is_brand_icon_set_reference_used():
            end_bitposition += zserio_context.brand_icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._brand_icon_set_reference_)
        end_bitposition += 1
        if self.is_related_children_used():
            end_bitposition = self._related_children_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_related_parents_used():
            end_bitposition = self._related_parents_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._poi_id_ = zserio_reader.read_varuint32()
        self._position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        self._category_id_list_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)
        if zserio_reader.read_bool():
            self._poi_icon_set_reference_ = zserio_reader.read_varuint()
        else:
            self._poi_icon_set_reference_ = None
        if zserio_reader.read_bool():
            self._brand_icon_set_reference_ = zserio_reader.read_varuint()
        else:
            self._brand_icon_set_reference_ = None
        if zserio_reader.read_bool():
            self._related_children_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_children()), zserio_reader, is_auto=True)
        else:
            self._related_children_ = None
        if zserio_reader.read_bool():
            self._related_parents_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_parents()), zserio_reader, is_auto=True)
        else:
            self._related_parents_ = None

    def read_packed(self, zserio_context: Poi.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._poi_id_ = zserio_context.poi_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.position, zserio_reader, 0)

        self._category_id_list_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

        if zserio_reader.read_bool():
            self._poi_icon_set_reference_ = zserio_context.poi_icon_set_reference.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._poi_icon_set_reference_ = None

        if zserio_reader.read_bool():
            self._brand_icon_set_reference_ = zserio_context.brand_icon_set_reference.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._brand_icon_set_reference_ = None

        if zserio_reader.read_bool():
            self._related_children_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_children()), zserio_reader, is_auto=True)
        else:
            self._related_children_ = None

        if zserio_reader.read_bool():
            self._related_parents_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_related_parents()), zserio_reader, is_auto=True)
        else:
            self._related_parents_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._poi_id_)

        # check parameters
        if self._position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Poi.position: "
                                                f"{self._position_.shift} != {0}!")
        self._position_.write(zserio_writer)

        self._category_id_list_.write(zserio_writer)

        if self.is_poi_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._poi_icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

        if self.is_brand_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._brand_icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

        if self.is_related_children_used():
            zserio_writer.write_bool(True)
            self._related_children_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_related_parents_used():
            zserio_writer.write_bool(True)
            self._related_parents_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: Poi.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.poi_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._poi_id_)

        # check parameters
        if self._position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Poi.position: "
                                                f"{self._position_.shift} != {0}!")
        self._position_.write_packed(zserio_context.position, zserio_writer)

        self._category_id_list_.write_packed(zserio_writer)

        if self.is_poi_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_context.poi_icon_set_reference.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._poi_icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

        if self.is_brand_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_context.brand_icon_set_reference.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._brand_icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

        if self.is_related_children_used():
            zserio_writer.write_bool(True)
            self._related_children_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_related_parents_used():
            zserio_writer.write_bool(True)
            self._related_parents_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._poi_id_ = zserio.array.DeltaContext()
            self._position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._poi_icon_set_reference_ = zserio.array.DeltaContext()
            self._brand_icon_set_reference_ = zserio.array.DeltaContext()

        @property
        def poi_id(self):
            return self._poi_id_

        @property
        def position(self):
            return self._position_

        @property
        def poi_icon_set_reference(self):
            return self._poi_icon_set_reference_

        @property
        def brand_icon_set_reference(self):
            return self._brand_icon_set_reference_

    class _ZserioElementFactory_related_children:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.poi_relation.PoiRelation:
            del zserio_index
            return nds.poi.types.poi_relation.PoiRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext:
            return nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.poi_relation.PoiRelation:
            del zserio_index
            return nds.poi.types.poi_relation.PoiRelation.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_related_parents:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.poi_relation.PoiRelation:
            del zserio_index
            return nds.poi.types.poi_relation.PoiRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext:
            return nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.poi.types.poi_relation.PoiRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.poi_relation.PoiRelation:
            del zserio_index
            return nds.poi.types.poi_relation.PoiRelation.from_reader_packed(zserio_context, zserio_reader)
