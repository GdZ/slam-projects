# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.poi.instantiations.poi_full_attribute
import nds.poi.reference.types.poi_category_id

class PoiSearchResultDetails:
    def __init__(
            self,
            category_id_: nds.poi.reference.types.poi_category_id.PoiCategoryId = nds.poi.reference.types.poi_category_id.PoiCategoryId(),
            attributes_: typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]] = None) -> None:
        self._category_id_ = category_id_
        if attributes_ is None:
            self._attributes_ = None
        else:
            self._attributes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_attributes()), attributes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['PoiSearchResultDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'PoiSearchResultDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiSearchResultDetails'],
            zserio_context: PoiSearchResultDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoiSearchResultDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiSearchResultDetails):
            return ((self._category_id_ == other._category_id_) and
                    (not other.is_attributes_used() if not self.is_attributes_used() else (self._attributes_ == other._attributes_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._category_id_)
        if self.is_attributes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._attributes_)

        return result

    @property
    def category_id(self) -> nds.poi.reference.types.poi_category_id.PoiCategoryId:
        return self._category_id_

    @category_id.setter
    def category_id(self, category_id_: nds.poi.reference.types.poi_category_id.PoiCategoryId) -> None:
        self._category_id_ = category_id_

    @property
    def attributes(self) -> typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]]:
        return None if self._attributes_ is None else self._attributes_.raw_array

    @attributes.setter
    def attributes(self, attributes_: typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]]) -> None:
        if attributes_ is None:
            self._attributes_ = None
        else:
            self._attributes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_attributes()), attributes_, is_auto=True)

    def is_attributes_used(self) -> bool:
        return self.is_attributes_set()

    def is_attributes_set(self) -> bool:
        return not self._attributes_ is None

    def reset_attributes(self) -> None:
        self._attributes_ = None

    def init_packing_context(self, zserio_context: PoiSearchResultDetails.ZserioPackingContext) -> None:
        zserio_context.category_id.init(zserio.array.VarUInt32ArrayTraits(), self._category_id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._category_id_)
        end_bitposition += 1
        if self.is_attributes_used():
            end_bitposition += self._attributes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiSearchResultDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.category_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._category_id_)
        end_bitposition += 1
        if self.is_attributes_used():
            end_bitposition += self._attributes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._category_id_)
        end_bitposition += 1
        if self.is_attributes_used():
            end_bitposition = self._attributes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiSearchResultDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.category_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._category_id_)
        end_bitposition += 1
        if self.is_attributes_used():
            end_bitposition = self._attributes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._category_id_ = zserio_reader.read_varuint32()
        if zserio_reader.read_bool():
            self._attributes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_attributes()), zserio_reader, is_auto=True)
        else:
            self._attributes_ = None

    def read_packed(self, zserio_context: PoiSearchResultDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._category_id_ = zserio_context.category_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._attributes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_attributes()), zserio_reader, is_auto=True)
        else:
            self._attributes_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._category_id_)
        if self.is_attributes_used():
            zserio_writer.write_bool(True)
            self._attributes_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PoiSearchResultDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.category_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._category_id_)

        if self.is_attributes_used():
            zserio_writer.write_bool(True)
            self._attributes_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._category_id_ = zserio.array.DeltaContext()

        @property
        def category_id(self):
            return self._category_id_

    class _ZserioElementFactory_attributes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute:
            del zserio_index
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext:
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute:
            del zserio_index
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.from_reader_packed(zserio_context, zserio_reader)
