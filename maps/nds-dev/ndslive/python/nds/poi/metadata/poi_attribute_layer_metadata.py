# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.language.available_languages
import nds.poi.instantiations.poi_attribute_metadata
import nds.poi.metadata.attribute_value_icon_map
import nds.poi.metadata.poi_attribute_layer_content

class PoiAttributeLayerMetadata:
    def __init__(
            self,
            content_: typing.Union[nds.poi.metadata.poi_attribute_layer_content.PoiAttributeLayerContent, None] = None,
            attribute_value_icon_map_: typing.Union[nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap, None] = None,
            poi_attribute_metadata_: typing.Union[nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata, None] = None,
            available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None] = None,
            global_icon_set_references_: bool = bool()) -> None:
        self._content_ = content_
        self._attribute_value_icon_map_ = attribute_value_icon_map_
        self._poi_attribute_metadata_ = poi_attribute_metadata_
        self._available_languages_ = available_languages_
        self._global_icon_set_references_ = global_icon_set_references_

    @classmethod
    def from_reader(
            cls: typing.Type['PoiAttributeLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'PoiAttributeLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiAttributeLayerMetadata'],
            zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoiAttributeLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiAttributeLayerMetadata):
            return ((self._content_ == other._content_) and
                    (self._attribute_value_icon_map_ == other._attribute_value_icon_map_) and
                    (self._poi_attribute_metadata_ == other._poi_attribute_metadata_) and
                    (self._available_languages_ == other._available_languages_) and
                    (self._global_icon_set_references_ == other._global_icon_set_references_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        result = zserio.hashcode.calc_hashcode_object(result, self._attribute_value_icon_map_)
        result = zserio.hashcode.calc_hashcode_object(result, self._poi_attribute_metadata_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_languages_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._global_icon_set_references_)

        return result

    @property
    def content(self) -> typing.Union[nds.poi.metadata.poi_attribute_layer_content.PoiAttributeLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.poi.metadata.poi_attribute_layer_content.PoiAttributeLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def attribute_value_icon_map(self) -> typing.Union[nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap, None]:
        return self._attribute_value_icon_map_

    @attribute_value_icon_map.setter
    def attribute_value_icon_map(self, attribute_value_icon_map_: typing.Union[nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap, None]) -> None:
        self._attribute_value_icon_map_ = attribute_value_icon_map_

    @property
    def poi_attribute_metadata(self) -> typing.Union[nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata, None]:
        return self._poi_attribute_metadata_

    @poi_attribute_metadata.setter
    def poi_attribute_metadata(self, poi_attribute_metadata_: typing.Union[nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata, None]) -> None:
        self._poi_attribute_metadata_ = poi_attribute_metadata_

    @property
    def available_languages(self) -> typing.Union[nds.core.language.available_languages.AvailableLanguages, None]:
        return self._available_languages_

    @available_languages.setter
    def available_languages(self, available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None]) -> None:
        self._available_languages_ = available_languages_

    @property
    def global_icon_set_references(self) -> bool:
        return self._global_icon_set_references_

    @global_icon_set_references.setter
    def global_icon_set_references(self, global_icon_set_references_: bool) -> None:
        self._global_icon_set_references_ = global_icon_set_references_

    def init_packing_context(self, zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        self._attribute_value_icon_map_.init_packing_context(zserio_context.attribute_value_icon_map)
        self._poi_attribute_metadata_.init_packing_context(zserio_context.poi_attribute_metadata)
        self._available_languages_.init_packing_context(zserio_context.available_languages)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        end_bitposition += self._attribute_value_icon_map_.bitsizeof(end_bitposition)
        end_bitposition += self._poi_attribute_metadata_.bitsizeof(end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof(end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        end_bitposition += self._attribute_value_icon_map_.bitsizeof_packed(zserio_context.attribute_value_icon_map, end_bitposition)
        end_bitposition += self._poi_attribute_metadata_.bitsizeof_packed(zserio_context.poi_attribute_metadata, end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof_packed(zserio_context.available_languages, end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        end_bitposition = self._attribute_value_icon_map_.initialize_offsets(end_bitposition)
        end_bitposition = self._poi_attribute_metadata_.initialize_offsets(end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets(end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        end_bitposition = self._attribute_value_icon_map_.initialize_offsets_packed(zserio_context.attribute_value_icon_map, end_bitposition)
        end_bitposition = self._poi_attribute_metadata_.initialize_offsets_packed(zserio_context.poi_attribute_metadata, end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets_packed(zserio_context.available_languages, end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.poi.metadata.poi_attribute_layer_content.PoiAttributeLayerContent.from_reader(zserio_reader)
        self._attribute_value_icon_map_ = nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap.from_reader(zserio_reader)
        self._poi_attribute_metadata_ = nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata.from_reader(zserio_reader)
        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader(zserio_reader)
        self._global_icon_set_references_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.poi.metadata.poi_attribute_layer_content.PoiAttributeLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        self._attribute_value_icon_map_ = nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap.from_reader_packed(zserio_context.attribute_value_icon_map, zserio_reader)

        self._poi_attribute_metadata_ = nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata.from_reader_packed(zserio_context.poi_attribute_metadata, zserio_reader)

        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader_packed(zserio_context.available_languages, zserio_reader)

        self._global_icon_set_references_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        self._attribute_value_icon_map_.write(zserio_writer)
        self._poi_attribute_metadata_.write(zserio_writer)
        self._available_languages_.write(zserio_writer)
        zserio_writer.write_bool(self._global_icon_set_references_)

    def write_packed(self, zserio_context: PoiAttributeLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        self._attribute_value_icon_map_.write_packed(zserio_context.attribute_value_icon_map, zserio_writer)

        self._poi_attribute_metadata_.write_packed(zserio_context.poi_attribute_metadata, zserio_writer)

        self._available_languages_.write_packed(zserio_context.available_languages, zserio_writer)

        zserio_writer.write_bool(self._global_icon_set_references_)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._attribute_value_icon_map_ = nds.poi.metadata.attribute_value_icon_map.AttributeValueIconMap.ZserioPackingContext()
            self._poi_attribute_metadata_ = nds.poi.instantiations.poi_attribute_metadata.PoiAttributeMetadata.ZserioPackingContext()
            self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def attribute_value_icon_map(self):
            return self._attribute_value_icon_map_

        @property
        def poi_attribute_metadata(self):
            return self._poi_attribute_metadata_

        @property
        def available_languages(self):
            return self._available_languages_
