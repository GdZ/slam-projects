# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.poi.instantiations.poi_full_attribute
import nds.poi.metadata.poi_search_filter_options
import nds.poi.reference.types.poi_category_id

class PoiSearchFilter:
    def __init__(
            self,
            filter_options_: typing.Union[nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions, None] = None,
            filter_categories_: typing.Optional[typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId]] = None,
            filter_attributes_: typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]] = None) -> None:
        self._filter_options_ = filter_options_
        if filter_categories_ is None:
            self._filter_categories_ = None
        else:
            self._filter_categories_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), filter_categories_, is_auto=True)
        if filter_attributes_ is None:
            self._filter_attributes_ = None
        else:
            self._filter_attributes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_filter_attributes()), filter_attributes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['PoiSearchFilter'],
            zserio_reader: zserio.BitStreamReader) -> 'PoiSearchFilter':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiSearchFilter'],
            zserio_context: PoiSearchFilter.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoiSearchFilter':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiSearchFilter):
            return ((self._filter_options_ == other._filter_options_) and
                    (not other.is_filter_categories_used() if not self.is_filter_categories_used() else (self._filter_categories_ == other._filter_categories_)) and
                    (not other.is_filter_attributes_used() if not self.is_filter_attributes_used() else (self._filter_attributes_ == other._filter_attributes_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._filter_options_)
        if self.is_filter_categories_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._filter_categories_)
        if self.is_filter_attributes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._filter_attributes_)

        return result

    @property
    def filter_options(self) -> typing.Union[nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions, None]:
        return self._filter_options_

    @filter_options.setter
    def filter_options(self, filter_options_: typing.Union[nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions, None]) -> None:
        self._filter_options_ = filter_options_

    @property
    def filter_categories(self) -> typing.Optional[typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId]]:
        return None if self._filter_categories_ is None else self._filter_categories_.raw_array

    @filter_categories.setter
    def filter_categories(self, filter_categories_: typing.Optional[typing.List[nds.poi.reference.types.poi_category_id.PoiCategoryId]]) -> None:
        if filter_categories_ is None:
            self._filter_categories_ = None
        else:
            self._filter_categories_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), filter_categories_, is_auto=True)

    def is_filter_categories_used(self) -> bool:
        return (self._filter_options_ & nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.Values.CATEGORY_FILTER) == nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.Values.CATEGORY_FILTER

    def is_filter_categories_set(self) -> bool:
        return not self._filter_categories_ is None

    def reset_filter_categories(self) -> None:
        self._filter_categories_ = None

    @property
    def filter_attributes(self) -> typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]]:
        return None if self._filter_attributes_ is None else self._filter_attributes_.raw_array

    @filter_attributes.setter
    def filter_attributes(self, filter_attributes_: typing.Optional[typing.List[nds.poi.instantiations.poi_full_attribute.PoiFullAttribute]]) -> None:
        if filter_attributes_ is None:
            self._filter_attributes_ = None
        else:
            self._filter_attributes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_filter_attributes()), filter_attributes_, is_auto=True)

    def is_filter_attributes_used(self) -> bool:
        return (self._filter_options_ & nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.Values.ATTRIBUTE_FILTER) == nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.Values.ATTRIBUTE_FILTER

    def is_filter_attributes_set(self) -> bool:
        return not self._filter_attributes_ is None

    def reset_filter_attributes(self) -> None:
        self._filter_attributes_ = None

    def init_packing_context(self, zserio_context: PoiSearchFilter.ZserioPackingContext) -> None:
        self._filter_options_.init_packing_context(zserio_context.filter_options)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._filter_options_.bitsizeof(end_bitposition)
        if self.is_filter_categories_used():
            end_bitposition += self._filter_categories_.bitsizeof(end_bitposition)
        if self.is_filter_attributes_used():
            end_bitposition += self._filter_attributes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiSearchFilter.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._filter_options_.bitsizeof_packed(zserio_context.filter_options, end_bitposition)
        if self.is_filter_categories_used():
            end_bitposition += self._filter_categories_.bitsizeof_packed(end_bitposition)
        if self.is_filter_attributes_used():
            end_bitposition += self._filter_attributes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._filter_options_.initialize_offsets(end_bitposition)
        if self.is_filter_categories_used():
            end_bitposition = self._filter_categories_.initialize_offsets(end_bitposition)
        if self.is_filter_attributes_used():
            end_bitposition = self._filter_attributes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiSearchFilter.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._filter_options_.initialize_offsets_packed(zserio_context.filter_options, end_bitposition)
        if self.is_filter_categories_used():
            end_bitposition = self._filter_categories_.initialize_offsets_packed(end_bitposition)
        if self.is_filter_attributes_used():
            end_bitposition = self._filter_attributes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._filter_options_ = nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.from_reader(zserio_reader)
        if self.is_filter_categories_used():
            self._filter_categories_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)
        else:
            self._filter_categories_ = None
        if self.is_filter_attributes_used():
            self._filter_attributes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_filter_attributes()), zserio_reader, is_auto=True)
        else:
            self._filter_attributes_ = None

    def read_packed(self, zserio_context: PoiSearchFilter.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._filter_options_ = nds.poi.metadata.poi_search_filter_options.PoiSearchFilterOptions.from_reader_packed(zserio_context.filter_options, zserio_reader)

        if self.is_filter_categories_used():
            self._filter_categories_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)
        else:
            self._filter_categories_ = None

        if self.is_filter_attributes_used():
            self._filter_attributes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_filter_attributes()), zserio_reader, is_auto=True)
        else:
            self._filter_attributes_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._filter_options_.write(zserio_writer)
        if self.is_filter_categories_used():
            self._filter_categories_.write(zserio_writer)
        if self.is_filter_attributes_used():
            self._filter_attributes_.write(zserio_writer)

    def write_packed(self, zserio_context: PoiSearchFilter.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._filter_options_.write_packed(zserio_context.filter_options, zserio_writer)

        if self.is_filter_categories_used():
            self._filter_categories_.write_packed(zserio_writer)

        if self.is_filter_attributes_used():
            self._filter_attributes_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._filter_options_ = zserio.array.DeltaContext()

        @property
        def filter_options(self):
            return self._filter_options_

    class _ZserioElementFactory_filter_attributes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute:
            del zserio_index
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext:
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.instantiations.poi_full_attribute.PoiFullAttribute:
            del zserio_index
            return nds.poi.instantiations.poi_full_attribute.PoiFullAttribute.from_reader_packed(zserio_context, zserio_reader)
