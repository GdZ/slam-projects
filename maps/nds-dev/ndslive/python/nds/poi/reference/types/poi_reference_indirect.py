# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d
import nds.core.location.road_location_path
import nds.poi.reference.types.poi_standard_category

class PoiReferenceIndirect:
    def __init__(
            self,
            standard_category_: typing.Union[nds.poi.reference.types.poi_standard_category.PoiStandardCategory, None] = None,
            position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            road_location_path_: typing.Optional[nds.core.location.road_location_path.RoadLocationPath] = None,
            name_: typing.Optional[str] = None) -> None:
        self._standard_category_ = standard_category_
        self._position_ = position_
        self._road_location_path_ = road_location_path_
        self._name_ = name_

    @classmethod
    def from_reader(
            cls: typing.Type['PoiReferenceIndirect'],
            zserio_reader: zserio.BitStreamReader) -> 'PoiReferenceIndirect':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiReferenceIndirect'],
            zserio_context: PoiReferenceIndirect.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoiReferenceIndirect':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiReferenceIndirect):
            return ((self._standard_category_ == other._standard_category_) and
                    (self._position_ == other._position_) and
                    (not other.is_road_location_path_used() if not self.is_road_location_path_used() else (self._road_location_path_ == other._road_location_path_)) and
                    (not other.is_name_used() if not self.is_name_used() else (self._name_ == other._name_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._standard_category_)
        result = zserio.hashcode.calc_hashcode_object(result, self._position_)
        if self.is_road_location_path_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._road_location_path_)
        if self.is_name_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._name_)

        return result

    @property
    def standard_category(self) -> typing.Union[nds.poi.reference.types.poi_standard_category.PoiStandardCategory, None]:
        return self._standard_category_

    @standard_category.setter
    def standard_category(self, standard_category_: typing.Union[nds.poi.reference.types.poi_standard_category.PoiStandardCategory, None]) -> None:
        self._standard_category_ = standard_category_

    @property
    def position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._position_

    @position.setter
    def position(self, position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._position_ = position_

    @property
    def road_location_path(self) -> typing.Optional[nds.core.location.road_location_path.RoadLocationPath]:
        return self._road_location_path_

    @road_location_path.setter
    def road_location_path(self, road_location_path_: typing.Optional[nds.core.location.road_location_path.RoadLocationPath]) -> None:
        self._road_location_path_ = road_location_path_

    def is_road_location_path_used(self) -> bool:
        return self.is_road_location_path_set()

    def is_road_location_path_set(self) -> bool:
        return not self._road_location_path_ is None

    def reset_road_location_path(self) -> None:
        self._road_location_path_ = None

    @property
    def name(self) -> typing.Optional[str]:
        return self._name_

    @name.setter
    def name(self, name_: typing.Optional[str]) -> None:
        self._name_ = name_

    def is_name_used(self) -> bool:
        return self.is_name_set()

    def is_name_set(self) -> bool:
        return not self._name_ is None

    def reset_name(self) -> None:
        self._name_ = None

    def init_packing_context(self, zserio_context: PoiReferenceIndirect.ZserioPackingContext) -> None:
        self._standard_category_.init_packing_context(zserio_context.standard_category)
        self._position_.init_packing_context(zserio_context.position)
        if self.is_road_location_path_used():
            self._road_location_path_.init_packing_context(zserio_context.road_location_path)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._standard_category_.bitsizeof(end_bitposition)
        end_bitposition += self._position_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_road_location_path_used():
            end_bitposition += self._road_location_path_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiReferenceIndirect.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._standard_category_.bitsizeof_packed(zserio_context.standard_category, end_bitposition)
        end_bitposition += self._position_.bitsizeof_packed(zserio_context.position, end_bitposition)
        end_bitposition += 1
        if self.is_road_location_path_used():
            end_bitposition += self._road_location_path_.bitsizeof_packed(zserio_context.road_location_path, end_bitposition)
        end_bitposition += 1
        if self.is_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._standard_category_.initialize_offsets(end_bitposition)
        end_bitposition = self._position_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_road_location_path_used():
            end_bitposition = self._road_location_path_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiReferenceIndirect.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._standard_category_.initialize_offsets_packed(zserio_context.standard_category, end_bitposition)
        end_bitposition = self._position_.initialize_offsets_packed(zserio_context.position, end_bitposition)
        end_bitposition += 1
        if self.is_road_location_path_used():
            end_bitposition = self._road_location_path_.initialize_offsets_packed(zserio_context.road_location_path, end_bitposition)
        end_bitposition += 1
        if self.is_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._standard_category_ = nds.poi.reference.types.poi_standard_category.PoiStandardCategory.from_reader(zserio_reader)
        self._position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        if zserio_reader.read_bool():
            self._road_location_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader(zserio_reader)
        else:
            self._road_location_path_ = None
        if zserio_reader.read_bool():
            self._name_ = zserio_reader.read_string()
        else:
            self._name_ = None

    def read_packed(self, zserio_context: PoiReferenceIndirect.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._standard_category_ = nds.poi.reference.types.poi_standard_category.PoiStandardCategory.from_reader_packed(zserio_context.standard_category, zserio_reader)

        self._position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.position, zserio_reader, 0)

        if zserio_reader.read_bool():
            self._road_location_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader_packed(zserio_context.road_location_path, zserio_reader)
        else:
            self._road_location_path_ = None

        if zserio_reader.read_bool():
            self._name_ = zserio_reader.read_string()
        else:
            self._name_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._standard_category_.write(zserio_writer)

        # check parameters
        if self._position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field PoiReferenceIndirect.position: "
                                                f"{self._position_.shift} != {0}!")
        self._position_.write(zserio_writer)

        if self.is_road_location_path_used():
            zserio_writer.write_bool(True)
            self._road_location_path_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_name_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._name_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PoiReferenceIndirect.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._standard_category_.write_packed(zserio_context.standard_category, zserio_writer)

        # check parameters
        if self._position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field PoiReferenceIndirect.position: "
                                                f"{self._position_.shift} != {0}!")
        self._position_.write_packed(zserio_context.position, zserio_writer)

        if self.is_road_location_path_used():
            zserio_writer.write_bool(True)
            self._road_location_path_.write_packed(zserio_context.road_location_path, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_name_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._name_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._standard_category_ = zserio.array.DeltaContext()
            self._position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._road_location_path_ = nds.core.location.road_location_path.RoadLocationPath.ZserioPackingContext()

        @property
        def standard_category(self):
            return self._standard_category_

        @property
        def position(self):
            return self._position_

        @property
        def road_location_path(self):
            return self._road_location_path_
