# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.language_code
import nds.poi.properties.property_type

class PropertyValue:
    def __init__(
            self,
            type_: nds.poi.properties.property_type.PropertyType,
            *,
            language_code_: typing.Union[nds.core.types.language_code.LanguageCode, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if language_code_ is not None:
            self._choice = language_code_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.poi.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.poi.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.poi.properties.property_type.PropertyType:
        return self._type_

    @property
    def language_code(self) -> nds.core.types.language_code.LanguageCode:
        return self._choice

    @language_code.setter
    def language_code(self, language_code_: nds.core.types.language_code.LanguageCode) -> None:
        self._choice = language_code_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            return self.CHOICE_LANGUAGE_CODE
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_reader.read_varuint16()
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_context.language_code.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_writer.write_varuint16(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.poi.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.poi.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._language_code_ = zserio.array.DeltaContext()

        @property
        def language_code(self):
            return self._language_code_

    CHOICE_LANGUAGE_CODE = 0
    UNDEFINED_CHOICE = -1
