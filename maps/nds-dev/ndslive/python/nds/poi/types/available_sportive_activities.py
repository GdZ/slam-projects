# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class AvailableSportiveActivities:
    def __init__(
            self,
            num_sports_: int = int(),
            sports_: typing.List[str] = None) -> None:
        self._num_sports_ = num_sports_
        self._sports_ = zserio.array.Array(zserio.array.StringArrayTraits(), sports_)

    @classmethod
    def from_reader(
            cls: typing.Type['AvailableSportiveActivities'],
            zserio_reader: zserio.BitStreamReader) -> 'AvailableSportiveActivities':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AvailableSportiveActivities'],
            zserio_context: AvailableSportiveActivities.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'AvailableSportiveActivities':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AvailableSportiveActivities):
            return ((self._num_sports_ == other._num_sports_) and
                    (self._sports_ == other._sports_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_sports_)
        result = zserio.hashcode.calc_hashcode_object(result, self._sports_)

        return result

    @property
    def num_sports(self) -> int:
        return self._num_sports_

    @num_sports.setter
    def num_sports(self, num_sports_: int) -> None:
        self._num_sports_ = num_sports_

    @property
    def sports(self) -> typing.List[str]:
        return self._sports_.raw_array

    @sports.setter
    def sports(self, sports_: typing.List[str]) -> None:
        self._sports_ = zserio.array.Array(zserio.array.StringArrayTraits(), sports_)

    def init_packing_context(self, zserio_context: AvailableSportiveActivities.ZserioPackingContext) -> None:
        zserio_context.num_sports.init(zserio.array.BitFieldArrayTraits(8), self._num_sports_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += self._sports_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AvailableSportiveActivities.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_sports.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_sports_)
        end_bitposition += self._sports_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition = self._sports_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AvailableSportiveActivities.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_sports.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_sports_)
        end_bitposition = self._sports_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_sports_ = zserio_reader.read_bits(8)
        self._sports_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_sports_)

    def read_packed(self, zserio_context: AvailableSportiveActivities.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_sports_ = zserio_context.num_sports.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._sports_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, self._num_sports_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_sports_, 8)

        # check array length
        if len(self._sports_) != (self._num_sports_):
            raise zserio.PythonRuntimeException("Wrong array length for field AvailableSportiveActivities.sports: "
                                                f"{len(self._sports_)} != {self._num_sports_}!")
        self._sports_.write(zserio_writer)

    def write_packed(self, zserio_context: AvailableSportiveActivities.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_sports.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_sports_)

        # check array length
        if len(self._sports_) != (self._num_sports_):
            raise zserio.PythonRuntimeException("Wrong array length for field AvailableSportiveActivities.sports: "
                                                f"{len(self._sports_)} != {self._num_sports_}!")
        self._sports_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_sports_ = zserio.array.DeltaContext()

        @property
        def num_sports(self):
            return self._num_sports_
