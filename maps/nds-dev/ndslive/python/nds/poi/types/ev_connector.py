# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.electric_current
import nds.core.vehicle.ampere
import nds.core.vehicle.voltage
import nds.core.vehicle.watt
import nds.poi.types.ev_communication_standard
import nds.poi.types.ev_connector_type

class EvConnector:
    def __init__(
            self,
            type_: typing.Union[nds.poi.types.ev_connector_type.EvConnectorType, None] = None,
            current_: typing.Union[nds.core.types.electric_current.ElectricCurrent, None] = None,
            max_power_: nds.core.vehicle.watt.Watt = nds.core.vehicle.watt.Watt(),
            voltage_: typing.Optional[nds.core.vehicle.voltage.Voltage] = None,
            ampere_: typing.Optional[nds.core.vehicle.ampere.Ampere] = None,
            comm_standard_: typing.Optional[nds.poi.types.ev_communication_standard.EvCommunicationStandard] = None) -> None:
        self._type_ = type_
        self._current_ = current_
        self._max_power_ = max_power_
        self._voltage_ = voltage_
        self._ampere_ = ampere_
        self._comm_standard_ = comm_standard_

    @classmethod
    def from_reader(
            cls: typing.Type['EvConnector'],
            zserio_reader: zserio.BitStreamReader) -> 'EvConnector':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['EvConnector'],
            zserio_context: EvConnector.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'EvConnector':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EvConnector):
            return ((self._type_ == other._type_) and
                    (self._current_ == other._current_) and
                    (self._max_power_ == other._max_power_) and
                    (not other.is_voltage_used() if not self.is_voltage_used() else (self._voltage_ == other._voltage_)) and
                    (not other.is_ampere_used() if not self.is_ampere_used() else (self._ampere_ == other._ampere_)) and
                    (not other.is_comm_standard_used() if not self.is_comm_standard_used() else (self._comm_standard_ == other._comm_standard_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._current_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_power_)
        if self.is_voltage_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._voltage_)
        if self.is_ampere_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._ampere_)
        if self.is_comm_standard_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._comm_standard_)

        return result

    @property
    def type(self) -> typing.Union[nds.poi.types.ev_connector_type.EvConnectorType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.poi.types.ev_connector_type.EvConnectorType, None]) -> None:
        self._type_ = type_

    @property
    def current(self) -> typing.Union[nds.core.types.electric_current.ElectricCurrent, None]:
        return self._current_

    @current.setter
    def current(self, current_: typing.Union[nds.core.types.electric_current.ElectricCurrent, None]) -> None:
        self._current_ = current_

    @property
    def max_power(self) -> nds.core.vehicle.watt.Watt:
        return self._max_power_

    @max_power.setter
    def max_power(self, max_power_: nds.core.vehicle.watt.Watt) -> None:
        self._max_power_ = max_power_

    @property
    def voltage(self) -> typing.Optional[nds.core.vehicle.voltage.Voltage]:
        return self._voltage_

    @voltage.setter
    def voltage(self, voltage_: typing.Optional[nds.core.vehicle.voltage.Voltage]) -> None:
        self._voltage_ = voltage_

    def is_voltage_used(self) -> bool:
        return self.is_voltage_set()

    def is_voltage_set(self) -> bool:
        return not self._voltage_ is None

    def reset_voltage(self) -> None:
        self._voltage_ = None

    @property
    def ampere(self) -> typing.Optional[nds.core.vehicle.ampere.Ampere]:
        return self._ampere_

    @ampere.setter
    def ampere(self, ampere_: typing.Optional[nds.core.vehicle.ampere.Ampere]) -> None:
        self._ampere_ = ampere_

    def is_ampere_used(self) -> bool:
        return self.is_ampere_set()

    def is_ampere_set(self) -> bool:
        return not self._ampere_ is None

    def reset_ampere(self) -> None:
        self._ampere_ = None

    @property
    def comm_standard(self) -> typing.Optional[nds.poi.types.ev_communication_standard.EvCommunicationStandard]:
        return self._comm_standard_

    @comm_standard.setter
    def comm_standard(self, comm_standard_: typing.Optional[nds.poi.types.ev_communication_standard.EvCommunicationStandard]) -> None:
        self._comm_standard_ = comm_standard_

    def is_comm_standard_used(self) -> bool:
        return self.is_comm_standard_set()

    def is_comm_standard_set(self) -> bool:
        return not self._comm_standard_ is None

    def reset_comm_standard(self) -> None:
        self._comm_standard_ = None

    def init_packing_context(self, zserio_context: EvConnector.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        self._current_.init_packing_context(zserio_context.current)
        zserio_context.max_power.init(zserio.array.VarUInt32ArrayTraits(), self._max_power_)
        if self.is_voltage_used():
            zserio_context.voltage.init(zserio.array.VarUInt16ArrayTraits(), self._voltage_)
        if self.is_ampere_used():
            zserio_context.ampere.init(zserio.array.VarUInt16ArrayTraits(), self._ampere_)
        if self.is_comm_standard_used():
            self._comm_standard_.init_packing_context(zserio_context.comm_standard)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._current_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_power_)
        end_bitposition += 1
        if self.is_voltage_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._voltage_)
        end_bitposition += 1
        if self.is_ampere_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._ampere_)
        end_bitposition += 1
        if self.is_comm_standard_used():
            end_bitposition += self._comm_standard_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: EvConnector.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._current_.bitsizeof_packed(zserio_context.current, end_bitposition)
        end_bitposition += zserio_context.max_power.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_power_)
        end_bitposition += 1
        if self.is_voltage_used():
            end_bitposition += zserio_context.voltage.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._voltage_)
        end_bitposition += 1
        if self.is_ampere_used():
            end_bitposition += zserio_context.ampere.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._ampere_)
        end_bitposition += 1
        if self.is_comm_standard_used():
            end_bitposition += self._comm_standard_.bitsizeof_packed(zserio_context.comm_standard, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._current_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_power_)
        end_bitposition += 1
        if self.is_voltage_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._voltage_)
        end_bitposition += 1
        if self.is_ampere_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._ampere_)
        end_bitposition += 1
        if self.is_comm_standard_used():
            end_bitposition = self._comm_standard_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: EvConnector.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._current_.initialize_offsets_packed(zserio_context.current, end_bitposition)
        end_bitposition += zserio_context.max_power.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_power_)
        end_bitposition += 1
        if self.is_voltage_used():
            end_bitposition += zserio_context.voltage.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._voltage_)
        end_bitposition += 1
        if self.is_ampere_used():
            end_bitposition += zserio_context.ampere.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._ampere_)
        end_bitposition += 1
        if self.is_comm_standard_used():
            end_bitposition = self._comm_standard_.initialize_offsets_packed(zserio_context.comm_standard, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.poi.types.ev_connector_type.EvConnectorType.from_reader(zserio_reader)
        self._current_ = nds.core.types.electric_current.ElectricCurrent.from_reader(zserio_reader)
        self._max_power_ = zserio_reader.read_varuint32()
        if zserio_reader.read_bool():
            self._voltage_ = zserio_reader.read_varuint16()
        else:
            self._voltage_ = None
        if zserio_reader.read_bool():
            self._ampere_ = zserio_reader.read_varuint16()
        else:
            self._ampere_ = None
        if zserio_reader.read_bool():
            self._comm_standard_ = nds.poi.types.ev_communication_standard.EvCommunicationStandard.from_reader(zserio_reader)
        else:
            self._comm_standard_ = None

    def read_packed(self, zserio_context: EvConnector.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.poi.types.ev_connector_type.EvConnectorType.from_reader_packed(zserio_context.type, zserio_reader)

        self._current_ = nds.core.types.electric_current.ElectricCurrent.from_reader_packed(zserio_context.current, zserio_reader)

        self._max_power_ = zserio_context.max_power.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._voltage_ = zserio_context.voltage.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._voltage_ = None

        if zserio_reader.read_bool():
            self._ampere_ = zserio_context.ampere.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._ampere_ = None

        if zserio_reader.read_bool():
            self._comm_standard_ = nds.poi.types.ev_communication_standard.EvCommunicationStandard.from_reader_packed(zserio_context.comm_standard, zserio_reader)
        else:
            self._comm_standard_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)
        self._current_.write(zserio_writer)
        zserio_writer.write_varuint32(self._max_power_)
        if self.is_voltage_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint16(self._voltage_)
        else:
            zserio_writer.write_bool(False)
        if self.is_ampere_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint16(self._ampere_)
        else:
            zserio_writer.write_bool(False)
        if self.is_comm_standard_used():
            zserio_writer.write_bool(True)
            self._comm_standard_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: EvConnector.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        self._current_.write_packed(zserio_context.current, zserio_writer)

        zserio_context.max_power.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._max_power_)

        if self.is_voltage_used():
            zserio_writer.write_bool(True)
            zserio_context.voltage.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._voltage_)
        else:
            zserio_writer.write_bool(False)

        if self.is_ampere_used():
            zserio_writer.write_bool(True)
            zserio_context.ampere.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._ampere_)
        else:
            zserio_writer.write_bool(False)

        if self.is_comm_standard_used():
            zserio_writer.write_bool(True)
            self._comm_standard_.write_packed(zserio_context.comm_standard, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._current_ = zserio.array.DeltaContext()
            self._max_power_ = zserio.array.DeltaContext()
            self._voltage_ = zserio.array.DeltaContext()
            self._ampere_ = zserio.array.DeltaContext()
            self._comm_standard_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_

        @property
        def current(self):
            return self._current_

        @property
        def max_power(self):
            return self._max_power_

        @property
        def voltage(self):
            return self._voltage_

        @property
        def ampere(self):
            return self._ampere_

        @property
        def comm_standard(self):
            return self._comm_standard_
