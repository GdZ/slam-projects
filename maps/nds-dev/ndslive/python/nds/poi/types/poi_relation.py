# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.poi.reference.types.poi_reference
import nds.poi.reference.types.poi_reference_indirect
import nds.poi.types.poi_relation_type

class PoiRelation:
    def __init__(
            self,
            in_same_tile_: bool = bool(),
            related_poi_: typing.Optional[nds.poi.reference.types.poi_reference.PoiReference] = None,
            ext_related_poi_: typing.Optional[nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect] = None,
            type_: typing.Union[nds.poi.types.poi_relation_type.PoiRelationType, None] = None) -> None:
        self._in_same_tile_ = in_same_tile_
        self._related_poi_ = related_poi_
        self._ext_related_poi_ = ext_related_poi_
        self._type_ = type_

    @classmethod
    def from_reader(
            cls: typing.Type['PoiRelation'],
            zserio_reader: zserio.BitStreamReader) -> 'PoiRelation':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiRelation'],
            zserio_context: PoiRelation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoiRelation':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiRelation):
            return ((self._in_same_tile_ == other._in_same_tile_) and
                    (not other.is_related_poi_used() if not self.is_related_poi_used() else (self._related_poi_ == other._related_poi_)) and
                    (not other.is_ext_related_poi_used() if not self.is_ext_related_poi_used() else (self._ext_related_poi_ == other._ext_related_poi_)) and
                    (self._type_ == other._type_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._in_same_tile_)
        if self.is_related_poi_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._related_poi_)
        if self.is_ext_related_poi_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._ext_related_poi_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)

        return result

    @property
    def in_same_tile(self) -> bool:
        return self._in_same_tile_

    @in_same_tile.setter
    def in_same_tile(self, in_same_tile_: bool) -> None:
        self._in_same_tile_ = in_same_tile_

    @property
    def related_poi(self) -> typing.Optional[nds.poi.reference.types.poi_reference.PoiReference]:
        return self._related_poi_

    @related_poi.setter
    def related_poi(self, related_poi_: typing.Optional[nds.poi.reference.types.poi_reference.PoiReference]) -> None:
        self._related_poi_ = related_poi_

    def is_related_poi_used(self) -> bool:
        return self._in_same_tile_

    def is_related_poi_set(self) -> bool:
        return not self._related_poi_ is None

    def reset_related_poi(self) -> None:
        self._related_poi_ = None

    @property
    def ext_related_poi(self) -> typing.Optional[nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect]:
        return self._ext_related_poi_

    @ext_related_poi.setter
    def ext_related_poi(self, ext_related_poi_: typing.Optional[nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect]) -> None:
        self._ext_related_poi_ = ext_related_poi_

    def is_ext_related_poi_used(self) -> bool:
        return not self._in_same_tile_

    def is_ext_related_poi_set(self) -> bool:
        return not self._ext_related_poi_ is None

    def reset_ext_related_poi(self) -> None:
        self._ext_related_poi_ = None

    @property
    def type(self) -> typing.Union[nds.poi.types.poi_relation_type.PoiRelationType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.poi.types.poi_relation_type.PoiRelationType, None]) -> None:
        self._type_ = type_

    def init_packing_context(self, zserio_context: PoiRelation.ZserioPackingContext) -> None:
        if self.is_related_poi_used():
            zserio_context.related_poi.init(zserio.array.VarUInt32ArrayTraits(), self._related_poi_)
        if self.is_ext_related_poi_used():
            self._ext_related_poi_.init_packing_context(zserio_context.ext_related_poi)
        self._type_.init_packing_context(zserio_context.type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_related_poi_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._related_poi_)
        if self.is_ext_related_poi_used():
            end_bitposition += self._ext_related_poi_.bitsizeof(end_bitposition)
        end_bitposition += self._type_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiRelation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_related_poi_used():
            end_bitposition += zserio_context.related_poi.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._related_poi_)
        if self.is_ext_related_poi_used():
            end_bitposition += self._ext_related_poi_.bitsizeof_packed(zserio_context.ext_related_poi, end_bitposition)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_related_poi_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._related_poi_)
        if self.is_ext_related_poi_used():
            end_bitposition = self._ext_related_poi_.initialize_offsets(end_bitposition)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiRelation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_related_poi_used():
            end_bitposition += zserio_context.related_poi.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._related_poi_)
        if self.is_ext_related_poi_used():
            end_bitposition = self._ext_related_poi_.initialize_offsets_packed(zserio_context.ext_related_poi, end_bitposition)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._in_same_tile_ = zserio_reader.read_bool()
        if self.is_related_poi_used():
            self._related_poi_ = zserio_reader.read_varuint32()
        else:
            self._related_poi_ = None
        if self.is_ext_related_poi_used():
            self._ext_related_poi_ = nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect.from_reader(zserio_reader)
        else:
            self._ext_related_poi_ = None
        self._type_ = nds.poi.types.poi_relation_type.PoiRelationType.from_reader(zserio_reader)

    def read_packed(self, zserio_context: PoiRelation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._in_same_tile_ = zserio_reader.read_bool()

        if self.is_related_poi_used():
            self._related_poi_ = zserio_context.related_poi.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._related_poi_ = None

        if self.is_ext_related_poi_used():
            self._ext_related_poi_ = nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect.from_reader_packed(zserio_context.ext_related_poi, zserio_reader)
        else:
            self._ext_related_poi_ = None

        self._type_ = nds.poi.types.poi_relation_type.PoiRelationType.from_reader_packed(zserio_context.type, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._in_same_tile_)
        if self.is_related_poi_used():
            zserio_writer.write_varuint32(self._related_poi_)
        if self.is_ext_related_poi_used():
            self._ext_related_poi_.write(zserio_writer)
        self._type_.write(zserio_writer)

    def write_packed(self, zserio_context: PoiRelation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._in_same_tile_)

        if self.is_related_poi_used():
            zserio_context.related_poi.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._related_poi_)

        if self.is_ext_related_poi_used():
            self._ext_related_poi_.write_packed(zserio_context.ext_related_poi, zserio_writer)

        self._type_.write_packed(zserio_context.type, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._related_poi_ = zserio.array.DeltaContext()
            self._ext_related_poi_ = nds.poi.reference.types.poi_reference_indirect.PoiReferenceIndirect.ZserioPackingContext()
            self._type_ = zserio.array.DeltaContext()

        @property
        def related_poi(self):
            return self._related_poi_

        @property
        def ext_related_poi(self):
            return self._ext_related_poi_

        @property
        def type(self):
            return self._type_
