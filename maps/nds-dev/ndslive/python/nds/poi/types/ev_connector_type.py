# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class EvConnectorType(zserio.Enum):
    VDE_AR_E_2623_2_2 = 0
    SAE_J1772 = 1
    SMALL_PADDLE_INDUCTIVE = 2
    LARGE_PADDLE_INDUCTIVE = 3
    AVCON = 4
    TESLA = 5
    NEMA_5_20 = 6
    TEPCO = 7
    HOUSEHOLD = 8
    SINGLE_PHASE_60309 = 9
    IEC62196_2_T2O = 10
    IEC62196_2_T3O_16A = 11
    IEC62196_2_T3O_32A = 12
    IEC62196_2_T3O_32A_3PHASE = 13
    IEC62196_2_T1C = 14
    IEC62196_2_T2C_M13 = 15
    IEC62196_2_T2C_M23 = 16
    IEC62196_2_T3C_16A = 17
    IEC62196_2_T3C_32A = 18
    IEC62196_2_T3C_32A_3PHASE = 19
    COMBO_T1 = 20
    COMBO_T2 = 21
    GB_P2 = 22
    GB_P3 = 23
    BETTER_PLACE = 24
    MARECHAL = 25
    IEC309_2 = 26
    GBT20234_M13_1P = 27
    GBT20234_M13_3P = 28
    GBT20234_M3_7P = 29
    GBT20234_M4_9P = 30
    DC_CHADEMO = 31
    DC_COMBO = 32
    AC_3PHASE = 33
    AC_SLOW = 34
    DOMESTIC_B_5_15 = 35
    DOMESTIC_B_5_20 = 36
    DOMESTIC_D = 37
    DOMESTIC_E = 38
    DOMESTIC_F = 39
    DOMESTIC_EF = 40
    DOMESTIC_G = 41
    DOMESTIC_H = 42
    DOMESTIC_I_ASNZ = 43
    DOMESTIC_I_CPCS = 44
    DOMESTIC_I_IRAM = 45
    DOMESTIC_J_TX3 = 46
    DOMESTIC_J_T15 = 47
    DOMESTIC_K = 48
    DOMESTIC_K_TH = 49
    DOMESTIC_L = 50
    DOMESTIC_M = 51
    DOMESTIC_IEC = 52
    TESLA_HIGH = 53
    TESLA_UNI = 54
    TESLA_SPARE = 55
    IEC61851_1 = 56
    IEC60309_PNE = 57
    IEC60309_PNE_CEEPLUS = 58
    IEC60309_2PE = 59
    IEC60309_3PEN = 60
    IEC60309_3PNE = 61
    IEC60309_ASNZ = 62
    UNSPECIFIED = 63

    @classmethod
    def from_name(cls: typing.Type['EvConnectorType'], item_name: str) -> 'EvConnectorType':
        if item_name == 'VDE_AR_E_2623_2_2':
            item = EvConnectorType.VDE_AR_E_2623_2_2
        elif item_name == 'SAE_J1772':
            item = EvConnectorType.SAE_J1772
        elif item_name == 'SMALL_PADDLE_INDUCTIVE':
            item = EvConnectorType.SMALL_PADDLE_INDUCTIVE
        elif item_name == 'LARGE_PADDLE_INDUCTIVE':
            item = EvConnectorType.LARGE_PADDLE_INDUCTIVE
        elif item_name == 'AVCON':
            item = EvConnectorType.AVCON
        elif item_name == 'TESLA':
            item = EvConnectorType.TESLA
        elif item_name == 'NEMA_5_20':
            item = EvConnectorType.NEMA_5_20
        elif item_name == 'TEPCO':
            item = EvConnectorType.TEPCO
        elif item_name == 'HOUSEHOLD':
            item = EvConnectorType.HOUSEHOLD
        elif item_name == 'SINGLE_PHASE_60309':
            item = EvConnectorType.SINGLE_PHASE_60309
        elif item_name == 'IEC62196_2_T2O':
            item = EvConnectorType.IEC62196_2_T2O
        elif item_name == 'IEC62196_2_T3O_16A':
            item = EvConnectorType.IEC62196_2_T3O_16A
        elif item_name == 'IEC62196_2_T3O_32A':
            item = EvConnectorType.IEC62196_2_T3O_32A
        elif item_name == 'IEC62196_2_T3O_32A_3PHASE':
            item = EvConnectorType.IEC62196_2_T3O_32A_3PHASE
        elif item_name == 'IEC62196_2_T1C':
            item = EvConnectorType.IEC62196_2_T1C
        elif item_name == 'IEC62196_2_T2C_M13':
            item = EvConnectorType.IEC62196_2_T2C_M13
        elif item_name == 'IEC62196_2_T2C_M23':
            item = EvConnectorType.IEC62196_2_T2C_M23
        elif item_name == 'IEC62196_2_T3C_16A':
            item = EvConnectorType.IEC62196_2_T3C_16A
        elif item_name == 'IEC62196_2_T3C_32A':
            item = EvConnectorType.IEC62196_2_T3C_32A
        elif item_name == 'IEC62196_2_T3C_32A_3PHASE':
            item = EvConnectorType.IEC62196_2_T3C_32A_3PHASE
        elif item_name == 'COMBO_T1':
            item = EvConnectorType.COMBO_T1
        elif item_name == 'COMBO_T2':
            item = EvConnectorType.COMBO_T2
        elif item_name == 'GB_P2':
            item = EvConnectorType.GB_P2
        elif item_name == 'GB_P3':
            item = EvConnectorType.GB_P3
        elif item_name == 'BETTER_PLACE':
            item = EvConnectorType.BETTER_PLACE
        elif item_name == 'MARECHAL':
            item = EvConnectorType.MARECHAL
        elif item_name == 'IEC309_2':
            item = EvConnectorType.IEC309_2
        elif item_name == 'GBT20234_M13_1P':
            item = EvConnectorType.GBT20234_M13_1P
        elif item_name == 'GBT20234_M13_3P':
            item = EvConnectorType.GBT20234_M13_3P
        elif item_name == 'GBT20234_M3_7P':
            item = EvConnectorType.GBT20234_M3_7P
        elif item_name == 'GBT20234_M4_9P':
            item = EvConnectorType.GBT20234_M4_9P
        elif item_name == 'DC_CHADEMO':
            item = EvConnectorType.DC_CHADEMO
        elif item_name == 'DC_COMBO':
            item = EvConnectorType.DC_COMBO
        elif item_name == 'AC_3PHASE':
            item = EvConnectorType.AC_3PHASE
        elif item_name == 'AC_SLOW':
            item = EvConnectorType.AC_SLOW
        elif item_name == 'DOMESTIC_B_5_15':
            item = EvConnectorType.DOMESTIC_B_5_15
        elif item_name == 'DOMESTIC_B_5_20':
            item = EvConnectorType.DOMESTIC_B_5_20
        elif item_name == 'DOMESTIC_D':
            item = EvConnectorType.DOMESTIC_D
        elif item_name == 'DOMESTIC_E':
            item = EvConnectorType.DOMESTIC_E
        elif item_name == 'DOMESTIC_F':
            item = EvConnectorType.DOMESTIC_F
        elif item_name == 'DOMESTIC_EF':
            item = EvConnectorType.DOMESTIC_EF
        elif item_name == 'DOMESTIC_G':
            item = EvConnectorType.DOMESTIC_G
        elif item_name == 'DOMESTIC_H':
            item = EvConnectorType.DOMESTIC_H
        elif item_name == 'DOMESTIC_I_ASNZ':
            item = EvConnectorType.DOMESTIC_I_ASNZ
        elif item_name == 'DOMESTIC_I_CPCS':
            item = EvConnectorType.DOMESTIC_I_CPCS
        elif item_name == 'DOMESTIC_I_IRAM':
            item = EvConnectorType.DOMESTIC_I_IRAM
        elif item_name == 'DOMESTIC_J_TX3':
            item = EvConnectorType.DOMESTIC_J_TX3
        elif item_name == 'DOMESTIC_J_T15':
            item = EvConnectorType.DOMESTIC_J_T15
        elif item_name == 'DOMESTIC_K':
            item = EvConnectorType.DOMESTIC_K
        elif item_name == 'DOMESTIC_K_TH':
            item = EvConnectorType.DOMESTIC_K_TH
        elif item_name == 'DOMESTIC_L':
            item = EvConnectorType.DOMESTIC_L
        elif item_name == 'DOMESTIC_M':
            item = EvConnectorType.DOMESTIC_M
        elif item_name == 'DOMESTIC_IEC':
            item = EvConnectorType.DOMESTIC_IEC
        elif item_name == 'TESLA_HIGH':
            item = EvConnectorType.TESLA_HIGH
        elif item_name == 'TESLA_UNI':
            item = EvConnectorType.TESLA_UNI
        elif item_name == 'TESLA_SPARE':
            item = EvConnectorType.TESLA_SPARE
        elif item_name == 'IEC61851_1':
            item = EvConnectorType.IEC61851_1
        elif item_name == 'IEC60309_PNE':
            item = EvConnectorType.IEC60309_PNE
        elif item_name == 'IEC60309_PNE_CEEPLUS':
            item = EvConnectorType.IEC60309_PNE_CEEPLUS
        elif item_name == 'IEC60309_2PE':
            item = EvConnectorType.IEC60309_2PE
        elif item_name == 'IEC60309_3PEN':
            item = EvConnectorType.IEC60309_3PEN
        elif item_name == 'IEC60309_3PNE':
            item = EvConnectorType.IEC60309_3PNE
        elif item_name == 'IEC60309_ASNZ':
            item = EvConnectorType.IEC60309_ASNZ
        elif item_name == 'UNSPECIFIED':
            item = EvConnectorType.UNSPECIFIED
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'EvConnectorType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['EvConnectorType'], reader: zserio.BitStreamReader) -> 'EvConnectorType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['EvConnectorType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'EvConnectorType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
