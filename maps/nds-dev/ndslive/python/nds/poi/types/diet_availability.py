# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class DietAvailability:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['DietAvailability'], value: int) -> 'DietAvailability':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'DietAvailability' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['DietAvailability'], reader: zserio.BitStreamReader) -> 'DietAvailability':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['DietAvailability'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'DietAvailability':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DietAvailability):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & DietAvailability.Values.PESCETARIAN) == DietAvailability.Values.PESCETARIAN:
            result += "PESCETARIAN" if not result else " | PESCETARIAN"
        if (self & DietAvailability.Values.VEGETARIAN) == DietAvailability.Values.VEGETARIAN:
            result += "VEGETARIAN" if not result else " | VEGETARIAN"
        if (self & DietAvailability.Values.LACTO_VEGETARIAN) == DietAvailability.Values.LACTO_VEGETARIAN:
            result += "LACTO_VEGETARIAN" if not result else " | LACTO_VEGETARIAN"
        if (self & DietAvailability.Values.OVO_VEGETARIAN) == DietAvailability.Values.OVO_VEGETARIAN:
            result += "OVO_VEGETARIAN" if not result else " | OVO_VEGETARIAN"
        if (self & DietAvailability.Values.VEGAN) == DietAvailability.Values.VEGAN:
            result += "VEGAN" if not result else " | VEGAN"
        if (self & DietAvailability.Values.FRUITARIAN) == DietAvailability.Values.FRUITARIAN:
            result += "FRUITARIAN" if not result else " | FRUITARIAN"
        if (self & DietAvailability.Values.RAW) == DietAvailability.Values.RAW:
            result += "RAW" if not result else " | RAW"
        if (self & DietAvailability.Values.GLUTEN_FREE) == DietAvailability.Values.GLUTEN_FREE:
            result += "GLUTEN_FREE" if not result else " | GLUTEN_FREE"
        if (self & DietAvailability.Values.DAIRY_FREE) == DietAvailability.Values.DAIRY_FREE:
            result += "DAIRY_FREE" if not result else " | DAIRY_FREE"
        if (self & DietAvailability.Values.LACTOSE_FREE) == DietAvailability.Values.LACTOSE_FREE:
            result += "LACTOSE_FREE" if not result else " | LACTOSE_FREE"
        if (self & DietAvailability.Values.DIABETES) == DietAvailability.Values.DIABETES:
            result += "DIABETES" if not result else " | DIABETES"
        if (self & DietAvailability.Values.HALAL) == DietAvailability.Values.HALAL:
            result += "HALAL" if not result else " | HALAL"
        if (self & DietAvailability.Values.KOSHER) == DietAvailability.Values.KOSHER:
            result += "KOSHER" if not result else " | KOSHER"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'DietAvailability') -> 'DietAvailability':
        return DietAvailability.from_value(self._value | other._value)

    def __and__(self, other: 'DietAvailability') -> 'DietAvailability':
        return DietAvailability.from_value(self._value & other._value)

    def __xor__(self, other: 'DietAvailability') -> 'DietAvailability':
        return DietAvailability.from_value(self._value ^ other._value)

    def __invert__(self) -> 'DietAvailability':
        return DietAvailability.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        PESCETARIAN: 'DietAvailability' = None
        VEGETARIAN: 'DietAvailability' = None
        LACTO_VEGETARIAN: 'DietAvailability' = None
        OVO_VEGETARIAN: 'DietAvailability' = None
        VEGAN: 'DietAvailability' = None
        FRUITARIAN: 'DietAvailability' = None
        RAW: 'DietAvailability' = None
        GLUTEN_FREE: 'DietAvailability' = None
        DAIRY_FREE: 'DietAvailability' = None
        LACTOSE_FREE: 'DietAvailability' = None
        DIABETES: 'DietAvailability' = None
        HALAL: 'DietAvailability' = None
        KOSHER: 'DietAvailability' = None

DietAvailability.Values.PESCETARIAN = DietAvailability.from_value(1)
DietAvailability.Values.VEGETARIAN = DietAvailability.from_value(2)
DietAvailability.Values.LACTO_VEGETARIAN = DietAvailability.from_value(4)
DietAvailability.Values.OVO_VEGETARIAN = DietAvailability.from_value(8)
DietAvailability.Values.VEGAN = DietAvailability.from_value(16)
DietAvailability.Values.FRUITARIAN = DietAvailability.from_value(32)
DietAvailability.Values.RAW = DietAvailability.from_value(64)
DietAvailability.Values.GLUTEN_FREE = DietAvailability.from_value(128)
DietAvailability.Values.DAIRY_FREE = DietAvailability.from_value(256)
DietAvailability.Values.LACTOSE_FREE = DietAvailability.from_value(512)
DietAvailability.Values.DIABETES = DietAvailability.from_value(1024)
DietAvailability.Values.HALAL = DietAvailability.from_value(2048)
DietAvailability.Values.KOSHER = DietAvailability.from_value(4096)
