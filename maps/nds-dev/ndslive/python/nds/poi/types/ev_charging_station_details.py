# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.watt
import nds.poi.types.ev_connector

class EvChargingStationDetails:
    def __init__(
            self,
            total_power_: nds.core.vehicle.watt.Watt = nds.core.vehicle.watt.Watt(),
            num_connectors_: int = int(),
            connectors_: typing.List[nds.poi.types.ev_connector.EvConnector] = None,
            chargers_: typing.List[int] = None) -> None:
        self._total_power_ = total_power_
        self._num_connectors_ = num_connectors_
        self._connectors_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connectors()), connectors_)
        self._chargers_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_)

    @classmethod
    def from_reader(
            cls: typing.Type['EvChargingStationDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'EvChargingStationDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['EvChargingStationDetails'],
            zserio_context: EvChargingStationDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'EvChargingStationDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EvChargingStationDetails):
            return ((self._total_power_ == other._total_power_) and
                    (self._num_connectors_ == other._num_connectors_) and
                    (self._connectors_ == other._connectors_) and
                    (self._chargers_ == other._chargers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._total_power_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_connectors_)
        result = zserio.hashcode.calc_hashcode_object(result, self._connectors_)
        result = zserio.hashcode.calc_hashcode_object(result, self._chargers_)

        return result

    @property
    def total_power(self) -> nds.core.vehicle.watt.Watt:
        return self._total_power_

    @total_power.setter
    def total_power(self, total_power_: nds.core.vehicle.watt.Watt) -> None:
        self._total_power_ = total_power_

    @property
    def num_connectors(self) -> int:
        return self._num_connectors_

    @num_connectors.setter
    def num_connectors(self, num_connectors_: int) -> None:
        self._num_connectors_ = num_connectors_

    @property
    def connectors(self) -> typing.List[nds.poi.types.ev_connector.EvConnector]:
        return self._connectors_.raw_array

    @connectors.setter
    def connectors(self, connectors_: typing.List[nds.poi.types.ev_connector.EvConnector]) -> None:
        self._connectors_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connectors()), connectors_)

    @property
    def chargers(self) -> typing.List[int]:
        return self._chargers_.raw_array

    @chargers.setter
    def chargers(self, chargers_: typing.List[int]) -> None:
        self._chargers_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_)

    def init_packing_context(self, zserio_context: EvChargingStationDetails.ZserioPackingContext) -> None:
        zserio_context.total_power.init(zserio.array.VarUInt32ArrayTraits(), self._total_power_)
        zserio_context.num_connectors.init(zserio.array.VarSizeArrayTraits(), self._num_connectors_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._total_power_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_connectors_)
        end_bitposition += self._connectors_.bitsizeof(end_bitposition)
        end_bitposition += self._chargers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: EvChargingStationDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.total_power.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._total_power_)
        end_bitposition += zserio_context.num_connectors.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_connectors_)
        end_bitposition += self._connectors_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._chargers_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._total_power_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_connectors_)
        end_bitposition = self._connectors_.initialize_offsets(end_bitposition)
        end_bitposition = self._chargers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: EvChargingStationDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.total_power.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._total_power_)
        end_bitposition += zserio_context.num_connectors.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_connectors_)
        end_bitposition = self._connectors_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._chargers_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._total_power_ = zserio_reader.read_varuint32()
        self._num_connectors_ = zserio_reader.read_varsize()
        self._connectors_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connectors()), zserio_reader, self._num_connectors_)
        self._chargers_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

    def read_packed(self, zserio_context: EvChargingStationDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._total_power_ = zserio_context.total_power.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._num_connectors_ = zserio_context.num_connectors.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._connectors_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connectors()), zserio_reader, self._num_connectors_)

        self._chargers_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._total_power_)

        zserio_writer.write_varsize(self._num_connectors_)

        # check array length
        if len(self._connectors_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingStationDetails.connectors: "
                                                f"{len(self._connectors_)} != {self._num_connectors_}!")
        self._connectors_.write(zserio_writer)

        # check array length
        if len(self._chargers_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingStationDetails.chargers: "
                                                f"{len(self._chargers_)} != {self._num_connectors_}!")
        self._chargers_.write(zserio_writer)

    def write_packed(self, zserio_context: EvChargingStationDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.total_power.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._total_power_)

        zserio_context.num_connectors.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_connectors_)

        # check array length
        if len(self._connectors_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingStationDetails.connectors: "
                                                f"{len(self._connectors_)} != {self._num_connectors_}!")
        self._connectors_.write_packed(zserio_writer)

        # check array length
        if len(self._chargers_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingStationDetails.chargers: "
                                                f"{len(self._chargers_)} != {self._num_connectors_}!")
        self._chargers_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._total_power_ = zserio.array.DeltaContext()
            self._num_connectors_ = zserio.array.DeltaContext()

        @property
        def total_power(self):
            return self._total_power_

        @property
        def num_connectors(self):
            return self._num_connectors_

    class _ZserioElementFactory_connectors:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.ev_connector.EvConnector:
            del zserio_index
            return nds.poi.types.ev_connector.EvConnector.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.poi.types.ev_connector.EvConnector.ZserioPackingContext:
            return nds.poi.types.ev_connector.EvConnector.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.poi.types.ev_connector.EvConnector.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.ev_connector.EvConnector:
            del zserio_index
            return nds.poi.types.ev_connector.EvConnector.from_reader_packed(zserio_context, zserio_reader)
