# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_set_reference

class PaymentMethod:
    def __init__(
            self,
            name_: str = str(),
            icon_set_reference_: typing.Optional[nds.core.icons.icon_set_reference.IconSetReference] = None) -> None:
        self._name_ = name_
        self._icon_set_reference_ = icon_set_reference_

    @classmethod
    def from_reader(
            cls: typing.Type['PaymentMethod'],
            zserio_reader: zserio.BitStreamReader) -> 'PaymentMethod':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PaymentMethod'],
            zserio_context: PaymentMethod.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PaymentMethod':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PaymentMethod):
            return ((self._name_ == other._name_) and
                    (not other.is_icon_set_reference_used() if not self.is_icon_set_reference_used() else (self._icon_set_reference_ == other._icon_set_reference_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._name_)
        if self.is_icon_set_reference_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._icon_set_reference_)

        return result

    @property
    def name(self) -> str:
        return self._name_

    @name.setter
    def name(self, name_: str) -> None:
        self._name_ = name_

    @property
    def icon_set_reference(self) -> typing.Optional[nds.core.icons.icon_set_reference.IconSetReference]:
        return self._icon_set_reference_

    @icon_set_reference.setter
    def icon_set_reference(self, icon_set_reference_: typing.Optional[nds.core.icons.icon_set_reference.IconSetReference]) -> None:
        self._icon_set_reference_ = icon_set_reference_

    def is_icon_set_reference_used(self) -> bool:
        return self.is_icon_set_reference_set()

    def is_icon_set_reference_set(self) -> bool:
        return not self._icon_set_reference_ is None

    def reset_icon_set_reference(self) -> None:
        self._icon_set_reference_ = None

    def init_packing_context(self, zserio_context: PaymentMethod.ZserioPackingContext) -> None:
        if self.is_icon_set_reference_used():
            zserio_context.icon_set_reference.init(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_reference_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PaymentMethod.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_icon_set_reference_used():
            end_bitposition += zserio_context.icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_icon_set_reference_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_reference_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PaymentMethod.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_icon_set_reference_used():
            end_bitposition += zserio_context.icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._name_ = zserio_reader.read_string()
        if zserio_reader.read_bool():
            self._icon_set_reference_ = zserio_reader.read_varuint()
        else:
            self._icon_set_reference_ = None

    def read_packed(self, zserio_context: PaymentMethod.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._name_ = zserio_reader.read_string()

        if zserio_reader.read_bool():
            self._icon_set_reference_ = zserio_context.icon_set_reference.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._icon_set_reference_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._name_)
        if self.is_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PaymentMethod.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._name_)

        if self.is_icon_set_reference_used():
            zserio_writer.write_bool(True)
            zserio_context.icon_set_reference.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._icon_set_reference_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._icon_set_reference_ = zserio.array.DeltaContext()

        @property
        def icon_set_reference(self):
            return self._icon_set_reference_
