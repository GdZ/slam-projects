# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Cuisine(zserio.Enum):
    OTHER = 0
    CUSTOM = 1
    AFGHAN = 2
    AFRICAN = 3
    AMERICAN = 4
    ARAB = 5
    ARGENTINIAN = 6
    ASIAN = 7
    AUSTRALIAN = 8
    BAIANA = 9
    BALKAN = 10
    BASQUE = 11
    BELARUSIAN = 12
    BOLIVIAN = 13
    BRAZILIAN = 14
    CANTONESE = 15
    CARIBBEAN = 16
    CHINESE = 17
    CROATIAN = 18
    CZECH = 19
    DANISH = 20
    FILIPINO = 21
    FRENCH = 22
    GAUCHO = 23
    GEORGIAN = 24
    GERMAN = 25
    GREEK = 26
    HAWAIIAN = 27
    HUNGARIAN = 28
    INDIAN = 29
    INDONESIAN = 30
    INTERNATIONAL = 31
    IRANIAN = 32
    ITALIAN = 33
    JAPANESE = 34
    JEWISH = 35
    KOREAN = 36
    LATIN_AMERICAN = 37
    LEBANESE = 38
    MALAYSIAN = 39
    MALAGASY = 40
    MEDITERRANEAN = 41
    MEXICAN = 42
    PAKISTANI = 43
    PERUVIAN = 44
    POLISH = 45
    PORTUGUESE = 46
    REGIONAL = 47
    RUSSIAN = 48
    SCOTTISH = 49
    SPANISH = 50
    THAI = 51
    TURKISH = 52
    VIETNAMESE = 53
    WESTERN = 54

    @classmethod
    def from_name(cls: typing.Type['Cuisine'], item_name: str) -> 'Cuisine':
        if item_name == 'OTHER':
            item = Cuisine.OTHER
        elif item_name == 'CUSTOM':
            item = Cuisine.CUSTOM
        elif item_name == 'AFGHAN':
            item = Cuisine.AFGHAN
        elif item_name == 'AFRICAN':
            item = Cuisine.AFRICAN
        elif item_name == 'AMERICAN':
            item = Cuisine.AMERICAN
        elif item_name == 'ARAB':
            item = Cuisine.ARAB
        elif item_name == 'ARGENTINIAN':
            item = Cuisine.ARGENTINIAN
        elif item_name == 'ASIAN':
            item = Cuisine.ASIAN
        elif item_name == 'AUSTRALIAN':
            item = Cuisine.AUSTRALIAN
        elif item_name == 'BAIANA':
            item = Cuisine.BAIANA
        elif item_name == 'BALKAN':
            item = Cuisine.BALKAN
        elif item_name == 'BASQUE':
            item = Cuisine.BASQUE
        elif item_name == 'BELARUSIAN':
            item = Cuisine.BELARUSIAN
        elif item_name == 'BOLIVIAN':
            item = Cuisine.BOLIVIAN
        elif item_name == 'BRAZILIAN':
            item = Cuisine.BRAZILIAN
        elif item_name == 'CANTONESE':
            item = Cuisine.CANTONESE
        elif item_name == 'CARIBBEAN':
            item = Cuisine.CARIBBEAN
        elif item_name == 'CHINESE':
            item = Cuisine.CHINESE
        elif item_name == 'CROATIAN':
            item = Cuisine.CROATIAN
        elif item_name == 'CZECH':
            item = Cuisine.CZECH
        elif item_name == 'DANISH':
            item = Cuisine.DANISH
        elif item_name == 'FILIPINO':
            item = Cuisine.FILIPINO
        elif item_name == 'FRENCH':
            item = Cuisine.FRENCH
        elif item_name == 'GAUCHO':
            item = Cuisine.GAUCHO
        elif item_name == 'GEORGIAN':
            item = Cuisine.GEORGIAN
        elif item_name == 'GERMAN':
            item = Cuisine.GERMAN
        elif item_name == 'GREEK':
            item = Cuisine.GREEK
        elif item_name == 'HAWAIIAN':
            item = Cuisine.HAWAIIAN
        elif item_name == 'HUNGARIAN':
            item = Cuisine.HUNGARIAN
        elif item_name == 'INDIAN':
            item = Cuisine.INDIAN
        elif item_name == 'INDONESIAN':
            item = Cuisine.INDONESIAN
        elif item_name == 'INTERNATIONAL':
            item = Cuisine.INTERNATIONAL
        elif item_name == 'IRANIAN':
            item = Cuisine.IRANIAN
        elif item_name == 'ITALIAN':
            item = Cuisine.ITALIAN
        elif item_name == 'JAPANESE':
            item = Cuisine.JAPANESE
        elif item_name == 'JEWISH':
            item = Cuisine.JEWISH
        elif item_name == 'KOREAN':
            item = Cuisine.KOREAN
        elif item_name == 'LATIN_AMERICAN':
            item = Cuisine.LATIN_AMERICAN
        elif item_name == 'LEBANESE':
            item = Cuisine.LEBANESE
        elif item_name == 'MALAYSIAN':
            item = Cuisine.MALAYSIAN
        elif item_name == 'MALAGASY':
            item = Cuisine.MALAGASY
        elif item_name == 'MEDITERRANEAN':
            item = Cuisine.MEDITERRANEAN
        elif item_name == 'MEXICAN':
            item = Cuisine.MEXICAN
        elif item_name == 'PAKISTANI':
            item = Cuisine.PAKISTANI
        elif item_name == 'PERUVIAN':
            item = Cuisine.PERUVIAN
        elif item_name == 'POLISH':
            item = Cuisine.POLISH
        elif item_name == 'PORTUGUESE':
            item = Cuisine.PORTUGUESE
        elif item_name == 'REGIONAL':
            item = Cuisine.REGIONAL
        elif item_name == 'RUSSIAN':
            item = Cuisine.RUSSIAN
        elif item_name == 'SCOTTISH':
            item = Cuisine.SCOTTISH
        elif item_name == 'SPANISH':
            item = Cuisine.SPANISH
        elif item_name == 'THAI':
            item = Cuisine.THAI
        elif item_name == 'TURKISH':
            item = Cuisine.TURKISH
        elif item_name == 'VIETNAMESE':
            item = Cuisine.VIETNAMESE
        elif item_name == 'WESTERN':
            item = Cuisine.WESTERN
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'Cuisine'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['Cuisine'], reader: zserio.BitStreamReader) -> 'Cuisine':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['Cuisine'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'Cuisine':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
