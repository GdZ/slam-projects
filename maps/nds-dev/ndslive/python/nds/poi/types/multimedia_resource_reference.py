# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class MultimediaResourceReference:
    def __init__(
            self,
            mime_type_: str = str(),
            uri_: str = str()) -> None:
        self._mime_type_ = mime_type_
        self._uri_ = uri_

    @classmethod
    def from_reader(
            cls: typing.Type['MultimediaResourceReference'],
            zserio_reader: zserio.BitStreamReader) -> 'MultimediaResourceReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MultimediaResourceReference):
            return ((self._mime_type_ == other._mime_type_) and
                    (self._uri_ == other._uri_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._mime_type_)
        result = zserio.hashcode.calc_hashcode_string(result, self._uri_)

        return result

    @property
    def mime_type(self) -> str:
        return self._mime_type_

    @mime_type.setter
    def mime_type(self, mime_type_: str) -> None:
        self._mime_type_ = mime_type_

    @property
    def uri(self) -> str:
        return self._uri_

    @uri.setter
    def uri(self, uri_: str) -> None:
        self._uri_ = uri_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._mime_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._uri_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._mime_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._uri_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._mime_type_ = zserio_reader.read_string()
        self._uri_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._mime_type_)
        zserio_writer.write_string(self._uri_)
