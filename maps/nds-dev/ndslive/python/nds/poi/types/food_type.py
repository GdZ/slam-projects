# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.poi.types.cuisine
import nds.poi.types.diet_availability

class FoodType:
    def __init__(
            self,
            cuisine_: typing.Union[nds.poi.types.cuisine.Cuisine, None] = None,
            custom_cuisine_: typing.Optional[str] = None,
            has_diet_availability_: bool = bool(),
            diet_availability_: typing.Union[nds.poi.types.diet_availability.DietAvailability, None] = None) -> None:
        self._cuisine_ = cuisine_
        self._custom_cuisine_ = custom_cuisine_
        self._has_diet_availability_ = has_diet_availability_
        self._diet_availability_ = diet_availability_

    @classmethod
    def from_reader(
            cls: typing.Type['FoodType'],
            zserio_reader: zserio.BitStreamReader) -> 'FoodType':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['FoodType'],
            zserio_context: FoodType.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'FoodType':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, FoodType):
            return ((self._cuisine_ == other._cuisine_) and
                    (not other.is_custom_cuisine_used() if not self.is_custom_cuisine_used() else (self._custom_cuisine_ == other._custom_cuisine_)) and
                    (self._has_diet_availability_ == other._has_diet_availability_) and
                    (self._diet_availability_ == other._diet_availability_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._cuisine_)
        if self.is_custom_cuisine_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._custom_cuisine_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_diet_availability_)
        result = zserio.hashcode.calc_hashcode_object(result, self._diet_availability_)

        return result

    @property
    def cuisine(self) -> typing.Union[nds.poi.types.cuisine.Cuisine, None]:
        return self._cuisine_

    @cuisine.setter
    def cuisine(self, cuisine_: typing.Union[nds.poi.types.cuisine.Cuisine, None]) -> None:
        self._cuisine_ = cuisine_

    @property
    def custom_cuisine(self) -> typing.Optional[str]:
        return self._custom_cuisine_

    @custom_cuisine.setter
    def custom_cuisine(self, custom_cuisine_: typing.Optional[str]) -> None:
        self._custom_cuisine_ = custom_cuisine_

    def is_custom_cuisine_used(self) -> bool:
        return self._cuisine_ == nds.poi.types.cuisine.Cuisine.CUSTOM

    def is_custom_cuisine_set(self) -> bool:
        return not self._custom_cuisine_ is None

    def reset_custom_cuisine(self) -> None:
        self._custom_cuisine_ = None

    @property
    def has_diet_availability(self) -> bool:
        return self._has_diet_availability_

    @has_diet_availability.setter
    def has_diet_availability(self, has_diet_availability_: bool) -> None:
        self._has_diet_availability_ = has_diet_availability_

    @property
    def diet_availability(self) -> typing.Union[nds.poi.types.diet_availability.DietAvailability, None]:
        return self._diet_availability_

    @diet_availability.setter
    def diet_availability(self, diet_availability_: typing.Union[nds.poi.types.diet_availability.DietAvailability, None]) -> None:
        self._diet_availability_ = diet_availability_

    def init_packing_context(self, zserio_context: FoodType.ZserioPackingContext) -> None:
        self._cuisine_.init_packing_context(zserio_context.cuisine)
        self._diet_availability_.init_packing_context(zserio_context.diet_availability)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._cuisine_.bitsizeof(end_bitposition)
        if self.is_custom_cuisine_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_cuisine_)
        end_bitposition += 1
        end_bitposition += self._diet_availability_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: FoodType.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._cuisine_.bitsizeof_packed(zserio_context.cuisine, end_bitposition)
        if self.is_custom_cuisine_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_cuisine_)
        end_bitposition += 1
        end_bitposition += self._diet_availability_.bitsizeof_packed(zserio_context.diet_availability, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._cuisine_.initialize_offsets(end_bitposition)
        if self.is_custom_cuisine_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_cuisine_)
        end_bitposition += 1
        end_bitposition = self._diet_availability_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: FoodType.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._cuisine_.initialize_offsets_packed(zserio_context.cuisine, end_bitposition)
        if self.is_custom_cuisine_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._custom_cuisine_)
        end_bitposition += 1
        end_bitposition = self._diet_availability_.initialize_offsets_packed(zserio_context.diet_availability, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._cuisine_ = nds.poi.types.cuisine.Cuisine.from_reader(zserio_reader)
        if self.is_custom_cuisine_used():
            self._custom_cuisine_ = zserio_reader.read_string()
        else:
            self._custom_cuisine_ = None
        self._has_diet_availability_ = zserio_reader.read_bool()
        self._diet_availability_ = nds.poi.types.diet_availability.DietAvailability.from_reader(zserio_reader)

    def read_packed(self, zserio_context: FoodType.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._cuisine_ = nds.poi.types.cuisine.Cuisine.from_reader_packed(zserio_context.cuisine, zserio_reader)

        if self.is_custom_cuisine_used():
            self._custom_cuisine_ = zserio_reader.read_string()
        else:
            self._custom_cuisine_ = None

        self._has_diet_availability_ = zserio_reader.read_bool()

        self._diet_availability_ = nds.poi.types.diet_availability.DietAvailability.from_reader_packed(zserio_context.diet_availability, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._cuisine_.write(zserio_writer)
        if self.is_custom_cuisine_used():
            zserio_writer.write_string(self._custom_cuisine_)
        zserio_writer.write_bool(self._has_diet_availability_)
        self._diet_availability_.write(zserio_writer)

    def write_packed(self, zserio_context: FoodType.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._cuisine_.write_packed(zserio_context.cuisine, zserio_writer)

        if self.is_custom_cuisine_used():
            zserio_writer.write_string(self._custom_cuisine_)

        zserio_writer.write_bool(self._has_diet_availability_)

        self._diet_availability_.write_packed(zserio_context.diet_availability, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._cuisine_ = zserio.array.DeltaContext()
            self._diet_availability_ = zserio.array.DeltaContext()

        @property
        def cuisine(self):
            return self._cuisine_

        @property
        def diet_availability(self):
            return self._diet_availability_
