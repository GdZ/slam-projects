# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.poi.types.ev_connector_type

class EvChargingAvailability:
    def __init__(
            self,
            num_connectors_: int = int(),
            connector_type_: typing.List[nds.poi.types.ev_connector_type.EvConnectorType] = None,
            chargers_available_: typing.List[int] = None,
            chargers_occupied_: typing.List[int] = None,
            chargers_reserved_: typing.List[int] = None,
            chargers_out_of_service_: typing.List[int] = None) -> None:
        self._num_connectors_ = num_connectors_
        self._connector_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connector_type()), connector_type_)
        self._chargers_available_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_available_)
        self._chargers_occupied_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_occupied_)
        self._chargers_reserved_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_reserved_)
        self._chargers_out_of_service_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_out_of_service_)

    @classmethod
    def from_reader(
            cls: typing.Type['EvChargingAvailability'],
            zserio_reader: zserio.BitStreamReader) -> 'EvChargingAvailability':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['EvChargingAvailability'],
            zserio_context: EvChargingAvailability.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'EvChargingAvailability':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EvChargingAvailability):
            return ((self._num_connectors_ == other._num_connectors_) and
                    (self._connector_type_ == other._connector_type_) and
                    (self._chargers_available_ == other._chargers_available_) and
                    (self._chargers_occupied_ == other._chargers_occupied_) and
                    (self._chargers_reserved_ == other._chargers_reserved_) and
                    (self._chargers_out_of_service_ == other._chargers_out_of_service_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_connectors_)
        result = zserio.hashcode.calc_hashcode_object(result, self._connector_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._chargers_available_)
        result = zserio.hashcode.calc_hashcode_object(result, self._chargers_occupied_)
        result = zserio.hashcode.calc_hashcode_object(result, self._chargers_reserved_)
        result = zserio.hashcode.calc_hashcode_object(result, self._chargers_out_of_service_)

        return result

    @property
    def num_connectors(self) -> int:
        return self._num_connectors_

    @num_connectors.setter
    def num_connectors(self, num_connectors_: int) -> None:
        self._num_connectors_ = num_connectors_

    @property
    def connector_type(self) -> typing.List[nds.poi.types.ev_connector_type.EvConnectorType]:
        return self._connector_type_.raw_array

    @connector_type.setter
    def connector_type(self, connector_type_: typing.List[nds.poi.types.ev_connector_type.EvConnectorType]) -> None:
        self._connector_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connector_type()), connector_type_)

    @property
    def chargers_available(self) -> typing.List[int]:
        return self._chargers_available_.raw_array

    @chargers_available.setter
    def chargers_available(self, chargers_available_: typing.List[int]) -> None:
        self._chargers_available_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_available_)

    @property
    def chargers_occupied(self) -> typing.List[int]:
        return self._chargers_occupied_.raw_array

    @chargers_occupied.setter
    def chargers_occupied(self, chargers_occupied_: typing.List[int]) -> None:
        self._chargers_occupied_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_occupied_)

    @property
    def chargers_reserved(self) -> typing.List[int]:
        return self._chargers_reserved_.raw_array

    @chargers_reserved.setter
    def chargers_reserved(self, chargers_reserved_: typing.List[int]) -> None:
        self._chargers_reserved_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_reserved_)

    @property
    def chargers_out_of_service(self) -> typing.List[int]:
        return self._chargers_out_of_service_.raw_array

    @chargers_out_of_service.setter
    def chargers_out_of_service(self, chargers_out_of_service_: typing.List[int]) -> None:
        self._chargers_out_of_service_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), chargers_out_of_service_)

    def init_packing_context(self, zserio_context: EvChargingAvailability.ZserioPackingContext) -> None:
        zserio_context.num_connectors.init(zserio.array.VarSizeArrayTraits(), self._num_connectors_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_connectors_)
        end_bitposition += self._connector_type_.bitsizeof(end_bitposition)
        end_bitposition += self._chargers_available_.bitsizeof(end_bitposition)
        end_bitposition += self._chargers_occupied_.bitsizeof(end_bitposition)
        end_bitposition += self._chargers_reserved_.bitsizeof(end_bitposition)
        end_bitposition += self._chargers_out_of_service_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: EvChargingAvailability.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_connectors.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_connectors_)
        end_bitposition += self._connector_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._chargers_available_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._chargers_occupied_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._chargers_reserved_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._chargers_out_of_service_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_connectors_)
        end_bitposition = self._connector_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._chargers_available_.initialize_offsets(end_bitposition)
        end_bitposition = self._chargers_occupied_.initialize_offsets(end_bitposition)
        end_bitposition = self._chargers_reserved_.initialize_offsets(end_bitposition)
        end_bitposition = self._chargers_out_of_service_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: EvChargingAvailability.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_connectors.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_connectors_)
        end_bitposition = self._connector_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._chargers_available_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._chargers_occupied_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._chargers_reserved_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._chargers_out_of_service_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_connectors_ = zserio_reader.read_varsize()
        self._connector_type_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connector_type()), zserio_reader, self._num_connectors_)
        self._chargers_available_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)
        self._chargers_occupied_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)
        self._chargers_reserved_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)
        self._chargers_out_of_service_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

    def read_packed(self, zserio_context: EvChargingAvailability.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_connectors_ = zserio_context.num_connectors.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._connector_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_connector_type()), zserio_reader, self._num_connectors_)

        self._chargers_available_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

        self._chargers_occupied_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

        self._chargers_reserved_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

        self._chargers_out_of_service_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_connectors_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_connectors_)

        # check array length
        if len(self._connector_type_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.connectorType: "
                                                f"{len(self._connector_type_)} != {self._num_connectors_}!")
        self._connector_type_.write(zserio_writer)

        # check array length
        if len(self._chargers_available_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersAvailable: "
                                                f"{len(self._chargers_available_)} != {self._num_connectors_}!")
        self._chargers_available_.write(zserio_writer)

        # check array length
        if len(self._chargers_occupied_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersOccupied: "
                                                f"{len(self._chargers_occupied_)} != {self._num_connectors_}!")
        self._chargers_occupied_.write(zserio_writer)

        # check array length
        if len(self._chargers_reserved_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersReserved: "
                                                f"{len(self._chargers_reserved_)} != {self._num_connectors_}!")
        self._chargers_reserved_.write(zserio_writer)

        # check array length
        if len(self._chargers_out_of_service_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersOutOfService: "
                                                f"{len(self._chargers_out_of_service_)} != {self._num_connectors_}!")
        self._chargers_out_of_service_.write(zserio_writer)

    def write_packed(self, zserio_context: EvChargingAvailability.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_connectors.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_connectors_)

        # check array length
        if len(self._connector_type_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.connectorType: "
                                                f"{len(self._connector_type_)} != {self._num_connectors_}!")
        self._connector_type_.write_packed(zserio_writer)

        # check array length
        if len(self._chargers_available_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersAvailable: "
                                                f"{len(self._chargers_available_)} != {self._num_connectors_}!")
        self._chargers_available_.write_packed(zserio_writer)

        # check array length
        if len(self._chargers_occupied_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersOccupied: "
                                                f"{len(self._chargers_occupied_)} != {self._num_connectors_}!")
        self._chargers_occupied_.write_packed(zserio_writer)

        # check array length
        if len(self._chargers_reserved_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersReserved: "
                                                f"{len(self._chargers_reserved_)} != {self._num_connectors_}!")
        self._chargers_reserved_.write_packed(zserio_writer)

        # check array length
        if len(self._chargers_out_of_service_) != (self._num_connectors_):
            raise zserio.PythonRuntimeException("Wrong array length for field EvChargingAvailability.chargersOutOfService: "
                                                f"{len(self._chargers_out_of_service_)} != {self._num_connectors_}!")
        self._chargers_out_of_service_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_connectors_ = zserio.array.DeltaContext()

        @property
        def num_connectors(self):
            return self._num_connectors_

    class _ZserioElementFactory_connector_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.ev_connector_type.EvConnectorType:
            del zserio_index
            return nds.poi.types.ev_connector_type.EvConnectorType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.poi.types.ev_connector_type.EvConnectorType:
            del zserio_index
            return nds.poi.types.ev_connector_type.EvConnectorType.from_reader_packed(zserio_context, zserio_reader)
