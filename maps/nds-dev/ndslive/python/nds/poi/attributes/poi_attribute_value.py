# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.global_source_id
import nds.core.vehicle.energy_type
import nds.poi.attributes.poi_attribute_type
import nds.poi.types.accepted_payment_methods
import nds.poi.types.access_point_details
import nds.poi.types.access_point_type
import nds.poi.types.accessibility_aids
import nds.poi.types.ad_blue_availability
import nds.poi.types.airport_entrance_type
import nds.poi.types.airport_military
import nds.poi.types.airport_service_availability
import nds.poi.types.availability_url
import nds.poi.types.available_sportive_activities
import nds.poi.types.car_dealer_type
import nds.poi.types.departure_arrival_service
import nds.poi.types.ev_charging_availability
import nds.poi.types.ev_charging_station_details
import nds.poi.types.ev_free_charging
import nds.poi.types.ev_free_parking
import nds.poi.types.floor_number
import nds.poi.types.food_type
import nds.poi.types.hydrogen_pressure_availability
import nds.poi.types.in_vicinity
import nds.poi.types.logical_access_point_type
import nds.poi.types.major_importance
import nds.poi.types.multimedia_resource_reference
import nds.poi.types.national_importance
import nds.poi.types.num_free_parking_spots
import nds.poi.types.number_of_rooms_en_suite
import nds.poi.types.open24_hrs
import nds.poi.types.opening_hrs
import nds.poi.types.park_and_ride_facility
import nds.poi.types.parking_facilities_size
import nds.poi.types.parking_facilities_size_class
import nds.poi.types.place_of_worship_type
import nds.poi.types.poi_long_description
import nds.poi.types.poi_short_description
import nds.poi.types.price_range
import nds.poi.types.private_access
import nds.poi.types.relevance_radius
import nds.poi.types.rest_area_service_availability
import nds.poi.types.restaurant_facilities_available
import nds.poi.types.service_fee
import nds.poi.types.star_rating
import nds.poi.types.transit_type

class PoiAttributeValue:
    def __init__(
            self,
            type_: nds.poi.attributes.poi_attribute_type.PoiAttributeType,
            *,
            open24_hrs_: typing.Union[nds.poi.types.open24_hrs.Open24Hrs, None] = None,
            accepted_payment_methods_: typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None] = None,
            access_point_type_: typing.Union[nds.poi.types.access_point_type.AccessPointType, None] = None,
            airport_code_: typing.Union[str, None] = None,
            brand_name_: typing.Union[str, None] = None,
            ev_charging_station_details_: typing.Union[nds.poi.types.ev_charging_station_details.EvChargingStationDetails, None] = None,
            accepted_charging_payment_: typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None] = None,
            ev_energy_provider_: typing.Union[str, None] = None,
            ev_free_charging_: typing.Union[nds.poi.types.ev_free_charging.EvFreeCharging, None] = None,
            ev_free_parking_: typing.Union[nds.poi.types.ev_free_parking.EvFreeParking, None] = None,
            ev_charging_availability_: typing.Union[nds.poi.types.ev_charging_availability.EvChargingAvailability, None] = None,
            opening_hrs_: typing.Union[nds.poi.types.opening_hrs.OpeningHrs, None] = None,
            email_: typing.Union[str, None] = None,
            phone_number_: typing.Union[str, None] = None,
            stars_: typing.Union[nds.poi.types.star_rating.StarRating, None] = None,
            fuel_type_: typing.Union[nds.core.vehicle.energy_type.EnergyType, None] = None,
            logical_access_point_type_: typing.Union[nds.poi.types.logical_access_point_type.LogicalAccessPointType, None] = None,
            website_: typing.Union[str, None] = None,
            in_vicinity_: typing.Union[nds.poi.types.in_vicinity.InVicinity, None] = None,
            airport_entrance_type_: typing.Union[nds.poi.types.airport_entrance_type.AirportEntranceType, None] = None,
            food_type_: typing.Union[nds.poi.types.food_type.FoodType, None] = None,
            multimedia_resource_reference_: typing.Union[nds.poi.types.multimedia_resource_reference.MultimediaResourceReference, None] = None,
            private_access_: typing.Union[nds.poi.types.private_access.PrivateAccess, None] = None,
            national_importance_: typing.Union[nds.poi.types.national_importance.NationalImportance, None] = None,
            parking_facilities_size_class_: typing.Union[nds.poi.types.parking_facilities_size_class.ParkingFacilitiesSizeClass, None] = None,
            parking_facilities_size_: typing.Union[nds.poi.types.parking_facilities_size.ParkingFacilitiesSize, None] = None,
            num_free_parking_spots_: typing.Union[nds.poi.types.num_free_parking_spots.NumFreeParkingSpots, None] = None,
            rest_area_service_availability_: typing.Union[nds.poi.types.rest_area_service_availability.RestAreaServiceAvailability, None] = None,
            accessibility_aids_: typing.Union[nds.poi.types.accessibility_aids.AccessibilityAids, None] = None,
            restaurant_facilities_available_: typing.Union[nds.poi.types.restaurant_facilities_available.RestaurantFacilitiesAvailable, None] = None,
            departure_arrival_service_: typing.Union[nds.poi.types.departure_arrival_service.DepartureArrivalService, None] = None,
            price_range_: typing.Union[nds.poi.types.price_range.PriceRange, None] = None,
            short_description_: typing.Union[nds.poi.types.poi_short_description.PoiShortDescription, None] = None,
            poi_long_description_: typing.Union[nds.poi.types.poi_long_description.PoiLongDescription, None] = None,
            available_sportive_activities_: typing.Union[nds.poi.types.available_sportive_activities.AvailableSportiveActivities, None] = None,
            floor_number_: typing.Union[nds.poi.types.floor_number.FloorNumber, None] = None,
            number_of_rooms_en_suite_: typing.Union[nds.poi.types.number_of_rooms_en_suite.NumberOfRoomsEnSuite, None] = None,
            place_of_worship_type_: typing.Union[nds.poi.types.place_of_worship_type.PlaceOfWorshipType, None] = None,
            service_fee_: typing.Union[nds.poi.types.service_fee.ServiceFee, None] = None,
            car_dealer_type_: typing.Union[nds.poi.types.car_dealer_type.CarDealerType, None] = None,
            major_importance_: typing.Union[nds.poi.types.major_importance.MajorImportance, None] = None,
            airport_service_availability_: typing.Union[nds.poi.types.airport_service_availability.AirportServiceAvailability, None] = None,
            airport_military_: typing.Union[nds.poi.types.airport_military.AirportMilitary, None] = None,
            transit_type_: typing.Union[nds.poi.types.transit_type.TransitType, None] = None,
            access_point_details_: typing.Union[nds.poi.types.access_point_details.AccessPointDetails, None] = None,
            park_and_ride_facility_: typing.Union[nds.poi.types.park_and_ride_facility.ParkAndRideFacility, None] = None,
            ad_blue_availability_: typing.Union[nds.poi.types.ad_blue_availability.AdBlueAvailability, None] = None,
            hydrogen_pressure_availability_: typing.Union[nds.poi.types.hydrogen_pressure_availability.HydrogenPressureAvailability, None] = None,
            url_: typing.Union[nds.poi.types.availability_url.AvailabilityUrl, None] = None,
            radius_: typing.Union[nds.poi.types.relevance_radius.RelevanceRadius, None] = None,
            global_source_id_: typing.Union[nds.core.types.global_source_id.GlobalSourceId, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if open24_hrs_ is not None:
            self._choice = open24_hrs_
        if accepted_payment_methods_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = accepted_payment_methods_
        if access_point_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = access_point_type_
        if airport_code_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = airport_code_
        if brand_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = brand_name_
        if ev_charging_station_details_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ev_charging_station_details_
        if accepted_charging_payment_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = accepted_charging_payment_
        if ev_energy_provider_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ev_energy_provider_
        if ev_free_charging_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ev_free_charging_
        if ev_free_parking_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ev_free_parking_
        if ev_charging_availability_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ev_charging_availability_
        if opening_hrs_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = opening_hrs_
        if email_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = email_
        if phone_number_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = phone_number_
        if stars_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = stars_
        if fuel_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = fuel_type_
        if logical_access_point_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = logical_access_point_type_
        if website_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = website_
        if in_vicinity_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = in_vicinity_
        if airport_entrance_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = airport_entrance_type_
        if food_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = food_type_
        if multimedia_resource_reference_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = multimedia_resource_reference_
        if private_access_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = private_access_
        if national_importance_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = national_importance_
        if parking_facilities_size_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = parking_facilities_size_class_
        if parking_facilities_size_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = parking_facilities_size_
        if num_free_parking_spots_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = num_free_parking_spots_
        if rest_area_service_availability_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = rest_area_service_availability_
        if accessibility_aids_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = accessibility_aids_
        if restaurant_facilities_available_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = restaurant_facilities_available_
        if departure_arrival_service_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = departure_arrival_service_
        if price_range_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = price_range_
        if short_description_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = short_description_
        if poi_long_description_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = poi_long_description_
        if available_sportive_activities_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = available_sportive_activities_
        if floor_number_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = floor_number_
        if number_of_rooms_en_suite_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = number_of_rooms_en_suite_
        if place_of_worship_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = place_of_worship_type_
        if service_fee_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = service_fee_
        if car_dealer_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = car_dealer_type_
        if major_importance_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = major_importance_
        if airport_service_availability_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = airport_service_availability_
        if airport_military_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = airport_military_
        if transit_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = transit_type_
        if access_point_details_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = access_point_details_
        if park_and_ride_facility_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = park_and_ride_facility_
        if ad_blue_availability_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = ad_blue_availability_
        if hydrogen_pressure_availability_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = hydrogen_pressure_availability_
        if url_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = url_
        if radius_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = radius_
        if global_source_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PoiAttributeValue is ambiguous!")
            self._choice = global_source_id_

    @classmethod
    def from_reader(
            cls: typing.Type['PoiAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.poi.attributes.poi_attribute_type.PoiAttributeType) -> 'PoiAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoiAttributeValue'],
            zserio_context: PoiAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.poi.attributes.poi_attribute_type.PoiAttributeType) -> 'PoiAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoiAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.poi.attributes.poi_attribute_type.PoiAttributeType:
        return self._type_

    @property
    def open24_hrs(self) -> typing.Union[nds.poi.types.open24_hrs.Open24Hrs, None]:
        return self._choice

    @open24_hrs.setter
    def open24_hrs(self, open24_hrs_: typing.Union[nds.poi.types.open24_hrs.Open24Hrs, None]) -> None:
        self._choice = open24_hrs_

    @property
    def accepted_payment_methods(self) -> typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None]:
        return self._choice

    @accepted_payment_methods.setter
    def accepted_payment_methods(self, accepted_payment_methods_: typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None]) -> None:
        self._choice = accepted_payment_methods_

    @property
    def access_point_type(self) -> typing.Union[nds.poi.types.access_point_type.AccessPointType, None]:
        return self._choice

    @access_point_type.setter
    def access_point_type(self, access_point_type_: typing.Union[nds.poi.types.access_point_type.AccessPointType, None]) -> None:
        self._choice = access_point_type_

    @property
    def airport_code(self) -> str:
        return self._choice

    @airport_code.setter
    def airport_code(self, airport_code_: str) -> None:
        self._choice = airport_code_

    @property
    def brand_name(self) -> str:
        return self._choice

    @brand_name.setter
    def brand_name(self, brand_name_: str) -> None:
        self._choice = brand_name_

    @property
    def ev_charging_station_details(self) -> typing.Union[nds.poi.types.ev_charging_station_details.EvChargingStationDetails, None]:
        return self._choice

    @ev_charging_station_details.setter
    def ev_charging_station_details(self, ev_charging_station_details_: typing.Union[nds.poi.types.ev_charging_station_details.EvChargingStationDetails, None]) -> None:
        self._choice = ev_charging_station_details_

    @property
    def accepted_charging_payment(self) -> typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None]:
        return self._choice

    @accepted_charging_payment.setter
    def accepted_charging_payment(self, accepted_charging_payment_: typing.Union[nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods, None]) -> None:
        self._choice = accepted_charging_payment_

    @property
    def ev_energy_provider(self) -> str:
        return self._choice

    @ev_energy_provider.setter
    def ev_energy_provider(self, ev_energy_provider_: str) -> None:
        self._choice = ev_energy_provider_

    @property
    def ev_free_charging(self) -> typing.Union[nds.poi.types.ev_free_charging.EvFreeCharging, None]:
        return self._choice

    @ev_free_charging.setter
    def ev_free_charging(self, ev_free_charging_: typing.Union[nds.poi.types.ev_free_charging.EvFreeCharging, None]) -> None:
        self._choice = ev_free_charging_

    @property
    def ev_free_parking(self) -> typing.Union[nds.poi.types.ev_free_parking.EvFreeParking, None]:
        return self._choice

    @ev_free_parking.setter
    def ev_free_parking(self, ev_free_parking_: typing.Union[nds.poi.types.ev_free_parking.EvFreeParking, None]) -> None:
        self._choice = ev_free_parking_

    @property
    def ev_charging_availability(self) -> typing.Union[nds.poi.types.ev_charging_availability.EvChargingAvailability, None]:
        return self._choice

    @ev_charging_availability.setter
    def ev_charging_availability(self, ev_charging_availability_: typing.Union[nds.poi.types.ev_charging_availability.EvChargingAvailability, None]) -> None:
        self._choice = ev_charging_availability_

    @property
    def opening_hrs(self) -> typing.Union[nds.poi.types.opening_hrs.OpeningHrs, None]:
        return self._choice

    @opening_hrs.setter
    def opening_hrs(self, opening_hrs_: typing.Union[nds.poi.types.opening_hrs.OpeningHrs, None]) -> None:
        self._choice = opening_hrs_

    @property
    def email(self) -> str:
        return self._choice

    @email.setter
    def email(self, email_: str) -> None:
        self._choice = email_

    @property
    def phone_number(self) -> str:
        return self._choice

    @phone_number.setter
    def phone_number(self, phone_number_: str) -> None:
        self._choice = phone_number_

    @property
    def stars(self) -> typing.Union[nds.poi.types.star_rating.StarRating, None]:
        return self._choice

    @stars.setter
    def stars(self, stars_: typing.Union[nds.poi.types.star_rating.StarRating, None]) -> None:
        self._choice = stars_

    @property
    def fuel_type(self) -> typing.Union[nds.core.vehicle.energy_type.EnergyType, None]:
        return self._choice

    @fuel_type.setter
    def fuel_type(self, fuel_type_: typing.Union[nds.core.vehicle.energy_type.EnergyType, None]) -> None:
        self._choice = fuel_type_

    @property
    def logical_access_point_type(self) -> typing.Union[nds.poi.types.logical_access_point_type.LogicalAccessPointType, None]:
        return self._choice

    @logical_access_point_type.setter
    def logical_access_point_type(self, logical_access_point_type_: typing.Union[nds.poi.types.logical_access_point_type.LogicalAccessPointType, None]) -> None:
        self._choice = logical_access_point_type_

    @property
    def website(self) -> str:
        return self._choice

    @website.setter
    def website(self, website_: str) -> None:
        self._choice = website_

    @property
    def in_vicinity(self) -> typing.Union[nds.poi.types.in_vicinity.InVicinity, None]:
        return self._choice

    @in_vicinity.setter
    def in_vicinity(self, in_vicinity_: typing.Union[nds.poi.types.in_vicinity.InVicinity, None]) -> None:
        self._choice = in_vicinity_

    @property
    def airport_entrance_type(self) -> typing.Union[nds.poi.types.airport_entrance_type.AirportEntranceType, None]:
        return self._choice

    @airport_entrance_type.setter
    def airport_entrance_type(self, airport_entrance_type_: typing.Union[nds.poi.types.airport_entrance_type.AirportEntranceType, None]) -> None:
        self._choice = airport_entrance_type_

    @property
    def food_type(self) -> typing.Union[nds.poi.types.food_type.FoodType, None]:
        return self._choice

    @food_type.setter
    def food_type(self, food_type_: typing.Union[nds.poi.types.food_type.FoodType, None]) -> None:
        self._choice = food_type_

    @property
    def multimedia_resource_reference(self) -> typing.Union[nds.poi.types.multimedia_resource_reference.MultimediaResourceReference, None]:
        return self._choice

    @multimedia_resource_reference.setter
    def multimedia_resource_reference(self, multimedia_resource_reference_: typing.Union[nds.poi.types.multimedia_resource_reference.MultimediaResourceReference, None]) -> None:
        self._choice = multimedia_resource_reference_

    @property
    def private_access(self) -> typing.Union[nds.poi.types.private_access.PrivateAccess, None]:
        return self._choice

    @private_access.setter
    def private_access(self, private_access_: typing.Union[nds.poi.types.private_access.PrivateAccess, None]) -> None:
        self._choice = private_access_

    @property
    def national_importance(self) -> typing.Union[nds.poi.types.national_importance.NationalImportance, None]:
        return self._choice

    @national_importance.setter
    def national_importance(self, national_importance_: typing.Union[nds.poi.types.national_importance.NationalImportance, None]) -> None:
        self._choice = national_importance_

    @property
    def parking_facilities_size_class(self) -> typing.Union[nds.poi.types.parking_facilities_size_class.ParkingFacilitiesSizeClass, None]:
        return self._choice

    @parking_facilities_size_class.setter
    def parking_facilities_size_class(self, parking_facilities_size_class_: typing.Union[nds.poi.types.parking_facilities_size_class.ParkingFacilitiesSizeClass, None]) -> None:
        self._choice = parking_facilities_size_class_

    @property
    def parking_facilities_size(self) -> nds.poi.types.parking_facilities_size.ParkingFacilitiesSize:
        return self._choice

    @parking_facilities_size.setter
    def parking_facilities_size(self, parking_facilities_size_: nds.poi.types.parking_facilities_size.ParkingFacilitiesSize) -> None:
        self._choice = parking_facilities_size_

    @property
    def num_free_parking_spots(self) -> nds.poi.types.num_free_parking_spots.NumFreeParkingSpots:
        return self._choice

    @num_free_parking_spots.setter
    def num_free_parking_spots(self, num_free_parking_spots_: nds.poi.types.num_free_parking_spots.NumFreeParkingSpots) -> None:
        self._choice = num_free_parking_spots_

    @property
    def rest_area_service_availability(self) -> typing.Union[nds.poi.types.rest_area_service_availability.RestAreaServiceAvailability, None]:
        return self._choice

    @rest_area_service_availability.setter
    def rest_area_service_availability(self, rest_area_service_availability_: typing.Union[nds.poi.types.rest_area_service_availability.RestAreaServiceAvailability, None]) -> None:
        self._choice = rest_area_service_availability_

    @property
    def accessibility_aids(self) -> typing.Union[nds.poi.types.accessibility_aids.AccessibilityAids, None]:
        return self._choice

    @accessibility_aids.setter
    def accessibility_aids(self, accessibility_aids_: typing.Union[nds.poi.types.accessibility_aids.AccessibilityAids, None]) -> None:
        self._choice = accessibility_aids_

    @property
    def restaurant_facilities_available(self) -> typing.Union[nds.poi.types.restaurant_facilities_available.RestaurantFacilitiesAvailable, None]:
        return self._choice

    @restaurant_facilities_available.setter
    def restaurant_facilities_available(self, restaurant_facilities_available_: typing.Union[nds.poi.types.restaurant_facilities_available.RestaurantFacilitiesAvailable, None]) -> None:
        self._choice = restaurant_facilities_available_

    @property
    def departure_arrival_service(self) -> typing.Union[nds.poi.types.departure_arrival_service.DepartureArrivalService, None]:
        return self._choice

    @departure_arrival_service.setter
    def departure_arrival_service(self, departure_arrival_service_: typing.Union[nds.poi.types.departure_arrival_service.DepartureArrivalService, None]) -> None:
        self._choice = departure_arrival_service_

    @property
    def price_range(self) -> typing.Union[nds.poi.types.price_range.PriceRange, None]:
        return self._choice

    @price_range.setter
    def price_range(self, price_range_: typing.Union[nds.poi.types.price_range.PriceRange, None]) -> None:
        self._choice = price_range_

    @property
    def short_description(self) -> nds.poi.types.poi_short_description.PoiShortDescription:
        return self._choice

    @short_description.setter
    def short_description(self, short_description_: nds.poi.types.poi_short_description.PoiShortDescription) -> None:
        self._choice = short_description_

    @property
    def poi_long_description(self) -> nds.poi.types.poi_long_description.PoiLongDescription:
        return self._choice

    @poi_long_description.setter
    def poi_long_description(self, poi_long_description_: nds.poi.types.poi_long_description.PoiLongDescription) -> None:
        self._choice = poi_long_description_

    @property
    def available_sportive_activities(self) -> typing.Union[nds.poi.types.available_sportive_activities.AvailableSportiveActivities, None]:
        return self._choice

    @available_sportive_activities.setter
    def available_sportive_activities(self, available_sportive_activities_: typing.Union[nds.poi.types.available_sportive_activities.AvailableSportiveActivities, None]) -> None:
        self._choice = available_sportive_activities_

    @property
    def floor_number(self) -> nds.poi.types.floor_number.FloorNumber:
        return self._choice

    @floor_number.setter
    def floor_number(self, floor_number_: nds.poi.types.floor_number.FloorNumber) -> None:
        self._choice = floor_number_

    @property
    def number_of_rooms_en_suite(self) -> nds.poi.types.number_of_rooms_en_suite.NumberOfRoomsEnSuite:
        return self._choice

    @number_of_rooms_en_suite.setter
    def number_of_rooms_en_suite(self, number_of_rooms_en_suite_: nds.poi.types.number_of_rooms_en_suite.NumberOfRoomsEnSuite) -> None:
        self._choice = number_of_rooms_en_suite_

    @property
    def place_of_worship_type(self) -> typing.Union[nds.poi.types.place_of_worship_type.PlaceOfWorshipType, None]:
        return self._choice

    @place_of_worship_type.setter
    def place_of_worship_type(self, place_of_worship_type_: typing.Union[nds.poi.types.place_of_worship_type.PlaceOfWorshipType, None]) -> None:
        self._choice = place_of_worship_type_

    @property
    def service_fee(self) -> typing.Union[nds.poi.types.service_fee.ServiceFee, None]:
        return self._choice

    @service_fee.setter
    def service_fee(self, service_fee_: typing.Union[nds.poi.types.service_fee.ServiceFee, None]) -> None:
        self._choice = service_fee_

    @property
    def car_dealer_type(self) -> typing.Union[nds.poi.types.car_dealer_type.CarDealerType, None]:
        return self._choice

    @car_dealer_type.setter
    def car_dealer_type(self, car_dealer_type_: typing.Union[nds.poi.types.car_dealer_type.CarDealerType, None]) -> None:
        self._choice = car_dealer_type_

    @property
    def major_importance(self) -> typing.Union[nds.poi.types.major_importance.MajorImportance, None]:
        return self._choice

    @major_importance.setter
    def major_importance(self, major_importance_: typing.Union[nds.poi.types.major_importance.MajorImportance, None]) -> None:
        self._choice = major_importance_

    @property
    def airport_service_availability(self) -> typing.Union[nds.poi.types.airport_service_availability.AirportServiceAvailability, None]:
        return self._choice

    @airport_service_availability.setter
    def airport_service_availability(self, airport_service_availability_: typing.Union[nds.poi.types.airport_service_availability.AirportServiceAvailability, None]) -> None:
        self._choice = airport_service_availability_

    @property
    def airport_military(self) -> typing.Union[nds.poi.types.airport_military.AirportMilitary, None]:
        return self._choice

    @airport_military.setter
    def airport_military(self, airport_military_: typing.Union[nds.poi.types.airport_military.AirportMilitary, None]) -> None:
        self._choice = airport_military_

    @property
    def transit_type(self) -> typing.Union[nds.poi.types.transit_type.TransitType, None]:
        return self._choice

    @transit_type.setter
    def transit_type(self, transit_type_: typing.Union[nds.poi.types.transit_type.TransitType, None]) -> None:
        self._choice = transit_type_

    @property
    def access_point_details(self) -> typing.Union[nds.poi.types.access_point_details.AccessPointDetails, None]:
        return self._choice

    @access_point_details.setter
    def access_point_details(self, access_point_details_: typing.Union[nds.poi.types.access_point_details.AccessPointDetails, None]) -> None:
        self._choice = access_point_details_

    @property
    def park_and_ride_facility(self) -> typing.Union[nds.poi.types.park_and_ride_facility.ParkAndRideFacility, None]:
        return self._choice

    @park_and_ride_facility.setter
    def park_and_ride_facility(self, park_and_ride_facility_: typing.Union[nds.poi.types.park_and_ride_facility.ParkAndRideFacility, None]) -> None:
        self._choice = park_and_ride_facility_

    @property
    def ad_blue_availability(self) -> typing.Union[nds.poi.types.ad_blue_availability.AdBlueAvailability, None]:
        return self._choice

    @ad_blue_availability.setter
    def ad_blue_availability(self, ad_blue_availability_: typing.Union[nds.poi.types.ad_blue_availability.AdBlueAvailability, None]) -> None:
        self._choice = ad_blue_availability_

    @property
    def hydrogen_pressure_availability(self) -> typing.Union[nds.poi.types.hydrogen_pressure_availability.HydrogenPressureAvailability, None]:
        return self._choice

    @hydrogen_pressure_availability.setter
    def hydrogen_pressure_availability(self, hydrogen_pressure_availability_: typing.Union[nds.poi.types.hydrogen_pressure_availability.HydrogenPressureAvailability, None]) -> None:
        self._choice = hydrogen_pressure_availability_

    @property
    def url(self) -> nds.poi.types.availability_url.AvailabilityUrl:
        return self._choice

    @url.setter
    def url(self, url_: nds.poi.types.availability_url.AvailabilityUrl) -> None:
        self._choice = url_

    @property
    def radius(self) -> nds.poi.types.relevance_radius.RelevanceRadius:
        return self._choice

    @radius.setter
    def radius(self, radius_: nds.poi.types.relevance_radius.RelevanceRadius) -> None:
        self._choice = radius_

    @property
    def global_source_id(self) -> nds.core.types.global_source_id.GlobalSourceId:
        return self._choice

    @global_source_id.setter
    def global_source_id(self, global_source_id_: nds.core.types.global_source_id.GlobalSourceId) -> None:
        self._choice = global_source_id_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            return self.CHOICE_OPEN24_HRS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            return self.CHOICE_ACCEPTED_PAYMENT_METHODS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            return self.CHOICE_ACCESS_POINT_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            return self.CHOICE_AIRPORT_CODE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            return self.CHOICE_BRAND_NAME
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            return self.CHOICE_EV_CHARGING_STATION_DETAILS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            return self.CHOICE_ACCEPTED_CHARGING_PAYMENT
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            return self.CHOICE_EV_ENERGY_PROVIDER
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            return self.CHOICE_EV_FREE_CHARGING
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            return self.CHOICE_EV_FREE_PARKING
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            return self.CHOICE_EV_CHARGING_AVAILABILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            return self.CHOICE_OPENING_HRS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            return self.CHOICE_EMAIL
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            return self.CHOICE_PHONE_NUMBER
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            return self.CHOICE_STARS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            return self.CHOICE_FUEL_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            return self.CHOICE_LOGICAL_ACCESS_POINT_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            return self.CHOICE_WEBSITE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            return self.CHOICE_IN_VICINITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            return self.CHOICE_AIRPORT_ENTRANCE_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            return self.CHOICE_FOOD_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            return self.CHOICE_MULTIMEDIA_RESOURCE_REFERENCE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            return self.CHOICE_PRIVATE_ACCESS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            return self.CHOICE_NATIONAL_IMPORTANCE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            return self.CHOICE_PARKING_FACILITIES_SIZE_CLASS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            return self.CHOICE_PARKING_FACILITIES_SIZE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            return self.CHOICE_NUM_FREE_PARKING_SPOTS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            return self.CHOICE_REST_AREA_SERVICE_AVAILABILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            return self.CHOICE_ACCESSIBILITY_AIDS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            return self.CHOICE_RESTAURANT_FACILITIES_AVAILABLE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            return self.CHOICE_DEPARTURE_ARRIVAL_SERVICE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            return self.CHOICE_PRICE_RANGE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            return self.CHOICE_SHORT_DESCRIPTION
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            return self.CHOICE_POI_LONG_DESCRIPTION
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            return self.CHOICE_AVAILABLE_SPORTIVE_ACTIVITIES
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            return self.CHOICE_FLOOR_NUMBER
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            return self.CHOICE_NUMBER_OF_ROOMS_EN_SUITE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            return self.CHOICE_PLACE_OF_WORSHIP_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            return self.CHOICE_SERVICE_FEE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            return self.CHOICE_CAR_DEALER_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            return self.CHOICE_MAJOR_IMPORTANCE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            return self.CHOICE_AIRPORT_SERVICE_AVAILABILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            return self.CHOICE_AIRPORT_MILITARY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            return self.CHOICE_TRANSIT_TYPE
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            return self.CHOICE_ACCESS_POINT_DETAILS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            return self.CHOICE_PARK_AND_RIDE_FACILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            return self.CHOICE_AD_BLUE_AVAILABILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            return self.CHOICE_HYDROGEN_PRESSURE_AVAILABILITY
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            return self.CHOICE_URL
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            return self.CHOICE_RADIUS
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            return self.CHOICE_GLOBAL_SOURCE_ID
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PoiAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            self._choice.init_packing_context(zserio_context.accepted_payment_methods)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            self._choice.init_packing_context(zserio_context.access_point_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            self._choice.init_packing_context(zserio_context.ev_charging_station_details)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            self._choice.init_packing_context(zserio_context.accepted_charging_payment)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            self._choice.init_packing_context(zserio_context.ev_charging_availability)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            self._choice.init_packing_context(zserio_context.stars)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            self._choice.init_packing_context(zserio_context.fuel_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            self._choice.init_packing_context(zserio_context.logical_access_point_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            self._choice.init_packing_context(zserio_context.airport_entrance_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            self._choice.init_packing_context(zserio_context.food_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            self._choice.init_packing_context(zserio_context.parking_facilities_size_class)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            zserio_context.parking_facilities_size.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            zserio_context.num_free_parking_spots.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            self._choice.init_packing_context(zserio_context.rest_area_service_availability)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            self._choice.init_packing_context(zserio_context.accessibility_aids)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            self._choice.init_packing_context(zserio_context.departure_arrival_service)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            self._choice.init_packing_context(zserio_context.price_range)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            self._choice.init_packing_context(zserio_context.available_sportive_activities)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            zserio_context.floor_number.init(zserio.array.VarInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            zserio_context.number_of_rooms_en_suite.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            self._choice.init_packing_context(zserio_context.place_of_worship_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            self._choice.init_packing_context(zserio_context.service_fee)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            self._choice.init_packing_context(zserio_context.car_dealer_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            self._choice.init_packing_context(zserio_context.airport_service_availability)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            self._choice.init_packing_context(zserio_context.transit_type)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            self._choice.init_packing_context(zserio_context.access_point_details)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            self._choice.init_packing_context(zserio_context.ad_blue_availability)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            self._choice.init_packing_context(zserio_context.hydrogen_pressure_availability)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            pass
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            zserio_context.radius.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_varint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            end_bitposition += 8
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoiAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.accepted_payment_methods, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.access_point_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.ev_charging_station_details, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.accepted_charging_payment, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.ev_charging_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.stars, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.fuel_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.logical_access_point_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.airport_entrance_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.food_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.parking_facilities_size_class, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            end_bitposition += zserio_context.parking_facilities_size.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            end_bitposition += zserio_context.num_free_parking_spots.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.rest_area_service_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.accessibility_aids, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.departure_arrival_service, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.price_range, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.available_sportive_activities, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            end_bitposition += zserio_context.floor_number.bitsizeof(zserio.array.VarInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            end_bitposition += zserio_context.number_of_rooms_en_suite.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.place_of_worship_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.service_fee, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.car_dealer_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.airport_service_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.transit_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.access_point_details, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.ad_blue_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.hydrogen_pressure_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            end_bitposition += zserio_context.radius.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_varint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            end_bitposition += 8
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoiAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.accepted_payment_methods, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.access_point_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.ev_charging_station_details, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.accepted_charging_payment, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.ev_charging_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.stars, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.fuel_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.logical_access_point_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.airport_entrance_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.food_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.parking_facilities_size_class, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            end_bitposition += zserio_context.parking_facilities_size.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            end_bitposition += zserio_context.num_free_parking_spots.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.rest_area_service_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.accessibility_aids, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.departure_arrival_service, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.price_range, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.available_sportive_activities, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            end_bitposition += zserio_context.floor_number.bitsizeof(zserio.array.VarInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            end_bitposition += zserio_context.number_of_rooms_en_suite.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.place_of_worship_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.service_fee, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.car_dealer_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.airport_service_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.transit_type, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.access_point_details, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.ad_blue_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.hydrogen_pressure_availability, end_bitposition)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            end_bitposition += zserio_context.radius.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            self._choice = nds.poi.types.open24_hrs.Open24Hrs.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            self._choice = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            self._choice = nds.poi.types.access_point_type.AccessPointType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            self._choice = nds.poi.types.ev_charging_station_details.EvChargingStationDetails.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            self._choice = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            self._choice = nds.poi.types.ev_free_charging.EvFreeCharging.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            self._choice = nds.poi.types.ev_free_parking.EvFreeParking.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            self._choice = nds.poi.types.ev_charging_availability.EvChargingAvailability.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            self._choice = nds.poi.types.opening_hrs.OpeningHrs.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            self._choice = nds.poi.types.star_rating.StarRating.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            self._choice = nds.core.vehicle.energy_type.EnergyType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            self._choice = nds.poi.types.logical_access_point_type.LogicalAccessPointType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            self._choice = nds.poi.types.in_vicinity.InVicinity.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            self._choice = nds.poi.types.airport_entrance_type.AirportEntranceType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            self._choice = nds.poi.types.food_type.FoodType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            self._choice = nds.poi.types.multimedia_resource_reference.MultimediaResourceReference.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            self._choice = nds.poi.types.private_access.PrivateAccess.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            self._choice = nds.poi.types.national_importance.NationalImportance.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            self._choice = nds.poi.types.parking_facilities_size_class.ParkingFacilitiesSizeClass.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            self._choice = nds.poi.types.rest_area_service_availability.RestAreaServiceAvailability.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            self._choice = nds.poi.types.accessibility_aids.AccessibilityAids.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            self._choice = nds.poi.types.restaurant_facilities_available.RestaurantFacilitiesAvailable.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            self._choice = nds.poi.types.departure_arrival_service.DepartureArrivalService.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            self._choice = nds.poi.types.price_range.PriceRange.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            self._choice = nds.poi.types.available_sportive_activities.AvailableSportiveActivities.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            self._choice = zserio_reader.read_varint16()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            self._choice = nds.poi.types.place_of_worship_type.PlaceOfWorshipType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            self._choice = nds.poi.types.service_fee.ServiceFee.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            self._choice = nds.poi.types.car_dealer_type.CarDealerType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            self._choice = nds.poi.types.major_importance.MajorImportance.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            self._choice = nds.poi.types.airport_service_availability.AirportServiceAvailability.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            self._choice = nds.poi.types.airport_military.AirportMilitary.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            self._choice = nds.poi.types.transit_type.TransitType.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            self._choice = nds.poi.types.access_point_details.AccessPointDetails.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            self._choice = nds.poi.types.park_and_ride_facility.ParkAndRideFacility.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            self._choice = nds.poi.types.ad_blue_availability.AdBlueAvailability.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            self._choice = nds.poi.types.hydrogen_pressure_availability.HydrogenPressureAvailability.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

    def read_packed(self, zserio_context: PoiAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            self._choice = nds.poi.types.open24_hrs.Open24Hrs.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            self._choice = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.from_reader_packed(zserio_context.accepted_payment_methods, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            self._choice = nds.poi.types.access_point_type.AccessPointType.from_reader_packed(zserio_context.access_point_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            self._choice = nds.poi.types.ev_charging_station_details.EvChargingStationDetails.from_reader_packed(zserio_context.ev_charging_station_details, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            self._choice = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.from_reader_packed(zserio_context.accepted_charging_payment, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            self._choice = nds.poi.types.ev_free_charging.EvFreeCharging.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            self._choice = nds.poi.types.ev_free_parking.EvFreeParking.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            self._choice = nds.poi.types.ev_charging_availability.EvChargingAvailability.from_reader_packed(zserio_context.ev_charging_availability, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            self._choice = nds.poi.types.opening_hrs.OpeningHrs.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            self._choice = nds.poi.types.star_rating.StarRating.from_reader_packed(zserio_context.stars, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            self._choice = nds.core.vehicle.energy_type.EnergyType.from_reader_packed(zserio_context.fuel_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            self._choice = nds.poi.types.logical_access_point_type.LogicalAccessPointType.from_reader_packed(zserio_context.logical_access_point_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            self._choice = nds.poi.types.in_vicinity.InVicinity.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            self._choice = nds.poi.types.airport_entrance_type.AirportEntranceType.from_reader_packed(zserio_context.airport_entrance_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            self._choice = nds.poi.types.food_type.FoodType.from_reader_packed(zserio_context.food_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            self._choice = nds.poi.types.multimedia_resource_reference.MultimediaResourceReference.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            self._choice = nds.poi.types.private_access.PrivateAccess.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            self._choice = nds.poi.types.national_importance.NationalImportance.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            self._choice = nds.poi.types.parking_facilities_size_class.ParkingFacilitiesSizeClass.from_reader_packed(zserio_context.parking_facilities_size_class, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            self._choice = zserio_context.parking_facilities_size.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            self._choice = zserio_context.num_free_parking_spots.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            self._choice = nds.poi.types.rest_area_service_availability.RestAreaServiceAvailability.from_reader_packed(zserio_context.rest_area_service_availability, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            self._choice = nds.poi.types.accessibility_aids.AccessibilityAids.from_reader_packed(zserio_context.accessibility_aids, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            self._choice = nds.poi.types.restaurant_facilities_available.RestaurantFacilitiesAvailable.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            self._choice = nds.poi.types.departure_arrival_service.DepartureArrivalService.from_reader_packed(zserio_context.departure_arrival_service, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            self._choice = nds.poi.types.price_range.PriceRange.from_reader_packed(zserio_context.price_range, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            self._choice = nds.poi.types.available_sportive_activities.AvailableSportiveActivities.from_reader_packed(zserio_context.available_sportive_activities, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            self._choice = zserio_context.floor_number.read(zserio.array.VarInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            self._choice = zserio_context.number_of_rooms_en_suite.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            self._choice = nds.poi.types.place_of_worship_type.PlaceOfWorshipType.from_reader_packed(zserio_context.place_of_worship_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            self._choice = nds.poi.types.service_fee.ServiceFee.from_reader_packed(zserio_context.service_fee, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            self._choice = nds.poi.types.car_dealer_type.CarDealerType.from_reader_packed(zserio_context.car_dealer_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            self._choice = nds.poi.types.major_importance.MajorImportance.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            self._choice = nds.poi.types.airport_service_availability.AirportServiceAvailability.from_reader_packed(zserio_context.airport_service_availability, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            self._choice = nds.poi.types.airport_military.AirportMilitary.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            self._choice = nds.poi.types.transit_type.TransitType.from_reader_packed(zserio_context.transit_type, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            self._choice = nds.poi.types.access_point_details.AccessPointDetails.from_reader_packed(zserio_context.access_point_details, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            self._choice = nds.poi.types.park_and_ride_facility.ParkAndRideFacility.from_reader(zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            self._choice = nds.poi.types.ad_blue_availability.AdBlueAvailability.from_reader_packed(zserio_context.ad_blue_availability, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            self._choice = nds.poi.types.hydrogen_pressure_availability.HydrogenPressureAvailability.from_reader_packed(zserio_context.hydrogen_pressure_availability, zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            self._choice = zserio_context.radius.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            zserio_writer.write_varint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

    def write_packed(self, zserio_context: PoiAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPEN_24_HRS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCEPTED_PAYMENT_METHODS):
            self._choice.write_packed(zserio_context.accepted_payment_methods, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_TYPE):
            self._choice.write_packed(zserio_context.access_point_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_CODE):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.BRAND_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_DETAILS):
            self._choice.write_packed(zserio_context.ev_charging_station_details, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_PAYMENT_METHODS):
            self._choice.write_packed(zserio_context.accepted_charging_payment, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_ENERGY_PROVIDER):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_CHARGING):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_FREE_PARKING):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EV_CHARGING_AVAILABILITY):
            self._choice.write_packed(zserio_context.ev_charging_availability, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.OPENING_HRS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.EMAIL):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PHONE_NUMBER):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.STAR_RATING):
            self._choice.write_packed(zserio_context.stars, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FUEL_TYPE):
            self._choice.write_packed(zserio_context.fuel_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE):
            self._choice.write_packed(zserio_context.logical_access_point_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.WEBSITE):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.IN_VICINITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_ENTRANCE_TYPE):
            self._choice.write_packed(zserio_context.airport_entrance_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FOOD_TYPE):
            self._choice.write_packed(zserio_context.food_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MULTIMEDIA):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRIVATE_ACCESS):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NATIONAL_IMPORTANCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS):
            self._choice.write_packed(zserio_context.parking_facilities_size_class, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARKING_FACILITIES_SIZE):
            zserio_context.parking_facilities_size.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUM_FREE_PARKING_SPOTS):
            zserio_context.num_free_parking_spots.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY):
            self._choice.write_packed(zserio_context.rest_area_service_availability, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESSIBILITY_AIDS):
            self._choice.write_packed(zserio_context.accessibility_aids, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE):
            self._choice.write_packed(zserio_context.departure_arrival_service, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PRICE_RANGE):
            self._choice.write_packed(zserio_context.price_range, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SHORT_DESCRIPTION):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.LONG_DESCRIPTION):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES):
            self._choice.write_packed(zserio_context.available_sportive_activities, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.FLOOR_NUMBER):
            zserio_context.floor_number.write(zserio.array.VarInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE):
            zserio_context.number_of_rooms_en_suite.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PLACE_OF_WORSHIP_TYPE):
            self._choice.write_packed(zserio_context.place_of_worship_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.SERVICE_FEE):
            self._choice.write_packed(zserio_context.service_fee, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.CAR_DEALER_TYPE):
            self._choice.write_packed(zserio_context.car_dealer_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.MAJOR_IMPORTANCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY):
            self._choice.write_packed(zserio_context.airport_service_availability, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AIRPORT_MILITARY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.TRANSIT_TYPE):
            self._choice.write_packed(zserio_context.transit_type, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ACCESS_POINT_DETAILS):
            self._choice.write_packed(zserio_context.access_point_details, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.PARK_AND_RIDE_FACILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.ADBLUE_AVAILABILITY):
            self._choice.write_packed(zserio_context.ad_blue_availability, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY):
            self._choice.write_packed(zserio_context.hydrogen_pressure_availability, zserio_writer)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.AVAILABILITY_URL):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.RELEVANCE_RADIUS):
            zserio_context.radius.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.poi.attributes.poi_attribute_type.PoiAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PoiAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._accepted_payment_methods_ = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.ZserioPackingContext()
            self._access_point_type_ = zserio.array.DeltaContext()
            self._ev_charging_station_details_ = nds.poi.types.ev_charging_station_details.EvChargingStationDetails.ZserioPackingContext()
            self._accepted_charging_payment_ = nds.poi.types.accepted_payment_methods.AcceptedPaymentMethods.ZserioPackingContext()
            self._ev_charging_availability_ = nds.poi.types.ev_charging_availability.EvChargingAvailability.ZserioPackingContext()
            self._stars_ = zserio.array.DeltaContext()
            self._fuel_type_ = zserio.array.DeltaContext()
            self._logical_access_point_type_ = zserio.array.DeltaContext()
            self._airport_entrance_type_ = zserio.array.DeltaContext()
            self._food_type_ = nds.poi.types.food_type.FoodType.ZserioPackingContext()
            self._parking_facilities_size_class_ = zserio.array.DeltaContext()
            self._parking_facilities_size_ = zserio.array.DeltaContext()
            self._num_free_parking_spots_ = zserio.array.DeltaContext()
            self._rest_area_service_availability_ = zserio.array.DeltaContext()
            self._accessibility_aids_ = zserio.array.DeltaContext()
            self._departure_arrival_service_ = zserio.array.DeltaContext()
            self._price_range_ = zserio.array.DeltaContext()
            self._available_sportive_activities_ = nds.poi.types.available_sportive_activities.AvailableSportiveActivities.ZserioPackingContext()
            self._floor_number_ = zserio.array.DeltaContext()
            self._number_of_rooms_en_suite_ = zserio.array.DeltaContext()
            self._place_of_worship_type_ = zserio.array.DeltaContext()
            self._service_fee_ = nds.poi.types.service_fee.ServiceFee.ZserioPackingContext()
            self._car_dealer_type_ = zserio.array.DeltaContext()
            self._airport_service_availability_ = zserio.array.DeltaContext()
            self._transit_type_ = zserio.array.DeltaContext()
            self._access_point_details_ = nds.poi.types.access_point_details.AccessPointDetails.ZserioPackingContext()
            self._ad_blue_availability_ = zserio.array.DeltaContext()
            self._hydrogen_pressure_availability_ = zserio.array.DeltaContext()
            self._radius_ = zserio.array.DeltaContext()

        @property
        def accepted_payment_methods(self):
            return self._accepted_payment_methods_

        @property
        def access_point_type(self):
            return self._access_point_type_

        @property
        def ev_charging_station_details(self):
            return self._ev_charging_station_details_

        @property
        def accepted_charging_payment(self):
            return self._accepted_charging_payment_

        @property
        def ev_charging_availability(self):
            return self._ev_charging_availability_

        @property
        def stars(self):
            return self._stars_

        @property
        def fuel_type(self):
            return self._fuel_type_

        @property
        def logical_access_point_type(self):
            return self._logical_access_point_type_

        @property
        def airport_entrance_type(self):
            return self._airport_entrance_type_

        @property
        def food_type(self):
            return self._food_type_

        @property
        def parking_facilities_size_class(self):
            return self._parking_facilities_size_class_

        @property
        def parking_facilities_size(self):
            return self._parking_facilities_size_

        @property
        def num_free_parking_spots(self):
            return self._num_free_parking_spots_

        @property
        def rest_area_service_availability(self):
            return self._rest_area_service_availability_

        @property
        def accessibility_aids(self):
            return self._accessibility_aids_

        @property
        def departure_arrival_service(self):
            return self._departure_arrival_service_

        @property
        def price_range(self):
            return self._price_range_

        @property
        def available_sportive_activities(self):
            return self._available_sportive_activities_

        @property
        def floor_number(self):
            return self._floor_number_

        @property
        def number_of_rooms_en_suite(self):
            return self._number_of_rooms_en_suite_

        @property
        def place_of_worship_type(self):
            return self._place_of_worship_type_

        @property
        def service_fee(self):
            return self._service_fee_

        @property
        def car_dealer_type(self):
            return self._car_dealer_type_

        @property
        def airport_service_availability(self):
            return self._airport_service_availability_

        @property
        def transit_type(self):
            return self._transit_type_

        @property
        def access_point_details(self):
            return self._access_point_details_

        @property
        def ad_blue_availability(self):
            return self._ad_blue_availability_

        @property
        def hydrogen_pressure_availability(self):
            return self._hydrogen_pressure_availability_

        @property
        def radius(self):
            return self._radius_

    CHOICE_OPEN24_HRS = 0
    CHOICE_ACCEPTED_PAYMENT_METHODS = 1
    CHOICE_ACCESS_POINT_TYPE = 2
    CHOICE_AIRPORT_CODE = 3
    CHOICE_BRAND_NAME = 4
    CHOICE_EV_CHARGING_STATION_DETAILS = 5
    CHOICE_ACCEPTED_CHARGING_PAYMENT = 6
    CHOICE_EV_ENERGY_PROVIDER = 7
    CHOICE_EV_FREE_CHARGING = 8
    CHOICE_EV_FREE_PARKING = 9
    CHOICE_EV_CHARGING_AVAILABILITY = 10
    CHOICE_OPENING_HRS = 11
    CHOICE_EMAIL = 12
    CHOICE_PHONE_NUMBER = 13
    CHOICE_STARS = 14
    CHOICE_FUEL_TYPE = 15
    CHOICE_LOGICAL_ACCESS_POINT_TYPE = 16
    CHOICE_WEBSITE = 17
    CHOICE_IN_VICINITY = 18
    CHOICE_AIRPORT_ENTRANCE_TYPE = 19
    CHOICE_FOOD_TYPE = 20
    CHOICE_MULTIMEDIA_RESOURCE_REFERENCE = 21
    CHOICE_PRIVATE_ACCESS = 22
    CHOICE_NATIONAL_IMPORTANCE = 23
    CHOICE_PARKING_FACILITIES_SIZE_CLASS = 24
    CHOICE_PARKING_FACILITIES_SIZE = 25
    CHOICE_NUM_FREE_PARKING_SPOTS = 26
    CHOICE_REST_AREA_SERVICE_AVAILABILITY = 27
    CHOICE_ACCESSIBILITY_AIDS = 28
    CHOICE_RESTAURANT_FACILITIES_AVAILABLE = 29
    CHOICE_DEPARTURE_ARRIVAL_SERVICE = 30
    CHOICE_PRICE_RANGE = 31
    CHOICE_SHORT_DESCRIPTION = 32
    CHOICE_POI_LONG_DESCRIPTION = 33
    CHOICE_AVAILABLE_SPORTIVE_ACTIVITIES = 34
    CHOICE_FLOOR_NUMBER = 35
    CHOICE_NUMBER_OF_ROOMS_EN_SUITE = 36
    CHOICE_PLACE_OF_WORSHIP_TYPE = 37
    CHOICE_SERVICE_FEE = 38
    CHOICE_CAR_DEALER_TYPE = 39
    CHOICE_MAJOR_IMPORTANCE = 40
    CHOICE_AIRPORT_SERVICE_AVAILABILITY = 41
    CHOICE_AIRPORT_MILITARY = 42
    CHOICE_TRANSIT_TYPE = 43
    CHOICE_ACCESS_POINT_DETAILS = 44
    CHOICE_PARK_AND_RIDE_FACILITY = 45
    CHOICE_AD_BLUE_AVAILABILITY = 46
    CHOICE_HYDROGEN_PRESSURE_AVAILABILITY = 47
    CHOICE_URL = 48
    CHOICE_RADIUS = 49
    CHOICE_GLOBAL_SOURCE_ID = 50
    UNDEFINED_CHOICE = -1
