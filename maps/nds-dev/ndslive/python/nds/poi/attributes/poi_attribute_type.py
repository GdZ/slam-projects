# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class PoiAttributeType(zserio.Enum):
    OPEN_24_HRS = 0
    ACCEPTED_PAYMENT_METHODS = 1
    ACCESS_POINT_TYPE = 2
    AIRPORT_CODE = 3
    BRAND_NAME = 4
    EV_CHARGING_DETAILS = 5
    EV_CHARGING_PAYMENT_METHODS = 6
    EV_ENERGY_PROVIDER = 7
    EV_FREE_CHARGING = 8
    EV_FREE_PARKING = 9
    EV_CHARGING_AVAILABILITY = 10
    OPENING_HRS = 11
    EMAIL = 12
    PHONE_NUMBER = 13
    STAR_RATING = 14
    FUEL_TYPE = 15
    LOGICAL_ACCESS_POINT_TYPE = 16
    WEBSITE = 17
    IN_VICINITY = 18
    AIRPORT_ENTRANCE_TYPE = 19
    FOOD_TYPE = 20
    MULTIMEDIA = 21
    PRIVATE_ACCESS = 22
    NATIONAL_IMPORTANCE = 23
    PARKING_FACILITIES_SIZE_CLASS = 24
    PARKING_FACILITIES_SIZE = 25
    NUM_FREE_PARKING_SPOTS = 26
    REST_AREA_SERVICE_AVAILABILITY = 27
    ACCESSIBILITY_AIDS = 28
    RESTAURANT_FACILITIES_AVAILABLE = 29
    DEPARTURE_ARRIVAL_SERVICE = 30
    PRICE_RANGE = 31
    SHORT_DESCRIPTION = 32
    LONG_DESCRIPTION = 33
    FLOOR_NUMBER = 34
    NUMBER_OF_ROOMS_EN_SUITE = 35
    PLACE_OF_WORSHIP_TYPE = 36
    AVAILABLE_SPORTIVE_ACTIVITIES = 37
    SERVICE_FEE = 38
    CAR_DEALER_TYPE = 39
    MAJOR_IMPORTANCE = 40
    AIRPORT_SERVICE_AVAILABILITY = 41
    AIRPORT_MILITARY = 42
    TRANSIT_TYPE = 43
    ACCESS_POINT_DETAILS = 44
    PARK_AND_RIDE_FACILITY = 45
    ADBLUE_AVAILABILITY = 46
    HYDROGEN_PRESSURE_AVAILABILITY = 47
    AVAILABILITY_URL = 48
    RELEVANCE_RADIUS = 49
    GLOBAL_SOURCE_ID = 50

    @classmethod
    def from_name(cls: typing.Type['PoiAttributeType'], item_name: str) -> 'PoiAttributeType':
        if item_name == 'OPEN_24_HRS':
            item = PoiAttributeType.OPEN_24_HRS
        elif item_name == 'ACCEPTED_PAYMENT_METHODS':
            item = PoiAttributeType.ACCEPTED_PAYMENT_METHODS
        elif item_name == 'ACCESS_POINT_TYPE':
            item = PoiAttributeType.ACCESS_POINT_TYPE
        elif item_name == 'AIRPORT_CODE':
            item = PoiAttributeType.AIRPORT_CODE
        elif item_name == 'BRAND_NAME':
            item = PoiAttributeType.BRAND_NAME
        elif item_name == 'EV_CHARGING_DETAILS':
            item = PoiAttributeType.EV_CHARGING_DETAILS
        elif item_name == 'EV_CHARGING_PAYMENT_METHODS':
            item = PoiAttributeType.EV_CHARGING_PAYMENT_METHODS
        elif item_name == 'EV_ENERGY_PROVIDER':
            item = PoiAttributeType.EV_ENERGY_PROVIDER
        elif item_name == 'EV_FREE_CHARGING':
            item = PoiAttributeType.EV_FREE_CHARGING
        elif item_name == 'EV_FREE_PARKING':
            item = PoiAttributeType.EV_FREE_PARKING
        elif item_name == 'EV_CHARGING_AVAILABILITY':
            item = PoiAttributeType.EV_CHARGING_AVAILABILITY
        elif item_name == 'OPENING_HRS':
            item = PoiAttributeType.OPENING_HRS
        elif item_name == 'EMAIL':
            item = PoiAttributeType.EMAIL
        elif item_name == 'PHONE_NUMBER':
            item = PoiAttributeType.PHONE_NUMBER
        elif item_name == 'STAR_RATING':
            item = PoiAttributeType.STAR_RATING
        elif item_name == 'FUEL_TYPE':
            item = PoiAttributeType.FUEL_TYPE
        elif item_name == 'LOGICAL_ACCESS_POINT_TYPE':
            item = PoiAttributeType.LOGICAL_ACCESS_POINT_TYPE
        elif item_name == 'WEBSITE':
            item = PoiAttributeType.WEBSITE
        elif item_name == 'IN_VICINITY':
            item = PoiAttributeType.IN_VICINITY
        elif item_name == 'AIRPORT_ENTRANCE_TYPE':
            item = PoiAttributeType.AIRPORT_ENTRANCE_TYPE
        elif item_name == 'FOOD_TYPE':
            item = PoiAttributeType.FOOD_TYPE
        elif item_name == 'MULTIMEDIA':
            item = PoiAttributeType.MULTIMEDIA
        elif item_name == 'PRIVATE_ACCESS':
            item = PoiAttributeType.PRIVATE_ACCESS
        elif item_name == 'NATIONAL_IMPORTANCE':
            item = PoiAttributeType.NATIONAL_IMPORTANCE
        elif item_name == 'PARKING_FACILITIES_SIZE_CLASS':
            item = PoiAttributeType.PARKING_FACILITIES_SIZE_CLASS
        elif item_name == 'PARKING_FACILITIES_SIZE':
            item = PoiAttributeType.PARKING_FACILITIES_SIZE
        elif item_name == 'NUM_FREE_PARKING_SPOTS':
            item = PoiAttributeType.NUM_FREE_PARKING_SPOTS
        elif item_name == 'REST_AREA_SERVICE_AVAILABILITY':
            item = PoiAttributeType.REST_AREA_SERVICE_AVAILABILITY
        elif item_name == 'ACCESSIBILITY_AIDS':
            item = PoiAttributeType.ACCESSIBILITY_AIDS
        elif item_name == 'RESTAURANT_FACILITIES_AVAILABLE':
            item = PoiAttributeType.RESTAURANT_FACILITIES_AVAILABLE
        elif item_name == 'DEPARTURE_ARRIVAL_SERVICE':
            item = PoiAttributeType.DEPARTURE_ARRIVAL_SERVICE
        elif item_name == 'PRICE_RANGE':
            item = PoiAttributeType.PRICE_RANGE
        elif item_name == 'SHORT_DESCRIPTION':
            item = PoiAttributeType.SHORT_DESCRIPTION
        elif item_name == 'LONG_DESCRIPTION':
            item = PoiAttributeType.LONG_DESCRIPTION
        elif item_name == 'FLOOR_NUMBER':
            item = PoiAttributeType.FLOOR_NUMBER
        elif item_name == 'NUMBER_OF_ROOMS_EN_SUITE':
            item = PoiAttributeType.NUMBER_OF_ROOMS_EN_SUITE
        elif item_name == 'PLACE_OF_WORSHIP_TYPE':
            item = PoiAttributeType.PLACE_OF_WORSHIP_TYPE
        elif item_name == 'AVAILABLE_SPORTIVE_ACTIVITIES':
            item = PoiAttributeType.AVAILABLE_SPORTIVE_ACTIVITIES
        elif item_name == 'SERVICE_FEE':
            item = PoiAttributeType.SERVICE_FEE
        elif item_name == 'CAR_DEALER_TYPE':
            item = PoiAttributeType.CAR_DEALER_TYPE
        elif item_name == 'MAJOR_IMPORTANCE':
            item = PoiAttributeType.MAJOR_IMPORTANCE
        elif item_name == 'AIRPORT_SERVICE_AVAILABILITY':
            item = PoiAttributeType.AIRPORT_SERVICE_AVAILABILITY
        elif item_name == 'AIRPORT_MILITARY':
            item = PoiAttributeType.AIRPORT_MILITARY
        elif item_name == 'TRANSIT_TYPE':
            item = PoiAttributeType.TRANSIT_TYPE
        elif item_name == 'ACCESS_POINT_DETAILS':
            item = PoiAttributeType.ACCESS_POINT_DETAILS
        elif item_name == 'PARK_AND_RIDE_FACILITY':
            item = PoiAttributeType.PARK_AND_RIDE_FACILITY
        elif item_name == 'ADBLUE_AVAILABILITY':
            item = PoiAttributeType.ADBLUE_AVAILABILITY
        elif item_name == 'HYDROGEN_PRESSURE_AVAILABILITY':
            item = PoiAttributeType.HYDROGEN_PRESSURE_AVAILABILITY
        elif item_name == 'AVAILABILITY_URL':
            item = PoiAttributeType.AVAILABILITY_URL
        elif item_name == 'RELEVANCE_RADIUS':
            item = PoiAttributeType.RELEVANCE_RADIUS
        elif item_name == 'GLOBAL_SOURCE_ID':
            item = PoiAttributeType.GLOBAL_SOURCE_ID
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'PoiAttributeType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['PoiAttributeType'], reader: zserio.BitStreamReader) -> 'PoiAttributeType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['PoiAttributeType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'PoiAttributeType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
