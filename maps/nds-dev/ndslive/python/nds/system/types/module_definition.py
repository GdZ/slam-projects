# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.system.types.module_name
import nds.system.types.module_version

class ModuleDefinition:
    def __init__(
            self,
            name_: nds.system.types.module_name.ModuleName = nds.system.types.module_name.ModuleName(),
            version_: nds.system.types.module_version.ModuleVersion = nds.system.types.module_version.ModuleVersion()) -> None:
        self._name_ = name_
        self._version_ = version_

    @classmethod
    def from_reader(
            cls: typing.Type['ModuleDefinition'],
            zserio_reader: zserio.BitStreamReader) -> 'ModuleDefinition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ModuleDefinition):
            return ((self._name_ == other._name_) and
                    (self._version_ == other._version_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._version_)

        return result

    @property
    def name(self) -> nds.system.types.module_name.ModuleName:
        return self._name_

    @name.setter
    def name(self, name_: nds.system.types.module_name.ModuleName) -> None:
        self._name_ = name_

    @property
    def version(self) -> nds.system.types.module_version.ModuleVersion:
        return self._version_

    @version.setter
    def version(self, version_: nds.system.types.module_version.ModuleVersion) -> None:
        self._version_ = version_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._version_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._version_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._name_ = zserio_reader.read_string()
        self._version_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._name_)
        zserio_writer.write_string(self._version_)
