# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.system.types.uuid

class NdsSystemToken:
    def __init__(
            self,
            map_id_: typing.Union[nds.system.types.uuid.UUID, None] = None) -> None:
        self._map_id_ = map_id_

    @classmethod
    def from_reader(
            cls: typing.Type['NdsSystemToken'],
            zserio_reader: zserio.BitStreamReader) -> 'NdsSystemToken':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['NdsSystemToken'],
            zserio_context: NdsSystemToken.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'NdsSystemToken':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NdsSystemToken):
            return (self._map_id_ == other._map_id_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._map_id_)

        return result

    @property
    def map_id(self) -> typing.Union[nds.system.types.uuid.UUID, None]:
        return self._map_id_

    @map_id.setter
    def map_id(self, map_id_: typing.Union[nds.system.types.uuid.UUID, None]) -> None:
        self._map_id_ = map_id_

    def init_packing_context(self, zserio_context: NdsSystemToken.ZserioPackingContext) -> None:
        self._map_id_.init_packing_context(zserio_context.map_id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._map_id_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: NdsSystemToken.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._map_id_.bitsizeof_packed(zserio_context.map_id, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._map_id_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: NdsSystemToken.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._map_id_.initialize_offsets_packed(zserio_context.map_id, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._map_id_ = nds.system.types.uuid.UUID.from_reader(zserio_reader)

    def read_packed(self, zserio_context: NdsSystemToken.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._map_id_ = nds.system.types.uuid.UUID.from_reader_packed(zserio_context.map_id, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._map_id_.write(zserio_writer)

    def write_packed(self, zserio_context: NdsSystemToken.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._map_id_.write_packed(zserio_context.map_id, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._map_id_ = nds.system.types.uuid.UUID.ZserioPackingContext()

        @property
        def map_id(self):
            return self._map_id_
