# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.system.types.nds_node_token

class NdsNodeLegalInfo:
    def __init__(
            self,
            node_id_: typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None] = None,
            provider_name_: str = str(),
            content_name_: str = str(),
            content_version_: str = str(),
            content_timestamp_: str = str(),
            copyright_: str = str(),
            licenses_: str = str()) -> None:
        self._node_id_ = node_id_
        self._provider_name_ = provider_name_
        self._content_name_ = content_name_
        self._content_version_ = content_version_
        self._content_timestamp_ = content_timestamp_
        self._copyright_ = copyright_
        self._licenses_ = licenses_

    @classmethod
    def from_reader(
            cls: typing.Type['NdsNodeLegalInfo'],
            zserio_reader: zserio.BitStreamReader) -> 'NdsNodeLegalInfo':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['NdsNodeLegalInfo'],
            zserio_context: NdsNodeLegalInfo.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'NdsNodeLegalInfo':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NdsNodeLegalInfo):
            return ((self._node_id_ == other._node_id_) and
                    (self._provider_name_ == other._provider_name_) and
                    (self._content_name_ == other._content_name_) and
                    (self._content_version_ == other._content_version_) and
                    (self._content_timestamp_ == other._content_timestamp_) and
                    (self._copyright_ == other._copyright_) and
                    (self._licenses_ == other._licenses_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._node_id_)
        result = zserio.hashcode.calc_hashcode_string(result, self._provider_name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._content_name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._content_version_)
        result = zserio.hashcode.calc_hashcode_string(result, self._content_timestamp_)
        result = zserio.hashcode.calc_hashcode_string(result, self._copyright_)
        result = zserio.hashcode.calc_hashcode_string(result, self._licenses_)

        return result

    @property
    def node_id(self) -> typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None]:
        return self._node_id_

    @node_id.setter
    def node_id(self, node_id_: typing.Union[nds.system.types.nds_node_token.NdsNodeToken, None]) -> None:
        self._node_id_ = node_id_

    @property
    def provider_name(self) -> str:
        return self._provider_name_

    @provider_name.setter
    def provider_name(self, provider_name_: str) -> None:
        self._provider_name_ = provider_name_

    @property
    def content_name(self) -> str:
        return self._content_name_

    @content_name.setter
    def content_name(self, content_name_: str) -> None:
        self._content_name_ = content_name_

    @property
    def content_version(self) -> str:
        return self._content_version_

    @content_version.setter
    def content_version(self, content_version_: str) -> None:
        self._content_version_ = content_version_

    @property
    def content_timestamp(self) -> str:
        return self._content_timestamp_

    @content_timestamp.setter
    def content_timestamp(self, content_timestamp_: str) -> None:
        self._content_timestamp_ = content_timestamp_

    @property
    def copyright(self) -> str:
        return self._copyright_

    @copyright.setter
    def copyright(self, copyright_: str) -> None:
        self._copyright_ = copyright_

    @property
    def licenses(self) -> str:
        return self._licenses_

    @licenses.setter
    def licenses(self, licenses_: str) -> None:
        self._licenses_ = licenses_

    def init_packing_context(self, zserio_context: NdsNodeLegalInfo.ZserioPackingContext) -> None:
        self._node_id_.init_packing_context(zserio_context.node_id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._node_id_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_timestamp_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._copyright_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._licenses_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: NdsNodeLegalInfo.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._node_id_.bitsizeof_packed(zserio_context.node_id, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_timestamp_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._copyright_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._licenses_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._node_id_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_timestamp_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._copyright_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._licenses_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: NdsNodeLegalInfo.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._node_id_.initialize_offsets_packed(zserio_context.node_id, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._content_timestamp_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._copyright_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._licenses_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._node_id_ = nds.system.types.nds_node_token.NdsNodeToken.from_reader(zserio_reader)
        self._provider_name_ = zserio_reader.read_string()
        self._content_name_ = zserio_reader.read_string()
        self._content_version_ = zserio_reader.read_string()
        self._content_timestamp_ = zserio_reader.read_string()
        self._copyright_ = zserio_reader.read_string()
        self._licenses_ = zserio_reader.read_string()

    def read_packed(self, zserio_context: NdsNodeLegalInfo.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._node_id_ = nds.system.types.nds_node_token.NdsNodeToken.from_reader_packed(zserio_context.node_id, zserio_reader)

        self._provider_name_ = zserio_reader.read_string()

        self._content_name_ = zserio_reader.read_string()

        self._content_version_ = zserio_reader.read_string()

        self._content_timestamp_ = zserio_reader.read_string()

        self._copyright_ = zserio_reader.read_string()

        self._licenses_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._node_id_.write(zserio_writer)
        zserio_writer.write_string(self._provider_name_)
        zserio_writer.write_string(self._content_name_)
        zserio_writer.write_string(self._content_version_)
        zserio_writer.write_string(self._content_timestamp_)
        zserio_writer.write_string(self._copyright_)
        zserio_writer.write_string(self._licenses_)

    def write_packed(self, zserio_context: NdsNodeLegalInfo.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._node_id_.write_packed(zserio_context.node_id, zserio_writer)

        zserio_writer.write_string(self._provider_name_)

        zserio_writer.write_string(self._content_name_)

        zserio_writer.write_string(self._content_version_)

        zserio_writer.write_string(self._content_timestamp_)

        zserio_writer.write_string(self._copyright_)

        zserio_writer.write_string(self._licenses_)

    class ZserioPackingContext:
        def __init__(self):
            self._node_id_ = nds.system.types.nds_node_token.NdsNodeToken.ZserioPackingContext()

        @property
        def node_id(self):
            return self._node_id_
