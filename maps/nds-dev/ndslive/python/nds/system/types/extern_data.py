# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.system.types.extern_descriptor

class ExternData:
    def __init__(
            self,
            extern_descriptor_: typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None] = None,
            data_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._extern_descriptor_ = extern_descriptor_
        self._data_ = data_

    @classmethod
    def from_reader(
            cls: typing.Type['ExternData'],
            zserio_reader: zserio.BitStreamReader) -> 'ExternData':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ExternData):
            return ((self._extern_descriptor_ == other._extern_descriptor_) and
                    (self._data_ == other._data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._extern_descriptor_)
        result = zserio.hashcode.calc_hashcode_object(result, self._data_)

        return result

    @property
    def extern_descriptor(self) -> typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None]:
        return self._extern_descriptor_

    @extern_descriptor.setter
    def extern_descriptor(self, extern_descriptor_: typing.Union[nds.system.types.extern_descriptor.ExternDescriptor, None]) -> None:
        self._extern_descriptor_ = extern_descriptor_

    @property
    def data(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._data_

    @data.setter
    def data(self, data_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._data_ = data_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._extern_descriptor_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._data_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._extern_descriptor_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._data_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        zserio_reader.alignto(8)
        self._extern_descriptor_ = nds.system.types.extern_descriptor.ExternDescriptor.from_reader(zserio_reader)
        self._data_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.alignto(8)
        self._extern_descriptor_.write(zserio_writer)
        zserio_writer.write_bitbuffer(self._data_)
