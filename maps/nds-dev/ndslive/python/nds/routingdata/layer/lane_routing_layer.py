# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.routingdata.instantiations.routing_lane_range_attribute_map_list
import nds.routingdata.instantiations.routing_lane_range_attribute_set_list
import nds.routingdata.instantiations.routing_lane_transition_attribute_map_list
import nds.routingdata.instantiations.routing_lane_transition_attribute_set_list
import nds.routingdata.metadata.lane_routing_layer_content
import nds.routingdata.types.speed_profile
import nds.system.types.layer_type

class LaneRoutingLayer:
    def __init__(
            self,
            content_: typing.Union[nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent, None] = None,
            routing_lane_range_maps_: typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList] = None,
            routing_transition_maps_: typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList] = None,
            routing_lane_range_sets_: typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList] = None,
            routing_transition_sets_: typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList] = None,
            profiles_: typing.Optional[typing.List[nds.routingdata.types.speed_profile.SpeedProfile]] = None) -> None:
        self._content_ = content_
        self._routing_lane_range_maps_ = routing_lane_range_maps_
        self._routing_transition_maps_ = routing_transition_maps_
        self._routing_lane_range_sets_ = routing_lane_range_sets_
        self._routing_transition_sets_ = routing_transition_sets_
        if profiles_ is None:
            self._profiles_ = None
        else:
            self._profiles_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_profiles()), profiles_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['LaneRoutingLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'LaneRoutingLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LaneRoutingLayer'],
            zserio_context: LaneRoutingLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LaneRoutingLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneRoutingLayer):
            return ((self._content_ == other._content_) and
                    (not other.is_routing_lane_range_maps_used() if not self.is_routing_lane_range_maps_used() else (self._routing_lane_range_maps_ == other._routing_lane_range_maps_)) and
                    (not other.is_routing_transition_maps_used() if not self.is_routing_transition_maps_used() else (self._routing_transition_maps_ == other._routing_transition_maps_)) and
                    (not other.is_routing_lane_range_sets_used() if not self.is_routing_lane_range_sets_used() else (self._routing_lane_range_sets_ == other._routing_lane_range_sets_)) and
                    (not other.is_routing_transition_sets_used() if not self.is_routing_transition_sets_used() else (self._routing_transition_sets_ == other._routing_transition_sets_)) and
                    (not other.is_profiles_used() if not self.is_profiles_used() else (self._profiles_ == other._profiles_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_routing_lane_range_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._routing_lane_range_maps_)
        if self.is_routing_transition_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._routing_transition_maps_)
        if self.is_routing_lane_range_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._routing_lane_range_sets_)
        if self.is_routing_transition_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._routing_transition_sets_)
        if self.is_profiles_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._profiles_)

        return result

    @property
    def content(self) -> typing.Union[nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def routing_lane_range_maps(self) -> typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList]:
        return self._routing_lane_range_maps_

    @routing_lane_range_maps.setter
    def routing_lane_range_maps(self, routing_lane_range_maps_: typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList]) -> None:
        self._routing_lane_range_maps_ = routing_lane_range_maps_

    def is_routing_lane_range_maps_used(self) -> bool:
        return (self._content_ & nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS) == nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS

    def is_routing_lane_range_maps_set(self) -> bool:
        return not self._routing_lane_range_maps_ is None

    def reset_routing_lane_range_maps(self) -> None:
        self._routing_lane_range_maps_ = None

    @property
    def routing_transition_maps(self) -> typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList]:
        return self._routing_transition_maps_

    @routing_transition_maps.setter
    def routing_transition_maps(self, routing_transition_maps_: typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList]) -> None:
        self._routing_transition_maps_ = routing_transition_maps_

    def is_routing_transition_maps_used(self) -> bool:
        return (self._content_ & nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS) == nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS

    def is_routing_transition_maps_set(self) -> bool:
        return not self._routing_transition_maps_ is None

    def reset_routing_transition_maps(self) -> None:
        self._routing_transition_maps_ = None

    @property
    def routing_lane_range_sets(self) -> typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList]:
        return self._routing_lane_range_sets_

    @routing_lane_range_sets.setter
    def routing_lane_range_sets(self, routing_lane_range_sets_: typing.Optional[nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList]) -> None:
        self._routing_lane_range_sets_ = routing_lane_range_sets_

    def is_routing_lane_range_sets_used(self) -> bool:
        return (self._content_ & nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_RANGE_SETS) == nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_RANGE_SETS

    def is_routing_lane_range_sets_set(self) -> bool:
        return not self._routing_lane_range_sets_ is None

    def reset_routing_lane_range_sets(self) -> None:
        self._routing_lane_range_sets_ = None

    @property
    def routing_transition_sets(self) -> typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList]:
        return self._routing_transition_sets_

    @routing_transition_sets.setter
    def routing_transition_sets(self, routing_transition_sets_: typing.Optional[nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList]) -> None:
        self._routing_transition_sets_ = routing_transition_sets_

    def is_routing_transition_sets_used(self) -> bool:
        return (self._content_ & nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS) == nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS

    def is_routing_transition_sets_set(self) -> bool:
        return not self._routing_transition_sets_ is None

    def reset_routing_transition_sets(self) -> None:
        self._routing_transition_sets_ = None

    @property
    def profiles(self) -> typing.Optional[typing.List[nds.routingdata.types.speed_profile.SpeedProfile]]:
        return None if self._profiles_ is None else self._profiles_.raw_array

    @profiles.setter
    def profiles(self, profiles_: typing.Optional[typing.List[nds.routingdata.types.speed_profile.SpeedProfile]]) -> None:
        if profiles_ is None:
            self._profiles_ = None
        else:
            self._profiles_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_profiles()), profiles_, is_auto=True)

    def is_profiles_used(self) -> bool:
        return (self._content_ & nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.SPEED_PROFILES) == nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.Values.SPEED_PROFILES

    def is_profiles_set(self) -> bool:
        return not self._profiles_ is None

    def reset_profiles(self) -> None:
        self._profiles_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.ATTRIBUTE

    def init_packing_context(self, zserio_context: LaneRoutingLayer.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_routing_lane_range_maps_used():
            self._routing_lane_range_maps_.init_packing_context(zserio_context.routing_lane_range_maps)
        if self.is_routing_transition_maps_used():
            self._routing_transition_maps_.init_packing_context(zserio_context.routing_transition_maps)
        if self.is_routing_lane_range_sets_used():
            self._routing_lane_range_sets_.init_packing_context(zserio_context.routing_lane_range_sets)
        if self.is_routing_transition_sets_used():
            self._routing_transition_sets_.init_packing_context(zserio_context.routing_transition_sets)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_routing_lane_range_maps_used():
            end_bitposition += self._routing_lane_range_maps_.bitsizeof(end_bitposition)
        if self.is_routing_transition_maps_used():
            end_bitposition += self._routing_transition_maps_.bitsizeof(end_bitposition)
        if self.is_routing_lane_range_sets_used():
            end_bitposition += self._routing_lane_range_sets_.bitsizeof(end_bitposition)
        if self.is_routing_transition_sets_used():
            end_bitposition += self._routing_transition_sets_.bitsizeof(end_bitposition)
        if self.is_profiles_used():
            end_bitposition += self._profiles_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LaneRoutingLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_routing_lane_range_maps_used():
            end_bitposition += self._routing_lane_range_maps_.bitsizeof_packed(zserio_context.routing_lane_range_maps, end_bitposition)
        if self.is_routing_transition_maps_used():
            end_bitposition += self._routing_transition_maps_.bitsizeof_packed(zserio_context.routing_transition_maps, end_bitposition)
        if self.is_routing_lane_range_sets_used():
            end_bitposition += self._routing_lane_range_sets_.bitsizeof_packed(zserio_context.routing_lane_range_sets, end_bitposition)
        if self.is_routing_transition_sets_used():
            end_bitposition += self._routing_transition_sets_.bitsizeof_packed(zserio_context.routing_transition_sets, end_bitposition)
        if self.is_profiles_used():
            end_bitposition += self._profiles_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_routing_lane_range_maps_used():
            end_bitposition = self._routing_lane_range_maps_.initialize_offsets(end_bitposition)
        if self.is_routing_transition_maps_used():
            end_bitposition = self._routing_transition_maps_.initialize_offsets(end_bitposition)
        if self.is_routing_lane_range_sets_used():
            end_bitposition = self._routing_lane_range_sets_.initialize_offsets(end_bitposition)
        if self.is_routing_transition_sets_used():
            end_bitposition = self._routing_transition_sets_.initialize_offsets(end_bitposition)
        if self.is_profiles_used():
            end_bitposition = self._profiles_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LaneRoutingLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_routing_lane_range_maps_used():
            end_bitposition = self._routing_lane_range_maps_.initialize_offsets_packed(zserio_context.routing_lane_range_maps, end_bitposition)
        if self.is_routing_transition_maps_used():
            end_bitposition = self._routing_transition_maps_.initialize_offsets_packed(zserio_context.routing_transition_maps, end_bitposition)
        if self.is_routing_lane_range_sets_used():
            end_bitposition = self._routing_lane_range_sets_.initialize_offsets_packed(zserio_context.routing_lane_range_sets, end_bitposition)
        if self.is_routing_transition_sets_used():
            end_bitposition = self._routing_transition_sets_.initialize_offsets_packed(zserio_context.routing_transition_sets, end_bitposition)
        if self.is_profiles_used():
            end_bitposition = self._profiles_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.from_reader(zserio_reader)
        if self.is_routing_lane_range_maps_used():
            self._routing_lane_range_maps_ = nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._routing_lane_range_maps_ = None
        if self.is_routing_transition_maps_used():
            self._routing_transition_maps_ = nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._routing_transition_maps_ = None
        if self.is_routing_lane_range_sets_used():
            self._routing_lane_range_sets_ = nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._routing_lane_range_sets_ = None
        if self.is_routing_transition_sets_used():
            self._routing_transition_sets_ = nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._routing_transition_sets_ = None
        if self.is_profiles_used():
            self._profiles_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_profiles()), zserio_reader, is_auto=True)
        else:
            self._profiles_ = None

    def read_packed(self, zserio_context: LaneRoutingLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.routingdata.metadata.lane_routing_layer_content.LaneRoutingLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_routing_lane_range_maps_used():
            self._routing_lane_range_maps_ = nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList.from_reader_packed(zserio_context.routing_lane_range_maps, zserio_reader, 0)
        else:
            self._routing_lane_range_maps_ = None

        if self.is_routing_transition_maps_used():
            self._routing_transition_maps_ = nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList.from_reader_packed(zserio_context.routing_transition_maps, zserio_reader, 0)
        else:
            self._routing_transition_maps_ = None

        if self.is_routing_lane_range_sets_used():
            self._routing_lane_range_sets_ = nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList.from_reader_packed(zserio_context.routing_lane_range_sets, zserio_reader, 0)
        else:
            self._routing_lane_range_sets_ = None

        if self.is_routing_transition_sets_used():
            self._routing_transition_sets_ = nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList.from_reader_packed(zserio_context.routing_transition_sets, zserio_reader, 0)
        else:
            self._routing_transition_sets_ = None

        if self.is_profiles_used():
            self._profiles_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_profiles()), zserio_reader, is_auto=True)
        else:
            self._profiles_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)

        if self.is_routing_lane_range_maps_used():
            # check parameters
            if self._routing_lane_range_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeMaps: "
                                                    f"{self._routing_lane_range_maps_.coord_shift} != {0}!")
            self._routing_lane_range_maps_.write(zserio_writer)

        if self.is_routing_transition_maps_used():
            # check parameters
            if self._routing_transition_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionMaps: "
                                                    f"{self._routing_transition_maps_.coord_shift} != {0}!")
            self._routing_transition_maps_.write(zserio_writer)

        if self.is_routing_lane_range_sets_used():
            # check parameters
            if self._routing_lane_range_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeSets: "
                                                    f"{self._routing_lane_range_sets_.coord_shift} != {0}!")
            self._routing_lane_range_sets_.write(zserio_writer)

        if self.is_routing_transition_sets_used():
            # check parameters
            if self._routing_transition_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionSets: "
                                                    f"{self._routing_transition_sets_.coord_shift} != {0}!")
            self._routing_transition_sets_.write(zserio_writer)

        if self.is_profiles_used():
            self._profiles_.write(zserio_writer)

    def write_packed(self, zserio_context: LaneRoutingLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_routing_lane_range_maps_used():
            # check parameters
            if self._routing_lane_range_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeMaps: "
                                                    f"{self._routing_lane_range_maps_.coord_shift} != {0}!")
            self._routing_lane_range_maps_.write_packed(zserio_context.routing_lane_range_maps, zserio_writer)

        if self.is_routing_transition_maps_used():
            # check parameters
            if self._routing_transition_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionMaps: "
                                                    f"{self._routing_transition_maps_.coord_shift} != {0}!")
            self._routing_transition_maps_.write_packed(zserio_context.routing_transition_maps, zserio_writer)

        if self.is_routing_lane_range_sets_used():
            # check parameters
            if self._routing_lane_range_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeSets: "
                                                    f"{self._routing_lane_range_sets_.coord_shift} != {0}!")
            self._routing_lane_range_sets_.write_packed(zserio_context.routing_lane_range_sets, zserio_writer)

        if self.is_routing_transition_sets_used():
            # check parameters
            if self._routing_transition_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionSets: "
                                                    f"{self._routing_transition_sets_.coord_shift} != {0}!")
            self._routing_transition_sets_.write_packed(zserio_context.routing_transition_sets, zserio_writer)

        if self.is_profiles_used():
            self._profiles_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._routing_lane_range_maps_ = nds.routingdata.instantiations.routing_lane_range_attribute_map_list.RoutingLaneRangeAttributeMapList.ZserioPackingContext()
            self._routing_transition_maps_ = nds.routingdata.instantiations.routing_lane_transition_attribute_map_list.RoutingLaneTransitionAttributeMapList.ZserioPackingContext()
            self._routing_lane_range_sets_ = nds.routingdata.instantiations.routing_lane_range_attribute_set_list.RoutingLaneRangeAttributeSetList.ZserioPackingContext()
            self._routing_transition_sets_ = nds.routingdata.instantiations.routing_lane_transition_attribute_set_list.RoutingLaneTransitionAttributeSetList.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def routing_lane_range_maps(self):
            return self._routing_lane_range_maps_

        @property
        def routing_transition_maps(self):
            return self._routing_transition_maps_

        @property
        def routing_lane_range_sets(self):
            return self._routing_lane_range_sets_

        @property
        def routing_transition_sets(self):
            return self._routing_transition_sets_

    class _ZserioElementFactory_profiles:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routingdata.types.speed_profile.SpeedProfile:
            del zserio_index
            return nds.routingdata.types.speed_profile.SpeedProfile.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routingdata.types.speed_profile.SpeedProfile.ZserioPackingContext:
            return nds.routingdata.types.speed_profile.SpeedProfile.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routingdata.types.speed_profile.SpeedProfile.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routingdata.types.speed_profile.SpeedProfile:
            del zserio_index
            return nds.routingdata.types.speed_profile.SpeedProfile.from_reader_packed(zserio_context, zserio_reader)
