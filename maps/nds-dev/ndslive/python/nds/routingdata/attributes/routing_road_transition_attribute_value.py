# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.seconds
import nds.routingdata.attributes.routing_road_transition_attribute_type
import nds.routingdata.types.special_transition_code
import nds.routingdata.types.speed_variation

class RoutingRoadTransitionAttributeValue:
    def __init__(
            self,
            type_: nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType,
            *,
            special_transition_code_: typing.Union[nds.routingdata.types.special_transition_code.SpecialTransitionCode, None] = None,
            speed_variation_: typing.Union[nds.routingdata.types.speed_variation.SpeedVariation, None] = None,
            transition_duration_: typing.Union[nds.core.types.seconds.Seconds, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if special_transition_code_ is not None:
            self._choice = special_transition_code_
        if speed_variation_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadTransitionAttributeValue is ambiguous!")
            self._choice = speed_variation_
        if transition_duration_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadTransitionAttributeValue is ambiguous!")
            self._choice = transition_duration_

    @classmethod
    def from_reader(
            cls: typing.Type['RoutingRoadTransitionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType) -> 'RoutingRoadTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoutingRoadTransitionAttributeValue'],
            zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType) -> 'RoutingRoadTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoutingRoadTransitionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType:
        return self._type_

    @property
    def special_transition_code(self) -> typing.Union[nds.routingdata.types.special_transition_code.SpecialTransitionCode, None]:
        return self._choice

    @special_transition_code.setter
    def special_transition_code(self, special_transition_code_: typing.Union[nds.routingdata.types.special_transition_code.SpecialTransitionCode, None]) -> None:
        self._choice = special_transition_code_

    @property
    def speed_variation(self) -> nds.routingdata.types.speed_variation.SpeedVariation:
        return self._choice

    @speed_variation.setter
    def speed_variation(self, speed_variation_: nds.routingdata.types.speed_variation.SpeedVariation) -> None:
        self._choice = speed_variation_

    @property
    def transition_duration(self) -> nds.core.types.seconds.Seconds:
        return self._choice

    @transition_duration.setter
    def transition_duration(self, transition_duration_: nds.core.types.seconds.Seconds) -> None:
        self._choice = transition_duration_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            return self.CHOICE_SPECIAL_TRANSITION_CODE
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            return self.CHOICE_SPEED_VARIATION
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            return self.CHOICE_TRANSITION_DURATION
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            self._choice.init_packing_context(zserio_context.special_transition_code)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_context.speed_variation.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            zserio_context.transition_duration.init(zserio.array.VarUIntArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.special_transition_code, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += zserio_context.speed_variation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            end_bitposition += zserio_context.transition_duration.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.special_transition_code, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += zserio_context.speed_variation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            end_bitposition += zserio_context.transition_duration.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            self._choice = nds.routingdata.types.special_transition_code.SpecialTransitionCode.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            self._choice = zserio_reader.read_varuint()
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

    def read_packed(self, zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            self._choice = nds.routingdata.types.special_transition_code.SpecialTransitionCode.from_reader_packed(zserio_context.special_transition_code, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            self._choice = zserio_context.speed_variation.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            self._choice = zserio_context.transition_duration.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            zserio_writer.write_varuint(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

    def write_packed(self, zserio_context: RoutingRoadTransitionAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.SPECIAL_TRANSITION_CODE):
            self._choice.write_packed(zserio_context.special_transition_code, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_context.speed_variation.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_transition_attribute_type.RoutingRoadTransitionAttributeType.TRANSITION_DURATION):
            zserio_context.transition_duration.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadTransitionAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._special_transition_code_ = zserio.array.DeltaContext()
            self._speed_variation_ = zserio.array.DeltaContext()
            self._transition_duration_ = zserio.array.DeltaContext()

        @property
        def special_transition_code(self):
            return self._special_transition_code_

        @property
        def speed_variation(self):
            return self._speed_variation_

        @property
        def transition_duration(self):
            return self._transition_duration_

    CHOICE_SPECIAL_TRANSITION_CODE = 0
    CHOICE_SPEED_VARIATION = 1
    CHOICE_TRANSITION_DURATION = 2
    UNDEFINED_CHOICE = -1
