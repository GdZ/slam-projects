# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RoutingLaneRangeAttributeType(zserio.Enum):
    PLURAL_JUNCTION = 0
    CONSUMPTION_UP_EXCESS_SLOPE = 1
    CONSUMPTION_DOWN_EXCESS_SLOPE = 2
    CONSUMPTION_SPEED_VARIATION = 3
    CONSUMPTION_SPEED_DEPENDENCY = 4
    CONSUMPTION_AVERAGE_SLOPE = 5
    TOURIST_ROUTE_TYPE = 6
    NUM_TOLL_GATES = 7
    NUM_TRAFFIC_LIGHTS = 8
    NUM_GIVE_RIGHT_OF_WAY = 9
    NUM_SPEED_CAMERAS = 10
    NUM_SPEED_ZONES = 11
    NUM_RAILWAY_CROSSINGS = 12
    NUM_STATIONS = 13
    SPEED_PROFILES_WEEK = 14
    SPEED_PROFILES_DAYS = 15

    @classmethod
    def from_name(cls: typing.Type['RoutingLaneRangeAttributeType'], item_name: str) -> 'RoutingLaneRangeAttributeType':
        if item_name == 'PLURAL_JUNCTION':
            item = RoutingLaneRangeAttributeType.PLURAL_JUNCTION
        elif item_name == 'CONSUMPTION_UP_EXCESS_SLOPE':
            item = RoutingLaneRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE
        elif item_name == 'CONSUMPTION_DOWN_EXCESS_SLOPE':
            item = RoutingLaneRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE
        elif item_name == 'CONSUMPTION_SPEED_VARIATION':
            item = RoutingLaneRangeAttributeType.CONSUMPTION_SPEED_VARIATION
        elif item_name == 'CONSUMPTION_SPEED_DEPENDENCY':
            item = RoutingLaneRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY
        elif item_name == 'CONSUMPTION_AVERAGE_SLOPE':
            item = RoutingLaneRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE
        elif item_name == 'TOURIST_ROUTE_TYPE':
            item = RoutingLaneRangeAttributeType.TOURIST_ROUTE_TYPE
        elif item_name == 'NUM_TOLL_GATES':
            item = RoutingLaneRangeAttributeType.NUM_TOLL_GATES
        elif item_name == 'NUM_TRAFFIC_LIGHTS':
            item = RoutingLaneRangeAttributeType.NUM_TRAFFIC_LIGHTS
        elif item_name == 'NUM_GIVE_RIGHT_OF_WAY':
            item = RoutingLaneRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY
        elif item_name == 'NUM_SPEED_CAMERAS':
            item = RoutingLaneRangeAttributeType.NUM_SPEED_CAMERAS
        elif item_name == 'NUM_SPEED_ZONES':
            item = RoutingLaneRangeAttributeType.NUM_SPEED_ZONES
        elif item_name == 'NUM_RAILWAY_CROSSINGS':
            item = RoutingLaneRangeAttributeType.NUM_RAILWAY_CROSSINGS
        elif item_name == 'NUM_STATIONS':
            item = RoutingLaneRangeAttributeType.NUM_STATIONS
        elif item_name == 'SPEED_PROFILES_WEEK':
            item = RoutingLaneRangeAttributeType.SPEED_PROFILES_WEEK
        elif item_name == 'SPEED_PROFILES_DAYS':
            item = RoutingLaneRangeAttributeType.SPEED_PROFILES_DAYS
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RoutingLaneRangeAttributeType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RoutingLaneRangeAttributeType'], reader: zserio.BitStreamReader) -> 'RoutingLaneRangeAttributeType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['RoutingLaneRangeAttributeType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RoutingLaneRangeAttributeType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
