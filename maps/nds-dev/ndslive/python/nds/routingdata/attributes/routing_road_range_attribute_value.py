# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.slope
import nds.routingdata.attributes.routing_road_range_attribute_type
import nds.routingdata.types.consumption_speed_dependency_curve
import nds.routingdata.types.excess_slope
import nds.routingdata.types.plural_junction
import nds.routingdata.types.speed_profiles_days
import nds.routingdata.types.speed_profiles_week
import nds.routingdata.types.speed_variation
import nds.routingdata.types.tourist_route_type

class RoutingRoadRangeAttributeValue:
    def __init__(
            self,
            type_: nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType,
            *,
            plural_junction_: typing.Union[nds.routingdata.types.plural_junction.PluralJunction, None] = None,
            up_excess_slope_: typing.Union[nds.routingdata.types.excess_slope.ExcessSlope, None] = None,
            down_excess_slope_: typing.Union[nds.routingdata.types.excess_slope.ExcessSlope, None] = None,
            speed_variation_: typing.Union[nds.routingdata.types.speed_variation.SpeedVariation, None] = None,
            consumption_speed_dependency_curve_: typing.Union[nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve, None] = None,
            average_slope_: typing.Union[nds.core.types.slope.Slope, None] = None,
            tourist_route_type_: typing.Union[nds.routingdata.types.tourist_route_type.TouristRouteType, None] = None,
            num_toll_gates_: typing.Union[int, None] = None,
            num_traffic_lights_: typing.Union[int, None] = None,
            num_give_right_of_way_: typing.Union[int, None] = None,
            num_speed_cameras_: typing.Union[int, None] = None,
            num_speed_zones_: typing.Union[int, None] = None,
            num_railway_crossings_: typing.Union[int, None] = None,
            num_stations_: typing.Union[int, None] = None,
            speed_profiles_week_: typing.Union[nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek, None] = None,
            speed_profiles_days_: typing.Union[nds.routingdata.types.speed_profiles_days.SpeedProfilesDays, None] = None,
            num_normal_lanes_: typing.Union[int, None] = None,
            num_entry_exit_lanes_: typing.Union[int, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if plural_junction_ is not None:
            self._choice = plural_junction_
        if up_excess_slope_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = up_excess_slope_
        if down_excess_slope_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = down_excess_slope_
        if speed_variation_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = speed_variation_
        if consumption_speed_dependency_curve_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = consumption_speed_dependency_curve_
        if average_slope_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = average_slope_
        if tourist_route_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = tourist_route_type_
        if num_toll_gates_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_toll_gates_
        if num_traffic_lights_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_traffic_lights_
        if num_give_right_of_way_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_give_right_of_way_
        if num_speed_cameras_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_speed_cameras_
        if num_speed_zones_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_speed_zones_
        if num_railway_crossings_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_railway_crossings_
        if num_stations_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_stations_
        if speed_profiles_week_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = speed_profiles_week_
        if speed_profiles_days_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = speed_profiles_days_
        if num_normal_lanes_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_normal_lanes_
        if num_entry_exit_lanes_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RoutingRoadRangeAttributeValue is ambiguous!")
            self._choice = num_entry_exit_lanes_

    @classmethod
    def from_reader(
            cls: typing.Type['RoutingRoadRangeAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType) -> 'RoutingRoadRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoutingRoadRangeAttributeValue'],
            zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType) -> 'RoutingRoadRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoutingRoadRangeAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType:
        return self._type_

    @property
    def plural_junction(self) -> typing.Union[nds.routingdata.types.plural_junction.PluralJunction, None]:
        return self._choice

    @plural_junction.setter
    def plural_junction(self, plural_junction_: typing.Union[nds.routingdata.types.plural_junction.PluralJunction, None]) -> None:
        self._choice = plural_junction_

    @property
    def up_excess_slope(self) -> nds.routingdata.types.excess_slope.ExcessSlope:
        return self._choice

    @up_excess_slope.setter
    def up_excess_slope(self, up_excess_slope_: nds.routingdata.types.excess_slope.ExcessSlope) -> None:
        self._choice = up_excess_slope_

    @property
    def down_excess_slope(self) -> nds.routingdata.types.excess_slope.ExcessSlope:
        return self._choice

    @down_excess_slope.setter
    def down_excess_slope(self, down_excess_slope_: nds.routingdata.types.excess_slope.ExcessSlope) -> None:
        self._choice = down_excess_slope_

    @property
    def speed_variation(self) -> nds.routingdata.types.speed_variation.SpeedVariation:
        return self._choice

    @speed_variation.setter
    def speed_variation(self, speed_variation_: nds.routingdata.types.speed_variation.SpeedVariation) -> None:
        self._choice = speed_variation_

    @property
    def consumption_speed_dependency_curve(self) -> typing.Union[nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve, None]:
        return self._choice

    @consumption_speed_dependency_curve.setter
    def consumption_speed_dependency_curve(self, consumption_speed_dependency_curve_: typing.Union[nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve, None]) -> None:
        self._choice = consumption_speed_dependency_curve_

    @property
    def average_slope(self) -> nds.core.types.slope.Slope:
        return self._choice

    @average_slope.setter
    def average_slope(self, average_slope_: nds.core.types.slope.Slope) -> None:
        self._choice = average_slope_

    @property
    def tourist_route_type(self) -> typing.Union[nds.routingdata.types.tourist_route_type.TouristRouteType, None]:
        return self._choice

    @tourist_route_type.setter
    def tourist_route_type(self, tourist_route_type_: typing.Union[nds.routingdata.types.tourist_route_type.TouristRouteType, None]) -> None:
        self._choice = tourist_route_type_

    @property
    def num_toll_gates(self) -> int:
        return self._choice

    @num_toll_gates.setter
    def num_toll_gates(self, num_toll_gates_: int) -> None:
        self._choice = num_toll_gates_

    @property
    def num_traffic_lights(self) -> int:
        return self._choice

    @num_traffic_lights.setter
    def num_traffic_lights(self, num_traffic_lights_: int) -> None:
        self._choice = num_traffic_lights_

    @property
    def num_give_right_of_way(self) -> int:
        return self._choice

    @num_give_right_of_way.setter
    def num_give_right_of_way(self, num_give_right_of_way_: int) -> None:
        self._choice = num_give_right_of_way_

    @property
    def num_speed_cameras(self) -> int:
        return self._choice

    @num_speed_cameras.setter
    def num_speed_cameras(self, num_speed_cameras_: int) -> None:
        self._choice = num_speed_cameras_

    @property
    def num_speed_zones(self) -> int:
        return self._choice

    @num_speed_zones.setter
    def num_speed_zones(self, num_speed_zones_: int) -> None:
        self._choice = num_speed_zones_

    @property
    def num_railway_crossings(self) -> int:
        return self._choice

    @num_railway_crossings.setter
    def num_railway_crossings(self, num_railway_crossings_: int) -> None:
        self._choice = num_railway_crossings_

    @property
    def num_stations(self) -> int:
        return self._choice

    @num_stations.setter
    def num_stations(self, num_stations_: int) -> None:
        self._choice = num_stations_

    @property
    def speed_profiles_week(self) -> typing.Union[nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek, None]:
        return self._choice

    @speed_profiles_week.setter
    def speed_profiles_week(self, speed_profiles_week_: typing.Union[nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek, None]) -> None:
        self._choice = speed_profiles_week_

    @property
    def speed_profiles_days(self) -> typing.Union[nds.routingdata.types.speed_profiles_days.SpeedProfilesDays, None]:
        return self._choice

    @speed_profiles_days.setter
    def speed_profiles_days(self, speed_profiles_days_: typing.Union[nds.routingdata.types.speed_profiles_days.SpeedProfilesDays, None]) -> None:
        self._choice = speed_profiles_days_

    @property
    def num_normal_lanes(self) -> int:
        return self._choice

    @num_normal_lanes.setter
    def num_normal_lanes(self, num_normal_lanes_: int) -> None:
        self._choice = num_normal_lanes_

    @property
    def num_entry_exit_lanes(self) -> int:
        return self._choice

    @num_entry_exit_lanes.setter
    def num_entry_exit_lanes(self, num_entry_exit_lanes_: int) -> None:
        self._choice = num_entry_exit_lanes_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            return self.CHOICE_PLURAL_JUNCTION
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            return self.CHOICE_UP_EXCESS_SLOPE
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            return self.CHOICE_DOWN_EXCESS_SLOPE
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            return self.CHOICE_SPEED_VARIATION
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            return self.CHOICE_CONSUMPTION_SPEED_DEPENDENCY_CURVE
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            return self.CHOICE_AVERAGE_SLOPE
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            return self.CHOICE_TOURIST_ROUTE_TYPE
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            return self.CHOICE_NUM_TOLL_GATES
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            return self.CHOICE_NUM_TRAFFIC_LIGHTS
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            return self.CHOICE_NUM_GIVE_RIGHT_OF_WAY
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            return self.CHOICE_NUM_SPEED_CAMERAS
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            return self.CHOICE_NUM_SPEED_ZONES
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            return self.CHOICE_NUM_RAILWAY_CROSSINGS
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            return self.CHOICE_NUM_STATIONS
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            return self.CHOICE_SPEED_PROFILES_WEEK
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            return self.CHOICE_SPEED_PROFILES_DAYS
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            return self.CHOICE_NUM_NORMAL_LANES
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            return self.CHOICE_NUM_ENTRY_EXIT_LANES
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            self._choice.init_packing_context(zserio_context.plural_junction)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            zserio_context.up_excess_slope.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            zserio_context.down_excess_slope.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_context.speed_variation.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            self._choice.init_packing_context(zserio_context.consumption_speed_dependency_curve)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            zserio_context.average_slope.init(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            self._choice.init_packing_context(zserio_context.tourist_route_type)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            zserio_context.num_toll_gates.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            zserio_context.num_traffic_lights.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            zserio_context.num_give_right_of_way.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            zserio_context.num_speed_cameras.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            zserio_context.num_speed_zones.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            zserio_context.num_railway_crossings.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            zserio_context.num_stations.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            self._choice.init_packing_context(zserio_context.speed_profiles_week)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            self._choice.init_packing_context(zserio_context.speed_profiles_days)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            zserio_context.num_normal_lanes.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            zserio_context.num_entry_exit_lanes.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.plural_junction, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            end_bitposition += zserio_context.up_excess_slope.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            end_bitposition += zserio_context.down_excess_slope.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += zserio_context.speed_variation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.consumption_speed_dependency_curve, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            end_bitposition += zserio_context.average_slope.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.tourist_route_type, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            end_bitposition += zserio_context.num_toll_gates.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            end_bitposition += zserio_context.num_traffic_lights.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            end_bitposition += zserio_context.num_give_right_of_way.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            end_bitposition += zserio_context.num_speed_cameras.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            end_bitposition += zserio_context.num_speed_zones.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            end_bitposition += zserio_context.num_railway_crossings.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            end_bitposition += zserio_context.num_stations.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.speed_profiles_week, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.speed_profiles_days, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            end_bitposition += zserio_context.num_normal_lanes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            end_bitposition += zserio_context.num_entry_exit_lanes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            end_bitposition += 8
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.plural_junction, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            end_bitposition += zserio_context.up_excess_slope.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            end_bitposition += zserio_context.down_excess_slope.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            end_bitposition += zserio_context.speed_variation.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.consumption_speed_dependency_curve, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            end_bitposition += zserio_context.average_slope.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.tourist_route_type, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            end_bitposition += zserio_context.num_toll_gates.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            end_bitposition += zserio_context.num_traffic_lights.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            end_bitposition += zserio_context.num_give_right_of_way.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            end_bitposition += zserio_context.num_speed_cameras.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            end_bitposition += zserio_context.num_speed_zones.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            end_bitposition += zserio_context.num_railway_crossings.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            end_bitposition += zserio_context.num_stations.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.speed_profiles_week, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.speed_profiles_days, end_bitposition)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            end_bitposition += zserio_context.num_normal_lanes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            end_bitposition += zserio_context.num_entry_exit_lanes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            self._choice = nds.routingdata.types.plural_junction.PluralJunction.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            self._choice = nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            self._choice = zserio_reader.read_signed_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            self._choice = nds.routingdata.types.tourist_route_type.TouristRouteType.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            self._choice = nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            self._choice = nds.routingdata.types.speed_profiles_days.SpeedProfilesDays.from_reader(zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            self._choice = zserio_reader.read_bits(8)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

    def read_packed(self, zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            self._choice = nds.routingdata.types.plural_junction.PluralJunction.from_reader_packed(zserio_context.plural_junction, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            self._choice = zserio_context.up_excess_slope.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            self._choice = zserio_context.down_excess_slope.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            self._choice = zserio_context.speed_variation.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            self._choice = nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve.from_reader_packed(zserio_context.consumption_speed_dependency_curve, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            self._choice = zserio_context.average_slope.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            self._choice = nds.routingdata.types.tourist_route_type.TouristRouteType.from_reader_packed(zserio_context.tourist_route_type, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            self._choice = zserio_context.num_toll_gates.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            self._choice = zserio_context.num_traffic_lights.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            self._choice = zserio_context.num_give_right_of_way.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            self._choice = zserio_context.num_speed_cameras.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            self._choice = zserio_context.num_speed_zones.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            self._choice = zserio_context.num_railway_crossings.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            self._choice = zserio_context.num_stations.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            self._choice = nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek.from_reader_packed(zserio_context.speed_profiles_week, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            self._choice = nds.routingdata.types.speed_profiles_days.SpeedProfilesDays.from_reader_packed(zserio_context.speed_profiles_days, zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            self._choice = zserio_context.num_normal_lanes.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            self._choice = zserio_context.num_entry_exit_lanes.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            zserio_writer.write_signed_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            self._choice.write(zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            zserio_writer.write_bits(self._choice, 8)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

    def write_packed(self, zserio_context: RoutingRoadRangeAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.PLURAL_JUNCTION):
            self._choice.write_packed(zserio_context.plural_junction, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_UP_EXCESS_SLOPE):
            zserio_context.up_excess_slope.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_DOWN_EXCESS_SLOPE):
            zserio_context.down_excess_slope.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_VARIATION):
            zserio_context.speed_variation.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_SPEED_DEPENDENCY):
            self._choice.write_packed(zserio_context.consumption_speed_dependency_curve, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.CONSUMPTION_AVERAGE_SLOPE):
            zserio_context.average_slope.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.TOURIST_ROUTE_TYPE):
            self._choice.write_packed(zserio_context.tourist_route_type, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TOLL_GATES):
            zserio_context.num_toll_gates.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_TRAFFIC_LIGHTS):
            zserio_context.num_traffic_lights.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_GIVE_RIGHT_OF_WAY):
            zserio_context.num_give_right_of_way.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_CAMERAS):
            zserio_context.num_speed_cameras.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_SPEED_ZONES):
            zserio_context.num_speed_zones.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_RAILWAY_CROSSINGS):
            zserio_context.num_railway_crossings.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_STATIONS):
            zserio_context.num_stations.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_WEEK):
            self._choice.write_packed(zserio_context.speed_profiles_week, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.SPEED_PROFILES_DAYS):
            self._choice.write_packed(zserio_context.speed_profiles_days, zserio_writer)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_NORMAL_LANES):
            zserio_context.num_normal_lanes.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.routingdata.attributes.routing_road_range_attribute_type.RoutingRoadRangeAttributeType.NUM_ENTRY_EXIT_LANES):
            zserio_context.num_entry_exit_lanes.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice RoutingRoadRangeAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._plural_junction_ = zserio.array.DeltaContext()
            self._up_excess_slope_ = zserio.array.DeltaContext()
            self._down_excess_slope_ = zserio.array.DeltaContext()
            self._speed_variation_ = zserio.array.DeltaContext()
            self._consumption_speed_dependency_curve_ = nds.routingdata.types.consumption_speed_dependency_curve.ConsumptionSpeedDependencyCurve.ZserioPackingContext()
            self._average_slope_ = zserio.array.DeltaContext()
            self._tourist_route_type_ = zserio.array.DeltaContext()
            self._num_toll_gates_ = zserio.array.DeltaContext()
            self._num_traffic_lights_ = zserio.array.DeltaContext()
            self._num_give_right_of_way_ = zserio.array.DeltaContext()
            self._num_speed_cameras_ = zserio.array.DeltaContext()
            self._num_speed_zones_ = zserio.array.DeltaContext()
            self._num_railway_crossings_ = zserio.array.DeltaContext()
            self._num_stations_ = zserio.array.DeltaContext()
            self._speed_profiles_week_ = nds.routingdata.types.speed_profiles_week.SpeedProfilesWeek.ZserioPackingContext()
            self._speed_profiles_days_ = nds.routingdata.types.speed_profiles_days.SpeedProfilesDays.ZserioPackingContext()
            self._num_normal_lanes_ = zserio.array.DeltaContext()
            self._num_entry_exit_lanes_ = zserio.array.DeltaContext()

        @property
        def plural_junction(self):
            return self._plural_junction_

        @property
        def up_excess_slope(self):
            return self._up_excess_slope_

        @property
        def down_excess_slope(self):
            return self._down_excess_slope_

        @property
        def speed_variation(self):
            return self._speed_variation_

        @property
        def consumption_speed_dependency_curve(self):
            return self._consumption_speed_dependency_curve_

        @property
        def average_slope(self):
            return self._average_slope_

        @property
        def tourist_route_type(self):
            return self._tourist_route_type_

        @property
        def num_toll_gates(self):
            return self._num_toll_gates_

        @property
        def num_traffic_lights(self):
            return self._num_traffic_lights_

        @property
        def num_give_right_of_way(self):
            return self._num_give_right_of_way_

        @property
        def num_speed_cameras(self):
            return self._num_speed_cameras_

        @property
        def num_speed_zones(self):
            return self._num_speed_zones_

        @property
        def num_railway_crossings(self):
            return self._num_railway_crossings_

        @property
        def num_stations(self):
            return self._num_stations_

        @property
        def speed_profiles_week(self):
            return self._speed_profiles_week_

        @property
        def speed_profiles_days(self):
            return self._speed_profiles_days_

        @property
        def num_normal_lanes(self):
            return self._num_normal_lanes_

        @property
        def num_entry_exit_lanes(self):
            return self._num_entry_exit_lanes_

    CHOICE_PLURAL_JUNCTION = 0
    CHOICE_UP_EXCESS_SLOPE = 1
    CHOICE_DOWN_EXCESS_SLOPE = 2
    CHOICE_SPEED_VARIATION = 3
    CHOICE_CONSUMPTION_SPEED_DEPENDENCY_CURVE = 4
    CHOICE_AVERAGE_SLOPE = 5
    CHOICE_TOURIST_ROUTE_TYPE = 6
    CHOICE_NUM_TOLL_GATES = 7
    CHOICE_NUM_TRAFFIC_LIGHTS = 8
    CHOICE_NUM_GIVE_RIGHT_OF_WAY = 9
    CHOICE_NUM_SPEED_CAMERAS = 10
    CHOICE_NUM_SPEED_ZONES = 11
    CHOICE_NUM_RAILWAY_CROSSINGS = 12
    CHOICE_NUM_STATIONS = 13
    CHOICE_SPEED_PROFILES_WEEK = 14
    CHOICE_SPEED_PROFILES_DAYS = 15
    CHOICE_NUM_NORMAL_LANES = 16
    CHOICE_NUM_ENTRY_EXIT_LANES = 17
    UNDEFINED_CHOICE = -1
