# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.conditions.days_of_week
import nds.core.types.speed_kmh
import nds.routingdata.types.speed_profile_id

class SpeedProfilesWeek:
    def __init__(
            self,
            days_of_week_: typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None] = None,
            base_speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_sunday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_sunday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_monday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_monday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_tuesday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_tuesday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_wednesday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_wednesday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_thursday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_thursday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_friday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_friday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            profile_saturday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None,
            avg_speed_saturday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None) -> None:
        self._days_of_week_ = days_of_week_
        self._base_speed_ = base_speed_
        self._profile_sunday_ = profile_sunday_
        self._avg_speed_sunday_ = avg_speed_sunday_
        self._profile_monday_ = profile_monday_
        self._avg_speed_monday_ = avg_speed_monday_
        self._profile_tuesday_ = profile_tuesday_
        self._avg_speed_tuesday_ = avg_speed_tuesday_
        self._profile_wednesday_ = profile_wednesday_
        self._avg_speed_wednesday_ = avg_speed_wednesday_
        self._profile_thursday_ = profile_thursday_
        self._avg_speed_thursday_ = avg_speed_thursday_
        self._profile_friday_ = profile_friday_
        self._avg_speed_friday_ = avg_speed_friday_
        self._profile_saturday_ = profile_saturday_
        self._avg_speed_saturday_ = avg_speed_saturday_

    @classmethod
    def from_reader(
            cls: typing.Type['SpeedProfilesWeek'],
            zserio_reader: zserio.BitStreamReader) -> 'SpeedProfilesWeek':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SpeedProfilesWeek'],
            zserio_context: SpeedProfilesWeek.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SpeedProfilesWeek':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SpeedProfilesWeek):
            return ((self._days_of_week_ == other._days_of_week_) and
                    (not other.is_base_speed_used() if not self.is_base_speed_used() else (self._base_speed_ == other._base_speed_)) and
                    (not other.is_profile_sunday_used() if not self.is_profile_sunday_used() else (self._profile_sunday_ == other._profile_sunday_)) and
                    (not other.is_avg_speed_sunday_used() if not self.is_avg_speed_sunday_used() else (self._avg_speed_sunday_ == other._avg_speed_sunday_)) and
                    (not other.is_profile_monday_used() if not self.is_profile_monday_used() else (self._profile_monday_ == other._profile_monday_)) and
                    (not other.is_avg_speed_monday_used() if not self.is_avg_speed_monday_used() else (self._avg_speed_monday_ == other._avg_speed_monday_)) and
                    (not other.is_profile_tuesday_used() if not self.is_profile_tuesday_used() else (self._profile_tuesday_ == other._profile_tuesday_)) and
                    (not other.is_avg_speed_tuesday_used() if not self.is_avg_speed_tuesday_used() else (self._avg_speed_tuesday_ == other._avg_speed_tuesday_)) and
                    (not other.is_profile_wednesday_used() if not self.is_profile_wednesday_used() else (self._profile_wednesday_ == other._profile_wednesday_)) and
                    (not other.is_avg_speed_wednesday_used() if not self.is_avg_speed_wednesday_used() else (self._avg_speed_wednesday_ == other._avg_speed_wednesday_)) and
                    (not other.is_profile_thursday_used() if not self.is_profile_thursday_used() else (self._profile_thursday_ == other._profile_thursday_)) and
                    (not other.is_avg_speed_thursday_used() if not self.is_avg_speed_thursday_used() else (self._avg_speed_thursday_ == other._avg_speed_thursday_)) and
                    (not other.is_profile_friday_used() if not self.is_profile_friday_used() else (self._profile_friday_ == other._profile_friday_)) and
                    (not other.is_avg_speed_friday_used() if not self.is_avg_speed_friday_used() else (self._avg_speed_friday_ == other._avg_speed_friday_)) and
                    (not other.is_profile_saturday_used() if not self.is_profile_saturday_used() else (self._profile_saturday_ == other._profile_saturday_)) and
                    (not other.is_avg_speed_saturday_used() if not self.is_avg_speed_saturday_used() else (self._avg_speed_saturday_ == other._avg_speed_saturday_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._days_of_week_)
        if self.is_base_speed_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._base_speed_)
        if self.is_profile_sunday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_sunday_)
        if self.is_profile_monday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_monday_)
        if self.is_avg_speed_monday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_monday_)
        if self.is_profile_tuesday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_tuesday_)
        if self.is_profile_wednesday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_wednesday_)
        if self.is_profile_thursday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_thursday_)
        if self.is_profile_friday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_friday_)
        if self.is_avg_speed_friday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_friday_)
        if self.is_profile_saturday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._avg_speed_saturday_)

        return result

    @property
    def days_of_week(self) -> typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None]:
        return self._days_of_week_

    @days_of_week.setter
    def days_of_week(self, days_of_week_: typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None]) -> None:
        self._days_of_week_ = days_of_week_

    @property
    def base_speed(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._base_speed_

    @base_speed.setter
    def base_speed(self, base_speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._base_speed_ = base_speed_

    def is_base_speed_used(self) -> bool:
        return (self._days_of_week_.is_sunday == True or self._days_of_week_.is_monday == True or self._days_of_week_.is_tuesday == True or self._days_of_week_.is_wednesday == True or self._days_of_week_.is_thursday == True or self._days_of_week_.is_friday == True or self._days_of_week_.is_saturday == True)

    def is_base_speed_set(self) -> bool:
        return not self._base_speed_ is None

    def reset_base_speed(self) -> None:
        self._base_speed_ = None

    @property
    def profile_sunday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_sunday_

    @profile_sunday.setter
    def profile_sunday(self, profile_sunday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_sunday_ = profile_sunday_

    def is_profile_sunday_used(self) -> bool:
        return self._days_of_week_.is_sunday

    def is_profile_sunday_set(self) -> bool:
        return not self._profile_sunday_ is None

    def reset_profile_sunday(self) -> None:
        self._profile_sunday_ = None

    @property
    def avg_speed_sunday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_sunday_

    @avg_speed_sunday.setter
    def avg_speed_sunday(self, avg_speed_sunday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_sunday_ = avg_speed_sunday_

    def is_avg_speed_sunday_used(self) -> bool:
        return not self._days_of_week_.is_sunday

    def is_avg_speed_sunday_set(self) -> bool:
        return not self._avg_speed_sunday_ is None

    def reset_avg_speed_sunday(self) -> None:
        self._avg_speed_sunday_ = None

    @property
    def profile_monday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_monday_

    @profile_monday.setter
    def profile_monday(self, profile_monday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_monday_ = profile_monday_

    def is_profile_monday_used(self) -> bool:
        return self._days_of_week_.is_monday

    def is_profile_monday_set(self) -> bool:
        return not self._profile_monday_ is None

    def reset_profile_monday(self) -> None:
        self._profile_monday_ = None

    @property
    def avg_speed_monday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_monday_

    @avg_speed_monday.setter
    def avg_speed_monday(self, avg_speed_monday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_monday_ = avg_speed_monday_

    def is_avg_speed_monday_used(self) -> bool:
        return not self._days_of_week_.is_monday

    def is_avg_speed_monday_set(self) -> bool:
        return not self._avg_speed_monday_ is None

    def reset_avg_speed_monday(self) -> None:
        self._avg_speed_monday_ = None

    @property
    def profile_tuesday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_tuesday_

    @profile_tuesday.setter
    def profile_tuesday(self, profile_tuesday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_tuesday_ = profile_tuesday_

    def is_profile_tuesday_used(self) -> bool:
        return self._days_of_week_.is_tuesday

    def is_profile_tuesday_set(self) -> bool:
        return not self._profile_tuesday_ is None

    def reset_profile_tuesday(self) -> None:
        self._profile_tuesday_ = None

    @property
    def avg_speed_tuesday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_tuesday_

    @avg_speed_tuesday.setter
    def avg_speed_tuesday(self, avg_speed_tuesday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_tuesday_ = avg_speed_tuesday_

    def is_avg_speed_tuesday_used(self) -> bool:
        return not self._days_of_week_.is_tuesday

    def is_avg_speed_tuesday_set(self) -> bool:
        return not self._avg_speed_tuesday_ is None

    def reset_avg_speed_tuesday(self) -> None:
        self._avg_speed_tuesday_ = None

    @property
    def profile_wednesday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_wednesday_

    @profile_wednesday.setter
    def profile_wednesday(self, profile_wednesday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_wednesday_ = profile_wednesday_

    def is_profile_wednesday_used(self) -> bool:
        return self._days_of_week_.is_wednesday

    def is_profile_wednesday_set(self) -> bool:
        return not self._profile_wednesday_ is None

    def reset_profile_wednesday(self) -> None:
        self._profile_wednesday_ = None

    @property
    def avg_speed_wednesday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_wednesday_

    @avg_speed_wednesday.setter
    def avg_speed_wednesday(self, avg_speed_wednesday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_wednesday_ = avg_speed_wednesday_

    def is_avg_speed_wednesday_used(self) -> bool:
        return not self._days_of_week_.is_wednesday

    def is_avg_speed_wednesday_set(self) -> bool:
        return not self._avg_speed_wednesday_ is None

    def reset_avg_speed_wednesday(self) -> None:
        self._avg_speed_wednesday_ = None

    @property
    def profile_thursday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_thursday_

    @profile_thursday.setter
    def profile_thursday(self, profile_thursday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_thursday_ = profile_thursday_

    def is_profile_thursday_used(self) -> bool:
        return self._days_of_week_.is_thursday

    def is_profile_thursday_set(self) -> bool:
        return not self._profile_thursday_ is None

    def reset_profile_thursday(self) -> None:
        self._profile_thursday_ = None

    @property
    def avg_speed_thursday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_thursday_

    @avg_speed_thursday.setter
    def avg_speed_thursday(self, avg_speed_thursday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_thursday_ = avg_speed_thursday_

    def is_avg_speed_thursday_used(self) -> bool:
        return not self._days_of_week_.is_thursday

    def is_avg_speed_thursday_set(self) -> bool:
        return not self._avg_speed_thursday_ is None

    def reset_avg_speed_thursday(self) -> None:
        self._avg_speed_thursday_ = None

    @property
    def profile_friday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_friday_

    @profile_friday.setter
    def profile_friday(self, profile_friday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_friday_ = profile_friday_

    def is_profile_friday_used(self) -> bool:
        return self._days_of_week_.is_friday

    def is_profile_friday_set(self) -> bool:
        return not self._profile_friday_ is None

    def reset_profile_friday(self) -> None:
        self._profile_friday_ = None

    @property
    def avg_speed_friday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_friday_

    @avg_speed_friday.setter
    def avg_speed_friday(self, avg_speed_friday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_friday_ = avg_speed_friday_

    def is_avg_speed_friday_used(self) -> bool:
        return not self._days_of_week_.is_friday

    def is_avg_speed_friday_set(self) -> bool:
        return not self._avg_speed_friday_ is None

    def reset_avg_speed_friday(self) -> None:
        self._avg_speed_friday_ = None

    @property
    def profile_saturday(self) -> typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profile_saturday_

    @profile_saturday.setter
    def profile_saturday(self, profile_saturday_: typing.Optional[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profile_saturday_ = profile_saturday_

    def is_profile_saturday_used(self) -> bool:
        return self._days_of_week_.is_saturday

    def is_profile_saturday_set(self) -> bool:
        return not self._profile_saturday_ is None

    def reset_profile_saturday(self) -> None:
        self._profile_saturday_ = None

    @property
    def avg_speed_saturday(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._avg_speed_saturday_

    @avg_speed_saturday.setter
    def avg_speed_saturday(self, avg_speed_saturday_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._avg_speed_saturday_ = avg_speed_saturday_

    def is_avg_speed_saturday_used(self) -> bool:
        return not self._days_of_week_.is_saturday

    def is_avg_speed_saturday_set(self) -> bool:
        return not self._avg_speed_saturday_ is None

    def reset_avg_speed_saturday(self) -> None:
        self._avg_speed_saturday_ = None

    def init_packing_context(self, zserio_context: SpeedProfilesWeek.ZserioPackingContext) -> None:
        if self.is_base_speed_used():
            zserio_context.base_speed.init(zserio.array.BitFieldArrayTraits(8), self._base_speed_)
        if self.is_profile_sunday_used():
            zserio_context.profile_sunday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            zserio_context.avg_speed_sunday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_sunday_)
        if self.is_profile_monday_used():
            zserio_context.profile_monday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_monday_)
        if self.is_avg_speed_monday_used():
            zserio_context.avg_speed_monday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_monday_)
        if self.is_profile_tuesday_used():
            zserio_context.profile_tuesday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            zserio_context.avg_speed_tuesday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_tuesday_)
        if self.is_profile_wednesday_used():
            zserio_context.profile_wednesday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            zserio_context.avg_speed_wednesday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_wednesday_)
        if self.is_profile_thursday_used():
            zserio_context.profile_thursday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            zserio_context.avg_speed_thursday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_thursday_)
        if self.is_profile_friday_used():
            zserio_context.profile_friday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_friday_)
        if self.is_avg_speed_friday_used():
            zserio_context.avg_speed_friday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_friday_)
        if self.is_profile_saturday_used():
            zserio_context.profile_saturday.init(zserio.array.VarUInt16ArrayTraits(), self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            zserio_context.avg_speed_saturday.init(zserio.array.BitFieldArrayTraits(8), self._avg_speed_saturday_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._days_of_week_.bitsizeof(end_bitposition)
        if self.is_base_speed_used():
            end_bitposition += 8
        if self.is_profile_sunday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            end_bitposition += 8
        if self.is_profile_monday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_monday_)
        if self.is_avg_speed_monday_used():
            end_bitposition += 8
        if self.is_profile_tuesday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            end_bitposition += 8
        if self.is_profile_wednesday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            end_bitposition += 8
        if self.is_profile_thursday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            end_bitposition += 8
        if self.is_profile_friday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_friday_)
        if self.is_avg_speed_friday_used():
            end_bitposition += 8
        if self.is_profile_saturday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SpeedProfilesWeek.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._days_of_week_.bitsizeof(end_bitposition)
        if self.is_base_speed_used():
            end_bitposition += zserio_context.base_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._base_speed_)
        if self.is_profile_sunday_used():
            end_bitposition += zserio_context.profile_sunday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            end_bitposition += zserio_context.avg_speed_sunday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_sunday_)
        if self.is_profile_monday_used():
            end_bitposition += zserio_context.profile_monday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_monday_)
        if self.is_avg_speed_monday_used():
            end_bitposition += zserio_context.avg_speed_monday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_monday_)
        if self.is_profile_tuesday_used():
            end_bitposition += zserio_context.profile_tuesday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            end_bitposition += zserio_context.avg_speed_tuesday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_tuesday_)
        if self.is_profile_wednesday_used():
            end_bitposition += zserio_context.profile_wednesday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            end_bitposition += zserio_context.avg_speed_wednesday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_wednesday_)
        if self.is_profile_thursday_used():
            end_bitposition += zserio_context.profile_thursday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            end_bitposition += zserio_context.avg_speed_thursday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_thursday_)
        if self.is_profile_friday_used():
            end_bitposition += zserio_context.profile_friday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_friday_)
        if self.is_avg_speed_friday_used():
            end_bitposition += zserio_context.avg_speed_friday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_friday_)
        if self.is_profile_saturday_used():
            end_bitposition += zserio_context.profile_saturday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            end_bitposition += zserio_context.avg_speed_saturday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_saturday_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._days_of_week_.initialize_offsets(end_bitposition)
        if self.is_base_speed_used():
            end_bitposition += 8
        if self.is_profile_sunday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            end_bitposition += 8
        if self.is_profile_monday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_monday_)
        if self.is_avg_speed_monday_used():
            end_bitposition += 8
        if self.is_profile_tuesday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            end_bitposition += 8
        if self.is_profile_wednesday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            end_bitposition += 8
        if self.is_profile_thursday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            end_bitposition += 8
        if self.is_profile_friday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_friday_)
        if self.is_avg_speed_friday_used():
            end_bitposition += 8
        if self.is_profile_saturday_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SpeedProfilesWeek.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._days_of_week_.initialize_offsets(end_bitposition)
        if self.is_base_speed_used():
            end_bitposition += zserio_context.base_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._base_speed_)
        if self.is_profile_sunday_used():
            end_bitposition += zserio_context.profile_sunday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_sunday_)
        if self.is_avg_speed_sunday_used():
            end_bitposition += zserio_context.avg_speed_sunday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_sunday_)
        if self.is_profile_monday_used():
            end_bitposition += zserio_context.profile_monday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_monday_)
        if self.is_avg_speed_monday_used():
            end_bitposition += zserio_context.avg_speed_monday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_monday_)
        if self.is_profile_tuesday_used():
            end_bitposition += zserio_context.profile_tuesday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_tuesday_)
        if self.is_avg_speed_tuesday_used():
            end_bitposition += zserio_context.avg_speed_tuesday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_tuesday_)
        if self.is_profile_wednesday_used():
            end_bitposition += zserio_context.profile_wednesday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_wednesday_)
        if self.is_avg_speed_wednesday_used():
            end_bitposition += zserio_context.avg_speed_wednesday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_wednesday_)
        if self.is_profile_thursday_used():
            end_bitposition += zserio_context.profile_thursday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_thursday_)
        if self.is_avg_speed_thursday_used():
            end_bitposition += zserio_context.avg_speed_thursday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_thursday_)
        if self.is_profile_friday_used():
            end_bitposition += zserio_context.profile_friday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_friday_)
        if self.is_avg_speed_friday_used():
            end_bitposition += zserio_context.avg_speed_friday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_friday_)
        if self.is_profile_saturday_used():
            end_bitposition += zserio_context.profile_saturday.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._profile_saturday_)
        if self.is_avg_speed_saturday_used():
            end_bitposition += zserio_context.avg_speed_saturday.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._avg_speed_saturday_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._days_of_week_ = nds.core.conditions.days_of_week.DaysOfWeek.from_reader(zserio_reader)

        if self.is_base_speed_used():
            self._base_speed_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._base_speed_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.baseSpeed!")
        else:
            self._base_speed_ = None

        if self.is_profile_sunday_used():
            self._profile_sunday_ = zserio_reader.read_varuint16()
        else:
            self._profile_sunday_ = None

        if self.is_avg_speed_sunday_used():
            self._avg_speed_sunday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_sunday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSunday!")
        else:
            self._avg_speed_sunday_ = None

        if self.is_profile_monday_used():
            self._profile_monday_ = zserio_reader.read_varuint16()
        else:
            self._profile_monday_ = None

        if self.is_avg_speed_monday_used():
            self._avg_speed_monday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_monday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedMonday!")
        else:
            self._avg_speed_monday_ = None

        if self.is_profile_tuesday_used():
            self._profile_tuesday_ = zserio_reader.read_varuint16()
        else:
            self._profile_tuesday_ = None

        if self.is_avg_speed_tuesday_used():
            self._avg_speed_tuesday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_tuesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedTuesday!")
        else:
            self._avg_speed_tuesday_ = None

        if self.is_profile_wednesday_used():
            self._profile_wednesday_ = zserio_reader.read_varuint16()
        else:
            self._profile_wednesday_ = None

        if self.is_avg_speed_wednesday_used():
            self._avg_speed_wednesday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_wednesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedWednesday!")
        else:
            self._avg_speed_wednesday_ = None

        if self.is_profile_thursday_used():
            self._profile_thursday_ = zserio_reader.read_varuint16()
        else:
            self._profile_thursday_ = None

        if self.is_avg_speed_thursday_used():
            self._avg_speed_thursday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_thursday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedThursday!")
        else:
            self._avg_speed_thursday_ = None

        if self.is_profile_friday_used():
            self._profile_friday_ = zserio_reader.read_varuint16()
        else:
            self._profile_friday_ = None

        if self.is_avg_speed_friday_used():
            self._avg_speed_friday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_friday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedFriday!")
        else:
            self._avg_speed_friday_ = None

        if self.is_profile_saturday_used():
            self._profile_saturday_ = zserio_reader.read_varuint16()
        else:
            self._profile_saturday_ = None

        if self.is_avg_speed_saturday_used():
            self._avg_speed_saturday_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._avg_speed_saturday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSaturday!")
        else:
            self._avg_speed_saturday_ = None

    def read_packed(self, zserio_context: SpeedProfilesWeek.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._days_of_week_ = nds.core.conditions.days_of_week.DaysOfWeek.from_reader(zserio_reader)

        if self.is_base_speed_used():
            self._base_speed_ = zserio_context.base_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._base_speed_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.baseSpeed!")
        else:
            self._base_speed_ = None

        if self.is_profile_sunday_used():
            self._profile_sunday_ = zserio_context.profile_sunday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_sunday_ = None

        if self.is_avg_speed_sunday_used():
            self._avg_speed_sunday_ = zserio_context.avg_speed_sunday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_sunday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSunday!")
        else:
            self._avg_speed_sunday_ = None

        if self.is_profile_monday_used():
            self._profile_monday_ = zserio_context.profile_monday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_monday_ = None

        if self.is_avg_speed_monday_used():
            self._avg_speed_monday_ = zserio_context.avg_speed_monday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_monday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedMonday!")
        else:
            self._avg_speed_monday_ = None

        if self.is_profile_tuesday_used():
            self._profile_tuesday_ = zserio_context.profile_tuesday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_tuesday_ = None

        if self.is_avg_speed_tuesday_used():
            self._avg_speed_tuesday_ = zserio_context.avg_speed_tuesday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_tuesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedTuesday!")
        else:
            self._avg_speed_tuesday_ = None

        if self.is_profile_wednesday_used():
            self._profile_wednesday_ = zserio_context.profile_wednesday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_wednesday_ = None

        if self.is_avg_speed_wednesday_used():
            self._avg_speed_wednesday_ = zserio_context.avg_speed_wednesday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_wednesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedWednesday!")
        else:
            self._avg_speed_wednesday_ = None

        if self.is_profile_thursday_used():
            self._profile_thursday_ = zserio_context.profile_thursday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_thursday_ = None

        if self.is_avg_speed_thursday_used():
            self._avg_speed_thursday_ = zserio_context.avg_speed_thursday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_thursday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedThursday!")
        else:
            self._avg_speed_thursday_ = None

        if self.is_profile_friday_used():
            self._profile_friday_ = zserio_context.profile_friday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_friday_ = None

        if self.is_avg_speed_friday_used():
            self._avg_speed_friday_ = zserio_context.avg_speed_friday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_friday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedFriday!")
        else:
            self._avg_speed_friday_ = None

        if self.is_profile_saturday_used():
            self._profile_saturday_ = zserio_context.profile_saturday.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._profile_saturday_ = None

        if self.is_avg_speed_saturday_used():
            self._avg_speed_saturday_ = zserio_context.avg_speed_saturday.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._avg_speed_saturday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSaturday!")
        else:
            self._avg_speed_saturday_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._days_of_week_.write(zserio_writer)

        if self.is_base_speed_used():
            # check constraint
            if not (self._base_speed_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.baseSpeed!")
            zserio_writer.write_bits(self._base_speed_, 8)

        if self.is_profile_sunday_used():
            zserio_writer.write_varuint16(self._profile_sunday_)

        if self.is_avg_speed_sunday_used():
            # check constraint
            if not (self._avg_speed_sunday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSunday!")
            zserio_writer.write_bits(self._avg_speed_sunday_, 8)

        if self.is_profile_monday_used():
            zserio_writer.write_varuint16(self._profile_monday_)

        if self.is_avg_speed_monday_used():
            # check constraint
            if not (self._avg_speed_monday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedMonday!")
            zserio_writer.write_bits(self._avg_speed_monday_, 8)

        if self.is_profile_tuesday_used():
            zserio_writer.write_varuint16(self._profile_tuesday_)

        if self.is_avg_speed_tuesday_used():
            # check constraint
            if not (self._avg_speed_tuesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedTuesday!")
            zserio_writer.write_bits(self._avg_speed_tuesday_, 8)

        if self.is_profile_wednesday_used():
            zserio_writer.write_varuint16(self._profile_wednesday_)

        if self.is_avg_speed_wednesday_used():
            # check constraint
            if not (self._avg_speed_wednesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedWednesday!")
            zserio_writer.write_bits(self._avg_speed_wednesday_, 8)

        if self.is_profile_thursday_used():
            zserio_writer.write_varuint16(self._profile_thursday_)

        if self.is_avg_speed_thursday_used():
            # check constraint
            if not (self._avg_speed_thursday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedThursday!")
            zserio_writer.write_bits(self._avg_speed_thursday_, 8)

        if self.is_profile_friday_used():
            zserio_writer.write_varuint16(self._profile_friday_)

        if self.is_avg_speed_friday_used():
            # check constraint
            if not (self._avg_speed_friday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedFriday!")
            zserio_writer.write_bits(self._avg_speed_friday_, 8)

        if self.is_profile_saturday_used():
            zserio_writer.write_varuint16(self._profile_saturday_)

        if self.is_avg_speed_saturday_used():
            # check constraint
            if not (self._avg_speed_saturday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSaturday!")
            zserio_writer.write_bits(self._avg_speed_saturday_, 8)

    def write_packed(self, zserio_context: SpeedProfilesWeek.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._days_of_week_.write(zserio_writer)

        if self.is_base_speed_used():
            # check constraint
            if not (self._base_speed_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.baseSpeed!")
            zserio_context.base_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._base_speed_)

        if self.is_profile_sunday_used():
            zserio_context.profile_sunday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_sunday_)

        if self.is_avg_speed_sunday_used():
            # check constraint
            if not (self._avg_speed_sunday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSunday!")
            zserio_context.avg_speed_sunday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_sunday_)

        if self.is_profile_monday_used():
            zserio_context.profile_monday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_monday_)

        if self.is_avg_speed_monday_used():
            # check constraint
            if not (self._avg_speed_monday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedMonday!")
            zserio_context.avg_speed_monday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_monday_)

        if self.is_profile_tuesday_used():
            zserio_context.profile_tuesday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_tuesday_)

        if self.is_avg_speed_tuesday_used():
            # check constraint
            if not (self._avg_speed_tuesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedTuesday!")
            zserio_context.avg_speed_tuesday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_tuesday_)

        if self.is_profile_wednesday_used():
            zserio_context.profile_wednesday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_wednesday_)

        if self.is_avg_speed_wednesday_used():
            # check constraint
            if not (self._avg_speed_wednesday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedWednesday!")
            zserio_context.avg_speed_wednesday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_wednesday_)

        if self.is_profile_thursday_used():
            zserio_context.profile_thursday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_thursday_)

        if self.is_avg_speed_thursday_used():
            # check constraint
            if not (self._avg_speed_thursday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedThursday!")
            zserio_context.avg_speed_thursday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_thursday_)

        if self.is_profile_friday_used():
            zserio_context.profile_friday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_friday_)

        if self.is_avg_speed_friday_used():
            # check constraint
            if not (self._avg_speed_friday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedFriday!")
            zserio_context.avg_speed_friday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_friday_)

        if self.is_profile_saturday_used():
            zserio_context.profile_saturday.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._profile_saturday_)

        if self.is_avg_speed_saturday_used():
            # check constraint
            if not (self._avg_speed_saturday_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesWeek.avgSpeedSaturday!")
            zserio_context.avg_speed_saturday.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._avg_speed_saturday_)

    class ZserioPackingContext:
        def __init__(self):
            self._base_speed_ = zserio.array.DeltaContext()
            self._profile_sunday_ = zserio.array.DeltaContext()
            self._avg_speed_sunday_ = zserio.array.DeltaContext()
            self._profile_monday_ = zserio.array.DeltaContext()
            self._avg_speed_monday_ = zserio.array.DeltaContext()
            self._profile_tuesday_ = zserio.array.DeltaContext()
            self._avg_speed_tuesday_ = zserio.array.DeltaContext()
            self._profile_wednesday_ = zserio.array.DeltaContext()
            self._avg_speed_wednesday_ = zserio.array.DeltaContext()
            self._profile_thursday_ = zserio.array.DeltaContext()
            self._avg_speed_thursday_ = zserio.array.DeltaContext()
            self._profile_friday_ = zserio.array.DeltaContext()
            self._avg_speed_friday_ = zserio.array.DeltaContext()
            self._profile_saturday_ = zserio.array.DeltaContext()
            self._avg_speed_saturday_ = zserio.array.DeltaContext()

        @property
        def base_speed(self):
            return self._base_speed_

        @property
        def profile_sunday(self):
            return self._profile_sunday_

        @property
        def avg_speed_sunday(self):
            return self._avg_speed_sunday_

        @property
        def profile_monday(self):
            return self._profile_monday_

        @property
        def avg_speed_monday(self):
            return self._avg_speed_monday_

        @property
        def profile_tuesday(self):
            return self._profile_tuesday_

        @property
        def avg_speed_tuesday(self):
            return self._avg_speed_tuesday_

        @property
        def profile_wednesday(self):
            return self._profile_wednesday_

        @property
        def avg_speed_wednesday(self):
            return self._avg_speed_wednesday_

        @property
        def profile_thursday(self):
            return self._profile_thursday_

        @property
        def avg_speed_thursday(self):
            return self._avg_speed_thursday_

        @property
        def profile_friday(self):
            return self._profile_friday_

        @property
        def avg_speed_friday(self):
            return self._avg_speed_friday_

        @property
        def profile_saturday(self):
            return self._profile_saturday_

        @property
        def avg_speed_saturday(self):
            return self._avg_speed_saturday_
