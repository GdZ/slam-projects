# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.speed_kmh
import nds.routingdata.types.speed_profile_id

class SpeedProfilesDays:
    def __init__(
            self,
            num_days_: int = int(),
            base_speed_: nds.core.types.speed_kmh.SpeedKmh = nds.core.types.speed_kmh.SpeedKmh(),
            profiles_: typing.List[nds.routingdata.types.speed_profile_id.SpeedProfileId] = None) -> None:
        self._num_days_ = num_days_
        self._base_speed_ = base_speed_
        self._profiles_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), profiles_)

    @classmethod
    def from_reader(
            cls: typing.Type['SpeedProfilesDays'],
            zserio_reader: zserio.BitStreamReader) -> 'SpeedProfilesDays':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SpeedProfilesDays'],
            zserio_context: SpeedProfilesDays.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SpeedProfilesDays':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SpeedProfilesDays):
            return ((self._num_days_ == other._num_days_) and
                    (self._base_speed_ == other._base_speed_) and
                    (self._profiles_ == other._profiles_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_days_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._base_speed_)
        result = zserio.hashcode.calc_hashcode_object(result, self._profiles_)

        return result

    @property
    def num_days(self) -> int:
        return self._num_days_

    @num_days.setter
    def num_days(self, num_days_: int) -> None:
        self._num_days_ = num_days_

    @property
    def base_speed(self) -> nds.core.types.speed_kmh.SpeedKmh:
        return self._base_speed_

    @base_speed.setter
    def base_speed(self, base_speed_: nds.core.types.speed_kmh.SpeedKmh) -> None:
        self._base_speed_ = base_speed_

    @property
    def profiles(self) -> typing.List[nds.routingdata.types.speed_profile_id.SpeedProfileId]:
        return self._profiles_.raw_array

    @profiles.setter
    def profiles(self, profiles_: typing.List[nds.routingdata.types.speed_profile_id.SpeedProfileId]) -> None:
        self._profiles_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), profiles_)

    def init_packing_context(self, zserio_context: SpeedProfilesDays.ZserioPackingContext) -> None:
        zserio_context.num_days.init(zserio.array.BitFieldArrayTraits(8), self._num_days_)
        zserio_context.base_speed.init(zserio.array.BitFieldArrayTraits(8), self._base_speed_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition += self._profiles_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SpeedProfilesDays.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_days.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_days_)
        end_bitposition += zserio_context.base_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._base_speed_)
        end_bitposition += self._profiles_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition = self._profiles_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SpeedProfilesDays.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_days.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_days_)
        end_bitposition += zserio_context.base_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._base_speed_)
        end_bitposition = self._profiles_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_days_ = zserio_reader.read_bits(8)

        self._base_speed_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._base_speed_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesDays.baseSpeed!")

        self._profiles_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_days_)

    def read_packed(self, zserio_context: SpeedProfilesDays.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_days_ = zserio_context.num_days.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._base_speed_ = zserio_context.base_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._base_speed_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesDays.baseSpeed!")

        self._profiles_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_days_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_days_, 8)

        # check constraint
        if not (self._base_speed_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesDays.baseSpeed!")
        zserio_writer.write_bits(self._base_speed_, 8)

        # check array length
        if len(self._profiles_) != (self._num_days_):
            raise zserio.PythonRuntimeException("Wrong array length for field SpeedProfilesDays.profiles: "
                                                f"{len(self._profiles_)} != {self._num_days_}!")
        self._profiles_.write(zserio_writer)

    def write_packed(self, zserio_context: SpeedProfilesDays.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_days.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_days_)

        # check constraint
        if not (self._base_speed_ > 0):
            raise zserio.PythonRuntimeException("Constraint violated for field SpeedProfilesDays.baseSpeed!")
        zserio_context.base_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._base_speed_)

        # check array length
        if len(self._profiles_) != (self._num_days_):
            raise zserio.PythonRuntimeException("Wrong array length for field SpeedProfilesDays.profiles: "
                                                f"{len(self._profiles_)} != {self._num_days_}!")
        self._profiles_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_days_ = zserio.array.DeltaContext()
            self._base_speed_ = zserio.array.DeltaContext()

        @property
        def num_days(self):
            return self._num_days_

        @property
        def base_speed(self):
            return self._base_speed_
