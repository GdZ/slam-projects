# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class InstructionLaneMarking:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['InstructionLaneMarking'], value: int) -> 'InstructionLaneMarking':
        if value < 0 or value > 144115188075855871:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'InstructionLaneMarking' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['InstructionLaneMarking'], reader: zserio.BitStreamReader) -> 'InstructionLaneMarking':
        instance = cls()
        instance._value = reader.read_varuint64()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['InstructionLaneMarking'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'InstructionLaneMarking':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt64ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InstructionLaneMarking):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & InstructionLaneMarking.Values.ARROW_STRAIGHT) == InstructionLaneMarking.Values.ARROW_STRAIGHT:
            result += "ARROW_STRAIGHT" if not result else " | ARROW_STRAIGHT"
        if (self & InstructionLaneMarking.Values.ARROW_LEFT) == InstructionLaneMarking.Values.ARROW_LEFT:
            result += "ARROW_LEFT" if not result else " | ARROW_LEFT"
        if (self & InstructionLaneMarking.Values.ARROW_RIGHT) == InstructionLaneMarking.Values.ARROW_RIGHT:
            result += "ARROW_RIGHT" if not result else " | ARROW_RIGHT"
        if (self & InstructionLaneMarking.Values.ARROW_SLIGHT_LEFT) == InstructionLaneMarking.Values.ARROW_SLIGHT_LEFT:
            result += "ARROW_SLIGHT_LEFT" if not result else " | ARROW_SLIGHT_LEFT"
        if (self & InstructionLaneMarking.Values.ARROW_SLIGHT_RIGHT) == InstructionLaneMarking.Values.ARROW_SLIGHT_RIGHT:
            result += "ARROW_SLIGHT_RIGHT" if not result else " | ARROW_SLIGHT_RIGHT"
        if (self & InstructionLaneMarking.Values.ARROW_SHARP_RIGHT) == InstructionLaneMarking.Values.ARROW_SHARP_RIGHT:
            result += "ARROW_SHARP_RIGHT" if not result else " | ARROW_SHARP_RIGHT"
        if (self & InstructionLaneMarking.Values.ARROW_SHARP_LEFT) == InstructionLaneMarking.Values.ARROW_SHARP_LEFT:
            result += "ARROW_SHARP_LEFT" if not result else " | ARROW_SHARP_LEFT"
        if (self & InstructionLaneMarking.Values.ARROW_U_TURN_LEFT) == InstructionLaneMarking.Values.ARROW_U_TURN_LEFT:
            result += "ARROW_U_TURN_LEFT" if not result else " | ARROW_U_TURN_LEFT"
        if (self & InstructionLaneMarking.Values.ARROW_U_TURN_RIGHT) == InstructionLaneMarking.Values.ARROW_U_TURN_RIGHT:
            result += "ARROW_U_TURN_RIGHT" if not result else " | ARROW_U_TURN_RIGHT"
        if not result and self._value == 0:
            result += "NONE"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'InstructionLaneMarking') -> 'InstructionLaneMarking':
        return InstructionLaneMarking.from_value(self._value | other._value)

    def __and__(self, other: 'InstructionLaneMarking') -> 'InstructionLaneMarking':
        return InstructionLaneMarking.from_value(self._value & other._value)

    def __xor__(self, other: 'InstructionLaneMarking') -> 'InstructionLaneMarking':
        return InstructionLaneMarking.from_value(self._value ^ other._value)

    def __invert__(self) -> 'InstructionLaneMarking':
        return InstructionLaneMarking.from_value(~self._value & 144115188075855871)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt64ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint64(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt64ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint64(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt64ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        NONE: 'InstructionLaneMarking' = None
        ARROW_STRAIGHT: 'InstructionLaneMarking' = None
        ARROW_LEFT: 'InstructionLaneMarking' = None
        ARROW_RIGHT: 'InstructionLaneMarking' = None
        ARROW_SLIGHT_LEFT: 'InstructionLaneMarking' = None
        ARROW_SLIGHT_RIGHT: 'InstructionLaneMarking' = None
        ARROW_SHARP_RIGHT: 'InstructionLaneMarking' = None
        ARROW_SHARP_LEFT: 'InstructionLaneMarking' = None
        ARROW_U_TURN_LEFT: 'InstructionLaneMarking' = None
        ARROW_U_TURN_RIGHT: 'InstructionLaneMarking' = None

InstructionLaneMarking.Values.NONE = InstructionLaneMarking.from_value(0)
InstructionLaneMarking.Values.ARROW_STRAIGHT = InstructionLaneMarking.from_value(2)
InstructionLaneMarking.Values.ARROW_LEFT = InstructionLaneMarking.from_value(4)
InstructionLaneMarking.Values.ARROW_RIGHT = InstructionLaneMarking.from_value(8)
InstructionLaneMarking.Values.ARROW_SLIGHT_LEFT = InstructionLaneMarking.from_value(16)
InstructionLaneMarking.Values.ARROW_SLIGHT_RIGHT = InstructionLaneMarking.from_value(32)
InstructionLaneMarking.Values.ARROW_SHARP_RIGHT = InstructionLaneMarking.from_value(64)
InstructionLaneMarking.Values.ARROW_SHARP_LEFT = InstructionLaneMarking.from_value(128)
InstructionLaneMarking.Values.ARROW_U_TURN_LEFT = InstructionLaneMarking.from_value(256)
InstructionLaneMarking.Values.ARROW_U_TURN_RIGHT = InstructionLaneMarking.from_value(512)
