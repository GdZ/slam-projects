# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_image
import nds.instructions.types.signpost_image_id

class SignpostImageList:
    def __init__(
            self,
            num_signposts_: int = int(),
            ids_: typing.List[nds.instructions.types.signpost_image_id.SignpostImageId] = None,
            signpost_: typing.List[nds.core.icons.icon_image.IconImage] = None) -> None:
        self._num_signposts_ = num_signposts_
        self._ids_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), ids_)
        self._signpost_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_signpost()), signpost_)

    @classmethod
    def from_reader(
            cls: typing.Type['SignpostImageList'],
            zserio_reader: zserio.BitStreamReader) -> 'SignpostImageList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SignpostImageList'],
            zserio_context: SignpostImageList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SignpostImageList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SignpostImageList):
            return ((self._num_signposts_ == other._num_signposts_) and
                    (self._ids_ == other._ids_) and
                    (self._signpost_ == other._signpost_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_signposts_)
        result = zserio.hashcode.calc_hashcode_object(result, self._ids_)
        result = zserio.hashcode.calc_hashcode_object(result, self._signpost_)

        return result

    @property
    def num_signposts(self) -> int:
        return self._num_signposts_

    @num_signposts.setter
    def num_signposts(self, num_signposts_: int) -> None:
        self._num_signposts_ = num_signposts_

    @property
    def ids(self) -> typing.List[nds.instructions.types.signpost_image_id.SignpostImageId]:
        return self._ids_.raw_array

    @ids.setter
    def ids(self, ids_: typing.List[nds.instructions.types.signpost_image_id.SignpostImageId]) -> None:
        self._ids_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), ids_)

    @property
    def signpost(self) -> typing.List[nds.core.icons.icon_image.IconImage]:
        return self._signpost_.raw_array

    @signpost.setter
    def signpost(self, signpost_: typing.List[nds.core.icons.icon_image.IconImage]) -> None:
        self._signpost_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_signpost()), signpost_)

    def init_packing_context(self, zserio_context: SignpostImageList.ZserioPackingContext) -> None:
        zserio_context.num_signposts.init(zserio.array.VarSizeArrayTraits(), self._num_signposts_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_signposts_)
        end_bitposition += self._ids_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._signpost_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SignpostImageList.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_signposts.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_signposts_)
        end_bitposition += self._ids_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._signpost_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_signposts_)
        end_bitposition = self._ids_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._signpost_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SignpostImageList.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_signposts.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_signposts_)
        end_bitposition = self._ids_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._signpost_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        zserio_reader.alignto(8)
        self._num_signposts_ = zserio_reader.read_varsize()
        self._ids_ = zserio.array.Array.from_reader_packed(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_signposts_)
        self._signpost_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_signpost()), zserio_reader, self._num_signposts_)

    def read_packed(self, zserio_context: SignpostImageList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        zserio_reader.alignto(8)
        self._num_signposts_ = zserio_context.num_signposts.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._ids_ = zserio.array.Array.from_reader_packed(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_signposts_)

        self._signpost_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_signpost()), zserio_reader, self._num_signposts_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.alignto(8)
        zserio_writer.write_varsize(self._num_signposts_)

        # check array length
        if len(self._ids_) != (self._num_signposts_):
            raise zserio.PythonRuntimeException("Wrong array length for field SignpostImageList.ids: "
                                                f"{len(self._ids_)} != {self._num_signposts_}!")
        self._ids_.write_packed(zserio_writer)

        # check array length
        if len(self._signpost_) != (self._num_signposts_):
            raise zserio.PythonRuntimeException("Wrong array length for field SignpostImageList.signpost: "
                                                f"{len(self._signpost_)} != {self._num_signposts_}!")
        self._signpost_.write(zserio_writer)

    def write_packed(self, zserio_context: SignpostImageList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.alignto(8)
        zserio_context.num_signposts.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_signposts_)

        # check array length
        if len(self._ids_) != (self._num_signposts_):
            raise zserio.PythonRuntimeException("Wrong array length for field SignpostImageList.ids: "
                                                f"{len(self._ids_)} != {self._num_signposts_}!")
        self._ids_.write_packed(zserio_writer)

        # check array length
        if len(self._signpost_) != (self._num_signposts_):
            raise zserio.PythonRuntimeException("Wrong array length for field SignpostImageList.signpost: "
                                                f"{len(self._signpost_)} != {self._num_signposts_}!")
        self._signpost_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_signposts_ = zserio.array.DeltaContext()

        @property
        def num_signposts(self):
            return self._num_signposts_

    class _ZserioElementFactory_signpost:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_image.IconImage:
            del zserio_index
            return nds.core.icons.icon_image.IconImage.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.icon_image.IconImage.ZserioPackingContext:
            return nds.core.icons.icon_image.IconImage.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.icon_image.IconImage.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_image.IconImage:
            del zserio_index
            return nds.core.icons.icon_image.IconImage.from_reader_packed(zserio_context, zserio_reader)
