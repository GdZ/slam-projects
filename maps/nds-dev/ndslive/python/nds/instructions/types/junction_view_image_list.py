# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.instructions.types.junction_view_image_format
import nds.instructions.types.junction_view_image_ratio
import nds.instructions.types.junction_view_image_set_id
import nds.instructions.types.junction_view_image_usage_type

class JunctionViewImageList:
    def __init__(
            self,
            image_format_: typing.Union[nds.instructions.types.junction_view_image_format.JunctionViewImageFormat, None] = None,
            num_images_: int = int(),
            set_id_: typing.List[nds.instructions.types.junction_view_image_set_id.JunctionViewImageSetId] = None,
            usage_type_: typing.List[nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType] = None,
            ratio_: typing.List[nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio] = None,
            image_data_: typing.List[zserio.bitbuffer.BitBuffer] = None) -> None:
        self._image_format_ = image_format_
        self._num_images_ = num_images_
        self._set_id_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), set_id_)
        self._usage_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), usage_type_)
        self._ratio_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ratio()), ratio_)
        self._image_data_ = zserio.array.Array(zserio.array.BitBufferArrayTraits(), image_data_)

    @classmethod
    def from_reader(
            cls: typing.Type['JunctionViewImageList'],
            zserio_reader: zserio.BitStreamReader) -> 'JunctionViewImageList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['JunctionViewImageList'],
            zserio_context: JunctionViewImageList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'JunctionViewImageList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, JunctionViewImageList):
            return ((self._image_format_ == other._image_format_) and
                    (self._num_images_ == other._num_images_) and
                    (self._set_id_ == other._set_id_) and
                    (self._usage_type_ == other._usage_type_) and
                    (self._ratio_ == other._ratio_) and
                    (self._image_data_ == other._image_data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._image_format_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_images_)
        result = zserio.hashcode.calc_hashcode_object(result, self._set_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._usage_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._ratio_)
        result = zserio.hashcode.calc_hashcode_object(result, self._image_data_)

        return result

    @property
    def image_format(self) -> typing.Union[nds.instructions.types.junction_view_image_format.JunctionViewImageFormat, None]:
        return self._image_format_

    @image_format.setter
    def image_format(self, image_format_: typing.Union[nds.instructions.types.junction_view_image_format.JunctionViewImageFormat, None]) -> None:
        self._image_format_ = image_format_

    @property
    def num_images(self) -> int:
        return self._num_images_

    @num_images.setter
    def num_images(self, num_images_: int) -> None:
        self._num_images_ = num_images_

    @property
    def set_id(self) -> typing.List[nds.instructions.types.junction_view_image_set_id.JunctionViewImageSetId]:
        return self._set_id_.raw_array

    @set_id.setter
    def set_id(self, set_id_: typing.List[nds.instructions.types.junction_view_image_set_id.JunctionViewImageSetId]) -> None:
        self._set_id_ = zserio.array.Array(zserio.array.VarUIntArrayTraits(), set_id_)

    @property
    def usage_type(self) -> typing.List[nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType]:
        return self._usage_type_.raw_array

    @usage_type.setter
    def usage_type(self, usage_type_: typing.List[nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType]) -> None:
        self._usage_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), usage_type_)

    @property
    def ratio(self) -> typing.List[nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio]:
        return self._ratio_.raw_array

    @ratio.setter
    def ratio(self, ratio_: typing.List[nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio]) -> None:
        self._ratio_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ratio()), ratio_)

    @property
    def image_data(self) -> typing.List[zserio.bitbuffer.BitBuffer]:
        return self._image_data_.raw_array

    @image_data.setter
    def image_data(self, image_data_: typing.List[zserio.bitbuffer.BitBuffer]) -> None:
        self._image_data_ = zserio.array.Array(zserio.array.BitBufferArrayTraits(), image_data_)

    def init_packing_context(self, zserio_context: JunctionViewImageList.ZserioPackingContext) -> None:
        self._image_format_.init_packing_context(zserio_context.image_format)
        zserio_context.num_images.init(zserio.array.VarSizeArrayTraits(), self._num_images_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._image_format_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_images_)
        end_bitposition += self._set_id_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._usage_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._ratio_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._image_data_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: JunctionViewImageList.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._image_format_.bitsizeof_packed(zserio_context.image_format, end_bitposition)
        end_bitposition += zserio_context.num_images.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_images_)
        end_bitposition += self._set_id_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._usage_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._ratio_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._image_data_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._image_format_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_images_)
        end_bitposition = self._set_id_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._usage_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._ratio_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._image_data_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: JunctionViewImageList.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._image_format_.initialize_offsets_packed(zserio_context.image_format, end_bitposition)
        end_bitposition += zserio_context.num_images.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_images_)
        end_bitposition = self._set_id_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._usage_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._ratio_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._image_data_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._image_format_ = nds.instructions.types.junction_view_image_format.JunctionViewImageFormat.from_reader(zserio_reader)
        self._num_images_ = zserio_reader.read_varsize()
        self._set_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_images_)
        self._usage_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), zserio_reader, self._num_images_)
        self._ratio_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ratio()), zserio_reader, self._num_images_)
        self._image_data_ = zserio.array.Array.from_reader(zserio.array.BitBufferArrayTraits(), zserio_reader, self._num_images_)

    def read_packed(self, zserio_context: JunctionViewImageList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._image_format_ = nds.instructions.types.junction_view_image_format.JunctionViewImageFormat.from_reader_packed(zserio_context.image_format, zserio_reader)

        self._num_images_ = zserio_context.num_images.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._set_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUIntArrayTraits(), zserio_reader, self._num_images_)

        self._usage_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), zserio_reader, self._num_images_)

        self._ratio_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_ratio()), zserio_reader, self._num_images_)

        self._image_data_ = zserio.array.Array.from_reader(zserio.array.BitBufferArrayTraits(), zserio_reader, self._num_images_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._image_format_.write(zserio_writer)

        zserio_writer.write_varsize(self._num_images_)

        # check array length
        if len(self._set_id_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.setId: "
                                                f"{len(self._set_id_)} != {self._num_images_}!")
        self._set_id_.write_packed(zserio_writer)

        # check array length
        if len(self._usage_type_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.usageType: "
                                                f"{len(self._usage_type_)} != {self._num_images_}!")
        self._usage_type_.write_packed(zserio_writer)

        # check array length
        if len(self._ratio_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.ratio: "
                                                f"{len(self._ratio_)} != {self._num_images_}!")
        self._ratio_.write_packed(zserio_writer)

        # check array length
        if len(self._image_data_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.imageData: "
                                                f"{len(self._image_data_)} != {self._num_images_}!")
        self._image_data_.write(zserio_writer)

    def write_packed(self, zserio_context: JunctionViewImageList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._image_format_.write_packed(zserio_context.image_format, zserio_writer)

        zserio_context.num_images.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_images_)

        # check array length
        if len(self._set_id_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.setId: "
                                                f"{len(self._set_id_)} != {self._num_images_}!")
        self._set_id_.write_packed(zserio_writer)

        # check array length
        if len(self._usage_type_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.usageType: "
                                                f"{len(self._usage_type_)} != {self._num_images_}!")
        self._usage_type_.write_packed(zserio_writer)

        # check array length
        if len(self._ratio_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.ratio: "
                                                f"{len(self._ratio_)} != {self._num_images_}!")
        self._ratio_.write_packed(zserio_writer)

        # check array length
        if len(self._image_data_) != (self._num_images_):
            raise zserio.PythonRuntimeException("Wrong array length for field JunctionViewImageList.imageData: "
                                                f"{len(self._image_data_)} != {self._num_images_}!")
        self._image_data_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._image_format_ = zserio.array.DeltaContext()
            self._num_images_ = zserio.array.DeltaContext()

        @property
        def image_format(self):
            return self._image_format_

        @property
        def num_images(self):
            return self._num_images_

    class _ZserioElementFactory_usage_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType:
            del zserio_index
            return nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType:
            del zserio_index
            return nds.instructions.types.junction_view_image_usage_type.JunctionViewImageUsageType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_ratio:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio:
            del zserio_index
            return nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio.ZserioPackingContext:
            return nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio:
            del zserio_index
            return nds.instructions.types.junction_view_image_ratio.JunctionViewImageRatio.from_reader_packed(zserio_context, zserio_reader)
