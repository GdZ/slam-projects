# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.speech.phonetic_transcription_list
import nds.instructions.types.signpost_instruction_content

class SignpostPhoneticTranscriptions:
    def __init__(
            self,
            content_: typing.Union[nds.instructions.types.signpost_instruction_content.SignpostInstructionContent, None] = None,
            exit_name_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList] = None,
            exit_number_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList] = None,
            towards_name_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]] = None,
            towards_number_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]] = None,
            direction_name_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]] = None,
            direction_number_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]] = None) -> None:
        self._content_ = content_
        self._exit_name_ = exit_name_
        self._exit_number_ = exit_number_
        if towards_name_ is None:
            self._towards_name_ = None
        else:
            self._towards_name_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_name()), towards_name_, is_auto=True)
        if towards_number_ is None:
            self._towards_number_ = None
        else:
            self._towards_number_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_number()), towards_number_, is_auto=True)
        if direction_name_ is None:
            self._direction_name_ = None
        else:
            self._direction_name_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_name()), direction_name_, is_auto=True)
        if direction_number_ is None:
            self._direction_number_ = None
        else:
            self._direction_number_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_number()), direction_number_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['SignpostPhoneticTranscriptions'],
            zserio_reader: zserio.BitStreamReader) -> 'SignpostPhoneticTranscriptions':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SignpostPhoneticTranscriptions'],
            zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SignpostPhoneticTranscriptions':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SignpostPhoneticTranscriptions):
            return ((self._content_ == other._content_) and
                    (not other.is_exit_name_used() if not self.is_exit_name_used() else (self._exit_name_ == other._exit_name_)) and
                    (not other.is_exit_number_used() if not self.is_exit_number_used() else (self._exit_number_ == other._exit_number_)) and
                    (not other.is_towards_name_used() if not self.is_towards_name_used() else (self._towards_name_ == other._towards_name_)) and
                    (not other.is_towards_number_used() if not self.is_towards_number_used() else (self._towards_number_ == other._towards_number_)) and
                    (not other.is_direction_name_used() if not self.is_direction_name_used() else (self._direction_name_ == other._direction_name_)) and
                    (not other.is_direction_number_used() if not self.is_direction_number_used() else (self._direction_number_ == other._direction_number_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_exit_name_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._exit_name_)
        if self.is_exit_number_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._exit_number_)
        if self.is_towards_name_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._towards_name_)
        if self.is_towards_number_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._towards_number_)
        if self.is_direction_name_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._direction_name_)
        if self.is_direction_number_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._direction_number_)

        return result

    @property
    def content(self) -> typing.Union[nds.instructions.types.signpost_instruction_content.SignpostInstructionContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.instructions.types.signpost_instruction_content.SignpostInstructionContent, None]) -> None:
        self._content_ = content_

    @property
    def exit_name(self) -> typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]:
        return self._exit_name_

    @exit_name.setter
    def exit_name(self, exit_name_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]) -> None:
        self._exit_name_ = exit_name_

    def is_exit_name_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.EXIT_NAME) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.EXIT_NAME

    def is_exit_name_set(self) -> bool:
        return not self._exit_name_ is None

    def reset_exit_name(self) -> None:
        self._exit_name_ = None

    @property
    def exit_number(self) -> typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]:
        return self._exit_number_

    @exit_number.setter
    def exit_number(self, exit_number_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]) -> None:
        self._exit_number_ = exit_number_

    def is_exit_number_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.EXIT_NUMBER) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.EXIT_NUMBER

    def is_exit_number_set(self) -> bool:
        return not self._exit_number_ is None

    def reset_exit_number(self) -> None:
        self._exit_number_ = None

    @property
    def towards_name(self) -> typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]:
        return None if self._towards_name_ is None else self._towards_name_.raw_array

    @towards_name.setter
    def towards_name(self, towards_name_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]) -> None:
        if towards_name_ is None:
            self._towards_name_ = None
        else:
            self._towards_name_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_name()), towards_name_, is_auto=True)

    def is_towards_name_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.TOWARDS_NAME) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.TOWARDS_NAME

    def is_towards_name_set(self) -> bool:
        return not self._towards_name_ is None

    def reset_towards_name(self) -> None:
        self._towards_name_ = None

    @property
    def towards_number(self) -> typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]:
        return None if self._towards_number_ is None else self._towards_number_.raw_array

    @towards_number.setter
    def towards_number(self, towards_number_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]) -> None:
        if towards_number_ is None:
            self._towards_number_ = None
        else:
            self._towards_number_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_number()), towards_number_, is_auto=True)

    def is_towards_number_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.TOWARDS_NUMBER) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.TOWARDS_NUMBER

    def is_towards_number_set(self) -> bool:
        return not self._towards_number_ is None

    def reset_towards_number(self) -> None:
        self._towards_number_ = None

    @property
    def direction_name(self) -> typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]:
        return None if self._direction_name_ is None else self._direction_name_.raw_array

    @direction_name.setter
    def direction_name(self, direction_name_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]) -> None:
        if direction_name_ is None:
            self._direction_name_ = None
        else:
            self._direction_name_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_name()), direction_name_, is_auto=True)

    def is_direction_name_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.DIRECTION_NAME) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.DIRECTION_NAME

    def is_direction_name_set(self) -> bool:
        return not self._direction_name_ is None

    def reset_direction_name(self) -> None:
        self._direction_name_ = None

    @property
    def direction_number(self) -> typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]:
        return None if self._direction_number_ is None else self._direction_number_.raw_array

    @direction_number.setter
    def direction_number(self, direction_number_: typing.Optional[typing.List[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]]) -> None:
        if direction_number_ is None:
            self._direction_number_ = None
        else:
            self._direction_number_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_number()), direction_number_, is_auto=True)

    def is_direction_number_used(self) -> bool:
        return (self._content_ & nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.DIRECTION_NUMBER) == nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.Values.DIRECTION_NUMBER

    def is_direction_number_set(self) -> bool:
        return not self._direction_number_ is None

    def reset_direction_number(self) -> None:
        self._direction_number_ = None

    def init_packing_context(self, zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_exit_name_used():
            self._exit_name_.init_packing_context(zserio_context.exit_name)
        if self.is_exit_number_used():
            self._exit_number_.init_packing_context(zserio_context.exit_number)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_exit_name_used():
            end_bitposition += self._exit_name_.bitsizeof(end_bitposition)
        if self.is_exit_number_used():
            end_bitposition += self._exit_number_.bitsizeof(end_bitposition)
        if self.is_towards_name_used():
            end_bitposition += self._towards_name_.bitsizeof(end_bitposition)
        if self.is_towards_number_used():
            end_bitposition += self._towards_number_.bitsizeof(end_bitposition)
        if self.is_direction_name_used():
            end_bitposition += self._direction_name_.bitsizeof(end_bitposition)
        if self.is_direction_number_used():
            end_bitposition += self._direction_number_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_exit_name_used():
            end_bitposition += self._exit_name_.bitsizeof_packed(zserio_context.exit_name, end_bitposition)
        if self.is_exit_number_used():
            end_bitposition += self._exit_number_.bitsizeof_packed(zserio_context.exit_number, end_bitposition)
        if self.is_towards_name_used():
            end_bitposition += self._towards_name_.bitsizeof_packed(end_bitposition)
        if self.is_towards_number_used():
            end_bitposition += self._towards_number_.bitsizeof_packed(end_bitposition)
        if self.is_direction_name_used():
            end_bitposition += self._direction_name_.bitsizeof_packed(end_bitposition)
        if self.is_direction_number_used():
            end_bitposition += self._direction_number_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_exit_name_used():
            end_bitposition = self._exit_name_.initialize_offsets(end_bitposition)
        if self.is_exit_number_used():
            end_bitposition = self._exit_number_.initialize_offsets(end_bitposition)
        if self.is_towards_name_used():
            end_bitposition = self._towards_name_.initialize_offsets(end_bitposition)
        if self.is_towards_number_used():
            end_bitposition = self._towards_number_.initialize_offsets(end_bitposition)
        if self.is_direction_name_used():
            end_bitposition = self._direction_name_.initialize_offsets(end_bitposition)
        if self.is_direction_number_used():
            end_bitposition = self._direction_number_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_exit_name_used():
            end_bitposition = self._exit_name_.initialize_offsets_packed(zserio_context.exit_name, end_bitposition)
        if self.is_exit_number_used():
            end_bitposition = self._exit_number_.initialize_offsets_packed(zserio_context.exit_number, end_bitposition)
        if self.is_towards_name_used():
            end_bitposition = self._towards_name_.initialize_offsets_packed(end_bitposition)
        if self.is_towards_number_used():
            end_bitposition = self._towards_number_.initialize_offsets_packed(end_bitposition)
        if self.is_direction_name_used():
            end_bitposition = self._direction_name_.initialize_offsets_packed(end_bitposition)
        if self.is_direction_number_used():
            end_bitposition = self._direction_number_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.from_reader(zserio_reader)
        if self.is_exit_name_used():
            self._exit_name_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)
        else:
            self._exit_name_ = None
        if self.is_exit_number_used():
            self._exit_number_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)
        else:
            self._exit_number_ = None
        if self.is_towards_name_used():
            self._towards_name_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_name()), zserio_reader, is_auto=True)
        else:
            self._towards_name_ = None
        if self.is_towards_number_used():
            self._towards_number_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_number()), zserio_reader, is_auto=True)
        else:
            self._towards_number_ = None
        if self.is_direction_name_used():
            self._direction_name_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_name()), zserio_reader, is_auto=True)
        else:
            self._direction_name_ = None
        if self.is_direction_number_used():
            self._direction_number_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_number()), zserio_reader, is_auto=True)
        else:
            self._direction_number_ = None

    def read_packed(self, zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.instructions.types.signpost_instruction_content.SignpostInstructionContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_exit_name_used():
            self._exit_name_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context.exit_name, zserio_reader)
        else:
            self._exit_name_ = None

        if self.is_exit_number_used():
            self._exit_number_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context.exit_number, zserio_reader)
        else:
            self._exit_number_ = None

        if self.is_towards_name_used():
            self._towards_name_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_name()), zserio_reader, is_auto=True)
        else:
            self._towards_name_ = None

        if self.is_towards_number_used():
            self._towards_number_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_towards_number()), zserio_reader, is_auto=True)
        else:
            self._towards_number_ = None

        if self.is_direction_name_used():
            self._direction_name_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_name()), zserio_reader, is_auto=True)
        else:
            self._direction_name_ = None

        if self.is_direction_number_used():
            self._direction_number_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_direction_number()), zserio_reader, is_auto=True)
        else:
            self._direction_number_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_exit_name_used():
            self._exit_name_.write(zserio_writer)
        if self.is_exit_number_used():
            self._exit_number_.write(zserio_writer)
        if self.is_towards_name_used():
            self._towards_name_.write(zserio_writer)
        if self.is_towards_number_used():
            self._towards_number_.write(zserio_writer)
        if self.is_direction_name_used():
            self._direction_name_.write(zserio_writer)
        if self.is_direction_number_used():
            self._direction_number_.write(zserio_writer)

    def write_packed(self, zserio_context: SignpostPhoneticTranscriptions.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_exit_name_used():
            self._exit_name_.write_packed(zserio_context.exit_name, zserio_writer)

        if self.is_exit_number_used():
            self._exit_number_.write_packed(zserio_context.exit_number, zserio_writer)

        if self.is_towards_name_used():
            self._towards_name_.write_packed(zserio_writer)

        if self.is_towards_number_used():
            self._towards_number_.write_packed(zserio_writer)

        if self.is_direction_name_used():
            self._direction_name_.write_packed(zserio_writer)

        if self.is_direction_number_used():
            self._direction_number_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._exit_name_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()
            self._exit_number_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def exit_name(self):
            return self._exit_name_

        @property
        def exit_number(self):
            return self._exit_number_

    class _ZserioElementFactory_towards_name:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext:
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_towards_number:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext:
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_direction_name:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext:
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_direction_number:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext:
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList:
            del zserio_index
            return nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context, zserio_reader)
