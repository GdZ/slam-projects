# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.instructions.metadata.instructions_image_layer_content
import nds.instructions.types.junction_view_image_list
import nds.instructions.types.signpost_image_list
import nds.system.types.layer_type

class InstructionsImageLayer:
    def __init__(
            self,
            content_: typing.Union[nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent, None] = None,
            signpost_image_list_: typing.Optional[nds.instructions.types.signpost_image_list.SignpostImageList] = None,
            junction_view_image_list_: typing.Optional[nds.instructions.types.junction_view_image_list.JunctionViewImageList] = None) -> None:
        self._content_ = content_
        self._signpost_image_list_ = signpost_image_list_
        self._junction_view_image_list_ = junction_view_image_list_

    @classmethod
    def from_reader(
            cls: typing.Type['InstructionsImageLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'InstructionsImageLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['InstructionsImageLayer'],
            zserio_context: InstructionsImageLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'InstructionsImageLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InstructionsImageLayer):
            return ((self._content_ == other._content_) and
                    (not other.is_signpost_image_list_used() if not self.is_signpost_image_list_used() else (self._signpost_image_list_ == other._signpost_image_list_)) and
                    (not other.is_junction_view_image_list_used() if not self.is_junction_view_image_list_used() else (self._junction_view_image_list_ == other._junction_view_image_list_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_signpost_image_list_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._signpost_image_list_)
        if self.is_junction_view_image_list_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._junction_view_image_list_)

        return result

    @property
    def content(self) -> typing.Union[nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def signpost_image_list(self) -> typing.Optional[nds.instructions.types.signpost_image_list.SignpostImageList]:
        return self._signpost_image_list_

    @signpost_image_list.setter
    def signpost_image_list(self, signpost_image_list_: typing.Optional[nds.instructions.types.signpost_image_list.SignpostImageList]) -> None:
        self._signpost_image_list_ = signpost_image_list_

    def is_signpost_image_list_used(self) -> bool:
        return (self._content_ & nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.Values.SIGNPOSTS) == nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.Values.SIGNPOSTS

    def is_signpost_image_list_set(self) -> bool:
        return not self._signpost_image_list_ is None

    def reset_signpost_image_list(self) -> None:
        self._signpost_image_list_ = None

    @property
    def junction_view_image_list(self) -> typing.Optional[nds.instructions.types.junction_view_image_list.JunctionViewImageList]:
        return self._junction_view_image_list_

    @junction_view_image_list.setter
    def junction_view_image_list(self, junction_view_image_list_: typing.Optional[nds.instructions.types.junction_view_image_list.JunctionViewImageList]) -> None:
        self._junction_view_image_list_ = junction_view_image_list_

    def is_junction_view_image_list_used(self) -> bool:
        return (self._content_ & nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.Values.JUNCTION_VIEW) == nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.Values.JUNCTION_VIEW

    def is_junction_view_image_list_set(self) -> bool:
        return not self._junction_view_image_list_ is None

    def reset_junction_view_image_list(self) -> None:
        self._junction_view_image_list_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.GEOMETRY

    def init_packing_context(self, zserio_context: InstructionsImageLayer.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_signpost_image_list_used():
            self._signpost_image_list_.init_packing_context(zserio_context.signpost_image_list)
        if self.is_junction_view_image_list_used():
            self._junction_view_image_list_.init_packing_context(zserio_context.junction_view_image_list)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_signpost_image_list_used():
            end_bitposition += self._signpost_image_list_.bitsizeof(end_bitposition)
        if self.is_junction_view_image_list_used():
            end_bitposition += self._junction_view_image_list_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: InstructionsImageLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_signpost_image_list_used():
            end_bitposition += self._signpost_image_list_.bitsizeof_packed(zserio_context.signpost_image_list, end_bitposition)
        if self.is_junction_view_image_list_used():
            end_bitposition += self._junction_view_image_list_.bitsizeof_packed(zserio_context.junction_view_image_list, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_signpost_image_list_used():
            end_bitposition = self._signpost_image_list_.initialize_offsets(end_bitposition)
        if self.is_junction_view_image_list_used():
            end_bitposition = self._junction_view_image_list_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: InstructionsImageLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_signpost_image_list_used():
            end_bitposition = self._signpost_image_list_.initialize_offsets_packed(zserio_context.signpost_image_list, end_bitposition)
        if self.is_junction_view_image_list_used():
            end_bitposition = self._junction_view_image_list_.initialize_offsets_packed(zserio_context.junction_view_image_list, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.from_reader(zserio_reader)
        if self.is_signpost_image_list_used():
            self._signpost_image_list_ = nds.instructions.types.signpost_image_list.SignpostImageList.from_reader(zserio_reader)
        else:
            self._signpost_image_list_ = None
        if self.is_junction_view_image_list_used():
            self._junction_view_image_list_ = nds.instructions.types.junction_view_image_list.JunctionViewImageList.from_reader(zserio_reader)
        else:
            self._junction_view_image_list_ = None

    def read_packed(self, zserio_context: InstructionsImageLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.instructions.metadata.instructions_image_layer_content.InstructionsImageLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_signpost_image_list_used():
            self._signpost_image_list_ = nds.instructions.types.signpost_image_list.SignpostImageList.from_reader_packed(zserio_context.signpost_image_list, zserio_reader)
        else:
            self._signpost_image_list_ = None

        if self.is_junction_view_image_list_used():
            self._junction_view_image_list_ = nds.instructions.types.junction_view_image_list.JunctionViewImageList.from_reader_packed(zserio_context.junction_view_image_list, zserio_reader)
        else:
            self._junction_view_image_list_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_signpost_image_list_used():
            self._signpost_image_list_.write(zserio_writer)
        if self.is_junction_view_image_list_used():
            self._junction_view_image_list_.write(zserio_writer)

    def write_packed(self, zserio_context: InstructionsImageLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_signpost_image_list_used():
            self._signpost_image_list_.write_packed(zserio_context.signpost_image_list, zserio_writer)

        if self.is_junction_view_image_list_used():
            self._junction_view_image_list_.write_packed(zserio_context.junction_view_image_list, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._signpost_image_list_ = nds.instructions.types.signpost_image_list.SignpostImageList.ZserioPackingContext()
            self._junction_view_image_list_ = nds.instructions.types.junction_view_image_list.JunctionViewImageList.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def signpost_image_list(self):
            return self._signpost_image_list_

        @property
        def junction_view_image_list(self):
            return self._junction_view_image_list_
