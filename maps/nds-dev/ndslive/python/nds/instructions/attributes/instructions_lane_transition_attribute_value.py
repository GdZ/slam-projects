# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.instructions.attributes.instructions_lane_transition_attribute_type
import nds.instructions.types.junction_view
import nds.instructions.types.lane_instruction
import nds.instructions.types.signpost_image
import nds.instructions.types.signpost_instruction

class InstructionsLaneTransitionAttributeValue:
    def __init__(
            self,
            type_: nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType,
            *,
            signpost_image_: typing.Union[nds.instructions.types.signpost_image.SignpostImage, None] = None,
            signpost_instruction_: typing.Union[nds.instructions.types.signpost_instruction.SignpostInstruction, None] = None,
            lane_instruction_: typing.Union[nds.instructions.types.lane_instruction.LaneInstruction, None] = None,
            junction_view_: typing.Union[nds.instructions.types.junction_view.JunctionView, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if signpost_image_ is not None:
            self._choice = signpost_image_
        if signpost_instruction_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice InstructionsLaneTransitionAttributeValue is ambiguous!")
            self._choice = signpost_instruction_
        if lane_instruction_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice InstructionsLaneTransitionAttributeValue is ambiguous!")
            self._choice = lane_instruction_
        if junction_view_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice InstructionsLaneTransitionAttributeValue is ambiguous!")
            self._choice = junction_view_

    @classmethod
    def from_reader(
            cls: typing.Type['InstructionsLaneTransitionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType) -> 'InstructionsLaneTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['InstructionsLaneTransitionAttributeValue'],
            zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType) -> 'InstructionsLaneTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, InstructionsLaneTransitionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType:
        return self._type_

    @property
    def signpost_image(self) -> typing.Union[nds.instructions.types.signpost_image.SignpostImage, None]:
        return self._choice

    @signpost_image.setter
    def signpost_image(self, signpost_image_: typing.Union[nds.instructions.types.signpost_image.SignpostImage, None]) -> None:
        self._choice = signpost_image_

    @property
    def signpost_instruction(self) -> typing.Union[nds.instructions.types.signpost_instruction.SignpostInstruction, None]:
        return self._choice

    @signpost_instruction.setter
    def signpost_instruction(self, signpost_instruction_: typing.Union[nds.instructions.types.signpost_instruction.SignpostInstruction, None]) -> None:
        self._choice = signpost_instruction_

    @property
    def lane_instruction(self) -> typing.Union[nds.instructions.types.lane_instruction.LaneInstruction, None]:
        return self._choice

    @lane_instruction.setter
    def lane_instruction(self, lane_instruction_: typing.Union[nds.instructions.types.lane_instruction.LaneInstruction, None]) -> None:
        self._choice = lane_instruction_

    @property
    def junction_view(self) -> typing.Union[nds.instructions.types.junction_view.JunctionView, None]:
        return self._choice

    @junction_view.setter
    def junction_view(self, junction_view_: typing.Union[nds.instructions.types.junction_view.JunctionView, None]) -> None:
        self._choice = junction_view_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            return self.CHOICE_SIGNPOST_IMAGE
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            return self.CHOICE_SIGNPOST_INSTRUCTION
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            return self.CHOICE_LANE_INSTRUCTION
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            return self.CHOICE_JUNCTION_VIEW
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            self._choice.init_packing_context(zserio_context.signpost_image)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            self._choice.init_packing_context(zserio_context.signpost_instruction)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            self._choice.init_packing_context(zserio_context.lane_instruction)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            self._choice.init_packing_context(zserio_context.junction_view)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.signpost_image, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.signpost_instruction, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.lane_instruction, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.junction_view, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.signpost_image, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.signpost_instruction, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.lane_instruction, end_bitposition)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.junction_view, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            self._choice = nds.instructions.types.signpost_image.SignpostImage.from_reader(zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            self._choice = nds.instructions.types.signpost_instruction.SignpostInstruction.from_reader(zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            self._choice = nds.instructions.types.lane_instruction.LaneInstruction.from_reader(zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            self._choice = nds.instructions.types.junction_view.JunctionView.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

    def read_packed(self, zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            self._choice = nds.instructions.types.signpost_image.SignpostImage.from_reader_packed(zserio_context.signpost_image, zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            self._choice = nds.instructions.types.signpost_instruction.SignpostInstruction.from_reader_packed(zserio_context.signpost_instruction, zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            self._choice = nds.instructions.types.lane_instruction.LaneInstruction.from_reader_packed(zserio_context.lane_instruction, zserio_reader)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            self._choice = nds.instructions.types.junction_view.JunctionView.from_reader_packed(zserio_context.junction_view, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

    def write_packed(self, zserio_context: InstructionsLaneTransitionAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_IMAGE):
            self._choice.write_packed(zserio_context.signpost_image, zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.SIGNPOST_INSTRUCTION):
            self._choice.write_packed(zserio_context.signpost_instruction, zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.LANE_INSTRUCTION):
            self._choice.write_packed(zserio_context.lane_instruction, zserio_writer)
        elif selector == (nds.instructions.attributes.instructions_lane_transition_attribute_type.InstructionsLaneTransitionAttributeType.JUNCTION_VIEW):
            self._choice.write_packed(zserio_context.junction_view, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice InstructionsLaneTransitionAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._signpost_image_ = nds.instructions.types.signpost_image.SignpostImage.ZserioPackingContext()
            self._signpost_instruction_ = nds.instructions.types.signpost_instruction.SignpostInstruction.ZserioPackingContext()
            self._lane_instruction_ = nds.instructions.types.lane_instruction.LaneInstruction.ZserioPackingContext()
            self._junction_view_ = nds.instructions.types.junction_view.JunctionView.ZserioPackingContext()

        @property
        def signpost_image(self):
            return self._signpost_image_

        @property
        def signpost_instruction(self):
            return self._signpost_instruction_

        @property
        def lane_instruction(self):
            return self._lane_instruction_

        @property
        def junction_view(self):
            return self._junction_view_

    CHOICE_SIGNPOST_IMAGE = 0
    CHOICE_SIGNPOST_INSTRUCTION = 1
    CHOICE_LANE_INSTRUCTION = 2
    CHOICE_JUNCTION_VIEW = 3
    UNDEFINED_CHOICE = -1
