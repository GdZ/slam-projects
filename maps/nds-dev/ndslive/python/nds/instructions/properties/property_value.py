# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.language_code
import nds.instructions.properties.property_type
import nds.instructions.types.signpost_graphics_background_color
import nds.instructions.types.signpost_graphics_background_icon
import nds.instructions.types.signpost_graphics_direction_icon
import nds.instructions.types.signpost_graphics_text_color
import nds.instructions.types.signpost_graphics_towards_icon
import nds.instructions.types.signpost_phonetic_transcriptions

class PropertyValue:
    def __init__(
            self,
            type_: nds.instructions.properties.property_type.PropertyType,
            *,
            language_code_: typing.Union[nds.core.types.language_code.LanguageCode, None] = None,
            signpost_phonetic_transcriptions_: typing.Union[nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions, None] = None,
            signpost_graphics_background_color_: typing.Union[nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor, None] = None,
            signpost_graphics_background_icon_: typing.Union[nds.instructions.types.signpost_graphics_background_icon.SignpostGraphicsBackgroundIcon, None] = None,
            signpost_graphics_towards_icon_: typing.Union[nds.instructions.types.signpost_graphics_towards_icon.SignpostGraphicsTowardsIcon, None] = None,
            signpost_graphics_direction_icon_: typing.Union[nds.instructions.types.signpost_graphics_direction_icon.SignpostGraphicsDirectionIcon, None] = None,
            signpost_graphics_text_color_: typing.Union[nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if language_code_ is not None:
            self._choice = language_code_
        if signpost_phonetic_transcriptions_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_phonetic_transcriptions_
        if signpost_graphics_background_color_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_graphics_background_color_
        if signpost_graphics_background_icon_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_graphics_background_icon_
        if signpost_graphics_towards_icon_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_graphics_towards_icon_
        if signpost_graphics_direction_icon_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_graphics_direction_icon_
        if signpost_graphics_text_color_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = signpost_graphics_text_color_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.instructions.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.instructions.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            result = zserio.hashcode.calc_hashcode_int64(result, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.instructions.properties.property_type.PropertyType:
        return self._type_

    @property
    def language_code(self) -> nds.core.types.language_code.LanguageCode:
        return self._choice

    @language_code.setter
    def language_code(self, language_code_: nds.core.types.language_code.LanguageCode) -> None:
        self._choice = language_code_

    @property
    def signpost_phonetic_transcriptions(self) -> typing.Union[nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions, None]:
        return self._choice

    @signpost_phonetic_transcriptions.setter
    def signpost_phonetic_transcriptions(self, signpost_phonetic_transcriptions_: typing.Union[nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions, None]) -> None:
        self._choice = signpost_phonetic_transcriptions_

    @property
    def signpost_graphics_background_color(self) -> typing.Union[nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor, None]:
        return self._choice

    @signpost_graphics_background_color.setter
    def signpost_graphics_background_color(self, signpost_graphics_background_color_: typing.Union[nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor, None]) -> None:
        self._choice = signpost_graphics_background_color_

    @property
    def signpost_graphics_background_icon(self) -> nds.instructions.types.signpost_graphics_background_icon.SignpostGraphicsBackgroundIcon:
        return self._choice

    @signpost_graphics_background_icon.setter
    def signpost_graphics_background_icon(self, signpost_graphics_background_icon_: nds.instructions.types.signpost_graphics_background_icon.SignpostGraphicsBackgroundIcon) -> None:
        self._choice = signpost_graphics_background_icon_

    @property
    def signpost_graphics_towards_icon(self) -> nds.instructions.types.signpost_graphics_towards_icon.SignpostGraphicsTowardsIcon:
        return self._choice

    @signpost_graphics_towards_icon.setter
    def signpost_graphics_towards_icon(self, signpost_graphics_towards_icon_: nds.instructions.types.signpost_graphics_towards_icon.SignpostGraphicsTowardsIcon) -> None:
        self._choice = signpost_graphics_towards_icon_

    @property
    def signpost_graphics_direction_icon(self) -> nds.instructions.types.signpost_graphics_direction_icon.SignpostGraphicsDirectionIcon:
        return self._choice

    @signpost_graphics_direction_icon.setter
    def signpost_graphics_direction_icon(self, signpost_graphics_direction_icon_: nds.instructions.types.signpost_graphics_direction_icon.SignpostGraphicsDirectionIcon) -> None:
        self._choice = signpost_graphics_direction_icon_

    @property
    def signpost_graphics_text_color(self) -> typing.Union[nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor, None]:
        return self._choice

    @signpost_graphics_text_color.setter
    def signpost_graphics_text_color(self, signpost_graphics_text_color_: typing.Union[nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor, None]) -> None:
        self._choice = signpost_graphics_text_color_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            return self.CHOICE_LANGUAGE_CODE
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            return self.CHOICE_SIGNPOST_PHONETIC_TRANSCRIPTIONS
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            return self.CHOICE_SIGNPOST_GRAPHICS_BACKGROUND_COLOR
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            return self.CHOICE_SIGNPOST_GRAPHICS_BACKGROUND_ICON
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            return self.CHOICE_SIGNPOST_GRAPHICS_TOWARDS_ICON
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            return self.CHOICE_SIGNPOST_GRAPHICS_DIRECTION_ICON
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            return self.CHOICE_SIGNPOST_GRAPHICS_TEXT_COLOR
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            self._choice.init_packing_context(zserio_context.signpost_phonetic_transcriptions)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            self._choice.init_packing_context(zserio_context.signpost_graphics_background_color)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            zserio_context.signpost_graphics_background_icon.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            zserio_context.signpost_graphics_towards_icon.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            zserio_context.signpost_graphics_direction_icon.init(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            self._choice.init_packing_context(zserio_context.signpost_graphics_text_color)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.signpost_phonetic_transcriptions, end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.signpost_graphics_background_color, end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            end_bitposition += zserio_context.signpost_graphics_background_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            end_bitposition += zserio_context.signpost_graphics_towards_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            end_bitposition += zserio_context.signpost_graphics_direction_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.signpost_graphics_text_color, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.signpost_phonetic_transcriptions, end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.signpost_graphics_background_color, end_bitposition)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            end_bitposition += zserio_context.signpost_graphics_background_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            end_bitposition += zserio_context.signpost_graphics_towards_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            end_bitposition += zserio_context.signpost_graphics_direction_icon.bitsizeof(zserio.array.VarUIntArrayTraits(), self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.signpost_graphics_text_color, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            self._choice = nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions.from_reader(zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            self._choice = nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor.from_reader(zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            self._choice = zserio_reader.read_varuint()
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            self._choice = nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_context.language_code.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            self._choice = nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions.from_reader_packed(zserio_context.signpost_phonetic_transcriptions, zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            self._choice = nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor.from_reader_packed(zserio_context.signpost_graphics_background_color, zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            self._choice = zserio_context.signpost_graphics_background_icon.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            self._choice = zserio_context.signpost_graphics_towards_icon.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            self._choice = zserio_context.signpost_graphics_direction_icon.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            self._choice = nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor.from_reader_packed(zserio_context.signpost_graphics_text_color, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            self._choice.write(zserio_writer)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            self._choice.write(zserio_writer)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            zserio_writer.write_varuint(self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.instructions.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.instructions.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_PHONETIC_TRANSCRIPTIONS):
            self._choice.write_packed(zserio_context.signpost_phonetic_transcriptions, zserio_writer)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_COLOR):
            self._choice.write_packed(zserio_context.signpost_graphics_background_color, zserio_writer)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_BACKGROUND_ICON):
            zserio_context.signpost_graphics_background_icon.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TOWARDS_ICON):
            zserio_context.signpost_graphics_towards_icon.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_DIRECTION_ICON):
            zserio_context.signpost_graphics_direction_icon.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.instructions.properties.property_type.PropertyType.SIGNPOST_GRAPHICS_TEXT_COLOR):
            self._choice.write_packed(zserio_context.signpost_graphics_text_color, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._language_code_ = zserio.array.DeltaContext()
            self._signpost_phonetic_transcriptions_ = nds.instructions.types.signpost_phonetic_transcriptions.SignpostPhoneticTranscriptions.ZserioPackingContext()
            self._signpost_graphics_background_color_ = nds.instructions.types.signpost_graphics_background_color.SignpostGraphicsBackgroundColor.ZserioPackingContext()
            self._signpost_graphics_background_icon_ = zserio.array.DeltaContext()
            self._signpost_graphics_towards_icon_ = zserio.array.DeltaContext()
            self._signpost_graphics_direction_icon_ = zserio.array.DeltaContext()
            self._signpost_graphics_text_color_ = nds.instructions.types.signpost_graphics_text_color.SignpostGraphicsTextColor.ZserioPackingContext()

        @property
        def language_code(self):
            return self._language_code_

        @property
        def signpost_phonetic_transcriptions(self):
            return self._signpost_phonetic_transcriptions_

        @property
        def signpost_graphics_background_color(self):
            return self._signpost_graphics_background_color_

        @property
        def signpost_graphics_background_icon(self):
            return self._signpost_graphics_background_icon_

        @property
        def signpost_graphics_towards_icon(self):
            return self._signpost_graphics_towards_icon_

        @property
        def signpost_graphics_direction_icon(self):
            return self._signpost_graphics_direction_icon_

        @property
        def signpost_graphics_text_color(self):
            return self._signpost_graphics_text_color_

    CHOICE_LANGUAGE_CODE = 0
    CHOICE_SIGNPOST_PHONETIC_TRANSCRIPTIONS = 1
    CHOICE_SIGNPOST_GRAPHICS_BACKGROUND_COLOR = 2
    CHOICE_SIGNPOST_GRAPHICS_BACKGROUND_ICON = 3
    CHOICE_SIGNPOST_GRAPHICS_TOWARDS_ICON = 4
    CHOICE_SIGNPOST_GRAPHICS_DIRECTION_ICON = 5
    CHOICE_SIGNPOST_GRAPHICS_TEXT_COLOR = 6
    UNDEFINED_CHOICE = -1
