# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.venue.details.attributes.parking_row_attribute_type
import nds.venue.details.types.parking_restrictions
import nds.venue.details.types.parking_row_layout
import nds.venue.details.types.parking_row_name

class ParkingRowAttributeValue:
    def __init__(
            self,
            type_: nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType,
            *,
            parking_row_name_: typing.Union[nds.venue.details.types.parking_row_name.ParkingRowName, None] = None,
            parking_row_layout_: typing.Union[nds.venue.details.types.parking_row_layout.ParkingRowLayout, None] = None,
            parking_row_restrictions_: typing.Union[nds.venue.details.types.parking_restrictions.ParkingRestrictions, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if parking_row_name_ is not None:
            self._choice = parking_row_name_
        if parking_row_layout_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ParkingRowAttributeValue is ambiguous!")
            self._choice = parking_row_layout_
        if parking_row_restrictions_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ParkingRowAttributeValue is ambiguous!")
            self._choice = parking_row_restrictions_

    @classmethod
    def from_reader(
            cls: typing.Type['ParkingRowAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType) -> 'ParkingRowAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ParkingRowAttributeValue'],
            zserio_context: ParkingRowAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType) -> 'ParkingRowAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParkingRowAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType:
        return self._type_

    @property
    def parking_row_name(self) -> nds.venue.details.types.parking_row_name.ParkingRowName:
        return self._choice

    @parking_row_name.setter
    def parking_row_name(self, parking_row_name_: nds.venue.details.types.parking_row_name.ParkingRowName) -> None:
        self._choice = parking_row_name_

    @property
    def parking_row_layout(self) -> typing.Union[nds.venue.details.types.parking_row_layout.ParkingRowLayout, None]:
        return self._choice

    @parking_row_layout.setter
    def parking_row_layout(self, parking_row_layout_: typing.Union[nds.venue.details.types.parking_row_layout.ParkingRowLayout, None]) -> None:
        self._choice = parking_row_layout_

    @property
    def parking_row_restrictions(self) -> typing.Union[nds.venue.details.types.parking_restrictions.ParkingRestrictions, None]:
        return self._choice

    @parking_row_restrictions.setter
    def parking_row_restrictions(self, parking_row_restrictions_: typing.Union[nds.venue.details.types.parking_restrictions.ParkingRestrictions, None]) -> None:
        self._choice = parking_row_restrictions_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            return self.CHOICE_PARKING_ROW_NAME
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            return self.CHOICE_PARKING_ROW_LAYOUT
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            return self.CHOICE_PARKING_ROW_RESTRICTIONS
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: ParkingRowAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            pass
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            self._choice.init_packing_context(zserio_context.parking_row_layout)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            self._choice.init_packing_context(zserio_context.parking_row_restrictions)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ParkingRowAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.parking_row_layout, end_bitposition)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.parking_row_restrictions, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ParkingRowAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.parking_row_layout, end_bitposition)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.parking_row_restrictions, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            self._choice = nds.venue.details.types.parking_row_layout.ParkingRowLayout.from_reader(zserio_reader)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            self._choice = nds.venue.details.types.parking_restrictions.ParkingRestrictions.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

    def read_packed(self, zserio_context: ParkingRowAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            self._choice = nds.venue.details.types.parking_row_layout.ParkingRowLayout.from_reader_packed(zserio_context.parking_row_layout, zserio_reader)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            self._choice = nds.venue.details.types.parking_restrictions.ParkingRestrictions.from_reader_packed(zserio_context.parking_row_restrictions, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            self._choice.write(zserio_writer)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

    def write_packed(self, zserio_context: ParkingRowAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_ROW_LAYOUT):
            self._choice.write_packed(zserio_context.parking_row_layout, zserio_writer)
        elif selector == (nds.venue.details.attributes.parking_row_attribute_type.ParkingRowAttributeType.PARKING_RESTRICTIONS):
            self._choice.write_packed(zserio_context.parking_row_restrictions, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice ParkingRowAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._parking_row_layout_ = nds.venue.details.types.parking_row_layout.ParkingRowLayout.ZserioPackingContext()
            self._parking_row_restrictions_ = zserio.array.DeltaContext()

        @property
        def parking_row_layout(self):
            return self._parking_row_layout_

        @property
        def parking_row_restrictions(self):
            return self._parking_row_restrictions_

    CHOICE_PARKING_ROW_NAME = 0
    CHOICE_PARKING_ROW_LAYOUT = 1
    CHOICE_PARKING_ROW_RESTRICTIONS = 2
    UNDEFINED_CHOICE = -1
