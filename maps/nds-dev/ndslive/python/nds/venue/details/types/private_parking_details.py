# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class PrivateParkingDetails:
    def __init__(
            self,
            hint_: str = str()) -> None:
        self._hint_ = hint_

    @classmethod
    def from_reader(
            cls: typing.Type['PrivateParkingDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'PrivateParkingDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PrivateParkingDetails):
            return (self._hint_ == other._hint_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._hint_)

        return result

    @property
    def hint(self) -> str:
        return self._hint_

    @hint.setter
    def hint(self, hint_: str) -> None:
        self._hint_ = hint_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._hint_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._hint_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._hint_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._hint_)
