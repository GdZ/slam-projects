# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.venue.details.types.parking_orientation

class ParkingRowLayout:
    def __init__(
            self,
            structured_parking_: bool = bool(),
            interlocked_spots_: bool = bool(),
            orientation_: typing.Union[nds.venue.details.types.parking_orientation.ParkingOrientation, None] = None) -> None:
        self._structured_parking_ = structured_parking_
        self._interlocked_spots_ = interlocked_spots_
        self._orientation_ = orientation_

    @classmethod
    def from_reader(
            cls: typing.Type['ParkingRowLayout'],
            zserio_reader: zserio.BitStreamReader) -> 'ParkingRowLayout':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ParkingRowLayout'],
            zserio_context: ParkingRowLayout.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ParkingRowLayout':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParkingRowLayout):
            return ((self._structured_parking_ == other._structured_parking_) and
                    (self._interlocked_spots_ == other._interlocked_spots_) and
                    (self._orientation_ == other._orientation_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._structured_parking_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._interlocked_spots_)
        result = zserio.hashcode.calc_hashcode_object(result, self._orientation_)

        return result

    @property
    def structured_parking(self) -> bool:
        return self._structured_parking_

    @structured_parking.setter
    def structured_parking(self, structured_parking_: bool) -> None:
        self._structured_parking_ = structured_parking_

    @property
    def interlocked_spots(self) -> bool:
        return self._interlocked_spots_

    @interlocked_spots.setter
    def interlocked_spots(self, interlocked_spots_: bool) -> None:
        self._interlocked_spots_ = interlocked_spots_

    @property
    def orientation(self) -> typing.Union[nds.venue.details.types.parking_orientation.ParkingOrientation, None]:
        return self._orientation_

    @orientation.setter
    def orientation(self, orientation_: typing.Union[nds.venue.details.types.parking_orientation.ParkingOrientation, None]) -> None:
        self._orientation_ = orientation_

    def init_packing_context(self, zserio_context: ParkingRowLayout.ZserioPackingContext) -> None:
        self._orientation_.init_packing_context(zserio_context.orientation)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += self._orientation_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ParkingRowLayout.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += self._orientation_.bitsizeof_packed(zserio_context.orientation, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = self._orientation_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ParkingRowLayout.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition = self._orientation_.initialize_offsets_packed(zserio_context.orientation, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._structured_parking_ = zserio_reader.read_bool()
        self._interlocked_spots_ = zserio_reader.read_bool()
        self._orientation_ = nds.venue.details.types.parking_orientation.ParkingOrientation.from_reader(zserio_reader)

    def read_packed(self, zserio_context: ParkingRowLayout.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._structured_parking_ = zserio_reader.read_bool()

        self._interlocked_spots_ = zserio_reader.read_bool()

        self._orientation_ = nds.venue.details.types.parking_orientation.ParkingOrientation.from_reader_packed(zserio_context.orientation, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._structured_parking_)
        zserio_writer.write_bool(self._interlocked_spots_)
        self._orientation_.write(zserio_writer)

    def write_packed(self, zserio_context: ParkingRowLayout.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._structured_parking_)

        zserio_writer.write_bool(self._interlocked_spots_)

        self._orientation_.write_packed(zserio_context.orientation, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._orientation_ = zserio.array.DeltaContext()

        @property
        def orientation(self):
            return self._orientation_
