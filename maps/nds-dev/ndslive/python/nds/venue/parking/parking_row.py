# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.venue.parking.parking_spot
import nds.venue.reference.types.parking_row_id

class ParkingRow:
    def __init__(
            self,
            id_: typing.Union[nds.venue.reference.types.parking_row_id.ParkingRowId, None] = None,
            spots_: typing.List[nds.venue.parking.parking_spot.ParkingSpot] = None) -> None:
        self._id_ = id_
        self._spots_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_spots()), spots_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['ParkingRow'],
            zserio_reader: zserio.BitStreamReader) -> 'ParkingRow':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ParkingRow'],
            zserio_context: ParkingRow.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ParkingRow':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParkingRow):
            return ((self._id_ == other._id_) and
                    (self._spots_ == other._spots_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._spots_)

        return result

    @property
    def id(self) -> typing.Union[nds.venue.reference.types.parking_row_id.ParkingRowId, None]:
        return self._id_

    @id.setter
    def id(self, id_: typing.Union[nds.venue.reference.types.parking_row_id.ParkingRowId, None]) -> None:
        self._id_ = id_

    @property
    def spots(self) -> typing.List[nds.venue.parking.parking_spot.ParkingSpot]:
        return self._spots_.raw_array

    @spots.setter
    def spots(self, spots_: typing.List[nds.venue.parking.parking_spot.ParkingSpot]) -> None:
        self._spots_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_spots()), spots_, is_auto=True)

    def init_packing_context(self, zserio_context: ParkingRow.ZserioPackingContext) -> None:
        self._id_.init_packing_context(zserio_context.id)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof(end_bitposition)
        end_bitposition += self._spots_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ParkingRow.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof_packed(zserio_context.id, end_bitposition)
        end_bitposition += self._spots_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets(end_bitposition)
        end_bitposition = self._spots_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ParkingRow.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets_packed(zserio_context.id, end_bitposition)
        end_bitposition = self._spots_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.venue.reference.types.parking_row_id.ParkingRowId.from_reader(zserio_reader)
        self._spots_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_spots()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: ParkingRow.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = nds.venue.reference.types.parking_row_id.ParkingRowId.from_reader_packed(zserio_context.id, zserio_reader)

        self._spots_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_spots()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write(zserio_writer)
        self._spots_.write(zserio_writer)

    def write_packed(self, zserio_context: ParkingRow.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write_packed(zserio_context.id, zserio_writer)

        self._spots_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = nds.venue.reference.types.parking_row_id.ParkingRowId.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

    class _ZserioElementFactory_spots:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.venue.parking.parking_spot.ParkingSpot:
            del zserio_index
            return nds.venue.parking.parking_spot.ParkingSpot.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.venue.parking.parking_spot.ParkingSpot.ZserioPackingContext:
            return nds.venue.parking.parking_spot.ParkingSpot.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.venue.parking.parking_spot.ParkingSpot.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.venue.parking.parking_spot.ParkingSpot:
            del zserio_index
            return nds.venue.parking.parking_spot.ParkingSpot.from_reader_packed(zserio_context, zserio_reader)
