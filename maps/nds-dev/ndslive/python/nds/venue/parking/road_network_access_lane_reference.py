# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.lane.reference.types.lane_group_position_validity
import nds.lane.reference.types.lane_group_reference_indirect
import nds.venue.parking.road_network_access_type
import nds.venue.reference.types.parking_facility_id

class RoadNetworkAccessLaneReference:
    def __init__(
            self,
            facility_id_: typing.Union[nds.venue.reference.types.parking_facility_id.ParkingFacilityId, None] = None,
            type_: typing.Union[nds.venue.parking.road_network_access_type.RoadNetworkAccessType, None] = None,
            indirect_reference_: typing.Union[nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect, None] = None,
            validity_: typing.Union[nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity, None] = None) -> None:
        self._facility_id_ = facility_id_
        self._type_ = type_
        self._indirect_reference_ = indirect_reference_
        self._validity_ = validity_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadNetworkAccessLaneReference'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadNetworkAccessLaneReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadNetworkAccessLaneReference'],
            zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadNetworkAccessLaneReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadNetworkAccessLaneReference):
            return ((self._facility_id_ == other._facility_id_) and
                    (self._type_ == other._type_) and
                    (self._indirect_reference_ == other._indirect_reference_) and
                    (self._validity_ == other._validity_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._facility_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._indirect_reference_)
        result = zserio.hashcode.calc_hashcode_object(result, self._validity_)

        return result

    @property
    def facility_id(self) -> typing.Union[nds.venue.reference.types.parking_facility_id.ParkingFacilityId, None]:
        return self._facility_id_

    @facility_id.setter
    def facility_id(self, facility_id_: typing.Union[nds.venue.reference.types.parking_facility_id.ParkingFacilityId, None]) -> None:
        self._facility_id_ = facility_id_

    @property
    def type(self) -> typing.Union[nds.venue.parking.road_network_access_type.RoadNetworkAccessType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.venue.parking.road_network_access_type.RoadNetworkAccessType, None]) -> None:
        self._type_ = type_

    @property
    def indirect_reference(self) -> typing.Union[nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect, None]:
        return self._indirect_reference_

    @indirect_reference.setter
    def indirect_reference(self, indirect_reference_: typing.Union[nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect, None]) -> None:
        self._indirect_reference_ = indirect_reference_

    @property
    def validity(self) -> typing.Union[nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity, None]:
        return self._validity_

    @validity.setter
    def validity(self, validity_: typing.Union[nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity, None]) -> None:
        self._validity_ = validity_

    def init_packing_context(self, zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext) -> None:
        self._facility_id_.init_packing_context(zserio_context.facility_id)
        self._type_.init_packing_context(zserio_context.type)
        self._indirect_reference_.init_packing_context(zserio_context.indirect_reference)
        self._validity_.init_packing_context(zserio_context.validity)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._facility_id_.bitsizeof(end_bitposition)
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._indirect_reference_.bitsizeof(end_bitposition)
        end_bitposition += self._validity_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._facility_id_.bitsizeof_packed(zserio_context.facility_id, end_bitposition)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._indirect_reference_.bitsizeof_packed(zserio_context.indirect_reference, end_bitposition)
        end_bitposition += self._validity_.bitsizeof_packed(zserio_context.validity, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._facility_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._indirect_reference_.initialize_offsets(end_bitposition)
        end_bitposition = self._validity_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._facility_id_.initialize_offsets_packed(zserio_context.facility_id, end_bitposition)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._indirect_reference_.initialize_offsets_packed(zserio_context.indirect_reference, end_bitposition)
        end_bitposition = self._validity_.initialize_offsets_packed(zserio_context.validity, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._facility_id_ = nds.venue.reference.types.parking_facility_id.ParkingFacilityId.from_reader(zserio_reader)
        self._type_ = nds.venue.parking.road_network_access_type.RoadNetworkAccessType.from_reader(zserio_reader)
        self._indirect_reference_ = nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect.from_reader(zserio_reader)
        self._validity_ = nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity.from_reader(zserio_reader, 0)

    def read_packed(self, zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._facility_id_ = nds.venue.reference.types.parking_facility_id.ParkingFacilityId.from_reader_packed(zserio_context.facility_id, zserio_reader)

        self._type_ = nds.venue.parking.road_network_access_type.RoadNetworkAccessType.from_reader_packed(zserio_context.type, zserio_reader)

        self._indirect_reference_ = nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect.from_reader_packed(zserio_context.indirect_reference, zserio_reader)

        self._validity_ = nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity.from_reader_packed(zserio_context.validity, zserio_reader, 0)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._facility_id_.write(zserio_writer)

        self._type_.write(zserio_writer)

        self._indirect_reference_.write(zserio_writer)

        # check parameters
        if self._validity_.coord_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RoadNetworkAccessLaneReference.validity: "
                                                f"{self._validity_.coord_shift} != {0}!")
        self._validity_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadNetworkAccessLaneReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._facility_id_.write_packed(zserio_context.facility_id, zserio_writer)

        self._type_.write_packed(zserio_context.type, zserio_writer)

        self._indirect_reference_.write_packed(zserio_context.indirect_reference, zserio_writer)

        # check parameters
        if self._validity_.coord_shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RoadNetworkAccessLaneReference.validity: "
                                                f"{self._validity_.coord_shift} != {0}!")
        self._validity_.write_packed(zserio_context.validity, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._facility_id_ = nds.venue.reference.types.parking_facility_id.ParkingFacilityId.ZserioPackingContext()
            self._type_ = zserio.array.DeltaContext()
            self._indirect_reference_ = nds.lane.reference.types.lane_group_reference_indirect.LaneGroupReferenceIndirect.ZserioPackingContext()
            self._validity_ = nds.lane.reference.types.lane_group_position_validity.LaneGroupPositionValidity.ZserioPackingContext()

        @property
        def facility_id(self):
            return self._facility_id_

        @property
        def type(self):
            return self._type_

        @property
        def indirect_reference(self):
            return self._indirect_reference_

        @property
        def validity(self):
            return self._validity_
