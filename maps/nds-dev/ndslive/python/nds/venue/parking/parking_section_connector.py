# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.bounding_polygon2d
import nds.core.geometry.coord_shift
import nds.venue.reference.types.parking_section_id

class ParkingSectionConnector:
    def __init__(
            self,
            section_id_: typing.Union[nds.venue.reference.types.parking_section_id.ParkingSectionId, None] = None,
            transition_polygon_: typing.Optional[nds.core.geometry.bounding_polygon2d.BoundingPolygon2D] = None) -> None:
        self._section_id_ = section_id_
        self._transition_polygon_ = transition_polygon_

    @classmethod
    def from_reader(
            cls: typing.Type['ParkingSectionConnector'],
            zserio_reader: zserio.BitStreamReader) -> 'ParkingSectionConnector':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ParkingSectionConnector'],
            zserio_context: ParkingSectionConnector.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ParkingSectionConnector':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ParkingSectionConnector):
            return ((self._section_id_ == other._section_id_) and
                    (not other.is_transition_polygon_used() if not self.is_transition_polygon_used() else (self._transition_polygon_ == other._transition_polygon_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._section_id_)
        if self.is_transition_polygon_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._transition_polygon_)

        return result

    @property
    def section_id(self) -> typing.Union[nds.venue.reference.types.parking_section_id.ParkingSectionId, None]:
        return self._section_id_

    @section_id.setter
    def section_id(self, section_id_: typing.Union[nds.venue.reference.types.parking_section_id.ParkingSectionId, None]) -> None:
        self._section_id_ = section_id_

    @property
    def transition_polygon(self) -> typing.Optional[nds.core.geometry.bounding_polygon2d.BoundingPolygon2D]:
        return self._transition_polygon_

    @transition_polygon.setter
    def transition_polygon(self, transition_polygon_: typing.Optional[nds.core.geometry.bounding_polygon2d.BoundingPolygon2D]) -> None:
        self._transition_polygon_ = transition_polygon_

    def is_transition_polygon_used(self) -> bool:
        return self.is_transition_polygon_set()

    def is_transition_polygon_set(self) -> bool:
        return not self._transition_polygon_ is None

    def reset_transition_polygon(self) -> None:
        self._transition_polygon_ = None

    def init_packing_context(self, zserio_context: ParkingSectionConnector.ZserioPackingContext) -> None:
        self._section_id_.init_packing_context(zserio_context.section_id)
        if self.is_transition_polygon_used():
            self._transition_polygon_.init_packing_context(zserio_context.transition_polygon)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._section_id_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_transition_polygon_used():
            end_bitposition += self._transition_polygon_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ParkingSectionConnector.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._section_id_.bitsizeof_packed(zserio_context.section_id, end_bitposition)
        end_bitposition += 1
        if self.is_transition_polygon_used():
            end_bitposition += self._transition_polygon_.bitsizeof_packed(zserio_context.transition_polygon, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._section_id_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_transition_polygon_used():
            end_bitposition = self._transition_polygon_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ParkingSectionConnector.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._section_id_.initialize_offsets_packed(zserio_context.section_id, end_bitposition)
        end_bitposition += 1
        if self.is_transition_polygon_used():
            end_bitposition = self._transition_polygon_.initialize_offsets_packed(zserio_context.transition_polygon, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._section_id_ = nds.venue.reference.types.parking_section_id.ParkingSectionId.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._transition_polygon_ = nds.core.geometry.bounding_polygon2d.BoundingPolygon2D.from_reader(zserio_reader, 0)
        else:
            self._transition_polygon_ = None

    def read_packed(self, zserio_context: ParkingSectionConnector.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._section_id_ = nds.venue.reference.types.parking_section_id.ParkingSectionId.from_reader_packed(zserio_context.section_id, zserio_reader)

        if zserio_reader.read_bool():
            self._transition_polygon_ = nds.core.geometry.bounding_polygon2d.BoundingPolygon2D.from_reader_packed(zserio_context.transition_polygon, zserio_reader, 0)
        else:
            self._transition_polygon_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._section_id_.write(zserio_writer)

        if self.is_transition_polygon_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._transition_polygon_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field ParkingSectionConnector.transitionPolygon: "
                                                    f"{self._transition_polygon_.shift} != {0}!")
            self._transition_polygon_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: ParkingSectionConnector.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._section_id_.write_packed(zserio_context.section_id, zserio_writer)

        if self.is_transition_polygon_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._transition_polygon_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field ParkingSectionConnector.transitionPolygon: "
                                                    f"{self._transition_polygon_.shift} != {0}!")
            self._transition_polygon_.write_packed(zserio_context.transition_polygon, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._section_id_ = nds.venue.reference.types.parking_section_id.ParkingSectionId.ZserioPackingContext()
            self._transition_polygon_ = nds.core.geometry.bounding_polygon2d.BoundingPolygon2D.ZserioPackingContext()

        @property
        def section_id(self):
            return self._section_id_

        @property
        def transition_polygon(self):
            return self._transition_polygon_
