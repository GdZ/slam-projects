# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.localization.types.obstacle_type

class ObstacleLayerMetadata:
    def __init__(
            self,
            available_obstacle_types_: typing.List[nds.localization.types.obstacle_type.ObstacleType] = None) -> None:
        self._available_obstacle_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_obstacle_types()), available_obstacle_types_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['ObstacleLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'ObstacleLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ObstacleLayerMetadata'],
            zserio_context: ObstacleLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ObstacleLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ObstacleLayerMetadata):
            return (self._available_obstacle_types_ == other._available_obstacle_types_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._available_obstacle_types_)

        return result

    @property
    def available_obstacle_types(self) -> typing.List[nds.localization.types.obstacle_type.ObstacleType]:
        return self._available_obstacle_types_.raw_array

    @available_obstacle_types.setter
    def available_obstacle_types(self, available_obstacle_types_: typing.List[nds.localization.types.obstacle_type.ObstacleType]) -> None:
        self._available_obstacle_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_obstacle_types()), available_obstacle_types_, is_auto=True)

    def init_packing_context(self, zserio_context: ObstacleLayerMetadata.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._available_obstacle_types_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ObstacleLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._available_obstacle_types_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._available_obstacle_types_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ObstacleLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._available_obstacle_types_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._available_obstacle_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_obstacle_types()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: ObstacleLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._available_obstacle_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_obstacle_types()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._available_obstacle_types_.write(zserio_writer)

    def write_packed(self, zserio_context: ObstacleLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._available_obstacle_types_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_available_obstacle_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.obstacle_type.ObstacleType:
            del zserio_index
            return nds.localization.types.obstacle_type.ObstacleType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.obstacle_type.ObstacleType:
            del zserio_index
            return nds.localization.types.obstacle_type.ObstacleType.from_reader_packed(zserio_context, zserio_reader)
