# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.localization.instantiations.occupancy_grid_road_attribute_map_list
import nds.system.types.layer_type

class RoadOccupancyGridLayer:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            road_attribute_maps_: typing.Union[nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList, None] = None) -> None:
        self._shift_ = shift_
        self._road_attribute_maps_ = road_attribute_maps_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadOccupancyGridLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadOccupancyGridLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadOccupancyGridLayer'],
            zserio_context: RoadOccupancyGridLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadOccupancyGridLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadOccupancyGridLayer):
            return ((self._shift_ == other._shift_) and
                    (self._road_attribute_maps_ == other._road_attribute_maps_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._road_attribute_maps_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @shift.setter
    def shift(self, shift_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._shift_ = shift_

    @property
    def road_attribute_maps(self) -> typing.Union[nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList, None]:
        return self._road_attribute_maps_

    @road_attribute_maps.setter
    def road_attribute_maps(self, road_attribute_maps_: typing.Union[nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList, None]) -> None:
        self._road_attribute_maps_ = road_attribute_maps_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.RELATION

    def init_packing_context(self, zserio_context: RoadOccupancyGridLayer.ZserioPackingContext) -> None:
        zserio_context.shift.init(zserio.array.BitFieldArrayTraits(5), self._shift_)
        self._road_attribute_maps_.init_packing_context(zserio_context.road_attribute_maps)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += self._road_attribute_maps_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadOccupancyGridLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_)
        end_bitposition += self._road_attribute_maps_.bitsizeof_packed(zserio_context.road_attribute_maps, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition = self._road_attribute_maps_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadOccupancyGridLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_)
        end_bitposition = self._road_attribute_maps_.initialize_offsets_packed(zserio_context.road_attribute_maps, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._shift_ = zserio_reader.read_bits(5)
        self._road_attribute_maps_ = nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList.from_reader(zserio_reader, self._shift_)

    def read_packed(self, zserio_context: RoadOccupancyGridLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._shift_ = zserio_context.shift.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._road_attribute_maps_ = nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList.from_reader_packed(zserio_context.road_attribute_maps, zserio_reader, self._shift_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._shift_, 5)

        # check parameters
        if self._road_attribute_maps_.coord_shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RoadOccupancyGridLayer.roadAttributeMaps: "
                                                f"{self._road_attribute_maps_.coord_shift} != {self._shift_}!")
        self._road_attribute_maps_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadOccupancyGridLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.shift.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._shift_)

        # check parameters
        if self._road_attribute_maps_.coord_shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter coordShift for field RoadOccupancyGridLayer.roadAttributeMaps: "
                                                f"{self._road_attribute_maps_.coord_shift} != {self._shift_}!")
        self._road_attribute_maps_.write_packed(zserio_context.road_attribute_maps, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._shift_ = zserio.array.DeltaContext()
            self._road_attribute_maps_ = nds.localization.instantiations.occupancy_grid_road_attribute_map_list.OccupancyGridRoadAttributeMapList.ZserioPackingContext()

        @property
        def shift(self):
            return self._shift_

        @property
        def road_attribute_maps(self):
            return self._road_attribute_maps_
