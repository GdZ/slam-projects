# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.localization.types.landmark_line_type
import nds.localization.types.landmark_mesh_type
import nds.localization.types.landmark_polygon_type

class LandmarkLayerHeader:
    def __init__(
            self,
            available_line_types_: typing.List[nds.localization.types.landmark_line_type.LandmarkLineType] = None,
            available_polygon_types_: typing.List[nds.localization.types.landmark_polygon_type.LandmarkPolygonType] = None,
            available_mesh_types_: typing.List[nds.localization.types.landmark_mesh_type.LandmarkMeshType] = None,
            has_relations_: bool = bool(),
            has_details_: bool = bool()) -> None:
        self._available_line_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_line_types()), available_line_types_, is_auto=True)
        self._available_polygon_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_polygon_types()), available_polygon_types_, is_auto=True)
        self._available_mesh_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_mesh_types()), available_mesh_types_, is_auto=True)
        self._has_relations_ = has_relations_
        self._has_details_ = has_details_

    @classmethod
    def from_reader(
            cls: typing.Type['LandmarkLayerHeader'],
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkLayerHeader':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LandmarkLayerHeader'],
            zserio_context: LandmarkLayerHeader.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkLayerHeader':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LandmarkLayerHeader):
            return ((self._available_line_types_ == other._available_line_types_) and
                    (self._available_polygon_types_ == other._available_polygon_types_) and
                    (self._available_mesh_types_ == other._available_mesh_types_) and
                    (self._has_relations_ == other._has_relations_) and
                    (self._has_details_ == other._has_details_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._available_line_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_polygon_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_mesh_types_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_relations_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_details_)

        return result

    @property
    def available_line_types(self) -> typing.List[nds.localization.types.landmark_line_type.LandmarkLineType]:
        return self._available_line_types_.raw_array

    @available_line_types.setter
    def available_line_types(self, available_line_types_: typing.List[nds.localization.types.landmark_line_type.LandmarkLineType]) -> None:
        self._available_line_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_line_types()), available_line_types_, is_auto=True)

    @property
    def available_polygon_types(self) -> typing.List[nds.localization.types.landmark_polygon_type.LandmarkPolygonType]:
        return self._available_polygon_types_.raw_array

    @available_polygon_types.setter
    def available_polygon_types(self, available_polygon_types_: typing.List[nds.localization.types.landmark_polygon_type.LandmarkPolygonType]) -> None:
        self._available_polygon_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_polygon_types()), available_polygon_types_, is_auto=True)

    @property
    def available_mesh_types(self) -> typing.List[nds.localization.types.landmark_mesh_type.LandmarkMeshType]:
        return self._available_mesh_types_.raw_array

    @available_mesh_types.setter
    def available_mesh_types(self, available_mesh_types_: typing.List[nds.localization.types.landmark_mesh_type.LandmarkMeshType]) -> None:
        self._available_mesh_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_mesh_types()), available_mesh_types_, is_auto=True)

    @property
    def has_relations(self) -> bool:
        return self._has_relations_

    @has_relations.setter
    def has_relations(self, has_relations_: bool) -> None:
        self._has_relations_ = has_relations_

    @property
    def has_details(self) -> bool:
        return self._has_details_

    @has_details.setter
    def has_details(self, has_details_: bool) -> None:
        self._has_details_ = has_details_

    def init_packing_context(self, zserio_context: LandmarkLayerHeader.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._available_line_types_.bitsizeof(end_bitposition)
        end_bitposition += self._available_polygon_types_.bitsizeof(end_bitposition)
        end_bitposition += self._available_mesh_types_.bitsizeof(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LandmarkLayerHeader.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._available_line_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._available_polygon_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._available_mesh_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._available_line_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._available_polygon_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._available_mesh_types_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LandmarkLayerHeader.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._available_line_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._available_polygon_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._available_mesh_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._available_line_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_line_types()), zserio_reader, is_auto=True)
        self._available_polygon_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_polygon_types()), zserio_reader, is_auto=True)
        self._available_mesh_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_mesh_types()), zserio_reader, is_auto=True)
        self._has_relations_ = zserio_reader.read_bool()
        self._has_details_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: LandmarkLayerHeader.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._available_line_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_line_types()), zserio_reader, is_auto=True)

        self._available_polygon_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_polygon_types()), zserio_reader, is_auto=True)

        self._available_mesh_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_mesh_types()), zserio_reader, is_auto=True)

        self._has_relations_ = zserio_reader.read_bool()

        self._has_details_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._available_line_types_.write(zserio_writer)
        self._available_polygon_types_.write(zserio_writer)
        self._available_mesh_types_.write(zserio_writer)
        zserio_writer.write_bool(self._has_relations_)
        zserio_writer.write_bool(self._has_details_)

    def write_packed(self, zserio_context: LandmarkLayerHeader.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._available_line_types_.write_packed(zserio_writer)

        self._available_polygon_types_.write_packed(zserio_writer)

        self._available_mesh_types_.write_packed(zserio_writer)

        zserio_writer.write_bool(self._has_relations_)

        zserio_writer.write_bool(self._has_details_)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_available_line_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_line_type.LandmarkLineType:
            del zserio_index
            return nds.localization.types.landmark_line_type.LandmarkLineType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_line_type.LandmarkLineType:
            del zserio_index
            return nds.localization.types.landmark_line_type.LandmarkLineType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_available_polygon_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_polygon_type.LandmarkPolygonType:
            del zserio_index
            return nds.localization.types.landmark_polygon_type.LandmarkPolygonType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_polygon_type.LandmarkPolygonType:
            del zserio_index
            return nds.localization.types.landmark_polygon_type.LandmarkPolygonType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_available_mesh_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_mesh_type.LandmarkMeshType:
            del zserio_index
            return nds.localization.types.landmark_mesh_type.LandmarkMeshType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.localization.types.landmark_mesh_type.LandmarkMeshType:
            del zserio_index
            return nds.localization.types.landmark_mesh_type.LandmarkMeshType.from_reader_packed(zserio_context, zserio_reader)
