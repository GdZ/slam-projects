# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.geometry_layer_type
import nds.localization.instantiations.obstacle_geometry_layer
import nds.system.types.layer_type

class ObstacleLayer:
    def __init__(
            self,
            obstacle_geometry_layer_: typing.Union[nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer, None] = None) -> None:
        self._obstacle_geometry_layer_ = obstacle_geometry_layer_

    @classmethod
    def from_reader(
            cls: typing.Type['ObstacleLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'ObstacleLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ObstacleLayer'],
            zserio_context: ObstacleLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ObstacleLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ObstacleLayer):
            return (self._obstacle_geometry_layer_ == other._obstacle_geometry_layer_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._obstacle_geometry_layer_)

        return result

    @property
    def obstacle_geometry_layer(self) -> typing.Union[nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer, None]:
        return self._obstacle_geometry_layer_

    @obstacle_geometry_layer.setter
    def obstacle_geometry_layer(self, obstacle_geometry_layer_: typing.Union[nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer, None]) -> None:
        self._obstacle_geometry_layer_ = obstacle_geometry_layer_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.GEOMETRY

    def init_packing_context(self, zserio_context: ObstacleLayer.ZserioPackingContext) -> None:
        self._obstacle_geometry_layer_.init_packing_context(zserio_context.obstacle_geometry_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._obstacle_geometry_layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ObstacleLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._obstacle_geometry_layer_.bitsizeof_packed(zserio_context.obstacle_geometry_layer, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._obstacle_geometry_layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ObstacleLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._obstacle_geometry_layer_.initialize_offsets_packed(zserio_context.obstacle_geometry_layer, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._obstacle_geometry_layer_ = nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, False, True)

    def read_packed(self, zserio_context: ObstacleLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._obstacle_geometry_layer_ = nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer.from_reader_packed(zserio_context.obstacle_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D, False, True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._obstacle_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._obstacle_geometry_layer_.has_ids != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.has_ids} != {False}!")
        if self._obstacle_geometry_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.has_types} != {True}!")
        self._obstacle_geometry_layer_.write(zserio_writer)

    def write_packed(self, zserio_context: ObstacleLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._obstacle_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D}!")
        if self._obstacle_geometry_layer_.has_ids != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.has_ids} != {False}!")
        if self._obstacle_geometry_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field ObstacleLayer.obstacleGeometryLayer: "
                                                f"{self._obstacle_geometry_layer_.has_types} != {True}!")
        self._obstacle_geometry_layer_.write_packed(zserio_context.obstacle_geometry_layer, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._obstacle_geometry_layer_ = nds.localization.instantiations.obstacle_geometry_layer.ObstacleGeometryLayer.ZserioPackingContext()

        @property
        def obstacle_geometry_layer(self):
            return self._obstacle_geometry_layer_
