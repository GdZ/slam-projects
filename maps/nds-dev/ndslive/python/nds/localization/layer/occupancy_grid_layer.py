# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.localization.instantiations.occupancy_probability_grid_layer
import nds.system.types.layer_type

class OccupancyGridLayer:
    def __init__(
            self,
            has_ids_: bool = bool(),
            grid_layer_: typing.Union[nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer, None] = None) -> None:
        self._has_ids_ = has_ids_
        self._grid_layer_ = grid_layer_

    @classmethod
    def from_reader(
            cls: typing.Type['OccupancyGridLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'OccupancyGridLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['OccupancyGridLayer'],
            zserio_context: OccupancyGridLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'OccupancyGridLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OccupancyGridLayer):
            return ((self._has_ids_ == other._has_ids_) and
                    (self._grid_layer_ == other._grid_layer_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_ids_)
        result = zserio.hashcode.calc_hashcode_object(result, self._grid_layer_)

        return result

    @property
    def has_ids(self) -> bool:
        return self._has_ids_

    @has_ids.setter
    def has_ids(self, has_ids_: bool) -> None:
        self._has_ids_ = has_ids_

    @property
    def grid_layer(self) -> typing.Union[nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer, None]:
        return self._grid_layer_

    @grid_layer.setter
    def grid_layer(self, grid_layer_: typing.Union[nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer, None]) -> None:
        self._grid_layer_ = grid_layer_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.GEOMETRY

    def init_packing_context(self, zserio_context: OccupancyGridLayer.ZserioPackingContext) -> None:
        self._grid_layer_.init_packing_context(zserio_context.grid_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += self._grid_layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: OccupancyGridLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += self._grid_layer_.bitsizeof_packed(zserio_context.grid_layer, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition = self._grid_layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: OccupancyGridLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition = self._grid_layer_.initialize_offsets_packed(zserio_context.grid_layer, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_ids_ = zserio_reader.read_bool()
        self._grid_layer_ = nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer.from_reader(zserio_reader, self._has_ids_, False)

    def read_packed(self, zserio_context: OccupancyGridLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_ids_ = zserio_reader.read_bool()

        self._grid_layer_ = nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer.from_reader_packed(zserio_context.grid_layer, zserio_reader, self._has_ids_, False)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_ids_)

        # check parameters
        if self._grid_layer_.has_ids != (self._has_ids_):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field OccupancyGridLayer.gridLayer: "
                                                f"{self._grid_layer_.has_ids} != {self._has_ids_}!")
        if self._grid_layer_.has_types != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field OccupancyGridLayer.gridLayer: "
                                                f"{self._grid_layer_.has_types} != {False}!")
        self._grid_layer_.write(zserio_writer)

    def write_packed(self, zserio_context: OccupancyGridLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_ids_)

        # check parameters
        if self._grid_layer_.has_ids != (self._has_ids_):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field OccupancyGridLayer.gridLayer: "
                                                f"{self._grid_layer_.has_ids} != {self._has_ids_}!")
        if self._grid_layer_.has_types != (False):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field OccupancyGridLayer.gridLayer: "
                                                f"{self._grid_layer_.has_types} != {False}!")
        self._grid_layer_.write_packed(zserio_context.grid_layer, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._grid_layer_ = nds.localization.instantiations.occupancy_probability_grid_layer.OccupancyProbabilityGridLayer.ZserioPackingContext()

        @property
        def grid_layer(self):
            return self._grid_layer_
