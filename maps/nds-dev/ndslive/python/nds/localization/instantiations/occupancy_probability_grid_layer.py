# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.grid.grid_cell_size
import nds.core.grid.grid_occupancy_probability
import nds.core.grid.grid_type
import nds.localization.types.occupancy_grid_id

class OccupancyProbabilityGridLayer:
    def __init__(
            self,
            has_ids_: bool,
            has_types_: bool,
            coord_shift_xy_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            cell_size_: nds.core.grid.grid_cell_size.GridCellSize = nds.core.grid.grid_cell_size.GridCellSize(),
            num_elements_: int = int(),
            identifier_: typing.Optional[typing.List[nds.localization.types.occupancy_grid_id.OccupancyGridId]] = None,
            types_: typing.Optional[typing.List[nds.core.grid.grid_type.GridType]] = None,
            grids_: typing.List[nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability] = None) -> None:
        self._has_ids_ = has_ids_
        self._has_types_ = has_types_
        self._coord_shift_xy_ = coord_shift_xy_
        self._cell_size_ = cell_size_
        self._num_elements_ = num_elements_
        if identifier_ is None:
            self._identifier_ = None
        else:
            self._identifier_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), identifier_)
        if types_ is None:
            self._types_ = None
        else:
            self._types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_types()), types_)
        self._grids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grids(self)), grids_)

    @classmethod
    def from_reader(
            cls: typing.Type['OccupancyProbabilityGridLayer'],
            zserio_reader: zserio.BitStreamReader,
            has_ids_: bool,
            has_types_: bool) -> 'OccupancyProbabilityGridLayer':
        self = object.__new__(cls)
        self._has_ids_ = has_ids_
        self._has_types_ = has_types_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['OccupancyProbabilityGridLayer'],
            zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            has_ids_: bool,
            has_types_: bool) -> 'OccupancyProbabilityGridLayer':
        self = object.__new__(cls)
        self._has_ids_ = has_ids_
        self._has_types_ = has_types_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OccupancyProbabilityGridLayer):
            return (self._has_ids_ == other._has_ids_ and
                    self._has_types_ == other._has_types_ and
                    (self._coord_shift_xy_ == other._coord_shift_xy_) and
                    (self._cell_size_ == other._cell_size_) and
                    (self._num_elements_ == other._num_elements_) and
                    (not other.is_identifier_used() if not self.is_identifier_used() else (self._identifier_ == other._identifier_)) and
                    (not other.is_types_used() if not self.is_types_used() else (self._types_ == other._types_)) and
                    (self._grids_ == other._grids_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_ids_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_types_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._coord_shift_xy_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._cell_size_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_elements_)
        if self.is_identifier_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._identifier_)
        if self.is_types_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._grids_)

        return result

    @property
    def has_ids(self) -> bool:
        return self._has_ids_

    @property
    def has_types(self) -> bool:
        return self._has_types_

    @property
    def coord_shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._coord_shift_xy_

    @coord_shift_xy.setter
    def coord_shift_xy(self, coord_shift_xy_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._coord_shift_xy_ = coord_shift_xy_

    @property
    def cell_size(self) -> nds.core.grid.grid_cell_size.GridCellSize:
        return self._cell_size_

    @cell_size.setter
    def cell_size(self, cell_size_: nds.core.grid.grid_cell_size.GridCellSize) -> None:
        self._cell_size_ = cell_size_

    @property
    def num_elements(self) -> int:
        return self._num_elements_

    @num_elements.setter
    def num_elements(self, num_elements_: int) -> None:
        self._num_elements_ = num_elements_

    @property
    def identifier(self) -> typing.Optional[typing.List[nds.localization.types.occupancy_grid_id.OccupancyGridId]]:
        return None if self._identifier_ is None else self._identifier_.raw_array

    @identifier.setter
    def identifier(self, identifier_: typing.Optional[typing.List[nds.localization.types.occupancy_grid_id.OccupancyGridId]]) -> None:
        if identifier_ is None:
            self._identifier_ = None
        else:
            self._identifier_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), identifier_)

    def is_identifier_used(self) -> bool:
        return self._has_ids_

    def is_identifier_set(self) -> bool:
        return not self._identifier_ is None

    def reset_identifier(self) -> None:
        self._identifier_ = None

    @property
    def types(self) -> typing.Optional[typing.List[nds.core.grid.grid_type.GridType]]:
        return None if self._types_ is None else self._types_.raw_array

    @types.setter
    def types(self, types_: typing.Optional[typing.List[nds.core.grid.grid_type.GridType]]) -> None:
        if types_ is None:
            self._types_ = None
        else:
            self._types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_types()), types_)

    def is_types_used(self) -> bool:
        return self._has_types_

    def is_types_set(self) -> bool:
        return not self._types_ is None

    def reset_types(self) -> None:
        self._types_ = None

    @property
    def grids(self) -> typing.List[nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability]:
        return self._grids_.raw_array

    @grids.setter
    def grids(self, grids_: typing.List[nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability]) -> None:
        self._grids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grids(self)), grids_)

    def init_packing_context(self, zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext) -> None:
        zserio_context.coord_shift_xy.init(zserio.array.BitFieldArrayTraits(5), self._coord_shift_xy_)
        zserio_context.cell_size.init(zserio.array.VarSizeArrayTraits(), self._cell_size_)
        zserio_context.num_elements.init(zserio.array.VarSizeArrayTraits(), self._num_elements_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._cell_size_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_elements_)
        if self.is_identifier_used():
            end_bitposition += self._identifier_.bitsizeof_packed(end_bitposition)
        if self.is_types_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += self._types_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._grids_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.coord_shift_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._coord_shift_xy_)
        end_bitposition += zserio_context.cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._cell_size_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_elements.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_elements_)
        if self.is_identifier_used():
            end_bitposition += self._identifier_.bitsizeof_packed(end_bitposition)
        if self.is_types_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += self._types_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._grids_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._cell_size_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_elements_)
        if self.is_identifier_used():
            end_bitposition = self._identifier_.initialize_offsets_packed(end_bitposition)
        if self.is_types_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition = self._types_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._grids_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.coord_shift_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._coord_shift_xy_)
        end_bitposition += zserio_context.cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._cell_size_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio_context.num_elements.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_elements_)
        if self.is_identifier_used():
            end_bitposition = self._identifier_.initialize_offsets_packed(end_bitposition)
        if self.is_types_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition = self._types_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._grids_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._coord_shift_xy_ = zserio_reader.read_bits(5)
        self._cell_size_ = zserio_reader.read_varsize()
        zserio_reader.alignto(8)
        self._num_elements_ = zserio_reader.read_varsize()
        if self.is_identifier_used():
            self._identifier_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_elements_)
        else:
            self._identifier_ = None
        if self.is_types_used():
            zserio_reader.alignto(8)
            self._types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_types()), zserio_reader, self._num_elements_)
        else:
            self._types_ = None
        zserio_reader.alignto(8)
        self._grids_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grids(self)), zserio_reader, self._num_elements_)

    def read_packed(self, zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._coord_shift_xy_ = zserio_context.coord_shift_xy.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._cell_size_ = zserio_context.cell_size.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        zserio_reader.alignto(8)
        self._num_elements_ = zserio_context.num_elements.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        if self.is_identifier_used():
            self._identifier_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_elements_)
        else:
            self._identifier_ = None

        if self.is_types_used():
            zserio_reader.alignto(8)
            self._types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_types()), zserio_reader, self._num_elements_)
        else:
            self._types_ = None

        zserio_reader.alignto(8)
        self._grids_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grids(self)), zserio_reader, self._num_elements_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._coord_shift_xy_, 5)

        zserio_writer.write_varsize(self._cell_size_)

        zserio_writer.alignto(8)
        zserio_writer.write_varsize(self._num_elements_)

        if self.is_identifier_used():
            # check array length
            if len(self._identifier_) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.identifier: "
                                                    f"{len(self._identifier_)} != {self._num_elements_}!")
            self._identifier_.write_packed(zserio_writer)

        if self.is_types_used():
            zserio_writer.alignto(8)
            # check array length
            if len(self._types_) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.types: "
                                                    f"{len(self._types_)} != {self._num_elements_}!")
            self._types_.write(zserio_writer)

        zserio_writer.alignto(8)
        # check array length
        if len(self._grids_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.grids: "
                                                f"{len(self._grids_)} != {self._num_elements_}!")
        self._grids_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: OccupancyProbabilityGridLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.coord_shift_xy.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._coord_shift_xy_)

        zserio_context.cell_size.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._cell_size_)

        zserio_writer.alignto(8)
        zserio_context.num_elements.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_elements_)

        if self.is_identifier_used():
            # check array length
            if len(self._identifier_) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.identifier: "
                                                    f"{len(self._identifier_)} != {self._num_elements_}!")
            self._identifier_.write_packed(zserio_writer)

        if self.is_types_used():
            zserio_writer.alignto(8)
            # check array length
            if len(self._types_) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.types: "
                                                    f"{len(self._types_)} != {self._num_elements_}!")
            self._types_.write(zserio_writer)

        zserio_writer.alignto(8)
        # check array length
        if len(self._grids_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field OccupancyProbabilityGridLayer.grids: "
                                                f"{len(self._grids_)} != {self._num_elements_}!")
        self._grids_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._coord_shift_xy_ = zserio.array.DeltaContext()
            self._cell_size_ = zserio.array.DeltaContext()
            self._num_elements_ = zserio.array.DeltaContext()

        @property
        def coord_shift_xy(self):
            return self._coord_shift_xy_

        @property
        def cell_size(self):
            return self._cell_size_

        @property
        def num_elements(self):
            return self._num_elements_

    class _ZserioElementFactory_types:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.grid.grid_type.GridType:
            del zserio_index
            return nds.core.grid.grid_type.GridType.from_reader(zserio_reader)

    class _ZserioElementFactory_grids:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability:
            del zserio_index
            return nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability.from_reader(zserio_reader, self._owner._cell_size_, self._owner._coord_shift_xy_)

        @staticmethod
        def create_packing_context() -> nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability.ZserioPackingContext:
            return nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability:
            del zserio_index
            return nds.core.grid.grid_occupancy_probability.Grid_OccupancyProbability.from_reader_packed(zserio_context, zserio_reader, self._owner._cell_size_, self._owner._coord_shift_xy_)
