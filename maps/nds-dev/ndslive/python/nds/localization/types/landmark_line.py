# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.width_centimeters
import nds.localization.types.landmark_confidence
import nds.localization.types.landmark_line_type

class LandmarkLine:
    def __init__(
            self,
            type_: typing.Union[nds.localization.types.landmark_line_type.LandmarkLineType, None] = None,
            diameter_: typing.Optional[nds.core.types.width_centimeters.WidthCentimeters] = None,
            confidence_: typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence] = None) -> None:
        self._type_ = type_
        self._diameter_ = diameter_
        self._confidence_ = confidence_

    @classmethod
    def from_reader(
            cls: typing.Type['LandmarkLine'],
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkLine':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LandmarkLine'],
            zserio_context: LandmarkLine.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkLine':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LandmarkLine):
            return ((self._type_ == other._type_) and
                    (not other.is_diameter_used() if not self.is_diameter_used() else (self._diameter_ == other._diameter_)) and
                    (not other.is_confidence_used() if not self.is_confidence_used() else (self._confidence_ == other._confidence_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        if self.is_diameter_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._diameter_)
        if self.is_confidence_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._confidence_)

        return result

    @property
    def type(self) -> typing.Union[nds.localization.types.landmark_line_type.LandmarkLineType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.localization.types.landmark_line_type.LandmarkLineType, None]) -> None:
        self._type_ = type_

    @property
    def diameter(self) -> typing.Optional[nds.core.types.width_centimeters.WidthCentimeters]:
        return self._diameter_

    @diameter.setter
    def diameter(self, diameter_: typing.Optional[nds.core.types.width_centimeters.WidthCentimeters]) -> None:
        self._diameter_ = diameter_

    def is_diameter_used(self) -> bool:
        return self.is_diameter_set()

    def is_diameter_set(self) -> bool:
        return not self._diameter_ is None

    def reset_diameter(self) -> None:
        self._diameter_ = None

    @property
    def confidence(self) -> typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence]:
        return self._confidence_

    @confidence.setter
    def confidence(self, confidence_: typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence]) -> None:
        self._confidence_ = confidence_

    def is_confidence_used(self) -> bool:
        return self.is_confidence_set()

    def is_confidence_set(self) -> bool:
        return not self._confidence_ is None

    def reset_confidence(self) -> None:
        self._confidence_ = None

    def init_packing_context(self, zserio_context: LandmarkLine.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        if self.is_diameter_used():
            zserio_context.diameter.init(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        if self.is_confidence_used():
            zserio_context.confidence.init(zserio.array.BitFieldArrayTraits(8), self._confidence_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_diameter_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._diameter_)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LandmarkLine.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        if self.is_diameter_used():
            end_bitposition += zserio_context.diameter.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += zserio_context.confidence.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._confidence_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_diameter_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._diameter_)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LandmarkLine.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        if self.is_diameter_used():
            end_bitposition += zserio_context.diameter.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += zserio_context.confidence.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._confidence_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.localization.types.landmark_line_type.LandmarkLineType.from_reader(zserio_reader)

        if zserio_reader.read_bool():
            self._diameter_ = zserio_reader.read_varuint32()
        else:
            self._diameter_ = None

        if zserio_reader.read_bool():
            self._confidence_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkLine.confidence!")
        else:
            self._confidence_ = None

    def read_packed(self, zserio_context: LandmarkLine.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.localization.types.landmark_line_type.LandmarkLineType.from_reader_packed(zserio_context.type, zserio_reader)

        if zserio_reader.read_bool():
            self._diameter_ = zserio_context.diameter.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._diameter_ = None

        if zserio_reader.read_bool():
            self._confidence_ = zserio_context.confidence.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkLine.confidence!")
        else:
            self._confidence_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)

        if self.is_diameter_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._diameter_)
        else:
            zserio_writer.write_bool(False)

        if self.is_confidence_used():
            zserio_writer.write_bool(True)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkLine.confidence!")
            zserio_writer.write_bits(self._confidence_, 8)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: LandmarkLine.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        if self.is_diameter_used():
            zserio_writer.write_bool(True)
            zserio_context.diameter.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._diameter_)
        else:
            zserio_writer.write_bool(False)

        if self.is_confidence_used():
            zserio_writer.write_bool(True)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkLine.confidence!")
            zserio_context.confidence.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._confidence_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._diameter_ = zserio.array.DeltaContext()
            self._confidence_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_

        @property
        def diameter(self):
            return self._diameter_

        @property
        def confidence(self):
            return self._confidence_
