# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.width_centimeters
import nds.localization.types.landmark_sign_details_type
import nds.signs.warning.warning_sign

class LandmarkSignDetails:
    def __init__(
            self,
            detail_type_: typing.Union[nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType, None] = None,
            meaning_: typing.Optional[nds.signs.warning.warning_sign.WarningSign] = None,
            diameter_: typing.Optional[nds.core.types.width_centimeters.WidthCentimeters] = None,
            number_: typing.Optional[int] = None,
            text_: typing.Optional[str] = None) -> None:
        self._detail_type_ = detail_type_
        self._meaning_ = meaning_
        self._diameter_ = diameter_
        self._number_ = number_
        self._text_ = text_

    @classmethod
    def from_reader(
            cls: typing.Type['LandmarkSignDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkSignDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LandmarkSignDetails'],
            zserio_context: LandmarkSignDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkSignDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LandmarkSignDetails):
            return ((self._detail_type_ == other._detail_type_) and
                    (not other.is_meaning_used() if not self.is_meaning_used() else (self._meaning_ == other._meaning_)) and
                    (not other.is_diameter_used() if not self.is_diameter_used() else (self._diameter_ == other._diameter_)) and
                    (not other.is_number_used() if not self.is_number_used() else (self._number_ == other._number_)) and
                    (not other.is_text_used() if not self.is_text_used() else (self._text_ == other._text_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._detail_type_)
        if self.is_meaning_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._meaning_)
        if self.is_diameter_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._diameter_)
        if self.is_number_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._number_)
        if self.is_text_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._text_)

        return result

    @property
    def detail_type(self) -> typing.Union[nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType, None]:
        return self._detail_type_

    @detail_type.setter
    def detail_type(self, detail_type_: typing.Union[nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType, None]) -> None:
        self._detail_type_ = detail_type_

    @property
    def meaning(self) -> typing.Optional[nds.signs.warning.warning_sign.WarningSign]:
        return self._meaning_

    @meaning.setter
    def meaning(self, meaning_: typing.Optional[nds.signs.warning.warning_sign.WarningSign]) -> None:
        self._meaning_ = meaning_

    def is_meaning_used(self) -> bool:
        return (self._detail_type_ & nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.MEANING) == nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.MEANING

    def is_meaning_set(self) -> bool:
        return not self._meaning_ is None

    def reset_meaning(self) -> None:
        self._meaning_ = None

    @property
    def diameter(self) -> typing.Optional[nds.core.types.width_centimeters.WidthCentimeters]:
        return self._diameter_

    @diameter.setter
    def diameter(self, diameter_: typing.Optional[nds.core.types.width_centimeters.WidthCentimeters]) -> None:
        self._diameter_ = diameter_

    def is_diameter_used(self) -> bool:
        return (self._detail_type_ & nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.DIAMETER) == nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.DIAMETER

    def is_diameter_set(self) -> bool:
        return not self._diameter_ is None

    def reset_diameter(self) -> None:
        self._diameter_ = None

    @property
    def number(self) -> typing.Optional[int]:
        return self._number_

    @number.setter
    def number(self, number_: typing.Optional[int]) -> None:
        self._number_ = number_

    def is_number_used(self) -> bool:
        return (self._detail_type_ & nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.NUMBER) == nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.NUMBER

    def is_number_set(self) -> bool:
        return not self._number_ is None

    def reset_number(self) -> None:
        self._number_ = None

    @property
    def text(self) -> typing.Optional[str]:
        return self._text_

    @text.setter
    def text(self, text_: typing.Optional[str]) -> None:
        self._text_ = text_

    def is_text_used(self) -> bool:
        return (self._detail_type_ & nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.TEXT) == nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.Values.TEXT

    def is_text_set(self) -> bool:
        return not self._text_ is None

    def reset_text(self) -> None:
        self._text_ = None

    def init_packing_context(self, zserio_context: LandmarkSignDetails.ZserioPackingContext) -> None:
        self._detail_type_.init_packing_context(zserio_context.detail_type)
        if self.is_meaning_used():
            self._meaning_.init_packing_context(zserio_context.meaning)
        if self.is_diameter_used():
            zserio_context.diameter.init(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        if self.is_number_used():
            zserio_context.number.init(zserio.array.VarUInt64ArrayTraits(), self._number_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._detail_type_.bitsizeof(end_bitposition)
        if self.is_meaning_used():
            end_bitposition += self._meaning_.bitsizeof(end_bitposition)
        if self.is_diameter_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._diameter_)
        if self.is_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint64(self._number_)
        if self.is_text_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LandmarkSignDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._detail_type_.bitsizeof_packed(zserio_context.detail_type, end_bitposition)
        if self.is_meaning_used():
            end_bitposition += self._meaning_.bitsizeof_packed(zserio_context.meaning, end_bitposition)
        if self.is_diameter_used():
            end_bitposition += zserio_context.diameter.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        if self.is_number_used():
            end_bitposition += zserio_context.number.bitsizeof(zserio.array.VarUInt64ArrayTraits(), self._number_)
        if self.is_text_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._detail_type_.initialize_offsets(end_bitposition)
        if self.is_meaning_used():
            end_bitposition = self._meaning_.initialize_offsets(end_bitposition)
        if self.is_diameter_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._diameter_)
        if self.is_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint64(self._number_)
        if self.is_text_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LandmarkSignDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._detail_type_.initialize_offsets_packed(zserio_context.detail_type, end_bitposition)
        if self.is_meaning_used():
            end_bitposition = self._meaning_.initialize_offsets_packed(zserio_context.meaning, end_bitposition)
        if self.is_diameter_used():
            end_bitposition += zserio_context.diameter.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._diameter_)
        if self.is_number_used():
            end_bitposition += zserio_context.number.bitsizeof(zserio.array.VarUInt64ArrayTraits(), self._number_)
        if self.is_text_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._text_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._detail_type_ = nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.from_reader(zserio_reader)
        if self.is_meaning_used():
            self._meaning_ = nds.signs.warning.warning_sign.WarningSign.from_reader(zserio_reader)
        else:
            self._meaning_ = None
        if self.is_diameter_used():
            self._diameter_ = zserio_reader.read_varuint32()
        else:
            self._diameter_ = None
        if self.is_number_used():
            self._number_ = zserio_reader.read_varuint64()
        else:
            self._number_ = None
        if self.is_text_used():
            self._text_ = zserio_reader.read_string()
        else:
            self._text_ = None

    def read_packed(self, zserio_context: LandmarkSignDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._detail_type_ = nds.localization.types.landmark_sign_details_type.LandmarkSignDetailsType.from_reader_packed(zserio_context.detail_type, zserio_reader)

        if self.is_meaning_used():
            self._meaning_ = nds.signs.warning.warning_sign.WarningSign.from_reader_packed(zserio_context.meaning, zserio_reader)
        else:
            self._meaning_ = None

        if self.is_diameter_used():
            self._diameter_ = zserio_context.diameter.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._diameter_ = None

        if self.is_number_used():
            self._number_ = zserio_context.number.read(zserio.array.VarUInt64ArrayTraits(), zserio_reader)
        else:
            self._number_ = None

        if self.is_text_used():
            self._text_ = zserio_reader.read_string()
        else:
            self._text_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._detail_type_.write(zserio_writer)
        if self.is_meaning_used():
            self._meaning_.write(zserio_writer)
        if self.is_diameter_used():
            zserio_writer.write_varuint32(self._diameter_)
        if self.is_number_used():
            zserio_writer.write_varuint64(self._number_)
        if self.is_text_used():
            zserio_writer.write_string(self._text_)

    def write_packed(self, zserio_context: LandmarkSignDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._detail_type_.write_packed(zserio_context.detail_type, zserio_writer)

        if self.is_meaning_used():
            self._meaning_.write_packed(zserio_context.meaning, zserio_writer)

        if self.is_diameter_used():
            zserio_context.diameter.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._diameter_)

        if self.is_number_used():
            zserio_context.number.write(zserio.array.VarUInt64ArrayTraits(), zserio_writer, self._number_)

        if self.is_text_used():
            zserio_writer.write_string(self._text_)

    class ZserioPackingContext:
        def __init__(self):
            self._detail_type_ = zserio.array.DeltaContext()
            self._meaning_ = zserio.array.DeltaContext()
            self._diameter_ = zserio.array.DeltaContext()
            self._number_ = zserio.array.DeltaContext()

        @property
        def detail_type(self):
            return self._detail_type_

        @property
        def meaning(self):
            return self._meaning_

        @property
        def diameter(self):
            return self._diameter_

        @property
        def number(self):
            return self._number_
