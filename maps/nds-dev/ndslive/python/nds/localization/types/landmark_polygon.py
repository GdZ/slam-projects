# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.localization.types.fiducial_marker_details
import nds.localization.types.landmark_color
import nds.localization.types.landmark_confidence
import nds.localization.types.landmark_polygon_type
import nds.localization.types.landmark_sign_details
import nds.localization.types.landmark_sign_type

class LandmarkPolygon:
    def __init__(
            self,
            type_: typing.Union[nds.localization.types.landmark_polygon_type.LandmarkPolygonType, None] = None,
            sign_type_: typing.Optional[nds.localization.types.landmark_sign_type.LandmarkSignType] = None,
            has_sign_details_: typing.Optional[bool] = None,
            sign_details_: typing.Optional[nds.localization.types.landmark_sign_details.LandmarkSignDetails] = None,
            marker_details_: typing.Optional[nds.localization.types.fiducial_marker_details.FiducialMarkerDetails] = None,
            color_: typing.Optional[nds.localization.types.landmark_color.LandmarkColor] = None,
            confidence_: typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence] = None) -> None:
        self._type_ = type_
        self._sign_type_ = sign_type_
        self._has_sign_details_ = has_sign_details_
        self._sign_details_ = sign_details_
        self._marker_details_ = marker_details_
        self._color_ = color_
        self._confidence_ = confidence_

    @classmethod
    def from_reader(
            cls: typing.Type['LandmarkPolygon'],
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkPolygon':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LandmarkPolygon'],
            zserio_context: LandmarkPolygon.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'LandmarkPolygon':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LandmarkPolygon):
            return ((self._type_ == other._type_) and
                    (not other.is_sign_type_used() if not self.is_sign_type_used() else (self._sign_type_ == other._sign_type_)) and
                    (not other.is_has_sign_details_used() if not self.is_has_sign_details_used() else (self._has_sign_details_ == other._has_sign_details_)) and
                    (not other.is_sign_details_used() if not self.is_sign_details_used() else (self._sign_details_ == other._sign_details_)) and
                    (not other.is_marker_details_used() if not self.is_marker_details_used() else (self._marker_details_ == other._marker_details_)) and
                    (not other.is_color_used() if not self.is_color_used() else (self._color_ == other._color_)) and
                    (not other.is_confidence_used() if not self.is_confidence_used() else (self._confidence_ == other._confidence_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        if self.is_sign_type_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._sign_type_)
        if self.is_has_sign_details_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._has_sign_details_)
        if self.is_sign_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._sign_details_)
        if self.is_marker_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._marker_details_)
        if self.is_color_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._color_)
        if self.is_confidence_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._confidence_)

        return result

    @property
    def type(self) -> typing.Union[nds.localization.types.landmark_polygon_type.LandmarkPolygonType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.localization.types.landmark_polygon_type.LandmarkPolygonType, None]) -> None:
        self._type_ = type_

    @property
    def sign_type(self) -> typing.Optional[nds.localization.types.landmark_sign_type.LandmarkSignType]:
        return self._sign_type_

    @sign_type.setter
    def sign_type(self, sign_type_: typing.Optional[nds.localization.types.landmark_sign_type.LandmarkSignType]) -> None:
        self._sign_type_ = sign_type_

    def is_sign_type_used(self) -> bool:
        return self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN or self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN_BOUNDING_BOX

    def is_sign_type_set(self) -> bool:
        return not self._sign_type_ is None

    def reset_sign_type(self) -> None:
        self._sign_type_ = None

    @property
    def has_sign_details(self) -> typing.Optional[bool]:
        return self._has_sign_details_

    @has_sign_details.setter
    def has_sign_details(self, has_sign_details_: typing.Optional[bool]) -> None:
        self._has_sign_details_ = has_sign_details_

    def is_has_sign_details_used(self) -> bool:
        return self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN or self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN_BOUNDING_BOX

    def is_has_sign_details_set(self) -> bool:
        return not self._has_sign_details_ is None

    def reset_has_sign_details(self) -> None:
        self._has_sign_details_ = None

    @property
    def sign_details(self) -> typing.Optional[nds.localization.types.landmark_sign_details.LandmarkSignDetails]:
        return self._sign_details_

    @sign_details.setter
    def sign_details(self, sign_details_: typing.Optional[nds.localization.types.landmark_sign_details.LandmarkSignDetails]) -> None:
        self._sign_details_ = sign_details_

    def is_sign_details_used(self) -> bool:
        return (self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN or self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.SIGN_BOUNDING_BOX) and self._has_sign_details_

    def is_sign_details_set(self) -> bool:
        return not self._sign_details_ is None

    def reset_sign_details(self) -> None:
        self._sign_details_ = None

    @property
    def marker_details(self) -> typing.Optional[nds.localization.types.fiducial_marker_details.FiducialMarkerDetails]:
        return self._marker_details_

    @marker_details.setter
    def marker_details(self, marker_details_: typing.Optional[nds.localization.types.fiducial_marker_details.FiducialMarkerDetails]) -> None:
        self._marker_details_ = marker_details_

    def is_marker_details_used(self) -> bool:
        return self._type_ == nds.localization.types.landmark_polygon_type.LandmarkPolygonType.FIDUCIAL_MARKER

    def is_marker_details_set(self) -> bool:
        return not self._marker_details_ is None

    def reset_marker_details(self) -> None:
        self._marker_details_ = None

    @property
    def color(self) -> typing.Optional[nds.localization.types.landmark_color.LandmarkColor]:
        return self._color_

    @color.setter
    def color(self, color_: typing.Optional[nds.localization.types.landmark_color.LandmarkColor]) -> None:
        self._color_ = color_

    def is_color_used(self) -> bool:
        return self.is_color_set()

    def is_color_set(self) -> bool:
        return not self._color_ is None

    def reset_color(self) -> None:
        self._color_ = None

    @property
    def confidence(self) -> typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence]:
        return self._confidence_

    @confidence.setter
    def confidence(self, confidence_: typing.Optional[nds.localization.types.landmark_confidence.LandmarkConfidence]) -> None:
        self._confidence_ = confidence_

    def is_confidence_used(self) -> bool:
        return self.is_confidence_set()

    def is_confidence_set(self) -> bool:
        return not self._confidence_ is None

    def reset_confidence(self) -> None:
        self._confidence_ = None

    def init_packing_context(self, zserio_context: LandmarkPolygon.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        if self.is_sign_type_used():
            self._sign_type_.init_packing_context(zserio_context.sign_type)
        if self.is_sign_details_used():
            self._sign_details_.init_packing_context(zserio_context.sign_details)
        if self.is_marker_details_used():
            self._marker_details_.init_packing_context(zserio_context.marker_details)
        if self.is_color_used():
            self._color_.init_packing_context(zserio_context.color)
        if self.is_confidence_used():
            zserio_context.confidence.init(zserio.array.BitFieldArrayTraits(8), self._confidence_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        if self.is_sign_type_used():
            end_bitposition += self._sign_type_.bitsizeof(end_bitposition)
        if self.is_has_sign_details_used():
            end_bitposition += 1
        if self.is_sign_details_used():
            end_bitposition += self._sign_details_.bitsizeof(end_bitposition)
        if self.is_marker_details_used():
            end_bitposition += self._marker_details_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_color_used():
            end_bitposition += self._color_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LandmarkPolygon.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        if self.is_sign_type_used():
            end_bitposition += self._sign_type_.bitsizeof_packed(zserio_context.sign_type, end_bitposition)
        if self.is_has_sign_details_used():
            end_bitposition += 1
        if self.is_sign_details_used():
            end_bitposition += self._sign_details_.bitsizeof_packed(zserio_context.sign_details, end_bitposition)
        if self.is_marker_details_used():
            end_bitposition += self._marker_details_.bitsizeof_packed(zserio_context.marker_details, end_bitposition)
        end_bitposition += 1
        if self.is_color_used():
            end_bitposition += self._color_.bitsizeof_packed(zserio_context.color, end_bitposition)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += zserio_context.confidence.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._confidence_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        if self.is_sign_type_used():
            end_bitposition = self._sign_type_.initialize_offsets(end_bitposition)
        if self.is_has_sign_details_used():
            end_bitposition += 1
        if self.is_sign_details_used():
            end_bitposition = self._sign_details_.initialize_offsets(end_bitposition)
        if self.is_marker_details_used():
            end_bitposition = self._marker_details_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_color_used():
            end_bitposition = self._color_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LandmarkPolygon.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        if self.is_sign_type_used():
            end_bitposition = self._sign_type_.initialize_offsets_packed(zserio_context.sign_type, end_bitposition)
        if self.is_has_sign_details_used():
            end_bitposition += 1
        if self.is_sign_details_used():
            end_bitposition = self._sign_details_.initialize_offsets_packed(zserio_context.sign_details, end_bitposition)
        if self.is_marker_details_used():
            end_bitposition = self._marker_details_.initialize_offsets_packed(zserio_context.marker_details, end_bitposition)
        end_bitposition += 1
        if self.is_color_used():
            end_bitposition = self._color_.initialize_offsets_packed(zserio_context.color, end_bitposition)
        end_bitposition += 1
        if self.is_confidence_used():
            end_bitposition += zserio_context.confidence.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._confidence_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.localization.types.landmark_polygon_type.LandmarkPolygonType.from_reader(zserio_reader)

        if self.is_sign_type_used():
            self._sign_type_ = nds.localization.types.landmark_sign_type.LandmarkSignType.from_reader(zserio_reader)
        else:
            self._sign_type_ = None

        if self.is_has_sign_details_used():
            self._has_sign_details_ = zserio_reader.read_bool()
        else:
            self._has_sign_details_ = None

        if self.is_sign_details_used():
            self._sign_details_ = nds.localization.types.landmark_sign_details.LandmarkSignDetails.from_reader(zserio_reader)
        else:
            self._sign_details_ = None

        if self.is_marker_details_used():
            self._marker_details_ = nds.localization.types.fiducial_marker_details.FiducialMarkerDetails.from_reader(zserio_reader)
        else:
            self._marker_details_ = None

        if zserio_reader.read_bool():
            self._color_ = nds.localization.types.landmark_color.LandmarkColor.from_reader(zserio_reader)
        else:
            self._color_ = None

        if zserio_reader.read_bool():
            self._confidence_ = zserio_reader.read_bits(8)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkPolygon.confidence!")
        else:
            self._confidence_ = None

    def read_packed(self, zserio_context: LandmarkPolygon.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.localization.types.landmark_polygon_type.LandmarkPolygonType.from_reader_packed(zserio_context.type, zserio_reader)

        if self.is_sign_type_used():
            self._sign_type_ = nds.localization.types.landmark_sign_type.LandmarkSignType.from_reader_packed(zserio_context.sign_type, zserio_reader)
        else:
            self._sign_type_ = None

        if self.is_has_sign_details_used():
            self._has_sign_details_ = zserio_reader.read_bool()
        else:
            self._has_sign_details_ = None

        if self.is_sign_details_used():
            self._sign_details_ = nds.localization.types.landmark_sign_details.LandmarkSignDetails.from_reader_packed(zserio_context.sign_details, zserio_reader)
        else:
            self._sign_details_ = None

        if self.is_marker_details_used():
            self._marker_details_ = nds.localization.types.fiducial_marker_details.FiducialMarkerDetails.from_reader_packed(zserio_context.marker_details, zserio_reader)
        else:
            self._marker_details_ = None

        if zserio_reader.read_bool():
            self._color_ = nds.localization.types.landmark_color.LandmarkColor.from_reader_packed(zserio_context.color, zserio_reader)
        else:
            self._color_ = None

        if zserio_reader.read_bool():
            self._confidence_ = zserio_context.confidence.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkPolygon.confidence!")
        else:
            self._confidence_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)

        if self.is_sign_type_used():
            self._sign_type_.write(zserio_writer)

        if self.is_has_sign_details_used():
            zserio_writer.write_bool(self._has_sign_details_)

        if self.is_sign_details_used():
            self._sign_details_.write(zserio_writer)

        if self.is_marker_details_used():
            self._marker_details_.write(zserio_writer)

        if self.is_color_used():
            zserio_writer.write_bool(True)
            self._color_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_confidence_used():
            zserio_writer.write_bool(True)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkPolygon.confidence!")
            zserio_writer.write_bits(self._confidence_, 8)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: LandmarkPolygon.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        if self.is_sign_type_used():
            self._sign_type_.write_packed(zserio_context.sign_type, zserio_writer)

        if self.is_has_sign_details_used():
            zserio_writer.write_bool(self._has_sign_details_)

        if self.is_sign_details_used():
            self._sign_details_.write_packed(zserio_context.sign_details, zserio_writer)

        if self.is_marker_details_used():
            self._marker_details_.write_packed(zserio_context.marker_details, zserio_writer)

        if self.is_color_used():
            zserio_writer.write_bool(True)
            self._color_.write_packed(zserio_context.color, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_confidence_used():
            zserio_writer.write_bool(True)
            # check constraint
            if not (self._confidence_ <= 100):
                raise zserio.PythonRuntimeException("Constraint violated for field LandmarkPolygon.confidence!")
            zserio_context.confidence.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._confidence_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._sign_type_ = zserio.array.DeltaContext()
            self._sign_details_ = nds.localization.types.landmark_sign_details.LandmarkSignDetails.ZserioPackingContext()
            self._marker_details_ = nds.localization.types.fiducial_marker_details.FiducialMarkerDetails.ZserioPackingContext()
            self._color_ = nds.localization.types.landmark_color.LandmarkColor.ZserioPackingContext()
            self._confidence_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_

        @property
        def sign_type(self):
            return self._sign_type_

        @property
        def sign_details(self):
            return self._sign_details_

        @property
        def marker_details(self):
            return self._marker_details_

        @property
        def color(self):
            return self._color_

        @property
        def confidence(self):
            return self._confidence_
