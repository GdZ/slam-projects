# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.speech.grammatical_case
import nds.core.speech.phonetic_prefix

class PhoneticTranscription:
    def __init__(
            self,
            grammatical_case_: typing.Optional[typing.List[nds.core.speech.grammatical_case.GrammaticalCase]] = None,
            phonetic_transcription_string_: str = str(),
            prefix_: typing.Optional[nds.core.speech.phonetic_prefix.PhoneticPrefix] = None) -> None:
        if grammatical_case_ is None:
            self._grammatical_case_ = None
        else:
            self._grammatical_case_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grammatical_case()), grammatical_case_, is_auto=True)
        self._phonetic_transcription_string_ = phonetic_transcription_string_
        self._prefix_ = prefix_

    @classmethod
    def from_reader(
            cls: typing.Type['PhoneticTranscription'],
            zserio_reader: zserio.BitStreamReader) -> 'PhoneticTranscription':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PhoneticTranscription'],
            zserio_context: PhoneticTranscription.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PhoneticTranscription':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PhoneticTranscription):
            return ((not other.is_grammatical_case_used() if not self.is_grammatical_case_used() else (self._grammatical_case_ == other._grammatical_case_)) and
                    (self._phonetic_transcription_string_ == other._phonetic_transcription_string_) and
                    (not other.is_prefix_used() if not self.is_prefix_used() else (self._prefix_ == other._prefix_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        if self.is_grammatical_case_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._grammatical_case_)
        result = zserio.hashcode.calc_hashcode_string(result, self._phonetic_transcription_string_)
        if self.is_prefix_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._prefix_)

        return result

    @property
    def grammatical_case(self) -> typing.Optional[typing.List[nds.core.speech.grammatical_case.GrammaticalCase]]:
        return None if self._grammatical_case_ is None else self._grammatical_case_.raw_array

    @grammatical_case.setter
    def grammatical_case(self, grammatical_case_: typing.Optional[typing.List[nds.core.speech.grammatical_case.GrammaticalCase]]) -> None:
        if grammatical_case_ is None:
            self._grammatical_case_ = None
        else:
            self._grammatical_case_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grammatical_case()), grammatical_case_, is_auto=True)

    def is_grammatical_case_used(self) -> bool:
        return self.is_grammatical_case_set()

    def is_grammatical_case_set(self) -> bool:
        return not self._grammatical_case_ is None

    def reset_grammatical_case(self) -> None:
        self._grammatical_case_ = None

    @property
    def phonetic_transcription_string(self) -> str:
        return self._phonetic_transcription_string_

    @phonetic_transcription_string.setter
    def phonetic_transcription_string(self, phonetic_transcription_string_: str) -> None:
        self._phonetic_transcription_string_ = phonetic_transcription_string_

    @property
    def prefix(self) -> typing.Optional[nds.core.speech.phonetic_prefix.PhoneticPrefix]:
        return self._prefix_

    @prefix.setter
    def prefix(self, prefix_: typing.Optional[nds.core.speech.phonetic_prefix.PhoneticPrefix]) -> None:
        self._prefix_ = prefix_

    def is_prefix_used(self) -> bool:
        return self.is_prefix_set()

    def is_prefix_set(self) -> bool:
        return not self._prefix_ is None

    def reset_prefix(self) -> None:
        self._prefix_ = None

    def init_packing_context(self, zserio_context: PhoneticTranscription.ZserioPackingContext) -> None:
        if self.is_prefix_used():
            self._prefix_.init_packing_context(zserio_context.prefix)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_grammatical_case_used():
            end_bitposition += self._grammatical_case_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._phonetic_transcription_string_)
        end_bitposition += 1
        if self.is_prefix_used():
            end_bitposition += self._prefix_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PhoneticTranscription.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_grammatical_case_used():
            end_bitposition += self._grammatical_case_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._phonetic_transcription_string_)
        end_bitposition += 1
        if self.is_prefix_used():
            end_bitposition += self._prefix_.bitsizeof_packed(zserio_context.prefix, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_grammatical_case_used():
            end_bitposition = self._grammatical_case_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._phonetic_transcription_string_)
        end_bitposition += 1
        if self.is_prefix_used():
            end_bitposition = self._prefix_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PhoneticTranscription.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_grammatical_case_used():
            end_bitposition = self._grammatical_case_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._phonetic_transcription_string_)
        end_bitposition += 1
        if self.is_prefix_used():
            end_bitposition = self._prefix_.initialize_offsets_packed(zserio_context.prefix, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._grammatical_case_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grammatical_case()), zserio_reader, is_auto=True)
        else:
            self._grammatical_case_ = None
        self._phonetic_transcription_string_ = zserio_reader.read_string()
        if zserio_reader.read_bool():
            self._prefix_ = nds.core.speech.phonetic_prefix.PhoneticPrefix.from_reader(zserio_reader)
        else:
            self._prefix_ = None

    def read_packed(self, zserio_context: PhoneticTranscription.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._grammatical_case_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_grammatical_case()), zserio_reader, is_auto=True)
        else:
            self._grammatical_case_ = None

        self._phonetic_transcription_string_ = zserio_reader.read_string()

        if zserio_reader.read_bool():
            self._prefix_ = nds.core.speech.phonetic_prefix.PhoneticPrefix.from_reader_packed(zserio_context.prefix, zserio_reader)
        else:
            self._prefix_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_grammatical_case_used():
            zserio_writer.write_bool(True)
            self._grammatical_case_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.write_string(self._phonetic_transcription_string_)
        if self.is_prefix_used():
            zserio_writer.write_bool(True)
            self._prefix_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PhoneticTranscription.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_grammatical_case_used():
            zserio_writer.write_bool(True)
            self._grammatical_case_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        zserio_writer.write_string(self._phonetic_transcription_string_)

        if self.is_prefix_used():
            zserio_writer.write_bool(True)
            self._prefix_.write_packed(zserio_context.prefix, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._prefix_ = nds.core.speech.phonetic_prefix.PhoneticPrefix.ZserioPackingContext()

        @property
        def prefix(self):
            return self._prefix_

    class _ZserioElementFactory_grammatical_case:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.grammatical_case.GrammaticalCase:
            del zserio_index
            return nds.core.speech.grammatical_case.GrammaticalCase.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.speech.grammatical_case.GrammaticalCase:
            del zserio_index
            return nds.core.speech.grammatical_case.GrammaticalCase.from_reader_packed(zserio_context, zserio_reader)
