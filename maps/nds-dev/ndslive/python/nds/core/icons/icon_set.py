# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_display_arrangements
import nds.core.icons.icon_drawing_priority
import nds.core.icons.icon_id
import nds.core.icons.icon_set_id
import nds.core.icons.icon_template_set_id
import nds.core.icons.icon_usage_type
import nds.core.types.scale_range_id

class IconSet:
    def __init__(
            self,
            icon_set_id_: nds.core.icons.icon_set_id.IconSetId = nds.core.icons.icon_set_id.IconSetId(),
            scale_range_id_: nds.core.types.scale_range_id.ScaleRangeId = nds.core.types.scale_range_id.ScaleRangeId(),
            num_icons_: int = int(),
            icon_usage_: typing.List[nds.core.icons.icon_usage_type.IconUsageType] = None,
            icon_id_: typing.List[nds.core.icons.icon_id.IconId] = None,
            icon_display_arrangement_: typing.List[nds.core.icons.icon_display_arrangements.IconDisplayArrangements] = None,
            icon_drawing_priority_: nds.core.icons.icon_drawing_priority.IconDrawingPriority = 0,
            icon_template_set_id_: typing.Optional[nds.core.icons.icon_template_set_id.IconTemplateSetId] = None) -> None:
        self._icon_set_id_ = icon_set_id_
        self._scale_range_id_ = scale_range_id_
        self._num_icons_ = num_icons_
        self._icon_usage_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_usage()), icon_usage_)
        self._icon_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), icon_id_)
        self._icon_display_arrangement_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_display_arrangement()), icon_display_arrangement_)
        self._icon_drawing_priority_ = icon_drawing_priority_
        self._icon_template_set_id_ = icon_template_set_id_

    @classmethod
    def from_reader(
            cls: typing.Type['IconSet'],
            zserio_reader: zserio.BitStreamReader) -> 'IconSet':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconSet'],
            zserio_context: IconSet.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconSet':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconSet):
            return ((self._icon_set_id_ == other._icon_set_id_) and
                    (self._scale_range_id_ == other._scale_range_id_) and
                    (self._num_icons_ == other._num_icons_) and
                    (self._icon_usage_ == other._icon_usage_) and
                    (self._icon_id_ == other._icon_id_) and
                    (self._icon_display_arrangement_ == other._icon_display_arrangement_) and
                    (self._icon_drawing_priority_ == other._icon_drawing_priority_) and
                    (not other.is_icon_template_set_id_used() if not self.is_icon_template_set_id_used() else (self._icon_template_set_id_ == other._icon_template_set_id_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._icon_set_id_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._scale_range_id_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_icons_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icon_usage_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icon_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icon_display_arrangement_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._icon_drawing_priority_)
        if self.is_icon_template_set_id_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._icon_template_set_id_)

        return result

    @property
    def icon_set_id(self) -> nds.core.icons.icon_set_id.IconSetId:
        return self._icon_set_id_

    @icon_set_id.setter
    def icon_set_id(self, icon_set_id_: nds.core.icons.icon_set_id.IconSetId) -> None:
        self._icon_set_id_ = icon_set_id_

    @property
    def scale_range_id(self) -> nds.core.types.scale_range_id.ScaleRangeId:
        return self._scale_range_id_

    @scale_range_id.setter
    def scale_range_id(self, scale_range_id_: nds.core.types.scale_range_id.ScaleRangeId) -> None:
        self._scale_range_id_ = scale_range_id_

    @property
    def num_icons(self) -> int:
        return self._num_icons_

    @num_icons.setter
    def num_icons(self, num_icons_: int) -> None:
        self._num_icons_ = num_icons_

    @property
    def icon_usage(self) -> typing.List[nds.core.icons.icon_usage_type.IconUsageType]:
        return self._icon_usage_.raw_array

    @icon_usage.setter
    def icon_usage(self, icon_usage_: typing.List[nds.core.icons.icon_usage_type.IconUsageType]) -> None:
        self._icon_usage_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_usage()), icon_usage_)

    @property
    def icon_id(self) -> typing.List[nds.core.icons.icon_id.IconId]:
        return self._icon_id_.raw_array

    @icon_id.setter
    def icon_id(self, icon_id_: typing.List[nds.core.icons.icon_id.IconId]) -> None:
        self._icon_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), icon_id_)

    @property
    def icon_display_arrangement(self) -> typing.List[nds.core.icons.icon_display_arrangements.IconDisplayArrangements]:
        return self._icon_display_arrangement_.raw_array

    @icon_display_arrangement.setter
    def icon_display_arrangement(self, icon_display_arrangement_: typing.List[nds.core.icons.icon_display_arrangements.IconDisplayArrangements]) -> None:
        self._icon_display_arrangement_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_display_arrangement()), icon_display_arrangement_)

    @property
    def icon_drawing_priority(self) -> nds.core.icons.icon_drawing_priority.IconDrawingPriority:
        return self._icon_drawing_priority_

    @icon_drawing_priority.setter
    def icon_drawing_priority(self, icon_drawing_priority_: nds.core.icons.icon_drawing_priority.IconDrawingPriority) -> None:
        self._icon_drawing_priority_ = icon_drawing_priority_

    @property
    def icon_template_set_id(self) -> typing.Optional[nds.core.icons.icon_template_set_id.IconTemplateSetId]:
        return self._icon_template_set_id_

    @icon_template_set_id.setter
    def icon_template_set_id(self, icon_template_set_id_: typing.Optional[nds.core.icons.icon_template_set_id.IconTemplateSetId]) -> None:
        self._icon_template_set_id_ = icon_template_set_id_

    def is_icon_template_set_id_used(self) -> bool:
        return self.is_icon_template_set_id_set()

    def is_icon_template_set_id_set(self) -> bool:
        return not self._icon_template_set_id_ is None

    def reset_icon_template_set_id(self) -> None:
        self._icon_template_set_id_ = None

    def init_packing_context(self, zserio_context: IconSet.ZserioPackingContext) -> None:
        zserio_context.icon_set_id.init(zserio.array.VarUIntArrayTraits(), self._icon_set_id_)
        zserio_context.scale_range_id.init(zserio.array.VarUInt32ArrayTraits(), self._scale_range_id_)
        zserio_context.num_icons.init(zserio.array.VarSizeArrayTraits(), self._num_icons_)
        zserio_context.icon_drawing_priority.init(zserio.array.VarUInt16ArrayTraits(), self._icon_drawing_priority_)
        if self.is_icon_template_set_id_used():
            zserio_context.icon_template_set_id.init(zserio.array.VarUInt16ArrayTraits(), self._icon_template_set_id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._scale_range_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_icons_)
        end_bitposition += self._icon_usage_.bitsizeof(end_bitposition)
        end_bitposition += self._icon_id_.bitsizeof(end_bitposition)
        end_bitposition += self._icon_display_arrangement_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._icon_drawing_priority_)
        end_bitposition += 1
        if self.is_icon_template_set_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._icon_template_set_id_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconSet.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_set_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_id_)
        end_bitposition += zserio_context.scale_range_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._scale_range_id_)
        end_bitposition += zserio_context.num_icons.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_icons_)
        end_bitposition += self._icon_usage_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._icon_id_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._icon_display_arrangement_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.icon_drawing_priority.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._icon_drawing_priority_)
        end_bitposition += 1
        if self.is_icon_template_set_id_used():
            end_bitposition += zserio_context.icon_template_set_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._icon_template_set_id_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._scale_range_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_icons_)
        end_bitposition = self._icon_usage_.initialize_offsets(end_bitposition)
        end_bitposition = self._icon_id_.initialize_offsets(end_bitposition)
        end_bitposition = self._icon_display_arrangement_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._icon_drawing_priority_)
        end_bitposition += 1
        if self.is_icon_template_set_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._icon_template_set_id_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconSet.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_set_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_id_)
        end_bitposition += zserio_context.scale_range_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._scale_range_id_)
        end_bitposition += zserio_context.num_icons.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_icons_)
        end_bitposition = self._icon_usage_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._icon_id_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._icon_display_arrangement_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.icon_drawing_priority.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._icon_drawing_priority_)
        end_bitposition += 1
        if self.is_icon_template_set_id_used():
            end_bitposition += zserio_context.icon_template_set_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._icon_template_set_id_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_set_id_ = zserio_reader.read_varuint()
        self._scale_range_id_ = zserio_reader.read_varuint32()
        self._num_icons_ = zserio_reader.read_varsize()
        self._icon_usage_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_usage()), zserio_reader, self._num_icons_)
        self._icon_id_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_icons_)
        self._icon_display_arrangement_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_display_arrangement()), zserio_reader, self._num_icons_)
        self._icon_drawing_priority_ = zserio_reader.read_varuint16()
        if zserio_reader.read_bool():
            self._icon_template_set_id_ = zserio_reader.read_varuint16()
        else:
            self._icon_template_set_id_ = None

    def read_packed(self, zserio_context: IconSet.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_set_id_ = zserio_context.icon_set_id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._scale_range_id_ = zserio_context.scale_range_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._num_icons_ = zserio_context.num_icons.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._icon_usage_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_usage()), zserio_reader, self._num_icons_)

        self._icon_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_icons_)

        self._icon_display_arrangement_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_display_arrangement()), zserio_reader, self._num_icons_)

        self._icon_drawing_priority_ = zserio_context.icon_drawing_priority.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._icon_template_set_id_ = zserio_context.icon_template_set_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._icon_template_set_id_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._icon_set_id_)

        zserio_writer.write_varuint32(self._scale_range_id_)

        zserio_writer.write_varsize(self._num_icons_)

        # check array length
        if len(self._icon_usage_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconUsage: "
                                                f"{len(self._icon_usage_)} != {self._num_icons_}!")
        self._icon_usage_.write(zserio_writer)

        # check array length
        if len(self._icon_id_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconId: "
                                                f"{len(self._icon_id_)} != {self._num_icons_}!")
        self._icon_id_.write(zserio_writer)

        # check array length
        if len(self._icon_display_arrangement_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconDisplayArrangement: "
                                                f"{len(self._icon_display_arrangement_)} != {self._num_icons_}!")
        self._icon_display_arrangement_.write(zserio_writer)

        zserio_writer.write_varuint16(self._icon_drawing_priority_)

        if self.is_icon_template_set_id_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint16(self._icon_template_set_id_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: IconSet.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.icon_set_id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._icon_set_id_)

        zserio_context.scale_range_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._scale_range_id_)

        zserio_context.num_icons.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_icons_)

        # check array length
        if len(self._icon_usage_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconUsage: "
                                                f"{len(self._icon_usage_)} != {self._num_icons_}!")
        self._icon_usage_.write_packed(zserio_writer)

        # check array length
        if len(self._icon_id_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconId: "
                                                f"{len(self._icon_id_)} != {self._num_icons_}!")
        self._icon_id_.write_packed(zserio_writer)

        # check array length
        if len(self._icon_display_arrangement_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconSet.iconDisplayArrangement: "
                                                f"{len(self._icon_display_arrangement_)} != {self._num_icons_}!")
        self._icon_display_arrangement_.write_packed(zserio_writer)

        zserio_context.icon_drawing_priority.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._icon_drawing_priority_)

        if self.is_icon_template_set_id_used():
            zserio_writer.write_bool(True)
            zserio_context.icon_template_set_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._icon_template_set_id_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._icon_set_id_ = zserio.array.DeltaContext()
            self._scale_range_id_ = zserio.array.DeltaContext()
            self._num_icons_ = zserio.array.DeltaContext()
            self._icon_drawing_priority_ = zserio.array.DeltaContext()
            self._icon_template_set_id_ = zserio.array.DeltaContext()

        @property
        def icon_set_id(self):
            return self._icon_set_id_

        @property
        def scale_range_id(self):
            return self._scale_range_id_

        @property
        def num_icons(self):
            return self._num_icons_

        @property
        def icon_drawing_priority(self):
            return self._icon_drawing_priority_

        @property
        def icon_template_set_id(self):
            return self._icon_template_set_id_

    class _ZserioElementFactory_icon_usage:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_usage_type.IconUsageType:
            del zserio_index
            return nds.core.icons.icon_usage_type.IconUsageType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_usage_type.IconUsageType:
            del zserio_index
            return nds.core.icons.icon_usage_type.IconUsageType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_icon_display_arrangement:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_display_arrangements.IconDisplayArrangements:
            del zserio_index
            return nds.core.icons.icon_display_arrangements.IconDisplayArrangements.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_display_arrangements.IconDisplayArrangements:
            del zserio_index
            return nds.core.icons.icon_display_arrangements.IconDisplayArrangements.from_reader_packed(zserio_context, zserio_reader)
