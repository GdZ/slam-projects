# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.color.color_rgba
import nds.core.icons.display_resolution
import nds.core.icons.icon_format
import nds.core.icons.icon_heading
import nds.core.icons.icon_id
import nds.core.icons.image_anchor_pos
import nds.core.icons.image_rect
import nds.core.icons.num_pixels

class IconImage:
    def __init__(
            self,
            icon_id_: nds.core.icons.icon_id.IconId = nds.core.icons.icon_id.IconId(),
            min_resolution_: nds.core.icons.display_resolution.DisplayResolution = nds.core.icons.display_resolution.DisplayResolution(),
            max_resolution_: nds.core.icons.display_resolution.DisplayResolution = nds.core.icons.display_resolution.DisplayResolution(),
            text_bounding_rect_: typing.Union[nds.core.icons.image_rect.ImageRect, None] = None,
            text_color_: typing.Union[nds.core.color.color_rgba.ColorRgba, None] = None,
            pix_width_: nds.core.icons.num_pixels.NumPixels = nds.core.icons.num_pixels.NumPixels(),
            pix_height_: nds.core.icons.num_pixels.NumPixels = nds.core.icons.num_pixels.NumPixels(),
            icon_format_: typing.Union[nds.core.icons.icon_format.IconFormat, None] = None,
            image_anchor_pos_: typing.Union[nds.core.icons.image_anchor_pos.ImageAnchorPos, None] = None,
            icon_heading_: nds.core.icons.icon_heading.IconHeading = nds.core.icons.icon_heading.IconHeading(),
            image_bounding_rect_: typing.Union[nds.core.icons.image_rect.ImageRect, None] = None,
            image_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._icon_id_ = icon_id_
        self._min_resolution_ = min_resolution_
        self._max_resolution_ = max_resolution_
        self._text_bounding_rect_ = text_bounding_rect_
        self._text_color_ = text_color_
        self._pix_width_ = pix_width_
        self._pix_height_ = pix_height_
        self._icon_format_ = icon_format_
        self._image_anchor_pos_ = image_anchor_pos_
        self._icon_heading_ = icon_heading_
        self._image_bounding_rect_ = image_bounding_rect_
        self._image_ = image_

    @classmethod
    def from_reader(
            cls: typing.Type['IconImage'],
            zserio_reader: zserio.BitStreamReader) -> 'IconImage':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconImage'],
            zserio_context: IconImage.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconImage':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconImage):
            return ((self._icon_id_ == other._icon_id_) and
                    (self._min_resolution_ == other._min_resolution_) and
                    (self._max_resolution_ == other._max_resolution_) and
                    (self._text_bounding_rect_ == other._text_bounding_rect_) and
                    (self._text_color_ == other._text_color_) and
                    (self._pix_width_ == other._pix_width_) and
                    (self._pix_height_ == other._pix_height_) and
                    (self._icon_format_ == other._icon_format_) and
                    (self._image_anchor_pos_ == other._image_anchor_pos_) and
                    (self._icon_heading_ == other._icon_heading_) and
                    (self._image_bounding_rect_ == other._image_bounding_rect_) and
                    (self._image_ == other._image_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._icon_id_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._min_resolution_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_resolution_)
        result = zserio.hashcode.calc_hashcode_object(result, self._text_bounding_rect_)
        result = zserio.hashcode.calc_hashcode_object(result, self._text_color_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._pix_width_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._pix_height_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icon_format_)
        result = zserio.hashcode.calc_hashcode_object(result, self._image_anchor_pos_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._icon_heading_)
        result = zserio.hashcode.calc_hashcode_object(result, self._image_bounding_rect_)
        result = zserio.hashcode.calc_hashcode_object(result, self._image_)

        return result

    @property
    def icon_id(self) -> nds.core.icons.icon_id.IconId:
        return self._icon_id_

    @icon_id.setter
    def icon_id(self, icon_id_: nds.core.icons.icon_id.IconId) -> None:
        self._icon_id_ = icon_id_

    @property
    def min_resolution(self) -> nds.core.icons.display_resolution.DisplayResolution:
        return self._min_resolution_

    @min_resolution.setter
    def min_resolution(self, min_resolution_: nds.core.icons.display_resolution.DisplayResolution) -> None:
        self._min_resolution_ = min_resolution_

    @property
    def max_resolution(self) -> nds.core.icons.display_resolution.DisplayResolution:
        return self._max_resolution_

    @max_resolution.setter
    def max_resolution(self, max_resolution_: nds.core.icons.display_resolution.DisplayResolution) -> None:
        self._max_resolution_ = max_resolution_

    @property
    def text_bounding_rect(self) -> typing.Union[nds.core.icons.image_rect.ImageRect, None]:
        return self._text_bounding_rect_

    @text_bounding_rect.setter
    def text_bounding_rect(self, text_bounding_rect_: typing.Union[nds.core.icons.image_rect.ImageRect, None]) -> None:
        self._text_bounding_rect_ = text_bounding_rect_

    @property
    def text_color(self) -> typing.Union[nds.core.color.color_rgba.ColorRgba, None]:
        return self._text_color_

    @text_color.setter
    def text_color(self, text_color_: typing.Union[nds.core.color.color_rgba.ColorRgba, None]) -> None:
        self._text_color_ = text_color_

    @property
    def pix_width(self) -> nds.core.icons.num_pixels.NumPixels:
        return self._pix_width_

    @pix_width.setter
    def pix_width(self, pix_width_: nds.core.icons.num_pixels.NumPixels) -> None:
        self._pix_width_ = pix_width_

    @property
    def pix_height(self) -> nds.core.icons.num_pixels.NumPixels:
        return self._pix_height_

    @pix_height.setter
    def pix_height(self, pix_height_: nds.core.icons.num_pixels.NumPixels) -> None:
        self._pix_height_ = pix_height_

    @property
    def icon_format(self) -> typing.Union[nds.core.icons.icon_format.IconFormat, None]:
        return self._icon_format_

    @icon_format.setter
    def icon_format(self, icon_format_: typing.Union[nds.core.icons.icon_format.IconFormat, None]) -> None:
        self._icon_format_ = icon_format_

    @property
    def image_anchor_pos(self) -> typing.Union[nds.core.icons.image_anchor_pos.ImageAnchorPos, None]:
        return self._image_anchor_pos_

    @image_anchor_pos.setter
    def image_anchor_pos(self, image_anchor_pos_: typing.Union[nds.core.icons.image_anchor_pos.ImageAnchorPos, None]) -> None:
        self._image_anchor_pos_ = image_anchor_pos_

    @property
    def icon_heading(self) -> nds.core.icons.icon_heading.IconHeading:
        return self._icon_heading_

    @icon_heading.setter
    def icon_heading(self, icon_heading_: nds.core.icons.icon_heading.IconHeading) -> None:
        self._icon_heading_ = icon_heading_

    @property
    def image_bounding_rect(self) -> typing.Union[nds.core.icons.image_rect.ImageRect, None]:
        return self._image_bounding_rect_

    @image_bounding_rect.setter
    def image_bounding_rect(self, image_bounding_rect_: typing.Union[nds.core.icons.image_rect.ImageRect, None]) -> None:
        self._image_bounding_rect_ = image_bounding_rect_

    @property
    def image(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._image_

    @image.setter
    def image(self, image_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._image_ = image_

    def init_packing_context(self, zserio_context: IconImage.ZserioPackingContext) -> None:
        zserio_context.icon_id.init(zserio.array.VarUInt32ArrayTraits(), self._icon_id_)
        zserio_context.min_resolution.init(zserio.array.VarUInt16ArrayTraits(), self._min_resolution_)
        zserio_context.max_resolution.init(zserio.array.VarUInt16ArrayTraits(), self._max_resolution_)
        self._text_bounding_rect_.init_packing_context(zserio_context.text_bounding_rect)
        self._text_color_.init_packing_context(zserio_context.text_color)
        zserio_context.pix_width.init(zserio.array.VarInt32ArrayTraits(), self._pix_width_)
        zserio_context.pix_height.init(zserio.array.VarInt32ArrayTraits(), self._pix_height_)
        self._icon_format_.init_packing_context(zserio_context.icon_format)
        self._image_anchor_pos_.init_packing_context(zserio_context.image_anchor_pos)
        zserio_context.icon_heading.init(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)
        self._image_bounding_rect_.init_packing_context(zserio_context.image_bounding_rect)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._icon_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._min_resolution_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._max_resolution_)
        end_bitposition += self._text_bounding_rect_.bitsizeof(end_bitposition)
        end_bitposition += self._text_color_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._pix_width_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._pix_height_)
        end_bitposition += self._icon_format_.bitsizeof(end_bitposition)
        end_bitposition += self._image_anchor_pos_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += self._image_bounding_rect_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._image_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconImage.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._icon_id_)
        end_bitposition += zserio_context.min_resolution.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._min_resolution_)
        end_bitposition += zserio_context.max_resolution.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._max_resolution_)
        end_bitposition += self._text_bounding_rect_.bitsizeof_packed(zserio_context.text_bounding_rect, end_bitposition)
        end_bitposition += self._text_color_.bitsizeof_packed(zserio_context.text_color, end_bitposition)
        end_bitposition += zserio_context.pix_width.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._pix_width_)
        end_bitposition += zserio_context.pix_height.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._pix_height_)
        end_bitposition += self._icon_format_.bitsizeof_packed(zserio_context.icon_format, end_bitposition)
        end_bitposition += self._image_anchor_pos_.bitsizeof_packed(zserio_context.image_anchor_pos, end_bitposition)
        end_bitposition += zserio_context.icon_heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)
        end_bitposition += self._image_bounding_rect_.bitsizeof_packed(zserio_context.image_bounding_rect, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._image_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._icon_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._min_resolution_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._max_resolution_)
        end_bitposition = self._text_bounding_rect_.initialize_offsets(end_bitposition)
        end_bitposition = self._text_color_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._pix_width_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._pix_height_)
        end_bitposition = self._icon_format_.initialize_offsets(end_bitposition)
        end_bitposition = self._image_anchor_pos_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition = self._image_bounding_rect_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._image_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconImage.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._icon_id_)
        end_bitposition += zserio_context.min_resolution.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._min_resolution_)
        end_bitposition += zserio_context.max_resolution.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._max_resolution_)
        end_bitposition = self._text_bounding_rect_.initialize_offsets_packed(zserio_context.text_bounding_rect, end_bitposition)
        end_bitposition = self._text_color_.initialize_offsets_packed(zserio_context.text_color, end_bitposition)
        end_bitposition += zserio_context.pix_width.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._pix_width_)
        end_bitposition += zserio_context.pix_height.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._pix_height_)
        end_bitposition = self._icon_format_.initialize_offsets_packed(zserio_context.icon_format, end_bitposition)
        end_bitposition = self._image_anchor_pos_.initialize_offsets_packed(zserio_context.image_anchor_pos, end_bitposition)
        end_bitposition += zserio_context.icon_heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)
        end_bitposition = self._image_bounding_rect_.initialize_offsets_packed(zserio_context.image_bounding_rect, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._image_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_id_ = zserio_reader.read_varuint32()
        self._min_resolution_ = zserio_reader.read_varuint16()
        self._max_resolution_ = zserio_reader.read_varuint16()
        self._text_bounding_rect_ = nds.core.icons.image_rect.ImageRect.from_reader(zserio_reader)
        self._text_color_ = nds.core.color.color_rgba.ColorRgba.from_reader(zserio_reader)
        self._pix_width_ = zserio_reader.read_varint32()
        self._pix_height_ = zserio_reader.read_varint32()
        self._icon_format_ = nds.core.icons.icon_format.IconFormat.from_reader(zserio_reader)
        self._image_anchor_pos_ = nds.core.icons.image_anchor_pos.ImageAnchorPos.from_reader(zserio_reader)
        self._icon_heading_ = zserio_reader.read_bits(8)
        self._image_bounding_rect_ = nds.core.icons.image_rect.ImageRect.from_reader(zserio_reader)
        self._image_ = zserio_reader.read_bitbuffer()

    def read_packed(self, zserio_context: IconImage.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_id_ = zserio_context.icon_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._min_resolution_ = zserio_context.min_resolution.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._max_resolution_ = zserio_context.max_resolution.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._text_bounding_rect_ = nds.core.icons.image_rect.ImageRect.from_reader_packed(zserio_context.text_bounding_rect, zserio_reader)

        self._text_color_ = nds.core.color.color_rgba.ColorRgba.from_reader_packed(zserio_context.text_color, zserio_reader)

        self._pix_width_ = zserio_context.pix_width.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)

        self._pix_height_ = zserio_context.pix_height.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)

        self._icon_format_ = nds.core.icons.icon_format.IconFormat.from_reader_packed(zserio_context.icon_format, zserio_reader)

        self._image_anchor_pos_ = nds.core.icons.image_anchor_pos.ImageAnchorPos.from_reader_packed(zserio_context.image_anchor_pos, zserio_reader)

        self._icon_heading_ = zserio_context.icon_heading.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._image_bounding_rect_ = nds.core.icons.image_rect.ImageRect.from_reader_packed(zserio_context.image_bounding_rect, zserio_reader)

        self._image_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._icon_id_)
        zserio_writer.write_varuint16(self._min_resolution_)
        zserio_writer.write_varuint16(self._max_resolution_)
        self._text_bounding_rect_.write(zserio_writer)
        self._text_color_.write(zserio_writer)
        zserio_writer.write_varint32(self._pix_width_)
        zserio_writer.write_varint32(self._pix_height_)
        self._icon_format_.write(zserio_writer)
        self._image_anchor_pos_.write(zserio_writer)
        zserio_writer.write_bits(self._icon_heading_, 8)
        self._image_bounding_rect_.write(zserio_writer)
        zserio_writer.write_bitbuffer(self._image_)

    def write_packed(self, zserio_context: IconImage.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.icon_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._icon_id_)

        zserio_context.min_resolution.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._min_resolution_)

        zserio_context.max_resolution.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._max_resolution_)

        self._text_bounding_rect_.write_packed(zserio_context.text_bounding_rect, zserio_writer)

        self._text_color_.write_packed(zserio_context.text_color, zserio_writer)

        zserio_context.pix_width.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._pix_width_)

        zserio_context.pix_height.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._pix_height_)

        self._icon_format_.write_packed(zserio_context.icon_format, zserio_writer)

        self._image_anchor_pos_.write_packed(zserio_context.image_anchor_pos, zserio_writer)

        zserio_context.icon_heading.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._icon_heading_)

        self._image_bounding_rect_.write_packed(zserio_context.image_bounding_rect, zserio_writer)

        zserio_writer.write_bitbuffer(self._image_)

    class ZserioPackingContext:
        def __init__(self):
            self._icon_id_ = zserio.array.DeltaContext()
            self._min_resolution_ = zserio.array.DeltaContext()
            self._max_resolution_ = zserio.array.DeltaContext()
            self._text_bounding_rect_ = nds.core.icons.image_rect.ImageRect.ZserioPackingContext()
            self._text_color_ = nds.core.color.color_rgba.ColorRgba.ZserioPackingContext()
            self._pix_width_ = zserio.array.DeltaContext()
            self._pix_height_ = zserio.array.DeltaContext()
            self._icon_format_ = zserio.array.DeltaContext()
            self._image_anchor_pos_ = nds.core.icons.image_anchor_pos.ImageAnchorPos.ZserioPackingContext()
            self._icon_heading_ = zserio.array.DeltaContext()
            self._image_bounding_rect_ = nds.core.icons.image_rect.ImageRect.ZserioPackingContext()

        @property
        def icon_id(self):
            return self._icon_id_

        @property
        def min_resolution(self):
            return self._min_resolution_

        @property
        def max_resolution(self):
            return self._max_resolution_

        @property
        def text_bounding_rect(self):
            return self._text_bounding_rect_

        @property
        def text_color(self):
            return self._text_color_

        @property
        def pix_width(self):
            return self._pix_width_

        @property
        def pix_height(self):
            return self._pix_height_

        @property
        def icon_format(self):
            return self._icon_format_

        @property
        def image_anchor_pos(self):
            return self._image_anchor_pos_

        @property
        def icon_heading(self):
            return self._icon_heading_

        @property
        def image_bounding_rect(self):
            return self._image_bounding_rect_
