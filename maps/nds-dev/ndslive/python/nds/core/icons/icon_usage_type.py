# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class IconUsageType:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['IconUsageType'], value: int) -> 'IconUsageType':
        if value < 0 or value > 144115188075855871:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'IconUsageType' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['IconUsageType'], reader: zserio.BitStreamReader) -> 'IconUsageType':
        instance = cls()
        instance._value = reader.read_varuint64()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['IconUsageType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'IconUsageType':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt64ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconUsageType):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & IconUsageType.Values.TWO_D) == IconUsageType.Values.TWO_D:
            result += "TWO_D" if not result else " | TWO_D"
        if (self & IconUsageType.Values.THREE_D) == IconUsageType.Values.THREE_D:
            result += "THREE_D" if not result else " | THREE_D"
        if (self & IconUsageType.Values.NIGHT) == IconUsageType.Values.NIGHT:
            result += "NIGHT" if not result else " | NIGHT"
        if (self & IconUsageType.Values.DAY) == IconUsageType.Values.DAY:
            result += "DAY" if not result else " | DAY"
        if (self & IconUsageType.Values.HIGHLIGHTED) == IconUsageType.Values.HIGHLIGHTED:
            result += "HIGHLIGHTED" if not result else " | HIGHLIGHTED"
        if (self & IconUsageType.Values.MAP) == IconUsageType.Values.MAP:
            result += "MAP" if not result else " | MAP"
        if (self & IconUsageType.Values.LIST) == IconUsageType.Values.LIST:
            result += "LIST" if not result else " | LIST"
        if (self & IconUsageType.Values.STACKED) == IconUsageType.Values.STACKED:
            result += "STACKED" if not result else " | STACKED"
        if (self & IconUsageType.Values.ON_ROUTE) == IconUsageType.Values.ON_ROUTE:
            result += "ON_ROUTE" if not result else " | ON_ROUTE"
        if (self & IconUsageType.Values.OFF_ROUTE) == IconUsageType.Values.OFF_ROUTE:
            result += "OFF_ROUTE" if not result else " | OFF_ROUTE"
        if (self & IconUsageType.Values.GUIDANCE) == IconUsageType.Values.GUIDANCE:
            result += "GUIDANCE" if not result else " | GUIDANCE"
        if (self & IconUsageType.Values.ICD) == IconUsageType.Values.ICD:
            result += "ICD" if not result else " | ICD"
        if (self & IconUsageType.Values.HUD) == IconUsageType.Values.HUD:
            result += "HUD" if not result else " | HUD"
        if (self & IconUsageType.Values.NOT_HIGHLIGHTED) == IconUsageType.Values.NOT_HIGHLIGHTED:
            result += "NOT_HIGHLIGHTED" if not result else " | NOT_HIGHLIGHTED"
        if (self & IconUsageType.Values.NOT_STACKED) == IconUsageType.Values.NOT_STACKED:
            result += "NOT_STACKED" if not result else " | NOT_STACKED"
        if (self & IconUsageType.Values.BUTTON) == IconUsageType.Values.BUTTON:
            result += "BUTTON" if not result else " | BUTTON"
        if (self & IconUsageType.Values.CID) == IconUsageType.Values.CID:
            result += "CID" if not result else " | CID"
        if (self & IconUsageType.Values.IN_FOCUS) == IconUsageType.Values.IN_FOCUS:
            result += "IN_FOCUS" if not result else " | IN_FOCUS"
        if (self & IconUsageType.Values.OUT_OF_FOCUS) == IconUsageType.Values.OUT_OF_FOCUS:
            result += "OUT_OF_FOCUS" if not result else " | OUT_OF_FOCUS"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'IconUsageType') -> 'IconUsageType':
        return IconUsageType.from_value(self._value | other._value)

    def __and__(self, other: 'IconUsageType') -> 'IconUsageType':
        return IconUsageType.from_value(self._value & other._value)

    def __xor__(self, other: 'IconUsageType') -> 'IconUsageType':
        return IconUsageType.from_value(self._value ^ other._value)

    def __invert__(self) -> 'IconUsageType':
        return IconUsageType.from_value(~self._value & 144115188075855871)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt64ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint64(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt64ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint64(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt64ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        TWO_D: 'IconUsageType' = None
        THREE_D: 'IconUsageType' = None
        NIGHT: 'IconUsageType' = None
        DAY: 'IconUsageType' = None
        HIGHLIGHTED: 'IconUsageType' = None
        MAP: 'IconUsageType' = None
        LIST: 'IconUsageType' = None
        STACKED: 'IconUsageType' = None
        ON_ROUTE: 'IconUsageType' = None
        OFF_ROUTE: 'IconUsageType' = None
        GUIDANCE: 'IconUsageType' = None
        ICD: 'IconUsageType' = None
        HUD: 'IconUsageType' = None
        NOT_HIGHLIGHTED: 'IconUsageType' = None
        NOT_STACKED: 'IconUsageType' = None
        BUTTON: 'IconUsageType' = None
        CID: 'IconUsageType' = None
        IN_FOCUS: 'IconUsageType' = None
        OUT_OF_FOCUS: 'IconUsageType' = None

IconUsageType.Values.TWO_D = IconUsageType.from_value(1)
IconUsageType.Values.THREE_D = IconUsageType.from_value(2)
IconUsageType.Values.NIGHT = IconUsageType.from_value(4)
IconUsageType.Values.DAY = IconUsageType.from_value(8)
IconUsageType.Values.HIGHLIGHTED = IconUsageType.from_value(16)
IconUsageType.Values.MAP = IconUsageType.from_value(32)
IconUsageType.Values.LIST = IconUsageType.from_value(64)
IconUsageType.Values.STACKED = IconUsageType.from_value(128)
IconUsageType.Values.ON_ROUTE = IconUsageType.from_value(256)
IconUsageType.Values.OFF_ROUTE = IconUsageType.from_value(512)
IconUsageType.Values.GUIDANCE = IconUsageType.from_value(1024)
IconUsageType.Values.ICD = IconUsageType.from_value(2048)
IconUsageType.Values.HUD = IconUsageType.from_value(4096)
IconUsageType.Values.NOT_HIGHLIGHTED = IconUsageType.from_value(8192)
IconUsageType.Values.NOT_STACKED = IconUsageType.from_value(16384)
IconUsageType.Values.BUTTON = IconUsageType.from_value(32768)
IconUsageType.Values.CID = IconUsageType.from_value(65536)
IconUsageType.Values.IN_FOCUS = IconUsageType.from_value(131072)
IconUsageType.Values.OUT_OF_FOCUS = IconUsageType.from_value(262144)
