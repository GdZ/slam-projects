# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_heading
import nds.core.icons.icon_set_reference

class IconSetReferenceWithHeading:
    def __init__(
            self,
            icon_set_reference_: nds.core.icons.icon_set_reference.IconSetReference = nds.core.icons.icon_set_reference.IconSetReference(),
            icon_heading_: nds.core.icons.icon_heading.IconHeading = nds.core.icons.icon_heading.IconHeading()) -> None:
        self._icon_set_reference_ = icon_set_reference_
        self._icon_heading_ = icon_heading_

    @classmethod
    def from_reader(
            cls: typing.Type['IconSetReferenceWithHeading'],
            zserio_reader: zserio.BitStreamReader) -> 'IconSetReferenceWithHeading':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconSetReferenceWithHeading'],
            zserio_context: IconSetReferenceWithHeading.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconSetReferenceWithHeading':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconSetReferenceWithHeading):
            return ((self._icon_set_reference_ == other._icon_set_reference_) and
                    (self._icon_heading_ == other._icon_heading_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._icon_set_reference_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._icon_heading_)

        return result

    @property
    def icon_set_reference(self) -> nds.core.icons.icon_set_reference.IconSetReference:
        return self._icon_set_reference_

    @icon_set_reference.setter
    def icon_set_reference(self, icon_set_reference_: nds.core.icons.icon_set_reference.IconSetReference) -> None:
        self._icon_set_reference_ = icon_set_reference_

    @property
    def icon_heading(self) -> nds.core.icons.icon_heading.IconHeading:
        return self._icon_heading_

    @icon_heading.setter
    def icon_heading(self, icon_heading_: nds.core.icons.icon_heading.IconHeading) -> None:
        self._icon_heading_ = icon_heading_

    def init_packing_context(self, zserio_context: IconSetReferenceWithHeading.ZserioPackingContext) -> None:
        zserio_context.icon_set_reference.init(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)
        zserio_context.icon_heading.init(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_reference_)
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconSetReferenceWithHeading.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)
        end_bitposition += zserio_context.icon_heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._icon_set_reference_)
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconSetReferenceWithHeading.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.icon_set_reference.bitsizeof(zserio.array.VarUIntArrayTraits(), self._icon_set_reference_)
        end_bitposition += zserio_context.icon_heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._icon_heading_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_set_reference_ = zserio_reader.read_varuint()
        self._icon_heading_ = zserio_reader.read_bits(8)

    def read_packed(self, zserio_context: IconSetReferenceWithHeading.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._icon_set_reference_ = zserio_context.icon_set_reference.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._icon_heading_ = zserio_context.icon_heading.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._icon_set_reference_)
        zserio_writer.write_bits(self._icon_heading_, 8)

    def write_packed(self, zserio_context: IconSetReferenceWithHeading.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.icon_set_reference.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._icon_set_reference_)

        zserio_context.icon_heading.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._icon_heading_)

    class ZserioPackingContext:
        def __init__(self):
            self._icon_set_reference_ = zserio.array.DeltaContext()
            self._icon_heading_ = zserio.array.DeltaContext()

        @property
        def icon_set_reference(self):
            return self._icon_set_reference_

        @property
        def icon_heading(self):
            return self._icon_heading_
