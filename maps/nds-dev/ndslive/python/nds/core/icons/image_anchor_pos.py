# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.num_pixels

class ImageAnchorPos:
    def __init__(
            self,
            x_pos_image_anchor_: nds.core.icons.num_pixels.NumPixels = nds.core.icons.num_pixels.NumPixels(),
            y_pos_image_anchor_: nds.core.icons.num_pixels.NumPixels = nds.core.icons.num_pixels.NumPixels()) -> None:
        self._x_pos_image_anchor_ = x_pos_image_anchor_
        self._y_pos_image_anchor_ = y_pos_image_anchor_

    @classmethod
    def from_reader(
            cls: typing.Type['ImageAnchorPos'],
            zserio_reader: zserio.BitStreamReader) -> 'ImageAnchorPos':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ImageAnchorPos'],
            zserio_context: ImageAnchorPos.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ImageAnchorPos':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ImageAnchorPos):
            return ((self._x_pos_image_anchor_ == other._x_pos_image_anchor_) and
                    (self._y_pos_image_anchor_ == other._y_pos_image_anchor_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._x_pos_image_anchor_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._y_pos_image_anchor_)

        return result

    @property
    def x_pos_image_anchor(self) -> nds.core.icons.num_pixels.NumPixels:
        return self._x_pos_image_anchor_

    @x_pos_image_anchor.setter
    def x_pos_image_anchor(self, x_pos_image_anchor_: nds.core.icons.num_pixels.NumPixels) -> None:
        self._x_pos_image_anchor_ = x_pos_image_anchor_

    @property
    def y_pos_image_anchor(self) -> nds.core.icons.num_pixels.NumPixels:
        return self._y_pos_image_anchor_

    @y_pos_image_anchor.setter
    def y_pos_image_anchor(self, y_pos_image_anchor_: nds.core.icons.num_pixels.NumPixels) -> None:
        self._y_pos_image_anchor_ = y_pos_image_anchor_

    def init_packing_context(self, zserio_context: ImageAnchorPos.ZserioPackingContext) -> None:
        zserio_context.x_pos_image_anchor.init(zserio.array.VarInt32ArrayTraits(), self._x_pos_image_anchor_)
        zserio_context.y_pos_image_anchor.init(zserio.array.VarInt32ArrayTraits(), self._y_pos_image_anchor_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._x_pos_image_anchor_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._y_pos_image_anchor_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ImageAnchorPos.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.x_pos_image_anchor.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._x_pos_image_anchor_)
        end_bitposition += zserio_context.y_pos_image_anchor.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._y_pos_image_anchor_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._x_pos_image_anchor_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._y_pos_image_anchor_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ImageAnchorPos.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.x_pos_image_anchor.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._x_pos_image_anchor_)
        end_bitposition += zserio_context.y_pos_image_anchor.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._y_pos_image_anchor_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._x_pos_image_anchor_ = zserio_reader.read_varint32()
        self._y_pos_image_anchor_ = zserio_reader.read_varint32()

    def read_packed(self, zserio_context: ImageAnchorPos.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._x_pos_image_anchor_ = zserio_context.x_pos_image_anchor.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)

        self._y_pos_image_anchor_ = zserio_context.y_pos_image_anchor.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varint32(self._x_pos_image_anchor_)
        zserio_writer.write_varint32(self._y_pos_image_anchor_)

    def write_packed(self, zserio_context: ImageAnchorPos.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.x_pos_image_anchor.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._x_pos_image_anchor_)

        zserio_context.y_pos_image_anchor.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._y_pos_image_anchor_)

    class ZserioPackingContext:
        def __init__(self):
            self._x_pos_image_anchor_ = zserio.array.DeltaContext()
            self._y_pos_image_anchor_ = zserio.array.DeltaContext()

        @property
        def x_pos_image_anchor(self):
            return self._x_pos_image_anchor_

        @property
        def y_pos_image_anchor(self):
            return self._y_pos_image_anchor_
