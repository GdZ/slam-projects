# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_id
import nds.core.icons.icon_template_set_id
import nds.core.icons.icon_usage_type
import nds.core.icons.image_anchor_pos

class IconTemplateSet:
    def __init__(
            self,
            template_set_id_: nds.core.icons.icon_template_set_id.IconTemplateSetId = nds.core.icons.icon_template_set_id.IconTemplateSetId(),
            num_icons_: int = int(),
            usage_type_: typing.List[nds.core.icons.icon_usage_type.IconUsageType] = None,
            drawing_layer_: typing.List[int] = None,
            template_connection_point_: typing.List[nds.core.icons.image_anchor_pos.ImageAnchorPos] = None,
            icon_id_: typing.List[nds.core.icons.icon_id.IconId] = None) -> None:
        self._template_set_id_ = template_set_id_
        self._num_icons_ = num_icons_
        self._usage_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), usage_type_)
        self._drawing_layer_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(8), drawing_layer_)
        self._template_connection_point_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_template_connection_point()), template_connection_point_)
        self._icon_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), icon_id_)

    @classmethod
    def from_reader(
            cls: typing.Type['IconTemplateSet'],
            zserio_reader: zserio.BitStreamReader) -> 'IconTemplateSet':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconTemplateSet'],
            zserio_context: IconTemplateSet.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconTemplateSet':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconTemplateSet):
            return ((self._template_set_id_ == other._template_set_id_) and
                    (self._num_icons_ == other._num_icons_) and
                    (self._usage_type_ == other._usage_type_) and
                    (self._drawing_layer_ == other._drawing_layer_) and
                    (self._template_connection_point_ == other._template_connection_point_) and
                    (self._icon_id_ == other._icon_id_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._template_set_id_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_icons_)
        result = zserio.hashcode.calc_hashcode_object(result, self._usage_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._drawing_layer_)
        result = zserio.hashcode.calc_hashcode_object(result, self._template_connection_point_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icon_id_)

        return result

    @property
    def template_set_id(self) -> nds.core.icons.icon_template_set_id.IconTemplateSetId:
        return self._template_set_id_

    @template_set_id.setter
    def template_set_id(self, template_set_id_: nds.core.icons.icon_template_set_id.IconTemplateSetId) -> None:
        self._template_set_id_ = template_set_id_

    @property
    def num_icons(self) -> int:
        return self._num_icons_

    @num_icons.setter
    def num_icons(self, num_icons_: int) -> None:
        self._num_icons_ = num_icons_

    @property
    def usage_type(self) -> typing.List[nds.core.icons.icon_usage_type.IconUsageType]:
        return self._usage_type_.raw_array

    @usage_type.setter
    def usage_type(self, usage_type_: typing.List[nds.core.icons.icon_usage_type.IconUsageType]) -> None:
        self._usage_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), usage_type_)

    @property
    def drawing_layer(self) -> typing.List[int]:
        return self._drawing_layer_.raw_array

    @drawing_layer.setter
    def drawing_layer(self, drawing_layer_: typing.List[int]) -> None:
        self._drawing_layer_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(8), drawing_layer_)

    @property
    def template_connection_point(self) -> typing.List[nds.core.icons.image_anchor_pos.ImageAnchorPos]:
        return self._template_connection_point_.raw_array

    @template_connection_point.setter
    def template_connection_point(self, template_connection_point_: typing.List[nds.core.icons.image_anchor_pos.ImageAnchorPos]) -> None:
        self._template_connection_point_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_template_connection_point()), template_connection_point_)

    @property
    def icon_id(self) -> typing.List[nds.core.icons.icon_id.IconId]:
        return self._icon_id_.raw_array

    @icon_id.setter
    def icon_id(self, icon_id_: typing.List[nds.core.icons.icon_id.IconId]) -> None:
        self._icon_id_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), icon_id_)

    def init_packing_context(self, zserio_context: IconTemplateSet.ZserioPackingContext) -> None:
        zserio_context.template_set_id.init(zserio.array.VarUInt16ArrayTraits(), self._template_set_id_)
        zserio_context.num_icons.init(zserio.array.VarSizeArrayTraits(), self._num_icons_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._template_set_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_icons_)
        end_bitposition += self._usage_type_.bitsizeof(end_bitposition)
        end_bitposition += self._drawing_layer_.bitsizeof(end_bitposition)
        end_bitposition += self._template_connection_point_.bitsizeof(end_bitposition)
        end_bitposition += self._icon_id_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconTemplateSet.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.template_set_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._template_set_id_)
        end_bitposition += zserio_context.num_icons.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_icons_)
        end_bitposition += self._usage_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._drawing_layer_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._template_connection_point_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._icon_id_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._template_set_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_icons_)
        end_bitposition = self._usage_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._drawing_layer_.initialize_offsets(end_bitposition)
        end_bitposition = self._template_connection_point_.initialize_offsets(end_bitposition)
        end_bitposition = self._icon_id_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconTemplateSet.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.template_set_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._template_set_id_)
        end_bitposition += zserio_context.num_icons.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_icons_)
        end_bitposition = self._usage_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._drawing_layer_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._template_connection_point_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._icon_id_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._template_set_id_ = zserio_reader.read_varuint16()
        self._num_icons_ = zserio_reader.read_varsize()
        self._usage_type_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), zserio_reader, self._num_icons_)
        self._drawing_layer_ = zserio.array.Array.from_reader(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader, self._num_icons_)
        self._template_connection_point_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_template_connection_point()), zserio_reader, self._num_icons_)
        self._icon_id_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_icons_)

    def read_packed(self, zserio_context: IconTemplateSet.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._template_set_id_ = zserio_context.template_set_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._num_icons_ = zserio_context.num_icons.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._usage_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_usage_type()), zserio_reader, self._num_icons_)

        self._drawing_layer_ = zserio.array.Array.from_reader_packed(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader, self._num_icons_)

        self._template_connection_point_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_template_connection_point()), zserio_reader, self._num_icons_)

        self._icon_id_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_icons_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._template_set_id_)

        zserio_writer.write_varsize(self._num_icons_)

        # check array length
        if len(self._usage_type_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.usageType: "
                                                f"{len(self._usage_type_)} != {self._num_icons_}!")
        self._usage_type_.write(zserio_writer)

        # check array length
        if len(self._drawing_layer_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.drawingLayer: "
                                                f"{len(self._drawing_layer_)} != {self._num_icons_}!")
        self._drawing_layer_.write(zserio_writer)

        # check array length
        if len(self._template_connection_point_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.templateConnectionPoint: "
                                                f"{len(self._template_connection_point_)} != {self._num_icons_}!")
        self._template_connection_point_.write(zserio_writer)

        # check array length
        if len(self._icon_id_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.iconId: "
                                                f"{len(self._icon_id_)} != {self._num_icons_}!")
        self._icon_id_.write(zserio_writer)

    def write_packed(self, zserio_context: IconTemplateSet.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.template_set_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._template_set_id_)

        zserio_context.num_icons.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_icons_)

        # check array length
        if len(self._usage_type_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.usageType: "
                                                f"{len(self._usage_type_)} != {self._num_icons_}!")
        self._usage_type_.write_packed(zserio_writer)

        # check array length
        if len(self._drawing_layer_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.drawingLayer: "
                                                f"{len(self._drawing_layer_)} != {self._num_icons_}!")
        self._drawing_layer_.write_packed(zserio_writer)

        # check array length
        if len(self._template_connection_point_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.templateConnectionPoint: "
                                                f"{len(self._template_connection_point_)} != {self._num_icons_}!")
        self._template_connection_point_.write_packed(zserio_writer)

        # check array length
        if len(self._icon_id_) != (self._num_icons_):
            raise zserio.PythonRuntimeException("Wrong array length for field IconTemplateSet.iconId: "
                                                f"{len(self._icon_id_)} != {self._num_icons_}!")
        self._icon_id_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._template_set_id_ = zserio.array.DeltaContext()
            self._num_icons_ = zserio.array.DeltaContext()

        @property
        def template_set_id(self):
            return self._template_set_id_

        @property
        def num_icons(self):
            return self._num_icons_

    class _ZserioElementFactory_usage_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_usage_type.IconUsageType:
            del zserio_index
            return nds.core.icons.icon_usage_type.IconUsageType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_usage_type.IconUsageType:
            del zserio_index
            return nds.core.icons.icon_usage_type.IconUsageType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_template_connection_point:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.image_anchor_pos.ImageAnchorPos:
            del zserio_index
            return nds.core.icons.image_anchor_pos.ImageAnchorPos.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.image_anchor_pos.ImageAnchorPos.ZserioPackingContext:
            return nds.core.icons.image_anchor_pos.ImageAnchorPos.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.image_anchor_pos.ImageAnchorPos.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.image_anchor_pos.ImageAnchorPos:
            del zserio_index
            return nds.core.icons.image_anchor_pos.ImageAnchorPos.from_reader_packed(zserio_context, zserio_reader)
