# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d
import nds.core.geometry.position3d
import nds.core.properties.attribute_reason_position_availability
import nds.core.properties.attribute_reason_type

class AttributeReason:
    def __init__(
            self,
            type_: typing.Union[nds.core.properties.attribute_reason_type.AttributeReasonType, None] = None,
            has_position_: typing.Union[nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability, None] = None,
            position2d_: typing.Optional[nds.core.geometry.position2d.Position2D] = None,
            position3d_: typing.Optional[nds.core.geometry.position3d.Position3D] = None) -> None:
        self._type_ = type_
        self._has_position_ = has_position_
        self._position2d_ = position2d_
        self._position3d_ = position3d_

    @classmethod
    def from_reader(
            cls: typing.Type['AttributeReason'],
            zserio_reader: zserio.BitStreamReader) -> 'AttributeReason':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AttributeReason'],
            zserio_context: AttributeReason.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'AttributeReason':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AttributeReason):
            return ((self._type_ == other._type_) and
                    (self._has_position_ == other._has_position_) and
                    (not other.is_position2d_used() if not self.is_position2d_used() else (self._position2d_ == other._position2d_)) and
                    (not other.is_position3d_used() if not self.is_position3d_used() else (self._position3d_ == other._position3d_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._has_position_)
        if self.is_position2d_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._position2d_)
        if self.is_position3d_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._position3d_)

        return result

    @property
    def type(self) -> typing.Union[nds.core.properties.attribute_reason_type.AttributeReasonType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.core.properties.attribute_reason_type.AttributeReasonType, None]) -> None:
        self._type_ = type_

    @property
    def has_position(self) -> typing.Union[nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability, None]:
        return self._has_position_

    @has_position.setter
    def has_position(self, has_position_: typing.Union[nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability, None]) -> None:
        self._has_position_ = has_position_

    @property
    def position2d(self) -> typing.Optional[nds.core.geometry.position2d.Position2D]:
        return self._position2d_

    @position2d.setter
    def position2d(self, position2d_: typing.Optional[nds.core.geometry.position2d.Position2D]) -> None:
        self._position2d_ = position2d_

    def is_position2d_used(self) -> bool:
        return self._has_position_ == nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability.POSITION_2D

    def is_position2d_set(self) -> bool:
        return not self._position2d_ is None

    def reset_position2d(self) -> None:
        self._position2d_ = None

    @property
    def position3d(self) -> typing.Optional[nds.core.geometry.position3d.Position3D]:
        return self._position3d_

    @position3d.setter
    def position3d(self, position3d_: typing.Optional[nds.core.geometry.position3d.Position3D]) -> None:
        self._position3d_ = position3d_

    def is_position3d_used(self) -> bool:
        return self._has_position_ == nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability.POSITION_3D

    def is_position3d_set(self) -> bool:
        return not self._position3d_ is None

    def reset_position3d(self) -> None:
        self._position3d_ = None

    def init_packing_context(self, zserio_context: AttributeReason.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        self._has_position_.init_packing_context(zserio_context.has_position)
        if self.is_position2d_used():
            self._position2d_.init_packing_context(zserio_context.position2d)
        if self.is_position3d_used():
            self._position3d_.init_packing_context(zserio_context.position3d)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._has_position_.bitsizeof(end_bitposition)
        if self.is_position2d_used():
            end_bitposition += self._position2d_.bitsizeof(end_bitposition)
        if self.is_position3d_used():
            end_bitposition += self._position3d_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AttributeReason.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._has_position_.bitsizeof_packed(zserio_context.has_position, end_bitposition)
        if self.is_position2d_used():
            end_bitposition += self._position2d_.bitsizeof_packed(zserio_context.position2d, end_bitposition)
        if self.is_position3d_used():
            end_bitposition += self._position3d_.bitsizeof_packed(zserio_context.position3d, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._has_position_.initialize_offsets(end_bitposition)
        if self.is_position2d_used():
            end_bitposition = self._position2d_.initialize_offsets(end_bitposition)
        if self.is_position3d_used():
            end_bitposition = self._position3d_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AttributeReason.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._has_position_.initialize_offsets_packed(zserio_context.has_position, end_bitposition)
        if self.is_position2d_used():
            end_bitposition = self._position2d_.initialize_offsets_packed(zserio_context.position2d, end_bitposition)
        if self.is_position3d_used():
            end_bitposition = self._position3d_.initialize_offsets_packed(zserio_context.position3d, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.core.properties.attribute_reason_type.AttributeReasonType.from_reader(zserio_reader)
        self._has_position_ = nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability.from_reader(zserio_reader)
        if self.is_position2d_used():
            self._position2d_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        else:
            self._position2d_ = None
        if self.is_position3d_used():
            self._position3d_ = nds.core.geometry.position3d.Position3D.from_reader(zserio_reader, 0, 0)
        else:
            self._position3d_ = None

    def read_packed(self, zserio_context: AttributeReason.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.core.properties.attribute_reason_type.AttributeReasonType.from_reader_packed(zserio_context.type, zserio_reader)

        self._has_position_ = nds.core.properties.attribute_reason_position_availability.AttributeReasonPositionAvailability.from_reader_packed(zserio_context.has_position, zserio_reader)

        if self.is_position2d_used():
            self._position2d_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.position2d, zserio_reader, 0)
        else:
            self._position2d_ = None

        if self.is_position3d_used():
            self._position3d_ = nds.core.geometry.position3d.Position3D.from_reader_packed(zserio_context.position3d, zserio_reader, 0, 0)
        else:
            self._position3d_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)

        self._has_position_.write(zserio_writer)

        if self.is_position2d_used():
            # check parameters
            if self._position2d_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field AttributeReason.position2D: "
                                                    f"{self._position2d_.shift} != {0}!")
            self._position2d_.write(zserio_writer)

        if self.is_position3d_used():
            # check parameters
            if self._position3d_.shift_xy != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field AttributeReason.position3D: "
                                                    f"{self._position3d_.shift_xy} != {0}!")
            if self._position3d_.shift_z != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field AttributeReason.position3D: "
                                                    f"{self._position3d_.shift_z} != {0}!")
            self._position3d_.write(zserio_writer)

    def write_packed(self, zserio_context: AttributeReason.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        self._has_position_.write_packed(zserio_context.has_position, zserio_writer)

        if self.is_position2d_used():
            # check parameters
            if self._position2d_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field AttributeReason.position2D: "
                                                    f"{self._position2d_.shift} != {0}!")
            self._position2d_.write_packed(zserio_context.position2d, zserio_writer)

        if self.is_position3d_used():
            # check parameters
            if self._position3d_.shift_xy != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field AttributeReason.position3D: "
                                                    f"{self._position3d_.shift_xy} != {0}!")
            if self._position3d_.shift_z != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field AttributeReason.position3D: "
                                                    f"{self._position3d_.shift_z} != {0}!")
            self._position3d_.write_packed(zserio_context.position3d, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._has_position_ = zserio.array.DeltaContext()
            self._position2d_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._position3d_ = nds.core.geometry.position3d.Position3D.ZserioPackingContext()

        @property
        def type(self):
            return self._type_

        @property
        def has_position(self):
            return self._has_position_

        @property
        def position2d(self):
            return self._position2d_

        @property
        def position3d(self):
            return self._position3d_
