# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TollPaymentMethodType(zserio.Enum):
    VARIABLE = 0
    CASH_COINS_AND_BILLS = 1
    CASH_BILLS_ONLY = 2
    CASH_COINS_ONLY = 3
    CASH_EXACT_CHANGE = 4
    CREDIT_CARD = 5
    DEBIT_CARD = 6
    TRAVEL_CARD = 7
    ETC = 8
    ETC_TRANSPONDER = 9
    ETC_VIDEO_CAMERA = 10
    SUBSCRIPTION = 11
    VIGNETTE = 12

    @classmethod
    def from_name(cls: typing.Type['TollPaymentMethodType'], item_name: str) -> 'TollPaymentMethodType':
        if item_name == 'VARIABLE':
            item = TollPaymentMethodType.VARIABLE
        elif item_name == 'CASH_COINS_AND_BILLS':
            item = TollPaymentMethodType.CASH_COINS_AND_BILLS
        elif item_name == 'CASH_BILLS_ONLY':
            item = TollPaymentMethodType.CASH_BILLS_ONLY
        elif item_name == 'CASH_COINS_ONLY':
            item = TollPaymentMethodType.CASH_COINS_ONLY
        elif item_name == 'CASH_EXACT_CHANGE':
            item = TollPaymentMethodType.CASH_EXACT_CHANGE
        elif item_name == 'CREDIT_CARD':
            item = TollPaymentMethodType.CREDIT_CARD
        elif item_name == 'DEBIT_CARD':
            item = TollPaymentMethodType.DEBIT_CARD
        elif item_name == 'TRAVEL_CARD':
            item = TollPaymentMethodType.TRAVEL_CARD
        elif item_name == 'ETC':
            item = TollPaymentMethodType.ETC
        elif item_name == 'ETC_TRANSPONDER':
            item = TollPaymentMethodType.ETC_TRANSPONDER
        elif item_name == 'ETC_VIDEO_CAMERA':
            item = TollPaymentMethodType.ETC_VIDEO_CAMERA
        elif item_name == 'SUBSCRIPTION':
            item = TollPaymentMethodType.SUBSCRIPTION
        elif item_name == 'VIGNETTE':
            item = TollPaymentMethodType.VIGNETTE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'TollPaymentMethodType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['TollPaymentMethodType'], reader: zserio.BitStreamReader) -> 'TollPaymentMethodType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['TollPaymentMethodType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'TollPaymentMethodType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
