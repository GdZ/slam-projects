# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_branch_id

import nds.core.location.no_branch

class RoadLocationId:
    def __init__(
            self,
            value_: typing.List[int] = None,
            branch_id_: nds.core.location.road_location_branch_id.RoadLocationBranchId = nds.core.location.no_branch.NO_BRANCH) -> None:
        self._value_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(8), value_)
        self._branch_id_ = branch_id_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadLocationId'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationId':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadLocationId'],
            zserio_context: RoadLocationId.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationId':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadLocationId):
            return ((self._value_ == other._value_) and
                    (self._branch_id_ == other._branch_id_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._value_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._branch_id_)

        return result

    @property
    def value(self) -> typing.List[int]:
        return self._value_.raw_array

    @value.setter
    def value(self, value_: typing.List[int]) -> None:
        self._value_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(8), value_)

    @property
    def branch_id(self) -> nds.core.location.road_location_branch_id.RoadLocationBranchId:
        return self._branch_id_

    @branch_id.setter
    def branch_id(self, branch_id_: nds.core.location.road_location_branch_id.RoadLocationBranchId) -> None:
        self._branch_id_ = branch_id_

    def init_packing_context(self, zserio_context: RoadLocationId.ZserioPackingContext) -> None:
        zserio_context.branch_id.init(zserio.array.BitFieldArrayTraits(8), self._branch_id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._value_.bitsizeof(end_bitposition)
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadLocationId.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._value_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.branch_id.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._branch_id_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._value_.initialize_offsets(end_bitposition)
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadLocationId.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._value_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.branch_id.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._branch_id_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._value_ = zserio.array.Array.from_reader(zserio.array.BitFieldArrayTraits(8), zserio_reader, 16)
        self._branch_id_ = zserio_reader.read_bits(8)

    def read_packed(self, zserio_context: RoadLocationId.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._value_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(8), zserio_reader, 16)

        self._branch_id_ = zserio_context.branch_id.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check array length
        if len(self._value_) != (16):
            raise zserio.PythonRuntimeException("Wrong array length for field RoadLocationId.value: "
                                                f"{len(self._value_)} != {16}!")
        self._value_.write(zserio_writer)

        zserio_writer.write_bits(self._branch_id_, 8)

    def write_packed(self, zserio_context: RoadLocationId.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check array length
        if len(self._value_) != (16):
            raise zserio.PythonRuntimeException("Wrong array length for field RoadLocationId.value: "
                                                f"{len(self._value_)} != {16}!")
        self._value_.write_packed(zserio_writer)

        zserio_context.branch_id.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._branch_id_)

    class ZserioPackingContext:
        def __init__(self):
            self._branch_id_ = zserio.array.DeltaContext()

        @property
        def branch_id(self):
            return self._branch_id_
