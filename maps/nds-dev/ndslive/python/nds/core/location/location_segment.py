# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.line2d
import nds.core.location.absolute_bearing
import nds.core.location.location_geometry
import nds.core.location.location_path_range
import nds.core.types.functional_road_class
import nds.core.types.length_meters
import nds.core.types.road_type

class LocationSegment:
    def __init__(
            self,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry,
            range_: typing.Union[nds.core.location.location_path_range.LocationPathRange, None] = None,
            absolute_bearing_start_: nds.core.location.absolute_bearing.AbsoluteBearing = nds.core.location.absolute_bearing.AbsoluteBearing(),
            absolute_bearing_end_: nds.core.location.absolute_bearing.AbsoluteBearing = nds.core.location.absolute_bearing.AbsoluteBearing(),
            length_: nds.core.types.length_meters.LengthMeters = nds.core.types.length_meters.LengthMeters(),
            frc_: typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass] = None,
            roadtypes_: typing.Optional[nds.core.types.road_type.RoadType] = None,
            road_name_: typing.Optional[str] = None,
            road_number_: typing.Optional[str] = None) -> None:
        self._path_geometry_ = path_geometry_
        self._range_ = range_
        self._absolute_bearing_start_ = absolute_bearing_start_
        self._absolute_bearing_end_ = absolute_bearing_end_
        self._length_ = length_
        self._frc_ = frc_
        self._roadtypes_ = roadtypes_
        self._road_name_ = road_name_
        self._road_number_ = road_number_

    @classmethod
    def from_reader(
            cls: typing.Type['LocationSegment'],
            zserio_reader: zserio.BitStreamReader,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry) -> 'LocationSegment':
        self = object.__new__(cls)
        self._path_geometry_ = path_geometry_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LocationSegment'],
            zserio_context: LocationSegment.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            path_geometry_: nds.core.location.location_geometry.LocationGeometry) -> 'LocationSegment':
        self = object.__new__(cls)
        self._path_geometry_ = path_geometry_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LocationSegment):
            return (self._path_geometry_ == other._path_geometry_ and
                    (self._range_ == other._range_) and
                    (self._absolute_bearing_start_ == other._absolute_bearing_start_) and
                    (self._absolute_bearing_end_ == other._absolute_bearing_end_) and
                    (self._length_ == other._length_) and
                    (not other.is_frc_used() if not self.is_frc_used() else (self._frc_ == other._frc_)) and
                    (not other.is_roadtypes_used() if not self.is_roadtypes_used() else (self._roadtypes_ == other._roadtypes_)) and
                    (not other.is_road_name_used() if not self.is_road_name_used() else (self._road_name_ == other._road_name_)) and
                    (not other.is_road_number_used() if not self.is_road_number_used() else (self._road_number_ == other._road_number_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._path_geometry_)
        result = zserio.hashcode.calc_hashcode_object(result, self._range_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._absolute_bearing_start_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._absolute_bearing_end_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        if self.is_frc_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._frc_)
        if self.is_roadtypes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._roadtypes_)
        if self.is_road_name_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._road_name_)
        if self.is_road_number_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._road_number_)

        return result

    @property
    def path_geometry(self) -> nds.core.location.location_geometry.LocationGeometry:
        return self._path_geometry_

    @property
    def range(self) -> typing.Union[nds.core.location.location_path_range.LocationPathRange, None]:
        return self._range_

    @range.setter
    def range(self, range_: typing.Union[nds.core.location.location_path_range.LocationPathRange, None]) -> None:
        self._range_ = range_

    @property
    def absolute_bearing_start(self) -> nds.core.location.absolute_bearing.AbsoluteBearing:
        return self._absolute_bearing_start_

    @absolute_bearing_start.setter
    def absolute_bearing_start(self, absolute_bearing_start_: nds.core.location.absolute_bearing.AbsoluteBearing) -> None:
        self._absolute_bearing_start_ = absolute_bearing_start_

    @property
    def absolute_bearing_end(self) -> nds.core.location.absolute_bearing.AbsoluteBearing:
        return self._absolute_bearing_end_

    @absolute_bearing_end.setter
    def absolute_bearing_end(self, absolute_bearing_end_: nds.core.location.absolute_bearing.AbsoluteBearing) -> None:
        self._absolute_bearing_end_ = absolute_bearing_end_

    @property
    def length(self) -> nds.core.types.length_meters.LengthMeters:
        return self._length_

    @length.setter
    def length(self, length_: nds.core.types.length_meters.LengthMeters) -> None:
        self._length_ = length_

    @property
    def frc(self) -> typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass]:
        return self._frc_

    @frc.setter
    def frc(self, frc_: typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass]) -> None:
        self._frc_ = frc_

    def is_frc_used(self) -> bool:
        return self.is_frc_set()

    def is_frc_set(self) -> bool:
        return not self._frc_ is None

    def reset_frc(self) -> None:
        self._frc_ = None

    @property
    def roadtypes(self) -> typing.Optional[nds.core.types.road_type.RoadType]:
        return self._roadtypes_

    @roadtypes.setter
    def roadtypes(self, roadtypes_: typing.Optional[nds.core.types.road_type.RoadType]) -> None:
        self._roadtypes_ = roadtypes_

    def is_roadtypes_used(self) -> bool:
        return self.is_roadtypes_set()

    def is_roadtypes_set(self) -> bool:
        return not self._roadtypes_ is None

    def reset_roadtypes(self) -> None:
        self._roadtypes_ = None

    @property
    def road_name(self) -> typing.Optional[str]:
        return self._road_name_

    @road_name.setter
    def road_name(self, road_name_: typing.Optional[str]) -> None:
        self._road_name_ = road_name_

    def is_road_name_used(self) -> bool:
        return self.is_road_name_set()

    def is_road_name_set(self) -> bool:
        return not self._road_name_ is None

    def reset_road_name(self) -> None:
        self._road_name_ = None

    @property
    def road_number(self) -> typing.Optional[str]:
        return self._road_number_

    @road_number.setter
    def road_number(self, road_number_: typing.Optional[str]) -> None:
        self._road_number_ = road_number_

    def is_road_number_used(self) -> bool:
        return self.is_road_number_set()

    def is_road_number_set(self) -> bool:
        return not self._road_number_ is None

    def reset_road_number(self) -> None:
        self._road_number_ = None

    def init_packing_context(self, zserio_context: LocationSegment.ZserioPackingContext) -> None:
        self._range_.init_packing_context(zserio_context.range)
        zserio_context.absolute_bearing_start.init(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_start_)
        zserio_context.absolute_bearing_end.init(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_end_)
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)
        if self.is_frc_used():
            zserio_context.frc.init(zserio.array.BitFieldArrayTraits(3), self._frc_)
        if self.is_roadtypes_used():
            self._roadtypes_.init_packing_context(zserio_context.roadtypes)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += 3
        end_bitposition += 1
        if self.is_roadtypes_used():
            end_bitposition += self._roadtypes_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_road_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_name_)
        end_bitposition += 1
        if self.is_road_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_number_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LocationSegment.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._range_.bitsizeof_packed(zserio_context.range, end_bitposition)
        end_bitposition += zserio_context.absolute_bearing_start.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_start_)
        end_bitposition += zserio_context.absolute_bearing_end.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_end_)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += zserio_context.frc.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._frc_)
        end_bitposition += 1
        if self.is_roadtypes_used():
            end_bitposition += self._roadtypes_.bitsizeof_packed(zserio_context.roadtypes, end_bitposition)
        end_bitposition += 1
        if self.is_road_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_name_)
        end_bitposition += 1
        if self.is_road_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_number_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += 3
        end_bitposition += 1
        if self.is_roadtypes_used():
            end_bitposition = self._roadtypes_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_road_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_name_)
        end_bitposition += 1
        if self.is_road_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_number_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LocationSegment.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._range_.initialize_offsets_packed(zserio_context.range, end_bitposition)
        end_bitposition += zserio_context.absolute_bearing_start.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_start_)
        end_bitposition += zserio_context.absolute_bearing_end.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._absolute_bearing_end_)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += zserio_context.frc.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._frc_)
        end_bitposition += 1
        if self.is_roadtypes_used():
            end_bitposition = self._roadtypes_.initialize_offsets_packed(zserio_context.roadtypes, end_bitposition)
        end_bitposition += 1
        if self.is_road_name_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_name_)
        end_bitposition += 1
        if self.is_road_number_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._road_number_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.core.location.location_path_range.LocationPathRange.from_reader(zserio_reader, self._path_geometry_.line)
        self._absolute_bearing_start_ = zserio_reader.read_bits(8)
        self._absolute_bearing_end_ = zserio_reader.read_bits(8)
        self._length_ = zserio_reader.read_varuint32()
        if zserio_reader.read_bool():
            self._frc_ = zserio_reader.read_bits(3)
        else:
            self._frc_ = None
        if zserio_reader.read_bool():
            self._roadtypes_ = nds.core.types.road_type.RoadType.from_reader(zserio_reader)
        else:
            self._roadtypes_ = None
        if zserio_reader.read_bool():
            self._road_name_ = zserio_reader.read_string()
        else:
            self._road_name_ = None
        if zserio_reader.read_bool():
            self._road_number_ = zserio_reader.read_string()
        else:
            self._road_number_ = None

    def read_packed(self, zserio_context: LocationSegment.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._range_ = nds.core.location.location_path_range.LocationPathRange.from_reader_packed(zserio_context.range, zserio_reader, self._path_geometry_.line)

        self._absolute_bearing_start_ = zserio_context.absolute_bearing_start.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._absolute_bearing_end_ = zserio_context.absolute_bearing_end.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._frc_ = zserio_context.frc.read(zserio.array.BitFieldArrayTraits(3), zserio_reader)
        else:
            self._frc_ = None

        if zserio_reader.read_bool():
            self._roadtypes_ = nds.core.types.road_type.RoadType.from_reader_packed(zserio_context.roadtypes, zserio_reader)
        else:
            self._roadtypes_ = None

        if zserio_reader.read_bool():
            self._road_name_ = zserio_reader.read_string()
        else:
            self._road_name_ = None

        if zserio_reader.read_bool():
            self._road_number_ = zserio_reader.read_string()
        else:
            self._road_number_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._range_.line is not (self._path_geometry_.line):
            raise zserio.PythonRuntimeException("Wrong parameter line for field LocationSegment.range: "
                                                f"{self._range_.line} != {self._path_geometry_.line}!")
        self._range_.write(zserio_writer)

        zserio_writer.write_bits(self._absolute_bearing_start_, 8)

        zserio_writer.write_bits(self._absolute_bearing_end_, 8)

        zserio_writer.write_varuint32(self._length_)

        if self.is_frc_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._frc_, 3)
        else:
            zserio_writer.write_bool(False)

        if self.is_roadtypes_used():
            zserio_writer.write_bool(True)
            self._roadtypes_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_road_name_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._road_name_)
        else:
            zserio_writer.write_bool(False)

        if self.is_road_number_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._road_number_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: LocationSegment.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._range_.line is not (self._path_geometry_.line):
            raise zserio.PythonRuntimeException("Wrong parameter line for field LocationSegment.range: "
                                                f"{self._range_.line} != {self._path_geometry_.line}!")
        self._range_.write_packed(zserio_context.range, zserio_writer)

        zserio_context.absolute_bearing_start.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._absolute_bearing_start_)

        zserio_context.absolute_bearing_end.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._absolute_bearing_end_)

        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        if self.is_frc_used():
            zserio_writer.write_bool(True)
            zserio_context.frc.write(zserio.array.BitFieldArrayTraits(3), zserio_writer, self._frc_)
        else:
            zserio_writer.write_bool(False)

        if self.is_roadtypes_used():
            zserio_writer.write_bool(True)
            self._roadtypes_.write_packed(zserio_context.roadtypes, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_road_name_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._road_name_)
        else:
            zserio_writer.write_bool(False)

        if self.is_road_number_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._road_number_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._range_ = nds.core.location.location_path_range.LocationPathRange.ZserioPackingContext()
            self._absolute_bearing_start_ = zserio.array.DeltaContext()
            self._absolute_bearing_end_ = zserio.array.DeltaContext()
            self._length_ = zserio.array.DeltaContext()
            self._frc_ = zserio.array.DeltaContext()
            self._roadtypes_ = nds.core.types.road_type.RoadType.ZserioPackingContext()

        @property
        def range(self):
            return self._range_

        @property
        def absolute_bearing_start(self):
            return self._absolute_bearing_start_

        @property
        def absolute_bearing_end(self):
            return self._absolute_bearing_end_

        @property
        def length(self):
            return self._length_

        @property
        def frc(self):
            return self._frc_

        @property
        def roadtypes(self):
            return self._roadtypes_
