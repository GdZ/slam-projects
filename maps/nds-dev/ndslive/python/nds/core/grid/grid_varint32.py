# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.elevation
import nds.core.geometry.position2d
import nds.core.grid.grid_cell_size
import nds.core.grid.num_grid_cells

class Grid_varint32:
    def __init__(
            self,
            size_: nds.core.grid.grid_cell_size.GridCellSize,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            south_west_corner_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            num_rows_: nds.core.grid.num_grid_cells.NumGridCells = nds.core.grid.num_grid_cells.NumGridCells(),
            num_columns_: nds.core.grid.num_grid_cells.NumGridCells = nds.core.grid.num_grid_cells.NumGridCells(),
            grid_: typing.List[nds.core.geometry.elevation.Elevation] = None) -> None:
        self._size_ = size_
        self._shift_ = shift_
        self._south_west_corner_ = south_west_corner_
        self._num_rows_ = num_rows_
        self._num_columns_ = num_columns_
        self._grid_ = zserio.array.Array(zserio.array.VarInt32ArrayTraits(), grid_)

    @classmethod
    def from_reader(
            cls: typing.Type['Grid_varint32'],
            zserio_reader: zserio.BitStreamReader,
            size_: nds.core.grid.grid_cell_size.GridCellSize,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Grid_varint32':
        self = object.__new__(cls)
        self._size_ = size_
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Grid_varint32'],
            zserio_context: Grid_varint32.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            size_: nds.core.grid.grid_cell_size.GridCellSize,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Grid_varint32':
        self = object.__new__(cls)
        self._size_ = size_
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Grid_varint32):
            return (self._size_ == other._size_ and
                    self._shift_ == other._shift_ and
                    (self._south_west_corner_ == other._south_west_corner_) and
                    (self._num_rows_ == other._num_rows_) and
                    (self._num_columns_ == other._num_columns_) and
                    (self._grid_ == other._grid_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._size_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._south_west_corner_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_rows_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_columns_)
        result = zserio.hashcode.calc_hashcode_object(result, self._grid_)

        return result

    @property
    def size(self) -> nds.core.grid.grid_cell_size.GridCellSize:
        return self._size_

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def south_west_corner(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._south_west_corner_

    @south_west_corner.setter
    def south_west_corner(self, south_west_corner_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._south_west_corner_ = south_west_corner_

    @property
    def num_rows(self) -> nds.core.grid.num_grid_cells.NumGridCells:
        return self._num_rows_

    @num_rows.setter
    def num_rows(self, num_rows_: nds.core.grid.num_grid_cells.NumGridCells) -> None:
        self._num_rows_ = num_rows_

    @property
    def num_columns(self) -> nds.core.grid.num_grid_cells.NumGridCells:
        return self._num_columns_

    @num_columns.setter
    def num_columns(self, num_columns_: nds.core.grid.num_grid_cells.NumGridCells) -> None:
        self._num_columns_ = num_columns_

    @property
    def grid(self) -> typing.List[nds.core.geometry.elevation.Elevation]:
        return self._grid_.raw_array

    @grid.setter
    def grid(self, grid_: typing.List[nds.core.geometry.elevation.Elevation]) -> None:
        self._grid_ = zserio.array.Array(zserio.array.VarInt32ArrayTraits(), grid_)

    def cell_size(self) -> nds.core.grid.grid_cell_size.GridCellSize:
        return self._size_

    def width(self) -> int:
        return self._num_columns_ * self._size_

    def height(self) -> int:
        return self._num_rows_ * self._size_

    def init_packing_context(self, zserio_context: Grid_varint32.ZserioPackingContext) -> None:
        self._south_west_corner_.init_packing_context(zserio_context.south_west_corner)
        zserio_context.num_rows.init(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        zserio_context.num_columns.init(zserio.array.VarSizeArrayTraits(), self._num_columns_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_corner_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_rows_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_columns_)
        end_bitposition += self._grid_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Grid_varint32.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_corner_.bitsizeof_packed(zserio_context.south_west_corner, end_bitposition)
        end_bitposition += zserio_context.num_rows.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        end_bitposition += zserio_context.num_columns.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_columns_)
        end_bitposition += self._grid_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_corner_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_rows_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_columns_)
        end_bitposition = self._grid_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Grid_varint32.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_corner_.initialize_offsets_packed(zserio_context.south_west_corner, end_bitposition)
        end_bitposition += zserio_context.num_rows.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        end_bitposition += zserio_context.num_columns.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_columns_)
        end_bitposition = self._grid_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_corner_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._shift_)
        self._num_rows_ = zserio_reader.read_varsize()
        self._num_columns_ = zserio_reader.read_varsize()
        self._grid_ = zserio.array.Array.from_reader_packed(zserio.array.VarInt32ArrayTraits(), zserio_reader, self._num_rows_ * self._num_columns_)

    def read_packed(self, zserio_context: Grid_varint32.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_corner_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.south_west_corner, zserio_reader, self._shift_)

        self._num_rows_ = zserio_context.num_rows.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_columns_ = zserio_context.num_columns.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._grid_ = zserio.array.Array.from_reader_packed(zserio.array.VarInt32ArrayTraits(), zserio_reader, self._num_rows_ * self._num_columns_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_corner_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Grid_varint32.southWestCorner: "
                                                f"{self._south_west_corner_.shift} != {self._shift_}!")
        self._south_west_corner_.write(zserio_writer)

        zserio_writer.write_varsize(self._num_rows_)

        zserio_writer.write_varsize(self._num_columns_)

        # check array length
        if len(self._grid_) != (self._num_rows_ * self._num_columns_):
            raise zserio.PythonRuntimeException("Wrong array length for field Grid_varint32.grid: "
                                                f"{len(self._grid_)} != {self._num_rows_ * self._num_columns_}!")
        self._grid_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: Grid_varint32.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_corner_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field Grid_varint32.southWestCorner: "
                                                f"{self._south_west_corner_.shift} != {self._shift_}!")
        self._south_west_corner_.write_packed(zserio_context.south_west_corner, zserio_writer)

        zserio_context.num_rows.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_rows_)

        zserio_context.num_columns.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_columns_)

        # check array length
        if len(self._grid_) != (self._num_rows_ * self._num_columns_):
            raise zserio.PythonRuntimeException("Wrong array length for field Grid_varint32.grid: "
                                                f"{len(self._grid_)} != {self._num_rows_ * self._num_columns_}!")
        self._grid_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._south_west_corner_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._num_rows_ = zserio.array.DeltaContext()
            self._num_columns_ = zserio.array.DeltaContext()

        @property
        def south_west_corner(self):
            return self._south_west_corner_

        @property
        def num_rows(self):
            return self._num_rows_

        @property
        def num_columns(self):
            return self._num_columns_
