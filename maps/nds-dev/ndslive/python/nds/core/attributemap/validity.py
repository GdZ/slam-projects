# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift

class Validity:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._shift_ = shift_

    @classmethod
    def from_reader(
            cls: typing.Type['Validity'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Validity':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Validity):
            return self._shift_ == other._shift_

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    def bitsizeof(self, bitposition: int = 0) -> int:
        del bitposition

        return 0

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_reader

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_writer
