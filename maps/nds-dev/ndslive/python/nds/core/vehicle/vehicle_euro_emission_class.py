# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class VehicleEuroEmissionClass:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['VehicleEuroEmissionClass'], value: int) -> 'VehicleEuroEmissionClass':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'VehicleEuroEmissionClass' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['VehicleEuroEmissionClass'], reader: zserio.BitStreamReader) -> 'VehicleEuroEmissionClass':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['VehicleEuroEmissionClass'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'VehicleEuroEmissionClass':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VehicleEuroEmissionClass):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & VehicleEuroEmissionClass.Values.EURO_1) == VehicleEuroEmissionClass.Values.EURO_1:
            result += "EURO_1" if not result else " | EURO_1"
        if (self & VehicleEuroEmissionClass.Values.EURO_2) == VehicleEuroEmissionClass.Values.EURO_2:
            result += "EURO_2" if not result else " | EURO_2"
        if (self & VehicleEuroEmissionClass.Values.EURO_3) == VehicleEuroEmissionClass.Values.EURO_3:
            result += "EURO_3" if not result else " | EURO_3"
        if (self & VehicleEuroEmissionClass.Values.EURO_4) == VehicleEuroEmissionClass.Values.EURO_4:
            result += "EURO_4" if not result else " | EURO_4"
        if (self & VehicleEuroEmissionClass.Values.EURO_5) == VehicleEuroEmissionClass.Values.EURO_5:
            result += "EURO_5" if not result else " | EURO_5"
        if (self & VehicleEuroEmissionClass.Values.EURO_5A) == VehicleEuroEmissionClass.Values.EURO_5A:
            result += "EURO_5A" if not result else " | EURO_5A"
        if (self & VehicleEuroEmissionClass.Values.EURO_5B) == VehicleEuroEmissionClass.Values.EURO_5B:
            result += "EURO_5B" if not result else " | EURO_5B"
        if (self & VehicleEuroEmissionClass.Values.EURO_6B) == VehicleEuroEmissionClass.Values.EURO_6B:
            result += "EURO_6B" if not result else " | EURO_6B"
        if (self & VehicleEuroEmissionClass.Values.EURO_6C) == VehicleEuroEmissionClass.Values.EURO_6C:
            result += "EURO_6C" if not result else " | EURO_6C"
        if (self & VehicleEuroEmissionClass.Values.EURO_6D_TEMP) == VehicleEuroEmissionClass.Values.EURO_6D_TEMP:
            result += "EURO_6D_TEMP" if not result else " | EURO_6D_TEMP"
        if (self & VehicleEuroEmissionClass.Values.EURO_6D) == VehicleEuroEmissionClass.Values.EURO_6D:
            result += "EURO_6D" if not result else " | EURO_6D"
        if (self & VehicleEuroEmissionClass.Values.EURO_7) == VehicleEuroEmissionClass.Values.EURO_7:
            result += "EURO_7" if not result else " | EURO_7"
        if (self & VehicleEuroEmissionClass.Values.EURO_0) == VehicleEuroEmissionClass.Values.EURO_0:
            result += "EURO_0" if not result else " | EURO_0"
        if (self & VehicleEuroEmissionClass.Values.EURO_I) == VehicleEuroEmissionClass.Values.EURO_I:
            result += "EURO_I" if not result else " | EURO_I"
        if (self & VehicleEuroEmissionClass.Values.EURO_II) == VehicleEuroEmissionClass.Values.EURO_II:
            result += "EURO_II" if not result else " | EURO_II"
        if (self & VehicleEuroEmissionClass.Values.EURO_III) == VehicleEuroEmissionClass.Values.EURO_III:
            result += "EURO_III" if not result else " | EURO_III"
        if (self & VehicleEuroEmissionClass.Values.EURO_IV) == VehicleEuroEmissionClass.Values.EURO_IV:
            result += "EURO_IV" if not result else " | EURO_IV"
        if (self & VehicleEuroEmissionClass.Values.EURO_V) == VehicleEuroEmissionClass.Values.EURO_V:
            result += "EURO_V" if not result else " | EURO_V"
        if (self & VehicleEuroEmissionClass.Values.EURO_VI) == VehicleEuroEmissionClass.Values.EURO_VI:
            result += "EURO_VI" if not result else " | EURO_VI"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'VehicleEuroEmissionClass') -> 'VehicleEuroEmissionClass':
        return VehicleEuroEmissionClass.from_value(self._value | other._value)

    def __and__(self, other: 'VehicleEuroEmissionClass') -> 'VehicleEuroEmissionClass':
        return VehicleEuroEmissionClass.from_value(self._value & other._value)

    def __xor__(self, other: 'VehicleEuroEmissionClass') -> 'VehicleEuroEmissionClass':
        return VehicleEuroEmissionClass.from_value(self._value ^ other._value)

    def __invert__(self) -> 'VehicleEuroEmissionClass':
        return VehicleEuroEmissionClass.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        EURO_1: 'VehicleEuroEmissionClass' = None
        EURO_2: 'VehicleEuroEmissionClass' = None
        EURO_3: 'VehicleEuroEmissionClass' = None
        EURO_4: 'VehicleEuroEmissionClass' = None
        EURO_5: 'VehicleEuroEmissionClass' = None
        EURO_5A: 'VehicleEuroEmissionClass' = None
        EURO_5B: 'VehicleEuroEmissionClass' = None
        EURO_6B: 'VehicleEuroEmissionClass' = None
        EURO_6C: 'VehicleEuroEmissionClass' = None
        EURO_6D_TEMP: 'VehicleEuroEmissionClass' = None
        EURO_6D: 'VehicleEuroEmissionClass' = None
        EURO_7: 'VehicleEuroEmissionClass' = None
        EURO_0: 'VehicleEuroEmissionClass' = None
        EURO_I: 'VehicleEuroEmissionClass' = None
        EURO_II: 'VehicleEuroEmissionClass' = None
        EURO_III: 'VehicleEuroEmissionClass' = None
        EURO_IV: 'VehicleEuroEmissionClass' = None
        EURO_V: 'VehicleEuroEmissionClass' = None
        EURO_VI: 'VehicleEuroEmissionClass' = None

VehicleEuroEmissionClass.Values.EURO_1 = VehicleEuroEmissionClass.from_value(1)
VehicleEuroEmissionClass.Values.EURO_2 = VehicleEuroEmissionClass.from_value(2)
VehicleEuroEmissionClass.Values.EURO_3 = VehicleEuroEmissionClass.from_value(4)
VehicleEuroEmissionClass.Values.EURO_4 = VehicleEuroEmissionClass.from_value(8)
VehicleEuroEmissionClass.Values.EURO_5 = VehicleEuroEmissionClass.from_value(16)
VehicleEuroEmissionClass.Values.EURO_5A = VehicleEuroEmissionClass.from_value(32)
VehicleEuroEmissionClass.Values.EURO_5B = VehicleEuroEmissionClass.from_value(64)
VehicleEuroEmissionClass.Values.EURO_6B = VehicleEuroEmissionClass.from_value(128)
VehicleEuroEmissionClass.Values.EURO_6C = VehicleEuroEmissionClass.from_value(256)
VehicleEuroEmissionClass.Values.EURO_6D_TEMP = VehicleEuroEmissionClass.from_value(512)
VehicleEuroEmissionClass.Values.EURO_6D = VehicleEuroEmissionClass.from_value(1024)
VehicleEuroEmissionClass.Values.EURO_7 = VehicleEuroEmissionClass.from_value(2048)
VehicleEuroEmissionClass.Values.EURO_0 = VehicleEuroEmissionClass.from_value(4096)
VehicleEuroEmissionClass.Values.EURO_I = VehicleEuroEmissionClass.from_value(8192)
VehicleEuroEmissionClass.Values.EURO_II = VehicleEuroEmissionClass.from_value(16384)
VehicleEuroEmissionClass.Values.EURO_III = VehicleEuroEmissionClass.from_value(32768)
VehicleEuroEmissionClass.Values.EURO_IV = VehicleEuroEmissionClass.from_value(65536)
VehicleEuroEmissionClass.Values.EURO_V = VehicleEuroEmissionClass.from_value(131072)
VehicleEuroEmissionClass.Values.EURO_VI = VehicleEuroEmissionClass.from_value(262144)
