# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.pose_geo_matched
import nds.core.vehicle.pose_raw

class VehiclePose:
    def __init__(
            self,
            *,
            pose_raw_: typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None] = None,
            pose_geo_matched_: typing.Union[nds.core.vehicle.pose_geo_matched.PoseGeoMatched, None] = None) -> None:
        self._choice_tag: int = self.UNDEFINED_CHOICE
        self._choice: typing.Any = None
        if pose_raw_ is not None:
            self._choice_tag = self.CHOICE_POSE_RAW
            self._choice = pose_raw_
        if pose_geo_matched_ is not None:
            if self._choice_tag != self.UNDEFINED_CHOICE:
                raise zserio.PythonRuntimeException("Calling constructor of union VehiclePose is ambiguous!")
            self._choice_tag = self.CHOICE_POSE_GEO_MATCHED
            self._choice = pose_geo_matched_

    @classmethod
    def from_reader(
            cls: typing.Type['VehiclePose'],
            zserio_reader: zserio.BitStreamReader) -> 'VehiclePose':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['VehiclePose'],
            zserio_context: VehiclePose.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'VehiclePose':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VehiclePose):
            return (self._choice_tag == other._choice_tag and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._choice_tag)
        if self._choice_tag == self.CHOICE_POSE_RAW:
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def pose_raw(self) -> typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None]:
        return self._choice

    @pose_raw.setter
    def pose_raw(self, pose_raw_: typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None]) -> None:
        self._choice_tag = self.CHOICE_POSE_RAW
        self._choice = pose_raw_

    @property
    def pose_geo_matched(self) -> typing.Union[nds.core.vehicle.pose_geo_matched.PoseGeoMatched, None]:
        return self._choice

    @pose_geo_matched.setter
    def pose_geo_matched(self, pose_geo_matched_: typing.Union[nds.core.vehicle.pose_geo_matched.PoseGeoMatched, None]) -> None:
        self._choice_tag = self.CHOICE_POSE_GEO_MATCHED
        self._choice = pose_geo_matched_

    @property
    def choice_tag(self) -> int:
        return self._choice_tag

    def init_packing_context(self, zserio_context: VehiclePose.ZserioPackingContext) -> None:
        zserio_context.choice_tag.init(zserio.array.VarSizeArrayTraits(),
                                       self._choice_tag)
        if self._choice_tag == self.CHOICE_POSE_RAW:
            self._choice.init_packing_context(zserio_context.pose_raw)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            self._choice.init_packing_context(zserio_context.pose_geo_matched)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: VehiclePose.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio_context.choice_tag.bitsizeof(zserio.array.VarSizeArrayTraits(),
                                                               self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.pose_raw, end_bitposition)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.pose_geo_matched, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: VehiclePose.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio_context.choice_tag.bitsizeof(zserio.array.VarSizeArrayTraits(),
                                                               self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.pose_raw, end_bitposition)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.pose_geo_matched, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._choice_tag = zserio_reader.read_varsize()

        if self._choice_tag == self.CHOICE_POSE_RAW:
            self._choice = nds.core.vehicle.pose_raw.PoseRaw.from_reader(zserio_reader)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            self._choice = nds.core.vehicle.pose_geo_matched.PoseGeoMatched.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

    def read_packed(self, zserio_context: VehiclePose.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        self._choice_tag = zserio_context.choice_tag.read(zserio.array.VarSizeArrayTraits(),
                                                          zserio_reader)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            self._choice = nds.core.vehicle.pose_raw.PoseRaw.from_reader_packed(zserio_context.pose_raw, zserio_reader)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            self._choice = nds.core.vehicle.pose_geo_matched.PoseGeoMatched.from_reader_packed(zserio_context.pose_geo_matched, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            self._choice.write(zserio_writer)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

    def write_packed(self, zserio_context: VehiclePose.ZserioPackingContext,
                    zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.choice_tag.write(zserio.array.VarSizeArrayTraits(),
                                        zserio_writer, self._choice_tag)

        if self._choice_tag == self.CHOICE_POSE_RAW:
            self._choice.write_packed(zserio_context.pose_raw, zserio_writer)
        elif self._choice_tag == self.CHOICE_POSE_GEO_MATCHED:
            self._choice.write_packed(zserio_context.pose_geo_matched, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in union VehiclePose!")

    class ZserioPackingContext:
        def __init__(self):
            self._choice_tag = zserio.array.DeltaContext()
            self._pose_raw_ = nds.core.vehicle.pose_raw.PoseRaw.ZserioPackingContext()
            self._pose_geo_matched_ = nds.core.vehicle.pose_geo_matched.PoseGeoMatched.ZserioPackingContext()

        @property
        def choice_tag(self):
            return self._choice_tag

        @property
        def pose_raw(self):
            return self._pose_raw_

        @property
        def pose_geo_matched(self):
            return self._pose_geo_matched_

    CHOICE_POSE_RAW = 0
    CHOICE_POSE_GEO_MATCHED = 1
    UNDEFINED_CHOICE = -1
