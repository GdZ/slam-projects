# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.consumption_efficiency
import nds.core.vehicle.electric_consumption_curve
import nds.core.vehicle.watt
import nds.core.vehicle.watt_hrs
import nds.core.vehicle.watt_hrs_per_km

class ElectricConsumption:
    def __init__(
            self,
            max_charge_: nds.core.vehicle.watt_hrs.WattHrs = nds.core.vehicle.watt_hrs.WattHrs(),
            current_charge_: nds.core.vehicle.watt_hrs.WattHrs = nds.core.vehicle.watt_hrs.WattHrs(),
            aux_consumption_: typing.Optional[nds.core.vehicle.watt.Watt] = None,
            normal_consumption_: typing.Union[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve, None] = None,
            traffic_consumption_: typing.Optional[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve] = None,
            efficiency_: typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency] = None,
            consumption_elevation_gain_: typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm] = None,
            recuperation_elevation_loss_: typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm] = None) -> None:
        self._max_charge_ = max_charge_
        self._current_charge_ = current_charge_
        self._aux_consumption_ = aux_consumption_
        self._normal_consumption_ = normal_consumption_
        self._traffic_consumption_ = traffic_consumption_
        self._efficiency_ = efficiency_
        self._consumption_elevation_gain_ = consumption_elevation_gain_
        self._recuperation_elevation_loss_ = recuperation_elevation_loss_

    @classmethod
    def from_reader(
            cls: typing.Type['ElectricConsumption'],
            zserio_reader: zserio.BitStreamReader) -> 'ElectricConsumption':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ElectricConsumption'],
            zserio_context: ElectricConsumption.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ElectricConsumption':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElectricConsumption):
            return ((self._max_charge_ == other._max_charge_) and
                    (self._current_charge_ == other._current_charge_) and
                    (not other.is_aux_consumption_used() if not self.is_aux_consumption_used() else (self._aux_consumption_ == other._aux_consumption_)) and
                    (self._normal_consumption_ == other._normal_consumption_) and
                    (not other.is_traffic_consumption_used() if not self.is_traffic_consumption_used() else (self._traffic_consumption_ == other._traffic_consumption_)) and
                    (not other.is_efficiency_used() if not self.is_efficiency_used() else (self._efficiency_ == other._efficiency_)) and
                    (not other.is_consumption_elevation_gain_used() if not self.is_consumption_elevation_gain_used() else (self._consumption_elevation_gain_ == other._consumption_elevation_gain_)) and
                    (not other.is_recuperation_elevation_loss_used() if not self.is_recuperation_elevation_loss_used() else (self._recuperation_elevation_loss_ == other._recuperation_elevation_loss_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_charge_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._current_charge_)
        if self.is_aux_consumption_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._aux_consumption_)
        result = zserio.hashcode.calc_hashcode_object(result, self._normal_consumption_)
        if self.is_traffic_consumption_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._traffic_consumption_)
        if self.is_efficiency_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._efficiency_)
        if self.is_consumption_elevation_gain_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._consumption_elevation_gain_)
        if self.is_recuperation_elevation_loss_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._recuperation_elevation_loss_)

        return result

    @property
    def max_charge(self) -> nds.core.vehicle.watt_hrs.WattHrs:
        return self._max_charge_

    @max_charge.setter
    def max_charge(self, max_charge_: nds.core.vehicle.watt_hrs.WattHrs) -> None:
        self._max_charge_ = max_charge_

    @property
    def current_charge(self) -> nds.core.vehicle.watt_hrs.WattHrs:
        return self._current_charge_

    @current_charge.setter
    def current_charge(self, current_charge_: nds.core.vehicle.watt_hrs.WattHrs) -> None:
        self._current_charge_ = current_charge_

    @property
    def aux_consumption(self) -> typing.Optional[nds.core.vehicle.watt.Watt]:
        return self._aux_consumption_

    @aux_consumption.setter
    def aux_consumption(self, aux_consumption_: typing.Optional[nds.core.vehicle.watt.Watt]) -> None:
        self._aux_consumption_ = aux_consumption_

    def is_aux_consumption_used(self) -> bool:
        return self.is_aux_consumption_set()

    def is_aux_consumption_set(self) -> bool:
        return not self._aux_consumption_ is None

    def reset_aux_consumption(self) -> None:
        self._aux_consumption_ = None

    @property
    def normal_consumption(self) -> typing.Union[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve, None]:
        return self._normal_consumption_

    @normal_consumption.setter
    def normal_consumption(self, normal_consumption_: typing.Union[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve, None]) -> None:
        self._normal_consumption_ = normal_consumption_

    @property
    def traffic_consumption(self) -> typing.Optional[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve]:
        return self._traffic_consumption_

    @traffic_consumption.setter
    def traffic_consumption(self, traffic_consumption_: typing.Optional[nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve]) -> None:
        self._traffic_consumption_ = traffic_consumption_

    def is_traffic_consumption_used(self) -> bool:
        return self.is_traffic_consumption_set()

    def is_traffic_consumption_set(self) -> bool:
        return not self._traffic_consumption_ is None

    def reset_traffic_consumption(self) -> None:
        self._traffic_consumption_ = None

    @property
    def efficiency(self) -> typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency]:
        return self._efficiency_

    @efficiency.setter
    def efficiency(self, efficiency_: typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency]) -> None:
        self._efficiency_ = efficiency_

    def is_efficiency_used(self) -> bool:
        return self.is_efficiency_set()

    def is_efficiency_set(self) -> bool:
        return not self._efficiency_ is None

    def reset_efficiency(self) -> None:
        self._efficiency_ = None

    @property
    def consumption_elevation_gain(self) -> typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm]:
        return self._consumption_elevation_gain_

    @consumption_elevation_gain.setter
    def consumption_elevation_gain(self, consumption_elevation_gain_: typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm]) -> None:
        self._consumption_elevation_gain_ = consumption_elevation_gain_

    def is_consumption_elevation_gain_used(self) -> bool:
        return self.is_consumption_elevation_gain_set()

    def is_consumption_elevation_gain_set(self) -> bool:
        return not self._consumption_elevation_gain_ is None

    def reset_consumption_elevation_gain(self) -> None:
        self._consumption_elevation_gain_ = None

    @property
    def recuperation_elevation_loss(self) -> typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm]:
        return self._recuperation_elevation_loss_

    @recuperation_elevation_loss.setter
    def recuperation_elevation_loss(self, recuperation_elevation_loss_: typing.Optional[nds.core.vehicle.watt_hrs_per_km.WattHrsPerKm]) -> None:
        self._recuperation_elevation_loss_ = recuperation_elevation_loss_

    def is_recuperation_elevation_loss_used(self) -> bool:
        return self.is_recuperation_elevation_loss_set()

    def is_recuperation_elevation_loss_set(self) -> bool:
        return not self._recuperation_elevation_loss_ is None

    def reset_recuperation_elevation_loss(self) -> None:
        self._recuperation_elevation_loss_ = None

    def init_packing_context(self, zserio_context: ElectricConsumption.ZserioPackingContext) -> None:
        zserio_context.max_charge.init(zserio.array.VarUInt32ArrayTraits(), self._max_charge_)
        zserio_context.current_charge.init(zserio.array.VarUInt32ArrayTraits(), self._current_charge_)
        if self.is_aux_consumption_used():
            zserio_context.aux_consumption.init(zserio.array.VarUInt32ArrayTraits(), self._aux_consumption_)
        self._normal_consumption_.init_packing_context(zserio_context.normal_consumption)
        if self.is_traffic_consumption_used():
            self._traffic_consumption_.init_packing_context(zserio_context.traffic_consumption)
        if self.is_efficiency_used():
            self._efficiency_.init_packing_context(zserio_context.efficiency)
        if self.is_consumption_elevation_gain_used():
            zserio_context.consumption_elevation_gain.init(zserio.array.VarUInt32ArrayTraits(), self._consumption_elevation_gain_)
        if self.is_recuperation_elevation_loss_used():
            zserio_context.recuperation_elevation_loss.init(zserio.array.VarUInt32ArrayTraits(), self._recuperation_elevation_loss_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_charge_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._current_charge_)
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._aux_consumption_)
        end_bitposition += self._normal_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition += self._traffic_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition += self._efficiency_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_consumption_elevation_gain_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._consumption_elevation_gain_)
        end_bitposition += 1
        if self.is_recuperation_elevation_loss_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._recuperation_elevation_loss_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ElectricConsumption.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.max_charge.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_charge_)
        end_bitposition += zserio_context.current_charge.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._current_charge_)
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += zserio_context.aux_consumption.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._aux_consumption_)
        end_bitposition += self._normal_consumption_.bitsizeof_packed(zserio_context.normal_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition += self._traffic_consumption_.bitsizeof_packed(zserio_context.traffic_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition += self._efficiency_.bitsizeof_packed(zserio_context.efficiency, end_bitposition)
        end_bitposition += 1
        if self.is_consumption_elevation_gain_used():
            end_bitposition += zserio_context.consumption_elevation_gain.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._consumption_elevation_gain_)
        end_bitposition += 1
        if self.is_recuperation_elevation_loss_used():
            end_bitposition += zserio_context.recuperation_elevation_loss.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._recuperation_elevation_loss_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_charge_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._current_charge_)
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._aux_consumption_)
        end_bitposition = self._normal_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition = self._traffic_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition = self._efficiency_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_consumption_elevation_gain_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._consumption_elevation_gain_)
        end_bitposition += 1
        if self.is_recuperation_elevation_loss_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._recuperation_elevation_loss_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ElectricConsumption.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.max_charge.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_charge_)
        end_bitposition += zserio_context.current_charge.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._current_charge_)
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += zserio_context.aux_consumption.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._aux_consumption_)
        end_bitposition = self._normal_consumption_.initialize_offsets_packed(zserio_context.normal_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition = self._traffic_consumption_.initialize_offsets_packed(zserio_context.traffic_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition = self._efficiency_.initialize_offsets_packed(zserio_context.efficiency, end_bitposition)
        end_bitposition += 1
        if self.is_consumption_elevation_gain_used():
            end_bitposition += zserio_context.consumption_elevation_gain.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._consumption_elevation_gain_)
        end_bitposition += 1
        if self.is_recuperation_elevation_loss_used():
            end_bitposition += zserio_context.recuperation_elevation_loss.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._recuperation_elevation_loss_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._max_charge_ = zserio_reader.read_varuint32()

        self._current_charge_ = zserio_reader.read_varuint32()
        # check constraint
        if not (self._current_charge_ <= self._max_charge_):
            raise zserio.PythonRuntimeException("Constraint violated for field ElectricConsumption.currentCharge!")

        if zserio_reader.read_bool():
            self._aux_consumption_ = zserio_reader.read_varuint32()
        else:
            self._aux_consumption_ = None

        self._normal_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.from_reader(zserio_reader)

        if zserio_reader.read_bool():
            self._traffic_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.from_reader(zserio_reader)
        else:
            self._traffic_consumption_ = None

        if zserio_reader.read_bool():
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.from_reader(zserio_reader)
        else:
            self._efficiency_ = None

        if zserio_reader.read_bool():
            self._consumption_elevation_gain_ = zserio_reader.read_varuint32()
        else:
            self._consumption_elevation_gain_ = None

        if zserio_reader.read_bool():
            self._recuperation_elevation_loss_ = zserio_reader.read_varuint32()
        else:
            self._recuperation_elevation_loss_ = None

    def read_packed(self, zserio_context: ElectricConsumption.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._max_charge_ = zserio_context.max_charge.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._current_charge_ = zserio_context.current_charge.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        # check constraint
        if not (self._current_charge_ <= self._max_charge_):
            raise zserio.PythonRuntimeException("Constraint violated for field ElectricConsumption.currentCharge!")

        if zserio_reader.read_bool():
            self._aux_consumption_ = zserio_context.aux_consumption.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._aux_consumption_ = None

        self._normal_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.from_reader_packed(zserio_context.normal_consumption, zserio_reader)

        if zserio_reader.read_bool():
            self._traffic_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.from_reader_packed(zserio_context.traffic_consumption, zserio_reader)
        else:
            self._traffic_consumption_ = None

        if zserio_reader.read_bool():
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.from_reader_packed(zserio_context.efficiency, zserio_reader)
        else:
            self._efficiency_ = None

        if zserio_reader.read_bool():
            self._consumption_elevation_gain_ = zserio_context.consumption_elevation_gain.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._consumption_elevation_gain_ = None

        if zserio_reader.read_bool():
            self._recuperation_elevation_loss_ = zserio_context.recuperation_elevation_loss.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._recuperation_elevation_loss_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._max_charge_)

        # check constraint
        if not (self._current_charge_ <= self._max_charge_):
            raise zserio.PythonRuntimeException("Constraint violated for field ElectricConsumption.currentCharge!")
        zserio_writer.write_varuint32(self._current_charge_)

        if self.is_aux_consumption_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._aux_consumption_)
        else:
            zserio_writer.write_bool(False)

        self._normal_consumption_.write(zserio_writer)

        if self.is_traffic_consumption_used():
            zserio_writer.write_bool(True)
            self._traffic_consumption_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_efficiency_used():
            zserio_writer.write_bool(True)
            self._efficiency_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_consumption_elevation_gain_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._consumption_elevation_gain_)
        else:
            zserio_writer.write_bool(False)

        if self.is_recuperation_elevation_loss_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._recuperation_elevation_loss_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: ElectricConsumption.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.max_charge.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._max_charge_)

        # check constraint
        if not (self._current_charge_ <= self._max_charge_):
            raise zserio.PythonRuntimeException("Constraint violated for field ElectricConsumption.currentCharge!")
        zserio_context.current_charge.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._current_charge_)

        if self.is_aux_consumption_used():
            zserio_writer.write_bool(True)
            zserio_context.aux_consumption.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._aux_consumption_)
        else:
            zserio_writer.write_bool(False)

        self._normal_consumption_.write_packed(zserio_context.normal_consumption, zserio_writer)

        if self.is_traffic_consumption_used():
            zserio_writer.write_bool(True)
            self._traffic_consumption_.write_packed(zserio_context.traffic_consumption, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_efficiency_used():
            zserio_writer.write_bool(True)
            self._efficiency_.write_packed(zserio_context.efficiency, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_consumption_elevation_gain_used():
            zserio_writer.write_bool(True)
            zserio_context.consumption_elevation_gain.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._consumption_elevation_gain_)
        else:
            zserio_writer.write_bool(False)

        if self.is_recuperation_elevation_loss_used():
            zserio_writer.write_bool(True)
            zserio_context.recuperation_elevation_loss.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._recuperation_elevation_loss_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._max_charge_ = zserio.array.DeltaContext()
            self._current_charge_ = zserio.array.DeltaContext()
            self._aux_consumption_ = zserio.array.DeltaContext()
            self._normal_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.ZserioPackingContext()
            self._traffic_consumption_ = nds.core.vehicle.electric_consumption_curve.ElectricConsumptionCurve.ZserioPackingContext()
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.ZserioPackingContext()
            self._consumption_elevation_gain_ = zserio.array.DeltaContext()
            self._recuperation_elevation_loss_ = zserio.array.DeltaContext()

        @property
        def max_charge(self):
            return self._max_charge_

        @property
        def current_charge(self):
            return self._current_charge_

        @property
        def aux_consumption(self):
            return self._aux_consumption_

        @property
        def normal_consumption(self):
            return self._normal_consumption_

        @property
        def traffic_consumption(self):
            return self._traffic_consumption_

        @property
        def efficiency(self):
            return self._efficiency_

        @property
        def consumption_elevation_gain(self):
            return self._consumption_elevation_gain_

        @property
        def recuperation_elevation_loss(self):
            return self._recuperation_elevation_loss_
