# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class EnergyType:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['EnergyType'], value: int) -> 'EnergyType':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'EnergyType' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['EnergyType'], reader: zserio.BitStreamReader) -> 'EnergyType':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['EnergyType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'EnergyType':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, EnergyType):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & EnergyType.Values.BIO_DIESEL) == EnergyType.Values.BIO_DIESEL:
            result += "BIO_DIESEL" if not result else " | BIO_DIESEL"
        if (self & EnergyType.Values.CNG) == EnergyType.Values.CNG:
            result += "CNG" if not result else " | CNG"
        if (self & EnergyType.Values.DIESEL) == EnergyType.Values.DIESEL:
            result += "DIESEL" if not result else " | DIESEL"
        if (self & EnergyType.Values.DIESEL_COMMERCIAL) == EnergyType.Values.DIESEL_COMMERCIAL:
            result += "DIESEL_COMMERCIAL" if not result else " | DIESEL_COMMERCIAL"
        if (self & EnergyType.Values.E85) == EnergyType.Values.E85:
            result += "E85" if not result else " | E85"
        if (self & EnergyType.Values.ETHANOL) == EnergyType.Values.ETHANOL:
            result += "ETHANOL" if not result else " | ETHANOL"
        if (self & EnergyType.Values.GASOLINE) == EnergyType.Values.GASOLINE:
            result += "GASOLINE" if not result else " | GASOLINE"
        if (self & EnergyType.Values.HYDROGEN) == EnergyType.Values.HYDROGEN:
            result += "HYDROGEN" if not result else " | HYDROGEN"
        if (self & EnergyType.Values.LPG) == EnergyType.Values.LPG:
            result += "LPG" if not result else " | LPG"
        if (self & EnergyType.Values.ELECTRICITY) == EnergyType.Values.ELECTRICITY:
            result += "ELECTRICITY" if not result else " | ELECTRICITY"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'EnergyType') -> 'EnergyType':
        return EnergyType.from_value(self._value | other._value)

    def __and__(self, other: 'EnergyType') -> 'EnergyType':
        return EnergyType.from_value(self._value & other._value)

    def __xor__(self, other: 'EnergyType') -> 'EnergyType':
        return EnergyType.from_value(self._value ^ other._value)

    def __invert__(self) -> 'EnergyType':
        return EnergyType.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        BIO_DIESEL: 'EnergyType' = None
        CNG: 'EnergyType' = None
        DIESEL: 'EnergyType' = None
        DIESEL_COMMERCIAL: 'EnergyType' = None
        E85: 'EnergyType' = None
        ETHANOL: 'EnergyType' = None
        GASOLINE: 'EnergyType' = None
        HYDROGEN: 'EnergyType' = None
        LPG: 'EnergyType' = None
        ELECTRICITY: 'EnergyType' = None

EnergyType.Values.BIO_DIESEL = EnergyType.from_value(1)
EnergyType.Values.CNG = EnergyType.from_value(2)
EnergyType.Values.DIESEL = EnergyType.from_value(4)
EnergyType.Values.DIESEL_COMMERCIAL = EnergyType.from_value(8)
EnergyType.Values.E85 = EnergyType.from_value(16)
EnergyType.Values.ETHANOL = EnergyType.from_value(32)
EnergyType.Values.GASOLINE = EnergyType.from_value(64)
EnergyType.Values.HYDROGEN = EnergyType.from_value(128)
EnergyType.Values.LPG = EnergyType.from_value(256)
EnergyType.Values.ELECTRICITY = EnergyType.from_value(512)
