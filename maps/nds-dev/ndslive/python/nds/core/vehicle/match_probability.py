# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class MatchProbability:
    def __init__(
            self,
            percent_: int = int(),
            deviation_: int = int()) -> None:
        self._percent_ = percent_
        self._deviation_ = deviation_

    @classmethod
    def from_reader(
            cls: typing.Type['MatchProbability'],
            zserio_reader: zserio.BitStreamReader) -> 'MatchProbability':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MatchProbability'],
            zserio_context: MatchProbability.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MatchProbability':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MatchProbability):
            return ((self._percent_ == other._percent_) and
                    (self._deviation_ == other._deviation_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._percent_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._deviation_)

        return result

    @property
    def percent(self) -> int:
        return self._percent_

    @percent.setter
    def percent(self, percent_: int) -> None:
        self._percent_ = percent_

    @property
    def deviation(self) -> int:
        return self._deviation_

    @deviation.setter
    def deviation(self, deviation_: int) -> None:
        self._deviation_ = deviation_

    def init_packing_context(self, zserio_context: MatchProbability.ZserioPackingContext) -> None:
        zserio_context.percent.init(zserio.array.BitFieldArrayTraits(8), self._percent_)
        zserio_context.deviation.init(zserio.array.VarUInt32ArrayTraits(), self._deviation_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._deviation_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MatchProbability.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.percent.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._percent_)
        end_bitposition += zserio_context.deviation.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._deviation_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._deviation_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MatchProbability.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.percent.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._percent_)
        end_bitposition += zserio_context.deviation.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._deviation_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._percent_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._percent_ <= 200):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchProbability.percent!")

        self._deviation_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: MatchProbability.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._percent_ = zserio_context.percent.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._percent_ <= 200):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchProbability.percent!")

        self._deviation_ = zserio_context.deviation.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._percent_ <= 200):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchProbability.percent!")
        zserio_writer.write_bits(self._percent_, 8)

        zserio_writer.write_varuint32(self._deviation_)

    def write_packed(self, zserio_context: MatchProbability.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._percent_ <= 200):
            raise zserio.PythonRuntimeException("Constraint violated for field MatchProbability.percent!")
        zserio_context.percent.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._percent_)

        zserio_context.deviation.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._deviation_)

    class ZserioPackingContext:
        def __init__(self):
            self._percent_ = zserio.array.DeltaContext()
            self._deviation_ = zserio.array.DeltaContext()

        @property
        def percent(self):
            return self._percent_

        @property
        def deviation(self):
            return self._deviation_
