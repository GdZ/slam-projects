# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.speed_kmh
import nds.core.vehicle.watt_hrs_per100km

class ElectricConsumptionCurve:
    def __init__(
            self,
            num_entries_: int = int(),
            speed_: typing.List[nds.core.types.speed_kmh.SpeedKmh] = None,
            consumption_: typing.List[nds.core.vehicle.watt_hrs_per100km.WattHrsPer100km] = None) -> None:
        self._num_entries_ = num_entries_
        self._speed_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(8), speed_)
        self._consumption_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), consumption_)

    @classmethod
    def from_reader(
            cls: typing.Type['ElectricConsumptionCurve'],
            zserio_reader: zserio.BitStreamReader) -> 'ElectricConsumptionCurve':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ElectricConsumptionCurve'],
            zserio_context: ElectricConsumptionCurve.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ElectricConsumptionCurve':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ElectricConsumptionCurve):
            return ((self._num_entries_ == other._num_entries_) and
                    (self._speed_ == other._speed_) and
                    (self._consumption_ == other._consumption_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_entries_)
        result = zserio.hashcode.calc_hashcode_object(result, self._speed_)
        result = zserio.hashcode.calc_hashcode_object(result, self._consumption_)

        return result

    @property
    def num_entries(self) -> int:
        return self._num_entries_

    @num_entries.setter
    def num_entries(self, num_entries_: int) -> None:
        self._num_entries_ = num_entries_

    @property
    def speed(self) -> typing.List[nds.core.types.speed_kmh.SpeedKmh]:
        return self._speed_.raw_array

    @speed.setter
    def speed(self, speed_: typing.List[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._speed_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(8), speed_)

    @property
    def consumption(self) -> typing.List[nds.core.vehicle.watt_hrs_per100km.WattHrsPer100km]:
        return self._consumption_.raw_array

    @consumption.setter
    def consumption(self, consumption_: typing.List[nds.core.vehicle.watt_hrs_per100km.WattHrsPer100km]) -> None:
        self._consumption_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), consumption_)

    def init_packing_context(self, zserio_context: ElectricConsumptionCurve.ZserioPackingContext) -> None:
        zserio_context.num_entries.init(zserio.array.BitFieldArrayTraits(8), self._num_entries_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += self._speed_.bitsizeof(end_bitposition)
        end_bitposition += self._consumption_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ElectricConsumptionCurve.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_entries_)
        end_bitposition += self._speed_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._consumption_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition = self._speed_.initialize_offsets(end_bitposition)
        end_bitposition = self._consumption_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ElectricConsumptionCurve.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_entries_)
        end_bitposition = self._speed_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._consumption_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_entries_ = zserio_reader.read_bits(8)
        self._speed_ = zserio.array.Array.from_reader(zserio.array.BitFieldArrayTraits(8), zserio_reader, self._num_entries_)
        self._consumption_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_entries_)

    def read_packed(self, zserio_context: ElectricConsumptionCurve.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_entries_ = zserio_context.num_entries.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._speed_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(8), zserio_reader, self._num_entries_)

        self._consumption_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, self._num_entries_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_entries_, 8)

        # check array length
        if len(self._speed_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElectricConsumptionCurve.speed: "
                                                f"{len(self._speed_)} != {self._num_entries_}!")
        self._speed_.write(zserio_writer)

        # check array length
        if len(self._consumption_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElectricConsumptionCurve.consumption: "
                                                f"{len(self._consumption_)} != {self._num_entries_}!")
        self._consumption_.write(zserio_writer)

    def write_packed(self, zserio_context: ElectricConsumptionCurve.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_entries.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_entries_)

        # check array length
        if len(self._speed_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElectricConsumptionCurve.speed: "
                                                f"{len(self._speed_)} != {self._num_entries_}!")
        self._speed_.write_packed(zserio_writer)

        # check array length
        if len(self._consumption_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field ElectricConsumptionCurve.consumption: "
                                                f"{len(self._consumption_)} != {self._num_entries_}!")
        self._consumption_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_entries_ = zserio.array.DeltaContext()

        @property
        def num_entries(self):
            return self._num_entries_
