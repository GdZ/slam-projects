# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class LoadType:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['LoadType'], value: int) -> 'LoadType':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'LoadType' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['LoadType'], reader: zserio.BitStreamReader) -> 'LoadType':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['LoadType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'LoadType':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LoadType):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & LoadType.Values.WATER_POLLUTING) == LoadType.Values.WATER_POLLUTING:
            result += "WATER_POLLUTING" if not result else " | WATER_POLLUTING"
        if (self & LoadType.Values.EXPLOSIVE) == LoadType.Values.EXPLOSIVE:
            result += "EXPLOSIVE" if not result else " | EXPLOSIVE"
        if (self & LoadType.Values.OTHER_DANGEROUS_GOODS) == LoadType.Values.OTHER_DANGEROUS_GOODS:
            result += "OTHER_DANGEROUS_GOODS" if not result else " | OTHER_DANGEROUS_GOODS"
        if (self & LoadType.Values.NO_LOAD) == LoadType.Values.NO_LOAD:
            result += "NO_LOAD" if not result else " | NO_LOAD"
        if (self & LoadType.Values.SPECIAL_LOAD) == LoadType.Values.SPECIAL_LOAD:
            result += "SPECIAL_LOAD" if not result else " | SPECIAL_LOAD"
        if (self & LoadType.Values.GAS) == LoadType.Values.GAS:
            result += "GAS" if not result else " | GAS"
        if (self & LoadType.Values.FLAMMABLE_LIQUIDS) == LoadType.Values.FLAMMABLE_LIQUIDS:
            result += "FLAMMABLE_LIQUIDS" if not result else " | FLAMMABLE_LIQUIDS"
        if (self & LoadType.Values.FLAMMABLE_SOLIDS) == LoadType.Values.FLAMMABLE_SOLIDS:
            result += "FLAMMABLE_SOLIDS" if not result else " | FLAMMABLE_SOLIDS"
        if (self & LoadType.Values.OXIDIZERS_AND_ORGANIC_PEROXIDES) == LoadType.Values.OXIDIZERS_AND_ORGANIC_PEROXIDES:
            result += "OXIDIZERS_AND_ORGANIC_PEROXIDES" if not result else " | OXIDIZERS_AND_ORGANIC_PEROXIDES"
        if (self & LoadType.Values.TOXIC_AND_INFECTIOUS_SUBSTANCES) == LoadType.Values.TOXIC_AND_INFECTIOUS_SUBSTANCES:
            result += "TOXIC_AND_INFECTIOUS_SUBSTANCES" if not result else " | TOXIC_AND_INFECTIOUS_SUBSTANCES"
        if (self & LoadType.Values.RADIOACTIVE_SUBSTANCES) == LoadType.Values.RADIOACTIVE_SUBSTANCES:
            result += "RADIOACTIVE_SUBSTANCES" if not result else " | RADIOACTIVE_SUBSTANCES"
        if (self & LoadType.Values.CORROSIVE_SUBSTANCES) == LoadType.Values.CORROSIVE_SUBSTANCES:
            result += "CORROSIVE_SUBSTANCES" if not result else " | CORROSIVE_SUBSTANCES"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'LoadType') -> 'LoadType':
        return LoadType.from_value(self._value | other._value)

    def __and__(self, other: 'LoadType') -> 'LoadType':
        return LoadType.from_value(self._value & other._value)

    def __xor__(self, other: 'LoadType') -> 'LoadType':
        return LoadType.from_value(self._value ^ other._value)

    def __invert__(self) -> 'LoadType':
        return LoadType.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        WATER_POLLUTING: 'LoadType' = None
        EXPLOSIVE: 'LoadType' = None
        OTHER_DANGEROUS_GOODS: 'LoadType' = None
        NO_LOAD: 'LoadType' = None
        SPECIAL_LOAD: 'LoadType' = None
        GAS: 'LoadType' = None
        FLAMMABLE_LIQUIDS: 'LoadType' = None
        FLAMMABLE_SOLIDS: 'LoadType' = None
        OXIDIZERS_AND_ORGANIC_PEROXIDES: 'LoadType' = None
        TOXIC_AND_INFECTIOUS_SUBSTANCES: 'LoadType' = None
        RADIOACTIVE_SUBSTANCES: 'LoadType' = None
        CORROSIVE_SUBSTANCES: 'LoadType' = None

LoadType.Values.WATER_POLLUTING = LoadType.from_value(1)
LoadType.Values.EXPLOSIVE = LoadType.from_value(2)
LoadType.Values.OTHER_DANGEROUS_GOODS = LoadType.from_value(4)
LoadType.Values.NO_LOAD = LoadType.from_value(8)
LoadType.Values.SPECIAL_LOAD = LoadType.from_value(16)
LoadType.Values.GAS = LoadType.from_value(32)
LoadType.Values.FLAMMABLE_LIQUIDS = LoadType.from_value(64)
LoadType.Values.FLAMMABLE_SOLIDS = LoadType.from_value(128)
LoadType.Values.OXIDIZERS_AND_ORGANIC_PEROXIDES = LoadType.from_value(256)
LoadType.Values.TOXIC_AND_INFECTIOUS_SUBSTANCES = LoadType.from_value(512)
LoadType.Values.RADIOACTIVE_SUBSTANCES = LoadType.from_value(1024)
LoadType.Values.CORROSIVE_SUBSTANCES = LoadType.from_value(2048)
