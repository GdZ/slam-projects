# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.weight10_kilogram

class ConsumptionEfficiency:
    def __init__(
            self,
            gross_weight_: nds.core.types.weight10_kilogram.Weight10Kilogram = nds.core.types.weight10_kilogram.Weight10Kilogram(),
            acceleration_efficiency_: float = float(),
            deceleration_efficiency_: float = float(),
            uphill_efficiency_: float = float(),
            downhill_efficiency_: float = float()) -> None:
        self._gross_weight_ = gross_weight_
        self._acceleration_efficiency_ = acceleration_efficiency_
        self._deceleration_efficiency_ = deceleration_efficiency_
        self._uphill_efficiency_ = uphill_efficiency_
        self._downhill_efficiency_ = downhill_efficiency_

    @classmethod
    def from_reader(
            cls: typing.Type['ConsumptionEfficiency'],
            zserio_reader: zserio.BitStreamReader) -> 'ConsumptionEfficiency':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ConsumptionEfficiency'],
            zserio_context: ConsumptionEfficiency.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'ConsumptionEfficiency':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ConsumptionEfficiency):
            return ((self._gross_weight_ == other._gross_weight_) and
                    (self._acceleration_efficiency_ == other._acceleration_efficiency_) and
                    (self._deceleration_efficiency_ == other._deceleration_efficiency_) and
                    (self._uphill_efficiency_ == other._uphill_efficiency_) and
                    (self._downhill_efficiency_ == other._downhill_efficiency_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._gross_weight_)
        result = zserio.hashcode.calc_hashcode_float32(result, self._acceleration_efficiency_)
        result = zserio.hashcode.calc_hashcode_float32(result, self._deceleration_efficiency_)
        result = zserio.hashcode.calc_hashcode_float32(result, self._uphill_efficiency_)
        result = zserio.hashcode.calc_hashcode_float32(result, self._downhill_efficiency_)

        return result

    @property
    def gross_weight(self) -> nds.core.types.weight10_kilogram.Weight10Kilogram:
        return self._gross_weight_

    @gross_weight.setter
    def gross_weight(self, gross_weight_: nds.core.types.weight10_kilogram.Weight10Kilogram) -> None:
        self._gross_weight_ = gross_weight_

    @property
    def acceleration_efficiency(self) -> float:
        return self._acceleration_efficiency_

    @acceleration_efficiency.setter
    def acceleration_efficiency(self, acceleration_efficiency_: float) -> None:
        self._acceleration_efficiency_ = acceleration_efficiency_

    @property
    def deceleration_efficiency(self) -> float:
        return self._deceleration_efficiency_

    @deceleration_efficiency.setter
    def deceleration_efficiency(self, deceleration_efficiency_: float) -> None:
        self._deceleration_efficiency_ = deceleration_efficiency_

    @property
    def uphill_efficiency(self) -> float:
        return self._uphill_efficiency_

    @uphill_efficiency.setter
    def uphill_efficiency(self, uphill_efficiency_: float) -> None:
        self._uphill_efficiency_ = uphill_efficiency_

    @property
    def downhill_efficiency(self) -> float:
        return self._downhill_efficiency_

    @downhill_efficiency.setter
    def downhill_efficiency(self, downhill_efficiency_: float) -> None:
        self._downhill_efficiency_ = downhill_efficiency_

    def init_packing_context(self, zserio_context: ConsumptionEfficiency.ZserioPackingContext) -> None:
        zserio_context.gross_weight.init(zserio.array.VarUInt32ArrayTraits(), self._gross_weight_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._gross_weight_)
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ConsumptionEfficiency.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.gross_weight.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._gross_weight_)
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._gross_weight_)
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ConsumptionEfficiency.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.gross_weight.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._gross_weight_)
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16
        end_bitposition += 16

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._gross_weight_ = zserio_reader.read_varuint32()
        self._acceleration_efficiency_ = zserio_reader.read_float16()
        self._deceleration_efficiency_ = zserio_reader.read_float16()
        self._uphill_efficiency_ = zserio_reader.read_float16()
        self._downhill_efficiency_ = zserio_reader.read_float16()

    def read_packed(self, zserio_context: ConsumptionEfficiency.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._gross_weight_ = zserio_context.gross_weight.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._acceleration_efficiency_ = zserio_reader.read_float16()

        self._deceleration_efficiency_ = zserio_reader.read_float16()

        self._uphill_efficiency_ = zserio_reader.read_float16()

        self._downhill_efficiency_ = zserio_reader.read_float16()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._gross_weight_)
        zserio_writer.write_float16(self._acceleration_efficiency_)
        zserio_writer.write_float16(self._deceleration_efficiency_)
        zserio_writer.write_float16(self._uphill_efficiency_)
        zserio_writer.write_float16(self._downhill_efficiency_)

    def write_packed(self, zserio_context: ConsumptionEfficiency.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.gross_weight.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._gross_weight_)

        zserio_writer.write_float16(self._acceleration_efficiency_)

        zserio_writer.write_float16(self._deceleration_efficiency_)

        zserio_writer.write_float16(self._uphill_efficiency_)

        zserio_writer.write_float16(self._downhill_efficiency_)

    class ZserioPackingContext:
        def __init__(self):
            self._gross_weight_ = zserio.array.DeltaContext()

        @property
        def gross_weight(self):
            return self._gross_weight_
