# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.vehicle_height
import nds.core.vehicle.vehicle_length
import nds.core.vehicle.vehicle_weight
import nds.core.vehicle.vehicle_width

class VehicleDimensions:
    def __init__(
            self,
            length_: nds.core.vehicle.vehicle_length.VehicleLength = nds.core.vehicle.vehicle_length.VehicleLength(),
            width_: nds.core.vehicle.vehicle_width.VehicleWidth = nds.core.vehicle.vehicle_width.VehicleWidth(),
            height_: nds.core.vehicle.vehicle_height.VehicleHeight = nds.core.vehicle.vehicle_height.VehicleHeight(),
            weight_: nds.core.vehicle.vehicle_weight.VehicleWeight = nds.core.vehicle.vehicle_weight.VehicleWeight()) -> None:
        self._length_ = length_
        self._width_ = width_
        self._height_ = height_
        self._weight_ = weight_

    @classmethod
    def from_reader(
            cls: typing.Type['VehicleDimensions'],
            zserio_reader: zserio.BitStreamReader) -> 'VehicleDimensions':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['VehicleDimensions'],
            zserio_context: VehicleDimensions.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'VehicleDimensions':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VehicleDimensions):
            return ((self._length_ == other._length_) and
                    (self._width_ == other._width_) and
                    (self._height_ == other._height_) and
                    (self._weight_ == other._weight_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._width_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._height_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._weight_)

        return result

    @property
    def length(self) -> nds.core.vehicle.vehicle_length.VehicleLength:
        return self._length_

    @length.setter
    def length(self, length_: nds.core.vehicle.vehicle_length.VehicleLength) -> None:
        self._length_ = length_

    @property
    def width(self) -> nds.core.vehicle.vehicle_width.VehicleWidth:
        return self._width_

    @width.setter
    def width(self, width_: nds.core.vehicle.vehicle_width.VehicleWidth) -> None:
        self._width_ = width_

    @property
    def height(self) -> nds.core.vehicle.vehicle_height.VehicleHeight:
        return self._height_

    @height.setter
    def height(self, height_: nds.core.vehicle.vehicle_height.VehicleHeight) -> None:
        self._height_ = height_

    @property
    def weight(self) -> nds.core.vehicle.vehicle_weight.VehicleWeight:
        return self._weight_

    @weight.setter
    def weight(self, weight_: nds.core.vehicle.vehicle_weight.VehicleWeight) -> None:
        self._weight_ = weight_

    def init_packing_context(self, zserio_context: VehicleDimensions.ZserioPackingContext) -> None:
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)
        zserio_context.width.init(zserio.array.VarUInt32ArrayTraits(), self._width_)
        zserio_context.height.init(zserio.array.VarUInt32ArrayTraits(), self._height_)
        zserio_context.weight.init(zserio.array.VarUInt32ArrayTraits(), self._weight_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._width_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._height_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._weight_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: VehicleDimensions.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._width_)
        end_bitposition += zserio_context.height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._height_)
        end_bitposition += zserio_context.weight.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._weight_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._width_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._height_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._weight_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: VehicleDimensions.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._width_)
        end_bitposition += zserio_context.height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._height_)
        end_bitposition += zserio_context.weight.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._weight_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._length_ = zserio_reader.read_varuint32()
        self._width_ = zserio_reader.read_varuint32()
        self._height_ = zserio_reader.read_varuint32()
        self._weight_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: VehicleDimensions.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._width_ = zserio_context.width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._height_ = zserio_context.height.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._weight_ = zserio_context.weight.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._length_)
        zserio_writer.write_varuint32(self._width_)
        zserio_writer.write_varuint32(self._height_)
        zserio_writer.write_varuint32(self._weight_)

    def write_packed(self, zserio_context: VehicleDimensions.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        zserio_context.width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._width_)

        zserio_context.height.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._height_)

        zserio_context.weight.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._weight_)

    class ZserioPackingContext:
        def __init__(self):
            self._length_ = zserio.array.DeltaContext()
            self._width_ = zserio.array.DeltaContext()
            self._height_ = zserio.array.DeltaContext()
            self._weight_ = zserio.array.DeltaContext()

        @property
        def length(self):
            return self._length_

        @property
        def width(self):
            return self._width_

        @property
        def height(self):
            return self._height_

        @property
        def weight(self):
            return self._weight_
