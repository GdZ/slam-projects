# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.iso_country_code
import nds.core.types.speed_kmh
import nds.core.types.year
import nds.core.vehicle.adr_tunnel_restriction
import nds.core.vehicle.combustion_consumption
import nds.core.vehicle.electric_consumption
import nds.core.vehicle.vehicle_class_specification
import nds.core.vehicle.vehicle_type_information

class VehicleDetails:
    def __init__(
            self,
            vehicle_type_: typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None] = None,
            vehicle_class_specification_: typing.Union[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification, None] = None,
            tunnel_restriction_: typing.Union[nds.core.vehicle.adr_tunnel_restriction.AdrTunnelRestriction, None] = None,
            max_speed_: nds.core.types.speed_kmh.SpeedKmh = nds.core.types.speed_kmh.SpeedKmh(),
            combustion_consumption_: typing.Optional[nds.core.vehicle.combustion_consumption.CombustionConsumption] = None,
            electric_consumption_: typing.Optional[nds.core.vehicle.electric_consumption.ElectricConsumption] = None,
            engine_manufacturing_year_: typing.Optional[nds.core.types.year.Year] = None,
            license_plate_: typing.Optional[str] = None,
            registration_country_: typing.Optional[nds.core.types.iso_country_code.IsoCountryCode] = None,
            current_occupancy_: typing.Optional[int] = None) -> None:
        self._vehicle_type_ = vehicle_type_
        self._vehicle_class_specification_ = vehicle_class_specification_
        self._tunnel_restriction_ = tunnel_restriction_
        self._max_speed_ = max_speed_
        self._combustion_consumption_ = combustion_consumption_
        self._electric_consumption_ = electric_consumption_
        self._engine_manufacturing_year_ = engine_manufacturing_year_
        self._license_plate_ = license_plate_
        self._registration_country_ = registration_country_
        self._current_occupancy_ = current_occupancy_

    @classmethod
    def from_reader(
            cls: typing.Type['VehicleDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'VehicleDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['VehicleDetails'],
            zserio_context: VehicleDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'VehicleDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VehicleDetails):
            return ((self._vehicle_type_ == other._vehicle_type_) and
                    (self._vehicle_class_specification_ == other._vehicle_class_specification_) and
                    (self._tunnel_restriction_ == other._tunnel_restriction_) and
                    (self._max_speed_ == other._max_speed_) and
                    (not other.is_combustion_consumption_used() if not self.is_combustion_consumption_used() else (self._combustion_consumption_ == other._combustion_consumption_)) and
                    (not other.is_electric_consumption_used() if not self.is_electric_consumption_used() else (self._electric_consumption_ == other._electric_consumption_)) and
                    (not other.is_engine_manufacturing_year_used() if not self.is_engine_manufacturing_year_used() else (self._engine_manufacturing_year_ == other._engine_manufacturing_year_)) and
                    (not other.is_license_plate_used() if not self.is_license_plate_used() else (self._license_plate_ == other._license_plate_)) and
                    (not other.is_registration_country_used() if not self.is_registration_country_used() else (self._registration_country_ == other._registration_country_)) and
                    (not other.is_current_occupancy_used() if not self.is_current_occupancy_used() else (self._current_occupancy_ == other._current_occupancy_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_class_specification_)
        result = zserio.hashcode.calc_hashcode_object(result, self._tunnel_restriction_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_speed_)
        if self.is_combustion_consumption_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._combustion_consumption_)
        if self.is_electric_consumption_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._electric_consumption_)
        if self.is_engine_manufacturing_year_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._engine_manufacturing_year_)
        if self.is_license_plate_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._license_plate_)
        if self.is_registration_country_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._registration_country_)
        if self.is_current_occupancy_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._current_occupancy_)

        return result

    @property
    def vehicle_type(self) -> typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None]:
        return self._vehicle_type_

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type_: typing.Union[nds.core.vehicle.vehicle_type_information.VehicleTypeInformation, None]) -> None:
        self._vehicle_type_ = vehicle_type_

    @property
    def vehicle_class_specification(self) -> typing.Union[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification, None]:
        return self._vehicle_class_specification_

    @vehicle_class_specification.setter
    def vehicle_class_specification(self, vehicle_class_specification_: typing.Union[nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification, None]) -> None:
        self._vehicle_class_specification_ = vehicle_class_specification_

    @property
    def tunnel_restriction(self) -> typing.Union[nds.core.vehicle.adr_tunnel_restriction.AdrTunnelRestriction, None]:
        return self._tunnel_restriction_

    @tunnel_restriction.setter
    def tunnel_restriction(self, tunnel_restriction_: typing.Union[nds.core.vehicle.adr_tunnel_restriction.AdrTunnelRestriction, None]) -> None:
        self._tunnel_restriction_ = tunnel_restriction_

    @property
    def max_speed(self) -> nds.core.types.speed_kmh.SpeedKmh:
        return self._max_speed_

    @max_speed.setter
    def max_speed(self, max_speed_: nds.core.types.speed_kmh.SpeedKmh) -> None:
        self._max_speed_ = max_speed_

    @property
    def combustion_consumption(self) -> typing.Optional[nds.core.vehicle.combustion_consumption.CombustionConsumption]:
        return self._combustion_consumption_

    @combustion_consumption.setter
    def combustion_consumption(self, combustion_consumption_: typing.Optional[nds.core.vehicle.combustion_consumption.CombustionConsumption]) -> None:
        self._combustion_consumption_ = combustion_consumption_

    def is_combustion_consumption_used(self) -> bool:
        return self.is_combustion_consumption_set()

    def is_combustion_consumption_set(self) -> bool:
        return not self._combustion_consumption_ is None

    def reset_combustion_consumption(self) -> None:
        self._combustion_consumption_ = None

    @property
    def electric_consumption(self) -> typing.Optional[nds.core.vehicle.electric_consumption.ElectricConsumption]:
        return self._electric_consumption_

    @electric_consumption.setter
    def electric_consumption(self, electric_consumption_: typing.Optional[nds.core.vehicle.electric_consumption.ElectricConsumption]) -> None:
        self._electric_consumption_ = electric_consumption_

    def is_electric_consumption_used(self) -> bool:
        return self.is_electric_consumption_set()

    def is_electric_consumption_set(self) -> bool:
        return not self._electric_consumption_ is None

    def reset_electric_consumption(self) -> None:
        self._electric_consumption_ = None

    @property
    def engine_manufacturing_year(self) -> typing.Optional[nds.core.types.year.Year]:
        return self._engine_manufacturing_year_

    @engine_manufacturing_year.setter
    def engine_manufacturing_year(self, engine_manufacturing_year_: typing.Optional[nds.core.types.year.Year]) -> None:
        self._engine_manufacturing_year_ = engine_manufacturing_year_

    def is_engine_manufacturing_year_used(self) -> bool:
        return self.is_engine_manufacturing_year_set()

    def is_engine_manufacturing_year_set(self) -> bool:
        return not self._engine_manufacturing_year_ is None

    def reset_engine_manufacturing_year(self) -> None:
        self._engine_manufacturing_year_ = None

    @property
    def license_plate(self) -> typing.Optional[str]:
        return self._license_plate_

    @license_plate.setter
    def license_plate(self, license_plate_: typing.Optional[str]) -> None:
        self._license_plate_ = license_plate_

    def is_license_plate_used(self) -> bool:
        return self.is_license_plate_set()

    def is_license_plate_set(self) -> bool:
        return not self._license_plate_ is None

    def reset_license_plate(self) -> None:
        self._license_plate_ = None

    @property
    def registration_country(self) -> typing.Optional[nds.core.types.iso_country_code.IsoCountryCode]:
        return self._registration_country_

    @registration_country.setter
    def registration_country(self, registration_country_: typing.Optional[nds.core.types.iso_country_code.IsoCountryCode]) -> None:
        self._registration_country_ = registration_country_

    def is_registration_country_used(self) -> bool:
        return self.is_registration_country_set()

    def is_registration_country_set(self) -> bool:
        return not self._registration_country_ is None

    def reset_registration_country(self) -> None:
        self._registration_country_ = None

    @property
    def current_occupancy(self) -> typing.Optional[int]:
        return self._current_occupancy_

    @current_occupancy.setter
    def current_occupancy(self, current_occupancy_: typing.Optional[int]) -> None:
        self._current_occupancy_ = current_occupancy_

    def is_current_occupancy_used(self) -> bool:
        return self.is_current_occupancy_set()

    def is_current_occupancy_set(self) -> bool:
        return not self._current_occupancy_ is None

    def reset_current_occupancy(self) -> None:
        self._current_occupancy_ = None

    def init_packing_context(self, zserio_context: VehicleDetails.ZserioPackingContext) -> None:
        self._vehicle_type_.init_packing_context(zserio_context.vehicle_type)
        self._vehicle_class_specification_.init_packing_context(zserio_context.vehicle_class_specification)
        self._tunnel_restriction_.init_packing_context(zserio_context.tunnel_restriction)
        zserio_context.max_speed.init(zserio.array.BitFieldArrayTraits(8), self._max_speed_)
        if self.is_combustion_consumption_used():
            self._combustion_consumption_.init_packing_context(zserio_context.combustion_consumption)
        if self.is_electric_consumption_used():
            self._electric_consumption_.init_packing_context(zserio_context.electric_consumption)
        if self.is_engine_manufacturing_year_used():
            zserio_context.engine_manufacturing_year.init(zserio.array.SignedBitFieldArrayTraits(16), self._engine_manufacturing_year_)
        if self.is_current_occupancy_used():
            zserio_context.current_occupancy.init(zserio.array.VarUInt16ArrayTraits(), self._current_occupancy_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._vehicle_type_.bitsizeof(end_bitposition)
        end_bitposition += self._vehicle_class_specification_.bitsizeof(end_bitposition)
        end_bitposition += self._tunnel_restriction_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_combustion_consumption_used():
            end_bitposition += self._combustion_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_electric_consumption_used():
            end_bitposition += self._electric_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_engine_manufacturing_year_used():
            end_bitposition += 16
        end_bitposition += 1
        if self.is_license_plate_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._license_plate_)
        end_bitposition += 1
        if self.is_registration_country_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._registration_country_)
        end_bitposition += 1
        if self.is_current_occupancy_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._current_occupancy_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: VehicleDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._vehicle_type_.bitsizeof_packed(zserio_context.vehicle_type, end_bitposition)
        end_bitposition += self._vehicle_class_specification_.bitsizeof_packed(zserio_context.vehicle_class_specification, end_bitposition)
        end_bitposition += self._tunnel_restriction_.bitsizeof_packed(zserio_context.tunnel_restriction, end_bitposition)
        end_bitposition += zserio_context.max_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._max_speed_)
        end_bitposition += 1
        if self.is_combustion_consumption_used():
            end_bitposition += self._combustion_consumption_.bitsizeof_packed(zserio_context.combustion_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_electric_consumption_used():
            end_bitposition += self._electric_consumption_.bitsizeof_packed(zserio_context.electric_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_engine_manufacturing_year_used():
            end_bitposition += zserio_context.engine_manufacturing_year.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._engine_manufacturing_year_)
        end_bitposition += 1
        if self.is_license_plate_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._license_plate_)
        end_bitposition += 1
        if self.is_registration_country_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._registration_country_)
        end_bitposition += 1
        if self.is_current_occupancy_used():
            end_bitposition += zserio_context.current_occupancy.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._current_occupancy_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._vehicle_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._vehicle_class_specification_.initialize_offsets(end_bitposition)
        end_bitposition = self._tunnel_restriction_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_combustion_consumption_used():
            end_bitposition = self._combustion_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_electric_consumption_used():
            end_bitposition = self._electric_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_engine_manufacturing_year_used():
            end_bitposition += 16
        end_bitposition += 1
        if self.is_license_plate_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._license_plate_)
        end_bitposition += 1
        if self.is_registration_country_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._registration_country_)
        end_bitposition += 1
        if self.is_current_occupancy_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._current_occupancy_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: VehicleDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._vehicle_type_.initialize_offsets_packed(zserio_context.vehicle_type, end_bitposition)
        end_bitposition = self._vehicle_class_specification_.initialize_offsets_packed(zserio_context.vehicle_class_specification, end_bitposition)
        end_bitposition = self._tunnel_restriction_.initialize_offsets_packed(zserio_context.tunnel_restriction, end_bitposition)
        end_bitposition += zserio_context.max_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._max_speed_)
        end_bitposition += 1
        if self.is_combustion_consumption_used():
            end_bitposition = self._combustion_consumption_.initialize_offsets_packed(zserio_context.combustion_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_electric_consumption_used():
            end_bitposition = self._electric_consumption_.initialize_offsets_packed(zserio_context.electric_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_engine_manufacturing_year_used():
            end_bitposition += zserio_context.engine_manufacturing_year.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._engine_manufacturing_year_)
        end_bitposition += 1
        if self.is_license_plate_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._license_plate_)
        end_bitposition += 1
        if self.is_registration_country_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._registration_country_)
        end_bitposition += 1
        if self.is_current_occupancy_used():
            end_bitposition += zserio_context.current_occupancy.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._current_occupancy_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._vehicle_type_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.from_reader(zserio_reader)
        self._vehicle_class_specification_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.from_reader(zserio_reader)
        self._tunnel_restriction_ = nds.core.vehicle.adr_tunnel_restriction.AdrTunnelRestriction.from_reader(zserio_reader)
        self._max_speed_ = zserio_reader.read_bits(8)
        if zserio_reader.read_bool():
            self._combustion_consumption_ = nds.core.vehicle.combustion_consumption.CombustionConsumption.from_reader(zserio_reader)
        else:
            self._combustion_consumption_ = None
        if zserio_reader.read_bool():
            self._electric_consumption_ = nds.core.vehicle.electric_consumption.ElectricConsumption.from_reader(zserio_reader)
        else:
            self._electric_consumption_ = None
        if zserio_reader.read_bool():
            self._engine_manufacturing_year_ = zserio_reader.read_signed_bits(16)
        else:
            self._engine_manufacturing_year_ = None
        if zserio_reader.read_bool():
            self._license_plate_ = zserio_reader.read_string()
        else:
            self._license_plate_ = None
        if zserio_reader.read_bool():
            self._registration_country_ = zserio_reader.read_string()
        else:
            self._registration_country_ = None
        if zserio_reader.read_bool():
            self._current_occupancy_ = zserio_reader.read_varuint16()
        else:
            self._current_occupancy_ = None

    def read_packed(self, zserio_context: VehicleDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._vehicle_type_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.from_reader_packed(zserio_context.vehicle_type, zserio_reader)

        self._vehicle_class_specification_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.from_reader_packed(zserio_context.vehicle_class_specification, zserio_reader)

        self._tunnel_restriction_ = nds.core.vehicle.adr_tunnel_restriction.AdrTunnelRestriction.from_reader_packed(zserio_context.tunnel_restriction, zserio_reader)

        self._max_speed_ = zserio_context.max_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        if zserio_reader.read_bool():
            self._combustion_consumption_ = nds.core.vehicle.combustion_consumption.CombustionConsumption.from_reader_packed(zserio_context.combustion_consumption, zserio_reader)
        else:
            self._combustion_consumption_ = None

        if zserio_reader.read_bool():
            self._electric_consumption_ = nds.core.vehicle.electric_consumption.ElectricConsumption.from_reader_packed(zserio_context.electric_consumption, zserio_reader)
        else:
            self._electric_consumption_ = None

        if zserio_reader.read_bool():
            self._engine_manufacturing_year_ = zserio_context.engine_manufacturing_year.read(zserio.array.SignedBitFieldArrayTraits(16), zserio_reader)
        else:
            self._engine_manufacturing_year_ = None

        if zserio_reader.read_bool():
            self._license_plate_ = zserio_reader.read_string()
        else:
            self._license_plate_ = None

        if zserio_reader.read_bool():
            self._registration_country_ = zserio_reader.read_string()
        else:
            self._registration_country_ = None

        if zserio_reader.read_bool():
            self._current_occupancy_ = zserio_context.current_occupancy.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._current_occupancy_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._vehicle_type_.write(zserio_writer)
        self._vehicle_class_specification_.write(zserio_writer)
        self._tunnel_restriction_.write(zserio_writer)
        zserio_writer.write_bits(self._max_speed_, 8)
        if self.is_combustion_consumption_used():
            zserio_writer.write_bool(True)
            self._combustion_consumption_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_electric_consumption_used():
            zserio_writer.write_bool(True)
            self._electric_consumption_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_engine_manufacturing_year_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_signed_bits(self._engine_manufacturing_year_, 16)
        else:
            zserio_writer.write_bool(False)
        if self.is_license_plate_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._license_plate_)
        else:
            zserio_writer.write_bool(False)
        if self.is_registration_country_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._registration_country_)
        else:
            zserio_writer.write_bool(False)
        if self.is_current_occupancy_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint16(self._current_occupancy_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: VehicleDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._vehicle_type_.write_packed(zserio_context.vehicle_type, zserio_writer)

        self._vehicle_class_specification_.write_packed(zserio_context.vehicle_class_specification, zserio_writer)

        self._tunnel_restriction_.write_packed(zserio_context.tunnel_restriction, zserio_writer)

        zserio_context.max_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._max_speed_)

        if self.is_combustion_consumption_used():
            zserio_writer.write_bool(True)
            self._combustion_consumption_.write_packed(zserio_context.combustion_consumption, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_electric_consumption_used():
            zserio_writer.write_bool(True)
            self._electric_consumption_.write_packed(zserio_context.electric_consumption, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_engine_manufacturing_year_used():
            zserio_writer.write_bool(True)
            zserio_context.engine_manufacturing_year.write(zserio.array.SignedBitFieldArrayTraits(16), zserio_writer, self._engine_manufacturing_year_)
        else:
            zserio_writer.write_bool(False)

        if self.is_license_plate_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._license_plate_)
        else:
            zserio_writer.write_bool(False)

        if self.is_registration_country_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._registration_country_)
        else:
            zserio_writer.write_bool(False)

        if self.is_current_occupancy_used():
            zserio_writer.write_bool(True)
            zserio_context.current_occupancy.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._current_occupancy_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._vehicle_type_ = nds.core.vehicle.vehicle_type_information.VehicleTypeInformation.ZserioPackingContext()
            self._vehicle_class_specification_ = nds.core.vehicle.vehicle_class_specification.VehicleClassSpecification.ZserioPackingContext()
            self._tunnel_restriction_ = zserio.array.DeltaContext()
            self._max_speed_ = zserio.array.DeltaContext()
            self._combustion_consumption_ = nds.core.vehicle.combustion_consumption.CombustionConsumption.ZserioPackingContext()
            self._electric_consumption_ = nds.core.vehicle.electric_consumption.ElectricConsumption.ZserioPackingContext()
            self._engine_manufacturing_year_ = zserio.array.DeltaContext()
            self._current_occupancy_ = zserio.array.DeltaContext()

        @property
        def vehicle_type(self):
            return self._vehicle_type_

        @property
        def vehicle_class_specification(self):
            return self._vehicle_class_specification_

        @property
        def tunnel_restriction(self):
            return self._tunnel_restriction_

        @property
        def max_speed(self):
            return self._max_speed_

        @property
        def combustion_consumption(self):
            return self._combustion_consumption_

        @property
        def electric_consumption(self):
            return self._electric_consumption_

        @property
        def engine_manufacturing_year(self):
            return self._engine_manufacturing_year_

        @property
        def current_occupancy(self):
            return self._current_occupancy_
