# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.axle_details
import nds.core.vehicle.driver_assist_functions
import nds.core.vehicle.engine
import nds.core.vehicle.equipment
import nds.core.vehicle.load_type
import nds.core.vehicle.vehicle_dimensions

class VehicleClassSpecification:
    def __init__(
            self,
            engine_: typing.Union[nds.core.vehicle.engine.Engine, None] = None,
            equipment_: typing.Union[nds.core.vehicle.equipment.Equipment, None] = None,
            max_dimensions_: typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None] = None,
            min_dimensions_: typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None] = None,
            load_: typing.Union[nds.core.vehicle.load_type.LoadType, None] = None,
            axles_: typing.Union[nds.core.vehicle.axle_details.AxleDetails, None] = None,
            assist_functions_: typing.Union[nds.core.vehicle.driver_assist_functions.DriverAssistFunctions, None] = None) -> None:
        self._engine_ = engine_
        self._equipment_ = equipment_
        self._max_dimensions_ = max_dimensions_
        self._min_dimensions_ = min_dimensions_
        self._load_ = load_
        self._axles_ = axles_
        self._assist_functions_ = assist_functions_

    @classmethod
    def from_reader(
            cls: typing.Type['VehicleClassSpecification'],
            zserio_reader: zserio.BitStreamReader) -> 'VehicleClassSpecification':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['VehicleClassSpecification'],
            zserio_context: VehicleClassSpecification.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'VehicleClassSpecification':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, VehicleClassSpecification):
            return ((self._engine_ == other._engine_) and
                    (self._equipment_ == other._equipment_) and
                    (self._max_dimensions_ == other._max_dimensions_) and
                    (self._min_dimensions_ == other._min_dimensions_) and
                    (self._load_ == other._load_) and
                    (self._axles_ == other._axles_) and
                    (self._assist_functions_ == other._assist_functions_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._engine_)
        result = zserio.hashcode.calc_hashcode_object(result, self._equipment_)
        result = zserio.hashcode.calc_hashcode_object(result, self._max_dimensions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._min_dimensions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._load_)
        result = zserio.hashcode.calc_hashcode_object(result, self._axles_)
        result = zserio.hashcode.calc_hashcode_object(result, self._assist_functions_)

        return result

    @property
    def engine(self) -> typing.Union[nds.core.vehicle.engine.Engine, None]:
        return self._engine_

    @engine.setter
    def engine(self, engine_: typing.Union[nds.core.vehicle.engine.Engine, None]) -> None:
        self._engine_ = engine_

    @property
    def equipment(self) -> typing.Union[nds.core.vehicle.equipment.Equipment, None]:
        return self._equipment_

    @equipment.setter
    def equipment(self, equipment_: typing.Union[nds.core.vehicle.equipment.Equipment, None]) -> None:
        self._equipment_ = equipment_

    @property
    def max_dimensions(self) -> typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None]:
        return self._max_dimensions_

    @max_dimensions.setter
    def max_dimensions(self, max_dimensions_: typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None]) -> None:
        self._max_dimensions_ = max_dimensions_

    @property
    def min_dimensions(self) -> typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None]:
        return self._min_dimensions_

    @min_dimensions.setter
    def min_dimensions(self, min_dimensions_: typing.Union[nds.core.vehicle.vehicle_dimensions.VehicleDimensions, None]) -> None:
        self._min_dimensions_ = min_dimensions_

    @property
    def load(self) -> typing.Union[nds.core.vehicle.load_type.LoadType, None]:
        return self._load_

    @load.setter
    def load(self, load_: typing.Union[nds.core.vehicle.load_type.LoadType, None]) -> None:
        self._load_ = load_

    @property
    def axles(self) -> typing.Union[nds.core.vehicle.axle_details.AxleDetails, None]:
        return self._axles_

    @axles.setter
    def axles(self, axles_: typing.Union[nds.core.vehicle.axle_details.AxleDetails, None]) -> None:
        self._axles_ = axles_

    @property
    def assist_functions(self) -> typing.Union[nds.core.vehicle.driver_assist_functions.DriverAssistFunctions, None]:
        return self._assist_functions_

    @assist_functions.setter
    def assist_functions(self, assist_functions_: typing.Union[nds.core.vehicle.driver_assist_functions.DriverAssistFunctions, None]) -> None:
        self._assist_functions_ = assist_functions_

    def init_packing_context(self, zserio_context: VehicleClassSpecification.ZserioPackingContext) -> None:
        self._engine_.init_packing_context(zserio_context.engine)
        self._equipment_.init_packing_context(zserio_context.equipment)
        self._max_dimensions_.init_packing_context(zserio_context.max_dimensions)
        self._min_dimensions_.init_packing_context(zserio_context.min_dimensions)
        self._load_.init_packing_context(zserio_context.load)
        self._axles_.init_packing_context(zserio_context.axles)
        self._assist_functions_.init_packing_context(zserio_context.assist_functions)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._engine_.bitsizeof(end_bitposition)
        end_bitposition += self._equipment_.bitsizeof(end_bitposition)
        end_bitposition += self._max_dimensions_.bitsizeof(end_bitposition)
        end_bitposition += self._min_dimensions_.bitsizeof(end_bitposition)
        end_bitposition += self._load_.bitsizeof(end_bitposition)
        end_bitposition += self._axles_.bitsizeof(end_bitposition)
        end_bitposition += self._assist_functions_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: VehicleClassSpecification.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._engine_.bitsizeof_packed(zserio_context.engine, end_bitposition)
        end_bitposition += self._equipment_.bitsizeof_packed(zserio_context.equipment, end_bitposition)
        end_bitposition += self._max_dimensions_.bitsizeof_packed(zserio_context.max_dimensions, end_bitposition)
        end_bitposition += self._min_dimensions_.bitsizeof_packed(zserio_context.min_dimensions, end_bitposition)
        end_bitposition += self._load_.bitsizeof_packed(zserio_context.load, end_bitposition)
        end_bitposition += self._axles_.bitsizeof_packed(zserio_context.axles, end_bitposition)
        end_bitposition += self._assist_functions_.bitsizeof_packed(zserio_context.assist_functions, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._engine_.initialize_offsets(end_bitposition)
        end_bitposition = self._equipment_.initialize_offsets(end_bitposition)
        end_bitposition = self._max_dimensions_.initialize_offsets(end_bitposition)
        end_bitposition = self._min_dimensions_.initialize_offsets(end_bitposition)
        end_bitposition = self._load_.initialize_offsets(end_bitposition)
        end_bitposition = self._axles_.initialize_offsets(end_bitposition)
        end_bitposition = self._assist_functions_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: VehicleClassSpecification.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._engine_.initialize_offsets_packed(zserio_context.engine, end_bitposition)
        end_bitposition = self._equipment_.initialize_offsets_packed(zserio_context.equipment, end_bitposition)
        end_bitposition = self._max_dimensions_.initialize_offsets_packed(zserio_context.max_dimensions, end_bitposition)
        end_bitposition = self._min_dimensions_.initialize_offsets_packed(zserio_context.min_dimensions, end_bitposition)
        end_bitposition = self._load_.initialize_offsets_packed(zserio_context.load, end_bitposition)
        end_bitposition = self._axles_.initialize_offsets_packed(zserio_context.axles, end_bitposition)
        end_bitposition = self._assist_functions_.initialize_offsets_packed(zserio_context.assist_functions, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._engine_ = nds.core.vehicle.engine.Engine.from_reader(zserio_reader)
        self._equipment_ = nds.core.vehicle.equipment.Equipment.from_reader(zserio_reader)
        self._max_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.from_reader(zserio_reader)
        self._min_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.from_reader(zserio_reader)
        self._load_ = nds.core.vehicle.load_type.LoadType.from_reader(zserio_reader)
        self._axles_ = nds.core.vehicle.axle_details.AxleDetails.from_reader(zserio_reader)
        self._assist_functions_ = nds.core.vehicle.driver_assist_functions.DriverAssistFunctions.from_reader(zserio_reader)

    def read_packed(self, zserio_context: VehicleClassSpecification.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._engine_ = nds.core.vehicle.engine.Engine.from_reader_packed(zserio_context.engine, zserio_reader)

        self._equipment_ = nds.core.vehicle.equipment.Equipment.from_reader_packed(zserio_context.equipment, zserio_reader)

        self._max_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.from_reader_packed(zserio_context.max_dimensions, zserio_reader)

        self._min_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.from_reader_packed(zserio_context.min_dimensions, zserio_reader)

        self._load_ = nds.core.vehicle.load_type.LoadType.from_reader_packed(zserio_context.load, zserio_reader)

        self._axles_ = nds.core.vehicle.axle_details.AxleDetails.from_reader_packed(zserio_context.axles, zserio_reader)

        self._assist_functions_ = nds.core.vehicle.driver_assist_functions.DriverAssistFunctions.from_reader_packed(zserio_context.assist_functions, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._engine_.write(zserio_writer)
        self._equipment_.write(zserio_writer)
        self._max_dimensions_.write(zserio_writer)
        self._min_dimensions_.write(zserio_writer)
        self._load_.write(zserio_writer)
        self._axles_.write(zserio_writer)
        self._assist_functions_.write(zserio_writer)

    def write_packed(self, zserio_context: VehicleClassSpecification.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._engine_.write_packed(zserio_context.engine, zserio_writer)

        self._equipment_.write_packed(zserio_context.equipment, zserio_writer)

        self._max_dimensions_.write_packed(zserio_context.max_dimensions, zserio_writer)

        self._min_dimensions_.write_packed(zserio_context.min_dimensions, zserio_writer)

        self._load_.write_packed(zserio_context.load, zserio_writer)

        self._axles_.write_packed(zserio_context.axles, zserio_writer)

        self._assist_functions_.write_packed(zserio_context.assist_functions, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._engine_ = nds.core.vehicle.engine.Engine.ZserioPackingContext()
            self._equipment_ = zserio.array.DeltaContext()
            self._max_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.ZserioPackingContext()
            self._min_dimensions_ = nds.core.vehicle.vehicle_dimensions.VehicleDimensions.ZserioPackingContext()
            self._load_ = zserio.array.DeltaContext()
            self._axles_ = nds.core.vehicle.axle_details.AxleDetails.ZserioPackingContext()
            self._assist_functions_ = zserio.array.DeltaContext()

        @property
        def engine(self):
            return self._engine_

        @property
        def equipment(self):
            return self._equipment_

        @property
        def max_dimensions(self):
            return self._max_dimensions_

        @property
        def min_dimensions(self):
            return self._min_dimensions_

        @property
        def load(self):
            return self._load_

        @property
        def axles(self):
            return self._axles_

        @property
        def assist_functions(self):
            return self._assist_functions_
