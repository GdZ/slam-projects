# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.elevation
import nds.core.geometry.latitude
import nds.core.geometry.longitude
import nds.core.types.speed_kmh
import nds.core.vehicle.heading
import nds.core.vehicle.pitch

class PoseRaw:
    def __init__(
            self,
            longitude_: nds.core.geometry.longitude.Longitude = nds.core.geometry.longitude.Longitude(),
            latitude_: nds.core.geometry.latitude.Latitude = nds.core.geometry.latitude.Latitude(),
            elevation_: typing.Optional[nds.core.geometry.elevation.Elevation] = None,
            heading_: typing.Optional[nds.core.vehicle.heading.Heading] = None,
            pitch_: typing.Optional[nds.core.vehicle.pitch.Pitch] = None,
            speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None) -> None:
        self._longitude_ = longitude_
        self._latitude_ = latitude_
        self._elevation_ = elevation_
        self._heading_ = heading_
        self._pitch_ = pitch_
        self._speed_ = speed_

    @classmethod
    def from_reader(
            cls: typing.Type['PoseRaw'],
            zserio_reader: zserio.BitStreamReader) -> 'PoseRaw':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoseRaw'],
            zserio_context: PoseRaw.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoseRaw':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoseRaw):
            return ((self._longitude_ == other._longitude_) and
                    (self._latitude_ == other._latitude_) and
                    (not other.is_elevation_used() if not self.is_elevation_used() else (self._elevation_ == other._elevation_)) and
                    (not other.is_heading_used() if not self.is_heading_used() else (self._heading_ == other._heading_)) and
                    (not other.is_pitch_used() if not self.is_pitch_used() else (self._pitch_ == other._pitch_)) and
                    (not other.is_speed_used() if not self.is_speed_used() else (self._speed_ == other._speed_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._longitude_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._latitude_)
        if self.is_elevation_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._elevation_)
        if self.is_heading_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._heading_)
        if self.is_pitch_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._pitch_)
        if self.is_speed_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._speed_)

        return result

    @property
    def longitude(self) -> nds.core.geometry.longitude.Longitude:
        return self._longitude_

    @longitude.setter
    def longitude(self, longitude_: nds.core.geometry.longitude.Longitude) -> None:
        self._longitude_ = longitude_

    @property
    def latitude(self) -> nds.core.geometry.latitude.Latitude:
        return self._latitude_

    @latitude.setter
    def latitude(self, latitude_: nds.core.geometry.latitude.Latitude) -> None:
        self._latitude_ = latitude_

    @property
    def elevation(self) -> typing.Optional[nds.core.geometry.elevation.Elevation]:
        return self._elevation_

    @elevation.setter
    def elevation(self, elevation_: typing.Optional[nds.core.geometry.elevation.Elevation]) -> None:
        self._elevation_ = elevation_

    def is_elevation_used(self) -> bool:
        return self.is_elevation_set()

    def is_elevation_set(self) -> bool:
        return not self._elevation_ is None

    def reset_elevation(self) -> None:
        self._elevation_ = None

    @property
    def heading(self) -> typing.Optional[nds.core.vehicle.heading.Heading]:
        return self._heading_

    @heading.setter
    def heading(self, heading_: typing.Optional[nds.core.vehicle.heading.Heading]) -> None:
        self._heading_ = heading_

    def is_heading_used(self) -> bool:
        return self.is_heading_set()

    def is_heading_set(self) -> bool:
        return not self._heading_ is None

    def reset_heading(self) -> None:
        self._heading_ = None

    @property
    def pitch(self) -> typing.Optional[nds.core.vehicle.pitch.Pitch]:
        return self._pitch_

    @pitch.setter
    def pitch(self, pitch_: typing.Optional[nds.core.vehicle.pitch.Pitch]) -> None:
        self._pitch_ = pitch_

    def is_pitch_used(self) -> bool:
        return self.is_pitch_set()

    def is_pitch_set(self) -> bool:
        return not self._pitch_ is None

    def reset_pitch(self) -> None:
        self._pitch_ = None

    @property
    def speed(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._speed_

    @speed.setter
    def speed(self, speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._speed_ = speed_

    def is_speed_used(self) -> bool:
        return self.is_speed_set()

    def is_speed_set(self) -> bool:
        return not self._speed_ is None

    def reset_speed(self) -> None:
        self._speed_ = None

    def init_packing_context(self, zserio_context: PoseRaw.ZserioPackingContext) -> None:
        zserio_context.longitude.init(zserio.array.SignedBitFieldArrayTraits(32), self._longitude_)
        zserio_context.latitude.init(zserio.array.SignedBitFieldArrayTraits(32), self._latitude_)
        if self.is_elevation_used():
            zserio_context.elevation.init(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        if self.is_heading_used():
            zserio_context.heading.init(zserio.array.BitFieldArrayTraits(8), self._heading_)
        if self.is_pitch_used():
            zserio_context.pitch.init(zserio.array.SignedBitFieldArrayTraits(8), self._pitch_)
        if self.is_speed_used():
            zserio_context.speed.init(zserio.array.BitFieldArrayTraits(8), self._speed_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition += 32
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._elevation_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_pitch_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoseRaw.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._longitude_)
        end_bitposition += zserio_context.latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._latitude_)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_pitch_used():
            end_bitposition += zserio_context.pitch.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._pitch_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition += 32
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._elevation_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_pitch_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoseRaw.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._longitude_)
        end_bitposition += zserio_context.latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._latitude_)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_pitch_used():
            end_bitposition += zserio_context.pitch.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._pitch_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._longitude_ = zserio_reader.read_signed_bits(32)
        self._latitude_ = zserio_reader.read_signed_bits(32)
        if zserio_reader.read_bool():
            self._elevation_ = zserio_reader.read_varint32()
        else:
            self._elevation_ = None
        if zserio_reader.read_bool():
            self._heading_ = zserio_reader.read_bits(8)
        else:
            self._heading_ = None
        if zserio_reader.read_bool():
            self._pitch_ = zserio_reader.read_signed_bits(8)
        else:
            self._pitch_ = None
        if zserio_reader.read_bool():
            self._speed_ = zserio_reader.read_bits(8)
        else:
            self._speed_ = None

    def read_packed(self, zserio_context: PoseRaw.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._longitude_ = zserio_context.longitude.read(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader)

        self._latitude_ = zserio_context.latitude.read(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader)

        if zserio_reader.read_bool():
            self._elevation_ = zserio_context.elevation.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        else:
            self._elevation_ = None

        if zserio_reader.read_bool():
            self._heading_ = zserio_context.heading.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._heading_ = None

        if zserio_reader.read_bool():
            self._pitch_ = zserio_context.pitch.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)
        else:
            self._pitch_ = None

        if zserio_reader.read_bool():
            self._speed_ = zserio_context.speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._speed_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_signed_bits(self._longitude_, 32)
        zserio_writer.write_signed_bits(self._latitude_, 32)
        if self.is_elevation_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varint32(self._elevation_)
        else:
            zserio_writer.write_bool(False)
        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._heading_, 8)
        else:
            zserio_writer.write_bool(False)
        if self.is_pitch_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_signed_bits(self._pitch_, 8)
        else:
            zserio_writer.write_bool(False)
        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._speed_, 8)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PoseRaw.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.longitude.write(zserio.array.SignedBitFieldArrayTraits(32), zserio_writer, self._longitude_)

        zserio_context.latitude.write(zserio.array.SignedBitFieldArrayTraits(32), zserio_writer, self._latitude_)

        if self.is_elevation_used():
            zserio_writer.write_bool(True)
            zserio_context.elevation.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._elevation_)
        else:
            zserio_writer.write_bool(False)

        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_context.heading.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._heading_)
        else:
            zserio_writer.write_bool(False)

        if self.is_pitch_used():
            zserio_writer.write_bool(True)
            zserio_context.pitch.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._pitch_)
        else:
            zserio_writer.write_bool(False)

        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_context.speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._speed_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._longitude_ = zserio.array.DeltaContext()
            self._latitude_ = zserio.array.DeltaContext()
            self._elevation_ = zserio.array.DeltaContext()
            self._heading_ = zserio.array.DeltaContext()
            self._pitch_ = zserio.array.DeltaContext()
            self._speed_ = zserio.array.DeltaContext()

        @property
        def longitude(self):
            return self._longitude_

        @property
        def latitude(self):
            return self._latitude_

        @property
        def elevation(self):
            return self._elevation_

        @property
        def heading(self):
            return self._heading_

        @property
        def pitch(self):
            return self._pitch_

        @property
        def speed(self):
            return self._speed_
