# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.elevation
import nds.core.geometry.position2d
import nds.core.types.functional_road_class
import nds.core.types.speed_kmh
import nds.core.vehicle.heading
import nds.core.vehicle.match_probability

class PoseGeoMatched:
    def __init__(
            self,
            coordinate_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            elevation_: typing.Optional[nds.core.geometry.elevation.Elevation] = None,
            z_level_: typing.Optional[int] = None,
            frc_: typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass] = None,
            heading_: typing.Optional[nds.core.vehicle.heading.Heading] = None,
            speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            probability_: typing.Optional[nds.core.vehicle.match_probability.MatchProbability] = None) -> None:
        self._coordinate_ = coordinate_
        self._elevation_ = elevation_
        self._z_level_ = z_level_
        self._frc_ = frc_
        self._heading_ = heading_
        self._speed_ = speed_
        self._probability_ = probability_

    @classmethod
    def from_reader(
            cls: typing.Type['PoseGeoMatched'],
            zserio_reader: zserio.BitStreamReader) -> 'PoseGeoMatched':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoseGeoMatched'],
            zserio_context: PoseGeoMatched.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoseGeoMatched':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoseGeoMatched):
            return ((self._coordinate_ == other._coordinate_) and
                    (not other.is_elevation_used() if not self.is_elevation_used() else (self._elevation_ == other._elevation_)) and
                    (not other.is_z_level_used() if not self.is_z_level_used() else (self._z_level_ == other._z_level_)) and
                    (not other.is_frc_used() if not self.is_frc_used() else (self._frc_ == other._frc_)) and
                    (not other.is_heading_used() if not self.is_heading_used() else (self._heading_ == other._heading_)) and
                    (not other.is_speed_used() if not self.is_speed_used() else (self._speed_ == other._speed_)) and
                    (not other.is_probability_used() if not self.is_probability_used() else (self._probability_ == other._probability_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._coordinate_)
        if self.is_elevation_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._elevation_)
        if self.is_z_level_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._z_level_)
        if self.is_frc_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._frc_)
        if self.is_heading_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._heading_)
        if self.is_speed_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._speed_)
        if self.is_probability_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._probability_)

        return result

    @property
    def coordinate(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._coordinate_

    @coordinate.setter
    def coordinate(self, coordinate_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._coordinate_ = coordinate_

    @property
    def elevation(self) -> typing.Optional[nds.core.geometry.elevation.Elevation]:
        return self._elevation_

    @elevation.setter
    def elevation(self, elevation_: typing.Optional[nds.core.geometry.elevation.Elevation]) -> None:
        self._elevation_ = elevation_

    def is_elevation_used(self) -> bool:
        return self.is_elevation_set()

    def is_elevation_set(self) -> bool:
        return not self._elevation_ is None

    def reset_elevation(self) -> None:
        self._elevation_ = None

    @property
    def z_level(self) -> typing.Optional[int]:
        return self._z_level_

    @z_level.setter
    def z_level(self, z_level_: typing.Optional[int]) -> None:
        self._z_level_ = z_level_

    def is_z_level_used(self) -> bool:
        return self.is_z_level_set()

    def is_z_level_set(self) -> bool:
        return not self._z_level_ is None

    def reset_z_level(self) -> None:
        self._z_level_ = None

    @property
    def frc(self) -> typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass]:
        return self._frc_

    @frc.setter
    def frc(self, frc_: typing.Optional[nds.core.types.functional_road_class.FunctionalRoadClass]) -> None:
        self._frc_ = frc_

    def is_frc_used(self) -> bool:
        return self.is_frc_set()

    def is_frc_set(self) -> bool:
        return not self._frc_ is None

    def reset_frc(self) -> None:
        self._frc_ = None

    @property
    def heading(self) -> typing.Optional[nds.core.vehicle.heading.Heading]:
        return self._heading_

    @heading.setter
    def heading(self, heading_: typing.Optional[nds.core.vehicle.heading.Heading]) -> None:
        self._heading_ = heading_

    def is_heading_used(self) -> bool:
        return self.is_heading_set()

    def is_heading_set(self) -> bool:
        return not self._heading_ is None

    def reset_heading(self) -> None:
        self._heading_ = None

    @property
    def speed(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._speed_

    @speed.setter
    def speed(self, speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._speed_ = speed_

    def is_speed_used(self) -> bool:
        return self.is_speed_set()

    def is_speed_set(self) -> bool:
        return not self._speed_ is None

    def reset_speed(self) -> None:
        self._speed_ = None

    @property
    def probability(self) -> typing.Optional[nds.core.vehicle.match_probability.MatchProbability]:
        return self._probability_

    @probability.setter
    def probability(self, probability_: typing.Optional[nds.core.vehicle.match_probability.MatchProbability]) -> None:
        self._probability_ = probability_

    def is_probability_used(self) -> bool:
        return self.is_probability_set()

    def is_probability_set(self) -> bool:
        return not self._probability_ is None

    def reset_probability(self) -> None:
        self._probability_ = None

    def init_packing_context(self, zserio_context: PoseGeoMatched.ZserioPackingContext) -> None:
        self._coordinate_.init_packing_context(zserio_context.coordinate)
        if self.is_elevation_used():
            zserio_context.elevation.init(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        if self.is_z_level_used():
            zserio_context.z_level.init(zserio.array.SignedBitFieldArrayTraits(8), self._z_level_)
        if self.is_frc_used():
            zserio_context.frc.init(zserio.array.BitFieldArrayTraits(3), self._frc_)
        if self.is_heading_used():
            zserio_context.heading.init(zserio.array.BitFieldArrayTraits(8), self._heading_)
        if self.is_speed_used():
            zserio_context.speed.init(zserio.array.BitFieldArrayTraits(8), self._speed_)
        if self.is_probability_used():
            self._probability_.init_packing_context(zserio_context.probability)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._coordinate_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._elevation_)
        end_bitposition += 1
        if self.is_z_level_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += 3
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition += self._probability_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoseGeoMatched.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._coordinate_.bitsizeof_packed(zserio_context.coordinate, end_bitposition)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        end_bitposition += 1
        if self.is_z_level_used():
            end_bitposition += zserio_context.z_level.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._z_level_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += zserio_context.frc.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._frc_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition += self._probability_.bitsizeof_packed(zserio_context.probability, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._coordinate_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._elevation_)
        end_bitposition += 1
        if self.is_z_level_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += 3
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition = self._probability_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoseGeoMatched.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._coordinate_.initialize_offsets_packed(zserio_context.coordinate, end_bitposition)
        end_bitposition += 1
        if self.is_elevation_used():
            end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._elevation_)
        end_bitposition += 1
        if self.is_z_level_used():
            end_bitposition += zserio_context.z_level.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._z_level_)
        end_bitposition += 1
        if self.is_frc_used():
            end_bitposition += zserio_context.frc.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._frc_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition = self._probability_.initialize_offsets_packed(zserio_context.probability, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._coordinate_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        if zserio_reader.read_bool():
            self._elevation_ = zserio_reader.read_varint32()
        else:
            self._elevation_ = None
        if zserio_reader.read_bool():
            self._z_level_ = zserio_reader.read_signed_bits(8)
        else:
            self._z_level_ = None
        if zserio_reader.read_bool():
            self._frc_ = zserio_reader.read_bits(3)
        else:
            self._frc_ = None
        if zserio_reader.read_bool():
            self._heading_ = zserio_reader.read_bits(8)
        else:
            self._heading_ = None
        if zserio_reader.read_bool():
            self._speed_ = zserio_reader.read_bits(8)
        else:
            self._speed_ = None
        if zserio_reader.read_bool():
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.from_reader(zserio_reader)
        else:
            self._probability_ = None

    def read_packed(self, zserio_context: PoseGeoMatched.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._coordinate_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.coordinate, zserio_reader, 0)

        if zserio_reader.read_bool():
            self._elevation_ = zserio_context.elevation.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        else:
            self._elevation_ = None

        if zserio_reader.read_bool():
            self._z_level_ = zserio_context.z_level.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)
        else:
            self._z_level_ = None

        if zserio_reader.read_bool():
            self._frc_ = zserio_context.frc.read(zserio.array.BitFieldArrayTraits(3), zserio_reader)
        else:
            self._frc_ = None

        if zserio_reader.read_bool():
            self._heading_ = zserio_context.heading.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._heading_ = None

        if zserio_reader.read_bool():
            self._speed_ = zserio_context.speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._speed_ = None

        if zserio_reader.read_bool():
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.from_reader_packed(zserio_context.probability, zserio_reader)
        else:
            self._probability_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._coordinate_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field PoseGeoMatched.coordinate: "
                                                f"{self._coordinate_.shift} != {0}!")
        self._coordinate_.write(zserio_writer)

        if self.is_elevation_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varint32(self._elevation_)
        else:
            zserio_writer.write_bool(False)

        if self.is_z_level_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_signed_bits(self._z_level_, 8)
        else:
            zserio_writer.write_bool(False)

        if self.is_frc_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._frc_, 3)
        else:
            zserio_writer.write_bool(False)

        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._heading_, 8)
        else:
            zserio_writer.write_bool(False)

        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._speed_, 8)
        else:
            zserio_writer.write_bool(False)

        if self.is_probability_used():
            zserio_writer.write_bool(True)
            self._probability_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PoseGeoMatched.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._coordinate_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field PoseGeoMatched.coordinate: "
                                                f"{self._coordinate_.shift} != {0}!")
        self._coordinate_.write_packed(zserio_context.coordinate, zserio_writer)

        if self.is_elevation_used():
            zserio_writer.write_bool(True)
            zserio_context.elevation.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._elevation_)
        else:
            zserio_writer.write_bool(False)

        if self.is_z_level_used():
            zserio_writer.write_bool(True)
            zserio_context.z_level.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._z_level_)
        else:
            zserio_writer.write_bool(False)

        if self.is_frc_used():
            zserio_writer.write_bool(True)
            zserio_context.frc.write(zserio.array.BitFieldArrayTraits(3), zserio_writer, self._frc_)
        else:
            zserio_writer.write_bool(False)

        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_context.heading.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._heading_)
        else:
            zserio_writer.write_bool(False)

        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_context.speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._speed_)
        else:
            zserio_writer.write_bool(False)

        if self.is_probability_used():
            zserio_writer.write_bool(True)
            self._probability_.write_packed(zserio_context.probability, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._coordinate_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._elevation_ = zserio.array.DeltaContext()
            self._z_level_ = zserio.array.DeltaContext()
            self._frc_ = zserio.array.DeltaContext()
            self._heading_ = zserio.array.DeltaContext()
            self._speed_ = zserio.array.DeltaContext()
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.ZserioPackingContext()

        @property
        def coordinate(self):
            return self._coordinate_

        @property
        def elevation(self):
            return self._elevation_

        @property
        def z_level(self):
            return self._z_level_

        @property
        def frc(self):
            return self._frc_

        @property
        def heading(self):
            return self._heading_

        @property
        def speed(self):
            return self._speed_

        @property
        def probability(self):
            return self._probability_
