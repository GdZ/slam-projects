# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.combustion_consumption_curve
import nds.core.vehicle.consumption_efficiency
import nds.core.vehicle.fuel_liters
import nds.core.vehicle.liters_per_hour

class CombustionConsumption:
    def __init__(
            self,
            current_fuel_supply_: nds.core.vehicle.fuel_liters.FuelLiters = nds.core.vehicle.fuel_liters.FuelLiters(),
            aux_consumption_: typing.Optional[nds.core.vehicle.liters_per_hour.LitersPerHour] = None,
            normal_consumption_: typing.Union[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve, None] = None,
            traffic_consumption_: typing.Optional[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve] = None,
            efficiency_: typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency] = None) -> None:
        self._current_fuel_supply_ = current_fuel_supply_
        self._aux_consumption_ = aux_consumption_
        self._normal_consumption_ = normal_consumption_
        self._traffic_consumption_ = traffic_consumption_
        self._efficiency_ = efficiency_

    @classmethod
    def from_reader(
            cls: typing.Type['CombustionConsumption'],
            zserio_reader: zserio.BitStreamReader) -> 'CombustionConsumption':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['CombustionConsumption'],
            zserio_context: CombustionConsumption.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'CombustionConsumption':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CombustionConsumption):
            return ((self._current_fuel_supply_ == other._current_fuel_supply_) and
                    (not other.is_aux_consumption_used() if not self.is_aux_consumption_used() else (self._aux_consumption_ == other._aux_consumption_)) and
                    (self._normal_consumption_ == other._normal_consumption_) and
                    (not other.is_traffic_consumption_used() if not self.is_traffic_consumption_used() else (self._traffic_consumption_ == other._traffic_consumption_)) and
                    (not other.is_efficiency_used() if not self.is_efficiency_used() else (self._efficiency_ == other._efficiency_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_float32(result, self._current_fuel_supply_)
        if self.is_aux_consumption_used():
            result = zserio.hashcode.calc_hashcode_float32(result, self._aux_consumption_)
        result = zserio.hashcode.calc_hashcode_object(result, self._normal_consumption_)
        if self.is_traffic_consumption_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._traffic_consumption_)
        if self.is_efficiency_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._efficiency_)

        return result

    @property
    def current_fuel_supply(self) -> nds.core.vehicle.fuel_liters.FuelLiters:
        return self._current_fuel_supply_

    @current_fuel_supply.setter
    def current_fuel_supply(self, current_fuel_supply_: nds.core.vehicle.fuel_liters.FuelLiters) -> None:
        self._current_fuel_supply_ = current_fuel_supply_

    @property
    def aux_consumption(self) -> typing.Optional[nds.core.vehicle.liters_per_hour.LitersPerHour]:
        return self._aux_consumption_

    @aux_consumption.setter
    def aux_consumption(self, aux_consumption_: typing.Optional[nds.core.vehicle.liters_per_hour.LitersPerHour]) -> None:
        self._aux_consumption_ = aux_consumption_

    def is_aux_consumption_used(self) -> bool:
        return self.is_aux_consumption_set()

    def is_aux_consumption_set(self) -> bool:
        return not self._aux_consumption_ is None

    def reset_aux_consumption(self) -> None:
        self._aux_consumption_ = None

    @property
    def normal_consumption(self) -> typing.Union[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve, None]:
        return self._normal_consumption_

    @normal_consumption.setter
    def normal_consumption(self, normal_consumption_: typing.Union[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve, None]) -> None:
        self._normal_consumption_ = normal_consumption_

    @property
    def traffic_consumption(self) -> typing.Optional[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve]:
        return self._traffic_consumption_

    @traffic_consumption.setter
    def traffic_consumption(self, traffic_consumption_: typing.Optional[nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve]) -> None:
        self._traffic_consumption_ = traffic_consumption_

    def is_traffic_consumption_used(self) -> bool:
        return self.is_traffic_consumption_set()

    def is_traffic_consumption_set(self) -> bool:
        return not self._traffic_consumption_ is None

    def reset_traffic_consumption(self) -> None:
        self._traffic_consumption_ = None

    @property
    def efficiency(self) -> typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency]:
        return self._efficiency_

    @efficiency.setter
    def efficiency(self, efficiency_: typing.Optional[nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency]) -> None:
        self._efficiency_ = efficiency_

    def is_efficiency_used(self) -> bool:
        return self.is_efficiency_set()

    def is_efficiency_set(self) -> bool:
        return not self._efficiency_ is None

    def reset_efficiency(self) -> None:
        self._efficiency_ = None

    def init_packing_context(self, zserio_context: CombustionConsumption.ZserioPackingContext) -> None:
        self._normal_consumption_.init_packing_context(zserio_context.normal_consumption)
        if self.is_traffic_consumption_used():
            self._traffic_consumption_.init_packing_context(zserio_context.traffic_consumption)
        if self.is_efficiency_used():
            self._efficiency_.init_packing_context(zserio_context.efficiency)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += 16
        end_bitposition += self._normal_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition += self._traffic_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition += self._efficiency_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: CombustionConsumption.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += 16
        end_bitposition += self._normal_consumption_.bitsizeof_packed(zserio_context.normal_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition += self._traffic_consumption_.bitsizeof_packed(zserio_context.traffic_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition += self._efficiency_.bitsizeof_packed(zserio_context.efficiency, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += 16
        end_bitposition = self._normal_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition = self._traffic_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition = self._efficiency_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: CombustionConsumption.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 1
        if self.is_aux_consumption_used():
            end_bitposition += 16
        end_bitposition = self._normal_consumption_.initialize_offsets_packed(zserio_context.normal_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_traffic_consumption_used():
            end_bitposition = self._traffic_consumption_.initialize_offsets_packed(zserio_context.traffic_consumption, end_bitposition)
        end_bitposition += 1
        if self.is_efficiency_used():
            end_bitposition = self._efficiency_.initialize_offsets_packed(zserio_context.efficiency, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._current_fuel_supply_ = zserio_reader.read_float16()
        if zserio_reader.read_bool():
            self._aux_consumption_ = zserio_reader.read_float16()
        else:
            self._aux_consumption_ = None
        self._normal_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._traffic_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.from_reader(zserio_reader)
        else:
            self._traffic_consumption_ = None
        if zserio_reader.read_bool():
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.from_reader(zserio_reader)
        else:
            self._efficiency_ = None

    def read_packed(self, zserio_context: CombustionConsumption.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._current_fuel_supply_ = zserio_reader.read_float16()

        if zserio_reader.read_bool():
            self._aux_consumption_ = zserio_reader.read_float16()
        else:
            self._aux_consumption_ = None

        self._normal_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.from_reader_packed(zserio_context.normal_consumption, zserio_reader)

        if zserio_reader.read_bool():
            self._traffic_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.from_reader_packed(zserio_context.traffic_consumption, zserio_reader)
        else:
            self._traffic_consumption_ = None

        if zserio_reader.read_bool():
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.from_reader_packed(zserio_context.efficiency, zserio_reader)
        else:
            self._efficiency_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_float16(self._current_fuel_supply_)
        if self.is_aux_consumption_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float16(self._aux_consumption_)
        else:
            zserio_writer.write_bool(False)
        self._normal_consumption_.write(zserio_writer)
        if self.is_traffic_consumption_used():
            zserio_writer.write_bool(True)
            self._traffic_consumption_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_efficiency_used():
            zserio_writer.write_bool(True)
            self._efficiency_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: CombustionConsumption.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_float16(self._current_fuel_supply_)

        if self.is_aux_consumption_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_float16(self._aux_consumption_)
        else:
            zserio_writer.write_bool(False)

        self._normal_consumption_.write_packed(zserio_context.normal_consumption, zserio_writer)

        if self.is_traffic_consumption_used():
            zserio_writer.write_bool(True)
            self._traffic_consumption_.write_packed(zserio_context.traffic_consumption, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_efficiency_used():
            zserio_writer.write_bool(True)
            self._efficiency_.write_packed(zserio_context.efficiency, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._normal_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.ZserioPackingContext()
            self._traffic_consumption_ = nds.core.vehicle.combustion_consumption_curve.CombustionConsumptionCurve.ZserioPackingContext()
            self._efficiency_ = nds.core.vehicle.consumption_efficiency.ConsumptionEfficiency.ZserioPackingContext()

        @property
        def normal_consumption(self):
            return self._normal_consumption_

        @property
        def traffic_consumption(self):
            return self._traffic_consumption_

        @property
        def efficiency(self):
            return self._efficiency_
