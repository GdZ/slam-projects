# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.road_character_valued
import nds.core.types.road_form

class RoadTypeSet:
    def __init__(
            self,
            form_: typing.Union[nds.core.types.road_form.RoadForm, None] = None,
            characteristics_: typing.Optional[typing.List[nds.core.types.road_character_valued.RoadCharacterValued]] = None) -> None:
        self._form_ = form_
        if characteristics_ is None:
            self._characteristics_ = None
        else:
            self._characteristics_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_characteristics()), characteristics_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['RoadTypeSet'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadTypeSet':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadTypeSet'],
            zserio_context: RoadTypeSet.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadTypeSet':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadTypeSet):
            return ((self._form_ == other._form_) and
                    (not other.is_characteristics_used() if not self.is_characteristics_used() else (self._characteristics_ == other._characteristics_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._form_)
        if self.is_characteristics_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._characteristics_)

        return result

    @property
    def form(self) -> typing.Union[nds.core.types.road_form.RoadForm, None]:
        return self._form_

    @form.setter
    def form(self, form_: typing.Union[nds.core.types.road_form.RoadForm, None]) -> None:
        self._form_ = form_

    @property
    def characteristics(self) -> typing.Optional[typing.List[nds.core.types.road_character_valued.RoadCharacterValued]]:
        return None if self._characteristics_ is None else self._characteristics_.raw_array

    @characteristics.setter
    def characteristics(self, characteristics_: typing.Optional[typing.List[nds.core.types.road_character_valued.RoadCharacterValued]]) -> None:
        if characteristics_ is None:
            self._characteristics_ = None
        else:
            self._characteristics_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_characteristics()), characteristics_, is_auto=True)

    def is_characteristics_used(self) -> bool:
        return self.is_characteristics_set()

    def is_characteristics_set(self) -> bool:
        return not self._characteristics_ is None

    def reset_characteristics(self) -> None:
        self._characteristics_ = None

    def init_packing_context(self, zserio_context: RoadTypeSet.ZserioPackingContext) -> None:
        self._form_.init_packing_context(zserio_context.form)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._form_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_characteristics_used():
            end_bitposition += self._characteristics_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadTypeSet.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._form_.bitsizeof_packed(zserio_context.form, end_bitposition)
        end_bitposition += 1
        if self.is_characteristics_used():
            end_bitposition += self._characteristics_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._form_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_characteristics_used():
            end_bitposition = self._characteristics_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadTypeSet.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._form_.initialize_offsets_packed(zserio_context.form, end_bitposition)
        end_bitposition += 1
        if self.is_characteristics_used():
            end_bitposition = self._characteristics_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._form_ = nds.core.types.road_form.RoadForm.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._characteristics_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_characteristics()), zserio_reader, is_auto=True)
        else:
            self._characteristics_ = None

    def read_packed(self, zserio_context: RoadTypeSet.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._form_ = nds.core.types.road_form.RoadForm.from_reader_packed(zserio_context.form, zserio_reader)

        if zserio_reader.read_bool():
            self._characteristics_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_characteristics()), zserio_reader, is_auto=True)
        else:
            self._characteristics_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._form_.write(zserio_writer)
        if self.is_characteristics_used():
            zserio_writer.write_bool(True)
            self._characteristics_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: RoadTypeSet.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._form_.write_packed(zserio_context.form, zserio_writer)

        if self.is_characteristics_used():
            zserio_writer.write_bool(True)
            self._characteristics_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._form_ = zserio.array.DeltaContext()

        @property
        def form(self):
            return self._form_

    class _ZserioElementFactory_characteristics:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_character_valued.RoadCharacterValued:
            del zserio_index
            return nds.core.types.road_character_valued.RoadCharacterValued.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.road_character_valued.RoadCharacterValued.ZserioPackingContext:
            return nds.core.types.road_character_valued.RoadCharacterValued.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.road_character_valued.RoadCharacterValued.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.road_character_valued.RoadCharacterValued:
            del zserio_index
            return nds.core.types.road_character_valued.RoadCharacterValued.from_reader_packed(zserio_context, zserio_reader)
