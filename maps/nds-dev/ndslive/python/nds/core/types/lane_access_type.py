# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class LaneAccessType:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['LaneAccessType'], value: int) -> 'LaneAccessType':
        if value < 0 or value > 536870911:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'LaneAccessType' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['LaneAccessType'], reader: zserio.BitStreamReader) -> 'LaneAccessType':
        instance = cls()
        instance._value = reader.read_varuint32()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['LaneAccessType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'LaneAccessType':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt32ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LaneAccessType):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & LaneAccessType.Values.EXPRESS_LANE) == LaneAccessType.Values.EXPRESS_LANE:
            result += "EXPRESS_LANE" if not result else " | EXPRESS_LANE"
        if (self & LaneAccessType.Values.TOLL_LANE) == LaneAccessType.Values.TOLL_LANE:
            result += "TOLL_LANE" if not result else " | TOLL_LANE"
        if (self & LaneAccessType.Values.SLOW_LANE) == LaneAccessType.Values.SLOW_LANE:
            result += "SLOW_LANE" if not result else " | SLOW_LANE"
        if (self & LaneAccessType.Values.CARPOOL_LANE) == LaneAccessType.Values.CARPOOL_LANE:
            result += "CARPOOL_LANE" if not result else " | CARPOOL_LANE"
        if (self & LaneAccessType.Values.REGULATED_ACCESS_LANE) == LaneAccessType.Values.REGULATED_ACCESS_LANE:
            result += "REGULATED_ACCESS_LANE" if not result else " | REGULATED_ACCESS_LANE"
        if (self & LaneAccessType.Values.BICYCLE_LANE) == LaneAccessType.Values.BICYCLE_LANE:
            result += "BICYCLE_LANE" if not result else " | BICYCLE_LANE"
        if (self & LaneAccessType.Values.BUS_LANE) == LaneAccessType.Values.BUS_LANE:
            result += "BUS_LANE" if not result else " | BUS_LANE"
        if (self & LaneAccessType.Values.TRAM_LANE) == LaneAccessType.Values.TRAM_LANE:
            result += "TRAM_LANE" if not result else " | TRAM_LANE"
        if (self & LaneAccessType.Values.PASSING_LANE) == LaneAccessType.Values.PASSING_LANE:
            result += "PASSING_LANE" if not result else " | PASSING_LANE"
        if (self & LaneAccessType.Values.DRIVABLE_SHOULDER_LANE) == LaneAccessType.Values.DRIVABLE_SHOULDER_LANE:
            result += "DRIVABLE_SHOULDER_LANE" if not result else " | DRIVABLE_SHOULDER_LANE"
        if (self & LaneAccessType.Values.SOFT_SHOULDER_LANE) == LaneAccessType.Values.SOFT_SHOULDER_LANE:
            result += "SOFT_SHOULDER_LANE" if not result else " | SOFT_SHOULDER_LANE"
        if (self & LaneAccessType.Values.EMERGENCY_SHOULDER_LANE) == LaneAccessType.Values.EMERGENCY_SHOULDER_LANE:
            result += "EMERGENCY_SHOULDER_LANE" if not result else " | EMERGENCY_SHOULDER_LANE"
        if (self & LaneAccessType.Values.EMERGENCY_SHOULDER_PARKING_BAY) == LaneAccessType.Values.EMERGENCY_SHOULDER_PARKING_BAY:
            result += "EMERGENCY_SHOULDER_PARKING_BAY" if not result else " | EMERGENCY_SHOULDER_PARKING_BAY"
        if (self & LaneAccessType.Values.TAXI_LANE) == LaneAccessType.Values.TAXI_LANE:
            result += "TAXI_LANE" if not result else " | TAXI_LANE"
        if (self & LaneAccessType.Values.REVERSIBLE_LANE) == LaneAccessType.Values.REVERSIBLE_LANE:
            result += "REVERSIBLE_LANE" if not result else " | REVERSIBLE_LANE"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'LaneAccessType') -> 'LaneAccessType':
        return LaneAccessType.from_value(self._value | other._value)

    def __and__(self, other: 'LaneAccessType') -> 'LaneAccessType':
        return LaneAccessType.from_value(self._value & other._value)

    def __xor__(self, other: 'LaneAccessType') -> 'LaneAccessType':
        return LaneAccessType.from_value(self._value ^ other._value)

    def __invert__(self) -> 'LaneAccessType':
        return LaneAccessType.from_value(~self._value & 536870911)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt32ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint32(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt32ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint32(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt32ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        EXPRESS_LANE: 'LaneAccessType' = None
        TOLL_LANE: 'LaneAccessType' = None
        SLOW_LANE: 'LaneAccessType' = None
        CARPOOL_LANE: 'LaneAccessType' = None
        REGULATED_ACCESS_LANE: 'LaneAccessType' = None
        BICYCLE_LANE: 'LaneAccessType' = None
        BUS_LANE: 'LaneAccessType' = None
        TRAM_LANE: 'LaneAccessType' = None
        PASSING_LANE: 'LaneAccessType' = None
        DRIVABLE_SHOULDER_LANE: 'LaneAccessType' = None
        SOFT_SHOULDER_LANE: 'LaneAccessType' = None
        EMERGENCY_SHOULDER_LANE: 'LaneAccessType' = None
        EMERGENCY_SHOULDER_PARKING_BAY: 'LaneAccessType' = None
        TAXI_LANE: 'LaneAccessType' = None
        REVERSIBLE_LANE: 'LaneAccessType' = None

LaneAccessType.Values.EXPRESS_LANE = LaneAccessType.from_value(1)
LaneAccessType.Values.TOLL_LANE = LaneAccessType.from_value(2)
LaneAccessType.Values.SLOW_LANE = LaneAccessType.from_value(4)
LaneAccessType.Values.CARPOOL_LANE = LaneAccessType.from_value(8)
LaneAccessType.Values.REGULATED_ACCESS_LANE = LaneAccessType.from_value(16)
LaneAccessType.Values.BICYCLE_LANE = LaneAccessType.from_value(32)
LaneAccessType.Values.BUS_LANE = LaneAccessType.from_value(64)
LaneAccessType.Values.TRAM_LANE = LaneAccessType.from_value(128)
LaneAccessType.Values.PASSING_LANE = LaneAccessType.from_value(256)
LaneAccessType.Values.DRIVABLE_SHOULDER_LANE = LaneAccessType.from_value(512)
LaneAccessType.Values.SOFT_SHOULDER_LANE = LaneAccessType.from_value(1024)
LaneAccessType.Values.EMERGENCY_SHOULDER_LANE = LaneAccessType.from_value(2048)
LaneAccessType.Values.EMERGENCY_SHOULDER_PARKING_BAY = LaneAccessType.from_value(4096)
LaneAccessType.Values.TAXI_LANE = LaneAccessType.from_value(8192)
LaneAccessType.Values.REVERSIBLE_LANE = LaneAccessType.from_value(16384)
