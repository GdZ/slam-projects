# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.packed_tile_id

class TileIdList:
    def __init__(
            self,
            id_: typing.List[nds.core.types.packed_tile_id.PackedTileId] = None) -> None:
        self._id_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(32), id_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TileIdList'],
            zserio_reader: zserio.BitStreamReader) -> 'TileIdList':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TileIdList'],
            zserio_context: TileIdList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TileIdList':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TileIdList):
            return (self._id_ == other._id_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._id_)

        return result

    @property
    def id(self) -> typing.List[nds.core.types.packed_tile_id.PackedTileId]:
        return self._id_.raw_array

    @id.setter
    def id(self, id_: typing.List[nds.core.types.packed_tile_id.PackedTileId]) -> None:
        self._id_ = zserio.array.Array(zserio.array.SignedBitFieldArrayTraits(32), id_, is_auto=True)

    def init_packing_context(self, zserio_context: TileIdList.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TileIdList.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._id_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TileIdList.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._id_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio.array.Array.from_reader_packed(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: TileIdList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._id_ = zserio.array.Array.from_reader_packed(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._id_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: TileIdList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._id_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass
