# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Iso3166Codes:
    def __init__(
            self,
            iso_country_code_: str = str(),
            iso_sub_country_code_: typing.Optional[str] = None) -> None:
        self._iso_country_code_ = iso_country_code_
        self._iso_sub_country_code_ = iso_sub_country_code_

    @classmethod
    def from_reader(
            cls: typing.Type['Iso3166Codes'],
            zserio_reader: zserio.BitStreamReader) -> 'Iso3166Codes':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Iso3166Codes):
            return ((self._iso_country_code_ == other._iso_country_code_) and
                    (not other.is_iso_sub_country_code_used() if not self.is_iso_sub_country_code_used() else (self._iso_sub_country_code_ == other._iso_sub_country_code_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._iso_country_code_)
        if self.is_iso_sub_country_code_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._iso_sub_country_code_)

        return result

    @property
    def iso_country_code(self) -> str:
        return self._iso_country_code_

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code_: str) -> None:
        self._iso_country_code_ = iso_country_code_

    @property
    def iso_sub_country_code(self) -> typing.Optional[str]:
        return self._iso_sub_country_code_

    @iso_sub_country_code.setter
    def iso_sub_country_code(self, iso_sub_country_code_: typing.Optional[str]) -> None:
        self._iso_sub_country_code_ = iso_sub_country_code_

    def is_iso_sub_country_code_used(self) -> bool:
        return self.is_iso_sub_country_code_set()

    def is_iso_sub_country_code_set(self) -> bool:
        return not self._iso_sub_country_code_ is None

    def reset_iso_sub_country_code(self) -> None:
        self._iso_sub_country_code_ = None

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        end_bitposition += 1
        if self.is_iso_sub_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_sub_country_code_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        end_bitposition += 1
        if self.is_iso_sub_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_sub_country_code_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._iso_country_code_ = zserio_reader.read_string()
        if zserio_reader.read_bool():
            self._iso_sub_country_code_ = zserio_reader.read_string()
        else:
            self._iso_sub_country_code_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._iso_country_code_)
        if self.is_iso_sub_country_code_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_string(self._iso_sub_country_code_)
        else:
            zserio_writer.write_bool(False)
