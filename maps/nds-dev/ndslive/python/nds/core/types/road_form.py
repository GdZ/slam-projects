# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RoadForm(zserio.Enum):
    ANY = 0
    NORMAL = 1
    DUAL_CARRIAGEWAY = 2
    SLIP_ROAD = 3
    RAMP = 4
    INTERCHANGE = 5
    ROUNDABOUT = 6
    ROUNDABOUT_INTERIOR = 7
    SQUARE = 8
    PEDESTRIAN_WAY = 9
    SPECIAL_TRAFFIC_FIGURE = 10
    PARALLEL_ROAD = 11
    SERVICE_ROAD = 12
    MINI_ROUNDABOUT = 13

    @classmethod
    def from_name(cls: typing.Type['RoadForm'], item_name: str) -> 'RoadForm':
        if item_name == 'ANY':
            item = RoadForm.ANY
        elif item_name == 'NORMAL':
            item = RoadForm.NORMAL
        elif item_name == 'DUAL_CARRIAGEWAY':
            item = RoadForm.DUAL_CARRIAGEWAY
        elif item_name == 'SLIP_ROAD':
            item = RoadForm.SLIP_ROAD
        elif item_name == 'RAMP':
            item = RoadForm.RAMP
        elif item_name == 'INTERCHANGE':
            item = RoadForm.INTERCHANGE
        elif item_name == 'ROUNDABOUT':
            item = RoadForm.ROUNDABOUT
        elif item_name == 'ROUNDABOUT_INTERIOR':
            item = RoadForm.ROUNDABOUT_INTERIOR
        elif item_name == 'SQUARE':
            item = RoadForm.SQUARE
        elif item_name == 'PEDESTRIAN_WAY':
            item = RoadForm.PEDESTRIAN_WAY
        elif item_name == 'SPECIAL_TRAFFIC_FIGURE':
            item = RoadForm.SPECIAL_TRAFFIC_FIGURE
        elif item_name == 'PARALLEL_ROAD':
            item = RoadForm.PARALLEL_ROAD
        elif item_name == 'SERVICE_ROAD':
            item = RoadForm.SERVICE_ROAD
        elif item_name == 'MINI_ROUNDABOUT':
            item = RoadForm.MINI_ROUNDABOUT
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RoadForm'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RoadForm'], reader: zserio.BitStreamReader) -> 'RoadForm':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['RoadForm'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RoadForm':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
