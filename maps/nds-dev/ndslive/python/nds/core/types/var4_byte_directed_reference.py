# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Var4ByteDirectedReference:
    def __init__(
            self,
            value_: int = int()) -> None:
        self._value_ = value_

    @classmethod
    def from_reader(
            cls: typing.Type['Var4ByteDirectedReference'],
            zserio_reader: zserio.BitStreamReader) -> 'Var4ByteDirectedReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Var4ByteDirectedReference'],
            zserio_context: Var4ByteDirectedReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Var4ByteDirectedReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Var4ByteDirectedReference):
            return (self._value_ == other._value_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value_)

        return result

    @property
    def value(self) -> int:
        return self._value_

    @value.setter
    def value(self, value_: int) -> None:
        self._value_ = value_

    def is_positive(self) -> bool:
        return (True) if ((self._value_ > 0)) else (False)

    def is_negative(self) -> bool:
        return (True) if ((self._value_ < 0)) else (False)

    def get_id(self) -> int:
        return ((self._value_ * -1)) if ((self._value_ < 0)) else (self._value_)

    def init_packing_context(self, zserio_context: Var4ByteDirectedReference.ZserioPackingContext) -> None:
        zserio_context.value.init(zserio.array.VarInt32ArrayTraits(), self._value_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._value_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Var4ByteDirectedReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.value.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._value_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._value_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Var4ByteDirectedReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.value.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._value_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._value_ = zserio_reader.read_varint32()
        # check constraint
        if not ((self._value_ >= -268435455 and self._value_ < 0) or (self._value_ > 0 and self._value_ <= 268435455)):
            raise zserio.PythonRuntimeException("Constraint violated for field Var4ByteDirectedReference.value!")

    def read_packed(self, zserio_context: Var4ByteDirectedReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._value_ = zserio_context.value.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        # check constraint
        if not ((self._value_ >= -268435455 and self._value_ < 0) or (self._value_ > 0 and self._value_ <= 268435455)):
            raise zserio.PythonRuntimeException("Constraint violated for field Var4ByteDirectedReference.value!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not ((self._value_ >= -268435455 and self._value_ < 0) or (self._value_ > 0 and self._value_ <= 268435455)):
            raise zserio.PythonRuntimeException("Constraint violated for field Var4ByteDirectedReference.value!")
        zserio_writer.write_varint32(self._value_)

    def write_packed(self, zserio_context: Var4ByteDirectedReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not ((self._value_ >= -268435455 and self._value_ < 0) or (self._value_ > 0 and self._value_ <= 268435455)):
            raise zserio.PythonRuntimeException("Constraint violated for field Var4ByteDirectedReference.value!")
        zserio_context.value.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._value_)

    class ZserioPackingContext:
        def __init__(self):
            self._value_ = zserio.array.DeltaContext()

        @property
        def value(self):
            return self._value_
