# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.road_character

class RoadCharacterValued:
    def __init__(
            self,
            character_: typing.Union[nds.core.types.road_character.RoadCharacter, None] = None,
            value_: bool = bool()) -> None:
        self._character_ = character_
        self._value_ = value_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadCharacterValued'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadCharacterValued':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadCharacterValued'],
            zserio_context: RoadCharacterValued.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadCharacterValued':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadCharacterValued):
            return ((self._character_ == other._character_) and
                    (self._value_ == other._value_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._character_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._value_)

        return result

    @property
    def character(self) -> typing.Union[nds.core.types.road_character.RoadCharacter, None]:
        return self._character_

    @character.setter
    def character(self, character_: typing.Union[nds.core.types.road_character.RoadCharacter, None]) -> None:
        self._character_ = character_

    @property
    def value(self) -> bool:
        return self._value_

    @value.setter
    def value(self, value_: bool) -> None:
        self._value_ = value_

    def init_packing_context(self, zserio_context: RoadCharacterValued.ZserioPackingContext) -> None:
        self._character_.init_packing_context(zserio_context.character)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._character_.bitsizeof(end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadCharacterValued.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._character_.bitsizeof_packed(zserio_context.character, end_bitposition)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._character_.initialize_offsets(end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadCharacterValued.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._character_.initialize_offsets_packed(zserio_context.character, end_bitposition)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._character_ = nds.core.types.road_character.RoadCharacter.from_reader(zserio_reader)
        self._value_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: RoadCharacterValued.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._character_ = nds.core.types.road_character.RoadCharacter.from_reader_packed(zserio_context.character, zserio_reader)

        self._value_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._character_.write(zserio_writer)
        zserio_writer.write_bool(self._value_)

    def write_packed(self, zserio_context: RoadCharacterValued.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._character_.write_packed(zserio_context.character, zserio_writer)

        zserio_writer.write_bool(self._value_)

    class ZserioPackingContext:
        def __init__(self):
            self._character_ = zserio.array.DeltaContext()

        @property
        def character(self):
            return self._character_
