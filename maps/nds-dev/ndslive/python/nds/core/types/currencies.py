# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.currency

class Currencies:
    def __init__(
            self,
            num_currencies_: int = int(),
            currencies_: typing.List[nds.core.types.currency.Currency] = None) -> None:
        self._num_currencies_ = num_currencies_
        self._currencies_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_currencies()), currencies_)

    @classmethod
    def from_reader(
            cls: typing.Type['Currencies'],
            zserio_reader: zserio.BitStreamReader) -> 'Currencies':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Currencies'],
            zserio_context: Currencies.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Currencies':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Currencies):
            return ((self._num_currencies_ == other._num_currencies_) and
                    (self._currencies_ == other._currencies_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_currencies_)
        result = zserio.hashcode.calc_hashcode_object(result, self._currencies_)

        return result

    @property
    def num_currencies(self) -> int:
        return self._num_currencies_

    @num_currencies.setter
    def num_currencies(self, num_currencies_: int) -> None:
        self._num_currencies_ = num_currencies_

    @property
    def currencies(self) -> typing.List[nds.core.types.currency.Currency]:
        return self._currencies_.raw_array

    @currencies.setter
    def currencies(self, currencies_: typing.List[nds.core.types.currency.Currency]) -> None:
        self._currencies_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_currencies()), currencies_)

    def init_packing_context(self, zserio_context: Currencies.ZserioPackingContext) -> None:
        zserio_context.num_currencies.init(zserio.array.BitFieldArrayTraits(8), self._num_currencies_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += self._currencies_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Currencies.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_currencies.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_currencies_)
        end_bitposition += self._currencies_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition = self._currencies_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Currencies.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_currencies.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_currencies_)
        end_bitposition = self._currencies_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_currencies_ = zserio_reader.read_bits(8)
        self._currencies_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_currencies()), zserio_reader, self._num_currencies_)

    def read_packed(self, zserio_context: Currencies.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_currencies_ = zserio_context.num_currencies.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._currencies_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_currencies()), zserio_reader, self._num_currencies_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_currencies_, 8)

        # check array length
        if len(self._currencies_) != (self._num_currencies_):
            raise zserio.PythonRuntimeException("Wrong array length for field Currencies.currencies: "
                                                f"{len(self._currencies_)} != {self._num_currencies_}!")
        self._currencies_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: Currencies.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_currencies.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_currencies_)

        # check array length
        if len(self._currencies_) != (self._num_currencies_):
            raise zserio.PythonRuntimeException("Wrong array length for field Currencies.currencies: "
                                                f"{len(self._currencies_)} != {self._num_currencies_}!")
        self._currencies_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_currencies_ = zserio.array.DeltaContext()

        @property
        def num_currencies(self):
            return self._num_currencies_

    class _ZserioElementFactory_currencies:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.currency.Currency:
            del zserio_index
            return nds.core.types.currency.Currency.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.currency.Currency:
            del zserio_index
            return nds.core.types.currency.Currency.from_reader_packed(zserio_context, zserio_reader)
