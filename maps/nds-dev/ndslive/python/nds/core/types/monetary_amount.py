# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.currency

class MonetaryAmount:
    def __init__(
            self,
            amount_: int = int(),
            currency_: typing.Union[nds.core.types.currency.Currency, None] = None) -> None:
        self._amount_ = amount_
        self._currency_ = currency_

    @classmethod
    def from_reader(
            cls: typing.Type['MonetaryAmount'],
            zserio_reader: zserio.BitStreamReader) -> 'MonetaryAmount':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MonetaryAmount'],
            zserio_context: MonetaryAmount.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MonetaryAmount':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MonetaryAmount):
            return ((self._amount_ == other._amount_) and
                    (self._currency_ == other._currency_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._amount_)
        result = zserio.hashcode.calc_hashcode_object(result, self._currency_)

        return result

    @property
    def amount(self) -> int:
        return self._amount_

    @amount.setter
    def amount(self, amount_: int) -> None:
        self._amount_ = amount_

    @property
    def currency(self) -> typing.Union[nds.core.types.currency.Currency, None]:
        return self._currency_

    @currency.setter
    def currency(self, currency_: typing.Union[nds.core.types.currency.Currency, None]) -> None:
        self._currency_ = currency_

    def init_packing_context(self, zserio_context: MonetaryAmount.ZserioPackingContext) -> None:
        zserio_context.amount.init(zserio.array.VarIntArrayTraits(), self._amount_)
        self._currency_.init_packing_context(zserio_context.currency)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint(self._amount_)
        end_bitposition += self._currency_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MonetaryAmount.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.amount.bitsizeof(zserio.array.VarIntArrayTraits(), self._amount_)
        end_bitposition += self._currency_.bitsizeof_packed(zserio_context.currency, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varint(self._amount_)
        end_bitposition = self._currency_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MonetaryAmount.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.amount.bitsizeof(zserio.array.VarIntArrayTraits(), self._amount_)
        end_bitposition = self._currency_.initialize_offsets_packed(zserio_context.currency, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._amount_ = zserio_reader.read_varint()
        self._currency_ = nds.core.types.currency.Currency.from_reader(zserio_reader)

    def read_packed(self, zserio_context: MonetaryAmount.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._amount_ = zserio_context.amount.read(zserio.array.VarIntArrayTraits(), zserio_reader)

        self._currency_ = nds.core.types.currency.Currency.from_reader_packed(zserio_context.currency, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varint(self._amount_)
        self._currency_.write(zserio_writer)

    def write_packed(self, zserio_context: MonetaryAmount.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.amount.write(zserio.array.VarIntArrayTraits(), zserio_writer, self._amount_)

        self._currency_.write_packed(zserio_context.currency, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._amount_ = zserio.array.DeltaContext()
            self._currency_ = zserio.array.DeltaContext()

        @property
        def amount(self):
            return self._amount_

        @property
        def currency(self):
            return self._currency_
