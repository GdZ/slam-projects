# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TimeStamp:
    def __init__(
            self,
            seconds_: int = int(),
            nanoseconds_: int = int()) -> None:
        self._seconds_ = seconds_
        self._nanoseconds_ = nanoseconds_

    @classmethod
    def from_reader(
            cls: typing.Type['TimeStamp'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeStamp':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeStamp'],
            zserio_context: TimeStamp.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeStamp':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeStamp):
            return ((self._seconds_ == other._seconds_) and
                    (self._nanoseconds_ == other._nanoseconds_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._seconds_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._nanoseconds_)

        return result

    @property
    def seconds(self) -> int:
        return self._seconds_

    @seconds.setter
    def seconds(self, seconds_: int) -> None:
        self._seconds_ = seconds_

    @property
    def nanoseconds(self) -> int:
        return self._nanoseconds_

    @nanoseconds.setter
    def nanoseconds(self, nanoseconds_: int) -> None:
        self._nanoseconds_ = nanoseconds_

    def init_packing_context(self, zserio_context: TimeStamp.ZserioPackingContext) -> None:
        zserio_context.seconds.init(zserio.array.VarUIntArrayTraits(), self._seconds_)
        zserio_context.nanoseconds.init(zserio.array.VarUIntArrayTraits(), self._nanoseconds_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._seconds_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._nanoseconds_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeStamp.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.seconds.bitsizeof(zserio.array.VarUIntArrayTraits(), self._seconds_)
        end_bitposition += zserio_context.nanoseconds.bitsizeof(zserio.array.VarUIntArrayTraits(), self._nanoseconds_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._seconds_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._nanoseconds_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeStamp.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.seconds.bitsizeof(zserio.array.VarUIntArrayTraits(), self._seconds_)
        end_bitposition += zserio_context.nanoseconds.bitsizeof(zserio.array.VarUIntArrayTraits(), self._nanoseconds_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._seconds_ = zserio_reader.read_varuint()
        self._nanoseconds_ = zserio_reader.read_varuint()

    def read_packed(self, zserio_context: TimeStamp.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._seconds_ = zserio_context.seconds.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._nanoseconds_ = zserio_context.nanoseconds.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._seconds_)
        zserio_writer.write_varuint(self._nanoseconds_)

    def write_packed(self, zserio_context: TimeStamp.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.seconds.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._seconds_)

        zserio_context.nanoseconds.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._nanoseconds_)

    class ZserioPackingContext:
        def __init__(self):
            self._seconds_ = zserio.array.DeltaContext()
            self._nanoseconds_ = zserio.array.DeltaContext()

        @property
        def seconds(self):
            return self._seconds_

        @property
        def nanoseconds(self):
            return self._nanoseconds_
