# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TrafficEnforcementZoneType(zserio.Enum):
    AVERAGE_SPEED_ZONE = 0
    SPEED_ENFORCEMENT_ZONE = 1
    DANGER_ZONE = 2
    MOBILE_SPEED_HOTSPOT_ZONE = 3
    ACCIDENT_BLACKSPOT_ZONE = 4
    RISK_ZONE = 5

    @classmethod
    def from_name(cls: typing.Type['TrafficEnforcementZoneType'], item_name: str) -> 'TrafficEnforcementZoneType':
        if item_name == 'AVERAGE_SPEED_ZONE':
            item = TrafficEnforcementZoneType.AVERAGE_SPEED_ZONE
        elif item_name == 'SPEED_ENFORCEMENT_ZONE':
            item = TrafficEnforcementZoneType.SPEED_ENFORCEMENT_ZONE
        elif item_name == 'DANGER_ZONE':
            item = TrafficEnforcementZoneType.DANGER_ZONE
        elif item_name == 'MOBILE_SPEED_HOTSPOT_ZONE':
            item = TrafficEnforcementZoneType.MOBILE_SPEED_HOTSPOT_ZONE
        elif item_name == 'ACCIDENT_BLACKSPOT_ZONE':
            item = TrafficEnforcementZoneType.ACCIDENT_BLACKSPOT_ZONE
        elif item_name == 'RISK_ZONE':
            item = TrafficEnforcementZoneType.RISK_ZONE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'TrafficEnforcementZoneType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['TrafficEnforcementZoneType'], reader: zserio.BitStreamReader) -> 'TrafficEnforcementZoneType':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['TrafficEnforcementZoneType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'TrafficEnforcementZoneType':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
