# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.packaging.delta_encoding_type
import nds.core.types.version_id

import nds.core.packaging.layer_deleted
import nds.core.packaging.no_delta

class DeltaEncodingDetails:
    def __init__(
            self,
            delta_encoding_type_: nds.core.packaging.delta_encoding_type.DeltaEncodingType = nds.core.packaging.delta_encoding_type.DeltaEncodingType(),
            source_version_: typing.Optional[nds.core.types.version_id.VersionId] = None) -> None:
        self._delta_encoding_type_ = delta_encoding_type_
        self._source_version_ = source_version_

    @classmethod
    def from_reader(
            cls: typing.Type['DeltaEncodingDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'DeltaEncodingDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DeltaEncodingDetails'],
            zserio_context: DeltaEncodingDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DeltaEncodingDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DeltaEncodingDetails):
            return ((self._delta_encoding_type_ == other._delta_encoding_type_) and
                    (not other.is_source_version_used() if not self.is_source_version_used() else (self._source_version_ == other._source_version_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._delta_encoding_type_)
        if self.is_source_version_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._source_version_)

        return result

    @property
    def delta_encoding_type(self) -> nds.core.packaging.delta_encoding_type.DeltaEncodingType:
        return self._delta_encoding_type_

    @delta_encoding_type.setter
    def delta_encoding_type(self, delta_encoding_type_: nds.core.packaging.delta_encoding_type.DeltaEncodingType) -> None:
        self._delta_encoding_type_ = delta_encoding_type_

    @property
    def source_version(self) -> typing.Optional[nds.core.types.version_id.VersionId]:
        return self._source_version_

    @source_version.setter
    def source_version(self, source_version_: typing.Optional[nds.core.types.version_id.VersionId]) -> None:
        self._source_version_ = source_version_

    def is_source_version_used(self) -> bool:
        return self._delta_encoding_type_ != nds.core.packaging.no_delta.NO_DELTA and self._delta_encoding_type_ != nds.core.packaging.layer_deleted.LAYER_DELETED

    def is_source_version_set(self) -> bool:
        return not self._source_version_ is None

    def reset_source_version(self) -> None:
        self._source_version_ = None

    def init_packing_context(self, zserio_context: DeltaEncodingDetails.ZserioPackingContext) -> None:
        zserio_context.delta_encoding_type.init(zserio.array.BitFieldArrayTraits(8), self._delta_encoding_type_)
        if self.is_source_version_used():
            zserio_context.source_version.init(zserio.array.VarUIntArrayTraits(), self._source_version_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        if self.is_source_version_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._source_version_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DeltaEncodingDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.delta_encoding_type.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._delta_encoding_type_)
        if self.is_source_version_used():
            end_bitposition += zserio_context.source_version.bitsizeof(zserio.array.VarUIntArrayTraits(), self._source_version_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        if self.is_source_version_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._source_version_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DeltaEncodingDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.delta_encoding_type.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._delta_encoding_type_)
        if self.is_source_version_used():
            end_bitposition += zserio_context.source_version.bitsizeof(zserio.array.VarUIntArrayTraits(), self._source_version_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._delta_encoding_type_ = zserio_reader.read_bits(8)
        if self.is_source_version_used():
            self._source_version_ = zserio_reader.read_varuint()
        else:
            self._source_version_ = None

    def read_packed(self, zserio_context: DeltaEncodingDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._delta_encoding_type_ = zserio_context.delta_encoding_type.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        if self.is_source_version_used():
            self._source_version_ = zserio_context.source_version.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._source_version_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._delta_encoding_type_, 8)
        if self.is_source_version_used():
            zserio_writer.write_varuint(self._source_version_)

    def write_packed(self, zserio_context: DeltaEncodingDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.delta_encoding_type.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._delta_encoding_type_)

        if self.is_source_version_used():
            zserio_context.source_version.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._source_version_)

    class ZserioPackingContext:
        def __init__(self):
            self._delta_encoding_type_ = zserio.array.DeltaContext()
            self._source_version_ = zserio.array.DeltaContext()

        @property
        def delta_encoding_type(self):
            return self._delta_encoding_type_

        @property
        def source_version(self):
            return self._source_version_
