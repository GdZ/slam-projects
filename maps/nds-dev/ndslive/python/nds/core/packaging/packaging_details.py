# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.packaging.compression_type
import nds.core.packaging.delta_encoding_details
import nds.core.packaging.encryption_key_id
import nds.core.packaging.encryption_type
import nds.core.packaging.signature_id

import nds.core.packaging.no_compression
import nds.core.packaging.no_encryption

class PackagingDetails:
    def __init__(
            self,
            signature_id_: nds.core.packaging.signature_id.SignatureId = nds.core.packaging.signature_id.SignatureId(),
            compression_type_: nds.core.packaging.compression_type.CompressionType = nds.core.packaging.compression_type.CompressionType(),
            encryption_type_: nds.core.packaging.encryption_type.EncryptionType = nds.core.packaging.encryption_type.EncryptionType(),
            encryption_key_id_: typing.Optional[nds.core.packaging.encryption_key_id.EncryptionKeyId] = None,
            delta_encoding_details_: typing.Union[nds.core.packaging.delta_encoding_details.DeltaEncodingDetails, None] = None) -> None:
        self._signature_id_ = signature_id_
        self._compression_type_ = compression_type_
        self._encryption_type_ = encryption_type_
        self._encryption_key_id_ = encryption_key_id_
        self._delta_encoding_details_ = delta_encoding_details_

    @classmethod
    def from_reader(
            cls: typing.Type['PackagingDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'PackagingDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PackagingDetails'],
            zserio_context: PackagingDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PackagingDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PackagingDetails):
            return ((self._signature_id_ == other._signature_id_) and
                    (self._compression_type_ == other._compression_type_) and
                    (self._encryption_type_ == other._encryption_type_) and
                    (not other.is_encryption_key_id_used() if not self.is_encryption_key_id_used() else (self._encryption_key_id_ == other._encryption_key_id_)) and
                    (self._delta_encoding_details_ == other._delta_encoding_details_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._signature_id_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._compression_type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._encryption_type_)
        if self.is_encryption_key_id_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._encryption_key_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._delta_encoding_details_)

        return result

    @property
    def signature_id(self) -> nds.core.packaging.signature_id.SignatureId:
        return self._signature_id_

    @signature_id.setter
    def signature_id(self, signature_id_: nds.core.packaging.signature_id.SignatureId) -> None:
        self._signature_id_ = signature_id_

    @property
    def compression_type(self) -> nds.core.packaging.compression_type.CompressionType:
        return self._compression_type_

    @compression_type.setter
    def compression_type(self, compression_type_: nds.core.packaging.compression_type.CompressionType) -> None:
        self._compression_type_ = compression_type_

    @property
    def encryption_type(self) -> nds.core.packaging.encryption_type.EncryptionType:
        return self._encryption_type_

    @encryption_type.setter
    def encryption_type(self, encryption_type_: nds.core.packaging.encryption_type.EncryptionType) -> None:
        self._encryption_type_ = encryption_type_

    @property
    def encryption_key_id(self) -> typing.Optional[nds.core.packaging.encryption_key_id.EncryptionKeyId]:
        return self._encryption_key_id_

    @encryption_key_id.setter
    def encryption_key_id(self, encryption_key_id_: typing.Optional[nds.core.packaging.encryption_key_id.EncryptionKeyId]) -> None:
        self._encryption_key_id_ = encryption_key_id_

    def is_encryption_key_id_used(self) -> bool:
        return self._encryption_type_ != nds.core.packaging.no_encryption.NO_ENCRYPTION

    def is_encryption_key_id_set(self) -> bool:
        return not self._encryption_key_id_ is None

    def reset_encryption_key_id(self) -> None:
        self._encryption_key_id_ = None

    @property
    def delta_encoding_details(self) -> typing.Union[nds.core.packaging.delta_encoding_details.DeltaEncodingDetails, None]:
        return self._delta_encoding_details_

    @delta_encoding_details.setter
    def delta_encoding_details(self, delta_encoding_details_: typing.Union[nds.core.packaging.delta_encoding_details.DeltaEncodingDetails, None]) -> None:
        self._delta_encoding_details_ = delta_encoding_details_

    def init_packing_context(self, zserio_context: PackagingDetails.ZserioPackingContext) -> None:
        zserio_context.signature_id.init(zserio.array.VarUInt16ArrayTraits(), self._signature_id_)
        zserio_context.compression_type.init(zserio.array.VarUInt16ArrayTraits(), self._compression_type_)
        zserio_context.encryption_type.init(zserio.array.VarUInt16ArrayTraits(), self._encryption_type_)
        if self.is_encryption_key_id_used():
            zserio_context.encryption_key_id.init(zserio.array.VarUInt32ArrayTraits(), self._encryption_key_id_)
        self._delta_encoding_details_.init_packing_context(zserio_context.delta_encoding_details)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._signature_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._compression_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._encryption_type_)
        if self.is_encryption_key_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._encryption_key_id_)
        end_bitposition += self._delta_encoding_details_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PackagingDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.signature_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._signature_id_)
        end_bitposition += zserio_context.compression_type.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._compression_type_)
        end_bitposition += zserio_context.encryption_type.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._encryption_type_)
        if self.is_encryption_key_id_used():
            end_bitposition += zserio_context.encryption_key_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._encryption_key_id_)
        end_bitposition += self._delta_encoding_details_.bitsizeof_packed(zserio_context.delta_encoding_details, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._signature_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._compression_type_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._encryption_type_)
        if self.is_encryption_key_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._encryption_key_id_)
        end_bitposition = self._delta_encoding_details_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PackagingDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.signature_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._signature_id_)
        end_bitposition += zserio_context.compression_type.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._compression_type_)
        end_bitposition += zserio_context.encryption_type.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._encryption_type_)
        if self.is_encryption_key_id_used():
            end_bitposition += zserio_context.encryption_key_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._encryption_key_id_)
        end_bitposition = self._delta_encoding_details_.initialize_offsets_packed(zserio_context.delta_encoding_details, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._signature_id_ = zserio_reader.read_varuint16()

        self._compression_type_ = zserio_reader.read_varuint16()

        self._encryption_type_ = zserio_reader.read_varuint16()
        # check constraint
        if not ((self._encryption_type_ != nds.core.packaging.no_encryption.NO_ENCRYPTION and self._compression_type_ != nds.core.packaging.no_compression.NO_COMPRESSION) or (self._encryption_type_ == nds.core.packaging.no_encryption.NO_ENCRYPTION)):
            raise zserio.PythonRuntimeException("Constraint violated for field PackagingDetails.encryptionType!")

        if self.is_encryption_key_id_used():
            self._encryption_key_id_ = zserio_reader.read_varuint32()
        else:
            self._encryption_key_id_ = None

        self._delta_encoding_details_ = nds.core.packaging.delta_encoding_details.DeltaEncodingDetails.from_reader(zserio_reader)

    def read_packed(self, zserio_context: PackagingDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._signature_id_ = zserio_context.signature_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._compression_type_ = zserio_context.compression_type.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._encryption_type_ = zserio_context.encryption_type.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        # check constraint
        if not ((self._encryption_type_ != nds.core.packaging.no_encryption.NO_ENCRYPTION and self._compression_type_ != nds.core.packaging.no_compression.NO_COMPRESSION) or (self._encryption_type_ == nds.core.packaging.no_encryption.NO_ENCRYPTION)):
            raise zserio.PythonRuntimeException("Constraint violated for field PackagingDetails.encryptionType!")

        if self.is_encryption_key_id_used():
            self._encryption_key_id_ = zserio_context.encryption_key_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._encryption_key_id_ = None

        self._delta_encoding_details_ = nds.core.packaging.delta_encoding_details.DeltaEncodingDetails.from_reader_packed(zserio_context.delta_encoding_details, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._signature_id_)

        zserio_writer.write_varuint16(self._compression_type_)

        # check constraint
        if not ((self._encryption_type_ != nds.core.packaging.no_encryption.NO_ENCRYPTION and self._compression_type_ != nds.core.packaging.no_compression.NO_COMPRESSION) or (self._encryption_type_ == nds.core.packaging.no_encryption.NO_ENCRYPTION)):
            raise zserio.PythonRuntimeException("Constraint violated for field PackagingDetails.encryptionType!")
        zserio_writer.write_varuint16(self._encryption_type_)

        if self.is_encryption_key_id_used():
            zserio_writer.write_varuint32(self._encryption_key_id_)

        self._delta_encoding_details_.write(zserio_writer)

    def write_packed(self, zserio_context: PackagingDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.signature_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._signature_id_)

        zserio_context.compression_type.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._compression_type_)

        # check constraint
        if not ((self._encryption_type_ != nds.core.packaging.no_encryption.NO_ENCRYPTION and self._compression_type_ != nds.core.packaging.no_compression.NO_COMPRESSION) or (self._encryption_type_ == nds.core.packaging.no_encryption.NO_ENCRYPTION)):
            raise zserio.PythonRuntimeException("Constraint violated for field PackagingDetails.encryptionType!")
        zserio_context.encryption_type.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._encryption_type_)

        if self.is_encryption_key_id_used():
            zserio_context.encryption_key_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._encryption_key_id_)

        self._delta_encoding_details_.write_packed(zserio_context.delta_encoding_details, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._signature_id_ = zserio.array.DeltaContext()
            self._compression_type_ = zserio.array.DeltaContext()
            self._encryption_type_ = zserio.array.DeltaContext()
            self._encryption_key_id_ = zserio.array.DeltaContext()
            self._delta_encoding_details_ = nds.core.packaging.delta_encoding_details.DeltaEncodingDetails.ZserioPackingContext()

        @property
        def signature_id(self):
            return self._signature_id_

        @property
        def compression_type(self):
            return self._compression_type_

        @property
        def encryption_type(self):
            return self._encryption_type_

        @property
        def encryption_key_id(self):
            return self._encryption_key_id_

        @property
        def delta_encoding_details(self):
            return self._delta_encoding_details_
