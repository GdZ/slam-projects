# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.coord_width
import nds.core.geometry.delta_elevation
import nds.core.geometry.delta_latitude
import nds.core.geometry.delta_longitude

class PositionOffset3D:
    def __init__(
            self,
            num_bits_xy_: nds.core.geometry.coord_width.CoordWidth,
            num_bits_z_: nds.core.geometry.coord_width.CoordWidth,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            delta_longitude_: int = int(),
            delta_latitude_: int = int(),
            delta_elevation_: int = int()) -> None:
        self._num_bits_xy_ = num_bits_xy_
        self._num_bits_z_ = num_bits_z_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._delta_longitude_ = delta_longitude_
        self._delta_latitude_ = delta_latitude_
        self._delta_elevation_ = delta_elevation_

    @classmethod
    def from_reader(
            cls: typing.Type['PositionOffset3D'],
            zserio_reader: zserio.BitStreamReader,
            num_bits_xy_: nds.core.geometry.coord_width.CoordWidth,
            num_bits_z_: nds.core.geometry.coord_width.CoordWidth,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'PositionOffset3D':
        self = object.__new__(cls)
        self._num_bits_xy_ = num_bits_xy_
        self._num_bits_z_ = num_bits_z_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PositionOffset3D'],
            zserio_context: PositionOffset3D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_bits_xy_: nds.core.geometry.coord_width.CoordWidth,
            num_bits_z_: nds.core.geometry.coord_width.CoordWidth,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'PositionOffset3D':
        self = object.__new__(cls)
        self._num_bits_xy_ = num_bits_xy_
        self._num_bits_z_ = num_bits_z_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PositionOffset3D):
            return (self._num_bits_xy_ == other._num_bits_xy_ and
                    self._num_bits_z_ == other._num_bits_z_ and
                    self._shift_xy_ == other._shift_xy_ and
                    self._shift_z_ == other._shift_z_ and
                    (self._delta_longitude_ == other._delta_longitude_) and
                    (self._delta_latitude_ == other._delta_latitude_) and
                    (self._delta_elevation_ == other._delta_elevation_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_z_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._delta_longitude_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._delta_latitude_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._delta_elevation_)

        return result

    @property
    def num_bits_xy(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_xy_

    @property
    def num_bits_z(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_z_

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def delta_longitude(self) -> int:
        return self._delta_longitude_

    @delta_longitude.setter
    def delta_longitude(self, delta_longitude_: int) -> None:
        self._delta_longitude_ = delta_longitude_

    @property
    def delta_latitude(self) -> int:
        return self._delta_latitude_

    @delta_latitude.setter
    def delta_latitude(self, delta_latitude_: int) -> None:
        self._delta_latitude_ = delta_latitude_

    @property
    def delta_elevation(self) -> int:
        return self._delta_elevation_

    @delta_elevation.setter
    def delta_elevation(self, delta_elevation_: int) -> None:
        self._delta_elevation_ = delta_elevation_

    def lon(self) -> nds.core.geometry.delta_longitude.DeltaLongitude:
        return self._delta_longitude_ << self._shift_xy_

    def lat(self) -> nds.core.geometry.delta_latitude.DeltaLatitude:
        return self._delta_latitude_ << self._shift_xy_

    def ele(self) -> nds.core.geometry.delta_elevation.DeltaElevation:
        return self._delta_elevation_ << self._shift_z_

    def init_packing_context(self, zserio_context: PositionOffset3D.ZserioPackingContext) -> None:
        zserio_context.delta_longitude.init(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_longitude_)
        zserio_context.delta_latitude.init(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_latitude_)
        zserio_context.delta_elevation.init(zserio.array.SignedBitFieldArrayTraits(self._num_bits_z_ + 1), self._delta_elevation_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._num_bits_xy_ + 1
        end_bitposition += self._num_bits_xy_ + 1
        end_bitposition += self._num_bits_z_ + 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PositionOffset3D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.delta_longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_longitude_)
        end_bitposition += zserio_context.delta_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_latitude_)
        end_bitposition += zserio_context.delta_elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_z_ + 1), self._delta_elevation_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._num_bits_xy_ + 1
        end_bitposition += self._num_bits_xy_ + 1
        end_bitposition += self._num_bits_z_ + 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PositionOffset3D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.delta_longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_longitude_)
        end_bitposition += zserio_context.delta_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), self._delta_latitude_)
        end_bitposition += zserio_context.delta_elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(self._num_bits_z_ + 1), self._delta_elevation_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._delta_longitude_ = zserio_reader.read_signed_bits(self._num_bits_xy_ + 1)
        self._delta_latitude_ = zserio_reader.read_signed_bits(self._num_bits_xy_ + 1)
        self._delta_elevation_ = zserio_reader.read_signed_bits(self._num_bits_z_ + 1)

    def read_packed(self, zserio_context: PositionOffset3D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._delta_longitude_ = zserio_context.delta_longitude.read(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), zserio_reader)

        self._delta_latitude_ = zserio_context.delta_latitude.read(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), zserio_reader)

        self._delta_elevation_ = zserio_context.delta_elevation.read(zserio.array.SignedBitFieldArrayTraits(self._num_bits_z_ + 1), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_signed_bits(self._delta_longitude_, self._num_bits_xy_ + 1)
        zserio_writer.write_signed_bits(self._delta_latitude_, self._num_bits_xy_ + 1)
        zserio_writer.write_signed_bits(self._delta_elevation_, self._num_bits_z_ + 1)

    def write_packed(self, zserio_context: PositionOffset3D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.delta_longitude.write(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), zserio_writer, self._delta_longitude_)

        zserio_context.delta_latitude.write(zserio.array.SignedBitFieldArrayTraits(self._num_bits_xy_ + 1), zserio_writer, self._delta_latitude_)

        zserio_context.delta_elevation.write(zserio.array.SignedBitFieldArrayTraits(self._num_bits_z_ + 1), zserio_writer, self._delta_elevation_)

    class ZserioPackingContext:
        def __init__(self):
            self._delta_longitude_ = zserio.array.DeltaContext()
            self._delta_latitude_ = zserio.array.DeltaContext()
            self._delta_elevation_ = zserio.array.DeltaContext()

        @property
        def delta_longitude(self):
            return self._delta_longitude_

        @property
        def delta_latitude(self):
            return self._delta_latitude_

        @property
        def delta_elevation(self):
            return self._delta_elevation_
