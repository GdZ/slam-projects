# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d

class BoundingBox2D:
    def __init__(
            self,
            south_west_position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            north_east_position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None) -> None:
        self._south_west_position_ = south_west_position_
        self._north_east_position_ = north_east_position_

    @classmethod
    def from_reader(
            cls: typing.Type['BoundingBox2D'],
            zserio_reader: zserio.BitStreamReader) -> 'BoundingBox2D':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundingBox2D'],
            zserio_context: BoundingBox2D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BoundingBox2D':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundingBox2D):
            return ((self._south_west_position_ == other._south_west_position_) and
                    (self._north_east_position_ == other._north_east_position_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._south_west_position_)
        result = zserio.hashcode.calc_hashcode_object(result, self._north_east_position_)

        return result

    @property
    def south_west_position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._south_west_position_

    @south_west_position.setter
    def south_west_position(self, south_west_position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._south_west_position_ = south_west_position_

    @property
    def north_east_position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._north_east_position_

    @north_east_position.setter
    def north_east_position(self, north_east_position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._north_east_position_ = north_east_position_

    def init_packing_context(self, zserio_context: BoundingBox2D.ZserioPackingContext) -> None:
        self._south_west_position_.init_packing_context(zserio_context.south_west_position)
        self._north_east_position_.init_packing_context(zserio_context.north_east_position)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_position_.bitsizeof(end_bitposition)
        end_bitposition += self._north_east_position_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundingBox2D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_position_.bitsizeof_packed(zserio_context.south_west_position, end_bitposition)
        end_bitposition += self._north_east_position_.bitsizeof_packed(zserio_context.north_east_position, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_position_.initialize_offsets(end_bitposition)
        end_bitposition = self._north_east_position_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundingBox2D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_position_.initialize_offsets_packed(zserio_context.south_west_position, end_bitposition)
        end_bitposition = self._north_east_position_.initialize_offsets_packed(zserio_context.north_east_position, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        self._north_east_position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)

    def read_packed(self, zserio_context: BoundingBox2D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.south_west_position, zserio_reader, 0)

        self._north_east_position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.north_east_position, zserio_reader, 0)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BoundingBox2D.southWestPosition: "
                                                f"{self._south_west_position_.shift} != {0}!")
        self._south_west_position_.write(zserio_writer)

        # check parameters
        if self._north_east_position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BoundingBox2D.northEastPosition: "
                                                f"{self._north_east_position_.shift} != {0}!")
        self._north_east_position_.write(zserio_writer)

    def write_packed(self, zserio_context: BoundingBox2D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BoundingBox2D.southWestPosition: "
                                                f"{self._south_west_position_.shift} != {0}!")
        self._south_west_position_.write_packed(zserio_context.south_west_position, zserio_writer)

        # check parameters
        if self._north_east_position_.shift != (0):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BoundingBox2D.northEastPosition: "
                                                f"{self._north_east_position_.shift} != {0}!")
        self._north_east_position_.write_packed(zserio_context.north_east_position, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._south_west_position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._north_east_position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()

        @property
        def south_west_position(self):
            return self._south_west_position_

        @property
        def north_east_position(self):
            return self._north_east_position_
