# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.coord_width
import nds.core.geometry.line_position
import nds.core.geometry.position_offset3d
import nds.core.geometry.range_offset_type

class LineRangeOffset3D:
    def __init__(
            self,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            offset_type_: typing.Union[nds.core.geometry.range_offset_type.RangeOffsetType, None] = None,
            num_bits_xy_: nds.core.geometry.coord_width.CoordWidth = nds.core.geometry.coord_width.CoordWidth(),
            num_bits_z_: nds.core.geometry.coord_width.CoordWidth = nds.core.geometry.coord_width.CoordWidth(),
            start_position_: nds.core.geometry.line_position.LinePosition = nds.core.geometry.line_position.LinePosition(),
            end_position_: nds.core.geometry.line_position.LinePosition = nds.core.geometry.line_position.LinePosition(),
            start_offset_: typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D] = None,
            end_offset_: typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D] = None) -> None:
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._offset_type_ = offset_type_
        self._num_bits_xy_ = num_bits_xy_
        self._num_bits_z_ = num_bits_z_
        self._start_position_ = start_position_
        self._end_position_ = end_position_
        self._start_offset_ = start_offset_
        self._end_offset_ = end_offset_

    @classmethod
    def from_reader(
            cls: typing.Type['LineRangeOffset3D'],
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'LineRangeOffset3D':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LineRangeOffset3D'],
            zserio_context: LineRangeOffset3D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'LineRangeOffset3D':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LineRangeOffset3D):
            return (self._shift_xy_ == other._shift_xy_ and
                    self._shift_z_ == other._shift_z_ and
                    (self._offset_type_ == other._offset_type_) and
                    (self._num_bits_xy_ == other._num_bits_xy_) and
                    (self._num_bits_z_ == other._num_bits_z_) and
                    (self._start_position_ == other._start_position_) and
                    (self._end_position_ == other._end_position_) and
                    (not other.is_start_offset_used() if not self.is_start_offset_used() else (self._start_offset_ == other._start_offset_)) and
                    (not other.is_end_offset_used() if not self.is_end_offset_used() else (self._end_offset_ == other._end_offset_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_object(result, self._offset_type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_z_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._start_position_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._end_position_)
        if self.is_start_offset_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._start_offset_)
        if self.is_end_offset_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._end_offset_)

        return result

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def offset_type(self) -> typing.Union[nds.core.geometry.range_offset_type.RangeOffsetType, None]:
        return self._offset_type_

    @offset_type.setter
    def offset_type(self, offset_type_: typing.Union[nds.core.geometry.range_offset_type.RangeOffsetType, None]) -> None:
        self._offset_type_ = offset_type_

    @property
    def num_bits_xy(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_xy_

    @num_bits_xy.setter
    def num_bits_xy(self, num_bits_xy_: nds.core.geometry.coord_width.CoordWidth) -> None:
        self._num_bits_xy_ = num_bits_xy_

    @property
    def num_bits_z(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_z_

    @num_bits_z.setter
    def num_bits_z(self, num_bits_z_: nds.core.geometry.coord_width.CoordWidth) -> None:
        self._num_bits_z_ = num_bits_z_

    @property
    def start_position(self) -> nds.core.geometry.line_position.LinePosition:
        return self._start_position_

    @start_position.setter
    def start_position(self, start_position_: nds.core.geometry.line_position.LinePosition) -> None:
        self._start_position_ = start_position_

    @property
    def end_position(self) -> nds.core.geometry.line_position.LinePosition:
        return self._end_position_

    @end_position.setter
    def end_position(self, end_position_: nds.core.geometry.line_position.LinePosition) -> None:
        self._end_position_ = end_position_

    @property
    def start_offset(self) -> typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D]:
        return self._start_offset_

    @start_offset.setter
    def start_offset(self, start_offset_: typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D]) -> None:
        self._start_offset_ = start_offset_

    def is_start_offset_used(self) -> bool:
        return self._offset_type_ == nds.core.geometry.range_offset_type.RangeOffsetType.START or self._offset_type_ == nds.core.geometry.range_offset_type.RangeOffsetType.START_AND_END

    def is_start_offset_set(self) -> bool:
        return not self._start_offset_ is None

    def reset_start_offset(self) -> None:
        self._start_offset_ = None

    @property
    def end_offset(self) -> typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D]:
        return self._end_offset_

    @end_offset.setter
    def end_offset(self, end_offset_: typing.Optional[nds.core.geometry.position_offset3d.PositionOffset3D]) -> None:
        self._end_offset_ = end_offset_

    def is_end_offset_used(self) -> bool:
        return self._offset_type_ == nds.core.geometry.range_offset_type.RangeOffsetType.END or self._offset_type_ == nds.core.geometry.range_offset_type.RangeOffsetType.START_AND_END

    def is_end_offset_set(self) -> bool:
        return not self._end_offset_ is None

    def reset_end_offset(self) -> None:
        self._end_offset_ = None

    def init_packing_context(self, zserio_context: LineRangeOffset3D.ZserioPackingContext) -> None:
        self._offset_type_.init_packing_context(zserio_context.offset_type)
        zserio_context.num_bits_xy.init(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        zserio_context.num_bits_z.init(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        zserio_context.start_position.init(zserio.array.VarSizeArrayTraits(), self._start_position_)
        zserio_context.end_position.init(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_start_offset_used():
            self._start_offset_.init_packing_context(zserio_context.start_offset)
        if self.is_end_offset_used():
            self._end_offset_.init_packing_context(zserio_context.end_offset)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._offset_type_.bitsizeof(end_bitposition)
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_position_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_position_)
        if self.is_start_offset_used():
            end_bitposition += self._start_offset_.bitsizeof(end_bitposition)
        if self.is_end_offset_used():
            end_bitposition += self._end_offset_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LineRangeOffset3D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._offset_type_.bitsizeof_packed(zserio_context.offset_type, end_bitposition)
        end_bitposition += zserio_context.num_bits_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        end_bitposition += zserio_context.num_bits_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        end_bitposition += zserio_context.start_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_position_)
        end_bitposition += zserio_context.end_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_start_offset_used():
            end_bitposition += self._start_offset_.bitsizeof_packed(zserio_context.start_offset, end_bitposition)
        if self.is_end_offset_used():
            end_bitposition += self._end_offset_.bitsizeof_packed(zserio_context.end_offset, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._offset_type_.initialize_offsets(end_bitposition)
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_position_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_position_)
        if self.is_start_offset_used():
            end_bitposition = self._start_offset_.initialize_offsets(end_bitposition)
        if self.is_end_offset_used():
            end_bitposition = self._end_offset_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LineRangeOffset3D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._offset_type_.initialize_offsets_packed(zserio_context.offset_type, end_bitposition)
        end_bitposition += zserio_context.num_bits_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        end_bitposition += zserio_context.num_bits_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        end_bitposition += zserio_context.start_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_position_)
        end_bitposition += zserio_context.end_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_start_offset_used():
            end_bitposition = self._start_offset_.initialize_offsets_packed(zserio_context.start_offset, end_bitposition)
        if self.is_end_offset_used():
            end_bitposition = self._end_offset_.initialize_offsets_packed(zserio_context.end_offset, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._offset_type_ = nds.core.geometry.range_offset_type.RangeOffsetType.from_reader(zserio_reader)
        self._num_bits_xy_ = zserio_reader.read_bits(5)
        self._num_bits_z_ = zserio_reader.read_bits(5)
        self._start_position_ = zserio_reader.read_varsize()
        self._end_position_ = zserio_reader.read_varsize()
        if self.is_start_offset_used():
            self._start_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader(zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)
        else:
            self._start_offset_ = None
        if self.is_end_offset_used():
            self._end_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader(zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)
        else:
            self._end_offset_ = None

    def read_packed(self, zserio_context: LineRangeOffset3D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._offset_type_ = nds.core.geometry.range_offset_type.RangeOffsetType.from_reader_packed(zserio_context.offset_type, zserio_reader)

        self._num_bits_xy_ = zserio_context.num_bits_xy.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._num_bits_z_ = zserio_context.num_bits_z.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._start_position_ = zserio_context.start_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._end_position_ = zserio_context.end_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        if self.is_start_offset_used():
            self._start_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader_packed(zserio_context.start_offset, zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)
        else:
            self._start_offset_ = None

        if self.is_end_offset_used():
            self._end_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader_packed(zserio_context.end_offset, zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)
        else:
            self._end_offset_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._offset_type_.write(zserio_writer)

        zserio_writer.write_bits(self._num_bits_xy_, 5)

        zserio_writer.write_bits(self._num_bits_z_, 5)

        zserio_writer.write_varsize(self._start_position_)

        zserio_writer.write_varsize(self._end_position_)

        if self.is_start_offset_used():
            # check parameters
            if self._start_offset_.num_bits_xy != (self._num_bits_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.num_bits_xy} != {self._num_bits_xy_}!")
            if self._start_offset_.num_bits_z != (self._num_bits_z_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.num_bits_z} != {self._num_bits_z_}!")
            if self._start_offset_.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.shift_xy} != {self._shift_xy_}!")
            if self._start_offset_.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.shift_z} != {self._shift_z_}!")
            self._start_offset_.write(zserio_writer)

        if self.is_end_offset_used():
            # check parameters
            if self._end_offset_.num_bits_xy != (self._num_bits_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.num_bits_xy} != {self._num_bits_xy_}!")
            if self._end_offset_.num_bits_z != (self._num_bits_z_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.num_bits_z} != {self._num_bits_z_}!")
            if self._end_offset_.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.shift_xy} != {self._shift_xy_}!")
            if self._end_offset_.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.shift_z} != {self._shift_z_}!")
            self._end_offset_.write(zserio_writer)

    def write_packed(self, zserio_context: LineRangeOffset3D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._offset_type_.write_packed(zserio_context.offset_type, zserio_writer)

        zserio_context.num_bits_xy.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._num_bits_xy_)

        zserio_context.num_bits_z.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._num_bits_z_)

        zserio_context.start_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._start_position_)

        zserio_context.end_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._end_position_)

        if self.is_start_offset_used():
            # check parameters
            if self._start_offset_.num_bits_xy != (self._num_bits_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.num_bits_xy} != {self._num_bits_xy_}!")
            if self._start_offset_.num_bits_z != (self._num_bits_z_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.num_bits_z} != {self._num_bits_z_}!")
            if self._start_offset_.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.shift_xy} != {self._shift_xy_}!")
            if self._start_offset_.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LineRangeOffset3D.startOffset: "
                                                    f"{self._start_offset_.shift_z} != {self._shift_z_}!")
            self._start_offset_.write_packed(zserio_context.start_offset, zserio_writer)

        if self.is_end_offset_used():
            # check parameters
            if self._end_offset_.num_bits_xy != (self._num_bits_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.num_bits_xy} != {self._num_bits_xy_}!")
            if self._end_offset_.num_bits_z != (self._num_bits_z_):
                raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.num_bits_z} != {self._num_bits_z_}!")
            if self._end_offset_.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.shift_xy} != {self._shift_xy_}!")
            if self._end_offset_.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LineRangeOffset3D.endOffset: "
                                                    f"{self._end_offset_.shift_z} != {self._shift_z_}!")
            self._end_offset_.write_packed(zserio_context.end_offset, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._offset_type_ = zserio.array.DeltaContext()
            self._num_bits_xy_ = zserio.array.DeltaContext()
            self._num_bits_z_ = zserio.array.DeltaContext()
            self._start_position_ = zserio.array.DeltaContext()
            self._end_position_ = zserio.array.DeltaContext()
            self._start_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.ZserioPackingContext()
            self._end_offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.ZserioPackingContext()

        @property
        def offset_type(self):
            return self._offset_type_

        @property
        def num_bits_xy(self):
            return self._num_bits_xy_

        @property
        def num_bits_z(self):
            return self._num_bits_z_

        @property
        def start_position(self):
            return self._start_position_

        @property
        def end_position(self):
            return self._end_position_

        @property
        def start_offset(self):
            return self._start_offset_

        @property
        def end_offset(self):
            return self._end_offset_
