# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.line2d
import nds.core.geometry.line_position

class LineRange2D:
    def __init__(
            self,
            line_: nds.core.geometry.line2d.Line2D,
            start_: nds.core.geometry.line_position.LinePosition = nds.core.geometry.line_position.LinePosition(),
            end_: nds.core.geometry.line_position.LinePosition = nds.core.geometry.line_position.LinePosition()) -> None:
        self._line_ = line_
        self._start_ = start_
        self._end_ = end_

    @classmethod
    def from_reader(
            cls: typing.Type['LineRange2D'],
            zserio_reader: zserio.BitStreamReader,
            line_: nds.core.geometry.line2d.Line2D) -> 'LineRange2D':
        self = object.__new__(cls)
        self._line_ = line_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LineRange2D'],
            zserio_context: LineRange2D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            line_: nds.core.geometry.line2d.Line2D) -> 'LineRange2D':
        self = object.__new__(cls)
        self._line_ = line_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LineRange2D):
            return (self._line_ == other._line_ and
                    (self._start_ == other._start_) and
                    (self._end_ == other._end_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._line_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._start_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._end_)

        return result

    @property
    def line(self) -> nds.core.geometry.line2d.Line2D:
        return self._line_

    @property
    def start(self) -> nds.core.geometry.line_position.LinePosition:
        return self._start_

    @start.setter
    def start(self, start_: nds.core.geometry.line_position.LinePosition) -> None:
        self._start_ = start_

    @property
    def end(self) -> nds.core.geometry.line_position.LinePosition:
        return self._end_

    @end.setter
    def end(self, end_: nds.core.geometry.line_position.LinePosition) -> None:
        self._end_ = end_

    def init_packing_context(self, zserio_context: LineRange2D.ZserioPackingContext) -> None:
        zserio_context.start.init(zserio.array.VarSizeArrayTraits(), self._start_)
        zserio_context.end.init(zserio.array.VarSizeArrayTraits(), self._end_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LineRange2D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.start.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_)
        end_bitposition += zserio_context.end.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LineRange2D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.start.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_)
        end_bitposition += zserio_context.end.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_ = zserio_reader.read_varsize()

        self._end_ = zserio_reader.read_varsize()
        # check constraint
        if not (self._end_ > self._start_ and self._end_ <= self._line_.last_position_idx()):
            raise zserio.PythonRuntimeException("Constraint violated for field LineRange2D.end!")

    def read_packed(self, zserio_context: LineRange2D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_ = zserio_context.start.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._end_ = zserio_context.end.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        # check constraint
        if not (self._end_ > self._start_ and self._end_ <= self._line_.last_position_idx()):
            raise zserio.PythonRuntimeException("Constraint violated for field LineRange2D.end!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._start_)

        # check constraint
        if not (self._end_ > self._start_ and self._end_ <= self._line_.last_position_idx()):
            raise zserio.PythonRuntimeException("Constraint violated for field LineRange2D.end!")
        zserio_writer.write_varsize(self._end_)

    def write_packed(self, zserio_context: LineRange2D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.start.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._start_)

        # check constraint
        if not (self._end_ > self._start_ and self._end_ <= self._line_.last_position_idx()):
            raise zserio.PythonRuntimeException("Constraint violated for field LineRange2D.end!")
        zserio_context.end.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._end_)

    class ZserioPackingContext:
        def __init__(self):
            self._start_ = zserio.array.DeltaContext()
            self._end_ = zserio.array.DeltaContext()

        @property
        def start(self):
            return self._start_

        @property
        def end(self):
            return self._end_
