# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.index_buffer
import nds.core.geometry.poly_mesh3d
import nds.core.geometry.poly_mesh3d_type
import nds.core.geometry.position3d

class PolyMesh3DBuffers:
    def __init__(
            self,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int,
            type_: nds.core.geometry.poly_mesh3d_type.PolyMesh3DType,
            num_positions_: int = int(),
            positions_: typing.List[nds.core.geometry.position3d.Position3D] = None,
            index_buffer_: typing.Union[nds.core.geometry.index_buffer.IndexBuffer, None] = None,
            polymeshes_: typing.List[nds.core.geometry.poly_mesh3d.PolyMesh3D] = None) -> None:
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_
        self._type_ = type_
        self._num_positions_ = num_positions_
        self._positions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions(self)), positions_)
        self._index_buffer_ = index_buffer_
        self._polymeshes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_polymeshes(self)), polymeshes_)

    @classmethod
    def from_reader(
            cls: typing.Type['PolyMesh3DBuffers'],
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int,
            type_: nds.core.geometry.poly_mesh3d_type.PolyMesh3DType) -> 'PolyMesh3DBuffers':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PolyMesh3DBuffers'],
            zserio_context: PolyMesh3DBuffers.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int,
            type_: nds.core.geometry.poly_mesh3d_type.PolyMesh3DType) -> 'PolyMesh3DBuffers':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PolyMesh3DBuffers):
            return (self._shift_xy_ == other._shift_xy_ and
                    self._shift_z_ == other._shift_z_ and
                    self._num_elements_ == other._num_elements_ and
                    self._type_ == other._type_ and
                    (self._num_positions_ == other._num_positions_) and
                    (self._positions_ == other._positions_) and
                    (self._index_buffer_ == other._index_buffer_) and
                    (self._polymeshes_ == other._polymeshes_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_elements_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_positions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._positions_)
        result = zserio.hashcode.calc_hashcode_object(result, self._index_buffer_)
        result = zserio.hashcode.calc_hashcode_object(result, self._polymeshes_)

        return result

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def num_elements(self) -> int:
        return self._num_elements_

    @property
    def type(self) -> nds.core.geometry.poly_mesh3d_type.PolyMesh3DType:
        return self._type_

    @property
    def num_positions(self) -> int:
        return self._num_positions_

    @num_positions.setter
    def num_positions(self, num_positions_: int) -> None:
        self._num_positions_ = num_positions_

    @property
    def positions(self) -> typing.List[nds.core.geometry.position3d.Position3D]:
        return self._positions_.raw_array

    @positions.setter
    def positions(self, positions_: typing.List[nds.core.geometry.position3d.Position3D]) -> None:
        self._positions_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions(self)), positions_)

    @property
    def index_buffer(self) -> typing.Union[nds.core.geometry.index_buffer.IndexBuffer, None]:
        return self._index_buffer_

    @index_buffer.setter
    def index_buffer(self, index_buffer_: typing.Union[nds.core.geometry.index_buffer.IndexBuffer, None]) -> None:
        self._index_buffer_ = index_buffer_

    @property
    def polymeshes(self) -> typing.List[nds.core.geometry.poly_mesh3d.PolyMesh3D]:
        return self._polymeshes_.raw_array

    @polymeshes.setter
    def polymeshes(self, polymeshes_: typing.List[nds.core.geometry.poly_mesh3d.PolyMesh3D]) -> None:
        self._polymeshes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_polymeshes(self)), polymeshes_)

    def init_packing_context(self, zserio_context: PolyMesh3DBuffers.ZserioPackingContext) -> None:
        zserio_context.num_positions.init(zserio.array.VarSizeArrayTraits(), self._num_positions_)
        self._index_buffer_.init_packing_context(zserio_context.index_buffer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_positions_)
        end_bitposition += self._positions_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._index_buffer_.bitsizeof(end_bitposition)
        end_bitposition += self._polymeshes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PolyMesh3DBuffers.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_positions.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_positions_)
        end_bitposition += self._positions_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._index_buffer_.bitsizeof_packed(zserio_context.index_buffer, end_bitposition)
        end_bitposition += self._polymeshes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_positions_)
        end_bitposition = self._positions_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._index_buffer_.initialize_offsets(end_bitposition)
        end_bitposition = self._polymeshes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PolyMesh3DBuffers.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_positions.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_positions_)
        end_bitposition = self._positions_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._index_buffer_.initialize_offsets_packed(zserio_context.index_buffer, end_bitposition)
        end_bitposition = self._polymeshes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_positions_ = zserio_reader.read_varsize()
        self._positions_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions(self)), zserio_reader, self._num_positions_)
        self._index_buffer_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader(zserio_reader, self._num_positions_)
        self._polymeshes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_polymeshes(self)), zserio_reader, self._num_elements_)

    def read_packed(self, zserio_context: PolyMesh3DBuffers.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_positions_ = zserio_context.num_positions.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._positions_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions(self)), zserio_reader, self._num_positions_)

        self._index_buffer_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader_packed(zserio_context.index_buffer, zserio_reader, self._num_positions_)

        self._polymeshes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_polymeshes(self)), zserio_reader, self._num_elements_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_positions_)

        # check array length
        if len(self._positions_) != (self._num_positions_):
            raise zserio.PythonRuntimeException("Wrong array length for field PolyMesh3DBuffers.positions: "
                                                f"{len(self._positions_)} != {self._num_positions_}!")
        self._positions_.write_packed(zserio_writer)

        # check parameters
        if self._index_buffer_.position_buffer_size != (self._num_positions_):
            raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field PolyMesh3DBuffers.indexBuffer: "
                                                f"{self._index_buffer_.position_buffer_size} != {self._num_positions_}!")
        self._index_buffer_.write(zserio_writer)

        # check array length
        if len(self._polymeshes_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field PolyMesh3DBuffers.polymeshes: "
                                                f"{len(self._polymeshes_)} != {self._num_elements_}!")
        self._polymeshes_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: PolyMesh3DBuffers.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_positions.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_positions_)

        # check array length
        if len(self._positions_) != (self._num_positions_):
            raise zserio.PythonRuntimeException("Wrong array length for field PolyMesh3DBuffers.positions: "
                                                f"{len(self._positions_)} != {self._num_positions_}!")
        self._positions_.write_packed(zserio_writer)

        # check parameters
        if self._index_buffer_.position_buffer_size != (self._num_positions_):
            raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field PolyMesh3DBuffers.indexBuffer: "
                                                f"{self._index_buffer_.position_buffer_size} != {self._num_positions_}!")
        self._index_buffer_.write_packed(zserio_context.index_buffer, zserio_writer)

        # check array length
        if len(self._polymeshes_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field PolyMesh3DBuffers.polymeshes: "
                                                f"{len(self._polymeshes_)} != {self._num_elements_}!")
        self._polymeshes_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_positions_ = zserio.array.DeltaContext()
            self._index_buffer_ = nds.core.geometry.index_buffer.IndexBuffer.ZserioPackingContext()

        @property
        def num_positions(self):
            return self._num_positions_

        @property
        def index_buffer(self):
            return self._index_buffer_

    class _ZserioElementFactory_positions:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader(zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.position3d.Position3D.ZserioPackingContext:
            return nds.core.geometry.position3d.Position3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.position3d.Position3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

    class _ZserioElementFactory_polymeshes:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.poly_mesh3d.PolyMesh3D:
            del zserio_index
            return nds.core.geometry.poly_mesh3d.PolyMesh3D.from_reader(zserio_reader, self._owner._index_buffer_, self._owner._type_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.poly_mesh3d.PolyMesh3D.ZserioPackingContext:
            return nds.core.geometry.poly_mesh3d.PolyMesh3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.poly_mesh3d.PolyMesh3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.poly_mesh3d.PolyMesh3D:
            del zserio_index
            return nds.core.geometry.poly_mesh3d.PolyMesh3D.from_reader_packed(zserio_context, zserio_reader, self._owner._index_buffer_, self._owner._type_)
