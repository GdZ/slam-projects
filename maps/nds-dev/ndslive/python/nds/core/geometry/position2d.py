# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.latitude
import nds.core.geometry.longitude

class Position2D:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            longitude_: int = int(),
            latitude_: int = int()) -> None:
        self._shift_ = shift_
        self._longitude_ = longitude_
        self._latitude_ = latitude_

    @classmethod
    def from_reader(
            cls: typing.Type['Position2D'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Position2D':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Position2D'],
            zserio_context: Position2D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'Position2D':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Position2D):
            return (self._shift_ == other._shift_ and
                    (self._longitude_ == other._longitude_) and
                    (self._latitude_ == other._latitude_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._longitude_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._latitude_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def longitude(self) -> int:
        return self._longitude_

    @longitude.setter
    def longitude(self, longitude_: int) -> None:
        self._longitude_ = longitude_

    @property
    def latitude(self) -> int:
        return self._latitude_

    @latitude.setter
    def latitude(self, latitude_: int) -> None:
        self._latitude_ = latitude_

    def lon(self) -> nds.core.geometry.longitude.Longitude:
        return (self._longitude_ << self._shift_)

    def lat(self) -> nds.core.geometry.latitude.Latitude:
        return (self._latitude_ << self._shift_)

    def init_packing_context(self, zserio_context: Position2D.ZserioPackingContext) -> None:
        zserio_context.longitude.init(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._longitude_)
        zserio_context.latitude.init(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._latitude_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += (31 - self._shift_) + 1
        end_bitposition += (31 - self._shift_) + 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Position2D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._longitude_)
        end_bitposition += zserio_context.latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._latitude_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += (31 - self._shift_) + 1
        end_bitposition += (31 - self._shift_) + 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Position2D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.longitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._longitude_)
        end_bitposition += zserio_context.latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), self._latitude_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._longitude_ = zserio_reader.read_signed_bits((31 - self._shift_) + 1)
        self._latitude_ = zserio_reader.read_signed_bits((31 - self._shift_) + 1)

    def read_packed(self, zserio_context: Position2D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._longitude_ = zserio_context.longitude.read(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), zserio_reader)

        self._latitude_ = zserio_context.latitude.read(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_signed_bits(self._longitude_, (31 - self._shift_) + 1)
        zserio_writer.write_signed_bits(self._latitude_, (31 - self._shift_) + 1)

    def write_packed(self, zserio_context: Position2D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.longitude.write(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), zserio_writer, self._longitude_)

        zserio_context.latitude.write(zserio.array.SignedBitFieldArrayTraits((31 - self._shift_) + 1), zserio_writer, self._latitude_)

    class ZserioPackingContext:
        def __init__(self):
            self._longitude_ = zserio.array.DeltaContext()
            self._latitude_ = zserio.array.DeltaContext()

        @property
        def longitude(self):
            return self._longitude_

        @property
        def latitude(self):
            return self._latitude_
