# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.coord_width
import nds.core.geometry.line_position
import nds.core.geometry.position_offset3d

class LinePositionOffset3D:
    def __init__(
            self,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            line_position_: nds.core.geometry.line_position.LinePosition = nds.core.geometry.line_position.LinePosition(),
            num_bits_xy_: nds.core.geometry.coord_width.CoordWidth = nds.core.geometry.coord_width.CoordWidth(),
            num_bits_z_: nds.core.geometry.coord_width.CoordWidth = nds.core.geometry.coord_width.CoordWidth(),
            offset_: typing.Union[nds.core.geometry.position_offset3d.PositionOffset3D, None] = None) -> None:
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._line_position_ = line_position_
        self._num_bits_xy_ = num_bits_xy_
        self._num_bits_z_ = num_bits_z_
        self._offset_ = offset_

    @classmethod
    def from_reader(
            cls: typing.Type['LinePositionOffset3D'],
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'LinePositionOffset3D':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LinePositionOffset3D'],
            zserio_context: LinePositionOffset3D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift) -> 'LinePositionOffset3D':
        self = object.__new__(cls)
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LinePositionOffset3D):
            return (self._shift_xy_ == other._shift_xy_ and
                    self._shift_z_ == other._shift_z_ and
                    (self._line_position_ == other._line_position_) and
                    (self._num_bits_xy_ == other._num_bits_xy_) and
                    (self._num_bits_z_ == other._num_bits_z_) and
                    (self._offset_ == other._offset_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._line_position_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_bits_z_)
        result = zserio.hashcode.calc_hashcode_object(result, self._offset_)

        return result

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def line_position(self) -> nds.core.geometry.line_position.LinePosition:
        return self._line_position_

    @line_position.setter
    def line_position(self, line_position_: nds.core.geometry.line_position.LinePosition) -> None:
        self._line_position_ = line_position_

    @property
    def num_bits_xy(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_xy_

    @num_bits_xy.setter
    def num_bits_xy(self, num_bits_xy_: nds.core.geometry.coord_width.CoordWidth) -> None:
        self._num_bits_xy_ = num_bits_xy_

    @property
    def num_bits_z(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._num_bits_z_

    @num_bits_z.setter
    def num_bits_z(self, num_bits_z_: nds.core.geometry.coord_width.CoordWidth) -> None:
        self._num_bits_z_ = num_bits_z_

    @property
    def offset(self) -> typing.Union[nds.core.geometry.position_offset3d.PositionOffset3D, None]:
        return self._offset_

    @offset.setter
    def offset(self, offset_: typing.Union[nds.core.geometry.position_offset3d.PositionOffset3D, None]) -> None:
        self._offset_ = offset_

    def init_packing_context(self, zserio_context: LinePositionOffset3D.ZserioPackingContext) -> None:
        zserio_context.line_position.init(zserio.array.VarSizeArrayTraits(), self._line_position_)
        zserio_context.num_bits_xy.init(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        zserio_context.num_bits_z.init(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        self._offset_.init_packing_context(zserio_context.offset)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._line_position_)
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition += self._offset_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LinePositionOffset3D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.line_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._line_position_)
        end_bitposition += zserio_context.num_bits_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        end_bitposition += zserio_context.num_bits_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        end_bitposition += self._offset_.bitsizeof_packed(zserio_context.offset, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._line_position_)
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition = self._offset_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LinePositionOffset3D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.line_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._line_position_)
        end_bitposition += zserio_context.num_bits_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_xy_)
        end_bitposition += zserio_context.num_bits_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._num_bits_z_)
        end_bitposition = self._offset_.initialize_offsets_packed(zserio_context.offset, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._line_position_ = zserio_reader.read_varsize()
        self._num_bits_xy_ = zserio_reader.read_bits(5)
        self._num_bits_z_ = zserio_reader.read_bits(5)
        self._offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader(zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)

    def read_packed(self, zserio_context: LinePositionOffset3D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._line_position_ = zserio_context.line_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_bits_xy_ = zserio_context.num_bits_xy.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._num_bits_z_ = zserio_context.num_bits_z.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.from_reader_packed(zserio_context.offset, zserio_reader, self._num_bits_xy_, self._num_bits_z_, self._shift_xy_, self._shift_z_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._line_position_)

        zserio_writer.write_bits(self._num_bits_xy_, 5)

        zserio_writer.write_bits(self._num_bits_z_, 5)

        # check parameters
        if self._offset_.num_bits_xy != (self._num_bits_xy_):
            raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.num_bits_xy} != {self._num_bits_xy_}!")
        if self._offset_.num_bits_z != (self._num_bits_z_):
            raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.num_bits_z} != {self._num_bits_z_}!")
        if self._offset_.shift_xy != (self._shift_xy_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.shift_xy} != {self._shift_xy_}!")
        if self._offset_.shift_z != (self._shift_z_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.shift_z} != {self._shift_z_}!")
        self._offset_.write(zserio_writer)

    def write_packed(self, zserio_context: LinePositionOffset3D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.line_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._line_position_)

        zserio_context.num_bits_xy.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._num_bits_xy_)

        zserio_context.num_bits_z.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._num_bits_z_)

        # check parameters
        if self._offset_.num_bits_xy != (self._num_bits_xy_):
            raise zserio.PythonRuntimeException("Wrong parameter numBitsXY for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.num_bits_xy} != {self._num_bits_xy_}!")
        if self._offset_.num_bits_z != (self._num_bits_z_):
            raise zserio.PythonRuntimeException("Wrong parameter numBitsZ for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.num_bits_z} != {self._num_bits_z_}!")
        if self._offset_.shift_xy != (self._shift_xy_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.shift_xy} != {self._shift_xy_}!")
        if self._offset_.shift_z != (self._shift_z_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field LinePositionOffset3D.offset: "
                                                f"{self._offset_.shift_z} != {self._shift_z_}!")
        self._offset_.write_packed(zserio_context.offset, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._line_position_ = zserio.array.DeltaContext()
            self._num_bits_xy_ = zserio.array.DeltaContext()
            self._num_bits_z_ = zserio.array.DeltaContext()
            self._offset_ = nds.core.geometry.position_offset3d.PositionOffset3D.ZserioPackingContext()

        @property
        def line_position(self):
            return self._line_position_

        @property
        def num_bits_xy(self):
            return self._num_bits_xy_

        @property
        def num_bits_z(self):
            return self._num_bits_z_

        @property
        def offset(self):
            return self._offset_
