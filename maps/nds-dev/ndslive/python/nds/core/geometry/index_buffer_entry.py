# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class IndexBufferEntry:
    def __init__(
            self,
            position_buffer_size_: int,
            index_: int = int()) -> None:
        self._position_buffer_size_ = position_buffer_size_
        self._index_ = index_

    @classmethod
    def from_reader(
            cls: typing.Type['IndexBufferEntry'],
            zserio_reader: zserio.BitStreamReader,
            position_buffer_size_: int) -> 'IndexBufferEntry':
        self = object.__new__(cls)
        self._position_buffer_size_ = position_buffer_size_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IndexBufferEntry'],
            zserio_context: IndexBufferEntry.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            position_buffer_size_: int) -> 'IndexBufferEntry':
        self = object.__new__(cls)
        self._position_buffer_size_ = position_buffer_size_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IndexBufferEntry):
            return (self._position_buffer_size_ == other._position_buffer_size_ and
                    (self._index_ == other._index_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._position_buffer_size_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._index_)

        return result

    @property
    def position_buffer_size(self) -> int:
        return self._position_buffer_size_

    @property
    def index(self) -> int:
        return self._index_

    @index.setter
    def index(self, index_: int) -> None:
        self._index_ = index_

    def init_packing_context(self, zserio_context: IndexBufferEntry.ZserioPackingContext) -> None:
        zserio_context.index.init(zserio.array.BitFieldArrayTraits(zserio.builtin.numbits(self._position_buffer_size_)), self._index_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.builtin.numbits(self._position_buffer_size_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IndexBufferEntry.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.index.bitsizeof(zserio.array.BitFieldArrayTraits(zserio.builtin.numbits(self._position_buffer_size_)), self._index_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.builtin.numbits(self._position_buffer_size_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IndexBufferEntry.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.index.bitsizeof(zserio.array.BitFieldArrayTraits(zserio.builtin.numbits(self._position_buffer_size_)), self._index_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._index_ = zserio_reader.read_bits(zserio.builtin.numbits(self._position_buffer_size_))
        # check constraint
        if not (self._index_ < self._position_buffer_size_):
            raise zserio.PythonRuntimeException("Constraint violated for field IndexBufferEntry.index!")

    def read_packed(self, zserio_context: IndexBufferEntry.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._index_ = zserio_context.index.read(zserio.array.BitFieldArrayTraits(zserio.builtin.numbits(self._position_buffer_size_)), zserio_reader)
        # check constraint
        if not (self._index_ < self._position_buffer_size_):
            raise zserio.PythonRuntimeException("Constraint violated for field IndexBufferEntry.index!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._index_ < self._position_buffer_size_):
            raise zserio.PythonRuntimeException("Constraint violated for field IndexBufferEntry.index!")
        zserio_writer.write_bits(self._index_, zserio.builtin.numbits(self._position_buffer_size_))

    def write_packed(self, zserio_context: IndexBufferEntry.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._index_ < self._position_buffer_size_):
            raise zserio.PythonRuntimeException("Constraint violated for field IndexBufferEntry.index!")
        zserio_context.index.write(zserio.array.BitFieldArrayTraits(zserio.builtin.numbits(self._position_buffer_size_)), zserio_writer, self._index_)

    class ZserioPackingContext:
        def __init__(self):
            self._index_ = zserio.array.DeltaContext()

        @property
        def index(self):
            return self._index_
