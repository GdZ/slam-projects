# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.geometry_layer_type
import nds.core.geometry.line2d
import nds.core.geometry.line3d
import nds.core.geometry.poly_mesh3d_buffers
import nds.core.geometry.poly_mesh3d_type
import nds.core.geometry.polygon2d_buffers
import nds.core.geometry.position2d
import nds.core.geometry.position3d
import nds.core.geometry.simple_polygon2d
import nds.core.geometry.simple_polygon_set2d

class Buffers:
    def __init__(
            self,
            type_: nds.core.geometry.geometry_layer_type.GeometryLayerType,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int,
            *,
            positions2d_: typing.Union[typing.List[nds.core.geometry.position2d.Position2D], None] = None,
            positions3d_: typing.Union[typing.List[nds.core.geometry.position3d.Position3D], None] = None,
            lines2d_: typing.Union[typing.List[nds.core.geometry.line2d.Line2D], None] = None,
            lines3d_: typing.Union[typing.List[nds.core.geometry.line3d.Line3D], None] = None,
            polygons2d_: typing.Union[nds.core.geometry.polygon2d_buffers.Polygon2DBuffers, None] = None,
            polygons3d_: typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None] = None,
            meshes3d_: typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None] = None,
            simple_polygons2d_: typing.Union[typing.List[nds.core.geometry.simple_polygon2d.SimplePolygon2D], None] = None,
            simple_polygon_sets2d_: typing.Union[typing.List[nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D], None] = None) -> None:
        self._type_ = type_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_
        self._choice: typing.Any = None
        if positions2d_ is not None:
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions2d(self)), positions2d_)
        if positions3d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions3d(self)), positions3d_)
        if lines2d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines2d(self)), lines2d_)
        if lines3d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines3d(self)), lines3d_)
        if polygons2d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = polygons2d_
        if polygons3d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = polygons3d_
        if meshes3d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = meshes3d_
        if simple_polygons2d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygons2d(self)), simple_polygons2d_)
        if simple_polygon_sets2d_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice Buffers is ambiguous!")
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygon_sets2d(self)), simple_polygon_sets2d_)

    @classmethod
    def from_reader(
            cls: typing.Type['Buffers'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.core.geometry.geometry_layer_type.GeometryLayerType,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int) -> 'Buffers':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Buffers'],
            zserio_context: Buffers.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.core.geometry.geometry_layer_type.GeometryLayerType,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            num_elements_: int) -> 'Buffers':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._num_elements_ = num_elements_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Buffers):
            return (self._type_ == other._type_ and
                    self._shift_xy_ == other._shift_xy_ and
                    self._shift_z_ == other._shift_z_ and
                    self._num_elements_ == other._num_elements_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_elements_)
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.core.geometry.geometry_layer_type.GeometryLayerType:
        return self._type_

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def num_elements(self) -> int:
        return self._num_elements_

    @property
    def positions2d(self) -> typing.List[nds.core.geometry.position2d.Position2D]:
        return self._choice.raw_array

    @positions2d.setter
    def positions2d(self, positions2d_: typing.List[nds.core.geometry.position2d.Position2D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions2d(self)), positions2d_)

    @property
    def positions3d(self) -> typing.List[nds.core.geometry.position3d.Position3D]:
        return self._choice.raw_array

    @positions3d.setter
    def positions3d(self, positions3d_: typing.List[nds.core.geometry.position3d.Position3D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions3d(self)), positions3d_)

    @property
    def lines2d(self) -> typing.List[nds.core.geometry.line2d.Line2D]:
        return self._choice.raw_array

    @lines2d.setter
    def lines2d(self, lines2d_: typing.List[nds.core.geometry.line2d.Line2D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines2d(self)), lines2d_)

    @property
    def lines3d(self) -> typing.List[nds.core.geometry.line3d.Line3D]:
        return self._choice.raw_array

    @lines3d.setter
    def lines3d(self, lines3d_: typing.List[nds.core.geometry.line3d.Line3D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines3d(self)), lines3d_)

    @property
    def polygons2d(self) -> typing.Union[nds.core.geometry.polygon2d_buffers.Polygon2DBuffers, None]:
        return self._choice

    @polygons2d.setter
    def polygons2d(self, polygons2d_: typing.Union[nds.core.geometry.polygon2d_buffers.Polygon2DBuffers, None]) -> None:
        self._choice = polygons2d_

    @property
    def polygons3d(self) -> typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None]:
        return self._choice

    @polygons3d.setter
    def polygons3d(self, polygons3d_: typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None]) -> None:
        self._choice = polygons3d_

    @property
    def meshes3d(self) -> typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None]:
        return self._choice

    @meshes3d.setter
    def meshes3d(self, meshes3d_: typing.Union[nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers, None]) -> None:
        self._choice = meshes3d_

    @property
    def simple_polygons2d(self) -> typing.List[nds.core.geometry.simple_polygon2d.SimplePolygon2D]:
        return self._choice.raw_array

    @simple_polygons2d.setter
    def simple_polygons2d(self, simple_polygons2d_: typing.List[nds.core.geometry.simple_polygon2d.SimplePolygon2D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygons2d(self)), simple_polygons2d_)

    @property
    def simple_polygon_sets2d(self) -> typing.List[nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D]:
        return self._choice.raw_array

    @simple_polygon_sets2d.setter
    def simple_polygon_sets2d(self, simple_polygon_sets2d_: typing.List[nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygon_sets2d(self)), simple_polygon_sets2d_)

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            return self.CHOICE_POSITIONS2D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            return self.CHOICE_POSITIONS3D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            return self.CHOICE_LINES2D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            return self.CHOICE_LINES3D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            return self.CHOICE_POLYGONS2D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            return self.CHOICE_POLYGONS3D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            return self.CHOICE_MESHES3D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            return self.CHOICE_SIMPLE_POLYGONS2D
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            return self.CHOICE_SIMPLE_POLYGON_SETS2D
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: Buffers.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            pass
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            pass
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            pass
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            pass
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            self._choice.init_packing_context(zserio_context.polygons2d)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            self._choice.init_packing_context(zserio_context.polygons3d)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            self._choice.init_packing_context(zserio_context.meshes3d)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            pass
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Buffers.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.polygons2d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.polygons3d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.meshes3d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Buffers.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.polygons2d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.polygons3d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.meshes3d, end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions3d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            self._choice = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            self._choice = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines3d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            self._choice = nds.core.geometry.polygon2d_buffers.Polygon2DBuffers.from_reader(zserio_reader, self._shift_xy_, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            self._choice = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.from_reader(zserio_reader, self._shift_xy_, self._shift_z_, self._num_elements_, nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            self._choice = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.from_reader(zserio_reader, self._shift_xy_, self._shift_z_, self._num_elements_, nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            self._choice = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygons2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            self._choice = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygon_sets2d(self)), zserio_reader, self._num_elements_)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

    def read_packed(self, zserio_context: Buffers.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_positions3d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lines3d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            self._choice = nds.core.geometry.polygon2d_buffers.Polygon2DBuffers.from_reader_packed(zserio_context.polygons2d, zserio_reader, self._shift_xy_, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            self._choice = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.from_reader_packed(zserio_context.polygons3d, zserio_reader, self._shift_xy_, self._shift_z_, self._num_elements_, nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            self._choice = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.from_reader_packed(zserio_context.meshes3d, zserio_reader, self._shift_xy_, self._shift_z_, self._num_elements_, nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygons2d(self)), zserio_reader, self._num_elements_)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_simple_polygon_sets2d(self)), zserio_reader, self._num_elements_)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.positions2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.positions3D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.lines2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.lines3D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            # check parameters
            if self._choice.shift != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field Buffers.polygons2D: "
                                                    f"{self._choice.shift} != {self._shift_xy_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.polygons2D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            # check parameters
            if self._choice.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field Buffers.polygons3D: "
                                                    f"{self._choice.shift_xy} != {self._shift_xy_}!")
            if self._choice.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field Buffers.polygons3D: "
                                                    f"{self._choice.shift_z} != {self._shift_z_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.polygons3D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            if self._choice.type is not (nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Buffers.polygons3D: "
                                                    f"{self._choice.type} != {nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            # check parameters
            if self._choice.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field Buffers.meshes3D: "
                                                    f"{self._choice.shift_xy} != {self._shift_xy_}!")
            if self._choice.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field Buffers.meshes3D: "
                                                    f"{self._choice.shift_z} != {self._shift_z_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.meshes3D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            if self._choice.type is not (nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Buffers.meshes3D: "
                                                    f"{self._choice.type} != {nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.simplePolygons2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.simplePolygonSets2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

    def write_packed(self, zserio_context: Buffers.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.positions2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_3D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.positions3D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.lines2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_3D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.lines3D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
            # check parameters
            if self._choice.shift != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field Buffers.polygons2D: "
                                                    f"{self._choice.shift} != {self._shift_xy_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.polygons2D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            self._choice.write_packed(zserio_context.polygons2d, zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_3D):
            # check parameters
            if self._choice.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field Buffers.polygons3D: "
                                                    f"{self._choice.shift_xy} != {self._shift_xy_}!")
            if self._choice.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field Buffers.polygons3D: "
                                                    f"{self._choice.shift_z} != {self._shift_z_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.polygons3D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            if self._choice.type is not (nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Buffers.polygons3D: "
                                                    f"{self._choice.type} != {nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.POLYGON}!")
            self._choice.write_packed(zserio_context.polygons3d, zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            # check parameters
            if self._choice.shift_xy != (self._shift_xy_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field Buffers.meshes3D: "
                                                    f"{self._choice.shift_xy} != {self._shift_xy_}!")
            if self._choice.shift_z != (self._shift_z_):
                raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field Buffers.meshes3D: "
                                                    f"{self._choice.shift_z} != {self._shift_z_}!")
            if self._choice.num_elements != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong parameter numElements for field Buffers.meshes3D: "
                                                    f"{self._choice.num_elements} != {self._num_elements_}!")
            if self._choice.type is not (nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Buffers.meshes3D: "
                                                    f"{self._choice.type} != {nds.core.geometry.poly_mesh3d_type.PolyMesh3DType.MESH}!")
            self._choice.write_packed(zserio_context.meshes3d, zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.simplePolygons2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
            # check array length
            if len(self._choice) != (self._num_elements_):
                raise zserio.PythonRuntimeException("Wrong array length for field Buffers.simplePolygonSets2D: "
                                                    f"{len(self._choice)} != {self._num_elements_}!")
            self._choice.write_packed(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice Buffers!")

    class ZserioPackingContext:
        def __init__(self):
            self._polygons2d_ = nds.core.geometry.polygon2d_buffers.Polygon2DBuffers.ZserioPackingContext()
            self._polygons3d_ = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.ZserioPackingContext()
            self._meshes3d_ = nds.core.geometry.poly_mesh3d_buffers.PolyMesh3DBuffers.ZserioPackingContext()

        @property
        def polygons2d(self):
            return self._polygons2d_

        @property
        def polygons3d(self):
            return self._polygons3d_

        @property
        def meshes3d(self):
            return self._meshes3d_

    class _ZserioElementFactory_positions2d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position2d.Position2D:
            del zserio_index
            return nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._owner._shift_xy_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.position2d.Position2D.ZserioPackingContext:
            return nds.core.geometry.position2d.Position2D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.position2d.Position2D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position2d.Position2D:
            del zserio_index
            return nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_)

    class _ZserioElementFactory_positions3d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader(zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.position3d.Position3D.ZserioPackingContext:
            return nds.core.geometry.position3d.Position3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.position3d.Position3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

    class _ZserioElementFactory_lines2d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line2d.Line2D:
            del zserio_index
            return nds.core.geometry.line2d.Line2D.from_reader(zserio_reader, self._owner._shift_xy_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.line2d.Line2D.ZserioPackingContext:
            return nds.core.geometry.line2d.Line2D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.line2d.Line2D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line2d.Line2D:
            del zserio_index
            return nds.core.geometry.line2d.Line2D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_)

    class _ZserioElementFactory_lines3d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line3d.Line3D:
            del zserio_index
            return nds.core.geometry.line3d.Line3D.from_reader(zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.line3d.Line3D.ZserioPackingContext:
            return nds.core.geometry.line3d.Line3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.line3d.Line3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line3d.Line3D:
            del zserio_index
            return nds.core.geometry.line3d.Line3D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_, self._owner._shift_z_)

    class _ZserioElementFactory_simple_polygons2d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.simple_polygon2d.SimplePolygon2D:
            del zserio_index
            return nds.core.geometry.simple_polygon2d.SimplePolygon2D.from_reader(zserio_reader, self._owner._shift_xy_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.simple_polygon2d.SimplePolygon2D.ZserioPackingContext:
            return nds.core.geometry.simple_polygon2d.SimplePolygon2D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.simple_polygon2d.SimplePolygon2D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.simple_polygon2d.SimplePolygon2D:
            del zserio_index
            return nds.core.geometry.simple_polygon2d.SimplePolygon2D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_)

    class _ZserioElementFactory_simple_polygon_sets2d:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D:
            del zserio_index
            return nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D.from_reader(zserio_reader, self._owner._shift_xy_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D.ZserioPackingContext:
            return nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D:
            del zserio_index
            return nds.core.geometry.simple_polygon_set2d.SimplePolygonSet2D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_xy_)

    CHOICE_POSITIONS2D = 0
    CHOICE_POSITIONS3D = 1
    CHOICE_LINES2D = 2
    CHOICE_LINES3D = 3
    CHOICE_POLYGONS2D = 4
    CHOICE_POLYGONS3D = 5
    CHOICE_MESHES3D = 6
    CHOICE_SIMPLE_POLYGONS2D = 7
    CHOICE_SIMPLE_POLYGON_SETS2D = 8
    UNDEFINED_CHOICE = -1
