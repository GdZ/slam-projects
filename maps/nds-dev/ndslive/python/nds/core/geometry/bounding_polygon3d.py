# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.ring3d

class BoundingPolygon3D:
    def __init__(
            self,
            xy_shift_: nds.core.geometry.coord_shift.CoordShift,
            z_shift_: nds.core.geometry.coord_shift.CoordShift,
            outline_: typing.Union[nds.core.geometry.ring3d.Ring3D, None] = None,
            has_holes_: bool = bool(),
            holes_: typing.Optional[typing.List[nds.core.geometry.ring3d.Ring3D]] = None) -> None:
        self._xy_shift_ = xy_shift_
        self._z_shift_ = z_shift_
        self._outline_ = outline_
        self._has_holes_ = has_holes_
        if holes_ is None:
            self._holes_ = None
        else:
            self._holes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_holes(self)), holes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['BoundingPolygon3D'],
            zserio_reader: zserio.BitStreamReader,
            xy_shift_: nds.core.geometry.coord_shift.CoordShift,
            z_shift_: nds.core.geometry.coord_shift.CoordShift) -> 'BoundingPolygon3D':
        self = object.__new__(cls)
        self._xy_shift_ = xy_shift_
        self._z_shift_ = z_shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BoundingPolygon3D'],
            zserio_context: BoundingPolygon3D.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            xy_shift_: nds.core.geometry.coord_shift.CoordShift,
            z_shift_: nds.core.geometry.coord_shift.CoordShift) -> 'BoundingPolygon3D':
        self = object.__new__(cls)
        self._xy_shift_ = xy_shift_
        self._z_shift_ = z_shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BoundingPolygon3D):
            return (self._xy_shift_ == other._xy_shift_ and
                    self._z_shift_ == other._z_shift_ and
                    (self._outline_ == other._outline_) and
                    (self._has_holes_ == other._has_holes_) and
                    (not other.is_holes_used() if not self.is_holes_used() else (self._holes_ == other._holes_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._xy_shift_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._z_shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._outline_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_holes_)
        if self.is_holes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._holes_)

        return result

    @property
    def xy_shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._xy_shift_

    @property
    def z_shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._z_shift_

    @property
    def outline(self) -> typing.Union[nds.core.geometry.ring3d.Ring3D, None]:
        return self._outline_

    @outline.setter
    def outline(self, outline_: typing.Union[nds.core.geometry.ring3d.Ring3D, None]) -> None:
        self._outline_ = outline_

    @property
    def has_holes(self) -> bool:
        return self._has_holes_

    @has_holes.setter
    def has_holes(self, has_holes_: bool) -> None:
        self._has_holes_ = has_holes_

    @property
    def holes(self) -> typing.Optional[typing.List[nds.core.geometry.ring3d.Ring3D]]:
        return None if self._holes_ is None else self._holes_.raw_array

    @holes.setter
    def holes(self, holes_: typing.Optional[typing.List[nds.core.geometry.ring3d.Ring3D]]) -> None:
        if holes_ is None:
            self._holes_ = None
        else:
            self._holes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_holes(self)), holes_, is_auto=True)

    def is_holes_used(self) -> bool:
        return self._has_holes_

    def is_holes_set(self) -> bool:
        return not self._holes_ is None

    def reset_holes(self) -> None:
        self._holes_ = None

    def init_packing_context(self, zserio_context: BoundingPolygon3D.ZserioPackingContext) -> None:
        self._outline_.init_packing_context(zserio_context.outline)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._outline_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_holes_used():
            end_bitposition += self._holes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BoundingPolygon3D.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._outline_.bitsizeof_packed(zserio_context.outline, end_bitposition)
        end_bitposition += 1
        if self.is_holes_used():
            end_bitposition += self._holes_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._outline_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_holes_used():
            end_bitposition = self._holes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BoundingPolygon3D.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._outline_.initialize_offsets_packed(zserio_context.outline, end_bitposition)
        end_bitposition += 1
        if self.is_holes_used():
            end_bitposition = self._holes_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._outline_ = nds.core.geometry.ring3d.Ring3D.from_reader(zserio_reader, self._xy_shift_, self._z_shift_)
        self._has_holes_ = zserio_reader.read_bool()
        if self.is_holes_used():
            self._holes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_holes(self)), zserio_reader, is_auto=True)
        else:
            self._holes_ = None

    def read_packed(self, zserio_context: BoundingPolygon3D.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._outline_ = nds.core.geometry.ring3d.Ring3D.from_reader_packed(zserio_context.outline, zserio_reader, self._xy_shift_, self._z_shift_)

        self._has_holes_ = zserio_reader.read_bool()

        if self.is_holes_used():
            self._holes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_holes(self)), zserio_reader, is_auto=True)
        else:
            self._holes_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._outline_.shift_xy != (self._xy_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field BoundingPolygon3D.outline: "
                                                f"{self._outline_.shift_xy} != {self._xy_shift_}!")
        if self._outline_.shift_z != (self._z_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field BoundingPolygon3D.outline: "
                                                f"{self._outline_.shift_z} != {self._z_shift_}!")
        self._outline_.write(zserio_writer)

        zserio_writer.write_bool(self._has_holes_)

        if self.is_holes_used():
            self._holes_.write(zserio_writer)

    def write_packed(self, zserio_context: BoundingPolygon3D.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._outline_.shift_xy != (self._xy_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftXY for field BoundingPolygon3D.outline: "
                                                f"{self._outline_.shift_xy} != {self._xy_shift_}!")
        if self._outline_.shift_z != (self._z_shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shiftZ for field BoundingPolygon3D.outline: "
                                                f"{self._outline_.shift_z} != {self._z_shift_}!")
        self._outline_.write_packed(zserio_context.outline, zserio_writer)

        zserio_writer.write_bool(self._has_holes_)

        if self.is_holes_used():
            self._holes_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._outline_ = nds.core.geometry.ring3d.Ring3D.ZserioPackingContext()

        @property
        def outline(self):
            return self._outline_

    class _ZserioElementFactory_holes:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.ring3d.Ring3D:
            del zserio_index
            return nds.core.geometry.ring3d.Ring3D.from_reader(zserio_reader, self._owner._xy_shift_, self._owner._z_shift_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.ring3d.Ring3D.ZserioPackingContext:
            return nds.core.geometry.ring3d.Ring3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.ring3d.Ring3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.ring3d.Ring3D:
            del zserio_index
            return nds.core.geometry.ring3d.Ring3D.from_reader_packed(zserio_context, zserio_reader, self._owner._xy_shift_, self._owner._z_shift_)
