# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.index_buffer_entry

class IndexBuffer:
    def __init__(
            self,
            position_buffer_size_: int,
            num_entries_: int = int(),
            indices_: typing.List[nds.core.geometry.index_buffer_entry.IndexBufferEntry] = None) -> None:
        self._position_buffer_size_ = position_buffer_size_
        self._num_entries_ = num_entries_
        self._indices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_indices(self)), indices_)

    @classmethod
    def from_reader(
            cls: typing.Type['IndexBuffer'],
            zserio_reader: zserio.BitStreamReader,
            position_buffer_size_: int) -> 'IndexBuffer':
        self = object.__new__(cls)
        self._position_buffer_size_ = position_buffer_size_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IndexBuffer'],
            zserio_context: IndexBuffer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            position_buffer_size_: int) -> 'IndexBuffer':
        self = object.__new__(cls)
        self._position_buffer_size_ = position_buffer_size_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IndexBuffer):
            return (self._position_buffer_size_ == other._position_buffer_size_ and
                    (self._num_entries_ == other._num_entries_) and
                    (self._indices_ == other._indices_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._position_buffer_size_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_entries_)
        result = zserio.hashcode.calc_hashcode_object(result, self._indices_)

        return result

    @property
    def position_buffer_size(self) -> int:
        return self._position_buffer_size_

    @property
    def num_entries(self) -> int:
        return self._num_entries_

    @num_entries.setter
    def num_entries(self, num_entries_: int) -> None:
        self._num_entries_ = num_entries_

    @property
    def indices(self) -> typing.List[nds.core.geometry.index_buffer_entry.IndexBufferEntry]:
        return self._indices_.raw_array

    @indices.setter
    def indices(self, indices_: typing.List[nds.core.geometry.index_buffer_entry.IndexBufferEntry]) -> None:
        self._indices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_indices(self)), indices_)

    def init_packing_context(self, zserio_context: IndexBuffer.ZserioPackingContext) -> None:
        zserio_context.num_entries.init(zserio.array.VarSizeArrayTraits(), self._num_entries_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_entries_)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IndexBuffer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_entries_)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_entries_)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IndexBuffer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_entries.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_entries_)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_entries_ = zserio_reader.read_varsize()
        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_indices(self)), zserio_reader, self._num_entries_)

    def read_packed(self, zserio_context: IndexBuffer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_entries_ = zserio_context.num_entries.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_indices(self)), zserio_reader, self._num_entries_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_entries_)

        # check array length
        if len(self._indices_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field IndexBuffer.indices: "
                                                f"{len(self._indices_)} != {self._num_entries_}!")
        self._indices_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: IndexBuffer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_entries.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_entries_)

        # check array length
        if len(self._indices_) != (self._num_entries_):
            raise zserio.PythonRuntimeException("Wrong array length for field IndexBuffer.indices: "
                                                f"{len(self._indices_)} != {self._num_entries_}!")
        self._indices_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_entries_ = zserio.array.DeltaContext()

        @property
        def num_entries(self):
            return self._num_entries_

    class _ZserioElementFactory_indices:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.index_buffer_entry.IndexBufferEntry:
            del zserio_index
            return nds.core.geometry.index_buffer_entry.IndexBufferEntry.from_reader(zserio_reader, self._owner._position_buffer_size_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.index_buffer_entry.IndexBufferEntry.ZserioPackingContext:
            return nds.core.geometry.index_buffer_entry.IndexBufferEntry.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.index_buffer_entry.IndexBufferEntry.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.index_buffer_entry.IndexBufferEntry:
            del zserio_index
            return nds.core.geometry.index_buffer_entry.IndexBufferEntry.from_reader_packed(zserio_context, zserio_reader, self._owner._position_buffer_size_)
