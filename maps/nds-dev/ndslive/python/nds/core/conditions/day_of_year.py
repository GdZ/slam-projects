# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.conditions.day_of_month
import nds.core.conditions.month_of_year
import nds.core.types.year

class DayOfYear:
    def __init__(
            self,
            year_: nds.core.types.year.Year = nds.core.types.year.Year(),
            month_: nds.core.conditions.month_of_year.MonthOfYear = nds.core.conditions.month_of_year.MonthOfYear(),
            day_: nds.core.conditions.day_of_month.DayOfMonth = nds.core.conditions.day_of_month.DayOfMonth(),
            is_inclusive_: bool = bool()) -> None:
        self._year_ = year_
        self._month_ = month_
        self._day_ = day_
        self._is_inclusive_ = is_inclusive_

    @classmethod
    def from_reader(
            cls: typing.Type['DayOfYear'],
            zserio_reader: zserio.BitStreamReader) -> 'DayOfYear':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DayOfYear'],
            zserio_context: DayOfYear.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DayOfYear':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DayOfYear):
            return ((self._year_ == other._year_) and
                    (self._month_ == other._month_) and
                    (self._day_ == other._day_) and
                    (self._is_inclusive_ == other._is_inclusive_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._year_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._month_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._day_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_inclusive_)

        return result

    @property
    def year(self) -> nds.core.types.year.Year:
        return self._year_

    @year.setter
    def year(self, year_: nds.core.types.year.Year) -> None:
        self._year_ = year_

    @property
    def month(self) -> nds.core.conditions.month_of_year.MonthOfYear:
        return self._month_

    @month.setter
    def month(self, month_: nds.core.conditions.month_of_year.MonthOfYear) -> None:
        self._month_ = month_

    @property
    def day(self) -> nds.core.conditions.day_of_month.DayOfMonth:
        return self._day_

    @day.setter
    def day(self, day_: nds.core.conditions.day_of_month.DayOfMonth) -> None:
        self._day_ = day_

    @property
    def is_inclusive(self) -> bool:
        return self._is_inclusive_

    @is_inclusive.setter
    def is_inclusive(self, is_inclusive_: bool) -> None:
        self._is_inclusive_ = is_inclusive_

    def init_packing_context(self, zserio_context: DayOfYear.ZserioPackingContext) -> None:
        zserio_context.year.init(zserio.array.SignedBitFieldArrayTraits(16), self._year_)
        zserio_context.month.init(zserio.array.BitFieldArrayTraits(4), self._month_)
        zserio_context.day.init(zserio.array.BitFieldArrayTraits(5), self._day_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 4
        end_bitposition += 5
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DayOfYear.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.year.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._year_)
        end_bitposition += zserio_context.month.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._month_)
        end_bitposition += zserio_context.day.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._day_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 4
        end_bitposition += 5
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DayOfYear.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.year.bitsizeof(zserio.array.SignedBitFieldArrayTraits(16), self._year_)
        end_bitposition += zserio_context.month.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._month_)
        end_bitposition += zserio_context.day.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._day_)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._year_ = zserio_reader.read_signed_bits(16)
        self._month_ = zserio_reader.read_bits(4)
        self._day_ = zserio_reader.read_bits(5)
        self._is_inclusive_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: DayOfYear.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._year_ = zserio_context.year.read(zserio.array.SignedBitFieldArrayTraits(16), zserio_reader)

        self._month_ = zserio_context.month.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)

        self._day_ = zserio_context.day.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._is_inclusive_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_signed_bits(self._year_, 16)
        zserio_writer.write_bits(self._month_, 4)
        zserio_writer.write_bits(self._day_, 5)
        zserio_writer.write_bool(self._is_inclusive_)

    def write_packed(self, zserio_context: DayOfYear.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.year.write(zserio.array.SignedBitFieldArrayTraits(16), zserio_writer, self._year_)

        zserio_context.month.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._month_)

        zserio_context.day.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._day_)

        zserio_writer.write_bool(self._is_inclusive_)

    class ZserioPackingContext:
        def __init__(self):
            self._year_ = zserio.array.DeltaContext()
            self._month_ = zserio.array.DeltaContext()
            self._day_ = zserio.array.DeltaContext()

        @property
        def year(self):
            return self._year_

        @property
        def month(self):
            return self._month_

        @property
        def day(self):
            return self._day_
