# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Surface(zserio.Enum):
    CLEAR = 0
    SNOW_COVERED = 1
    ICE = 2
    RAIN_COVERED = 3
    HAZARDOUS = 4
    FLOODING = 5
    AQUAPLANING = 6
    SURFACE_WATER_HAZARD = 7
    SLIPPERY_ROAD = 8
    MUD_ON_ROAD = 9
    LOOSE_CHIPPINGS = 10
    OIL_ON_ROAD = 11
    PETROL_ON_ROAD = 12
    BLACK_ICE = 13
    SNOW_DRIFTS = 14
    ICY_PATCHES = 15
    OBJECTS_ON_ROAD = 16
    SHED_LOADS = 17
    FALLEN_TREES = 18
    AVALANCHES = 19
    ROCKS = 20
    LANDSLIPS = 21
    ANIMALS_ON_ROAD = 22
    PEOPLE_ON_ROAD = 23
    CHILDREN_ON_ROAD = 24
    CYCLISTS_ON_ROAD = 25
    LARGE_ANIMALS_ON_ROAD = 26
    HERD_OF_ANIMALS_ON_ROAD = 27
    STONE_THROWING_PERSONS = 28
    BROKEN_DOWN_VEHICLES = 29

    @classmethod
    def from_name(cls: typing.Type['Surface'], item_name: str) -> 'Surface':
        if item_name == 'CLEAR':
            item = Surface.CLEAR
        elif item_name == 'SNOW_COVERED':
            item = Surface.SNOW_COVERED
        elif item_name == 'ICE':
            item = Surface.ICE
        elif item_name == 'RAIN_COVERED':
            item = Surface.RAIN_COVERED
        elif item_name == 'HAZARDOUS':
            item = Surface.HAZARDOUS
        elif item_name == 'FLOODING':
            item = Surface.FLOODING
        elif item_name == 'AQUAPLANING':
            item = Surface.AQUAPLANING
        elif item_name == 'SURFACE_WATER_HAZARD':
            item = Surface.SURFACE_WATER_HAZARD
        elif item_name == 'SLIPPERY_ROAD':
            item = Surface.SLIPPERY_ROAD
        elif item_name == 'MUD_ON_ROAD':
            item = Surface.MUD_ON_ROAD
        elif item_name == 'LOOSE_CHIPPINGS':
            item = Surface.LOOSE_CHIPPINGS
        elif item_name == 'OIL_ON_ROAD':
            item = Surface.OIL_ON_ROAD
        elif item_name == 'PETROL_ON_ROAD':
            item = Surface.PETROL_ON_ROAD
        elif item_name == 'BLACK_ICE':
            item = Surface.BLACK_ICE
        elif item_name == 'SNOW_DRIFTS':
            item = Surface.SNOW_DRIFTS
        elif item_name == 'ICY_PATCHES':
            item = Surface.ICY_PATCHES
        elif item_name == 'OBJECTS_ON_ROAD':
            item = Surface.OBJECTS_ON_ROAD
        elif item_name == 'SHED_LOADS':
            item = Surface.SHED_LOADS
        elif item_name == 'FALLEN_TREES':
            item = Surface.FALLEN_TREES
        elif item_name == 'AVALANCHES':
            item = Surface.AVALANCHES
        elif item_name == 'ROCKS':
            item = Surface.ROCKS
        elif item_name == 'LANDSLIPS':
            item = Surface.LANDSLIPS
        elif item_name == 'ANIMALS_ON_ROAD':
            item = Surface.ANIMALS_ON_ROAD
        elif item_name == 'PEOPLE_ON_ROAD':
            item = Surface.PEOPLE_ON_ROAD
        elif item_name == 'CHILDREN_ON_ROAD':
            item = Surface.CHILDREN_ON_ROAD
        elif item_name == 'CYCLISTS_ON_ROAD':
            item = Surface.CYCLISTS_ON_ROAD
        elif item_name == 'LARGE_ANIMALS_ON_ROAD':
            item = Surface.LARGE_ANIMALS_ON_ROAD
        elif item_name == 'HERD_OF_ANIMALS_ON_ROAD':
            item = Surface.HERD_OF_ANIMALS_ON_ROAD
        elif item_name == 'STONE_THROWING_PERSONS':
            item = Surface.STONE_THROWING_PERSONS
        elif item_name == 'BROKEN_DOWN_VEHICLES':
            item = Surface.BROKEN_DOWN_VEHICLES
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'Surface'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['Surface'], reader: zserio.BitStreamReader) -> 'Surface':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['Surface'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'Surface':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
