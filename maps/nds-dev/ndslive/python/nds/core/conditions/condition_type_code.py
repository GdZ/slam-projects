# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class ConditionTypeCode(zserio.Enum):
    TIME_RANGE_OF_DAY = 0
    TIME_RANGE_OF_WEEK = 1
    DATE_RANGE_OF_YEAR = 2
    DAYS_OF_WEEK = 3
    DAYS_OF_MONTH = 4
    DAY_OF_YEAR = 5
    MONTHS_OF_YEAR = 6
    WEEK_IN_MONTH = 7
    WEEKDAY_IN_MONTH = 8
    CALENDAR_WEEK = 9
    TIME_DURATION = 10
    ODD_OR_EVEN_DAYS = 11
    FUZZY_TIME_DOMAIN = 12
    WEATHER = 13
    FREQUENTLY_USED_VEHICLE_TYPES = 14
    SLOW_ROAD_USERS = 15
    BIG_VEHICLES = 16
    PUBLIC_SERVICE_VEHICLES = 17
    EMERGENCY_MILITARY_DETAILS = 18
    EQUIPMENT = 19
    AUTHORIZATION = 20
    LOAD = 21
    NUM_AXLES = 22
    OCCUPANCY = 23
    LENGTH_METRIC = 24
    LENGTH_IMPERIAL = 25
    VEHICLE_HEIGHT_METRIC = 26
    VEHICLE_HEIGHT_IMPERIAL = 27
    VEHICLE_WIDTH_METRIC = 28
    VEHICLE_WIDTH_IMPERIAL = 29
    WEIGHT_METRIC = 30
    WEIGHT_IMPERIAL = 31
    WEIGHT_PER_AXLE_METRIC = 32
    WEIGHT_PER_AXLE_IMPERIAL = 33
    WEIGHT_PER_TANDEM_AXLE_METRIC = 34
    WEIGHT_PER_TANDEM_AXLE_IMPERIAL = 35
    WEIGHT_PER_TRIDEM_AXLE_METRIC = 36
    WEIGHT_PER_TRIDEM_AXLE_IMPERIAL = 37
    TIME_RANGE_OF_WEEKDAYS = 38
    VISIBILITY = 39
    SURFACE = 40
    EURO_EMISSION_CLASS = 41
    TIME_DURATION_HOURS = 42
    TIME_RANGE_OF_YEAR = 43
    NUM_TRAILERS = 44
    TRAILER_LENGTH_METRIC = 45
    TRAILER_LENGTH_IMPERIAL = 46
    ENGINE_DISPLACEMENT = 47
    ENERGY_TYPE = 48
    BRAKED_TRAILER = 49
    PUBLIC_BUS_TYPE = 50

    @classmethod
    def from_name(cls: typing.Type['ConditionTypeCode'], item_name: str) -> 'ConditionTypeCode':
        if item_name == 'TIME_RANGE_OF_DAY':
            item = ConditionTypeCode.TIME_RANGE_OF_DAY
        elif item_name == 'TIME_RANGE_OF_WEEK':
            item = ConditionTypeCode.TIME_RANGE_OF_WEEK
        elif item_name == 'DATE_RANGE_OF_YEAR':
            item = ConditionTypeCode.DATE_RANGE_OF_YEAR
        elif item_name == 'DAYS_OF_WEEK':
            item = ConditionTypeCode.DAYS_OF_WEEK
        elif item_name == 'DAYS_OF_MONTH':
            item = ConditionTypeCode.DAYS_OF_MONTH
        elif item_name == 'DAY_OF_YEAR':
            item = ConditionTypeCode.DAY_OF_YEAR
        elif item_name == 'MONTHS_OF_YEAR':
            item = ConditionTypeCode.MONTHS_OF_YEAR
        elif item_name == 'WEEK_IN_MONTH':
            item = ConditionTypeCode.WEEK_IN_MONTH
        elif item_name == 'WEEKDAY_IN_MONTH':
            item = ConditionTypeCode.WEEKDAY_IN_MONTH
        elif item_name == 'CALENDAR_WEEK':
            item = ConditionTypeCode.CALENDAR_WEEK
        elif item_name == 'TIME_DURATION':
            item = ConditionTypeCode.TIME_DURATION
        elif item_name == 'ODD_OR_EVEN_DAYS':
            item = ConditionTypeCode.ODD_OR_EVEN_DAYS
        elif item_name == 'FUZZY_TIME_DOMAIN':
            item = ConditionTypeCode.FUZZY_TIME_DOMAIN
        elif item_name == 'WEATHER':
            item = ConditionTypeCode.WEATHER
        elif item_name == 'FREQUENTLY_USED_VEHICLE_TYPES':
            item = ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES
        elif item_name == 'SLOW_ROAD_USERS':
            item = ConditionTypeCode.SLOW_ROAD_USERS
        elif item_name == 'BIG_VEHICLES':
            item = ConditionTypeCode.BIG_VEHICLES
        elif item_name == 'PUBLIC_SERVICE_VEHICLES':
            item = ConditionTypeCode.PUBLIC_SERVICE_VEHICLES
        elif item_name == 'EMERGENCY_MILITARY_DETAILS':
            item = ConditionTypeCode.EMERGENCY_MILITARY_DETAILS
        elif item_name == 'EQUIPMENT':
            item = ConditionTypeCode.EQUIPMENT
        elif item_name == 'AUTHORIZATION':
            item = ConditionTypeCode.AUTHORIZATION
        elif item_name == 'LOAD':
            item = ConditionTypeCode.LOAD
        elif item_name == 'NUM_AXLES':
            item = ConditionTypeCode.NUM_AXLES
        elif item_name == 'OCCUPANCY':
            item = ConditionTypeCode.OCCUPANCY
        elif item_name == 'LENGTH_METRIC':
            item = ConditionTypeCode.LENGTH_METRIC
        elif item_name == 'LENGTH_IMPERIAL':
            item = ConditionTypeCode.LENGTH_IMPERIAL
        elif item_name == 'VEHICLE_HEIGHT_METRIC':
            item = ConditionTypeCode.VEHICLE_HEIGHT_METRIC
        elif item_name == 'VEHICLE_HEIGHT_IMPERIAL':
            item = ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL
        elif item_name == 'VEHICLE_WIDTH_METRIC':
            item = ConditionTypeCode.VEHICLE_WIDTH_METRIC
        elif item_name == 'VEHICLE_WIDTH_IMPERIAL':
            item = ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL
        elif item_name == 'WEIGHT_METRIC':
            item = ConditionTypeCode.WEIGHT_METRIC
        elif item_name == 'WEIGHT_IMPERIAL':
            item = ConditionTypeCode.WEIGHT_IMPERIAL
        elif item_name == 'WEIGHT_PER_AXLE_METRIC':
            item = ConditionTypeCode.WEIGHT_PER_AXLE_METRIC
        elif item_name == 'WEIGHT_PER_AXLE_IMPERIAL':
            item = ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL
        elif item_name == 'WEIGHT_PER_TANDEM_AXLE_METRIC':
            item = ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC
        elif item_name == 'WEIGHT_PER_TANDEM_AXLE_IMPERIAL':
            item = ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL
        elif item_name == 'WEIGHT_PER_TRIDEM_AXLE_METRIC':
            item = ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC
        elif item_name == 'WEIGHT_PER_TRIDEM_AXLE_IMPERIAL':
            item = ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL
        elif item_name == 'TIME_RANGE_OF_WEEKDAYS':
            item = ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS
        elif item_name == 'VISIBILITY':
            item = ConditionTypeCode.VISIBILITY
        elif item_name == 'SURFACE':
            item = ConditionTypeCode.SURFACE
        elif item_name == 'EURO_EMISSION_CLASS':
            item = ConditionTypeCode.EURO_EMISSION_CLASS
        elif item_name == 'TIME_DURATION_HOURS':
            item = ConditionTypeCode.TIME_DURATION_HOURS
        elif item_name == 'TIME_RANGE_OF_YEAR':
            item = ConditionTypeCode.TIME_RANGE_OF_YEAR
        elif item_name == 'NUM_TRAILERS':
            item = ConditionTypeCode.NUM_TRAILERS
        elif item_name == 'TRAILER_LENGTH_METRIC':
            item = ConditionTypeCode.TRAILER_LENGTH_METRIC
        elif item_name == 'TRAILER_LENGTH_IMPERIAL':
            item = ConditionTypeCode.TRAILER_LENGTH_IMPERIAL
        elif item_name == 'ENGINE_DISPLACEMENT':
            item = ConditionTypeCode.ENGINE_DISPLACEMENT
        elif item_name == 'ENERGY_TYPE':
            item = ConditionTypeCode.ENERGY_TYPE
        elif item_name == 'BRAKED_TRAILER':
            item = ConditionTypeCode.BRAKED_TRAILER
        elif item_name == 'PUBLIC_BUS_TYPE':
            item = ConditionTypeCode.PUBLIC_BUS_TYPE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'ConditionTypeCode'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['ConditionTypeCode'], reader: zserio.BitStreamReader) -> 'ConditionTypeCode':
        return cls(reader.read_bits(16))

    @classmethod
    def from_reader_packed(cls: typing.Type['ConditionTypeCode'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'ConditionTypeCode':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(16),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(16),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 16

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(16),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 16)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(16), writer, self.value)
