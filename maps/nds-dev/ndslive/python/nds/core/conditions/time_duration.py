# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TimeDuration:
    def __init__(
            self,
            days_: int = int(),
            months_: int = int(),
            years_: int = int()) -> None:
        self._days_ = days_
        self._months_ = months_
        self._years_ = years_

    @classmethod
    def from_reader(
            cls: typing.Type['TimeDuration'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeDuration':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeDuration'],
            zserio_context: TimeDuration.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeDuration':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeDuration):
            return ((self._days_ == other._days_) and
                    (self._months_ == other._months_) and
                    (self._years_ == other._years_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._days_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._months_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._years_)

        return result

    @property
    def days(self) -> int:
        return self._days_

    @days.setter
    def days(self, days_: int) -> None:
        self._days_ = days_

    @property
    def months(self) -> int:
        return self._months_

    @months.setter
    def months(self, months_: int) -> None:
        self._months_ = months_

    @property
    def years(self) -> int:
        return self._years_

    @years.setter
    def years(self, years_: int) -> None:
        self._years_ = years_

    def init_packing_context(self, zserio_context: TimeDuration.ZserioPackingContext) -> None:
        zserio_context.days.init(zserio.array.BitFieldArrayTraits(8), self._days_)
        zserio_context.months.init(zserio.array.BitFieldArrayTraits(8), self._months_)
        zserio_context.years.init(zserio.array.BitFieldArrayTraits(8), self._years_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeDuration.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.days.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._days_)
        end_bitposition += zserio_context.months.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._months_)
        end_bitposition += zserio_context.years.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._years_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeDuration.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.days.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._days_)
        end_bitposition += zserio_context.months.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._months_)
        end_bitposition += zserio_context.years.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._years_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._days_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._days_ <= 30):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.days!")

        self._months_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._months_ <= 12):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.months!")

        self._years_ = zserio_reader.read_bits(8)

    def read_packed(self, zserio_context: TimeDuration.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._days_ = zserio_context.days.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._days_ <= 30):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.days!")

        self._months_ = zserio_context.months.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._months_ <= 12):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.months!")

        self._years_ = zserio_context.years.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._days_ <= 30):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.days!")
        zserio_writer.write_bits(self._days_, 8)

        # check constraint
        if not (self._months_ <= 12):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.months!")
        zserio_writer.write_bits(self._months_, 8)

        zserio_writer.write_bits(self._years_, 8)

    def write_packed(self, zserio_context: TimeDuration.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._days_ <= 30):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.days!")
        zserio_context.days.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._days_)

        # check constraint
        if not (self._months_ <= 12):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeDuration.months!")
        zserio_context.months.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._months_)

        zserio_context.years.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._years_)

    class ZserioPackingContext:
        def __init__(self):
            self._days_ = zserio.array.DeltaContext()
            self._months_ = zserio.array.DeltaContext()
            self._years_ = zserio.array.DeltaContext()

        @property
        def days(self):
            return self._days_

        @property
        def months(self):
            return self._months_

        @property
        def years(self):
            return self._years_
