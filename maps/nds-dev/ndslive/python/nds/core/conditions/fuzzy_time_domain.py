# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class FuzzyTimeDomain(zserio.Enum):
    EXTERNAL = 0
    DAWN = 1
    DUSK = 2
    SCHOOL = 3
    HOLIDAY = 4
    WINTER = 5
    SPRING = 6
    SUMMER = 7
    AUTUMN = 8
    HIGH_TIDE = 9
    LOW_TIDE = 10
    HIGH_WATER = 11
    LOW_WATER = 12
    WET = 13
    DRY = 14
    PEAK_HOURS = 15
    OFF_PEAK_HOURS = 16
    MORNING = 17
    EVENING_RUSH_HOUR = 18
    MORNING_RUSH_HOUR = 19
    DAY = 20
    NIGHT = 21
    NON_SCHOOL_HOURS = 22
    SCHOOL_HOURS = 23
    WHEN_CHILDREN_ARE_PRESENT = 24
    SUNRISE_TILL_SUNSET = 25
    SUNSET_TILL_SUNRISE = 26
    AFTERNOON = 27
    EVENT = 28
    MARKET_HOURS = 29
    UNDEFINED_OCCASION = 30
    RACE_DAYS = 31
    POLLUTION = 32
    EVENING = 33
    BUSINESS_HOURS = 34
    SKI_SEASON = 35
    TOURIST_SEASON = 36
    CHURCH_HOURS = 37
    SUMMER_SCHOOL = 38
    FUNERAL = 39
    HUNTING_SEASON = 40
    MILITARY_EXERCISE = 41

    @classmethod
    def from_name(cls: typing.Type['FuzzyTimeDomain'], item_name: str) -> 'FuzzyTimeDomain':
        if item_name == 'EXTERNAL':
            item = FuzzyTimeDomain.EXTERNAL
        elif item_name == 'DAWN':
            item = FuzzyTimeDomain.DAWN
        elif item_name == 'DUSK':
            item = FuzzyTimeDomain.DUSK
        elif item_name == 'SCHOOL':
            item = FuzzyTimeDomain.SCHOOL
        elif item_name == 'HOLIDAY':
            item = FuzzyTimeDomain.HOLIDAY
        elif item_name == 'WINTER':
            item = FuzzyTimeDomain.WINTER
        elif item_name == 'SPRING':
            item = FuzzyTimeDomain.SPRING
        elif item_name == 'SUMMER':
            item = FuzzyTimeDomain.SUMMER
        elif item_name == 'AUTUMN':
            item = FuzzyTimeDomain.AUTUMN
        elif item_name == 'HIGH_TIDE':
            item = FuzzyTimeDomain.HIGH_TIDE
        elif item_name == 'LOW_TIDE':
            item = FuzzyTimeDomain.LOW_TIDE
        elif item_name == 'HIGH_WATER':
            item = FuzzyTimeDomain.HIGH_WATER
        elif item_name == 'LOW_WATER':
            item = FuzzyTimeDomain.LOW_WATER
        elif item_name == 'WET':
            item = FuzzyTimeDomain.WET
        elif item_name == 'DRY':
            item = FuzzyTimeDomain.DRY
        elif item_name == 'PEAK_HOURS':
            item = FuzzyTimeDomain.PEAK_HOURS
        elif item_name == 'OFF_PEAK_HOURS':
            item = FuzzyTimeDomain.OFF_PEAK_HOURS
        elif item_name == 'MORNING':
            item = FuzzyTimeDomain.MORNING
        elif item_name == 'EVENING_RUSH_HOUR':
            item = FuzzyTimeDomain.EVENING_RUSH_HOUR
        elif item_name == 'MORNING_RUSH_HOUR':
            item = FuzzyTimeDomain.MORNING_RUSH_HOUR
        elif item_name == 'DAY':
            item = FuzzyTimeDomain.DAY
        elif item_name == 'NIGHT':
            item = FuzzyTimeDomain.NIGHT
        elif item_name == 'NON_SCHOOL_HOURS':
            item = FuzzyTimeDomain.NON_SCHOOL_HOURS
        elif item_name == 'SCHOOL_HOURS':
            item = FuzzyTimeDomain.SCHOOL_HOURS
        elif item_name == 'WHEN_CHILDREN_ARE_PRESENT':
            item = FuzzyTimeDomain.WHEN_CHILDREN_ARE_PRESENT
        elif item_name == 'SUNRISE_TILL_SUNSET':
            item = FuzzyTimeDomain.SUNRISE_TILL_SUNSET
        elif item_name == 'SUNSET_TILL_SUNRISE':
            item = FuzzyTimeDomain.SUNSET_TILL_SUNRISE
        elif item_name == 'AFTERNOON':
            item = FuzzyTimeDomain.AFTERNOON
        elif item_name == 'EVENT':
            item = FuzzyTimeDomain.EVENT
        elif item_name == 'MARKET_HOURS':
            item = FuzzyTimeDomain.MARKET_HOURS
        elif item_name == 'UNDEFINED_OCCASION':
            item = FuzzyTimeDomain.UNDEFINED_OCCASION
        elif item_name == 'RACE_DAYS':
            item = FuzzyTimeDomain.RACE_DAYS
        elif item_name == 'POLLUTION':
            item = FuzzyTimeDomain.POLLUTION
        elif item_name == 'EVENING':
            item = FuzzyTimeDomain.EVENING
        elif item_name == 'BUSINESS_HOURS':
            item = FuzzyTimeDomain.BUSINESS_HOURS
        elif item_name == 'SKI_SEASON':
            item = FuzzyTimeDomain.SKI_SEASON
        elif item_name == 'TOURIST_SEASON':
            item = FuzzyTimeDomain.TOURIST_SEASON
        elif item_name == 'CHURCH_HOURS':
            item = FuzzyTimeDomain.CHURCH_HOURS
        elif item_name == 'SUMMER_SCHOOL':
            item = FuzzyTimeDomain.SUMMER_SCHOOL
        elif item_name == 'FUNERAL':
            item = FuzzyTimeDomain.FUNERAL
        elif item_name == 'HUNTING_SEASON':
            item = FuzzyTimeDomain.HUNTING_SEASON
        elif item_name == 'MILITARY_EXERCISE':
            item = FuzzyTimeDomain.MILITARY_EXERCISE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'FuzzyTimeDomain'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['FuzzyTimeDomain'], reader: zserio.BitStreamReader) -> 'FuzzyTimeDomain':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['FuzzyTimeDomain'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'FuzzyTimeDomain':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
