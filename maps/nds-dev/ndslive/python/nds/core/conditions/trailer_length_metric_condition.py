# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.trailer_length_metric

class TrailerLengthMetricCondition:
    def __init__(
            self,
            trailer_number_: int = int(),
            length_: nds.core.vehicle.trailer_length_metric.TrailerLengthMetric = nds.core.vehicle.trailer_length_metric.TrailerLengthMetric(),
            is_inclusive_: bool = bool()) -> None:
        self._trailer_number_ = trailer_number_
        self._length_ = length_
        self._is_inclusive_ = is_inclusive_

    @classmethod
    def from_reader(
            cls: typing.Type['TrailerLengthMetricCondition'],
            zserio_reader: zserio.BitStreamReader) -> 'TrailerLengthMetricCondition':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TrailerLengthMetricCondition'],
            zserio_context: TrailerLengthMetricCondition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TrailerLengthMetricCondition':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TrailerLengthMetricCondition):
            return ((self._trailer_number_ == other._trailer_number_) and
                    (self._length_ == other._length_) and
                    (self._is_inclusive_ == other._is_inclusive_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._trailer_number_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_inclusive_)

        return result

    @property
    def trailer_number(self) -> int:
        return self._trailer_number_

    @trailer_number.setter
    def trailer_number(self, trailer_number_: int) -> None:
        self._trailer_number_ = trailer_number_

    @property
    def length(self) -> nds.core.vehicle.trailer_length_metric.TrailerLengthMetric:
        return self._length_

    @length.setter
    def length(self, length_: nds.core.vehicle.trailer_length_metric.TrailerLengthMetric) -> None:
        self._length_ = length_

    @property
    def is_inclusive(self) -> bool:
        return self._is_inclusive_

    @is_inclusive.setter
    def is_inclusive(self, is_inclusive_: bool) -> None:
        self._is_inclusive_ = is_inclusive_

    def init_packing_context(self, zserio_context: TrailerLengthMetricCondition.ZserioPackingContext) -> None:
        zserio_context.trailer_number.init(zserio.array.BitFieldArrayTraits(2), self._trailer_number_)
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 2
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TrailerLengthMetricCondition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.trailer_number.bitsizeof(zserio.array.BitFieldArrayTraits(2), self._trailer_number_)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 2
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TrailerLengthMetricCondition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.trailer_number.bitsizeof(zserio.array.BitFieldArrayTraits(2), self._trailer_number_)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._trailer_number_ = zserio_reader.read_bits(2)
        self._length_ = zserio_reader.read_varuint32()
        self._is_inclusive_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: TrailerLengthMetricCondition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._trailer_number_ = zserio_context.trailer_number.read(zserio.array.BitFieldArrayTraits(2), zserio_reader)

        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._is_inclusive_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._trailer_number_, 2)
        zserio_writer.write_varuint32(self._length_)
        zserio_writer.write_bool(self._is_inclusive_)

    def write_packed(self, zserio_context: TrailerLengthMetricCondition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.trailer_number.write(zserio.array.BitFieldArrayTraits(2), zserio_writer, self._trailer_number_)

        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        zserio_writer.write_bool(self._is_inclusive_)

    class ZserioPackingContext:
        def __init__(self):
            self._trailer_number_ = zserio.array.DeltaContext()
            self._length_ = zserio.array.DeltaContext()

        @property
        def trailer_number(self):
            return self._trailer_number_

        @property
        def length(self):
            return self._length_
