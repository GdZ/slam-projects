# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.conditions.authorization_condition
import nds.core.conditions.big_vehicles_condition
import nds.core.conditions.braked_trailer
import nds.core.conditions.calendar_week
import nds.core.conditions.condition_type_code
import nds.core.conditions.date_range_of_year
import nds.core.conditions.day_of_year
import nds.core.conditions.days_of_month
import nds.core.conditions.days_of_week
import nds.core.conditions.emergency_military_detail_condition
import nds.core.conditions.energy_type_condition
import nds.core.conditions.equipment_condition
import nds.core.conditions.euro_emission_class_condition
import nds.core.conditions.frequently_used_vehicle_types_condition
import nds.core.conditions.fuzzy_time_domain_condition
import nds.core.conditions.load_condition
import nds.core.conditions.months_of_year
import nds.core.conditions.num_axles
import nds.core.conditions.num_trailers_condition
import nds.core.conditions.occupancy
import nds.core.conditions.odd_or_even_days
import nds.core.conditions.public_bus_type_condition
import nds.core.conditions.public_service_vehicles_condition
import nds.core.conditions.slow_road_users_condition
import nds.core.conditions.surface
import nds.core.conditions.time_duration
import nds.core.conditions.time_duration_hours
import nds.core.conditions.time_range_of_day
import nds.core.conditions.time_range_of_week
import nds.core.conditions.time_range_of_week_days
import nds.core.conditions.time_range_of_year
import nds.core.conditions.trailer_length_imperial_condition
import nds.core.conditions.trailer_length_metric_condition
import nds.core.conditions.visibility
import nds.core.conditions.weather_condition
import nds.core.conditions.week_in_month
import nds.core.conditions.weekday_in_month
import nds.core.types.height_centimeters
import nds.core.types.height_inch
import nds.core.types.length_centimeters
import nds.core.types.length_inch
import nds.core.types.weight10_kilogram
import nds.core.types.weight10_lbs
import nds.core.types.width_centimeters
import nds.core.types.width_inch
import nds.core.vehicle.engine_displacement

class ConditionValue:
    def __init__(
            self,
            code_: nds.core.conditions.condition_type_code.ConditionTypeCode,
            *,
            time_range_of_day_: typing.Union[nds.core.conditions.time_range_of_day.TimeRangeOfDay, None] = None,
            time_range_of_week_: typing.Union[nds.core.conditions.time_range_of_week.TimeRangeOfWeek, None] = None,
            date_range_of_year_: typing.Union[nds.core.conditions.date_range_of_year.DateRangeOfYear, None] = None,
            days_of_week_: typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None] = None,
            days_of_month_: typing.Union[nds.core.conditions.days_of_month.DaysOfMonth, None] = None,
            day_of_year_: typing.Union[nds.core.conditions.day_of_year.DayOfYear, None] = None,
            months_of_year_: typing.Union[nds.core.conditions.months_of_year.MonthsOfYear, None] = None,
            week_in_month_: typing.Union[nds.core.conditions.week_in_month.WeekInMonth, None] = None,
            weekday_in_month_: typing.Union[nds.core.conditions.weekday_in_month.WeekdayInMonth, None] = None,
            calendar_week_: typing.Union[nds.core.conditions.calendar_week.CalendarWeek, None] = None,
            time_duration_: typing.Union[nds.core.conditions.time_duration.TimeDuration, None] = None,
            odd_or_even_days_: typing.Union[nds.core.conditions.odd_or_even_days.OddOrEvenDays, None] = None,
            fuzzy_time_domain_: typing.Union[nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition, None] = None,
            weather_: typing.Union[nds.core.conditions.weather_condition.WeatherCondition, None] = None,
            frequently_used_vehicles_: typing.Union[nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition, None] = None,
            slow_road_users_: typing.Union[nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition, None] = None,
            big_vehicles_: typing.Union[nds.core.conditions.big_vehicles_condition.BigVehiclesCondition, None] = None,
            public_service_vehicles_: typing.Union[nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition, None] = None,
            emergency_military_details_: typing.Union[nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition, None] = None,
            equipment_: typing.Union[nds.core.conditions.equipment_condition.EquipmentCondition, None] = None,
            authorization_: typing.Union[nds.core.conditions.authorization_condition.AuthorizationCondition, None] = None,
            load_: typing.Union[nds.core.conditions.load_condition.LoadCondition, None] = None,
            num_axles_: typing.Union[nds.core.conditions.num_axles.NumAxles, None] = None,
            occupancy_: typing.Union[nds.core.conditions.occupancy.Occupancy, None] = None,
            vehicle_length_metric_: typing.Union[nds.core.types.length_centimeters.LengthCentimeters, None] = None,
            vehicle_length_imperial_: typing.Union[nds.core.types.length_inch.LengthInch, None] = None,
            vehicle_height_metric_: typing.Union[nds.core.types.height_centimeters.HeightCentimeters, None] = None,
            vehicle_height_imperial_: typing.Union[nds.core.types.height_inch.HeightInch, None] = None,
            vehicle_width_metric_: typing.Union[nds.core.types.width_centimeters.WidthCentimeters, None] = None,
            vehicle_width_imperial_: typing.Union[nds.core.types.width_inch.WidthInch, None] = None,
            weight_metric_: typing.Union[nds.core.types.weight10_kilogram.Weight10Kilogram, None] = None,
            weight_imperial_: typing.Union[nds.core.types.weight10_lbs.Weight10Lbs, None] = None,
            weight_per_axle_metric_: typing.Union[nds.core.types.weight10_kilogram.Weight10Kilogram, None] = None,
            weight_per_axle_imperial_: typing.Union[nds.core.types.weight10_lbs.Weight10Lbs, None] = None,
            weight_per_tandem_axle_metric_: typing.Union[nds.core.types.weight10_kilogram.Weight10Kilogram, None] = None,
            weight_per_tandem_axle_imperial_: typing.Union[nds.core.types.weight10_lbs.Weight10Lbs, None] = None,
            weight_per_tridem_axle_metric_: typing.Union[nds.core.types.weight10_kilogram.Weight10Kilogram, None] = None,
            weight_per_tridem_axle_imperial_: typing.Union[nds.core.types.weight10_lbs.Weight10Lbs, None] = None,
            time_range_of_week_days_: typing.Union[nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays, None] = None,
            visibility_: typing.Union[nds.core.conditions.visibility.Visibility, None] = None,
            surface_: typing.Union[nds.core.conditions.surface.Surface, None] = None,
            euro_emission_class_: typing.Union[nds.core.conditions.euro_emission_class_condition.EuroEmissionClassCondition, None] = None,
            time_duration_hours_: typing.Union[nds.core.conditions.time_duration_hours.TimeDurationHours, None] = None,
            time_range_of_year_: typing.Union[nds.core.conditions.time_range_of_year.TimeRangeOfYear, None] = None,
            num_trailers_: typing.Union[nds.core.conditions.num_trailers_condition.NumTrailersCondition, None] = None,
            trailer_length_metric_: typing.Union[nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition, None] = None,
            trailer_length_imperial_: typing.Union[nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition, None] = None,
            engine_displacement_: typing.Union[nds.core.vehicle.engine_displacement.EngineDisplacement, None] = None,
            energy_type_: typing.Union[nds.core.conditions.energy_type_condition.EnergyTypeCondition, None] = None,
            braked_trailer_: typing.Union[nds.core.conditions.braked_trailer.BrakedTrailer, None] = None,
            public_bus_types_: typing.Union[nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition, None] = None) -> None:
        self._code_ = code_
        self._choice: typing.Any = None
        if time_range_of_day_ is not None:
            self._choice = time_range_of_day_
        if time_range_of_week_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = time_range_of_week_
        if date_range_of_year_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = date_range_of_year_
        if days_of_week_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = days_of_week_
        if days_of_month_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = days_of_month_
        if day_of_year_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = day_of_year_
        if months_of_year_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = months_of_year_
        if week_in_month_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = week_in_month_
        if weekday_in_month_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weekday_in_month_
        if calendar_week_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = calendar_week_
        if time_duration_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = time_duration_
        if odd_or_even_days_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = odd_or_even_days_
        if fuzzy_time_domain_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = fuzzy_time_domain_
        if weather_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weather_
        if frequently_used_vehicles_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = frequently_used_vehicles_
        if slow_road_users_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = slow_road_users_
        if big_vehicles_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = big_vehicles_
        if public_service_vehicles_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = public_service_vehicles_
        if emergency_military_details_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = emergency_military_details_
        if equipment_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = equipment_
        if authorization_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = authorization_
        if load_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = load_
        if num_axles_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = num_axles_
        if occupancy_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = occupancy_
        if vehicle_length_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_length_metric_
        if vehicle_length_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_length_imperial_
        if vehicle_height_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_height_metric_
        if vehicle_height_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_height_imperial_
        if vehicle_width_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_width_metric_
        if vehicle_width_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = vehicle_width_imperial_
        if weight_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_metric_
        if weight_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_imperial_
        if weight_per_axle_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_axle_metric_
        if weight_per_axle_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_axle_imperial_
        if weight_per_tandem_axle_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_tandem_axle_metric_
        if weight_per_tandem_axle_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_tandem_axle_imperial_
        if weight_per_tridem_axle_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_tridem_axle_metric_
        if weight_per_tridem_axle_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = weight_per_tridem_axle_imperial_
        if time_range_of_week_days_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = time_range_of_week_days_
        if visibility_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = visibility_
        if surface_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = surface_
        if euro_emission_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = euro_emission_class_
        if time_duration_hours_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = time_duration_hours_
        if time_range_of_year_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = time_range_of_year_
        if num_trailers_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = num_trailers_
        if trailer_length_metric_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = trailer_length_metric_
        if trailer_length_imperial_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = trailer_length_imperial_
        if engine_displacement_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = engine_displacement_
        if energy_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = energy_type_
        if braked_trailer_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = braked_trailer_
        if public_bus_types_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice ConditionValue is ambiguous!")
            self._choice = public_bus_types_

    @classmethod
    def from_reader(
            cls: typing.Type['ConditionValue'],
            zserio_reader: zserio.BitStreamReader,
            code_: nds.core.conditions.condition_type_code.ConditionTypeCode) -> 'ConditionValue':
        self = object.__new__(cls)
        self._code_ = code_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ConditionValue'],
            zserio_context: ConditionValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            code_: nds.core.conditions.condition_type_code.ConditionTypeCode) -> 'ConditionValue':
        self = object.__new__(cls)
        self._code_ = code_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ConditionValue):
            return (self._code_ == other._code_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._code_)
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            result = zserio.hashcode.calc_hashcode_bool(result, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def code(self) -> nds.core.conditions.condition_type_code.ConditionTypeCode:
        return self._code_

    @property
    def time_range_of_day(self) -> typing.Union[nds.core.conditions.time_range_of_day.TimeRangeOfDay, None]:
        return self._choice

    @time_range_of_day.setter
    def time_range_of_day(self, time_range_of_day_: typing.Union[nds.core.conditions.time_range_of_day.TimeRangeOfDay, None]) -> None:
        self._choice = time_range_of_day_

    @property
    def time_range_of_week(self) -> typing.Union[nds.core.conditions.time_range_of_week.TimeRangeOfWeek, None]:
        return self._choice

    @time_range_of_week.setter
    def time_range_of_week(self, time_range_of_week_: typing.Union[nds.core.conditions.time_range_of_week.TimeRangeOfWeek, None]) -> None:
        self._choice = time_range_of_week_

    @property
    def date_range_of_year(self) -> typing.Union[nds.core.conditions.date_range_of_year.DateRangeOfYear, None]:
        return self._choice

    @date_range_of_year.setter
    def date_range_of_year(self, date_range_of_year_: typing.Union[nds.core.conditions.date_range_of_year.DateRangeOfYear, None]) -> None:
        self._choice = date_range_of_year_

    @property
    def days_of_week(self) -> typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None]:
        return self._choice

    @days_of_week.setter
    def days_of_week(self, days_of_week_: typing.Union[nds.core.conditions.days_of_week.DaysOfWeek, None]) -> None:
        self._choice = days_of_week_

    @property
    def days_of_month(self) -> typing.Union[nds.core.conditions.days_of_month.DaysOfMonth, None]:
        return self._choice

    @days_of_month.setter
    def days_of_month(self, days_of_month_: typing.Union[nds.core.conditions.days_of_month.DaysOfMonth, None]) -> None:
        self._choice = days_of_month_

    @property
    def day_of_year(self) -> typing.Union[nds.core.conditions.day_of_year.DayOfYear, None]:
        return self._choice

    @day_of_year.setter
    def day_of_year(self, day_of_year_: typing.Union[nds.core.conditions.day_of_year.DayOfYear, None]) -> None:
        self._choice = day_of_year_

    @property
    def months_of_year(self) -> typing.Union[nds.core.conditions.months_of_year.MonthsOfYear, None]:
        return self._choice

    @months_of_year.setter
    def months_of_year(self, months_of_year_: typing.Union[nds.core.conditions.months_of_year.MonthsOfYear, None]) -> None:
        self._choice = months_of_year_

    @property
    def week_in_month(self) -> typing.Union[nds.core.conditions.week_in_month.WeekInMonth, None]:
        return self._choice

    @week_in_month.setter
    def week_in_month(self, week_in_month_: typing.Union[nds.core.conditions.week_in_month.WeekInMonth, None]) -> None:
        self._choice = week_in_month_

    @property
    def weekday_in_month(self) -> typing.Union[nds.core.conditions.weekday_in_month.WeekdayInMonth, None]:
        return self._choice

    @weekday_in_month.setter
    def weekday_in_month(self, weekday_in_month_: typing.Union[nds.core.conditions.weekday_in_month.WeekdayInMonth, None]) -> None:
        self._choice = weekday_in_month_

    @property
    def calendar_week(self) -> typing.Union[nds.core.conditions.calendar_week.CalendarWeek, None]:
        return self._choice

    @calendar_week.setter
    def calendar_week(self, calendar_week_: typing.Union[nds.core.conditions.calendar_week.CalendarWeek, None]) -> None:
        self._choice = calendar_week_

    @property
    def time_duration(self) -> typing.Union[nds.core.conditions.time_duration.TimeDuration, None]:
        return self._choice

    @time_duration.setter
    def time_duration(self, time_duration_: typing.Union[nds.core.conditions.time_duration.TimeDuration, None]) -> None:
        self._choice = time_duration_

    @property
    def odd_or_even_days(self) -> nds.core.conditions.odd_or_even_days.OddOrEvenDays:
        return self._choice

    @odd_or_even_days.setter
    def odd_or_even_days(self, odd_or_even_days_: nds.core.conditions.odd_or_even_days.OddOrEvenDays) -> None:
        self._choice = odd_or_even_days_

    @property
    def fuzzy_time_domain(self) -> typing.Union[nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition, None]:
        return self._choice

    @fuzzy_time_domain.setter
    def fuzzy_time_domain(self, fuzzy_time_domain_: typing.Union[nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition, None]) -> None:
        self._choice = fuzzy_time_domain_

    @property
    def weather(self) -> typing.Union[nds.core.conditions.weather_condition.WeatherCondition, None]:
        return self._choice

    @weather.setter
    def weather(self, weather_: typing.Union[nds.core.conditions.weather_condition.WeatherCondition, None]) -> None:
        self._choice = weather_

    @property
    def frequently_used_vehicles(self) -> typing.Union[nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition, None]:
        return self._choice

    @frequently_used_vehicles.setter
    def frequently_used_vehicles(self, frequently_used_vehicles_: typing.Union[nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition, None]) -> None:
        self._choice = frequently_used_vehicles_

    @property
    def slow_road_users(self) -> typing.Union[nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition, None]:
        return self._choice

    @slow_road_users.setter
    def slow_road_users(self, slow_road_users_: typing.Union[nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition, None]) -> None:
        self._choice = slow_road_users_

    @property
    def big_vehicles(self) -> typing.Union[nds.core.conditions.big_vehicles_condition.BigVehiclesCondition, None]:
        return self._choice

    @big_vehicles.setter
    def big_vehicles(self, big_vehicles_: typing.Union[nds.core.conditions.big_vehicles_condition.BigVehiclesCondition, None]) -> None:
        self._choice = big_vehicles_

    @property
    def public_service_vehicles(self) -> typing.Union[nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition, None]:
        return self._choice

    @public_service_vehicles.setter
    def public_service_vehicles(self, public_service_vehicles_: typing.Union[nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition, None]) -> None:
        self._choice = public_service_vehicles_

    @property
    def emergency_military_details(self) -> typing.Union[nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition, None]:
        return self._choice

    @emergency_military_details.setter
    def emergency_military_details(self, emergency_military_details_: typing.Union[nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition, None]) -> None:
        self._choice = emergency_military_details_

    @property
    def equipment(self) -> typing.Union[nds.core.conditions.equipment_condition.EquipmentCondition, None]:
        return self._choice

    @equipment.setter
    def equipment(self, equipment_: typing.Union[nds.core.conditions.equipment_condition.EquipmentCondition, None]) -> None:
        self._choice = equipment_

    @property
    def authorization(self) -> typing.Union[nds.core.conditions.authorization_condition.AuthorizationCondition, None]:
        return self._choice

    @authorization.setter
    def authorization(self, authorization_: typing.Union[nds.core.conditions.authorization_condition.AuthorizationCondition, None]) -> None:
        self._choice = authorization_

    @property
    def load(self) -> typing.Union[nds.core.conditions.load_condition.LoadCondition, None]:
        return self._choice

    @load.setter
    def load(self, load_: typing.Union[nds.core.conditions.load_condition.LoadCondition, None]) -> None:
        self._choice = load_

    @property
    def num_axles(self) -> nds.core.conditions.num_axles.NumAxles:
        return self._choice

    @num_axles.setter
    def num_axles(self, num_axles_: nds.core.conditions.num_axles.NumAxles) -> None:
        self._choice = num_axles_

    @property
    def occupancy(self) -> typing.Union[nds.core.conditions.occupancy.Occupancy, None]:
        return self._choice

    @occupancy.setter
    def occupancy(self, occupancy_: typing.Union[nds.core.conditions.occupancy.Occupancy, None]) -> None:
        self._choice = occupancy_

    @property
    def vehicle_length_metric(self) -> nds.core.types.length_centimeters.LengthCentimeters:
        return self._choice

    @vehicle_length_metric.setter
    def vehicle_length_metric(self, vehicle_length_metric_: nds.core.types.length_centimeters.LengthCentimeters) -> None:
        self._choice = vehicle_length_metric_

    @property
    def vehicle_length_imperial(self) -> nds.core.types.length_inch.LengthInch:
        return self._choice

    @vehicle_length_imperial.setter
    def vehicle_length_imperial(self, vehicle_length_imperial_: nds.core.types.length_inch.LengthInch) -> None:
        self._choice = vehicle_length_imperial_

    @property
    def vehicle_height_metric(self) -> nds.core.types.height_centimeters.HeightCentimeters:
        return self._choice

    @vehicle_height_metric.setter
    def vehicle_height_metric(self, vehicle_height_metric_: nds.core.types.height_centimeters.HeightCentimeters) -> None:
        self._choice = vehicle_height_metric_

    @property
    def vehicle_height_imperial(self) -> nds.core.types.height_inch.HeightInch:
        return self._choice

    @vehicle_height_imperial.setter
    def vehicle_height_imperial(self, vehicle_height_imperial_: nds.core.types.height_inch.HeightInch) -> None:
        self._choice = vehicle_height_imperial_

    @property
    def vehicle_width_metric(self) -> nds.core.types.width_centimeters.WidthCentimeters:
        return self._choice

    @vehicle_width_metric.setter
    def vehicle_width_metric(self, vehicle_width_metric_: nds.core.types.width_centimeters.WidthCentimeters) -> None:
        self._choice = vehicle_width_metric_

    @property
    def vehicle_width_imperial(self) -> nds.core.types.width_inch.WidthInch:
        return self._choice

    @vehicle_width_imperial.setter
    def vehicle_width_imperial(self, vehicle_width_imperial_: nds.core.types.width_inch.WidthInch) -> None:
        self._choice = vehicle_width_imperial_

    @property
    def weight_metric(self) -> nds.core.types.weight10_kilogram.Weight10Kilogram:
        return self._choice

    @weight_metric.setter
    def weight_metric(self, weight_metric_: nds.core.types.weight10_kilogram.Weight10Kilogram) -> None:
        self._choice = weight_metric_

    @property
    def weight_imperial(self) -> nds.core.types.weight10_lbs.Weight10Lbs:
        return self._choice

    @weight_imperial.setter
    def weight_imperial(self, weight_imperial_: nds.core.types.weight10_lbs.Weight10Lbs) -> None:
        self._choice = weight_imperial_

    @property
    def weight_per_axle_metric(self) -> nds.core.types.weight10_kilogram.Weight10Kilogram:
        return self._choice

    @weight_per_axle_metric.setter
    def weight_per_axle_metric(self, weight_per_axle_metric_: nds.core.types.weight10_kilogram.Weight10Kilogram) -> None:
        self._choice = weight_per_axle_metric_

    @property
    def weight_per_axle_imperial(self) -> nds.core.types.weight10_lbs.Weight10Lbs:
        return self._choice

    @weight_per_axle_imperial.setter
    def weight_per_axle_imperial(self, weight_per_axle_imperial_: nds.core.types.weight10_lbs.Weight10Lbs) -> None:
        self._choice = weight_per_axle_imperial_

    @property
    def weight_per_tandem_axle_metric(self) -> nds.core.types.weight10_kilogram.Weight10Kilogram:
        return self._choice

    @weight_per_tandem_axle_metric.setter
    def weight_per_tandem_axle_metric(self, weight_per_tandem_axle_metric_: nds.core.types.weight10_kilogram.Weight10Kilogram) -> None:
        self._choice = weight_per_tandem_axle_metric_

    @property
    def weight_per_tandem_axle_imperial(self) -> nds.core.types.weight10_lbs.Weight10Lbs:
        return self._choice

    @weight_per_tandem_axle_imperial.setter
    def weight_per_tandem_axle_imperial(self, weight_per_tandem_axle_imperial_: nds.core.types.weight10_lbs.Weight10Lbs) -> None:
        self._choice = weight_per_tandem_axle_imperial_

    @property
    def weight_per_tridem_axle_metric(self) -> nds.core.types.weight10_kilogram.Weight10Kilogram:
        return self._choice

    @weight_per_tridem_axle_metric.setter
    def weight_per_tridem_axle_metric(self, weight_per_tridem_axle_metric_: nds.core.types.weight10_kilogram.Weight10Kilogram) -> None:
        self._choice = weight_per_tridem_axle_metric_

    @property
    def weight_per_tridem_axle_imperial(self) -> nds.core.types.weight10_lbs.Weight10Lbs:
        return self._choice

    @weight_per_tridem_axle_imperial.setter
    def weight_per_tridem_axle_imperial(self, weight_per_tridem_axle_imperial_: nds.core.types.weight10_lbs.Weight10Lbs) -> None:
        self._choice = weight_per_tridem_axle_imperial_

    @property
    def time_range_of_week_days(self) -> typing.Union[nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays, None]:
        return self._choice

    @time_range_of_week_days.setter
    def time_range_of_week_days(self, time_range_of_week_days_: typing.Union[nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays, None]) -> None:
        self._choice = time_range_of_week_days_

    @property
    def visibility(self) -> typing.Union[nds.core.conditions.visibility.Visibility, None]:
        return self._choice

    @visibility.setter
    def visibility(self, visibility_: typing.Union[nds.core.conditions.visibility.Visibility, None]) -> None:
        self._choice = visibility_

    @property
    def surface(self) -> typing.Union[nds.core.conditions.surface.Surface, None]:
        return self._choice

    @surface.setter
    def surface(self, surface_: typing.Union[nds.core.conditions.surface.Surface, None]) -> None:
        self._choice = surface_

    @property
    def euro_emission_class(self) -> typing.Union[nds.core.conditions.euro_emission_class_condition.EuroEmissionClassCondition, None]:
        return self._choice

    @euro_emission_class.setter
    def euro_emission_class(self, euro_emission_class_: typing.Union[nds.core.conditions.euro_emission_class_condition.EuroEmissionClassCondition, None]) -> None:
        self._choice = euro_emission_class_

    @property
    def time_duration_hours(self) -> typing.Union[nds.core.conditions.time_duration_hours.TimeDurationHours, None]:
        return self._choice

    @time_duration_hours.setter
    def time_duration_hours(self, time_duration_hours_: typing.Union[nds.core.conditions.time_duration_hours.TimeDurationHours, None]) -> None:
        self._choice = time_duration_hours_

    @property
    def time_range_of_year(self) -> typing.Union[nds.core.conditions.time_range_of_year.TimeRangeOfYear, None]:
        return self._choice

    @time_range_of_year.setter
    def time_range_of_year(self, time_range_of_year_: typing.Union[nds.core.conditions.time_range_of_year.TimeRangeOfYear, None]) -> None:
        self._choice = time_range_of_year_

    @property
    def num_trailers(self) -> typing.Union[nds.core.conditions.num_trailers_condition.NumTrailersCondition, None]:
        return self._choice

    @num_trailers.setter
    def num_trailers(self, num_trailers_: typing.Union[nds.core.conditions.num_trailers_condition.NumTrailersCondition, None]) -> None:
        self._choice = num_trailers_

    @property
    def trailer_length_metric(self) -> typing.Union[nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition, None]:
        return self._choice

    @trailer_length_metric.setter
    def trailer_length_metric(self, trailer_length_metric_: typing.Union[nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition, None]) -> None:
        self._choice = trailer_length_metric_

    @property
    def trailer_length_imperial(self) -> typing.Union[nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition, None]:
        return self._choice

    @trailer_length_imperial.setter
    def trailer_length_imperial(self, trailer_length_imperial_: typing.Union[nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition, None]) -> None:
        self._choice = trailer_length_imperial_

    @property
    def engine_displacement(self) -> nds.core.vehicle.engine_displacement.EngineDisplacement:
        return self._choice

    @engine_displacement.setter
    def engine_displacement(self, engine_displacement_: nds.core.vehicle.engine_displacement.EngineDisplacement) -> None:
        self._choice = engine_displacement_

    @property
    def energy_type(self) -> typing.Union[nds.core.conditions.energy_type_condition.EnergyTypeCondition, None]:
        return self._choice

    @energy_type.setter
    def energy_type(self, energy_type_: typing.Union[nds.core.conditions.energy_type_condition.EnergyTypeCondition, None]) -> None:
        self._choice = energy_type_

    @property
    def braked_trailer(self) -> nds.core.conditions.braked_trailer.BrakedTrailer:
        return self._choice

    @braked_trailer.setter
    def braked_trailer(self, braked_trailer_: nds.core.conditions.braked_trailer.BrakedTrailer) -> None:
        self._choice = braked_trailer_

    @property
    def public_bus_types(self) -> typing.Union[nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition, None]:
        return self._choice

    @public_bus_types.setter
    def public_bus_types(self, public_bus_types_: typing.Union[nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition, None]) -> None:
        self._choice = public_bus_types_

    @property
    def choice_tag(self) -> int:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            return self.CHOICE_TIME_RANGE_OF_DAY
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            return self.CHOICE_TIME_RANGE_OF_WEEK
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            return self.CHOICE_DATE_RANGE_OF_YEAR
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            return self.CHOICE_DAYS_OF_WEEK
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            return self.CHOICE_DAYS_OF_MONTH
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            return self.CHOICE_DAY_OF_YEAR
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            return self.CHOICE_MONTHS_OF_YEAR
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            return self.CHOICE_WEEK_IN_MONTH
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            return self.CHOICE_WEEKDAY_IN_MONTH
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            return self.CHOICE_CALENDAR_WEEK
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            return self.CHOICE_TIME_DURATION
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            return self.CHOICE_ODD_OR_EVEN_DAYS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            return self.CHOICE_FUZZY_TIME_DOMAIN
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            return self.CHOICE_WEATHER
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            return self.CHOICE_FREQUENTLY_USED_VEHICLES
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            return self.CHOICE_SLOW_ROAD_USERS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            return self.CHOICE_BIG_VEHICLES
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            return self.CHOICE_PUBLIC_SERVICE_VEHICLES
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            return self.CHOICE_EMERGENCY_MILITARY_DETAILS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            return self.CHOICE_EQUIPMENT
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            return self.CHOICE_AUTHORIZATION
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            return self.CHOICE_LOAD
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            return self.CHOICE_NUM_AXLES
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            return self.CHOICE_OCCUPANCY
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            return self.CHOICE_VEHICLE_LENGTH_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            return self.CHOICE_VEHICLE_LENGTH_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            return self.CHOICE_VEHICLE_HEIGHT_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            return self.CHOICE_VEHICLE_HEIGHT_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            return self.CHOICE_VEHICLE_WIDTH_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            return self.CHOICE_VEHICLE_WIDTH_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            return self.CHOICE_WEIGHT_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            return self.CHOICE_WEIGHT_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            return self.CHOICE_WEIGHT_PER_AXLE_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            return self.CHOICE_WEIGHT_PER_AXLE_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            return self.CHOICE_WEIGHT_PER_TANDEM_AXLE_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            return self.CHOICE_WEIGHT_PER_TANDEM_AXLE_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            return self.CHOICE_WEIGHT_PER_TRIDEM_AXLE_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            return self.CHOICE_WEIGHT_PER_TRIDEM_AXLE_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            return self.CHOICE_TIME_RANGE_OF_WEEK_DAYS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            return self.CHOICE_VISIBILITY
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            return self.CHOICE_SURFACE
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            return self.CHOICE_EURO_EMISSION_CLASS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            return self.CHOICE_TIME_DURATION_HOURS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            return self.CHOICE_TIME_RANGE_OF_YEAR
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            return self.CHOICE_NUM_TRAILERS
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            return self.CHOICE_TRAILER_LENGTH_METRIC
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            return self.CHOICE_TRAILER_LENGTH_IMPERIAL
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            return self.CHOICE_ENGINE_DISPLACEMENT
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            return self.CHOICE_ENERGY_TYPE
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            return self.CHOICE_BRAKED_TRAILER
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            return self.CHOICE_PUBLIC_BUS_TYPES
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: ConditionValue.ZserioPackingContext) -> None:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            self._choice.init_packing_context(zserio_context.time_range_of_day)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            self._choice.init_packing_context(zserio_context.time_range_of_week)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            self._choice.init_packing_context(zserio_context.date_range_of_year)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            pass
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            pass
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            self._choice.init_packing_context(zserio_context.day_of_year)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            pass
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            self._choice.init_packing_context(zserio_context.week_in_month)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            self._choice.init_packing_context(zserio_context.weekday_in_month)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            self._choice.init_packing_context(zserio_context.calendar_week)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            self._choice.init_packing_context(zserio_context.time_duration)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            pass
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            self._choice.init_packing_context(zserio_context.fuzzy_time_domain)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            self._choice.init_packing_context(zserio_context.weather)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            self._choice.init_packing_context(zserio_context.frequently_used_vehicles)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            self._choice.init_packing_context(zserio_context.slow_road_users)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            self._choice.init_packing_context(zserio_context.big_vehicles)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            self._choice.init_packing_context(zserio_context.public_service_vehicles)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            self._choice.init_packing_context(zserio_context.emergency_military_details)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            self._choice.init_packing_context(zserio_context.equipment)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            self._choice.init_packing_context(zserio_context.authorization)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            self._choice.init_packing_context(zserio_context.load)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            zserio_context.num_axles.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            self._choice.init_packing_context(zserio_context.occupancy)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            zserio_context.vehicle_length_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            zserio_context.vehicle_length_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            zserio_context.vehicle_height_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            zserio_context.vehicle_height_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            zserio_context.vehicle_width_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            zserio_context.vehicle_width_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            zserio_context.weight_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            zserio_context.weight_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            zserio_context.weight_per_axle_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            zserio_context.weight_per_axle_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            zserio_context.weight_per_tandem_axle_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            zserio_context.weight_per_tandem_axle_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            zserio_context.weight_per_tridem_axle_metric.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            zserio_context.weight_per_tridem_axle_imperial.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            self._choice.init_packing_context(zserio_context.time_range_of_week_days)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            self._choice.init_packing_context(zserio_context.visibility)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            self._choice.init_packing_context(zserio_context.surface)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            self._choice.init_packing_context(zserio_context.euro_emission_class)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            self._choice.init_packing_context(zserio_context.time_duration_hours)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            self._choice.init_packing_context(zserio_context.time_range_of_year)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            self._choice.init_packing_context(zserio_context.num_trailers)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            self._choice.init_packing_context(zserio_context.trailer_length_metric)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            self._choice.init_packing_context(zserio_context.trailer_length_imperial)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            zserio_context.engine_displacement.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            self._choice.init_packing_context(zserio_context.energy_type)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            pass
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            self._choice.init_packing_context(zserio_context.public_bus_types)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            end_bitposition += 8
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ConditionValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_range_of_day, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_range_of_week, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.date_range_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.day_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.week_in_month, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.weekday_in_month, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.calendar_week, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_duration, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.fuzzy_time_domain, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.weather, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.frequently_used_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.slow_road_users, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.big_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.public_service_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.emergency_military_details, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.equipment, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.authorization, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.load, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            end_bitposition += zserio_context.num_axles.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.occupancy, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            end_bitposition += zserio_context.vehicle_length_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            end_bitposition += zserio_context.vehicle_length_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            end_bitposition += zserio_context.vehicle_height_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            end_bitposition += zserio_context.vehicle_height_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            end_bitposition += zserio_context.vehicle_width_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            end_bitposition += zserio_context.vehicle_width_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            end_bitposition += zserio_context.weight_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            end_bitposition += zserio_context.weight_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_tandem_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_tandem_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_tridem_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_tridem_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_range_of_week_days, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.visibility, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.surface, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.euro_emission_class, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_duration_hours, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.time_range_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.num_trailers, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.trailer_length_metric, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.trailer_length_imperial, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            end_bitposition += zserio_context.engine_displacement.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.energy_type, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.public_bus_types, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            end_bitposition += 8
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ConditionValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_range_of_day, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_range_of_week, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.date_range_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.day_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.week_in_month, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.weekday_in_month, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.calendar_week, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_duration, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.fuzzy_time_domain, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.weather, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.frequently_used_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.slow_road_users, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.big_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.public_service_vehicles, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.emergency_military_details, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.equipment, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.authorization, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.load, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            end_bitposition += zserio_context.num_axles.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.occupancy, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            end_bitposition += zserio_context.vehicle_length_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            end_bitposition += zserio_context.vehicle_length_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            end_bitposition += zserio_context.vehicle_height_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            end_bitposition += zserio_context.vehicle_height_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            end_bitposition += zserio_context.vehicle_width_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            end_bitposition += zserio_context.vehicle_width_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            end_bitposition += zserio_context.weight_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            end_bitposition += zserio_context.weight_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_tandem_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_tandem_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            end_bitposition += zserio_context.weight_per_tridem_axle_metric.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            end_bitposition += zserio_context.weight_per_tridem_axle_imperial.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_range_of_week_days, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.visibility, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.surface, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.euro_emission_class, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_duration_hours, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.time_range_of_year, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.num_trailers, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.trailer_length_metric, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.trailer_length_imperial, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            end_bitposition += zserio_context.engine_displacement.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.energy_type, end_bitposition)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            end_bitposition += 1
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.public_bus_types, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            self._choice = nds.core.conditions.time_range_of_day.TimeRangeOfDay.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            self._choice = nds.core.conditions.time_range_of_week.TimeRangeOfWeek.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            self._choice = nds.core.conditions.date_range_of_year.DateRangeOfYear.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            self._choice = nds.core.conditions.days_of_week.DaysOfWeek.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            self._choice = nds.core.conditions.days_of_month.DaysOfMonth.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            self._choice = nds.core.conditions.day_of_year.DayOfYear.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            self._choice = nds.core.conditions.months_of_year.MonthsOfYear.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            self._choice = nds.core.conditions.week_in_month.WeekInMonth.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            self._choice = nds.core.conditions.weekday_in_month.WeekdayInMonth.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            self._choice = nds.core.conditions.calendar_week.CalendarWeek.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            self._choice = nds.core.conditions.time_duration.TimeDuration.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            self._choice = nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            self._choice = nds.core.conditions.weather_condition.WeatherCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            self._choice = nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            self._choice = nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            self._choice = nds.core.conditions.big_vehicles_condition.BigVehiclesCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            self._choice = nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            self._choice = nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            self._choice = nds.core.conditions.equipment_condition.EquipmentCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            self._choice = nds.core.conditions.authorization_condition.AuthorizationCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            self._choice = nds.core.conditions.load_condition.LoadCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            self._choice = nds.core.conditions.occupancy.Occupancy.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            self._choice = nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            self._choice = nds.core.conditions.visibility.Visibility.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            self._choice = nds.core.conditions.surface.Surface.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            self._choice = nds.core.conditions.euro_emission_class_condition.EuroEmissionClassCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            self._choice = nds.core.conditions.time_duration_hours.TimeDurationHours.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            self._choice = nds.core.conditions.time_range_of_year.TimeRangeOfYear.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            self._choice = nds.core.conditions.num_trailers_condition.NumTrailersCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            self._choice = nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            self._choice = nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            self._choice = nds.core.conditions.energy_type_condition.EnergyTypeCondition.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            self._choice = nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

    def read_packed(self, zserio_context: ConditionValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            self._choice = nds.core.conditions.time_range_of_day.TimeRangeOfDay.from_reader_packed(zserio_context.time_range_of_day, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            self._choice = nds.core.conditions.time_range_of_week.TimeRangeOfWeek.from_reader_packed(zserio_context.time_range_of_week, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            self._choice = nds.core.conditions.date_range_of_year.DateRangeOfYear.from_reader_packed(zserio_context.date_range_of_year, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            self._choice = nds.core.conditions.days_of_week.DaysOfWeek.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            self._choice = nds.core.conditions.days_of_month.DaysOfMonth.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            self._choice = nds.core.conditions.day_of_year.DayOfYear.from_reader_packed(zserio_context.day_of_year, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            self._choice = nds.core.conditions.months_of_year.MonthsOfYear.from_reader(zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            self._choice = nds.core.conditions.week_in_month.WeekInMonth.from_reader_packed(zserio_context.week_in_month, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            self._choice = nds.core.conditions.weekday_in_month.WeekdayInMonth.from_reader_packed(zserio_context.weekday_in_month, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            self._choice = nds.core.conditions.calendar_week.CalendarWeek.from_reader_packed(zserio_context.calendar_week, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            self._choice = nds.core.conditions.time_duration.TimeDuration.from_reader_packed(zserio_context.time_duration, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            self._choice = nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition.from_reader_packed(zserio_context.fuzzy_time_domain, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            self._choice = nds.core.conditions.weather_condition.WeatherCondition.from_reader_packed(zserio_context.weather, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            self._choice = nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition.from_reader_packed(zserio_context.frequently_used_vehicles, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            self._choice = nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition.from_reader_packed(zserio_context.slow_road_users, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            self._choice = nds.core.conditions.big_vehicles_condition.BigVehiclesCondition.from_reader_packed(zserio_context.big_vehicles, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            self._choice = nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition.from_reader_packed(zserio_context.public_service_vehicles, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            self._choice = nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition.from_reader_packed(zserio_context.emergency_military_details, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            self._choice = nds.core.conditions.equipment_condition.EquipmentCondition.from_reader_packed(zserio_context.equipment, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            self._choice = nds.core.conditions.authorization_condition.AuthorizationCondition.from_reader_packed(zserio_context.authorization, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            self._choice = nds.core.conditions.load_condition.LoadCondition.from_reader_packed(zserio_context.load, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            self._choice = zserio_context.num_axles.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            self._choice = nds.core.conditions.occupancy.Occupancy.from_reader_packed(zserio_context.occupancy, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            self._choice = zserio_context.vehicle_length_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            self._choice = zserio_context.vehicle_length_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            self._choice = zserio_context.vehicle_height_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            self._choice = zserio_context.vehicle_height_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            self._choice = zserio_context.vehicle_width_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            self._choice = zserio_context.vehicle_width_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            self._choice = zserio_context.weight_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            self._choice = zserio_context.weight_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            self._choice = zserio_context.weight_per_axle_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            self._choice = zserio_context.weight_per_axle_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            self._choice = zserio_context.weight_per_tandem_axle_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            self._choice = zserio_context.weight_per_tandem_axle_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            self._choice = zserio_context.weight_per_tridem_axle_metric.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            self._choice = zserio_context.weight_per_tridem_axle_imperial.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            self._choice = nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays.from_reader_packed(zserio_context.time_range_of_week_days, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            self._choice = nds.core.conditions.visibility.Visibility.from_reader_packed(zserio_context.visibility, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            self._choice = nds.core.conditions.surface.Surface.from_reader_packed(zserio_context.surface, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            self._choice = nds.core.conditions.euro_emission_class_condition.EuroEmissionClassCondition.from_reader_packed(zserio_context.euro_emission_class, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            self._choice = nds.core.conditions.time_duration_hours.TimeDurationHours.from_reader_packed(zserio_context.time_duration_hours, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            self._choice = nds.core.conditions.time_range_of_year.TimeRangeOfYear.from_reader_packed(zserio_context.time_range_of_year, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            self._choice = nds.core.conditions.num_trailers_condition.NumTrailersCondition.from_reader_packed(zserio_context.num_trailers, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            self._choice = nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition.from_reader_packed(zserio_context.trailer_length_metric, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            self._choice = nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition.from_reader_packed(zserio_context.trailer_length_imperial, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            self._choice = zserio_context.engine_displacement.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            self._choice = nds.core.conditions.energy_type_condition.EnergyTypeCondition.from_reader_packed(zserio_context.energy_type, zserio_reader)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            self._choice = zserio_reader.read_bool()
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            self._choice = nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition.from_reader_packed(zserio_context.public_bus_types, zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

    def write_packed(self, zserio_context: ConditionValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._code_

        if selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_DAY):
            self._choice.write_packed(zserio_context.time_range_of_day, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEK):
            self._choice.write_packed(zserio_context.time_range_of_week, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DATE_RANGE_OF_YEAR):
            self._choice.write_packed(zserio_context.date_range_of_year, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_WEEK):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAYS_OF_MONTH):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.DAY_OF_YEAR):
            self._choice.write_packed(zserio_context.day_of_year, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.MONTHS_OF_YEAR):
            self._choice.write(zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEK_IN_MONTH):
            self._choice.write_packed(zserio_context.week_in_month, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEEKDAY_IN_MONTH):
            self._choice.write_packed(zserio_context.weekday_in_month, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.CALENDAR_WEEK):
            self._choice.write_packed(zserio_context.calendar_week, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION):
            self._choice.write_packed(zserio_context.time_duration, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ODD_OR_EVEN_DAYS):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FUZZY_TIME_DOMAIN):
            self._choice.write_packed(zserio_context.fuzzy_time_domain, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEATHER):
            self._choice.write_packed(zserio_context.weather, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.FREQUENTLY_USED_VEHICLE_TYPES):
            self._choice.write_packed(zserio_context.frequently_used_vehicles, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SLOW_ROAD_USERS):
            self._choice.write_packed(zserio_context.slow_road_users, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BIG_VEHICLES):
            self._choice.write_packed(zserio_context.big_vehicles, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_SERVICE_VEHICLES):
            self._choice.write_packed(zserio_context.public_service_vehicles, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EMERGENCY_MILITARY_DETAILS):
            self._choice.write_packed(zserio_context.emergency_military_details, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EQUIPMENT):
            self._choice.write_packed(zserio_context.equipment, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.AUTHORIZATION):
            self._choice.write_packed(zserio_context.authorization, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LOAD):
            self._choice.write_packed(zserio_context.load, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_AXLES):
            zserio_context.num_axles.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.OCCUPANCY):
            self._choice.write_packed(zserio_context.occupancy, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_METRIC):
            zserio_context.vehicle_length_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.LENGTH_IMPERIAL):
            zserio_context.vehicle_length_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_METRIC):
            zserio_context.vehicle_height_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_HEIGHT_IMPERIAL):
            zserio_context.vehicle_height_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_METRIC):
            zserio_context.vehicle_width_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VEHICLE_WIDTH_IMPERIAL):
            zserio_context.vehicle_width_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_METRIC):
            zserio_context.weight_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_IMPERIAL):
            zserio_context.weight_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_METRIC):
            zserio_context.weight_per_axle_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_AXLE_IMPERIAL):
            zserio_context.weight_per_axle_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_METRIC):
            zserio_context.weight_per_tandem_axle_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TANDEM_AXLE_IMPERIAL):
            zserio_context.weight_per_tandem_axle_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_METRIC):
            zserio_context.weight_per_tridem_axle_metric.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.WEIGHT_PER_TRIDEM_AXLE_IMPERIAL):
            zserio_context.weight_per_tridem_axle_imperial.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_WEEKDAYS):
            self._choice.write_packed(zserio_context.time_range_of_week_days, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.VISIBILITY):
            self._choice.write_packed(zserio_context.visibility, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.SURFACE):
            self._choice.write_packed(zserio_context.surface, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.EURO_EMISSION_CLASS):
            self._choice.write_packed(zserio_context.euro_emission_class, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_DURATION_HOURS):
            self._choice.write_packed(zserio_context.time_duration_hours, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TIME_RANGE_OF_YEAR):
            self._choice.write_packed(zserio_context.time_range_of_year, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.NUM_TRAILERS):
            self._choice.write_packed(zserio_context.num_trailers, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_METRIC):
            self._choice.write_packed(zserio_context.trailer_length_metric, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.TRAILER_LENGTH_IMPERIAL):
            self._choice.write_packed(zserio_context.trailer_length_imperial, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENGINE_DISPLACEMENT):
            zserio_context.engine_displacement.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.ENERGY_TYPE):
            self._choice.write_packed(zserio_context.energy_type, zserio_writer)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.BRAKED_TRAILER):
            zserio_writer.write_bool(self._choice)
        elif selector == (nds.core.conditions.condition_type_code.ConditionTypeCode.PUBLIC_BUS_TYPE):
            self._choice.write_packed(zserio_context.public_bus_types, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice ConditionValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._time_range_of_day_ = nds.core.conditions.time_range_of_day.TimeRangeOfDay.ZserioPackingContext()
            self._time_range_of_week_ = nds.core.conditions.time_range_of_week.TimeRangeOfWeek.ZserioPackingContext()
            self._date_range_of_year_ = nds.core.conditions.date_range_of_year.DateRangeOfYear.ZserioPackingContext()
            self._day_of_year_ = nds.core.conditions.day_of_year.DayOfYear.ZserioPackingContext()
            self._week_in_month_ = nds.core.conditions.week_in_month.WeekInMonth.ZserioPackingContext()
            self._weekday_in_month_ = nds.core.conditions.weekday_in_month.WeekdayInMonth.ZserioPackingContext()
            self._calendar_week_ = nds.core.conditions.calendar_week.CalendarWeek.ZserioPackingContext()
            self._time_duration_ = nds.core.conditions.time_duration.TimeDuration.ZserioPackingContext()
            self._fuzzy_time_domain_ = nds.core.conditions.fuzzy_time_domain_condition.FuzzyTimeDomainCondition.ZserioPackingContext()
            self._weather_ = nds.core.conditions.weather_condition.WeatherCondition.ZserioPackingContext()
            self._frequently_used_vehicles_ = nds.core.conditions.frequently_used_vehicle_types_condition.FrequentlyUsedVehicleTypesCondition.ZserioPackingContext()
            self._slow_road_users_ = nds.core.conditions.slow_road_users_condition.SlowRoadUsersCondition.ZserioPackingContext()
            self._big_vehicles_ = nds.core.conditions.big_vehicles_condition.BigVehiclesCondition.ZserioPackingContext()
            self._public_service_vehicles_ = nds.core.conditions.public_service_vehicles_condition.PublicServiceVehiclesCondition.ZserioPackingContext()
            self._emergency_military_details_ = nds.core.conditions.emergency_military_detail_condition.EmergencyMilitaryDetailCondition.ZserioPackingContext()
            self._equipment_ = nds.core.conditions.equipment_condition.EquipmentCondition.ZserioPackingContext()
            self._authorization_ = nds.core.conditions.authorization_condition.AuthorizationCondition.ZserioPackingContext()
            self._load_ = nds.core.conditions.load_condition.LoadCondition.ZserioPackingContext()
            self._num_axles_ = zserio.array.DeltaContext()
            self._occupancy_ = nds.core.conditions.occupancy.Occupancy.ZserioPackingContext()
            self._vehicle_length_metric_ = zserio.array.DeltaContext()
            self._vehicle_length_imperial_ = zserio.array.DeltaContext()
            self._vehicle_height_metric_ = zserio.array.DeltaContext()
            self._vehicle_height_imperial_ = zserio.array.DeltaContext()
            self._vehicle_width_metric_ = zserio.array.DeltaContext()
            self._vehicle_width_imperial_ = zserio.array.DeltaContext()
            self._weight_metric_ = zserio.array.DeltaContext()
            self._weight_imperial_ = zserio.array.DeltaContext()
            self._weight_per_axle_metric_ = zserio.array.DeltaContext()
            self._weight_per_axle_imperial_ = zserio.array.DeltaContext()
            self._weight_per_tandem_axle_metric_ = zserio.array.DeltaContext()
            self._weight_per_tandem_axle_imperial_ = zserio.array.DeltaContext()
            self._weight_per_tridem_axle_metric_ = zserio.array.DeltaContext()
            self._weight_per_tridem_axle_imperial_ = zserio.array.DeltaContext()
            self._time_range_of_week_days_ = nds.core.conditions.time_range_of_week_days.TimeRangeOfWeekDays.ZserioPackingContext()
            self._visibility_ = zserio.array.DeltaContext()
            self._surface_ = zserio.array.DeltaContext()
            self._euro_emission_class_ = zserio.array.DeltaContext()
            self._time_duration_hours_ = nds.core.conditions.time_duration_hours.TimeDurationHours.ZserioPackingContext()
            self._time_range_of_year_ = nds.core.conditions.time_range_of_year.TimeRangeOfYear.ZserioPackingContext()
            self._num_trailers_ = nds.core.conditions.num_trailers_condition.NumTrailersCondition.ZserioPackingContext()
            self._trailer_length_metric_ = nds.core.conditions.trailer_length_metric_condition.TrailerLengthMetricCondition.ZserioPackingContext()
            self._trailer_length_imperial_ = nds.core.conditions.trailer_length_imperial_condition.TrailerLengthImperialCondition.ZserioPackingContext()
            self._engine_displacement_ = zserio.array.DeltaContext()
            self._energy_type_ = nds.core.conditions.energy_type_condition.EnergyTypeCondition.ZserioPackingContext()
            self._public_bus_types_ = nds.core.conditions.public_bus_type_condition.PublicBusTypeCondition.ZserioPackingContext()

        @property
        def time_range_of_day(self):
            return self._time_range_of_day_

        @property
        def time_range_of_week(self):
            return self._time_range_of_week_

        @property
        def date_range_of_year(self):
            return self._date_range_of_year_

        @property
        def day_of_year(self):
            return self._day_of_year_

        @property
        def week_in_month(self):
            return self._week_in_month_

        @property
        def weekday_in_month(self):
            return self._weekday_in_month_

        @property
        def calendar_week(self):
            return self._calendar_week_

        @property
        def time_duration(self):
            return self._time_duration_

        @property
        def fuzzy_time_domain(self):
            return self._fuzzy_time_domain_

        @property
        def weather(self):
            return self._weather_

        @property
        def frequently_used_vehicles(self):
            return self._frequently_used_vehicles_

        @property
        def slow_road_users(self):
            return self._slow_road_users_

        @property
        def big_vehicles(self):
            return self._big_vehicles_

        @property
        def public_service_vehicles(self):
            return self._public_service_vehicles_

        @property
        def emergency_military_details(self):
            return self._emergency_military_details_

        @property
        def equipment(self):
            return self._equipment_

        @property
        def authorization(self):
            return self._authorization_

        @property
        def load(self):
            return self._load_

        @property
        def num_axles(self):
            return self._num_axles_

        @property
        def occupancy(self):
            return self._occupancy_

        @property
        def vehicle_length_metric(self):
            return self._vehicle_length_metric_

        @property
        def vehicle_length_imperial(self):
            return self._vehicle_length_imperial_

        @property
        def vehicle_height_metric(self):
            return self._vehicle_height_metric_

        @property
        def vehicle_height_imperial(self):
            return self._vehicle_height_imperial_

        @property
        def vehicle_width_metric(self):
            return self._vehicle_width_metric_

        @property
        def vehicle_width_imperial(self):
            return self._vehicle_width_imperial_

        @property
        def weight_metric(self):
            return self._weight_metric_

        @property
        def weight_imperial(self):
            return self._weight_imperial_

        @property
        def weight_per_axle_metric(self):
            return self._weight_per_axle_metric_

        @property
        def weight_per_axle_imperial(self):
            return self._weight_per_axle_imperial_

        @property
        def weight_per_tandem_axle_metric(self):
            return self._weight_per_tandem_axle_metric_

        @property
        def weight_per_tandem_axle_imperial(self):
            return self._weight_per_tandem_axle_imperial_

        @property
        def weight_per_tridem_axle_metric(self):
            return self._weight_per_tridem_axle_metric_

        @property
        def weight_per_tridem_axle_imperial(self):
            return self._weight_per_tridem_axle_imperial_

        @property
        def time_range_of_week_days(self):
            return self._time_range_of_week_days_

        @property
        def visibility(self):
            return self._visibility_

        @property
        def surface(self):
            return self._surface_

        @property
        def euro_emission_class(self):
            return self._euro_emission_class_

        @property
        def time_duration_hours(self):
            return self._time_duration_hours_

        @property
        def time_range_of_year(self):
            return self._time_range_of_year_

        @property
        def num_trailers(self):
            return self._num_trailers_

        @property
        def trailer_length_metric(self):
            return self._trailer_length_metric_

        @property
        def trailer_length_imperial(self):
            return self._trailer_length_imperial_

        @property
        def engine_displacement(self):
            return self._engine_displacement_

        @property
        def energy_type(self):
            return self._energy_type_

        @property
        def public_bus_types(self):
            return self._public_bus_types_

    CHOICE_TIME_RANGE_OF_DAY = 0
    CHOICE_TIME_RANGE_OF_WEEK = 1
    CHOICE_DATE_RANGE_OF_YEAR = 2
    CHOICE_DAYS_OF_WEEK = 3
    CHOICE_DAYS_OF_MONTH = 4
    CHOICE_DAY_OF_YEAR = 5
    CHOICE_MONTHS_OF_YEAR = 6
    CHOICE_WEEK_IN_MONTH = 7
    CHOICE_WEEKDAY_IN_MONTH = 8
    CHOICE_CALENDAR_WEEK = 9
    CHOICE_TIME_DURATION = 10
    CHOICE_ODD_OR_EVEN_DAYS = 11
    CHOICE_FUZZY_TIME_DOMAIN = 12
    CHOICE_WEATHER = 13
    CHOICE_FREQUENTLY_USED_VEHICLES = 14
    CHOICE_SLOW_ROAD_USERS = 15
    CHOICE_BIG_VEHICLES = 16
    CHOICE_PUBLIC_SERVICE_VEHICLES = 17
    CHOICE_EMERGENCY_MILITARY_DETAILS = 18
    CHOICE_EQUIPMENT = 19
    CHOICE_AUTHORIZATION = 20
    CHOICE_LOAD = 21
    CHOICE_NUM_AXLES = 22
    CHOICE_OCCUPANCY = 23
    CHOICE_VEHICLE_LENGTH_METRIC = 24
    CHOICE_VEHICLE_LENGTH_IMPERIAL = 25
    CHOICE_VEHICLE_HEIGHT_METRIC = 26
    CHOICE_VEHICLE_HEIGHT_IMPERIAL = 27
    CHOICE_VEHICLE_WIDTH_METRIC = 28
    CHOICE_VEHICLE_WIDTH_IMPERIAL = 29
    CHOICE_WEIGHT_METRIC = 30
    CHOICE_WEIGHT_IMPERIAL = 31
    CHOICE_WEIGHT_PER_AXLE_METRIC = 32
    CHOICE_WEIGHT_PER_AXLE_IMPERIAL = 33
    CHOICE_WEIGHT_PER_TANDEM_AXLE_METRIC = 34
    CHOICE_WEIGHT_PER_TANDEM_AXLE_IMPERIAL = 35
    CHOICE_WEIGHT_PER_TRIDEM_AXLE_METRIC = 36
    CHOICE_WEIGHT_PER_TRIDEM_AXLE_IMPERIAL = 37
    CHOICE_TIME_RANGE_OF_WEEK_DAYS = 38
    CHOICE_VISIBILITY = 39
    CHOICE_SURFACE = 40
    CHOICE_EURO_EMISSION_CLASS = 41
    CHOICE_TIME_DURATION_HOURS = 42
    CHOICE_TIME_RANGE_OF_YEAR = 43
    CHOICE_NUM_TRAILERS = 44
    CHOICE_TRAILER_LENGTH_METRIC = 45
    CHOICE_TRAILER_LENGTH_IMPERIAL = 46
    CHOICE_ENGINE_DISPLACEMENT = 47
    CHOICE_ENERGY_TYPE = 48
    CHOICE_BRAKED_TRAILER = 49
    CHOICE_PUBLIC_BUS_TYPES = 50
    UNDEFINED_CHOICE = -1
