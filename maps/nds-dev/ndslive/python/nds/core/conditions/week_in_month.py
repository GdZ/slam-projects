# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class WeekInMonth:
    def __init__(
            self,
            count_backward_week_in_month_: bool = bool(),
            n_th_week_in_month_: int = int()) -> None:
        self._count_backward_week_in_month_ = count_backward_week_in_month_
        self._n_th_week_in_month_ = n_th_week_in_month_

    @classmethod
    def from_reader(
            cls: typing.Type['WeekInMonth'],
            zserio_reader: zserio.BitStreamReader) -> 'WeekInMonth':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['WeekInMonth'],
            zserio_context: WeekInMonth.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'WeekInMonth':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, WeekInMonth):
            return ((self._count_backward_week_in_month_ == other._count_backward_week_in_month_) and
                    (self._n_th_week_in_month_ == other._n_th_week_in_month_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._count_backward_week_in_month_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._n_th_week_in_month_)

        return result

    @property
    def count_backward_week_in_month(self) -> bool:
        return self._count_backward_week_in_month_

    @count_backward_week_in_month.setter
    def count_backward_week_in_month(self, count_backward_week_in_month_: bool) -> None:
        self._count_backward_week_in_month_ = count_backward_week_in_month_

    @property
    def n_th_week_in_month(self) -> int:
        return self._n_th_week_in_month_

    @n_th_week_in_month.setter
    def n_th_week_in_month(self, n_th_week_in_month_: int) -> None:
        self._n_th_week_in_month_ = n_th_week_in_month_

    def init_packing_context(self, zserio_context: WeekInMonth.ZserioPackingContext) -> None:
        zserio_context.n_th_week_in_month.init(zserio.array.BitFieldArrayTraits(3), self._n_th_week_in_month_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 3

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: WeekInMonth.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.n_th_week_in_month.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._n_th_week_in_month_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 3

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: WeekInMonth.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.n_th_week_in_month.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._n_th_week_in_month_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._count_backward_week_in_month_ = zserio_reader.read_bool()
        self._n_th_week_in_month_ = zserio_reader.read_bits(3)

    def read_packed(self, zserio_context: WeekInMonth.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._count_backward_week_in_month_ = zserio_reader.read_bool()

        self._n_th_week_in_month_ = zserio_context.n_th_week_in_month.read(zserio.array.BitFieldArrayTraits(3), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._count_backward_week_in_month_)
        zserio_writer.write_bits(self._n_th_week_in_month_, 3)

    def write_packed(self, zserio_context: WeekInMonth.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._count_backward_week_in_month_)

        zserio_context.n_th_week_in_month.write(zserio.array.BitFieldArrayTraits(3), zserio_writer, self._n_th_week_in_month_)

    class ZserioPackingContext:
        def __init__(self):
            self._n_th_week_in_month_ = zserio.array.DeltaContext()

        @property
        def n_th_week_in_month(self):
            return self._n_th_week_in_month_
