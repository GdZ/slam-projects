# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class TimeOfDay:
    def __init__(
            self,
            hours_: int = int(),
            minutes_: int = int()) -> None:
        self._hours_ = hours_
        self._minutes_ = minutes_

    @classmethod
    def from_reader(
            cls: typing.Type['TimeOfDay'],
            zserio_reader: zserio.BitStreamReader) -> 'TimeOfDay':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TimeOfDay'],
            zserio_context: TimeOfDay.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TimeOfDay':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TimeOfDay):
            return ((self._hours_ == other._hours_) and
                    (self._minutes_ == other._minutes_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._hours_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._minutes_)

        return result

    @property
    def hours(self) -> int:
        return self._hours_

    @hours.setter
    def hours(self, hours_: int) -> None:
        self._hours_ = hours_

    @property
    def minutes(self) -> int:
        return self._minutes_

    @minutes.setter
    def minutes(self, minutes_: int) -> None:
        self._minutes_ = minutes_

    def init_packing_context(self, zserio_context: TimeOfDay.ZserioPackingContext) -> None:
        zserio_context.hours.init(zserio.array.BitFieldArrayTraits(8), self._hours_)
        zserio_context.minutes.init(zserio.array.BitFieldArrayTraits(8), self._minutes_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TimeOfDay.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.hours.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._hours_)
        end_bitposition += zserio_context.minutes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._minutes_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 8

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TimeOfDay.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.hours.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._hours_)
        end_bitposition += zserio_context.minutes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._minutes_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._hours_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._hours_ <= 23):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.hours!")

        self._minutes_ = zserio_reader.read_bits(8)
        # check constraint
        if not (self._minutes_ <= 59):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.minutes!")

    def read_packed(self, zserio_context: TimeOfDay.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._hours_ = zserio_context.hours.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._hours_ <= 23):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.hours!")

        self._minutes_ = zserio_context.minutes.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        # check constraint
        if not (self._minutes_ <= 59):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.minutes!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._hours_ <= 23):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.hours!")
        zserio_writer.write_bits(self._hours_, 8)

        # check constraint
        if not (self._minutes_ <= 59):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.minutes!")
        zserio_writer.write_bits(self._minutes_, 8)

    def write_packed(self, zserio_context: TimeOfDay.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._hours_ <= 23):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.hours!")
        zserio_context.hours.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._hours_)

        # check constraint
        if not (self._minutes_ <= 59):
            raise zserio.PythonRuntimeException("Constraint violated for field TimeOfDay.minutes!")
        zserio_context.minutes.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._minutes_)

    class ZserioPackingContext:
        def __init__(self):
            self._hours_ = zserio.array.DeltaContext()
            self._minutes_ = zserio.array.DeltaContext()

        @property
        def hours(self):
            return self._hours_

        @property
        def minutes(self):
            return self._minutes_
