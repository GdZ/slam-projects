# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class CalendarWeek:
    def __init__(
            self,
            week_: int = int()) -> None:
        self._week_ = week_

    @classmethod
    def from_reader(
            cls: typing.Type['CalendarWeek'],
            zserio_reader: zserio.BitStreamReader) -> 'CalendarWeek':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['CalendarWeek'],
            zserio_context: CalendarWeek.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'CalendarWeek':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CalendarWeek):
            return (self._week_ == other._week_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._week_)

        return result

    @property
    def week(self) -> int:
        return self._week_

    @week.setter
    def week(self, week_: int) -> None:
        self._week_ = week_

    def init_packing_context(self, zserio_context: CalendarWeek.ZserioPackingContext) -> None:
        zserio_context.week.init(zserio.array.BitFieldArrayTraits(6), self._week_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 6

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: CalendarWeek.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.week.bitsizeof(zserio.array.BitFieldArrayTraits(6), self._week_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 6

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: CalendarWeek.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.week.bitsizeof(zserio.array.BitFieldArrayTraits(6), self._week_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._week_ = zserio_reader.read_bits(6)
        # check constraint
        if not (self._week_ > 0 and self._week_ <= 53):
            raise zserio.PythonRuntimeException("Constraint violated for field CalendarWeek.week!")

    def read_packed(self, zserio_context: CalendarWeek.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._week_ = zserio_context.week.read(zserio.array.BitFieldArrayTraits(6), zserio_reader)
        # check constraint
        if not (self._week_ > 0 and self._week_ <= 53):
            raise zserio.PythonRuntimeException("Constraint violated for field CalendarWeek.week!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._week_ > 0 and self._week_ <= 53):
            raise zserio.PythonRuntimeException("Constraint violated for field CalendarWeek.week!")
        zserio_writer.write_bits(self._week_, 6)

    def write_packed(self, zserio_context: CalendarWeek.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (self._week_ > 0 and self._week_ <= 53):
            raise zserio.PythonRuntimeException("Constraint violated for field CalendarWeek.week!")
        zserio_context.week.write(zserio.array.BitFieldArrayTraits(6), zserio_writer, self._week_)

    class ZserioPackingContext:
        def __init__(self):
            self._week_ = zserio.array.DeltaContext()

        @property
        def week(self):
            return self._week_
