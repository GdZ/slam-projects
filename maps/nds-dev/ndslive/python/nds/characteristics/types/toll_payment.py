# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.characteristics.types.toll_payment_provider
import nds.characteristics.types.toll_payment_type

class TollPayment:
    def __init__(
            self,
            type_: typing.Union[nds.characteristics.types.toll_payment_type.TollPaymentType, None] = None,
            provider_: typing.Optional[typing.List[nds.characteristics.types.toll_payment_provider.TollPaymentProvider]] = None) -> None:
        self._type_ = type_
        if provider_ is None:
            self._provider_ = None
        else:
            self._provider_ = zserio.array.Array(zserio.array.StringArrayTraits(), provider_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['TollPayment'],
            zserio_reader: zserio.BitStreamReader) -> 'TollPayment':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TollPayment'],
            zserio_context: TollPayment.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TollPayment':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TollPayment):
            return ((self._type_ == other._type_) and
                    (not other.is_provider_used() if not self.is_provider_used() else (self._provider_ == other._provider_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        if self.is_provider_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._provider_)

        return result

    @property
    def type(self) -> typing.Union[nds.characteristics.types.toll_payment_type.TollPaymentType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.characteristics.types.toll_payment_type.TollPaymentType, None]) -> None:
        self._type_ = type_

    @property
    def provider(self) -> typing.Optional[typing.List[nds.characteristics.types.toll_payment_provider.TollPaymentProvider]]:
        return None if self._provider_ is None else self._provider_.raw_array

    @provider.setter
    def provider(self, provider_: typing.Optional[typing.List[nds.characteristics.types.toll_payment_provider.TollPaymentProvider]]) -> None:
        if provider_ is None:
            self._provider_ = None
        else:
            self._provider_ = zserio.array.Array(zserio.array.StringArrayTraits(), provider_, is_auto=True)

    def is_provider_used(self) -> bool:
        return self.is_provider_set()

    def is_provider_set(self) -> bool:
        return not self._provider_ is None

    def reset_provider(self) -> None:
        self._provider_ = None

    def init_packing_context(self, zserio_context: TollPayment.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_provider_used():
            end_bitposition += self._provider_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TollPayment.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        if self.is_provider_used():
            end_bitposition += self._provider_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_provider_used():
            end_bitposition = self._provider_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TollPayment.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition += 1
        if self.is_provider_used():
            end_bitposition = self._provider_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.characteristics.types.toll_payment_type.TollPaymentType.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._provider_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, is_auto=True)
        else:
            self._provider_ = None

    def read_packed(self, zserio_context: TollPayment.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.characteristics.types.toll_payment_type.TollPaymentType.from_reader_packed(zserio_context.type, zserio_reader)

        if zserio_reader.read_bool():
            self._provider_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, is_auto=True)
        else:
            self._provider_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)
        if self.is_provider_used():
            zserio_writer.write_bool(True)
            self._provider_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: TollPayment.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        if self.is_provider_used():
            zserio_writer.write_bool(True)
            self._provider_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_
