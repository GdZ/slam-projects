# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.characteristics.types.road_median_shape
import nds.characteristics.types.road_median_surface

class RoadMedian:
    def __init__(
            self,
            width_: int = int(),
            shape_: typing.Union[nds.characteristics.types.road_median_shape.RoadMedianShape, None] = None,
            surface_: typing.Union[nds.characteristics.types.road_median_surface.RoadMedianSurface, None] = None) -> None:
        self._width_ = width_
        self._shape_ = shape_
        self._surface_ = surface_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadMedian'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadMedian':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadMedian'],
            zserio_context: RoadMedian.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadMedian':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadMedian):
            return ((self._width_ == other._width_) and
                    (self._shape_ == other._shape_) and
                    (self._surface_ == other._surface_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._width_)
        result = zserio.hashcode.calc_hashcode_object(result, self._shape_)
        result = zserio.hashcode.calc_hashcode_object(result, self._surface_)

        return result

    @property
    def width(self) -> int:
        return self._width_

    @width.setter
    def width(self, width_: int) -> None:
        self._width_ = width_

    @property
    def shape(self) -> typing.Union[nds.characteristics.types.road_median_shape.RoadMedianShape, None]:
        return self._shape_

    @shape.setter
    def shape(self, shape_: typing.Union[nds.characteristics.types.road_median_shape.RoadMedianShape, None]) -> None:
        self._shape_ = shape_

    @property
    def surface(self) -> typing.Union[nds.characteristics.types.road_median_surface.RoadMedianSurface, None]:
        return self._surface_

    @surface.setter
    def surface(self, surface_: typing.Union[nds.characteristics.types.road_median_surface.RoadMedianSurface, None]) -> None:
        self._surface_ = surface_

    def init_packing_context(self, zserio_context: RoadMedian.ZserioPackingContext) -> None:
        zserio_context.width.init(zserio.array.VarUInt16ArrayTraits(), self._width_)
        self._shape_.init_packing_context(zserio_context.shape)
        self._surface_.init_packing_context(zserio_context.surface)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._width_)
        end_bitposition += self._shape_.bitsizeof(end_bitposition)
        end_bitposition += self._surface_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadMedian.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.width.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._width_)
        end_bitposition += self._shape_.bitsizeof_packed(zserio_context.shape, end_bitposition)
        end_bitposition += self._surface_.bitsizeof_packed(zserio_context.surface, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._width_)
        end_bitposition = self._shape_.initialize_offsets(end_bitposition)
        end_bitposition = self._surface_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadMedian.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.width.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._width_)
        end_bitposition = self._shape_.initialize_offsets_packed(zserio_context.shape, end_bitposition)
        end_bitposition = self._surface_.initialize_offsets_packed(zserio_context.surface, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._width_ = zserio_reader.read_varuint16()
        self._shape_ = nds.characteristics.types.road_median_shape.RoadMedianShape.from_reader(zserio_reader)
        self._surface_ = nds.characteristics.types.road_median_surface.RoadMedianSurface.from_reader(zserio_reader)

    def read_packed(self, zserio_context: RoadMedian.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._width_ = zserio_context.width.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._shape_ = nds.characteristics.types.road_median_shape.RoadMedianShape.from_reader_packed(zserio_context.shape, zserio_reader)

        self._surface_ = nds.characteristics.types.road_median_surface.RoadMedianSurface.from_reader_packed(zserio_context.surface, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._width_)
        self._shape_.write(zserio_writer)
        self._surface_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadMedian.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.width.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._width_)

        self._shape_.write_packed(zserio_context.shape, zserio_writer)

        self._surface_.write_packed(zserio_context.surface, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._width_ = zserio.array.DeltaContext()
            self._shape_ = zserio.array.DeltaContext()
            self._surface_ = zserio.array.DeltaContext()

        @property
        def width(self):
            return self._width_

        @property
        def shape(self):
            return self._shape_

        @property
        def surface(self):
            return self._surface_
