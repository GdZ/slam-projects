# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp

class RoadLocationProviderDetails:
    def __init__(
            self,
            provider_name_: str = str(),
            location_version_: str = str(),
            creation_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None) -> None:
        self._provider_name_ = provider_name_
        self._location_version_ = location_version_
        self._creation_time_ = creation_time_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadLocationProviderDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationProviderDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadLocationProviderDetails'],
            zserio_context: RoadLocationProviderDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadLocationProviderDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadLocationProviderDetails):
            return ((self._provider_name_ == other._provider_name_) and
                    (self._location_version_ == other._location_version_) and
                    (self._creation_time_ == other._creation_time_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._provider_name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._location_version_)
        result = zserio.hashcode.calc_hashcode_object(result, self._creation_time_)

        return result

    @property
    def provider_name(self) -> str:
        return self._provider_name_

    @provider_name.setter
    def provider_name(self, provider_name_: str) -> None:
        self._provider_name_ = provider_name_

    @property
    def location_version(self) -> str:
        return self._location_version_

    @location_version.setter
    def location_version(self, location_version_: str) -> None:
        self._location_version_ = location_version_

    @property
    def creation_time(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._creation_time_

    @creation_time.setter
    def creation_time(self, creation_time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._creation_time_ = creation_time_

    def init_packing_context(self, zserio_context: RoadLocationProviderDetails.ZserioPackingContext) -> None:
        self._creation_time_.init_packing_context(zserio_context.creation_time)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._location_version_)
        end_bitposition += self._creation_time_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadLocationProviderDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._location_version_)
        end_bitposition += self._creation_time_.bitsizeof_packed(zserio_context.creation_time, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._location_version_)
        end_bitposition = self._creation_time_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadLocationProviderDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._provider_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._location_version_)
        end_bitposition = self._creation_time_.initialize_offsets_packed(zserio_context.creation_time, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._provider_name_ = zserio_reader.read_string()
        self._location_version_ = zserio_reader.read_string()
        self._creation_time_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)

    def read_packed(self, zserio_context: RoadLocationProviderDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._provider_name_ = zserio_reader.read_string()

        self._location_version_ = zserio_reader.read_string()

        self._creation_time_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.creation_time, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._provider_name_)
        zserio_writer.write_string(self._location_version_)
        self._creation_time_.write(zserio_writer)

    def write_packed(self, zserio_context: RoadLocationProviderDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._provider_name_)

        zserio_writer.write_string(self._location_version_)

        self._creation_time_.write_packed(zserio_context.creation_time, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._creation_time_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()

        @property
        def creation_time(self):
            return self._creation_time_
