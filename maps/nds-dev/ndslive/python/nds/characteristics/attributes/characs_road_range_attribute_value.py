# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.characteristics.attributes.characs_road_range_attribute_type
import nds.characteristics.types.complete_carpool_road
import nds.characteristics.types.complex_intersection_type
import nds.characteristics.types.divider_type
import nds.characteristics.types.ferry_type
import nds.characteristics.types.friction_coefficient
import nds.characteristics.types.grade_type
import nds.characteristics.types.has_sidewalk
import nds.characteristics.types.has_street_lights
import nds.characteristics.types.in_business_district
import nds.characteristics.types.metric_road_width
import nds.characteristics.types.movable_bridge
import nds.characteristics.types.multi_digitized_road_reference
import nds.characteristics.types.num_lanes
import nds.characteristics.types.partial_carpool_road
import nds.characteristics.types.pavement_type
import nds.characteristics.types.pedestrian_crossing
import nds.characteristics.types.railway_crossing
import nds.characteristics.types.road_location_assignment
import nds.characteristics.types.road_median
import nds.characteristics.types.shared_road_surface_with_pedestrians
import nds.characteristics.types.start_or_destination_road_only
import nds.characteristics.types.station_plaza_type
import nds.characteristics.types.stubble
import nds.characteristics.types.super_elevation_class
import nds.characteristics.types.traffic_calming
import nds.core.types.functional_road_class
import nds.core.types.global_source_id
import nds.core.types.priority_road_class
import nds.core.types.road_type
import nds.core.types.speed_kmh

class CharacsRoadRangeAttributeValue:
    def __init__(
            self,
            type_: nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType,
            *,
            complete_carpool_road_: typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None] = None,
            partial_carpool_road_: typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None] = None,
            metric_road_width_: typing.Union[nds.characteristics.types.metric_road_width.MetricRoadWidth, None] = None,
            pavement_type_: typing.Union[nds.characteristics.types.pavement_type.PavementType, None] = None,
            ferry_type_: typing.Union[nds.characteristics.types.ferry_type.FerryType, None] = None,
            divider_type_: typing.Union[nds.characteristics.types.divider_type.DividerType, None] = None,
            grade_type_: typing.Union[nds.characteristics.types.grade_type.GradeType, None] = None,
            stubble_: typing.Union[nds.characteristics.types.stubble.Stubble, None] = None,
            railway_crossing_: typing.Union[nds.characteristics.types.railway_crossing.RailwayCrossing, None] = None,
            pedestrian_crossing_: typing.Union[nds.characteristics.types.pedestrian_crossing.PedestrianCrossing, None] = None,
            traffic_calming_: typing.Union[nds.characteristics.types.traffic_calming.TrafficCalming, None] = None,
            movable_bridge_: typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None] = None,
            super_elevation_: typing.Union[nds.characteristics.types.super_elevation_class.SuperElevationClass, None] = None,
            road_median_: typing.Union[nds.characteristics.types.road_median.RoadMedian, None] = None,
            has_sidewalk_: typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None] = None,
            friction_coefficient_: typing.Union[nds.characteristics.types.friction_coefficient.FrictionCoefficient, None] = None,
            station_plaza_type_: typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None] = None,
            middle_divider_type_: typing.Union[nds.characteristics.types.divider_type.DividerType, None] = None,
            average_speed_: typing.Union[nds.core.types.speed_kmh.SpeedKmh, None] = None,
            functional_road_class_: typing.Union[nds.core.types.functional_road_class.FunctionalRoadClass, None] = None,
            priority_road_class_: typing.Union[nds.core.types.priority_road_class.PriorityRoadClass, None] = None,
            road_type_: typing.Union[nds.core.types.road_type.RoadType, None] = None,
            multi_digitized_road_reference_: typing.Union[nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference, None] = None,
            num_lanes_: typing.Union[nds.characteristics.types.num_lanes.NumLanes, None] = None,
            complex_intersection_type_: typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None] = None,
            start_or_destination_road_only_: typing.Union[nds.characteristics.types.start_or_destination_road_only.StartOrDestinationRoadOnly, None] = None,
            road_location_id_: typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None] = None,
            has_street_lights_: typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None] = None,
            shared_road_surface_with_pedestrians_: typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None] = None,
            in_business_district_: typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None] = None,
            global_source_id_: typing.Union[nds.core.types.global_source_id.GlobalSourceId, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if complete_carpool_road_ is not None:
            self._choice = complete_carpool_road_
        if partial_carpool_road_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = partial_carpool_road_
        if metric_road_width_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = metric_road_width_
        if pavement_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = pavement_type_
        if ferry_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = ferry_type_
        if divider_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = divider_type_
        if grade_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = grade_type_
        if stubble_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = stubble_
        if railway_crossing_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = railway_crossing_
        if pedestrian_crossing_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = pedestrian_crossing_
        if traffic_calming_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = traffic_calming_
        if movable_bridge_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = movable_bridge_
        if super_elevation_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = super_elevation_
        if road_median_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = road_median_
        if has_sidewalk_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = has_sidewalk_
        if friction_coefficient_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = friction_coefficient_
        if station_plaza_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = station_plaza_type_
        if middle_divider_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = middle_divider_type_
        if average_speed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = average_speed_
        if functional_road_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = functional_road_class_
        if priority_road_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = priority_road_class_
        if road_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = road_type_
        if multi_digitized_road_reference_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = multi_digitized_road_reference_
        if num_lanes_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = num_lanes_
        if complex_intersection_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = complex_intersection_type_
        if start_or_destination_road_only_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = start_or_destination_road_only_
        if road_location_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = road_location_id_
        if has_street_lights_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = has_street_lights_
        if shared_road_surface_with_pedestrians_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = shared_road_surface_with_pedestrians_
        if in_business_district_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = in_business_district_
        if global_source_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsRoadRangeAttributeValue is ambiguous!")
            self._choice = global_source_id_

    @classmethod
    def from_reader(
            cls: typing.Type['CharacsRoadRangeAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType) -> 'CharacsRoadRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['CharacsRoadRangeAttributeValue'],
            zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType) -> 'CharacsRoadRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CharacsRoadRangeAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            result = zserio.hashcode.calc_hashcode_float32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType:
        return self._type_

    @property
    def complete_carpool_road(self) -> typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None]:
        return self._choice

    @complete_carpool_road.setter
    def complete_carpool_road(self, complete_carpool_road_: typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None]) -> None:
        self._choice = complete_carpool_road_

    @property
    def partial_carpool_road(self) -> typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None]:
        return self._choice

    @partial_carpool_road.setter
    def partial_carpool_road(self, partial_carpool_road_: typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None]) -> None:
        self._choice = partial_carpool_road_

    @property
    def metric_road_width(self) -> nds.characteristics.types.metric_road_width.MetricRoadWidth:
        return self._choice

    @metric_road_width.setter
    def metric_road_width(self, metric_road_width_: nds.characteristics.types.metric_road_width.MetricRoadWidth) -> None:
        self._choice = metric_road_width_

    @property
    def pavement_type(self) -> typing.Union[nds.characteristics.types.pavement_type.PavementType, None]:
        return self._choice

    @pavement_type.setter
    def pavement_type(self, pavement_type_: typing.Union[nds.characteristics.types.pavement_type.PavementType, None]) -> None:
        self._choice = pavement_type_

    @property
    def ferry_type(self) -> typing.Union[nds.characteristics.types.ferry_type.FerryType, None]:
        return self._choice

    @ferry_type.setter
    def ferry_type(self, ferry_type_: typing.Union[nds.characteristics.types.ferry_type.FerryType, None]) -> None:
        self._choice = ferry_type_

    @property
    def divider_type(self) -> typing.Union[nds.characteristics.types.divider_type.DividerType, None]:
        return self._choice

    @divider_type.setter
    def divider_type(self, divider_type_: typing.Union[nds.characteristics.types.divider_type.DividerType, None]) -> None:
        self._choice = divider_type_

    @property
    def grade_type(self) -> typing.Union[nds.characteristics.types.grade_type.GradeType, None]:
        return self._choice

    @grade_type.setter
    def grade_type(self, grade_type_: typing.Union[nds.characteristics.types.grade_type.GradeType, None]) -> None:
        self._choice = grade_type_

    @property
    def stubble(self) -> typing.Union[nds.characteristics.types.stubble.Stubble, None]:
        return self._choice

    @stubble.setter
    def stubble(self, stubble_: typing.Union[nds.characteristics.types.stubble.Stubble, None]) -> None:
        self._choice = stubble_

    @property
    def railway_crossing(self) -> typing.Union[nds.characteristics.types.railway_crossing.RailwayCrossing, None]:
        return self._choice

    @railway_crossing.setter
    def railway_crossing(self, railway_crossing_: typing.Union[nds.characteristics.types.railway_crossing.RailwayCrossing, None]) -> None:
        self._choice = railway_crossing_

    @property
    def pedestrian_crossing(self) -> typing.Union[nds.characteristics.types.pedestrian_crossing.PedestrianCrossing, None]:
        return self._choice

    @pedestrian_crossing.setter
    def pedestrian_crossing(self, pedestrian_crossing_: typing.Union[nds.characteristics.types.pedestrian_crossing.PedestrianCrossing, None]) -> None:
        self._choice = pedestrian_crossing_

    @property
    def traffic_calming(self) -> typing.Union[nds.characteristics.types.traffic_calming.TrafficCalming, None]:
        return self._choice

    @traffic_calming.setter
    def traffic_calming(self, traffic_calming_: typing.Union[nds.characteristics.types.traffic_calming.TrafficCalming, None]) -> None:
        self._choice = traffic_calming_

    @property
    def movable_bridge(self) -> typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None]:
        return self._choice

    @movable_bridge.setter
    def movable_bridge(self, movable_bridge_: typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None]) -> None:
        self._choice = movable_bridge_

    @property
    def super_elevation(self) -> typing.Union[nds.characteristics.types.super_elevation_class.SuperElevationClass, None]:
        return self._choice

    @super_elevation.setter
    def super_elevation(self, super_elevation_: typing.Union[nds.characteristics.types.super_elevation_class.SuperElevationClass, None]) -> None:
        self._choice = super_elevation_

    @property
    def road_median(self) -> typing.Union[nds.characteristics.types.road_median.RoadMedian, None]:
        return self._choice

    @road_median.setter
    def road_median(self, road_median_: typing.Union[nds.characteristics.types.road_median.RoadMedian, None]) -> None:
        self._choice = road_median_

    @property
    def has_sidewalk(self) -> typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None]:
        return self._choice

    @has_sidewalk.setter
    def has_sidewalk(self, has_sidewalk_: typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None]) -> None:
        self._choice = has_sidewalk_

    @property
    def friction_coefficient(self) -> nds.characteristics.types.friction_coefficient.FrictionCoefficient:
        return self._choice

    @friction_coefficient.setter
    def friction_coefficient(self, friction_coefficient_: nds.characteristics.types.friction_coefficient.FrictionCoefficient) -> None:
        self._choice = friction_coefficient_

    @property
    def station_plaza_type(self) -> typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None]:
        return self._choice

    @station_plaza_type.setter
    def station_plaza_type(self, station_plaza_type_: typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None]) -> None:
        self._choice = station_plaza_type_

    @property
    def middle_divider_type(self) -> typing.Union[nds.characteristics.types.divider_type.DividerType, None]:
        return self._choice

    @middle_divider_type.setter
    def middle_divider_type(self, middle_divider_type_: typing.Union[nds.characteristics.types.divider_type.DividerType, None]) -> None:
        self._choice = middle_divider_type_

    @property
    def average_speed(self) -> nds.core.types.speed_kmh.SpeedKmh:
        return self._choice

    @average_speed.setter
    def average_speed(self, average_speed_: nds.core.types.speed_kmh.SpeedKmh) -> None:
        self._choice = average_speed_

    @property
    def functional_road_class(self) -> nds.core.types.functional_road_class.FunctionalRoadClass:
        return self._choice

    @functional_road_class.setter
    def functional_road_class(self, functional_road_class_: nds.core.types.functional_road_class.FunctionalRoadClass) -> None:
        self._choice = functional_road_class_

    @property
    def priority_road_class(self) -> nds.core.types.priority_road_class.PriorityRoadClass:
        return self._choice

    @priority_road_class.setter
    def priority_road_class(self, priority_road_class_: nds.core.types.priority_road_class.PriorityRoadClass) -> None:
        self._choice = priority_road_class_

    @property
    def road_type(self) -> typing.Union[nds.core.types.road_type.RoadType, None]:
        return self._choice

    @road_type.setter
    def road_type(self, road_type_: typing.Union[nds.core.types.road_type.RoadType, None]) -> None:
        self._choice = road_type_

    @property
    def multi_digitized_road_reference(self) -> typing.Union[nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference, None]:
        return self._choice

    @multi_digitized_road_reference.setter
    def multi_digitized_road_reference(self, multi_digitized_road_reference_: typing.Union[nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference, None]) -> None:
        self._choice = multi_digitized_road_reference_

    @property
    def num_lanes(self) -> nds.characteristics.types.num_lanes.NumLanes:
        return self._choice

    @num_lanes.setter
    def num_lanes(self, num_lanes_: nds.characteristics.types.num_lanes.NumLanes) -> None:
        self._choice = num_lanes_

    @property
    def complex_intersection_type(self) -> typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None]:
        return self._choice

    @complex_intersection_type.setter
    def complex_intersection_type(self, complex_intersection_type_: typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None]) -> None:
        self._choice = complex_intersection_type_

    @property
    def start_or_destination_road_only(self) -> typing.Union[nds.characteristics.types.start_or_destination_road_only.StartOrDestinationRoadOnly, None]:
        return self._choice

    @start_or_destination_road_only.setter
    def start_or_destination_road_only(self, start_or_destination_road_only_: typing.Union[nds.characteristics.types.start_or_destination_road_only.StartOrDestinationRoadOnly, None]) -> None:
        self._choice = start_or_destination_road_only_

    @property
    def road_location_id(self) -> typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None]:
        return self._choice

    @road_location_id.setter
    def road_location_id(self, road_location_id_: typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None]) -> None:
        self._choice = road_location_id_

    @property
    def has_street_lights(self) -> typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None]:
        return self._choice

    @has_street_lights.setter
    def has_street_lights(self, has_street_lights_: typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None]) -> None:
        self._choice = has_street_lights_

    @property
    def shared_road_surface_with_pedestrians(self) -> typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None]:
        return self._choice

    @shared_road_surface_with_pedestrians.setter
    def shared_road_surface_with_pedestrians(self, shared_road_surface_with_pedestrians_: typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None]) -> None:
        self._choice = shared_road_surface_with_pedestrians_

    @property
    def in_business_district(self) -> typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None]:
        return self._choice

    @in_business_district.setter
    def in_business_district(self, in_business_district_: typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None]) -> None:
        self._choice = in_business_district_

    @property
    def global_source_id(self) -> nds.core.types.global_source_id.GlobalSourceId:
        return self._choice

    @global_source_id.setter
    def global_source_id(self, global_source_id_: nds.core.types.global_source_id.GlobalSourceId) -> None:
        self._choice = global_source_id_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            return self.CHOICE_COMPLETE_CARPOOL_ROAD
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            return self.CHOICE_PARTIAL_CARPOOL_ROAD
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            return self.CHOICE_METRIC_ROAD_WIDTH
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            return self.CHOICE_PAVEMENT_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            return self.CHOICE_FERRY_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            return self.CHOICE_DIVIDER_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            return self.CHOICE_GRADE_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            return self.CHOICE_STUBBLE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            return self.CHOICE_RAILWAY_CROSSING
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            return self.CHOICE_PEDESTRIAN_CROSSING
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            return self.CHOICE_TRAFFIC_CALMING
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            return self.CHOICE_MOVABLE_BRIDGE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            return self.CHOICE_SUPER_ELEVATION
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            return self.CHOICE_ROAD_MEDIAN
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            return self.CHOICE_HAS_SIDEWALK
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            return self.CHOICE_FRICTION_COEFFICIENT
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            return self.CHOICE_STATION_PLAZA_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            return self.CHOICE_MIDDLE_DIVIDER_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            return self.CHOICE_AVERAGE_SPEED
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            return self.CHOICE_FUNCTIONAL_ROAD_CLASS
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            return self.CHOICE_PRIORITY_ROAD_CLASS
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            return self.CHOICE_ROAD_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            return self.CHOICE_MULTI_DIGITIZED_ROAD_REFERENCE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            return self.CHOICE_NUM_LANES
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            return self.CHOICE_COMPLEX_INTERSECTION_TYPE
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            return self.CHOICE_START_OR_DESTINATION_ROAD_ONLY
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            return self.CHOICE_ROAD_LOCATION_ID
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            return self.CHOICE_HAS_STREET_LIGHTS
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            return self.CHOICE_SHARED_ROAD_SURFACE_WITH_PEDESTRIANS
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            return self.CHOICE_IN_BUSINESS_DISTRICT
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            return self.CHOICE_GLOBAL_SOURCE_ID
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_context.metric_road_width.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.init_packing_context(zserio_context.pavement_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            self._choice.init_packing_context(zserio_context.ferry_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            self._choice.init_packing_context(zserio_context.divider_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            self._choice.init_packing_context(zserio_context.grade_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            self._choice.init_packing_context(zserio_context.railway_crossing)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            self._choice.init_packing_context(zserio_context.traffic_calming)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            self._choice.init_packing_context(zserio_context.super_elevation)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            self._choice.init_packing_context(zserio_context.road_median)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.init_packing_context(zserio_context.station_plaza_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            self._choice.init_packing_context(zserio_context.middle_divider_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            zserio_context.average_speed.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_context.functional_road_class.init(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.init(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            self._choice.init_packing_context(zserio_context.road_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            self._choice.init_packing_context(zserio_context.multi_digitized_road_reference)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            zserio_context.num_lanes.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.init_packing_context(zserio_context.complex_intersection_type)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.init_packing_context(zserio_context.road_location_id)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            pass
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            end_bitposition += 16
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += 8
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += 3
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio_context.metric_road_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.pavement_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.ferry_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.divider_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.grade_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.railway_crossing, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_calming, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.super_elevation, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_median, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            end_bitposition += 16
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.station_plaza_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.middle_divider_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += zserio_context.average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += zserio_context.functional_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.multi_digitized_road_reference, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.complex_intersection_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_location_id, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            end_bitposition += 16
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += 8
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += 3
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio_context.metric_road_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.pavement_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.ferry_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.divider_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.grade_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.railway_crossing, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_calming, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.super_elevation, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_median, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            end_bitposition += 16
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.station_plaza_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.middle_divider_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += zserio_context.average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += zserio_context.functional_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.multi_digitized_road_reference, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            end_bitposition += zserio_context.num_lanes.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.complex_intersection_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_location_id, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice = nds.characteristics.types.pavement_type.PavementType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            self._choice = nds.characteristics.types.ferry_type.FerryType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            self._choice = nds.characteristics.types.divider_type.DividerType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            self._choice = nds.characteristics.types.grade_type.GradeType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            self._choice = nds.characteristics.types.stubble.Stubble.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            self._choice = nds.characteristics.types.railway_crossing.RailwayCrossing.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            self._choice = nds.characteristics.types.pedestrian_crossing.PedestrianCrossing.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            self._choice = nds.characteristics.types.traffic_calming.TrafficCalming.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            self._choice = nds.characteristics.types.movable_bridge.MovableBridge.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            self._choice = nds.characteristics.types.super_elevation_class.SuperElevationClass.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            self._choice = nds.characteristics.types.road_median.RoadMedian.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            self._choice = nds.characteristics.types.has_sidewalk.HasSidewalk.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            self._choice = zserio_reader.read_float16()
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice = nds.characteristics.types.station_plaza_type.StationPlazaType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            self._choice = nds.characteristics.types.divider_type.DividerType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            self._choice = zserio_reader.read_bits(3)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_reader.read_bits(4)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            self._choice = nds.core.types.road_type.RoadType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            self._choice = nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice = nds.characteristics.types.complex_intersection_type.ComplexIntersectionType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            self._choice = nds.characteristics.types.start_or_destination_road_only.StartOrDestinationRoadOnly.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            self._choice = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice = nds.characteristics.types.has_street_lights.HasStreetLights.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice = nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice = nds.characteristics.types.in_business_district.InBusinessDistrict.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

    def read_packed(self, zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            self._choice = zserio_context.metric_road_width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice = nds.characteristics.types.pavement_type.PavementType.from_reader_packed(zserio_context.pavement_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            self._choice = nds.characteristics.types.ferry_type.FerryType.from_reader_packed(zserio_context.ferry_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            self._choice = nds.characteristics.types.divider_type.DividerType.from_reader_packed(zserio_context.divider_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            self._choice = nds.characteristics.types.grade_type.GradeType.from_reader_packed(zserio_context.grade_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            self._choice = nds.characteristics.types.stubble.Stubble.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            self._choice = nds.characteristics.types.railway_crossing.RailwayCrossing.from_reader_packed(zserio_context.railway_crossing, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            self._choice = nds.characteristics.types.pedestrian_crossing.PedestrianCrossing.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            self._choice = nds.characteristics.types.traffic_calming.TrafficCalming.from_reader_packed(zserio_context.traffic_calming, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            self._choice = nds.characteristics.types.movable_bridge.MovableBridge.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            self._choice = nds.characteristics.types.super_elevation_class.SuperElevationClass.from_reader_packed(zserio_context.super_elevation, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            self._choice = nds.characteristics.types.road_median.RoadMedian.from_reader_packed(zserio_context.road_median, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            self._choice = nds.characteristics.types.has_sidewalk.HasSidewalk.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            self._choice = zserio_reader.read_float16()
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice = nds.characteristics.types.station_plaza_type.StationPlazaType.from_reader_packed(zserio_context.station_plaza_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            self._choice = nds.characteristics.types.divider_type.DividerType.from_reader_packed(zserio_context.middle_divider_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            self._choice = zserio_context.average_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            self._choice = zserio_context.functional_road_class.read(zserio.array.BitFieldArrayTraits(3), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_context.priority_road_class.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            self._choice = nds.core.types.road_type.RoadType.from_reader_packed(zserio_context.road_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            self._choice = nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference.from_reader_packed(zserio_context.multi_digitized_road_reference, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            self._choice = zserio_context.num_lanes.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice = nds.characteristics.types.complex_intersection_type.ComplexIntersectionType.from_reader_packed(zserio_context.complex_intersection_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            self._choice = nds.characteristics.types.start_or_destination_road_only.StartOrDestinationRoadOnly.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            self._choice = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.from_reader_packed(zserio_context.road_location_id, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice = nds.characteristics.types.has_street_lights.HasStreetLights.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice = nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice = nds.characteristics.types.in_business_district.InBusinessDistrict.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            zserio_writer.write_float16(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_writer.write_bits(self._choice, 3)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_writer.write_bits(self._choice, 4)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

    def write_packed(self, zserio_context: CharacsRoadRangeAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_context.metric_road_width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.write_packed(zserio_context.pavement_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FERRY_TYPE):
            self._choice.write_packed(zserio_context.ferry_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.DIVIDER_TYPE):
            self._choice.write_packed(zserio_context.divider_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GRADE_TYPE):
            self._choice.write_packed(zserio_context.grade_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STUBBLE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.RAILWAY_CROSSING):
            self._choice.write_packed(zserio_context.railway_crossing, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PEDESTRIAN_CROSSING):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.TRAFFIC_CALMING):
            self._choice.write_packed(zserio_context.traffic_calming, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MOVABLE_BRIDGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SUPERELEVATION):
            self._choice.write_packed(zserio_context.super_elevation, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_MEDIAN):
            self._choice.write_packed(zserio_context.road_median, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_SIDEWALK):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FRICTION):
            zserio_writer.write_float16(self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.write_packed(zserio_context.station_plaza_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MIDDLE_DIVIDER_TYPE):
            self._choice.write_packed(zserio_context.middle_divider_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.AVERAGE_SPEED):
            zserio_context.average_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_context.functional_road_class.write(zserio.array.BitFieldArrayTraits(3), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_TYPE):
            self._choice.write_packed(zserio_context.road_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.MULTI_DIGITIZED_ROAD_REFERENCE):
            self._choice.write_packed(zserio_context.multi_digitized_road_reference, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.NUM_LANES):
            zserio_context.num_lanes.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.write_packed(zserio_context.complex_intersection_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.START_OR_DESTINATION_ROAD_ONLY):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.write_packed(zserio_context.road_location_id, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_road_range_attribute_type.CharacsRoadRangeAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsRoadRangeAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._metric_road_width_ = zserio.array.DeltaContext()
            self._pavement_type_ = zserio.array.DeltaContext()
            self._ferry_type_ = zserio.array.DeltaContext()
            self._divider_type_ = zserio.array.DeltaContext()
            self._grade_type_ = zserio.array.DeltaContext()
            self._railway_crossing_ = zserio.array.DeltaContext()
            self._traffic_calming_ = zserio.array.DeltaContext()
            self._super_elevation_ = zserio.array.DeltaContext()
            self._road_median_ = nds.characteristics.types.road_median.RoadMedian.ZserioPackingContext()
            self._station_plaza_type_ = zserio.array.DeltaContext()
            self._middle_divider_type_ = zserio.array.DeltaContext()
            self._average_speed_ = zserio.array.DeltaContext()
            self._functional_road_class_ = zserio.array.DeltaContext()
            self._priority_road_class_ = zserio.array.DeltaContext()
            self._road_type_ = nds.core.types.road_type.RoadType.ZserioPackingContext()
            self._multi_digitized_road_reference_ = nds.characteristics.types.multi_digitized_road_reference.MultiDigitizedRoadReference.ZserioPackingContext()
            self._num_lanes_ = zserio.array.DeltaContext()
            self._complex_intersection_type_ = zserio.array.DeltaContext()
            self._road_location_id_ = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.ZserioPackingContext()

        @property
        def metric_road_width(self):
            return self._metric_road_width_

        @property
        def pavement_type(self):
            return self._pavement_type_

        @property
        def ferry_type(self):
            return self._ferry_type_

        @property
        def divider_type(self):
            return self._divider_type_

        @property
        def grade_type(self):
            return self._grade_type_

        @property
        def railway_crossing(self):
            return self._railway_crossing_

        @property
        def traffic_calming(self):
            return self._traffic_calming_

        @property
        def super_elevation(self):
            return self._super_elevation_

        @property
        def road_median(self):
            return self._road_median_

        @property
        def station_plaza_type(self):
            return self._station_plaza_type_

        @property
        def middle_divider_type(self):
            return self._middle_divider_type_

        @property
        def average_speed(self):
            return self._average_speed_

        @property
        def functional_road_class(self):
            return self._functional_road_class_

        @property
        def priority_road_class(self):
            return self._priority_road_class_

        @property
        def road_type(self):
            return self._road_type_

        @property
        def multi_digitized_road_reference(self):
            return self._multi_digitized_road_reference_

        @property
        def num_lanes(self):
            return self._num_lanes_

        @property
        def complex_intersection_type(self):
            return self._complex_intersection_type_

        @property
        def road_location_id(self):
            return self._road_location_id_

    CHOICE_COMPLETE_CARPOOL_ROAD = 0
    CHOICE_PARTIAL_CARPOOL_ROAD = 1
    CHOICE_METRIC_ROAD_WIDTH = 2
    CHOICE_PAVEMENT_TYPE = 3
    CHOICE_FERRY_TYPE = 4
    CHOICE_DIVIDER_TYPE = 5
    CHOICE_GRADE_TYPE = 6
    CHOICE_STUBBLE = 7
    CHOICE_RAILWAY_CROSSING = 8
    CHOICE_PEDESTRIAN_CROSSING = 9
    CHOICE_TRAFFIC_CALMING = 10
    CHOICE_MOVABLE_BRIDGE = 11
    CHOICE_SUPER_ELEVATION = 12
    CHOICE_ROAD_MEDIAN = 13
    CHOICE_HAS_SIDEWALK = 14
    CHOICE_FRICTION_COEFFICIENT = 15
    CHOICE_STATION_PLAZA_TYPE = 16
    CHOICE_MIDDLE_DIVIDER_TYPE = 17
    CHOICE_AVERAGE_SPEED = 18
    CHOICE_FUNCTIONAL_ROAD_CLASS = 19
    CHOICE_PRIORITY_ROAD_CLASS = 20
    CHOICE_ROAD_TYPE = 21
    CHOICE_MULTI_DIGITIZED_ROAD_REFERENCE = 22
    CHOICE_NUM_LANES = 23
    CHOICE_COMPLEX_INTERSECTION_TYPE = 24
    CHOICE_START_OR_DESTINATION_ROAD_ONLY = 25
    CHOICE_ROAD_LOCATION_ID = 26
    CHOICE_HAS_STREET_LIGHTS = 27
    CHOICE_SHARED_ROAD_SURFACE_WITH_PEDESTRIANS = 28
    CHOICE_IN_BUSINESS_DISTRICT = 29
    CHOICE_GLOBAL_SOURCE_ID = 30
    UNDEFINED_CHOICE = -1
