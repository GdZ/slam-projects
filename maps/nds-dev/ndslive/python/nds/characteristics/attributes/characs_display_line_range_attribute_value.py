# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.characteristics.attributes.characs_display_line_range_attribute_type
import nds.characteristics.types.complete_carpool_road
import nds.characteristics.types.complex_intersection_type
import nds.characteristics.types.ferry_type
import nds.characteristics.types.has_sidewalk
import nds.characteristics.types.has_street_lights
import nds.characteristics.types.in_business_district
import nds.characteristics.types.metric_lane_width
import nds.characteristics.types.movable_bridge
import nds.characteristics.types.partial_carpool_road
import nds.characteristics.types.pavement_type
import nds.characteristics.types.road_location_assignment
import nds.characteristics.types.shared_road_surface_with_pedestrians
import nds.characteristics.types.station_plaza_type
import nds.core.types.functional_road_class
import nds.core.types.global_source_id
import nds.core.types.priority_road_class
import nds.core.types.road_type
import nds.core.types.speed_kmh

class CharacsDisplayLineRangeAttributeValue:
    def __init__(
            self,
            type_: nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType,
            *,
            metric_lane_width_: typing.Union[nds.characteristics.types.metric_lane_width.MetricLaneWidth, None] = None,
            pavement_type_: typing.Union[nds.characteristics.types.pavement_type.PavementType, None] = None,
            movable_bridge_: typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None] = None,
            has_sidewalk_: typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None] = None,
            station_plaza_type_: typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None] = None,
            average_speed_: typing.Union[nds.core.types.speed_kmh.SpeedKmh, None] = None,
            functional_road_class_: typing.Union[nds.core.types.functional_road_class.FunctionalRoadClass, None] = None,
            priority_road_class_: typing.Union[nds.core.types.priority_road_class.PriorityRoadClass, None] = None,
            complex_intersection_type_: typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None] = None,
            road_location_id_: typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None] = None,
            has_street_lights_: typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None] = None,
            shared_road_surface_with_pedestrians_: typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None] = None,
            in_business_district_: typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None] = None,
            road_type_: typing.Union[nds.core.types.road_type.RoadType, None] = None,
            complete_carpool_road_: typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None] = None,
            partial_carpool_road_: typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None] = None,
            ferry_type_: typing.Union[nds.characteristics.types.ferry_type.FerryType, None] = None,
            global_source_id_: typing.Union[nds.core.types.global_source_id.GlobalSourceId, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if metric_lane_width_ is not None:
            self._choice = metric_lane_width_
        if pavement_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = pavement_type_
        if movable_bridge_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = movable_bridge_
        if has_sidewalk_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = has_sidewalk_
        if station_plaza_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = station_plaza_type_
        if average_speed_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = average_speed_
        if functional_road_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = functional_road_class_
        if priority_road_class_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = priority_road_class_
        if complex_intersection_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = complex_intersection_type_
        if road_location_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = road_location_id_
        if has_street_lights_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = has_street_lights_
        if shared_road_surface_with_pedestrians_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = shared_road_surface_with_pedestrians_
        if in_business_district_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = in_business_district_
        if road_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = road_type_
        if complete_carpool_road_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = complete_carpool_road_
        if partial_carpool_road_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = partial_carpool_road_
        if ferry_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = ferry_type_
        if global_source_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice CharacsDisplayLineRangeAttributeValue is ambiguous!")
            self._choice = global_source_id_

    @classmethod
    def from_reader(
            cls: typing.Type['CharacsDisplayLineRangeAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType) -> 'CharacsDisplayLineRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['CharacsDisplayLineRangeAttributeValue'],
            zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType) -> 'CharacsDisplayLineRangeAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CharacsDisplayLineRangeAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType:
        return self._type_

    @property
    def metric_lane_width(self) -> nds.characteristics.types.metric_lane_width.MetricLaneWidth:
        return self._choice

    @metric_lane_width.setter
    def metric_lane_width(self, metric_lane_width_: nds.characteristics.types.metric_lane_width.MetricLaneWidth) -> None:
        self._choice = metric_lane_width_

    @property
    def pavement_type(self) -> typing.Union[nds.characteristics.types.pavement_type.PavementType, None]:
        return self._choice

    @pavement_type.setter
    def pavement_type(self, pavement_type_: typing.Union[nds.characteristics.types.pavement_type.PavementType, None]) -> None:
        self._choice = pavement_type_

    @property
    def movable_bridge(self) -> typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None]:
        return self._choice

    @movable_bridge.setter
    def movable_bridge(self, movable_bridge_: typing.Union[nds.characteristics.types.movable_bridge.MovableBridge, None]) -> None:
        self._choice = movable_bridge_

    @property
    def has_sidewalk(self) -> typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None]:
        return self._choice

    @has_sidewalk.setter
    def has_sidewalk(self, has_sidewalk_: typing.Union[nds.characteristics.types.has_sidewalk.HasSidewalk, None]) -> None:
        self._choice = has_sidewalk_

    @property
    def station_plaza_type(self) -> typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None]:
        return self._choice

    @station_plaza_type.setter
    def station_plaza_type(self, station_plaza_type_: typing.Union[nds.characteristics.types.station_plaza_type.StationPlazaType, None]) -> None:
        self._choice = station_plaza_type_

    @property
    def average_speed(self) -> nds.core.types.speed_kmh.SpeedKmh:
        return self._choice

    @average_speed.setter
    def average_speed(self, average_speed_: nds.core.types.speed_kmh.SpeedKmh) -> None:
        self._choice = average_speed_

    @property
    def functional_road_class(self) -> nds.core.types.functional_road_class.FunctionalRoadClass:
        return self._choice

    @functional_road_class.setter
    def functional_road_class(self, functional_road_class_: nds.core.types.functional_road_class.FunctionalRoadClass) -> None:
        self._choice = functional_road_class_

    @property
    def priority_road_class(self) -> nds.core.types.priority_road_class.PriorityRoadClass:
        return self._choice

    @priority_road_class.setter
    def priority_road_class(self, priority_road_class_: nds.core.types.priority_road_class.PriorityRoadClass) -> None:
        self._choice = priority_road_class_

    @property
    def complex_intersection_type(self) -> typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None]:
        return self._choice

    @complex_intersection_type.setter
    def complex_intersection_type(self, complex_intersection_type_: typing.Union[nds.characteristics.types.complex_intersection_type.ComplexIntersectionType, None]) -> None:
        self._choice = complex_intersection_type_

    @property
    def road_location_id(self) -> typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None]:
        return self._choice

    @road_location_id.setter
    def road_location_id(self, road_location_id_: typing.Union[nds.characteristics.types.road_location_assignment.RoadLocationAssignment, None]) -> None:
        self._choice = road_location_id_

    @property
    def has_street_lights(self) -> typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None]:
        return self._choice

    @has_street_lights.setter
    def has_street_lights(self, has_street_lights_: typing.Union[nds.characteristics.types.has_street_lights.HasStreetLights, None]) -> None:
        self._choice = has_street_lights_

    @property
    def shared_road_surface_with_pedestrians(self) -> typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None]:
        return self._choice

    @shared_road_surface_with_pedestrians.setter
    def shared_road_surface_with_pedestrians(self, shared_road_surface_with_pedestrians_: typing.Union[nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians, None]) -> None:
        self._choice = shared_road_surface_with_pedestrians_

    @property
    def in_business_district(self) -> typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None]:
        return self._choice

    @in_business_district.setter
    def in_business_district(self, in_business_district_: typing.Union[nds.characteristics.types.in_business_district.InBusinessDistrict, None]) -> None:
        self._choice = in_business_district_

    @property
    def road_type(self) -> typing.Union[nds.core.types.road_type.RoadType, None]:
        return self._choice

    @road_type.setter
    def road_type(self, road_type_: typing.Union[nds.core.types.road_type.RoadType, None]) -> None:
        self._choice = road_type_

    @property
    def complete_carpool_road(self) -> typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None]:
        return self._choice

    @complete_carpool_road.setter
    def complete_carpool_road(self, complete_carpool_road_: typing.Union[nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad, None]) -> None:
        self._choice = complete_carpool_road_

    @property
    def partial_carpool_road(self) -> typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None]:
        return self._choice

    @partial_carpool_road.setter
    def partial_carpool_road(self, partial_carpool_road_: typing.Union[nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad, None]) -> None:
        self._choice = partial_carpool_road_

    @property
    def ferry_type(self) -> typing.Union[nds.characteristics.types.ferry_type.FerryType, None]:
        return self._choice

    @ferry_type.setter
    def ferry_type(self, ferry_type_: typing.Union[nds.characteristics.types.ferry_type.FerryType, None]) -> None:
        self._choice = ferry_type_

    @property
    def global_source_id(self) -> nds.core.types.global_source_id.GlobalSourceId:
        return self._choice

    @global_source_id.setter
    def global_source_id(self, global_source_id_: nds.core.types.global_source_id.GlobalSourceId) -> None:
        self._choice = global_source_id_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            return self.CHOICE_METRIC_LANE_WIDTH
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            return self.CHOICE_PAVEMENT_TYPE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            return self.CHOICE_MOVABLE_BRIDGE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            return self.CHOICE_HAS_SIDEWALK
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            return self.CHOICE_STATION_PLAZA_TYPE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            return self.CHOICE_AVERAGE_SPEED
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            return self.CHOICE_FUNCTIONAL_ROAD_CLASS
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            return self.CHOICE_PRIORITY_ROAD_CLASS
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            return self.CHOICE_COMPLEX_INTERSECTION_TYPE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            return self.CHOICE_ROAD_LOCATION_ID
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            return self.CHOICE_HAS_STREET_LIGHTS
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            return self.CHOICE_SHARED_ROAD_SURFACE_WITH_PEDESTRIANS
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            return self.CHOICE_IN_BUSINESS_DISTRICT
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            return self.CHOICE_ROAD_TYPE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            return self.CHOICE_COMPLETE_CARPOOL_ROAD
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            return self.CHOICE_PARTIAL_CARPOOL_ROAD
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            return self.CHOICE_FERRY_TYPE
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            return self.CHOICE_GLOBAL_SOURCE_ID
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_context.metric_lane_width.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.init_packing_context(zserio_context.pavement_type)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.init_packing_context(zserio_context.station_plaza_type)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            zserio_context.average_speed.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_context.functional_road_class.init(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.init(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.init_packing_context(zserio_context.complex_intersection_type)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.init_packing_context(zserio_context.road_location_id)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            self._choice.init_packing_context(zserio_context.road_type)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            pass
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            self._choice.init_packing_context(zserio_context.ferry_type)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += 8
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += 3
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio_context.metric_lane_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.pavement_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.station_plaza_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += zserio_context.average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += zserio_context.functional_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.complex_intersection_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_location_id, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.ferry_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += 8
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += 3
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += 4
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            end_bitposition += zserio_context.metric_lane_width.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.pavement_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.station_plaza_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            end_bitposition += zserio_context.average_speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            end_bitposition += zserio_context.functional_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(3), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            end_bitposition += zserio_context.priority_road_class.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.complex_intersection_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_location_id, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.ferry_type, end_bitposition)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice = nds.characteristics.types.pavement_type.PavementType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            self._choice = nds.characteristics.types.movable_bridge.MovableBridge.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            self._choice = nds.characteristics.types.has_sidewalk.HasSidewalk.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice = nds.characteristics.types.station_plaza_type.StationPlazaType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            self._choice = zserio_reader.read_bits(3)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_reader.read_bits(4)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice = nds.characteristics.types.complex_intersection_type.ComplexIntersectionType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            self._choice = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice = nds.characteristics.types.has_street_lights.HasStreetLights.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice = nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice = nds.characteristics.types.in_business_district.InBusinessDistrict.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            self._choice = nds.core.types.road_type.RoadType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            self._choice = nds.characteristics.types.ferry_type.FerryType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

    def read_packed(self, zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            self._choice = zserio_context.metric_lane_width.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice = nds.characteristics.types.pavement_type.PavementType.from_reader_packed(zserio_context.pavement_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            self._choice = nds.characteristics.types.movable_bridge.MovableBridge.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            self._choice = nds.characteristics.types.has_sidewalk.HasSidewalk.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice = nds.characteristics.types.station_plaza_type.StationPlazaType.from_reader_packed(zserio_context.station_plaza_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            self._choice = zserio_context.average_speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            self._choice = zserio_context.functional_road_class.read(zserio.array.BitFieldArrayTraits(3), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            self._choice = zserio_context.priority_road_class.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice = nds.characteristics.types.complex_intersection_type.ComplexIntersectionType.from_reader_packed(zserio_context.complex_intersection_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            self._choice = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.from_reader_packed(zserio_context.road_location_id, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice = nds.characteristics.types.has_street_lights.HasStreetLights.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice = nds.characteristics.types.shared_road_surface_with_pedestrians.SharedRoadSurfaceWithPedestrians.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice = nds.characteristics.types.in_business_district.InBusinessDistrict.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            self._choice = nds.core.types.road_type.RoadType.from_reader_packed(zserio_context.road_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.complete_carpool_road.CompleteCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice = nds.characteristics.types.partial_carpool_road.PartialCarpoolRoad.from_reader(zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            self._choice = nds.characteristics.types.ferry_type.FerryType.from_reader_packed(zserio_context.ferry_type, zserio_reader)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_writer.write_bits(self._choice, 3)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_writer.write_bits(self._choice, 4)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

    def write_packed(self, zserio_context: CharacsDisplayLineRangeAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PHYSICAL_WIDTH_METRIC):
            zserio_context.metric_lane_width.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.TYPE_OF_PAVEMENT):
            self._choice.write_packed(zserio_context.pavement_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.MOVABLE_BRIDGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_SIDEWALK):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.STATION_PLAZA_TYPE):
            self._choice.write_packed(zserio_context.station_plaza_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.AVERAGE_SPEED):
            zserio_context.average_speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FUNCTIONAL_ROAD_CLASS):
            zserio_context.functional_road_class.write(zserio.array.BitFieldArrayTraits(3), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PRIORITY_ROAD_CLASS):
            zserio_context.priority_road_class.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._choice)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLEX_INTERSECTION_TYPE):
            self._choice.write_packed(zserio_context.complex_intersection_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_LOCATION_ID):
            self._choice.write_packed(zserio_context.road_location_id, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.HAS_STREET_LIGHTS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.SHARED_ROAD_SURFACE_WITH_PEDESTRIANS):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.IN_BUSINESS_DISTRICT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.ROAD_TYPE):
            self._choice.write_packed(zserio_context.road_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.COMPLETE_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.PARTIAL_CARPOOL_ROAD):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.FERRY_TYPE):
            self._choice.write_packed(zserio_context.ferry_type, zserio_writer)
        elif selector == (nds.characteristics.attributes.characs_display_line_range_attribute_type.CharacsDisplayLineRangeAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice CharacsDisplayLineRangeAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._metric_lane_width_ = zserio.array.DeltaContext()
            self._pavement_type_ = zserio.array.DeltaContext()
            self._station_plaza_type_ = zserio.array.DeltaContext()
            self._average_speed_ = zserio.array.DeltaContext()
            self._functional_road_class_ = zserio.array.DeltaContext()
            self._priority_road_class_ = zserio.array.DeltaContext()
            self._complex_intersection_type_ = zserio.array.DeltaContext()
            self._road_location_id_ = nds.characteristics.types.road_location_assignment.RoadLocationAssignment.ZserioPackingContext()
            self._road_type_ = nds.core.types.road_type.RoadType.ZserioPackingContext()
            self._ferry_type_ = zserio.array.DeltaContext()

        @property
        def metric_lane_width(self):
            return self._metric_lane_width_

        @property
        def pavement_type(self):
            return self._pavement_type_

        @property
        def station_plaza_type(self):
            return self._station_plaza_type_

        @property
        def average_speed(self):
            return self._average_speed_

        @property
        def functional_road_class(self):
            return self._functional_road_class_

        @property
        def priority_road_class(self):
            return self._priority_road_class_

        @property
        def complex_intersection_type(self):
            return self._complex_intersection_type_

        @property
        def road_location_id(self):
            return self._road_location_id_

        @property
        def road_type(self):
            return self._road_type_

        @property
        def ferry_type(self):
            return self._ferry_type_

    CHOICE_METRIC_LANE_WIDTH = 0
    CHOICE_PAVEMENT_TYPE = 1
    CHOICE_MOVABLE_BRIDGE = 2
    CHOICE_HAS_SIDEWALK = 3
    CHOICE_STATION_PLAZA_TYPE = 4
    CHOICE_AVERAGE_SPEED = 5
    CHOICE_FUNCTIONAL_ROAD_CLASS = 6
    CHOICE_PRIORITY_ROAD_CLASS = 7
    CHOICE_COMPLEX_INTERSECTION_TYPE = 8
    CHOICE_ROAD_LOCATION_ID = 9
    CHOICE_HAS_STREET_LIGHTS = 10
    CHOICE_SHARED_ROAD_SURFACE_WITH_PEDESTRIANS = 11
    CHOICE_IN_BUSINESS_DISTRICT = 12
    CHOICE_ROAD_TYPE = 13
    CHOICE_COMPLETE_CARPOOL_ROAD = 14
    CHOICE_PARTIAL_CARPOOL_ROAD = 15
    CHOICE_FERRY_TYPE = 16
    CHOICE_GLOBAL_SOURCE_ID = 17
    UNDEFINED_CHOICE = -1
