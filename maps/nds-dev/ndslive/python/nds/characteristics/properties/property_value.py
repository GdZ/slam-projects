# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.characteristics.properties.property_type
import nds.characteristics.types.station_stop_type
import nds.characteristics.types.station_temporary
import nds.characteristics.types.station_toll_booths
import nds.characteristics.types.toll_payment

class PropertyValue:
    def __init__(
            self,
            type_: nds.characteristics.properties.property_type.PropertyType,
            *,
            toll_payment_: typing.Union[typing.List[nds.characteristics.types.toll_payment.TollPayment], None] = None,
            station_stop_type_: typing.Union[nds.characteristics.types.station_stop_type.StationStopType, None] = None,
            station_temporary_: typing.Union[nds.characteristics.types.station_temporary.StationTemporary, None] = None,
            station_toll_booths_: typing.Union[nds.characteristics.types.station_toll_booths.StationTollBooths, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if toll_payment_ is not None:
            self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_toll_payment()), toll_payment_, is_auto=True)
        if station_stop_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = station_stop_type_
        if station_temporary_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = station_temporary_
        if station_toll_booths_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = station_toll_booths_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.characteristics.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.characteristics.properties.property_type.PropertyType:
        return self._type_

    @property
    def toll_payment(self) -> typing.List[nds.characteristics.types.toll_payment.TollPayment]:
        return self._choice.raw_array

    @toll_payment.setter
    def toll_payment(self, toll_payment_: typing.List[nds.characteristics.types.toll_payment.TollPayment]) -> None:
        self._choice = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_toll_payment()), toll_payment_, is_auto=True)

    @property
    def station_stop_type(self) -> typing.Union[nds.characteristics.types.station_stop_type.StationStopType, None]:
        return self._choice

    @station_stop_type.setter
    def station_stop_type(self, station_stop_type_: typing.Union[nds.characteristics.types.station_stop_type.StationStopType, None]) -> None:
        self._choice = station_stop_type_

    @property
    def station_temporary(self) -> typing.Union[nds.characteristics.types.station_temporary.StationTemporary, None]:
        return self._choice

    @station_temporary.setter
    def station_temporary(self, station_temporary_: typing.Union[nds.characteristics.types.station_temporary.StationTemporary, None]) -> None:
        self._choice = station_temporary_

    @property
    def station_toll_booths(self) -> nds.characteristics.types.station_toll_booths.StationTollBooths:
        return self._choice

    @station_toll_booths.setter
    def station_toll_booths(self, station_toll_booths_: nds.characteristics.types.station_toll_booths.StationTollBooths) -> None:
        self._choice = station_toll_booths_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            return self.CHOICE_TOLL_PAYMENT
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            return self.CHOICE_STATION_STOP_TYPE
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            return self.CHOICE_STATION_TEMPORARY
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            return self.CHOICE_STATION_TOLL_BOOTHS
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            self._choice.init_packing_context(zserio_context.station_stop_type)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            zserio_context.station_toll_booths.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            end_bitposition += self._choice.bitsizeof_packed(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.station_stop_type, end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            end_bitposition += zserio_context.station_toll_booths.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            end_bitposition += 8
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            end_bitposition = self._choice.initialize_offsets_packed(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.station_stop_type, end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            end_bitposition += zserio_context.station_toll_booths.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            self._choice = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_toll_payment()), zserio_reader, is_auto=True)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            self._choice = nds.characteristics.types.station_stop_type.StationStopType.from_reader(zserio_reader)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            self._choice = nds.characteristics.types.station_temporary.StationTemporary.from_reader(zserio_reader)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            self._choice = zserio_reader.read_bits(8)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            self._choice = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_toll_payment()), zserio_reader, is_auto=True)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            self._choice = nds.characteristics.types.station_stop_type.StationStopType.from_reader_packed(zserio_context.station_stop_type, zserio_reader)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            self._choice = nds.characteristics.types.station_temporary.StationTemporary.from_reader(zserio_reader)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            self._choice = zserio_context.station_toll_booths.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            zserio_writer.write_bits(self._choice, 8)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.characteristics.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.characteristics.properties.property_type.PropertyType.TOLL_PAYMENT):
            self._choice.write_packed(zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_STOP_TYPE):
            self._choice.write_packed(zserio_context.station_stop_type, zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TEMPORARY):
            self._choice.write(zserio_writer)
        elif selector == (nds.characteristics.properties.property_type.PropertyType.STATION_TOLL_BOOTHS):
            zserio_context.station_toll_booths.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._station_stop_type_ = zserio.array.DeltaContext()
            self._station_toll_booths_ = zserio.array.DeltaContext()

        @property
        def station_stop_type(self):
            return self._station_stop_type_

        @property
        def station_toll_booths(self):
            return self._station_toll_booths_

    class _ZserioElementFactory_toll_payment:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.characteristics.types.toll_payment.TollPayment:
            del zserio_index
            return nds.characteristics.types.toll_payment.TollPayment.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.characteristics.types.toll_payment.TollPayment.ZserioPackingContext:
            return nds.characteristics.types.toll_payment.TollPayment.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.characteristics.types.toll_payment.TollPayment.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.characteristics.types.toll_payment.TollPayment:
            del zserio_index
            return nds.characteristics.types.toll_payment.TollPayment.from_reader_packed(zserio_context, zserio_reader)

    CHOICE_TOLL_PAYMENT = 0
    CHOICE_STATION_STOP_TYPE = 1
    CHOICE_STATION_TEMPORARY = 2
    CHOICE_STATION_TOLL_BOOTHS = 3
    UNDEFINED_CHOICE = -1
