# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.spatial_extent
import nds.core.types.iso_country_code
import nds.core.types.language_code
import nds.search.services.along_path_search_request_details
import nds.search.services.around_position_search_request_details
import nds.search.services.request_options
import nds.search.types.result_order
import nds.system.types.extern_data

class GeneralSearchRequest:
    def __init__(
            self,
            options_: typing.Union[nds.search.services.request_options.RequestOptions, None] = None,
            term_: str = str(),
            preferred_language_: typing.Optional[nds.core.types.language_code.LanguageCode] = None,
            around_search_details_: typing.Optional[nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails] = None,
            along_search_details_: typing.Optional[nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails] = None,
            in_area_search_details_: typing.Optional[nds.core.geometry.spatial_extent.SpatialExtent] = None,
            iso_country_code_: typing.Optional[nds.core.types.iso_country_code.IsoCountryCode] = None,
            max_response_count_: typing.Optional[int] = None,
            order_: typing.Optional[nds.search.types.result_order.ResultOrder] = None,
            poi_filter_: typing.Optional[nds.system.types.extern_data.ExternData] = None,
            address_filter_: typing.Optional[nds.system.types.extern_data.ExternData] = None) -> None:
        self._options_ = options_
        self._term_ = term_
        self._preferred_language_ = preferred_language_
        self._around_search_details_ = around_search_details_
        self._along_search_details_ = along_search_details_
        self._in_area_search_details_ = in_area_search_details_
        self._iso_country_code_ = iso_country_code_
        self._max_response_count_ = max_response_count_
        self._order_ = order_
        self._poi_filter_ = poi_filter_
        self._address_filter_ = address_filter_

    @classmethod
    def from_reader(
            cls: typing.Type['GeneralSearchRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'GeneralSearchRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GeneralSearchRequest'],
            zserio_context: GeneralSearchRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GeneralSearchRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GeneralSearchRequest):
            return ((self._options_ == other._options_) and
                    (self._term_ == other._term_) and
                    (not other.is_preferred_language_used() if not self.is_preferred_language_used() else (self._preferred_language_ == other._preferred_language_)) and
                    (not other.is_around_search_details_used() if not self.is_around_search_details_used() else (self._around_search_details_ == other._around_search_details_)) and
                    (not other.is_along_search_details_used() if not self.is_along_search_details_used() else (self._along_search_details_ == other._along_search_details_)) and
                    (not other.is_in_area_search_details_used() if not self.is_in_area_search_details_used() else (self._in_area_search_details_ == other._in_area_search_details_)) and
                    (not other.is_iso_country_code_used() if not self.is_iso_country_code_used() else (self._iso_country_code_ == other._iso_country_code_)) and
                    (not other.is_max_response_count_used() if not self.is_max_response_count_used() else (self._max_response_count_ == other._max_response_count_)) and
                    (not other.is_order_used() if not self.is_order_used() else (self._order_ == other._order_)) and
                    (not other.is_poi_filter_used() if not self.is_poi_filter_used() else (self._poi_filter_ == other._poi_filter_)) and
                    (not other.is_address_filter_used() if not self.is_address_filter_used() else (self._address_filter_ == other._address_filter_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._options_)
        result = zserio.hashcode.calc_hashcode_string(result, self._term_)
        if self.is_preferred_language_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._preferred_language_)
        if self.is_around_search_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._around_search_details_)
        if self.is_along_search_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._along_search_details_)
        if self.is_in_area_search_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._in_area_search_details_)
        if self.is_iso_country_code_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._iso_country_code_)
        if self.is_max_response_count_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._max_response_count_)
        if self.is_order_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._order_)
        if self.is_poi_filter_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._poi_filter_)
        if self.is_address_filter_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._address_filter_)

        return result

    @property
    def options(self) -> typing.Union[nds.search.services.request_options.RequestOptions, None]:
        return self._options_

    @options.setter
    def options(self, options_: typing.Union[nds.search.services.request_options.RequestOptions, None]) -> None:
        self._options_ = options_

    @property
    def term(self) -> str:
        return self._term_

    @term.setter
    def term(self, term_: str) -> None:
        self._term_ = term_

    @property
    def preferred_language(self) -> typing.Optional[nds.core.types.language_code.LanguageCode]:
        return self._preferred_language_

    @preferred_language.setter
    def preferred_language(self, preferred_language_: typing.Optional[nds.core.types.language_code.LanguageCode]) -> None:
        self._preferred_language_ = preferred_language_

    def is_preferred_language_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.PREFERRED_LANGUAGE) == nds.search.services.request_options.RequestOptions.Values.PREFERRED_LANGUAGE

    def is_preferred_language_set(self) -> bool:
        return not self._preferred_language_ is None

    def reset_preferred_language(self) -> None:
        self._preferred_language_ = None

    @property
    def around_search_details(self) -> typing.Optional[nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails]:
        return self._around_search_details_

    @around_search_details.setter
    def around_search_details(self, around_search_details_: typing.Optional[nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails]) -> None:
        self._around_search_details_ = around_search_details_

    def is_around_search_details_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.SEARCH_AROUND) == nds.search.services.request_options.RequestOptions.Values.SEARCH_AROUND

    def is_around_search_details_set(self) -> bool:
        return not self._around_search_details_ is None

    def reset_around_search_details(self) -> None:
        self._around_search_details_ = None

    @property
    def along_search_details(self) -> typing.Optional[nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails]:
        return self._along_search_details_

    @along_search_details.setter
    def along_search_details(self, along_search_details_: typing.Optional[nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails]) -> None:
        self._along_search_details_ = along_search_details_

    def is_along_search_details_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.SEARCH_ALONG) == nds.search.services.request_options.RequestOptions.Values.SEARCH_ALONG

    def is_along_search_details_set(self) -> bool:
        return not self._along_search_details_ is None

    def reset_along_search_details(self) -> None:
        self._along_search_details_ = None

    @property
    def in_area_search_details(self) -> typing.Optional[nds.core.geometry.spatial_extent.SpatialExtent]:
        return self._in_area_search_details_

    @in_area_search_details.setter
    def in_area_search_details(self, in_area_search_details_: typing.Optional[nds.core.geometry.spatial_extent.SpatialExtent]) -> None:
        self._in_area_search_details_ = in_area_search_details_

    def is_in_area_search_details_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.SEARCH_IN_GEO_AREA) == nds.search.services.request_options.RequestOptions.Values.SEARCH_IN_GEO_AREA

    def is_in_area_search_details_set(self) -> bool:
        return not self._in_area_search_details_ is None

    def reset_in_area_search_details(self) -> None:
        self._in_area_search_details_ = None

    @property
    def iso_country_code(self) -> typing.Optional[nds.core.types.iso_country_code.IsoCountryCode]:
        return self._iso_country_code_

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code_: typing.Optional[nds.core.types.iso_country_code.IsoCountryCode]) -> None:
        self._iso_country_code_ = iso_country_code_

    def is_iso_country_code_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.SEARCH_IN_ISO_COUNTRY) == nds.search.services.request_options.RequestOptions.Values.SEARCH_IN_ISO_COUNTRY

    def is_iso_country_code_set(self) -> bool:
        return not self._iso_country_code_ is None

    def reset_iso_country_code(self) -> None:
        self._iso_country_code_ = None

    @property
    def max_response_count(self) -> typing.Optional[int]:
        return self._max_response_count_

    @max_response_count.setter
    def max_response_count(self, max_response_count_: typing.Optional[int]) -> None:
        self._max_response_count_ = max_response_count_

    def is_max_response_count_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.MAX_RESPONSE) == nds.search.services.request_options.RequestOptions.Values.MAX_RESPONSE

    def is_max_response_count_set(self) -> bool:
        return not self._max_response_count_ is None

    def reset_max_response_count(self) -> None:
        self._max_response_count_ = None

    @property
    def order(self) -> typing.Optional[nds.search.types.result_order.ResultOrder]:
        return self._order_

    @order.setter
    def order(self, order_: typing.Optional[nds.search.types.result_order.ResultOrder]) -> None:
        self._order_ = order_

    def is_order_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.RESULT_ORDER) == nds.search.services.request_options.RequestOptions.Values.RESULT_ORDER

    def is_order_set(self) -> bool:
        return not self._order_ is None

    def reset_order(self) -> None:
        self._order_ = None

    @property
    def poi_filter(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._poi_filter_

    @poi_filter.setter
    def poi_filter(self, poi_filter_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._poi_filter_ = poi_filter_

    def is_poi_filter_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.POI_FILTER) == nds.search.services.request_options.RequestOptions.Values.POI_FILTER

    def is_poi_filter_set(self) -> bool:
        return not self._poi_filter_ is None

    def reset_poi_filter(self) -> None:
        self._poi_filter_ = None

    @property
    def address_filter(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._address_filter_

    @address_filter.setter
    def address_filter(self, address_filter_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._address_filter_ = address_filter_

    def is_address_filter_used(self) -> bool:
        return (self._options_ & nds.search.services.request_options.RequestOptions.Values.ADDRESS_FILTER) == nds.search.services.request_options.RequestOptions.Values.ADDRESS_FILTER

    def is_address_filter_set(self) -> bool:
        return not self._address_filter_ is None

    def reset_address_filter(self) -> None:
        self._address_filter_ = None

    def init_packing_context(self, zserio_context: GeneralSearchRequest.ZserioPackingContext) -> None:
        self._options_.init_packing_context(zserio_context.options)
        if self.is_preferred_language_used():
            zserio_context.preferred_language.init(zserio.array.VarUInt16ArrayTraits(), self._preferred_language_)
        if self.is_around_search_details_used():
            self._around_search_details_.init_packing_context(zserio_context.around_search_details)
        if self.is_along_search_details_used():
            self._along_search_details_.init_packing_context(zserio_context.along_search_details)
        if self.is_in_area_search_details_used():
            self._in_area_search_details_.init_packing_context(zserio_context.in_area_search_details)
        if self.is_max_response_count_used():
            zserio_context.max_response_count.init(zserio.array.VarUIntArrayTraits(), self._max_response_count_)
        if self.is_order_used():
            self._order_.init_packing_context(zserio_context.order)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._options_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._term_)
        if self.is_preferred_language_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._preferred_language_)
        if self.is_around_search_details_used():
            end_bitposition += self._around_search_details_.bitsizeof(end_bitposition)
        if self.is_along_search_details_used():
            end_bitposition += self._along_search_details_.bitsizeof(end_bitposition)
        if self.is_in_area_search_details_used():
            end_bitposition += self._in_area_search_details_.bitsizeof(end_bitposition)
        if self.is_iso_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        if self.is_max_response_count_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._max_response_count_)
        if self.is_order_used():
            end_bitposition += self._order_.bitsizeof(end_bitposition)
        if self.is_poi_filter_used():
            end_bitposition += self._poi_filter_.bitsizeof(end_bitposition)
        if self.is_address_filter_used():
            end_bitposition += self._address_filter_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GeneralSearchRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._options_.bitsizeof_packed(zserio_context.options, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._term_)
        if self.is_preferred_language_used():
            end_bitposition += zserio_context.preferred_language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._preferred_language_)
        if self.is_around_search_details_used():
            end_bitposition += self._around_search_details_.bitsizeof_packed(zserio_context.around_search_details, end_bitposition)
        if self.is_along_search_details_used():
            end_bitposition += self._along_search_details_.bitsizeof_packed(zserio_context.along_search_details, end_bitposition)
        if self.is_in_area_search_details_used():
            end_bitposition += self._in_area_search_details_.bitsizeof_packed(zserio_context.in_area_search_details, end_bitposition)
        if self.is_iso_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        if self.is_max_response_count_used():
            end_bitposition += zserio_context.max_response_count.bitsizeof(zserio.array.VarUIntArrayTraits(), self._max_response_count_)
        if self.is_order_used():
            end_bitposition += self._order_.bitsizeof_packed(zserio_context.order, end_bitposition)
        if self.is_poi_filter_used():
            end_bitposition += self._poi_filter_.bitsizeof(end_bitposition)
        if self.is_address_filter_used():
            end_bitposition += self._address_filter_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._options_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._term_)
        if self.is_preferred_language_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._preferred_language_)
        if self.is_around_search_details_used():
            end_bitposition = self._around_search_details_.initialize_offsets(end_bitposition)
        if self.is_along_search_details_used():
            end_bitposition = self._along_search_details_.initialize_offsets(end_bitposition)
        if self.is_in_area_search_details_used():
            end_bitposition = self._in_area_search_details_.initialize_offsets(end_bitposition)
        if self.is_iso_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        if self.is_max_response_count_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._max_response_count_)
        if self.is_order_used():
            end_bitposition = self._order_.initialize_offsets(end_bitposition)
        if self.is_poi_filter_used():
            end_bitposition = self._poi_filter_.initialize_offsets(end_bitposition)
        if self.is_address_filter_used():
            end_bitposition = self._address_filter_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GeneralSearchRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._options_.initialize_offsets_packed(zserio_context.options, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._term_)
        if self.is_preferred_language_used():
            end_bitposition += zserio_context.preferred_language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._preferred_language_)
        if self.is_around_search_details_used():
            end_bitposition = self._around_search_details_.initialize_offsets_packed(zserio_context.around_search_details, end_bitposition)
        if self.is_along_search_details_used():
            end_bitposition = self._along_search_details_.initialize_offsets_packed(zserio_context.along_search_details, end_bitposition)
        if self.is_in_area_search_details_used():
            end_bitposition = self._in_area_search_details_.initialize_offsets_packed(zserio_context.in_area_search_details, end_bitposition)
        if self.is_iso_country_code_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._iso_country_code_)
        if self.is_max_response_count_used():
            end_bitposition += zserio_context.max_response_count.bitsizeof(zserio.array.VarUIntArrayTraits(), self._max_response_count_)
        if self.is_order_used():
            end_bitposition = self._order_.initialize_offsets_packed(zserio_context.order, end_bitposition)
        if self.is_poi_filter_used():
            end_bitposition = self._poi_filter_.initialize_offsets(end_bitposition)
        if self.is_address_filter_used():
            end_bitposition = self._address_filter_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._options_ = nds.search.services.request_options.RequestOptions.from_reader(zserio_reader)
        self._term_ = zserio_reader.read_string()
        if self.is_preferred_language_used():
            self._preferred_language_ = zserio_reader.read_varuint16()
        else:
            self._preferred_language_ = None
        if self.is_around_search_details_used():
            self._around_search_details_ = nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails.from_reader(zserio_reader)
        else:
            self._around_search_details_ = None
        if self.is_along_search_details_used():
            self._along_search_details_ = nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails.from_reader(zserio_reader)
        else:
            self._along_search_details_ = None
        if self.is_in_area_search_details_used():
            self._in_area_search_details_ = nds.core.geometry.spatial_extent.SpatialExtent.from_reader(zserio_reader)
        else:
            self._in_area_search_details_ = None
        if self.is_iso_country_code_used():
            self._iso_country_code_ = zserio_reader.read_string()
        else:
            self._iso_country_code_ = None
        if self.is_max_response_count_used():
            self._max_response_count_ = zserio_reader.read_varuint()
        else:
            self._max_response_count_ = None
        if self.is_order_used():
            self._order_ = nds.search.types.result_order.ResultOrder.from_reader(zserio_reader)
        else:
            self._order_ = None
        if self.is_poi_filter_used():
            self._poi_filter_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._poi_filter_ = None
        if self.is_address_filter_used():
            self._address_filter_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_filter_ = None

    def read_packed(self, zserio_context: GeneralSearchRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._options_ = nds.search.services.request_options.RequestOptions.from_reader_packed(zserio_context.options, zserio_reader)

        self._term_ = zserio_reader.read_string()

        if self.is_preferred_language_used():
            self._preferred_language_ = zserio_context.preferred_language.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._preferred_language_ = None

        if self.is_around_search_details_used():
            self._around_search_details_ = nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails.from_reader_packed(zserio_context.around_search_details, zserio_reader)
        else:
            self._around_search_details_ = None

        if self.is_along_search_details_used():
            self._along_search_details_ = nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails.from_reader_packed(zserio_context.along_search_details, zserio_reader)
        else:
            self._along_search_details_ = None

        if self.is_in_area_search_details_used():
            self._in_area_search_details_ = nds.core.geometry.spatial_extent.SpatialExtent.from_reader_packed(zserio_context.in_area_search_details, zserio_reader)
        else:
            self._in_area_search_details_ = None

        if self.is_iso_country_code_used():
            self._iso_country_code_ = zserio_reader.read_string()
        else:
            self._iso_country_code_ = None

        if self.is_max_response_count_used():
            self._max_response_count_ = zserio_context.max_response_count.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._max_response_count_ = None

        if self.is_order_used():
            self._order_ = nds.search.types.result_order.ResultOrder.from_reader_packed(zserio_context.order, zserio_reader)
        else:
            self._order_ = None

        if self.is_poi_filter_used():
            self._poi_filter_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._poi_filter_ = None

        if self.is_address_filter_used():
            self._address_filter_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_filter_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._options_.write(zserio_writer)
        zserio_writer.write_string(self._term_)
        if self.is_preferred_language_used():
            zserio_writer.write_varuint16(self._preferred_language_)
        if self.is_around_search_details_used():
            self._around_search_details_.write(zserio_writer)
        if self.is_along_search_details_used():
            self._along_search_details_.write(zserio_writer)
        if self.is_in_area_search_details_used():
            self._in_area_search_details_.write(zserio_writer)
        if self.is_iso_country_code_used():
            zserio_writer.write_string(self._iso_country_code_)
        if self.is_max_response_count_used():
            zserio_writer.write_varuint(self._max_response_count_)
        if self.is_order_used():
            self._order_.write(zserio_writer)
        if self.is_poi_filter_used():
            self._poi_filter_.write(zserio_writer)
        if self.is_address_filter_used():
            self._address_filter_.write(zserio_writer)

    def write_packed(self, zserio_context: GeneralSearchRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._options_.write_packed(zserio_context.options, zserio_writer)

        zserio_writer.write_string(self._term_)

        if self.is_preferred_language_used():
            zserio_context.preferred_language.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._preferred_language_)

        if self.is_around_search_details_used():
            self._around_search_details_.write_packed(zserio_context.around_search_details, zserio_writer)

        if self.is_along_search_details_used():
            self._along_search_details_.write_packed(zserio_context.along_search_details, zserio_writer)

        if self.is_in_area_search_details_used():
            self._in_area_search_details_.write_packed(zserio_context.in_area_search_details, zserio_writer)

        if self.is_iso_country_code_used():
            zserio_writer.write_string(self._iso_country_code_)

        if self.is_max_response_count_used():
            zserio_context.max_response_count.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._max_response_count_)

        if self.is_order_used():
            self._order_.write_packed(zserio_context.order, zserio_writer)

        if self.is_poi_filter_used():
            self._poi_filter_.write(zserio_writer)

        if self.is_address_filter_used():
            self._address_filter_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._options_ = zserio.array.DeltaContext()
            self._preferred_language_ = zserio.array.DeltaContext()
            self._around_search_details_ = nds.search.services.around_position_search_request_details.AroundPositionSearchRequestDetails.ZserioPackingContext()
            self._along_search_details_ = nds.search.services.along_path_search_request_details.AlongPathSearchRequestDetails.ZserioPackingContext()
            self._in_area_search_details_ = nds.core.geometry.spatial_extent.SpatialExtent.ZserioPackingContext()
            self._max_response_count_ = zserio.array.DeltaContext()
            self._order_ = zserio.array.DeltaContext()

        @property
        def options(self):
            return self._options_

        @property
        def preferred_language(self):
            return self._preferred_language_

        @property
        def around_search_details(self):
            return self._around_search_details_

        @property
        def along_search_details(self):
            return self._along_search_details_

        @property
        def in_area_search_details(self):
            return self._in_area_search_details_

        @property
        def max_response_count(self):
            return self._max_response_count_

        @property
        def order(self):
            return self._order_
