# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.language.available_languages
import nds.search.services.request_options
import nds.search.services.supported_feature
import nds.search.types.result_order
import nds.system.types.extern_data
import nds.system.types.module_definition

class SupportedSearchConfiguration:
    def __init__(
            self,
            supported_features_: typing.Union[nds.search.services.supported_feature.SupportedFeature, None] = None,
            supported_request_options_: typing.Union[nds.search.services.request_options.RequestOptions, None] = None,
            supported_result_orders_: typing.Optional[nds.search.types.result_order.ResultOrder] = None,
            available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None] = None,
            poi_module_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition] = None,
            poi_search_metadata_: typing.Optional[nds.system.types.extern_data.ExternData] = None,
            name_module_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition] = None,
            address_search_metadata_: typing.Optional[nds.system.types.extern_data.ExternData] = None) -> None:
        self._supported_features_ = supported_features_
        self._supported_request_options_ = supported_request_options_
        self._supported_result_orders_ = supported_result_orders_
        self._available_languages_ = available_languages_
        self._poi_module_definition_ = poi_module_definition_
        self._poi_search_metadata_ = poi_search_metadata_
        self._name_module_definition_ = name_module_definition_
        self._address_search_metadata_ = address_search_metadata_

    @classmethod
    def from_reader(
            cls: typing.Type['SupportedSearchConfiguration'],
            zserio_reader: zserio.BitStreamReader) -> 'SupportedSearchConfiguration':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['SupportedSearchConfiguration'],
            zserio_context: SupportedSearchConfiguration.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'SupportedSearchConfiguration':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SupportedSearchConfiguration):
            return ((self._supported_features_ == other._supported_features_) and
                    (self._supported_request_options_ == other._supported_request_options_) and
                    (not other.is_supported_result_orders_used() if not self.is_supported_result_orders_used() else (self._supported_result_orders_ == other._supported_result_orders_)) and
                    (self._available_languages_ == other._available_languages_) and
                    (not other.is_poi_module_definition_used() if not self.is_poi_module_definition_used() else (self._poi_module_definition_ == other._poi_module_definition_)) and
                    (not other.is_poi_search_metadata_used() if not self.is_poi_search_metadata_used() else (self._poi_search_metadata_ == other._poi_search_metadata_)) and
                    (not other.is_name_module_definition_used() if not self.is_name_module_definition_used() else (self._name_module_definition_ == other._name_module_definition_)) and
                    (not other.is_address_search_metadata_used() if not self.is_address_search_metadata_used() else (self._address_search_metadata_ == other._address_search_metadata_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_features_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_request_options_)
        if self.is_supported_result_orders_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._supported_result_orders_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_languages_)
        if self.is_poi_module_definition_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._poi_module_definition_)
        if self.is_poi_search_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._poi_search_metadata_)
        if self.is_name_module_definition_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._name_module_definition_)
        if self.is_address_search_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._address_search_metadata_)

        return result

    @property
    def supported_features(self) -> typing.Union[nds.search.services.supported_feature.SupportedFeature, None]:
        return self._supported_features_

    @supported_features.setter
    def supported_features(self, supported_features_: typing.Union[nds.search.services.supported_feature.SupportedFeature, None]) -> None:
        self._supported_features_ = supported_features_

    @property
    def supported_request_options(self) -> typing.Union[nds.search.services.request_options.RequestOptions, None]:
        return self._supported_request_options_

    @supported_request_options.setter
    def supported_request_options(self, supported_request_options_: typing.Union[nds.search.services.request_options.RequestOptions, None]) -> None:
        self._supported_request_options_ = supported_request_options_

    @property
    def supported_result_orders(self) -> typing.Optional[nds.search.types.result_order.ResultOrder]:
        return self._supported_result_orders_

    @supported_result_orders.setter
    def supported_result_orders(self, supported_result_orders_: typing.Optional[nds.search.types.result_order.ResultOrder]) -> None:
        self._supported_result_orders_ = supported_result_orders_

    def is_supported_result_orders_used(self) -> bool:
        return (self._supported_request_options_ & nds.search.services.request_options.RequestOptions.Values.RESULT_ORDER) == nds.search.services.request_options.RequestOptions.Values.RESULT_ORDER

    def is_supported_result_orders_set(self) -> bool:
        return not self._supported_result_orders_ is None

    def reset_supported_result_orders(self) -> None:
        self._supported_result_orders_ = None

    @property
    def available_languages(self) -> typing.Union[nds.core.language.available_languages.AvailableLanguages, None]:
        return self._available_languages_

    @available_languages.setter
    def available_languages(self, available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None]) -> None:
        self._available_languages_ = available_languages_

    @property
    def poi_module_definition(self) -> typing.Optional[nds.system.types.module_definition.ModuleDefinition]:
        return self._poi_module_definition_

    @poi_module_definition.setter
    def poi_module_definition(self, poi_module_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition]) -> None:
        self._poi_module_definition_ = poi_module_definition_

    def is_poi_module_definition_used(self) -> bool:
        return (self._supported_features_ & nds.search.services.supported_feature.SupportedFeature.Values.POI) == nds.search.services.supported_feature.SupportedFeature.Values.POI

    def is_poi_module_definition_set(self) -> bool:
        return not self._poi_module_definition_ is None

    def reset_poi_module_definition(self) -> None:
        self._poi_module_definition_ = None

    @property
    def poi_search_metadata(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._poi_search_metadata_

    @poi_search_metadata.setter
    def poi_search_metadata(self, poi_search_metadata_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._poi_search_metadata_ = poi_search_metadata_

    def is_poi_search_metadata_used(self) -> bool:
        return (self._supported_features_ & nds.search.services.supported_feature.SupportedFeature.Values.POI) == nds.search.services.supported_feature.SupportedFeature.Values.POI

    def is_poi_search_metadata_set(self) -> bool:
        return not self._poi_search_metadata_ is None

    def reset_poi_search_metadata(self) -> None:
        self._poi_search_metadata_ = None

    @property
    def name_module_definition(self) -> typing.Optional[nds.system.types.module_definition.ModuleDefinition]:
        return self._name_module_definition_

    @name_module_definition.setter
    def name_module_definition(self, name_module_definition_: typing.Optional[nds.system.types.module_definition.ModuleDefinition]) -> None:
        self._name_module_definition_ = name_module_definition_

    def is_name_module_definition_used(self) -> bool:
        return (self._supported_features_ & nds.search.services.supported_feature.SupportedFeature.Values.ADDRESS) == nds.search.services.supported_feature.SupportedFeature.Values.ADDRESS

    def is_name_module_definition_set(self) -> bool:
        return not self._name_module_definition_ is None

    def reset_name_module_definition(self) -> None:
        self._name_module_definition_ = None

    @property
    def address_search_metadata(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._address_search_metadata_

    @address_search_metadata.setter
    def address_search_metadata(self, address_search_metadata_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._address_search_metadata_ = address_search_metadata_

    def is_address_search_metadata_used(self) -> bool:
        return (self._supported_features_ & nds.search.services.supported_feature.SupportedFeature.Values.ADDRESS) == nds.search.services.supported_feature.SupportedFeature.Values.ADDRESS

    def is_address_search_metadata_set(self) -> bool:
        return not self._address_search_metadata_ is None

    def reset_address_search_metadata(self) -> None:
        self._address_search_metadata_ = None

    def init_packing_context(self, zserio_context: SupportedSearchConfiguration.ZserioPackingContext) -> None:
        self._supported_features_.init_packing_context(zserio_context.supported_features)
        self._supported_request_options_.init_packing_context(zserio_context.supported_request_options)
        if self.is_supported_result_orders_used():
            self._supported_result_orders_.init_packing_context(zserio_context.supported_result_orders)
        self._available_languages_.init_packing_context(zserio_context.available_languages)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._supported_features_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_request_options_.bitsizeof(end_bitposition)
        if self.is_supported_result_orders_used():
            end_bitposition += self._supported_result_orders_.bitsizeof(end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof(end_bitposition)
        if self.is_poi_module_definition_used():
            end_bitposition += self._poi_module_definition_.bitsizeof(end_bitposition)
        if self.is_poi_search_metadata_used():
            end_bitposition += self._poi_search_metadata_.bitsizeof(end_bitposition)
        if self.is_name_module_definition_used():
            end_bitposition += self._name_module_definition_.bitsizeof(end_bitposition)
        if self.is_address_search_metadata_used():
            end_bitposition += self._address_search_metadata_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: SupportedSearchConfiguration.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._supported_features_.bitsizeof_packed(zserio_context.supported_features, end_bitposition)
        end_bitposition += self._supported_request_options_.bitsizeof_packed(zserio_context.supported_request_options, end_bitposition)
        if self.is_supported_result_orders_used():
            end_bitposition += self._supported_result_orders_.bitsizeof_packed(zserio_context.supported_result_orders, end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof_packed(zserio_context.available_languages, end_bitposition)
        if self.is_poi_module_definition_used():
            end_bitposition += self._poi_module_definition_.bitsizeof(end_bitposition)
        if self.is_poi_search_metadata_used():
            end_bitposition += self._poi_search_metadata_.bitsizeof(end_bitposition)
        if self.is_name_module_definition_used():
            end_bitposition += self._name_module_definition_.bitsizeof(end_bitposition)
        if self.is_address_search_metadata_used():
            end_bitposition += self._address_search_metadata_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._supported_features_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_request_options_.initialize_offsets(end_bitposition)
        if self.is_supported_result_orders_used():
            end_bitposition = self._supported_result_orders_.initialize_offsets(end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets(end_bitposition)
        if self.is_poi_module_definition_used():
            end_bitposition = self._poi_module_definition_.initialize_offsets(end_bitposition)
        if self.is_poi_search_metadata_used():
            end_bitposition = self._poi_search_metadata_.initialize_offsets(end_bitposition)
        if self.is_name_module_definition_used():
            end_bitposition = self._name_module_definition_.initialize_offsets(end_bitposition)
        if self.is_address_search_metadata_used():
            end_bitposition = self._address_search_metadata_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: SupportedSearchConfiguration.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._supported_features_.initialize_offsets_packed(zserio_context.supported_features, end_bitposition)
        end_bitposition = self._supported_request_options_.initialize_offsets_packed(zserio_context.supported_request_options, end_bitposition)
        if self.is_supported_result_orders_used():
            end_bitposition = self._supported_result_orders_.initialize_offsets_packed(zserio_context.supported_result_orders, end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets_packed(zserio_context.available_languages, end_bitposition)
        if self.is_poi_module_definition_used():
            end_bitposition = self._poi_module_definition_.initialize_offsets(end_bitposition)
        if self.is_poi_search_metadata_used():
            end_bitposition = self._poi_search_metadata_.initialize_offsets(end_bitposition)
        if self.is_name_module_definition_used():
            end_bitposition = self._name_module_definition_.initialize_offsets(end_bitposition)
        if self.is_address_search_metadata_used():
            end_bitposition = self._address_search_metadata_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._supported_features_ = nds.search.services.supported_feature.SupportedFeature.from_reader(zserio_reader)
        self._supported_request_options_ = nds.search.services.request_options.RequestOptions.from_reader(zserio_reader)
        if self.is_supported_result_orders_used():
            self._supported_result_orders_ = nds.search.types.result_order.ResultOrder.from_reader(zserio_reader)
        else:
            self._supported_result_orders_ = None
        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader(zserio_reader)
        if self.is_poi_module_definition_used():
            self._poi_module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._poi_module_definition_ = None
        if self.is_poi_search_metadata_used():
            self._poi_search_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._poi_search_metadata_ = None
        if self.is_name_module_definition_used():
            self._name_module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._name_module_definition_ = None
        if self.is_address_search_metadata_used():
            self._address_search_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_search_metadata_ = None

    def read_packed(self, zserio_context: SupportedSearchConfiguration.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._supported_features_ = nds.search.services.supported_feature.SupportedFeature.from_reader_packed(zserio_context.supported_features, zserio_reader)

        self._supported_request_options_ = nds.search.services.request_options.RequestOptions.from_reader_packed(zserio_context.supported_request_options, zserio_reader)

        if self.is_supported_result_orders_used():
            self._supported_result_orders_ = nds.search.types.result_order.ResultOrder.from_reader_packed(zserio_context.supported_result_orders, zserio_reader)
        else:
            self._supported_result_orders_ = None

        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader_packed(zserio_context.available_languages, zserio_reader)

        if self.is_poi_module_definition_used():
            self._poi_module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._poi_module_definition_ = None

        if self.is_poi_search_metadata_used():
            self._poi_search_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._poi_search_metadata_ = None

        if self.is_name_module_definition_used():
            self._name_module_definition_ = nds.system.types.module_definition.ModuleDefinition.from_reader(zserio_reader)
        else:
            self._name_module_definition_ = None

        if self.is_address_search_metadata_used():
            self._address_search_metadata_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_search_metadata_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._supported_features_.write(zserio_writer)
        self._supported_request_options_.write(zserio_writer)
        if self.is_supported_result_orders_used():
            self._supported_result_orders_.write(zserio_writer)
        self._available_languages_.write(zserio_writer)
        if self.is_poi_module_definition_used():
            self._poi_module_definition_.write(zserio_writer)
        if self.is_poi_search_metadata_used():
            self._poi_search_metadata_.write(zserio_writer)
        if self.is_name_module_definition_used():
            self._name_module_definition_.write(zserio_writer)
        if self.is_address_search_metadata_used():
            self._address_search_metadata_.write(zserio_writer)

    def write_packed(self, zserio_context: SupportedSearchConfiguration.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._supported_features_.write_packed(zserio_context.supported_features, zserio_writer)

        self._supported_request_options_.write_packed(zserio_context.supported_request_options, zserio_writer)

        if self.is_supported_result_orders_used():
            self._supported_result_orders_.write_packed(zserio_context.supported_result_orders, zserio_writer)

        self._available_languages_.write_packed(zserio_context.available_languages, zserio_writer)

        if self.is_poi_module_definition_used():
            self._poi_module_definition_.write(zserio_writer)

        if self.is_poi_search_metadata_used():
            self._poi_search_metadata_.write(zserio_writer)

        if self.is_name_module_definition_used():
            self._name_module_definition_.write(zserio_writer)

        if self.is_address_search_metadata_used():
            self._address_search_metadata_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._supported_features_ = zserio.array.DeltaContext()
            self._supported_request_options_ = zserio.array.DeltaContext()
            self._supported_result_orders_ = zserio.array.DeltaContext()
            self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.ZserioPackingContext()

        @property
        def supported_features(self):
            return self._supported_features_

        @property
        def supported_request_options(self):
            return self._supported_request_options_

        @property
        def supported_result_orders(self):
            return self._supported_result_orders_

        @property
        def available_languages(self):
            return self._available_languages_
