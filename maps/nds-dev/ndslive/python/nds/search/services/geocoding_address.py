# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.search.services.geocoding_content_type
import nds.system.types.extern_data

class GeocodingAddress:
    def __init__(
            self,
            content_: typing.Union[nds.search.services.geocoding_content_type.GeocodingContentType, None] = None,
            address_string_: typing.Optional[str] = None,
            address_details_: typing.Optional[nds.system.types.extern_data.ExternData] = None) -> None:
        self._content_ = content_
        self._address_string_ = address_string_
        self._address_details_ = address_details_

    @classmethod
    def from_reader(
            cls: typing.Type['GeocodingAddress'],
            zserio_reader: zserio.BitStreamReader) -> 'GeocodingAddress':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GeocodingAddress'],
            zserio_context: GeocodingAddress.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GeocodingAddress':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GeocodingAddress):
            return ((self._content_ == other._content_) and
                    (not other.is_address_string_used() if not self.is_address_string_used() else (self._address_string_ == other._address_string_)) and
                    (not other.is_address_details_used() if not self.is_address_details_used() else (self._address_details_ == other._address_details_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_address_string_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._address_string_)
        if self.is_address_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._address_details_)

        return result

    @property
    def content(self) -> typing.Union[nds.search.services.geocoding_content_type.GeocodingContentType, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.search.services.geocoding_content_type.GeocodingContentType, None]) -> None:
        self._content_ = content_

    @property
    def address_string(self) -> typing.Optional[str]:
        return self._address_string_

    @address_string.setter
    def address_string(self, address_string_: typing.Optional[str]) -> None:
        self._address_string_ = address_string_

    def is_address_string_used(self) -> bool:
        return (self._content_ & nds.search.services.geocoding_content_type.GeocodingContentType.Values.ADDRESS_STRING) == nds.search.services.geocoding_content_type.GeocodingContentType.Values.ADDRESS_STRING

    def is_address_string_set(self) -> bool:
        return not self._address_string_ is None

    def reset_address_string(self) -> None:
        self._address_string_ = None

    @property
    def address_details(self) -> typing.Optional[nds.system.types.extern_data.ExternData]:
        return self._address_details_

    @address_details.setter
    def address_details(self, address_details_: typing.Optional[nds.system.types.extern_data.ExternData]) -> None:
        self._address_details_ = address_details_

    def is_address_details_used(self) -> bool:
        return (self._content_ & nds.search.services.geocoding_content_type.GeocodingContentType.Values.ADDRESS_DETAILS) == nds.search.services.geocoding_content_type.GeocodingContentType.Values.ADDRESS_DETAILS

    def is_address_details_set(self) -> bool:
        return not self._address_details_ is None

    def reset_address_details(self) -> None:
        self._address_details_ = None

    def init_packing_context(self, zserio_context: GeocodingAddress.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_address_string_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._address_string_)
        if self.is_address_details_used():
            end_bitposition += self._address_details_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GeocodingAddress.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_address_string_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._address_string_)
        if self.is_address_details_used():
            end_bitposition += self._address_details_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_address_string_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._address_string_)
        if self.is_address_details_used():
            end_bitposition = self._address_details_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GeocodingAddress.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_address_string_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._address_string_)
        if self.is_address_details_used():
            end_bitposition = self._address_details_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.search.services.geocoding_content_type.GeocodingContentType.from_reader(zserio_reader)
        if self.is_address_string_used():
            self._address_string_ = zserio_reader.read_string()
        else:
            self._address_string_ = None
        if self.is_address_details_used():
            self._address_details_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_details_ = None

    def read_packed(self, zserio_context: GeocodingAddress.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.search.services.geocoding_content_type.GeocodingContentType.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_address_string_used():
            self._address_string_ = zserio_reader.read_string()
        else:
            self._address_string_ = None

        if self.is_address_details_used():
            self._address_details_ = nds.system.types.extern_data.ExternData.from_reader(zserio_reader)
        else:
            self._address_details_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_address_string_used():
            zserio_writer.write_string(self._address_string_)
        if self.is_address_details_used():
            self._address_details_.write(zserio_writer)

    def write_packed(self, zserio_context: GeocodingAddress.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_address_string_used():
            zserio_writer.write_string(self._address_string_)

        if self.is_address_details_used():
            self._address_details_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()

        @property
        def content(self):
            return self._content_
