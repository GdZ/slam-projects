# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_path
import nds.core.types.distance_meters

class AlongPathSearchRequestDetails:
    def __init__(
            self,
            path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None] = None,
            max_travel_distance_: typing.Optional[nds.core.types.distance_meters.DistanceMeters] = None) -> None:
        self._path_ = path_
        self._max_travel_distance_ = max_travel_distance_

    @classmethod
    def from_reader(
            cls: typing.Type['AlongPathSearchRequestDetails'],
            zserio_reader: zserio.BitStreamReader) -> 'AlongPathSearchRequestDetails':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AlongPathSearchRequestDetails'],
            zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'AlongPathSearchRequestDetails':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AlongPathSearchRequestDetails):
            return ((self._path_ == other._path_) and
                    (not other.is_max_travel_distance_used() if not self.is_max_travel_distance_used() else (self._max_travel_distance_ == other._max_travel_distance_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._path_)
        if self.is_max_travel_distance_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._max_travel_distance_)

        return result

    @property
    def path(self) -> typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]:
        return self._path_

    @path.setter
    def path(self, path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]) -> None:
        self._path_ = path_

    @property
    def max_travel_distance(self) -> typing.Optional[nds.core.types.distance_meters.DistanceMeters]:
        return self._max_travel_distance_

    @max_travel_distance.setter
    def max_travel_distance(self, max_travel_distance_: typing.Optional[nds.core.types.distance_meters.DistanceMeters]) -> None:
        self._max_travel_distance_ = max_travel_distance_

    def is_max_travel_distance_used(self) -> bool:
        return self.is_max_travel_distance_set()

    def is_max_travel_distance_set(self) -> bool:
        return not self._max_travel_distance_ is None

    def reset_max_travel_distance(self) -> None:
        self._max_travel_distance_ = None

    def init_packing_context(self, zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext) -> None:
        self._path_.init_packing_context(zserio_context.path)
        if self.is_max_travel_distance_used():
            zserio_context.max_travel_distance.init(zserio.array.VarUInt32ArrayTraits(), self._max_travel_distance_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._path_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_max_travel_distance_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_travel_distance_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._path_.bitsizeof_packed(zserio_context.path, end_bitposition)
        end_bitposition += 1
        if self.is_max_travel_distance_used():
            end_bitposition += zserio_context.max_travel_distance.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_travel_distance_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._path_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_max_travel_distance_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_travel_distance_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._path_.initialize_offsets_packed(zserio_context.path, end_bitposition)
        end_bitposition += 1
        if self.is_max_travel_distance_used():
            end_bitposition += zserio_context.max_travel_distance.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_travel_distance_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._max_travel_distance_ = zserio_reader.read_varuint32()
        else:
            self._max_travel_distance_ = None

    def read_packed(self, zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader_packed(zserio_context.path, zserio_reader)

        if zserio_reader.read_bool():
            self._max_travel_distance_ = zserio_context.max_travel_distance.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._max_travel_distance_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._path_.write(zserio_writer)
        if self.is_max_travel_distance_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._max_travel_distance_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: AlongPathSearchRequestDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._path_.write_packed(zserio_context.path, zserio_writer)

        if self.is_max_travel_distance_used():
            zserio_writer.write_bool(True)
            zserio_context.max_travel_distance.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._max_travel_distance_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._path_ = nds.core.location.road_location_path.RoadLocationPath.ZserioPackingContext()
            self._max_travel_distance_ = zserio.array.DeltaContext()

        @property
        def path(self):
            return self._path_

        @property
        def max_travel_distance(self):
            return self._max_travel_distance_
