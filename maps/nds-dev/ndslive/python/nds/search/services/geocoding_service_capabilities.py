# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.search.services.geocoding_service_methods

class GeocodingServiceCapabilities:
    def __init__(
            self,
            implemented_methods_: typing.Union[nds.search.services.geocoding_service_methods.GeocodingServiceMethods, None] = None) -> None:
        self._implemented_methods_ = implemented_methods_

    @classmethod
    def from_reader(
            cls: typing.Type['GeocodingServiceCapabilities'],
            zserio_reader: zserio.BitStreamReader) -> 'GeocodingServiceCapabilities':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GeocodingServiceCapabilities'],
            zserio_context: GeocodingServiceCapabilities.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GeocodingServiceCapabilities':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GeocodingServiceCapabilities):
            return (self._implemented_methods_ == other._implemented_methods_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._implemented_methods_)

        return result

    @property
    def implemented_methods(self) -> typing.Union[nds.search.services.geocoding_service_methods.GeocodingServiceMethods, None]:
        return self._implemented_methods_

    @implemented_methods.setter
    def implemented_methods(self, implemented_methods_: typing.Union[nds.search.services.geocoding_service_methods.GeocodingServiceMethods, None]) -> None:
        self._implemented_methods_ = implemented_methods_

    def init_packing_context(self, zserio_context: GeocodingServiceCapabilities.ZserioPackingContext) -> None:
        self._implemented_methods_.init_packing_context(zserio_context.implemented_methods)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._implemented_methods_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GeocodingServiceCapabilities.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._implemented_methods_.bitsizeof_packed(zserio_context.implemented_methods, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._implemented_methods_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GeocodingServiceCapabilities.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._implemented_methods_.initialize_offsets_packed(zserio_context.implemented_methods, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._implemented_methods_ = nds.search.services.geocoding_service_methods.GeocodingServiceMethods.from_reader(zserio_reader)

    def read_packed(self, zserio_context: GeocodingServiceCapabilities.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._implemented_methods_ = nds.search.services.geocoding_service_methods.GeocodingServiceMethods.from_reader_packed(zserio_context.implemented_methods, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._implemented_methods_.write(zserio_writer)

    def write_packed(self, zserio_context: GeocodingServiceCapabilities.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._implemented_methods_.write_packed(zserio_context.implemented_methods, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._implemented_methods_ = zserio.array.DeltaContext()

        @property
        def implemented_methods(self):
            return self._implemented_methods_
