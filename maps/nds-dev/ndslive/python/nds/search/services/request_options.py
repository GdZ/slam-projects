# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RequestOptions:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['RequestOptions'], value: int) -> 'RequestOptions':
        if value < 0 or value > 32767:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'RequestOptions' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['RequestOptions'], reader: zserio.BitStreamReader) -> 'RequestOptions':
        instance = cls()
        instance._value = reader.read_varuint16()
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['RequestOptions'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RequestOptions':
        instance = cls()
        instance._value = delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RequestOptions):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & RequestOptions.Values.PREFERRED_LANGUAGE) == RequestOptions.Values.PREFERRED_LANGUAGE:
            result += "PREFERRED_LANGUAGE" if not result else " | PREFERRED_LANGUAGE"
        if (self & RequestOptions.Values.SEARCH_AROUND) == RequestOptions.Values.SEARCH_AROUND:
            result += "SEARCH_AROUND" if not result else " | SEARCH_AROUND"
        if (self & RequestOptions.Values.SEARCH_ALONG) == RequestOptions.Values.SEARCH_ALONG:
            result += "SEARCH_ALONG" if not result else " | SEARCH_ALONG"
        if (self & RequestOptions.Values.SEARCH_IN_GEO_AREA) == RequestOptions.Values.SEARCH_IN_GEO_AREA:
            result += "SEARCH_IN_GEO_AREA" if not result else " | SEARCH_IN_GEO_AREA"
        if (self & RequestOptions.Values.SEARCH_IN_ISO_COUNTRY) == RequestOptions.Values.SEARCH_IN_ISO_COUNTRY:
            result += "SEARCH_IN_ISO_COUNTRY" if not result else " | SEARCH_IN_ISO_COUNTRY"
        if (self & RequestOptions.Values.MAX_RESPONSE) == RequestOptions.Values.MAX_RESPONSE:
            result += "MAX_RESPONSE" if not result else " | MAX_RESPONSE"
        if (self & RequestOptions.Values.RESULT_ORDER) == RequestOptions.Values.RESULT_ORDER:
            result += "RESULT_ORDER" if not result else " | RESULT_ORDER"
        if (self & RequestOptions.Values.POI_FILTER) == RequestOptions.Values.POI_FILTER:
            result += "POI_FILTER" if not result else " | POI_FILTER"
        if (self & RequestOptions.Values.ADDRESS_FILTER) == RequestOptions.Values.ADDRESS_FILTER:
            result += "ADDRESS_FILTER" if not result else " | ADDRESS_FILTER"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'RequestOptions') -> 'RequestOptions':
        return RequestOptions.from_value(self._value | other._value)

    def __and__(self, other: 'RequestOptions') -> 'RequestOptions':
        return RequestOptions.from_value(self._value & other._value)

    def __xor__(self, other: 'RequestOptions') -> 'RequestOptions':
        return RequestOptions.from_value(self._value ^ other._value)

    def __invert__(self) -> 'RequestOptions':
        return RequestOptions.from_value(~self._value & 32767)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self._value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self._value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        PREFERRED_LANGUAGE: 'RequestOptions' = None
        SEARCH_AROUND: 'RequestOptions' = None
        SEARCH_ALONG: 'RequestOptions' = None
        SEARCH_IN_GEO_AREA: 'RequestOptions' = None
        SEARCH_IN_ISO_COUNTRY: 'RequestOptions' = None
        MAX_RESPONSE: 'RequestOptions' = None
        RESULT_ORDER: 'RequestOptions' = None
        POI_FILTER: 'RequestOptions' = None
        ADDRESS_FILTER: 'RequestOptions' = None

RequestOptions.Values.PREFERRED_LANGUAGE = RequestOptions.from_value(1)
RequestOptions.Values.SEARCH_AROUND = RequestOptions.from_value(2)
RequestOptions.Values.SEARCH_ALONG = RequestOptions.from_value(4)
RequestOptions.Values.SEARCH_IN_GEO_AREA = RequestOptions.from_value(8)
RequestOptions.Values.SEARCH_IN_ISO_COUNTRY = RequestOptions.from_value(16)
RequestOptions.Values.MAX_RESPONSE = RequestOptions.from_value(32)
RequestOptions.Values.RESULT_ORDER = RequestOptions.from_value(64)
RequestOptions.Values.POI_FILTER = RequestOptions.from_value(128)
RequestOptions.Values.ADDRESS_FILTER = RequestOptions.from_value(256)
