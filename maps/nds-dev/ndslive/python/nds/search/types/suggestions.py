# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Suggestions:
    def __init__(
            self,
            suggestion_: typing.List[str] = None) -> None:
        self._suggestion_ = zserio.array.Array(zserio.array.StringArrayTraits(), suggestion_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Suggestions'],
            zserio_reader: zserio.BitStreamReader) -> 'Suggestions':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Suggestions):
            return (self._suggestion_ == other._suggestion_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._suggestion_)

        return result

    @property
    def suggestion(self) -> typing.List[str]:
        return self._suggestion_.raw_array

    @suggestion.setter
    def suggestion(self, suggestion_: typing.List[str]) -> None:
        self._suggestion_ = zserio.array.Array(zserio.array.StringArrayTraits(), suggestion_, is_auto=True)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._suggestion_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._suggestion_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._suggestion_ = zserio.array.Array.from_reader(zserio.array.StringArrayTraits(), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._suggestion_.write(zserio_writer)
