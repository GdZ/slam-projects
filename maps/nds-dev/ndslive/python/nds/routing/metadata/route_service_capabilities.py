# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.language_code
import nds.routing.metadata.route_service_methods
import nds.routing.metadata.supported_driver_profile_details
import nds.routing.metadata.supported_vehicle_details
import nds.routing.route.route_options
import nds.routing.types.route_type

class RouteServiceCapabilities:
    def __init__(
            self,
            implemented_methods_: typing.Union[nds.routing.metadata.route_service_methods.RouteServiceMethods, None] = None,
            supported_route_types_: typing.List[nds.routing.types.route_type.RouteType] = None,
            supported_route_options_: typing.List[nds.routing.route.route_options.RouteOptions] = None,
            supported_languages_: typing.List[nds.core.types.language_code.LanguageCode] = None,
            supported_vehicle_details_: typing.Union[nds.routing.metadata.supported_vehicle_details.SupportedVehicleDetails, None] = None,
            supported_driver_profile_details_: typing.Union[nds.routing.metadata.supported_driver_profile_details.SupportedDriverProfileDetails, None] = None,
            provides_alternative_routes_: bool = bool(),
            considers_times_: bool = bool(),
            uses_custom_data_: bool = bool(),
            custom_data_metadata_: typing.Optional[zserio.bitbuffer.BitBuffer] = None) -> None:
        self._implemented_methods_ = implemented_methods_
        self._supported_route_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_types()), supported_route_types_, is_auto=True)
        self._supported_route_options_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_options()), supported_route_options_, is_auto=True)
        self._supported_languages_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), supported_languages_, is_auto=True)
        self._supported_vehicle_details_ = supported_vehicle_details_
        self._supported_driver_profile_details_ = supported_driver_profile_details_
        self._provides_alternative_routes_ = provides_alternative_routes_
        self._considers_times_ = considers_times_
        self._uses_custom_data_ = uses_custom_data_
        self._custom_data_metadata_ = custom_data_metadata_

    @classmethod
    def from_reader(
            cls: typing.Type['RouteServiceCapabilities'],
            zserio_reader: zserio.BitStreamReader) -> 'RouteServiceCapabilities':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RouteServiceCapabilities'],
            zserio_context: RouteServiceCapabilities.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RouteServiceCapabilities':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RouteServiceCapabilities):
            return ((self._implemented_methods_ == other._implemented_methods_) and
                    (self._supported_route_types_ == other._supported_route_types_) and
                    (self._supported_route_options_ == other._supported_route_options_) and
                    (self._supported_languages_ == other._supported_languages_) and
                    (self._supported_vehicle_details_ == other._supported_vehicle_details_) and
                    (self._supported_driver_profile_details_ == other._supported_driver_profile_details_) and
                    (self._provides_alternative_routes_ == other._provides_alternative_routes_) and
                    (self._considers_times_ == other._considers_times_) and
                    (self._uses_custom_data_ == other._uses_custom_data_) and
                    (not other.is_custom_data_metadata_used() if not self.is_custom_data_metadata_used() else (self._custom_data_metadata_ == other._custom_data_metadata_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._implemented_methods_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_route_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_route_options_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_languages_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_vehicle_details_)
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_driver_profile_details_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._provides_alternative_routes_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._considers_times_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._uses_custom_data_)
        if self.is_custom_data_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._custom_data_metadata_)

        return result

    @property
    def implemented_methods(self) -> typing.Union[nds.routing.metadata.route_service_methods.RouteServiceMethods, None]:
        return self._implemented_methods_

    @implemented_methods.setter
    def implemented_methods(self, implemented_methods_: typing.Union[nds.routing.metadata.route_service_methods.RouteServiceMethods, None]) -> None:
        self._implemented_methods_ = implemented_methods_

    @property
    def supported_route_types(self) -> typing.List[nds.routing.types.route_type.RouteType]:
        return self._supported_route_types_.raw_array

    @supported_route_types.setter
    def supported_route_types(self, supported_route_types_: typing.List[nds.routing.types.route_type.RouteType]) -> None:
        self._supported_route_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_types()), supported_route_types_, is_auto=True)

    @property
    def supported_route_options(self) -> typing.List[nds.routing.route.route_options.RouteOptions]:
        return self._supported_route_options_.raw_array

    @supported_route_options.setter
    def supported_route_options(self, supported_route_options_: typing.List[nds.routing.route.route_options.RouteOptions]) -> None:
        self._supported_route_options_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_options()), supported_route_options_, is_auto=True)

    @property
    def supported_languages(self) -> typing.List[nds.core.types.language_code.LanguageCode]:
        return self._supported_languages_.raw_array

    @supported_languages.setter
    def supported_languages(self, supported_languages_: typing.List[nds.core.types.language_code.LanguageCode]) -> None:
        self._supported_languages_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), supported_languages_, is_auto=True)

    @property
    def supported_vehicle_details(self) -> typing.Union[nds.routing.metadata.supported_vehicle_details.SupportedVehicleDetails, None]:
        return self._supported_vehicle_details_

    @supported_vehicle_details.setter
    def supported_vehicle_details(self, supported_vehicle_details_: typing.Union[nds.routing.metadata.supported_vehicle_details.SupportedVehicleDetails, None]) -> None:
        self._supported_vehicle_details_ = supported_vehicle_details_

    @property
    def supported_driver_profile_details(self) -> typing.Union[nds.routing.metadata.supported_driver_profile_details.SupportedDriverProfileDetails, None]:
        return self._supported_driver_profile_details_

    @supported_driver_profile_details.setter
    def supported_driver_profile_details(self, supported_driver_profile_details_: typing.Union[nds.routing.metadata.supported_driver_profile_details.SupportedDriverProfileDetails, None]) -> None:
        self._supported_driver_profile_details_ = supported_driver_profile_details_

    @property
    def provides_alternative_routes(self) -> bool:
        return self._provides_alternative_routes_

    @provides_alternative_routes.setter
    def provides_alternative_routes(self, provides_alternative_routes_: bool) -> None:
        self._provides_alternative_routes_ = provides_alternative_routes_

    @property
    def considers_times(self) -> bool:
        return self._considers_times_

    @considers_times.setter
    def considers_times(self, considers_times_: bool) -> None:
        self._considers_times_ = considers_times_

    @property
    def uses_custom_data(self) -> bool:
        return self._uses_custom_data_

    @uses_custom_data.setter
    def uses_custom_data(self, uses_custom_data_: bool) -> None:
        self._uses_custom_data_ = uses_custom_data_

    @property
    def custom_data_metadata(self) -> typing.Optional[zserio.bitbuffer.BitBuffer]:
        return self._custom_data_metadata_

    @custom_data_metadata.setter
    def custom_data_metadata(self, custom_data_metadata_: typing.Optional[zserio.bitbuffer.BitBuffer]) -> None:
        self._custom_data_metadata_ = custom_data_metadata_

    def is_custom_data_metadata_used(self) -> bool:
        return self._uses_custom_data_

    def is_custom_data_metadata_set(self) -> bool:
        return not self._custom_data_metadata_ is None

    def reset_custom_data_metadata(self) -> None:
        self._custom_data_metadata_ = None

    def init_packing_context(self, zserio_context: RouteServiceCapabilities.ZserioPackingContext) -> None:
        self._implemented_methods_.init_packing_context(zserio_context.implemented_methods)
        self._supported_vehicle_details_.init_packing_context(zserio_context.supported_vehicle_details)
        self._supported_driver_profile_details_.init_packing_context(zserio_context.supported_driver_profile_details)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._implemented_methods_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_route_types_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_route_options_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_languages_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_vehicle_details_.bitsizeof(end_bitposition)
        end_bitposition += self._supported_driver_profile_details_.bitsizeof(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_custom_data_metadata_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_data_metadata_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RouteServiceCapabilities.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._implemented_methods_.bitsizeof_packed(zserio_context.implemented_methods, end_bitposition)
        end_bitposition += self._supported_route_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._supported_route_options_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._supported_languages_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._supported_vehicle_details_.bitsizeof_packed(zserio_context.supported_vehicle_details, end_bitposition)
        end_bitposition += self._supported_driver_profile_details_.bitsizeof_packed(zserio_context.supported_driver_profile_details, end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_custom_data_metadata_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_data_metadata_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._implemented_methods_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_route_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_route_options_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_languages_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_vehicle_details_.initialize_offsets(end_bitposition)
        end_bitposition = self._supported_driver_profile_details_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_custom_data_metadata_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_data_metadata_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RouteServiceCapabilities.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._implemented_methods_.initialize_offsets_packed(zserio_context.implemented_methods, end_bitposition)
        end_bitposition = self._supported_route_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._supported_route_options_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._supported_languages_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._supported_vehicle_details_.initialize_offsets_packed(zserio_context.supported_vehicle_details, end_bitposition)
        end_bitposition = self._supported_driver_profile_details_.initialize_offsets_packed(zserio_context.supported_driver_profile_details, end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_custom_data_metadata_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_data_metadata_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._implemented_methods_ = nds.routing.metadata.route_service_methods.RouteServiceMethods.from_reader(zserio_reader)
        self._supported_route_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_types()), zserio_reader, is_auto=True)
        self._supported_route_options_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_options()), zserio_reader, is_auto=True)
        self._supported_languages_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, is_auto=True)
        self._supported_vehicle_details_ = nds.routing.metadata.supported_vehicle_details.SupportedVehicleDetails.from_reader(zserio_reader)
        self._supported_driver_profile_details_ = nds.routing.metadata.supported_driver_profile_details.SupportedDriverProfileDetails.from_reader(zserio_reader)
        self._provides_alternative_routes_ = zserio_reader.read_bool()
        self._considers_times_ = zserio_reader.read_bool()
        self._uses_custom_data_ = zserio_reader.read_bool()
        if self.is_custom_data_metadata_used():
            self._custom_data_metadata_ = zserio_reader.read_bitbuffer()
        else:
            self._custom_data_metadata_ = None

    def read_packed(self, zserio_context: RouteServiceCapabilities.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._implemented_methods_ = nds.routing.metadata.route_service_methods.RouteServiceMethods.from_reader_packed(zserio_context.implemented_methods, zserio_reader)

        self._supported_route_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_types()), zserio_reader, is_auto=True)

        self._supported_route_options_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_route_options()), zserio_reader, is_auto=True)

        self._supported_languages_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, is_auto=True)

        self._supported_vehicle_details_ = nds.routing.metadata.supported_vehicle_details.SupportedVehicleDetails.from_reader_packed(zserio_context.supported_vehicle_details, zserio_reader)

        self._supported_driver_profile_details_ = nds.routing.metadata.supported_driver_profile_details.SupportedDriverProfileDetails.from_reader_packed(zserio_context.supported_driver_profile_details, zserio_reader)

        self._provides_alternative_routes_ = zserio_reader.read_bool()

        self._considers_times_ = zserio_reader.read_bool()

        self._uses_custom_data_ = zserio_reader.read_bool()

        if self.is_custom_data_metadata_used():
            self._custom_data_metadata_ = zserio_reader.read_bitbuffer()
        else:
            self._custom_data_metadata_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._implemented_methods_.write(zserio_writer)
        self._supported_route_types_.write(zserio_writer)
        self._supported_route_options_.write(zserio_writer)
        self._supported_languages_.write(zserio_writer)
        self._supported_vehicle_details_.write(zserio_writer)
        self._supported_driver_profile_details_.write(zserio_writer)
        zserio_writer.write_bool(self._provides_alternative_routes_)
        zserio_writer.write_bool(self._considers_times_)
        zserio_writer.write_bool(self._uses_custom_data_)
        if self.is_custom_data_metadata_used():
            zserio_writer.write_bitbuffer(self._custom_data_metadata_)

    def write_packed(self, zserio_context: RouteServiceCapabilities.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._implemented_methods_.write_packed(zserio_context.implemented_methods, zserio_writer)

        self._supported_route_types_.write_packed(zserio_writer)

        self._supported_route_options_.write_packed(zserio_writer)

        self._supported_languages_.write_packed(zserio_writer)

        self._supported_vehicle_details_.write_packed(zserio_context.supported_vehicle_details, zserio_writer)

        self._supported_driver_profile_details_.write_packed(zserio_context.supported_driver_profile_details, zserio_writer)

        zserio_writer.write_bool(self._provides_alternative_routes_)

        zserio_writer.write_bool(self._considers_times_)

        zserio_writer.write_bool(self._uses_custom_data_)

        if self.is_custom_data_metadata_used():
            zserio_writer.write_bitbuffer(self._custom_data_metadata_)

    class ZserioPackingContext:
        def __init__(self):
            self._implemented_methods_ = zserio.array.DeltaContext()
            self._supported_vehicle_details_ = zserio.array.DeltaContext()
            self._supported_driver_profile_details_ = zserio.array.DeltaContext()

        @property
        def implemented_methods(self):
            return self._implemented_methods_

        @property
        def supported_vehicle_details(self):
            return self._supported_vehicle_details_

        @property
        def supported_driver_profile_details(self):
            return self._supported_driver_profile_details_

    class _ZserioElementFactory_supported_route_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.types.route_type.RouteType:
            del zserio_index
            return nds.routing.types.route_type.RouteType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.types.route_type.RouteType:
            del zserio_index
            return nds.routing.types.route_type.RouteType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_supported_route_options:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_options.RouteOptions:
            del zserio_index
            return nds.routing.route.route_options.RouteOptions.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route_options.RouteOptions.ZserioPackingContext:
            return nds.routing.route.route_options.RouteOptions.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route_options.RouteOptions.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_options.RouteOptions:
            del zserio_index
            return nds.routing.route.route_options.RouteOptions.from_reader_packed(zserio_context, zserio_reader)
