# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.speech.phonetic_transcription_list
import nds.core.types.language_code
import nds.routing.guidance.guidance_name_string_relation_list

class GuidanceNameString:
    def __init__(
            self,
            num_names_: int,
            language_: nds.core.types.language_code.LanguageCode = nds.core.types.language_code.LanguageCode(),
            name_: str = str(),
            relations_: typing.Optional[nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList] = None,
            phonetic_transcriptions_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList] = None) -> None:
        self._num_names_ = num_names_
        self._language_ = language_
        self._name_ = name_
        self._relations_ = relations_
        self._phonetic_transcriptions_ = phonetic_transcriptions_

    @classmethod
    def from_reader(
            cls: typing.Type['GuidanceNameString'],
            zserio_reader: zserio.BitStreamReader,
            num_names_: int) -> 'GuidanceNameString':
        self = object.__new__(cls)
        self._num_names_ = num_names_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GuidanceNameString'],
            zserio_context: GuidanceNameString.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_names_: int) -> 'GuidanceNameString':
        self = object.__new__(cls)
        self._num_names_ = num_names_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GuidanceNameString):
            return (self._num_names_ == other._num_names_ and
                    (self._language_ == other._language_) and
                    (self._name_ == other._name_) and
                    (not other.is_relations_used() if not self.is_relations_used() else (self._relations_ == other._relations_)) and
                    (not other.is_phonetic_transcriptions_used() if not self.is_phonetic_transcriptions_used() else (self._phonetic_transcriptions_ == other._phonetic_transcriptions_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_names_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._language_)
        result = zserio.hashcode.calc_hashcode_string(result, self._name_)
        if self.is_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._relations_)
        if self.is_phonetic_transcriptions_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._phonetic_transcriptions_)

        return result

    @property
    def num_names(self) -> int:
        return self._num_names_

    @property
    def language(self) -> nds.core.types.language_code.LanguageCode:
        return self._language_

    @language.setter
    def language(self, language_: nds.core.types.language_code.LanguageCode) -> None:
        self._language_ = language_

    @property
    def name(self) -> str:
        return self._name_

    @name.setter
    def name(self, name_: str) -> None:
        self._name_ = name_

    @property
    def relations(self) -> typing.Optional[nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList]:
        return self._relations_

    @relations.setter
    def relations(self, relations_: typing.Optional[nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList]) -> None:
        self._relations_ = relations_

    def is_relations_used(self) -> bool:
        return self.is_relations_set()

    def is_relations_set(self) -> bool:
        return not self._relations_ is None

    def reset_relations(self) -> None:
        self._relations_ = None

    @property
    def phonetic_transcriptions(self) -> typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]:
        return self._phonetic_transcriptions_

    @phonetic_transcriptions.setter
    def phonetic_transcriptions(self, phonetic_transcriptions_: typing.Optional[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList]) -> None:
        self._phonetic_transcriptions_ = phonetic_transcriptions_

    def is_phonetic_transcriptions_used(self) -> bool:
        return self.is_phonetic_transcriptions_set()

    def is_phonetic_transcriptions_set(self) -> bool:
        return not self._phonetic_transcriptions_ is None

    def reset_phonetic_transcriptions(self) -> None:
        self._phonetic_transcriptions_ = None

    def init_packing_context(self, zserio_context: GuidanceNameString.ZserioPackingContext) -> None:
        zserio_context.language.init(zserio.array.VarUInt16ArrayTraits(), self._language_)
        if self.is_relations_used():
            self._relations_.init_packing_context(zserio_context.relations)
        if self.is_phonetic_transcriptions_used():
            self._phonetic_transcriptions_.init_packing_context(zserio_context.phonetic_transcriptions)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_relations_used():
            end_bitposition += self._relations_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_phonetic_transcriptions_used():
            end_bitposition += self._phonetic_transcriptions_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GuidanceNameString.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_relations_used():
            end_bitposition += self._relations_.bitsizeof_packed(zserio_context.relations, end_bitposition)
        end_bitposition += 1
        if self.is_phonetic_transcriptions_used():
            end_bitposition += self._phonetic_transcriptions_.bitsizeof_packed(zserio_context.phonetic_transcriptions, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_relations_used():
            end_bitposition = self._relations_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_phonetic_transcriptions_used():
            end_bitposition = self._phonetic_transcriptions_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GuidanceNameString.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._name_)
        end_bitposition += 1
        if self.is_relations_used():
            end_bitposition = self._relations_.initialize_offsets_packed(zserio_context.relations, end_bitposition)
        end_bitposition += 1
        if self.is_phonetic_transcriptions_used():
            end_bitposition = self._phonetic_transcriptions_.initialize_offsets_packed(zserio_context.phonetic_transcriptions, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._language_ = zserio_reader.read_varuint16()
        self._name_ = zserio_reader.read_string()
        if zserio_reader.read_bool():
            self._relations_ = nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList.from_reader(zserio_reader, self._num_names_)
        else:
            self._relations_ = None
        if zserio_reader.read_bool():
            self._phonetic_transcriptions_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)
        else:
            self._phonetic_transcriptions_ = None

    def read_packed(self, zserio_context: GuidanceNameString.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._language_ = zserio_context.language.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._name_ = zserio_reader.read_string()

        if zserio_reader.read_bool():
            self._relations_ = nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList.from_reader_packed(zserio_context.relations, zserio_reader, self._num_names_)
        else:
            self._relations_ = None

        if zserio_reader.read_bool():
            self._phonetic_transcriptions_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context.phonetic_transcriptions, zserio_reader)
        else:
            self._phonetic_transcriptions_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._language_)

        zserio_writer.write_string(self._name_)

        if self.is_relations_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._relations_.num_names != (self._num_names_):
                raise zserio.PythonRuntimeException("Wrong parameter numNames for field GuidanceNameString.relations: "
                                                    f"{self._relations_.num_names} != {self._num_names_}!")
            self._relations_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_phonetic_transcriptions_used():
            zserio_writer.write_bool(True)
            self._phonetic_transcriptions_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: GuidanceNameString.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.language.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._language_)

        zserio_writer.write_string(self._name_)

        if self.is_relations_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._relations_.num_names != (self._num_names_):
                raise zserio.PythonRuntimeException("Wrong parameter numNames for field GuidanceNameString.relations: "
                                                    f"{self._relations_.num_names} != {self._num_names_}!")
            self._relations_.write_packed(zserio_context.relations, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_phonetic_transcriptions_used():
            zserio_writer.write_bool(True)
            self._phonetic_transcriptions_.write_packed(zserio_context.phonetic_transcriptions, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._language_ = zserio.array.DeltaContext()
            self._relations_ = nds.routing.guidance.guidance_name_string_relation_list.GuidanceNameStringRelationList.ZserioPackingContext()
            self._phonetic_transcriptions_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @property
        def language(self):
            return self._language_

        @property
        def relations(self):
            return self._relations_

        @property
        def phonetic_transcriptions(self):
            return self._phonetic_transcriptions_
