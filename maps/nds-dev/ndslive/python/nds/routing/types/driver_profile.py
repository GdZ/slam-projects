# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d

class DriverProfile:
    def __init__(
            self,
            aggressiveness_: typing.Optional[int] = None,
            is_disabled_person_: typing.Optional[bool] = None,
            home_address_: typing.Optional[nds.core.geometry.position2d.Position2D] = None,
            work_address_: typing.Optional[nds.core.geometry.position2d.Position2D] = None) -> None:
        self._aggressiveness_ = aggressiveness_
        self._is_disabled_person_ = is_disabled_person_
        self._home_address_ = home_address_
        self._work_address_ = work_address_

    @classmethod
    def from_reader(
            cls: typing.Type['DriverProfile'],
            zserio_reader: zserio.BitStreamReader) -> 'DriverProfile':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DriverProfile'],
            zserio_context: DriverProfile.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DriverProfile':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DriverProfile):
            return ((not other.is_aggressiveness_used() if not self.is_aggressiveness_used() else (self._aggressiveness_ == other._aggressiveness_)) and
                    (not other.is_is_disabled_person_used() if not self.is_is_disabled_person_used() else (self._is_disabled_person_ == other._is_disabled_person_)) and
                    (not other.is_home_address_used() if not self.is_home_address_used() else (self._home_address_ == other._home_address_)) and
                    (not other.is_work_address_used() if not self.is_work_address_used() else (self._work_address_ == other._work_address_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        if self.is_aggressiveness_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._aggressiveness_)
        if self.is_is_disabled_person_used():
            result = zserio.hashcode.calc_hashcode_bool(result, self._is_disabled_person_)
        if self.is_home_address_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._home_address_)
        if self.is_work_address_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._work_address_)

        return result

    @property
    def aggressiveness(self) -> typing.Optional[int]:
        return self._aggressiveness_

    @aggressiveness.setter
    def aggressiveness(self, aggressiveness_: typing.Optional[int]) -> None:
        self._aggressiveness_ = aggressiveness_

    def is_aggressiveness_used(self) -> bool:
        return self.is_aggressiveness_set()

    def is_aggressiveness_set(self) -> bool:
        return not self._aggressiveness_ is None

    def reset_aggressiveness(self) -> None:
        self._aggressiveness_ = None

    @property
    def is_disabled_person(self) -> typing.Optional[bool]:
        return self._is_disabled_person_

    @is_disabled_person.setter
    def is_disabled_person(self, is_disabled_person_: typing.Optional[bool]) -> None:
        self._is_disabled_person_ = is_disabled_person_

    def is_is_disabled_person_used(self) -> bool:
        return self.is_is_disabled_person_set()

    def is_is_disabled_person_set(self) -> bool:
        return not self._is_disabled_person_ is None

    def reset_is_disabled_person(self) -> None:
        self._is_disabled_person_ = None

    @property
    def home_address(self) -> typing.Optional[nds.core.geometry.position2d.Position2D]:
        return self._home_address_

    @home_address.setter
    def home_address(self, home_address_: typing.Optional[nds.core.geometry.position2d.Position2D]) -> None:
        self._home_address_ = home_address_

    def is_home_address_used(self) -> bool:
        return self.is_home_address_set()

    def is_home_address_set(self) -> bool:
        return not self._home_address_ is None

    def reset_home_address(self) -> None:
        self._home_address_ = None

    @property
    def work_address(self) -> typing.Optional[nds.core.geometry.position2d.Position2D]:
        return self._work_address_

    @work_address.setter
    def work_address(self, work_address_: typing.Optional[nds.core.geometry.position2d.Position2D]) -> None:
        self._work_address_ = work_address_

    def is_work_address_used(self) -> bool:
        return self.is_work_address_set()

    def is_work_address_set(self) -> bool:
        return not self._work_address_ is None

    def reset_work_address(self) -> None:
        self._work_address_ = None

    def init_packing_context(self, zserio_context: DriverProfile.ZserioPackingContext) -> None:
        if self.is_aggressiveness_used():
            zserio_context.aggressiveness.init(zserio.array.BitFieldArrayTraits(8), self._aggressiveness_)
        if self.is_home_address_used():
            self._home_address_.init_packing_context(zserio_context.home_address)
        if self.is_work_address_used():
            self._work_address_.init_packing_context(zserio_context.work_address)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_aggressiveness_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_is_disabled_person_used():
            end_bitposition += 1
        end_bitposition += 1
        if self.is_home_address_used():
            end_bitposition += self._home_address_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_work_address_used():
            end_bitposition += self._work_address_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DriverProfile.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_aggressiveness_used():
            end_bitposition += zserio_context.aggressiveness.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._aggressiveness_)
        end_bitposition += 1
        if self.is_is_disabled_person_used():
            end_bitposition += 1
        end_bitposition += 1
        if self.is_home_address_used():
            end_bitposition += self._home_address_.bitsizeof_packed(zserio_context.home_address, end_bitposition)
        end_bitposition += 1
        if self.is_work_address_used():
            end_bitposition += self._work_address_.bitsizeof_packed(zserio_context.work_address, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_aggressiveness_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_is_disabled_person_used():
            end_bitposition += 1
        end_bitposition += 1
        if self.is_home_address_used():
            end_bitposition = self._home_address_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_work_address_used():
            end_bitposition = self._work_address_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DriverProfile.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_aggressiveness_used():
            end_bitposition += zserio_context.aggressiveness.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._aggressiveness_)
        end_bitposition += 1
        if self.is_is_disabled_person_used():
            end_bitposition += 1
        end_bitposition += 1
        if self.is_home_address_used():
            end_bitposition = self._home_address_.initialize_offsets_packed(zserio_context.home_address, end_bitposition)
        end_bitposition += 1
        if self.is_work_address_used():
            end_bitposition = self._work_address_.initialize_offsets_packed(zserio_context.work_address, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._aggressiveness_ = zserio_reader.read_bits(8)
        else:
            self._aggressiveness_ = None
        if zserio_reader.read_bool():
            self._is_disabled_person_ = zserio_reader.read_bool()
        else:
            self._is_disabled_person_ = None
        if zserio_reader.read_bool():
            self._home_address_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        else:
            self._home_address_ = None
        if zserio_reader.read_bool():
            self._work_address_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, 0)
        else:
            self._work_address_ = None

    def read_packed(self, zserio_context: DriverProfile.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._aggressiveness_ = zserio_context.aggressiveness.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._aggressiveness_ = None

        if zserio_reader.read_bool():
            self._is_disabled_person_ = zserio_reader.read_bool()
        else:
            self._is_disabled_person_ = None

        if zserio_reader.read_bool():
            self._home_address_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.home_address, zserio_reader, 0)
        else:
            self._home_address_ = None

        if zserio_reader.read_bool():
            self._work_address_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.work_address, zserio_reader, 0)
        else:
            self._work_address_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_aggressiveness_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._aggressiveness_, 8)
        else:
            zserio_writer.write_bool(False)

        if self.is_is_disabled_person_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bool(self._is_disabled_person_)
        else:
            zserio_writer.write_bool(False)

        if self.is_home_address_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._home_address_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DriverProfile.homeAddress: "
                                                    f"{self._home_address_.shift} != {0}!")
            self._home_address_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_work_address_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._work_address_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DriverProfile.workAddress: "
                                                    f"{self._work_address_.shift} != {0}!")
            self._work_address_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: DriverProfile.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_aggressiveness_used():
            zserio_writer.write_bool(True)
            zserio_context.aggressiveness.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._aggressiveness_)
        else:
            zserio_writer.write_bool(False)

        if self.is_is_disabled_person_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bool(self._is_disabled_person_)
        else:
            zserio_writer.write_bool(False)

        if self.is_home_address_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._home_address_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DriverProfile.homeAddress: "
                                                    f"{self._home_address_.shift} != {0}!")
            self._home_address_.write_packed(zserio_context.home_address, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_work_address_used():
            zserio_writer.write_bool(True)
            # check parameters
            if self._work_address_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DriverProfile.workAddress: "
                                                    f"{self._work_address_.shift} != {0}!")
            self._work_address_.write_packed(zserio_context.work_address, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._aggressiveness_ = zserio.array.DeltaContext()
            self._home_address_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._work_address_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()

        @property
        def aggressiveness(self):
            return self._aggressiveness_

        @property
        def home_address(self):
            return self._home_address_

        @property
        def work_address(self):
            return self._work_address_
