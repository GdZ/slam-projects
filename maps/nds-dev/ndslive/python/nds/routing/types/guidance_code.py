# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class GuidanceCode(zserio.Enum):
    STRAIGHT = 0
    BEAR_LEFT = 1
    BEAR_RIGHT = 2
    LEFT = 3
    RIGHT = 4
    SLIGHT_LEFT = 5
    SLIGHT_RIGHT = 6
    SHARP_LEFT = 7
    SHARP_RIGHT = 8
    UTURN_LEFT = 9
    UTURN_RIGHT = 10
    UTURN_LEFT_DUAL = 11
    UTURN_RIGHT_DUAL = 12
    KEEP_LEFT = 13
    KEEP_RIGHT = 14
    KEEP_LEFT_SINGLE = 15
    KEEP_RIGHT_SINGLE = 16
    ROUNDABOUT = 17
    ROUNDABOUT_REVERSED = 18
    MOTORWAY_EXIT_LEFT = 19
    MOTORWAY_EXIT_RIGHT = 20
    BOARD_FERRY = 21
    LEAVE_FERRY = 22
    BOARD_CAR_SHUTTLE_TRAIN = 23
    LEAVE_CAR_SHUTTLE_TRAIN = 24
    ARRIVE = 25
    DEPART = 26
    HEAD_NORTH = 27
    HEAD_NORTH_EAST = 28
    HEAD_EAST = 29
    HEAD_SOUTH_EAST = 30
    HEAD_SOUTH = 31
    HEAD_SOUTH_WEST = 32
    HEAD_WEST = 33
    HEAD_NORTH_WEST = 34

    @classmethod
    def from_name(cls: typing.Type['GuidanceCode'], item_name: str) -> 'GuidanceCode':
        if item_name == 'STRAIGHT':
            item = GuidanceCode.STRAIGHT
        elif item_name == 'BEAR_LEFT':
            item = GuidanceCode.BEAR_LEFT
        elif item_name == 'BEAR_RIGHT':
            item = GuidanceCode.BEAR_RIGHT
        elif item_name == 'LEFT':
            item = GuidanceCode.LEFT
        elif item_name == 'RIGHT':
            item = GuidanceCode.RIGHT
        elif item_name == 'SLIGHT_LEFT':
            item = GuidanceCode.SLIGHT_LEFT
        elif item_name == 'SLIGHT_RIGHT':
            item = GuidanceCode.SLIGHT_RIGHT
        elif item_name == 'SHARP_LEFT':
            item = GuidanceCode.SHARP_LEFT
        elif item_name == 'SHARP_RIGHT':
            item = GuidanceCode.SHARP_RIGHT
        elif item_name == 'UTURN_LEFT':
            item = GuidanceCode.UTURN_LEFT
        elif item_name == 'UTURN_RIGHT':
            item = GuidanceCode.UTURN_RIGHT
        elif item_name == 'UTURN_LEFT_DUAL':
            item = GuidanceCode.UTURN_LEFT_DUAL
        elif item_name == 'UTURN_RIGHT_DUAL':
            item = GuidanceCode.UTURN_RIGHT_DUAL
        elif item_name == 'KEEP_LEFT':
            item = GuidanceCode.KEEP_LEFT
        elif item_name == 'KEEP_RIGHT':
            item = GuidanceCode.KEEP_RIGHT
        elif item_name == 'KEEP_LEFT_SINGLE':
            item = GuidanceCode.KEEP_LEFT_SINGLE
        elif item_name == 'KEEP_RIGHT_SINGLE':
            item = GuidanceCode.KEEP_RIGHT_SINGLE
        elif item_name == 'ROUNDABOUT':
            item = GuidanceCode.ROUNDABOUT
        elif item_name == 'ROUNDABOUT_REVERSED':
            item = GuidanceCode.ROUNDABOUT_REVERSED
        elif item_name == 'MOTORWAY_EXIT_LEFT':
            item = GuidanceCode.MOTORWAY_EXIT_LEFT
        elif item_name == 'MOTORWAY_EXIT_RIGHT':
            item = GuidanceCode.MOTORWAY_EXIT_RIGHT
        elif item_name == 'BOARD_FERRY':
            item = GuidanceCode.BOARD_FERRY
        elif item_name == 'LEAVE_FERRY':
            item = GuidanceCode.LEAVE_FERRY
        elif item_name == 'BOARD_CAR_SHUTTLE_TRAIN':
            item = GuidanceCode.BOARD_CAR_SHUTTLE_TRAIN
        elif item_name == 'LEAVE_CAR_SHUTTLE_TRAIN':
            item = GuidanceCode.LEAVE_CAR_SHUTTLE_TRAIN
        elif item_name == 'ARRIVE':
            item = GuidanceCode.ARRIVE
        elif item_name == 'DEPART':
            item = GuidanceCode.DEPART
        elif item_name == 'HEAD_NORTH':
            item = GuidanceCode.HEAD_NORTH
        elif item_name == 'HEAD_NORTH_EAST':
            item = GuidanceCode.HEAD_NORTH_EAST
        elif item_name == 'HEAD_EAST':
            item = GuidanceCode.HEAD_EAST
        elif item_name == 'HEAD_SOUTH_EAST':
            item = GuidanceCode.HEAD_SOUTH_EAST
        elif item_name == 'HEAD_SOUTH':
            item = GuidanceCode.HEAD_SOUTH
        elif item_name == 'HEAD_SOUTH_WEST':
            item = GuidanceCode.HEAD_SOUTH_WEST
        elif item_name == 'HEAD_WEST':
            item = GuidanceCode.HEAD_WEST
        elif item_name == 'HEAD_NORTH_WEST':
            item = GuidanceCode.HEAD_NORTH_WEST
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'GuidanceCode'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['GuidanceCode'], reader: zserio.BitStreamReader) -> 'GuidanceCode':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['GuidanceCode'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'GuidanceCode':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
