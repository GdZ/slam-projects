# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RouteSegmentType(zserio.Enum):
    DELAY = 0
    POLLUTION = 1
    TUNNEL = 2
    BRIDGE = 3
    FERRY = 4
    CAR_TRAIN = 5
    PUBLIC_TRANSPORT = 6
    MOTORWAY = 7
    UNPAVED = 8
    AUTOMATED_DRIVING_L3 = 9
    AUTOMATED_DRIVING_L4 = 10
    AUTOMATED_DRIVING_L5 = 11
    LIMITED_MOBILE_DATA_COVERAGE = 12
    TRAFFIC_ENFORCEMENT_CAMERA = 13
    TRAFFIC_ENFORCEMENT_ZONE = 14
    TOLL = 15
    VIGNETTE = 16
    PEDESTRIAN = 17
    BIKE = 18
    SCOOTER = 19
    ENVIRONMENT_ZONE = 20
    USER_RESTRICTED_ACCESS = 21
    PHYSICAL_RESTRICTED_ACCESS = 22
    LEGAL_RESTRICTED_ACCESS = 23

    @classmethod
    def from_name(cls: typing.Type['RouteSegmentType'], item_name: str) -> 'RouteSegmentType':
        if item_name == 'DELAY':
            item = RouteSegmentType.DELAY
        elif item_name == 'POLLUTION':
            item = RouteSegmentType.POLLUTION
        elif item_name == 'TUNNEL':
            item = RouteSegmentType.TUNNEL
        elif item_name == 'BRIDGE':
            item = RouteSegmentType.BRIDGE
        elif item_name == 'FERRY':
            item = RouteSegmentType.FERRY
        elif item_name == 'CAR_TRAIN':
            item = RouteSegmentType.CAR_TRAIN
        elif item_name == 'PUBLIC_TRANSPORT':
            item = RouteSegmentType.PUBLIC_TRANSPORT
        elif item_name == 'MOTORWAY':
            item = RouteSegmentType.MOTORWAY
        elif item_name == 'UNPAVED':
            item = RouteSegmentType.UNPAVED
        elif item_name == 'AUTOMATED_DRIVING_L3':
            item = RouteSegmentType.AUTOMATED_DRIVING_L3
        elif item_name == 'AUTOMATED_DRIVING_L4':
            item = RouteSegmentType.AUTOMATED_DRIVING_L4
        elif item_name == 'AUTOMATED_DRIVING_L5':
            item = RouteSegmentType.AUTOMATED_DRIVING_L5
        elif item_name == 'LIMITED_MOBILE_DATA_COVERAGE':
            item = RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE
        elif item_name == 'TRAFFIC_ENFORCEMENT_CAMERA':
            item = RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA
        elif item_name == 'TRAFFIC_ENFORCEMENT_ZONE':
            item = RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE
        elif item_name == 'TOLL':
            item = RouteSegmentType.TOLL
        elif item_name == 'VIGNETTE':
            item = RouteSegmentType.VIGNETTE
        elif item_name == 'PEDESTRIAN':
            item = RouteSegmentType.PEDESTRIAN
        elif item_name == 'BIKE':
            item = RouteSegmentType.BIKE
        elif item_name == 'SCOOTER':
            item = RouteSegmentType.SCOOTER
        elif item_name == 'ENVIRONMENT_ZONE':
            item = RouteSegmentType.ENVIRONMENT_ZONE
        elif item_name == 'USER_RESTRICTED_ACCESS':
            item = RouteSegmentType.USER_RESTRICTED_ACCESS
        elif item_name == 'PHYSICAL_RESTRICTED_ACCESS':
            item = RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS
        elif item_name == 'LEGAL_RESTRICTED_ACCESS':
            item = RouteSegmentType.LEGAL_RESTRICTED_ACCESS
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RouteSegmentType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RouteSegmentType'], reader: zserio.BitStreamReader) -> 'RouteSegmentType':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['RouteSegmentType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RouteSegmentType':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
