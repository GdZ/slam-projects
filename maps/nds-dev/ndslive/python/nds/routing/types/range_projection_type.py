# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RangeProjectionType:
    def __init__(self) -> None:
        self._value = 0

    @classmethod
    def from_value(cls: typing.Type['RangeProjectionType'], value: int) -> 'RangeProjectionType':
        if value < 0 or value > 255:
            raise zserio.PythonRuntimeException(f"Value for bitmask 'RangeProjectionType' out of bounds: {value}!")

        instance = cls()
        instance._value = value
        return instance

    @classmethod
    def from_reader(cls: typing.Type['RangeProjectionType'], reader: zserio.BitStreamReader) -> 'RangeProjectionType':
        instance = cls()
        instance._value = reader.read_bits(8)
        return instance

    @classmethod
    def from_reader_packed(cls: typing.Type['RangeProjectionType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RangeProjectionType':
        instance = cls()
        instance._value = delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                             reader)
        return instance

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RangeProjectionType):
            return self._value == other._value

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._value)
        return result

    def __str__(self) -> str:
        result = ""

        if (self & RangeProjectionType.Values.DISTANCE) == RangeProjectionType.Values.DISTANCE:
            result += "DISTANCE" if not result else " | DISTANCE"
        if (self & RangeProjectionType.Values.TIME) == RangeProjectionType.Values.TIME:
            result += "TIME" if not result else " | TIME"
        if (self & RangeProjectionType.Values.FUEL) == RangeProjectionType.Values.FUEL:
            result += "FUEL" if not result else " | FUEL"
        if (self & RangeProjectionType.Values.BATTERY) == RangeProjectionType.Values.BATTERY:
            result += "BATTERY" if not result else " | BATTERY"

        return str(self._value) + "[" + result + "]"

    def __or__(self, other: 'RangeProjectionType') -> 'RangeProjectionType':
        return RangeProjectionType.from_value(self._value | other._value)

    def __and__(self, other: 'RangeProjectionType') -> 'RangeProjectionType':
        return RangeProjectionType.from_value(self._value & other._value)

    def __xor__(self, other: 'RangeProjectionType') -> 'RangeProjectionType':
        return RangeProjectionType.from_value(self._value ^ other._value)

    def __invert__(self) -> 'RangeProjectionType':
        return RangeProjectionType.from_value(~self._value & 255)

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8), self._value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self._value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self._value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8),
                            writer, self._value)

    @property
    def value(self) -> int:
        return self._value

    class Values:
        DISTANCE: 'RangeProjectionType' = None
        TIME: 'RangeProjectionType' = None
        FUEL: 'RangeProjectionType' = None
        BATTERY: 'RangeProjectionType' = None

RangeProjectionType.Values.DISTANCE = RangeProjectionType.from_value(1)
RangeProjectionType.Values.TIME = RangeProjectionType.from_value(2)
RangeProjectionType.Values.FUEL = RangeProjectionType.from_value(4)
RangeProjectionType.Values.BATTERY = RangeProjectionType.from_value(8)
