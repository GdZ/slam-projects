# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.vehicle.fuel_liters
import nds.core.vehicle.watt_hrs

class RouteSegmentConsumption:
    def __init__(
            self,
            fuel_consumption_: nds.core.vehicle.fuel_liters.FuelLiters = nds.core.vehicle.fuel_liters.FuelLiters(),
            battery_consumption_: nds.core.vehicle.watt_hrs.WattHrs = nds.core.vehicle.watt_hrs.WattHrs()) -> None:
        self._fuel_consumption_ = fuel_consumption_
        self._battery_consumption_ = battery_consumption_

    @classmethod
    def from_reader(
            cls: typing.Type['RouteSegmentConsumption'],
            zserio_reader: zserio.BitStreamReader) -> 'RouteSegmentConsumption':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RouteSegmentConsumption'],
            zserio_context: RouteSegmentConsumption.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RouteSegmentConsumption':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RouteSegmentConsumption):
            return ((self._fuel_consumption_ == other._fuel_consumption_) and
                    (self._battery_consumption_ == other._battery_consumption_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_float32(result, self._fuel_consumption_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._battery_consumption_)

        return result

    @property
    def fuel_consumption(self) -> nds.core.vehicle.fuel_liters.FuelLiters:
        return self._fuel_consumption_

    @fuel_consumption.setter
    def fuel_consumption(self, fuel_consumption_: nds.core.vehicle.fuel_liters.FuelLiters) -> None:
        self._fuel_consumption_ = fuel_consumption_

    @property
    def battery_consumption(self) -> nds.core.vehicle.watt_hrs.WattHrs:
        return self._battery_consumption_

    @battery_consumption.setter
    def battery_consumption(self, battery_consumption_: nds.core.vehicle.watt_hrs.WattHrs) -> None:
        self._battery_consumption_ = battery_consumption_

    def init_packing_context(self, zserio_context: RouteSegmentConsumption.ZserioPackingContext) -> None:
        zserio_context.battery_consumption.init(zserio.array.VarUInt32ArrayTraits(), self._battery_consumption_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._battery_consumption_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RouteSegmentConsumption.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += zserio_context.battery_consumption.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._battery_consumption_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._battery_consumption_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RouteSegmentConsumption.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += zserio_context.battery_consumption.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._battery_consumption_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._fuel_consumption_ = zserio_reader.read_float16()
        self._battery_consumption_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: RouteSegmentConsumption.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._fuel_consumption_ = zserio_reader.read_float16()

        self._battery_consumption_ = zserio_context.battery_consumption.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_float16(self._fuel_consumption_)
        zserio_writer.write_varuint32(self._battery_consumption_)

    def write_packed(self, zserio_context: RouteSegmentConsumption.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_float16(self._fuel_consumption_)

        zserio_context.battery_consumption.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._battery_consumption_)

    class ZserioPackingContext:
        def __init__(self):
            self._battery_consumption_ = zserio.array.DeltaContext()

        @property
        def battery_consumption(self):
            return self._battery_consumption_
