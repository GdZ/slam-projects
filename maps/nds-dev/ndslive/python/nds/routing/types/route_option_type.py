# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RouteOptionType(zserio.Enum):
    SCENIC = 0
    MOTORWAY = 1
    AUTONOMOUS_DRIVING = 2
    DIFFICULT_TURNS = 3
    TUNNEL = 4
    FERRY = 5
    VIGNETTE = 6
    TOLL = 7
    HOV = 8
    UNPAVED = 9
    LOCAL_ROADS = 10
    CHALLENGING = 11

    @classmethod
    def from_name(cls: typing.Type['RouteOptionType'], item_name: str) -> 'RouteOptionType':
        if item_name == 'SCENIC':
            item = RouteOptionType.SCENIC
        elif item_name == 'MOTORWAY':
            item = RouteOptionType.MOTORWAY
        elif item_name == 'AUTONOMOUS_DRIVING':
            item = RouteOptionType.AUTONOMOUS_DRIVING
        elif item_name == 'DIFFICULT_TURNS':
            item = RouteOptionType.DIFFICULT_TURNS
        elif item_name == 'TUNNEL':
            item = RouteOptionType.TUNNEL
        elif item_name == 'FERRY':
            item = RouteOptionType.FERRY
        elif item_name == 'VIGNETTE':
            item = RouteOptionType.VIGNETTE
        elif item_name == 'TOLL':
            item = RouteOptionType.TOLL
        elif item_name == 'HOV':
            item = RouteOptionType.HOV
        elif item_name == 'UNPAVED':
            item = RouteOptionType.UNPAVED
        elif item_name == 'LOCAL_ROADS':
            item = RouteOptionType.LOCAL_ROADS
        elif item_name == 'CHALLENGING':
            item = RouteOptionType.CHALLENGING
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'RouteOptionType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['RouteOptionType'], reader: zserio.BitStreamReader) -> 'RouteOptionType':
        return cls(reader.read_bits(8))

    @classmethod
    def from_reader_packed(cls: typing.Type['RouteOptionType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'RouteOptionType':
        return cls(delta_context.read(zserio.array.BitFieldArrayTraits(8),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.BitFieldArrayTraits(8),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.BitFieldArrayTraits(8),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.BitFieldArrayTraits(8), writer, self.value)
