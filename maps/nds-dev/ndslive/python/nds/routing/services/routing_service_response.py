# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.version_id
import nds.routing.route.route
import nds.system.types.nds_system_token

class RoutingServiceResponse:
    def __init__(
            self,
            route_: typing.Union[nds.routing.route.route.Route, None] = None,
            alternative_routes_: typing.Optional[typing.List[nds.routing.route.route.Route]] = None,
            map_id_: typing.Optional[nds.system.types.nds_system_token.NdsSystemToken] = None,
            version_id_: typing.Optional[nds.core.types.version_id.VersionId] = None,
            custom_response_data_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._route_ = route_
        if alternative_routes_ is None:
            self._alternative_routes_ = None
        else:
            self._alternative_routes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_alternative_routes()), alternative_routes_, is_auto=True)
        self._map_id_ = map_id_
        self._version_id_ = version_id_
        self._custom_response_data_ = custom_response_data_

    @classmethod
    def from_reader(
            cls: typing.Type['RoutingServiceResponse'],
            zserio_reader: zserio.BitStreamReader) -> 'RoutingServiceResponse':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoutingServiceResponse'],
            zserio_context: RoutingServiceResponse.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoutingServiceResponse':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoutingServiceResponse):
            return ((self._route_ == other._route_) and
                    (not other.is_alternative_routes_used() if not self.is_alternative_routes_used() else (self._alternative_routes_ == other._alternative_routes_)) and
                    (not other.is_map_id_used() if not self.is_map_id_used() else (self._map_id_ == other._map_id_)) and
                    (not other.is_version_id_used() if not self.is_version_id_used() else (self._version_id_ == other._version_id_)) and
                    (self._custom_response_data_ == other._custom_response_data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._route_)
        if self.is_alternative_routes_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._alternative_routes_)
        if self.is_map_id_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._map_id_)
        if self.is_version_id_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._version_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._custom_response_data_)

        return result

    @property
    def route(self) -> typing.Union[nds.routing.route.route.Route, None]:
        return self._route_

    @route.setter
    def route(self, route_: typing.Union[nds.routing.route.route.Route, None]) -> None:
        self._route_ = route_

    @property
    def alternative_routes(self) -> typing.Optional[typing.List[nds.routing.route.route.Route]]:
        return None if self._alternative_routes_ is None else self._alternative_routes_.raw_array

    @alternative_routes.setter
    def alternative_routes(self, alternative_routes_: typing.Optional[typing.List[nds.routing.route.route.Route]]) -> None:
        if alternative_routes_ is None:
            self._alternative_routes_ = None
        else:
            self._alternative_routes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_alternative_routes()), alternative_routes_, is_auto=True)

    def is_alternative_routes_used(self) -> bool:
        return self.is_alternative_routes_set()

    def is_alternative_routes_set(self) -> bool:
        return not self._alternative_routes_ is None

    def reset_alternative_routes(self) -> None:
        self._alternative_routes_ = None

    @property
    def map_id(self) -> typing.Optional[nds.system.types.nds_system_token.NdsSystemToken]:
        return self._map_id_

    @map_id.setter
    def map_id(self, map_id_: typing.Optional[nds.system.types.nds_system_token.NdsSystemToken]) -> None:
        self._map_id_ = map_id_

    def is_map_id_used(self) -> bool:
        return self.is_map_id_set()

    def is_map_id_set(self) -> bool:
        return not self._map_id_ is None

    def reset_map_id(self) -> None:
        self._map_id_ = None

    @property
    def version_id(self) -> typing.Optional[nds.core.types.version_id.VersionId]:
        return self._version_id_

    @version_id.setter
    def version_id(self, version_id_: typing.Optional[nds.core.types.version_id.VersionId]) -> None:
        self._version_id_ = version_id_

    def is_version_id_used(self) -> bool:
        return self.is_version_id_set()

    def is_version_id_set(self) -> bool:
        return not self._version_id_ is None

    def reset_version_id(self) -> None:
        self._version_id_ = None

    @property
    def custom_response_data(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._custom_response_data_

    @custom_response_data.setter
    def custom_response_data(self, custom_response_data_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._custom_response_data_ = custom_response_data_

    def init_packing_context(self, zserio_context: RoutingServiceResponse.ZserioPackingContext) -> None:
        self._route_.init_packing_context(zserio_context.route)
        if self.is_map_id_used():
            self._map_id_.init_packing_context(zserio_context.map_id)
        if self.is_version_id_used():
            zserio_context.version_id.init(zserio.array.VarUIntArrayTraits(), self._version_id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._route_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_alternative_routes_used():
            end_bitposition += self._alternative_routes_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_map_id_used():
            end_bitposition += self._map_id_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_version_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._version_id_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_response_data_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoutingServiceResponse.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._route_.bitsizeof_packed(zserio_context.route, end_bitposition)
        end_bitposition += 1
        if self.is_alternative_routes_used():
            end_bitposition += self._alternative_routes_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_map_id_used():
            end_bitposition += self._map_id_.bitsizeof_packed(zserio_context.map_id, end_bitposition)
        end_bitposition += 1
        if self.is_version_id_used():
            end_bitposition += zserio_context.version_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._version_id_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_response_data_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._route_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_alternative_routes_used():
            end_bitposition = self._alternative_routes_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_map_id_used():
            end_bitposition = self._map_id_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_version_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._version_id_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_response_data_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoutingServiceResponse.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._route_.initialize_offsets_packed(zserio_context.route, end_bitposition)
        end_bitposition += 1
        if self.is_alternative_routes_used():
            end_bitposition = self._alternative_routes_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_map_id_used():
            end_bitposition = self._map_id_.initialize_offsets_packed(zserio_context.map_id, end_bitposition)
        end_bitposition += 1
        if self.is_version_id_used():
            end_bitposition += zserio_context.version_id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._version_id_)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_response_data_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._route_ = nds.routing.route.route.Route.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._alternative_routes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_alternative_routes()), zserio_reader, is_auto=True)
        else:
            self._alternative_routes_ = None
        if zserio_reader.read_bool():
            self._map_id_ = nds.system.types.nds_system_token.NdsSystemToken.from_reader(zserio_reader)
        else:
            self._map_id_ = None
        if zserio_reader.read_bool():
            self._version_id_ = zserio_reader.read_varuint()
        else:
            self._version_id_ = None
        zserio_reader.alignto(8)
        self._custom_response_data_ = zserio_reader.read_bitbuffer()

    def read_packed(self, zserio_context: RoutingServiceResponse.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._route_ = nds.routing.route.route.Route.from_reader_packed(zserio_context.route, zserio_reader)

        if zserio_reader.read_bool():
            self._alternative_routes_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_alternative_routes()), zserio_reader, is_auto=True)
        else:
            self._alternative_routes_ = None

        if zserio_reader.read_bool():
            self._map_id_ = nds.system.types.nds_system_token.NdsSystemToken.from_reader_packed(zserio_context.map_id, zserio_reader)
        else:
            self._map_id_ = None

        if zserio_reader.read_bool():
            self._version_id_ = zserio_context.version_id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._version_id_ = None

        zserio_reader.alignto(8)
        self._custom_response_data_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._route_.write(zserio_writer)
        if self.is_alternative_routes_used():
            zserio_writer.write_bool(True)
            self._alternative_routes_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_map_id_used():
            zserio_writer.write_bool(True)
            self._map_id_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_version_id_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint(self._version_id_)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._custom_response_data_)

    def write_packed(self, zserio_context: RoutingServiceResponse.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._route_.write_packed(zserio_context.route, zserio_writer)

        if self.is_alternative_routes_used():
            zserio_writer.write_bool(True)
            self._alternative_routes_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_map_id_used():
            zserio_writer.write_bool(True)
            self._map_id_.write_packed(zserio_context.map_id, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_version_id_used():
            zserio_writer.write_bool(True)
            zserio_context.version_id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._version_id_)
        else:
            zserio_writer.write_bool(False)

        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._custom_response_data_)

    class ZserioPackingContext:
        def __init__(self):
            self._route_ = nds.routing.route.route.Route.ZserioPackingContext()
            self._map_id_ = nds.system.types.nds_system_token.NdsSystemToken.ZserioPackingContext()
            self._version_id_ = zserio.array.DeltaContext()

        @property
        def route(self):
            return self._route_

        @property
        def map_id(self):
            return self._map_id_

        @property
        def version_id(self):
            return self._version_id_

    class _ZserioElementFactory_alternative_routes:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route.Route:
            del zserio_index
            return nds.routing.route.route.Route.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route.Route.ZserioPackingContext:
            return nds.routing.route.route.Route.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route.Route.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route.Route:
            del zserio_index
            return nds.routing.route.route.Route.from_reader_packed(zserio_context, zserio_reader)
