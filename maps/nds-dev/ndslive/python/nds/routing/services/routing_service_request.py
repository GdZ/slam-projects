# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_path
import nds.core.types.language_code
import nds.core.types.time_with_zone
import nds.core.vehicle.vehicle_details
import nds.core.vehicle.vehicle_pose
import nds.routing.route.route_options
import nds.routing.route.waypoint
import nds.routing.types.driver_profile
import nds.routing.types.route_type

class RoutingServiceRequest:
    def __init__(
            self,
            optimize_via_points_: bool = bool(),
            language_: nds.core.types.language_code.LanguageCode = nds.core.types.language_code.LanguageCode(),
            type_: typing.Union[nds.routing.types.route_type.RouteType, None] = None,
            origin_: typing.Union[nds.routing.route.waypoint.Waypoint, None] = None,
            destination_: typing.Union[nds.routing.route.waypoint.Waypoint, None] = None,
            via_points_: typing.Optional[typing.List[nds.routing.route.waypoint.Waypoint]] = None,
            route_options_: typing.Optional[typing.List[nds.routing.route.route_options.RouteOptions]] = None,
            vehicle_details_: typing.Optional[nds.core.vehicle.vehicle_details.VehicleDetails] = None,
            vehicle_pose_: typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose] = None,
            driver_profile_: typing.Optional[nds.routing.types.driver_profile.DriverProfile] = None,
            num_alternative_routes_: int = int(),
            departure_time_: typing.Optional[nds.core.types.time_with_zone.TimeWithZone] = None,
            arrival_time_: typing.Optional[nds.core.types.time_with_zone.TimeWithZone] = None,
            covered_path_: typing.Optional[nds.core.location.road_location_path.RoadLocationPath] = None,
            custom_request_data_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._optimize_via_points_ = optimize_via_points_
        self._language_ = language_
        self._type_ = type_
        self._origin_ = origin_
        self._destination_ = destination_
        if via_points_ is None:
            self._via_points_ = None
        else:
            self._via_points_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_via_points()), via_points_, is_auto=True)
        if route_options_ is None:
            self._route_options_ = None
        else:
            self._route_options_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_options()), route_options_, is_auto=True)
        self._vehicle_details_ = vehicle_details_
        self._vehicle_pose_ = vehicle_pose_
        self._driver_profile_ = driver_profile_
        self._num_alternative_routes_ = num_alternative_routes_
        self._departure_time_ = departure_time_
        self._arrival_time_ = arrival_time_
        self._covered_path_ = covered_path_
        self._custom_request_data_ = custom_request_data_

    @classmethod
    def from_reader(
            cls: typing.Type['RoutingServiceRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'RoutingServiceRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoutingServiceRequest'],
            zserio_context: RoutingServiceRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoutingServiceRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoutingServiceRequest):
            return ((self._optimize_via_points_ == other._optimize_via_points_) and
                    (self._language_ == other._language_) and
                    (self._type_ == other._type_) and
                    (self._origin_ == other._origin_) and
                    (self._destination_ == other._destination_) and
                    (not other.is_via_points_used() if not self.is_via_points_used() else (self._via_points_ == other._via_points_)) and
                    (not other.is_route_options_used() if not self.is_route_options_used() else (self._route_options_ == other._route_options_)) and
                    (not other.is_vehicle_details_used() if not self.is_vehicle_details_used() else (self._vehicle_details_ == other._vehicle_details_)) and
                    (not other.is_vehicle_pose_used() if not self.is_vehicle_pose_used() else (self._vehicle_pose_ == other._vehicle_pose_)) and
                    (not other.is_driver_profile_used() if not self.is_driver_profile_used() else (self._driver_profile_ == other._driver_profile_)) and
                    (self._num_alternative_routes_ == other._num_alternative_routes_) and
                    (not other.is_departure_time_used() if not self.is_departure_time_used() else (self._departure_time_ == other._departure_time_)) and
                    (not other.is_arrival_time_used() if not self.is_arrival_time_used() else (self._arrival_time_ == other._arrival_time_)) and
                    (not other.is_covered_path_used() if not self.is_covered_path_used() else (self._covered_path_ == other._covered_path_)) and
                    (self._custom_request_data_ == other._custom_request_data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._optimize_via_points_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._language_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._origin_)
        result = zserio.hashcode.calc_hashcode_object(result, self._destination_)
        if self.is_via_points_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._via_points_)
        if self.is_route_options_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._route_options_)
        if self.is_vehicle_details_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_details_)
        if self.is_vehicle_pose_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_pose_)
        if self.is_driver_profile_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._driver_profile_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_alternative_routes_)
        if self.is_departure_time_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._departure_time_)
        if self.is_arrival_time_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._arrival_time_)
        if self.is_covered_path_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._covered_path_)
        result = zserio.hashcode.calc_hashcode_object(result, self._custom_request_data_)

        return result

    @property
    def optimize_via_points(self) -> bool:
        return self._optimize_via_points_

    @optimize_via_points.setter
    def optimize_via_points(self, optimize_via_points_: bool) -> None:
        self._optimize_via_points_ = optimize_via_points_

    @property
    def language(self) -> nds.core.types.language_code.LanguageCode:
        return self._language_

    @language.setter
    def language(self, language_: nds.core.types.language_code.LanguageCode) -> None:
        self._language_ = language_

    @property
    def type(self) -> typing.Union[nds.routing.types.route_type.RouteType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.routing.types.route_type.RouteType, None]) -> None:
        self._type_ = type_

    @property
    def origin(self) -> typing.Union[nds.routing.route.waypoint.Waypoint, None]:
        return self._origin_

    @origin.setter
    def origin(self, origin_: typing.Union[nds.routing.route.waypoint.Waypoint, None]) -> None:
        self._origin_ = origin_

    @property
    def destination(self) -> typing.Union[nds.routing.route.waypoint.Waypoint, None]:
        return self._destination_

    @destination.setter
    def destination(self, destination_: typing.Union[nds.routing.route.waypoint.Waypoint, None]) -> None:
        self._destination_ = destination_

    @property
    def via_points(self) -> typing.Optional[typing.List[nds.routing.route.waypoint.Waypoint]]:
        return None if self._via_points_ is None else self._via_points_.raw_array

    @via_points.setter
    def via_points(self, via_points_: typing.Optional[typing.List[nds.routing.route.waypoint.Waypoint]]) -> None:
        if via_points_ is None:
            self._via_points_ = None
        else:
            self._via_points_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_via_points()), via_points_, is_auto=True)

    def is_via_points_used(self) -> bool:
        return self.is_via_points_set()

    def is_via_points_set(self) -> bool:
        return not self._via_points_ is None

    def reset_via_points(self) -> None:
        self._via_points_ = None

    @property
    def route_options(self) -> typing.Optional[typing.List[nds.routing.route.route_options.RouteOptions]]:
        return None if self._route_options_ is None else self._route_options_.raw_array

    @route_options.setter
    def route_options(self, route_options_: typing.Optional[typing.List[nds.routing.route.route_options.RouteOptions]]) -> None:
        if route_options_ is None:
            self._route_options_ = None
        else:
            self._route_options_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_options()), route_options_, is_auto=True)

    def is_route_options_used(self) -> bool:
        return self.is_route_options_set()

    def is_route_options_set(self) -> bool:
        return not self._route_options_ is None

    def reset_route_options(self) -> None:
        self._route_options_ = None

    @property
    def vehicle_details(self) -> typing.Optional[nds.core.vehicle.vehicle_details.VehicleDetails]:
        return self._vehicle_details_

    @vehicle_details.setter
    def vehicle_details(self, vehicle_details_: typing.Optional[nds.core.vehicle.vehicle_details.VehicleDetails]) -> None:
        self._vehicle_details_ = vehicle_details_

    def is_vehicle_details_used(self) -> bool:
        return self.is_vehicle_details_set()

    def is_vehicle_details_set(self) -> bool:
        return not self._vehicle_details_ is None

    def reset_vehicle_details(self) -> None:
        self._vehicle_details_ = None

    @property
    def vehicle_pose(self) -> typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose]:
        return self._vehicle_pose_

    @vehicle_pose.setter
    def vehicle_pose(self, vehicle_pose_: typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose]) -> None:
        self._vehicle_pose_ = vehicle_pose_

    def is_vehicle_pose_used(self) -> bool:
        return self.is_vehicle_pose_set()

    def is_vehicle_pose_set(self) -> bool:
        return not self._vehicle_pose_ is None

    def reset_vehicle_pose(self) -> None:
        self._vehicle_pose_ = None

    @property
    def driver_profile(self) -> typing.Optional[nds.routing.types.driver_profile.DriverProfile]:
        return self._driver_profile_

    @driver_profile.setter
    def driver_profile(self, driver_profile_: typing.Optional[nds.routing.types.driver_profile.DriverProfile]) -> None:
        self._driver_profile_ = driver_profile_

    def is_driver_profile_used(self) -> bool:
        return self.is_driver_profile_set()

    def is_driver_profile_set(self) -> bool:
        return not self._driver_profile_ is None

    def reset_driver_profile(self) -> None:
        self._driver_profile_ = None

    @property
    def num_alternative_routes(self) -> int:
        return self._num_alternative_routes_

    @num_alternative_routes.setter
    def num_alternative_routes(self, num_alternative_routes_: int) -> None:
        self._num_alternative_routes_ = num_alternative_routes_

    @property
    def departure_time(self) -> typing.Optional[nds.core.types.time_with_zone.TimeWithZone]:
        return self._departure_time_

    @departure_time.setter
    def departure_time(self, departure_time_: typing.Optional[nds.core.types.time_with_zone.TimeWithZone]) -> None:
        self._departure_time_ = departure_time_

    def is_departure_time_used(self) -> bool:
        return self.is_departure_time_set()

    def is_departure_time_set(self) -> bool:
        return not self._departure_time_ is None

    def reset_departure_time(self) -> None:
        self._departure_time_ = None

    @property
    def arrival_time(self) -> typing.Optional[nds.core.types.time_with_zone.TimeWithZone]:
        return self._arrival_time_

    @arrival_time.setter
    def arrival_time(self, arrival_time_: typing.Optional[nds.core.types.time_with_zone.TimeWithZone]) -> None:
        self._arrival_time_ = arrival_time_

    def is_arrival_time_used(self) -> bool:
        return self.is_arrival_time_set()

    def is_arrival_time_set(self) -> bool:
        return not self._arrival_time_ is None

    def reset_arrival_time(self) -> None:
        self._arrival_time_ = None

    @property
    def covered_path(self) -> typing.Optional[nds.core.location.road_location_path.RoadLocationPath]:
        return self._covered_path_

    @covered_path.setter
    def covered_path(self, covered_path_: typing.Optional[nds.core.location.road_location_path.RoadLocationPath]) -> None:
        self._covered_path_ = covered_path_

    def is_covered_path_used(self) -> bool:
        return self.is_covered_path_set()

    def is_covered_path_set(self) -> bool:
        return not self._covered_path_ is None

    def reset_covered_path(self) -> None:
        self._covered_path_ = None

    @property
    def custom_request_data(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._custom_request_data_

    @custom_request_data.setter
    def custom_request_data(self, custom_request_data_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._custom_request_data_ = custom_request_data_

    def init_packing_context(self, zserio_context: RoutingServiceRequest.ZserioPackingContext) -> None:
        zserio_context.language.init(zserio.array.VarUInt16ArrayTraits(), self._language_)
        self._type_.init_packing_context(zserio_context.type)
        self._origin_.init_packing_context(zserio_context.origin)
        self._destination_.init_packing_context(zserio_context.destination)
        if self.is_vehicle_details_used():
            self._vehicle_details_.init_packing_context(zserio_context.vehicle_details)
        if self.is_vehicle_pose_used():
            self._vehicle_pose_.init_packing_context(zserio_context.vehicle_pose)
        if self.is_driver_profile_used():
            self._driver_profile_.init_packing_context(zserio_context.driver_profile)
        zserio_context.num_alternative_routes.init(zserio.array.BitFieldArrayTraits(8), self._num_alternative_routes_)
        if self.is_departure_time_used():
            self._departure_time_.init_packing_context(zserio_context.departure_time)
        if self.is_arrival_time_used():
            self._arrival_time_.init_packing_context(zserio_context.arrival_time)
        if self.is_covered_path_used():
            self._covered_path_.init_packing_context(zserio_context.covered_path)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_)
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._origin_.bitsizeof(end_bitposition)
        end_bitposition += self._destination_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_via_points_used():
            end_bitposition += self._via_points_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_route_options_used():
            end_bitposition += self._route_options_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_details_used():
            end_bitposition += self._vehicle_details_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition += self._vehicle_pose_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition += self._driver_profile_.bitsizeof(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_departure_time_used():
            end_bitposition += self._departure_time_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_arrival_time_used():
            end_bitposition += self._arrival_time_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_covered_path_used():
            end_bitposition += self._covered_path_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_request_data_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoutingServiceRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._origin_.bitsizeof_packed(zserio_context.origin, end_bitposition)
        end_bitposition += self._destination_.bitsizeof_packed(zserio_context.destination, end_bitposition)
        end_bitposition += 1
        if self.is_via_points_used():
            end_bitposition += self._via_points_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_route_options_used():
            end_bitposition += self._route_options_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_details_used():
            end_bitposition += self._vehicle_details_.bitsizeof_packed(zserio_context.vehicle_details, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition += self._vehicle_pose_.bitsizeof_packed(zserio_context.vehicle_pose, end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition += self._driver_profile_.bitsizeof_packed(zserio_context.driver_profile, end_bitposition)
        end_bitposition += zserio_context.num_alternative_routes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_alternative_routes_)
        end_bitposition += 1
        if self.is_departure_time_used():
            end_bitposition += self._departure_time_.bitsizeof_packed(zserio_context.departure_time, end_bitposition)
        end_bitposition += 1
        if self.is_arrival_time_used():
            end_bitposition += self._arrival_time_.bitsizeof_packed(zserio_context.arrival_time, end_bitposition)
        end_bitposition += 1
        if self.is_covered_path_used():
            end_bitposition += self._covered_path_.bitsizeof_packed(zserio_context.covered_path, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_request_data_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._language_)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._origin_.initialize_offsets(end_bitposition)
        end_bitposition = self._destination_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_via_points_used():
            end_bitposition = self._via_points_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_route_options_used():
            end_bitposition = self._route_options_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_details_used():
            end_bitposition = self._vehicle_details_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition = self._vehicle_pose_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition = self._driver_profile_.initialize_offsets(end_bitposition)
        end_bitposition += 8
        end_bitposition += 1
        if self.is_departure_time_used():
            end_bitposition = self._departure_time_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_arrival_time_used():
            end_bitposition = self._arrival_time_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_covered_path_used():
            end_bitposition = self._covered_path_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_request_data_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoutingServiceRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += zserio_context.language.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._language_)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._origin_.initialize_offsets_packed(zserio_context.origin, end_bitposition)
        end_bitposition = self._destination_.initialize_offsets_packed(zserio_context.destination, end_bitposition)
        end_bitposition += 1
        if self.is_via_points_used():
            end_bitposition = self._via_points_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_route_options_used():
            end_bitposition = self._route_options_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_details_used():
            end_bitposition = self._vehicle_details_.initialize_offsets_packed(zserio_context.vehicle_details, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition = self._vehicle_pose_.initialize_offsets_packed(zserio_context.vehicle_pose, end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition = self._driver_profile_.initialize_offsets_packed(zserio_context.driver_profile, end_bitposition)
        end_bitposition += zserio_context.num_alternative_routes.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._num_alternative_routes_)
        end_bitposition += 1
        if self.is_departure_time_used():
            end_bitposition = self._departure_time_.initialize_offsets_packed(zserio_context.departure_time, end_bitposition)
        end_bitposition += 1
        if self.is_arrival_time_used():
            end_bitposition = self._arrival_time_.initialize_offsets_packed(zserio_context.arrival_time, end_bitposition)
        end_bitposition += 1
        if self.is_covered_path_used():
            end_bitposition = self._covered_path_.initialize_offsets_packed(zserio_context.covered_path, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._custom_request_data_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._optimize_via_points_ = zserio_reader.read_bool()
        self._language_ = zserio_reader.read_varuint16()
        self._type_ = nds.routing.types.route_type.RouteType.from_reader(zserio_reader)
        self._origin_ = nds.routing.route.waypoint.Waypoint.from_reader(zserio_reader)
        self._destination_ = nds.routing.route.waypoint.Waypoint.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._via_points_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_via_points()), zserio_reader, is_auto=True)
        else:
            self._via_points_ = None
        if zserio_reader.read_bool():
            self._route_options_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_options()), zserio_reader, is_auto=True)
        else:
            self._route_options_ = None
        if zserio_reader.read_bool():
            self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.from_reader(zserio_reader)
        else:
            self._vehicle_details_ = None
        if zserio_reader.read_bool():
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.from_reader(zserio_reader)
        else:
            self._vehicle_pose_ = None
        if zserio_reader.read_bool():
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.from_reader(zserio_reader)
        else:
            self._driver_profile_ = None
        self._num_alternative_routes_ = zserio_reader.read_bits(8)
        if zserio_reader.read_bool():
            self._departure_time_ = nds.core.types.time_with_zone.TimeWithZone.from_reader(zserio_reader)
        else:
            self._departure_time_ = None
        if zserio_reader.read_bool():
            self._arrival_time_ = nds.core.types.time_with_zone.TimeWithZone.from_reader(zserio_reader)
        else:
            self._arrival_time_ = None
        if zserio_reader.read_bool():
            self._covered_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader(zserio_reader)
        else:
            self._covered_path_ = None
        zserio_reader.alignto(8)
        self._custom_request_data_ = zserio_reader.read_bitbuffer()

    def read_packed(self, zserio_context: RoutingServiceRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._optimize_via_points_ = zserio_reader.read_bool()

        self._language_ = zserio_context.language.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._type_ = nds.routing.types.route_type.RouteType.from_reader_packed(zserio_context.type, zserio_reader)

        self._origin_ = nds.routing.route.waypoint.Waypoint.from_reader_packed(zserio_context.origin, zserio_reader)

        self._destination_ = nds.routing.route.waypoint.Waypoint.from_reader_packed(zserio_context.destination, zserio_reader)

        if zserio_reader.read_bool():
            self._via_points_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_via_points()), zserio_reader, is_auto=True)
        else:
            self._via_points_ = None

        if zserio_reader.read_bool():
            self._route_options_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_options()), zserio_reader, is_auto=True)
        else:
            self._route_options_ = None

        if zserio_reader.read_bool():
            self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.from_reader_packed(zserio_context.vehicle_details, zserio_reader)
        else:
            self._vehicle_details_ = None

        if zserio_reader.read_bool():
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.from_reader_packed(zserio_context.vehicle_pose, zserio_reader)
        else:
            self._vehicle_pose_ = None

        if zserio_reader.read_bool():
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.from_reader_packed(zserio_context.driver_profile, zserio_reader)
        else:
            self._driver_profile_ = None

        self._num_alternative_routes_ = zserio_context.num_alternative_routes.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        if zserio_reader.read_bool():
            self._departure_time_ = nds.core.types.time_with_zone.TimeWithZone.from_reader_packed(zserio_context.departure_time, zserio_reader)
        else:
            self._departure_time_ = None

        if zserio_reader.read_bool():
            self._arrival_time_ = nds.core.types.time_with_zone.TimeWithZone.from_reader_packed(zserio_context.arrival_time, zserio_reader)
        else:
            self._arrival_time_ = None

        if zserio_reader.read_bool():
            self._covered_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader_packed(zserio_context.covered_path, zserio_reader)
        else:
            self._covered_path_ = None

        zserio_reader.alignto(8)
        self._custom_request_data_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._optimize_via_points_)
        zserio_writer.write_varuint16(self._language_)
        self._type_.write(zserio_writer)
        self._origin_.write(zserio_writer)
        self._destination_.write(zserio_writer)
        if self.is_via_points_used():
            zserio_writer.write_bool(True)
            self._via_points_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_route_options_used():
            zserio_writer.write_bool(True)
            self._route_options_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_vehicle_details_used():
            zserio_writer.write_bool(True)
            self._vehicle_details_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_vehicle_pose_used():
            zserio_writer.write_bool(True)
            self._vehicle_pose_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_driver_profile_used():
            zserio_writer.write_bool(True)
            self._driver_profile_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.write_bits(self._num_alternative_routes_, 8)
        if self.is_departure_time_used():
            zserio_writer.write_bool(True)
            self._departure_time_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_arrival_time_used():
            zserio_writer.write_bool(True)
            self._arrival_time_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_covered_path_used():
            zserio_writer.write_bool(True)
            self._covered_path_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._custom_request_data_)

    def write_packed(self, zserio_context: RoutingServiceRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._optimize_via_points_)

        zserio_context.language.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._language_)

        self._type_.write_packed(zserio_context.type, zserio_writer)

        self._origin_.write_packed(zserio_context.origin, zserio_writer)

        self._destination_.write_packed(zserio_context.destination, zserio_writer)

        if self.is_via_points_used():
            zserio_writer.write_bool(True)
            self._via_points_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_route_options_used():
            zserio_writer.write_bool(True)
            self._route_options_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_vehicle_details_used():
            zserio_writer.write_bool(True)
            self._vehicle_details_.write_packed(zserio_context.vehicle_details, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_vehicle_pose_used():
            zserio_writer.write_bool(True)
            self._vehicle_pose_.write_packed(zserio_context.vehicle_pose, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_driver_profile_used():
            zserio_writer.write_bool(True)
            self._driver_profile_.write_packed(zserio_context.driver_profile, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        zserio_context.num_alternative_routes.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._num_alternative_routes_)

        if self.is_departure_time_used():
            zserio_writer.write_bool(True)
            self._departure_time_.write_packed(zserio_context.departure_time, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_arrival_time_used():
            zserio_writer.write_bool(True)
            self._arrival_time_.write_packed(zserio_context.arrival_time, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_covered_path_used():
            zserio_writer.write_bool(True)
            self._covered_path_.write_packed(zserio_context.covered_path, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        zserio_writer.alignto(8)
        zserio_writer.write_bitbuffer(self._custom_request_data_)

    class ZserioPackingContext:
        def __init__(self):
            self._language_ = zserio.array.DeltaContext()
            self._type_ = zserio.array.DeltaContext()
            self._origin_ = nds.routing.route.waypoint.Waypoint.ZserioPackingContext()
            self._destination_ = nds.routing.route.waypoint.Waypoint.ZserioPackingContext()
            self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.ZserioPackingContext()
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.ZserioPackingContext()
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.ZserioPackingContext()
            self._num_alternative_routes_ = zserio.array.DeltaContext()
            self._departure_time_ = nds.core.types.time_with_zone.TimeWithZone.ZserioPackingContext()
            self._arrival_time_ = nds.core.types.time_with_zone.TimeWithZone.ZserioPackingContext()
            self._covered_path_ = nds.core.location.road_location_path.RoadLocationPath.ZserioPackingContext()

        @property
        def language(self):
            return self._language_

        @property
        def type(self):
            return self._type_

        @property
        def origin(self):
            return self._origin_

        @property
        def destination(self):
            return self._destination_

        @property
        def vehicle_details(self):
            return self._vehicle_details_

        @property
        def vehicle_pose(self):
            return self._vehicle_pose_

        @property
        def driver_profile(self):
            return self._driver_profile_

        @property
        def num_alternative_routes(self):
            return self._num_alternative_routes_

        @property
        def departure_time(self):
            return self._departure_time_

        @property
        def arrival_time(self):
            return self._arrival_time_

        @property
        def covered_path(self):
            return self._covered_path_

    class _ZserioElementFactory_via_points:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.waypoint.Waypoint:
            del zserio_index
            return nds.routing.route.waypoint.Waypoint.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.waypoint.Waypoint.ZserioPackingContext:
            return nds.routing.route.waypoint.Waypoint.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.waypoint.Waypoint.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.waypoint.Waypoint:
            del zserio_index
            return nds.routing.route.waypoint.Waypoint.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_route_options:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_options.RouteOptions:
            del zserio_index
            return nds.routing.route.route_options.RouteOptions.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route_options.RouteOptions.ZserioPackingContext:
            return nds.routing.route.route_options.RouteOptions.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route_options.RouteOptions.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_options.RouteOptions:
            del zserio_index
            return nds.routing.route.route_options.RouteOptions.from_reader_packed(zserio_context, zserio_reader)
