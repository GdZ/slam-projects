# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.distance_meters
import nds.core.types.seconds
import nds.core.vehicle.vehicle_details
import nds.core.vehicle.vehicle_pose
import nds.routing.route.waypoint
import nds.routing.types.driver_profile
import nds.routing.types.range_projection_type

class RangeProjectionRequest:
    def __init__(
            self,
            type_: typing.Union[nds.routing.types.range_projection_type.RangeProjectionType, None] = None,
            origin_: typing.Union[nds.routing.route.waypoint.Waypoint, None] = None,
            time_budget_: typing.Optional[nds.core.types.seconds.Seconds] = None,
            distance_meters_: typing.Optional[nds.core.types.distance_meters.DistanceMeters] = None,
            vehicle_details_: typing.Union[nds.core.vehicle.vehicle_details.VehicleDetails, None] = None,
            vehicle_pose_: typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose] = None,
            driver_profile_: typing.Optional[nds.routing.types.driver_profile.DriverProfile] = None,
            max_poly_count_: typing.Optional[int] = None) -> None:
        self._type_ = type_
        self._origin_ = origin_
        self._time_budget_ = time_budget_
        self._distance_meters_ = distance_meters_
        self._vehicle_details_ = vehicle_details_
        self._vehicle_pose_ = vehicle_pose_
        self._driver_profile_ = driver_profile_
        self._max_poly_count_ = max_poly_count_

    @classmethod
    def from_reader(
            cls: typing.Type['RangeProjectionRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'RangeProjectionRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RangeProjectionRequest'],
            zserio_context: RangeProjectionRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RangeProjectionRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RangeProjectionRequest):
            return ((self._type_ == other._type_) and
                    (self._origin_ == other._origin_) and
                    (not other.is_time_budget_used() if not self.is_time_budget_used() else (self._time_budget_ == other._time_budget_)) and
                    (not other.is_distance_meters_used() if not self.is_distance_meters_used() else (self._distance_meters_ == other._distance_meters_)) and
                    (self._vehicle_details_ == other._vehicle_details_) and
                    (not other.is_vehicle_pose_used() if not self.is_vehicle_pose_used() else (self._vehicle_pose_ == other._vehicle_pose_)) and
                    (not other.is_driver_profile_used() if not self.is_driver_profile_used() else (self._driver_profile_ == other._driver_profile_)) and
                    (not other.is_max_poly_count_used() if not self.is_max_poly_count_used() else (self._max_poly_count_ == other._max_poly_count_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._origin_)
        if self.is_time_budget_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._time_budget_)
        if self.is_distance_meters_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._distance_meters_)
        result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_details_)
        if self.is_vehicle_pose_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_pose_)
        if self.is_driver_profile_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._driver_profile_)
        if self.is_max_poly_count_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._max_poly_count_)

        return result

    @property
    def type(self) -> typing.Union[nds.routing.types.range_projection_type.RangeProjectionType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.routing.types.range_projection_type.RangeProjectionType, None]) -> None:
        self._type_ = type_

    @property
    def origin(self) -> typing.Union[nds.routing.route.waypoint.Waypoint, None]:
        return self._origin_

    @origin.setter
    def origin(self, origin_: typing.Union[nds.routing.route.waypoint.Waypoint, None]) -> None:
        self._origin_ = origin_

    @property
    def time_budget(self) -> typing.Optional[nds.core.types.seconds.Seconds]:
        return self._time_budget_

    @time_budget.setter
    def time_budget(self, time_budget_: typing.Optional[nds.core.types.seconds.Seconds]) -> None:
        self._time_budget_ = time_budget_

    def is_time_budget_used(self) -> bool:
        return (self._type_ & nds.routing.types.range_projection_type.RangeProjectionType.Values.TIME) == nds.routing.types.range_projection_type.RangeProjectionType.Values.TIME

    def is_time_budget_set(self) -> bool:
        return not self._time_budget_ is None

    def reset_time_budget(self) -> None:
        self._time_budget_ = None

    @property
    def distance_meters(self) -> typing.Optional[nds.core.types.distance_meters.DistanceMeters]:
        return self._distance_meters_

    @distance_meters.setter
    def distance_meters(self, distance_meters_: typing.Optional[nds.core.types.distance_meters.DistanceMeters]) -> None:
        self._distance_meters_ = distance_meters_

    def is_distance_meters_used(self) -> bool:
        return (self._type_ & nds.routing.types.range_projection_type.RangeProjectionType.Values.DISTANCE) == nds.routing.types.range_projection_type.RangeProjectionType.Values.DISTANCE

    def is_distance_meters_set(self) -> bool:
        return not self._distance_meters_ is None

    def reset_distance_meters(self) -> None:
        self._distance_meters_ = None

    @property
    def vehicle_details(self) -> typing.Union[nds.core.vehicle.vehicle_details.VehicleDetails, None]:
        return self._vehicle_details_

    @vehicle_details.setter
    def vehicle_details(self, vehicle_details_: typing.Union[nds.core.vehicle.vehicle_details.VehicleDetails, None]) -> None:
        self._vehicle_details_ = vehicle_details_

    @property
    def vehicle_pose(self) -> typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose]:
        return self._vehicle_pose_

    @vehicle_pose.setter
    def vehicle_pose(self, vehicle_pose_: typing.Optional[nds.core.vehicle.vehicle_pose.VehiclePose]) -> None:
        self._vehicle_pose_ = vehicle_pose_

    def is_vehicle_pose_used(self) -> bool:
        return self.is_vehicle_pose_set()

    def is_vehicle_pose_set(self) -> bool:
        return not self._vehicle_pose_ is None

    def reset_vehicle_pose(self) -> None:
        self._vehicle_pose_ = None

    @property
    def driver_profile(self) -> typing.Optional[nds.routing.types.driver_profile.DriverProfile]:
        return self._driver_profile_

    @driver_profile.setter
    def driver_profile(self, driver_profile_: typing.Optional[nds.routing.types.driver_profile.DriverProfile]) -> None:
        self._driver_profile_ = driver_profile_

    def is_driver_profile_used(self) -> bool:
        return self.is_driver_profile_set()

    def is_driver_profile_set(self) -> bool:
        return not self._driver_profile_ is None

    def reset_driver_profile(self) -> None:
        self._driver_profile_ = None

    @property
    def max_poly_count(self) -> typing.Optional[int]:
        return self._max_poly_count_

    @max_poly_count.setter
    def max_poly_count(self, max_poly_count_: typing.Optional[int]) -> None:
        self._max_poly_count_ = max_poly_count_

    def is_max_poly_count_used(self) -> bool:
        return self.is_max_poly_count_set()

    def is_max_poly_count_set(self) -> bool:
        return not self._max_poly_count_ is None

    def reset_max_poly_count(self) -> None:
        self._max_poly_count_ = None

    def init_packing_context(self, zserio_context: RangeProjectionRequest.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        self._origin_.init_packing_context(zserio_context.origin)
        if self.is_time_budget_used():
            zserio_context.time_budget.init(zserio.array.VarUIntArrayTraits(), self._time_budget_)
        if self.is_distance_meters_used():
            zserio_context.distance_meters.init(zserio.array.VarUInt32ArrayTraits(), self._distance_meters_)
        self._vehicle_details_.init_packing_context(zserio_context.vehicle_details)
        if self.is_vehicle_pose_used():
            self._vehicle_pose_.init_packing_context(zserio_context.vehicle_pose)
        if self.is_driver_profile_used():
            self._driver_profile_.init_packing_context(zserio_context.driver_profile)
        if self.is_max_poly_count_used():
            zserio_context.max_poly_count.init(zserio.array.VarUInt32ArrayTraits(), self._max_poly_count_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._origin_.bitsizeof(end_bitposition)
        if self.is_time_budget_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._time_budget_)
        if self.is_distance_meters_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._distance_meters_)
        end_bitposition += self._vehicle_details_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition += self._vehicle_pose_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition += self._driver_profile_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_max_poly_count_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_poly_count_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RangeProjectionRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._origin_.bitsizeof_packed(zserio_context.origin, end_bitposition)
        if self.is_time_budget_used():
            end_bitposition += zserio_context.time_budget.bitsizeof(zserio.array.VarUIntArrayTraits(), self._time_budget_)
        if self.is_distance_meters_used():
            end_bitposition += zserio_context.distance_meters.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._distance_meters_)
        end_bitposition += self._vehicle_details_.bitsizeof_packed(zserio_context.vehicle_details, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition += self._vehicle_pose_.bitsizeof_packed(zserio_context.vehicle_pose, end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition += self._driver_profile_.bitsizeof_packed(zserio_context.driver_profile, end_bitposition)
        end_bitposition += 1
        if self.is_max_poly_count_used():
            end_bitposition += zserio_context.max_poly_count.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_poly_count_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._origin_.initialize_offsets(end_bitposition)
        if self.is_time_budget_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._time_budget_)
        if self.is_distance_meters_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._distance_meters_)
        end_bitposition = self._vehicle_details_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition = self._vehicle_pose_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition = self._driver_profile_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_max_poly_count_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._max_poly_count_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RangeProjectionRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._origin_.initialize_offsets_packed(zserio_context.origin, end_bitposition)
        if self.is_time_budget_used():
            end_bitposition += zserio_context.time_budget.bitsizeof(zserio.array.VarUIntArrayTraits(), self._time_budget_)
        if self.is_distance_meters_used():
            end_bitposition += zserio_context.distance_meters.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._distance_meters_)
        end_bitposition = self._vehicle_details_.initialize_offsets_packed(zserio_context.vehicle_details, end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_pose_used():
            end_bitposition = self._vehicle_pose_.initialize_offsets_packed(zserio_context.vehicle_pose, end_bitposition)
        end_bitposition += 1
        if self.is_driver_profile_used():
            end_bitposition = self._driver_profile_.initialize_offsets_packed(zserio_context.driver_profile, end_bitposition)
        end_bitposition += 1
        if self.is_max_poly_count_used():
            end_bitposition += zserio_context.max_poly_count.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._max_poly_count_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.routing.types.range_projection_type.RangeProjectionType.from_reader(zserio_reader)
        self._origin_ = nds.routing.route.waypoint.Waypoint.from_reader(zserio_reader)
        if self.is_time_budget_used():
            self._time_budget_ = zserio_reader.read_varuint()
        else:
            self._time_budget_ = None
        if self.is_distance_meters_used():
            self._distance_meters_ = zserio_reader.read_varuint32()
        else:
            self._distance_meters_ = None
        self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.from_reader(zserio_reader)
        else:
            self._vehicle_pose_ = None
        if zserio_reader.read_bool():
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.from_reader(zserio_reader)
        else:
            self._driver_profile_ = None
        if zserio_reader.read_bool():
            self._max_poly_count_ = zserio_reader.read_varuint32()
        else:
            self._max_poly_count_ = None

    def read_packed(self, zserio_context: RangeProjectionRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.routing.types.range_projection_type.RangeProjectionType.from_reader_packed(zserio_context.type, zserio_reader)

        self._origin_ = nds.routing.route.waypoint.Waypoint.from_reader_packed(zserio_context.origin, zserio_reader)

        if self.is_time_budget_used():
            self._time_budget_ = zserio_context.time_budget.read(zserio.array.VarUIntArrayTraits(), zserio_reader)
        else:
            self._time_budget_ = None

        if self.is_distance_meters_used():
            self._distance_meters_ = zserio_context.distance_meters.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._distance_meters_ = None

        self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.from_reader_packed(zserio_context.vehicle_details, zserio_reader)

        if zserio_reader.read_bool():
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.from_reader_packed(zserio_context.vehicle_pose, zserio_reader)
        else:
            self._vehicle_pose_ = None

        if zserio_reader.read_bool():
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.from_reader_packed(zserio_context.driver_profile, zserio_reader)
        else:
            self._driver_profile_ = None

        if zserio_reader.read_bool():
            self._max_poly_count_ = zserio_context.max_poly_count.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        else:
            self._max_poly_count_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)
        self._origin_.write(zserio_writer)
        if self.is_time_budget_used():
            zserio_writer.write_varuint(self._time_budget_)
        if self.is_distance_meters_used():
            zserio_writer.write_varuint32(self._distance_meters_)
        self._vehicle_details_.write(zserio_writer)
        if self.is_vehicle_pose_used():
            zserio_writer.write_bool(True)
            self._vehicle_pose_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_driver_profile_used():
            zserio_writer.write_bool(True)
            self._driver_profile_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        if self.is_max_poly_count_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varuint32(self._max_poly_count_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: RangeProjectionRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        self._origin_.write_packed(zserio_context.origin, zserio_writer)

        if self.is_time_budget_used():
            zserio_context.time_budget.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._time_budget_)

        if self.is_distance_meters_used():
            zserio_context.distance_meters.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._distance_meters_)

        self._vehicle_details_.write_packed(zserio_context.vehicle_details, zserio_writer)

        if self.is_vehicle_pose_used():
            zserio_writer.write_bool(True)
            self._vehicle_pose_.write_packed(zserio_context.vehicle_pose, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_driver_profile_used():
            zserio_writer.write_bool(True)
            self._driver_profile_.write_packed(zserio_context.driver_profile, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_max_poly_count_used():
            zserio_writer.write_bool(True)
            zserio_context.max_poly_count.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._max_poly_count_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._origin_ = nds.routing.route.waypoint.Waypoint.ZserioPackingContext()
            self._time_budget_ = zserio.array.DeltaContext()
            self._distance_meters_ = zserio.array.DeltaContext()
            self._vehicle_details_ = nds.core.vehicle.vehicle_details.VehicleDetails.ZserioPackingContext()
            self._vehicle_pose_ = nds.core.vehicle.vehicle_pose.VehiclePose.ZserioPackingContext()
            self._driver_profile_ = nds.routing.types.driver_profile.DriverProfile.ZserioPackingContext()
            self._max_poly_count_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_

        @property
        def origin(self):
            return self._origin_

        @property
        def time_budget(self):
            return self._time_budget_

        @property
        def distance_meters(self):
            return self._distance_meters_

        @property
        def vehicle_details(self):
            return self._vehicle_details_

        @property
        def vehicle_pose(self):
            return self._vehicle_pose_

        @property
        def driver_profile(self):
            return self._driver_profile_

        @property
        def max_poly_count(self):
            return self._max_poly_count_
