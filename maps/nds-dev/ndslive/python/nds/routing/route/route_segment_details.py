# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.toll_cost
import nds.core.types.traffic_enforcement_camera_type
import nds.core.types.traffic_enforcement_zone_type
import nds.routing.route.delay_information
import nds.routing.types.pollution
import nds.routing.types.route_segment_type

class RouteSegmentDetails:
    def __init__(
            self,
            type_: nds.routing.types.route_segment_type.RouteSegmentType,
            *,
            delay_: typing.Union[nds.routing.route.delay_information.DelayInformation, None] = None,
            pollution_: typing.Union[nds.routing.types.pollution.Pollution, None] = None,
            toll_cost_: typing.Union[nds.core.types.toll_cost.TollCost, None] = None,
            traffic_enforcement_camera_type_: typing.Union[nds.core.types.traffic_enforcement_camera_type.TrafficEnforcementCameraType, None] = None,
            traffic_enforcement_zone_type_: typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if delay_ is not None:
            self._choice = delay_
        if pollution_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RouteSegmentDetails is ambiguous!")
            self._choice = pollution_
        if toll_cost_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RouteSegmentDetails is ambiguous!")
            self._choice = toll_cost_
        if traffic_enforcement_camera_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RouteSegmentDetails is ambiguous!")
            self._choice = traffic_enforcement_camera_type_
        if traffic_enforcement_zone_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice RouteSegmentDetails is ambiguous!")
            self._choice = traffic_enforcement_zone_type_

    @classmethod
    def from_reader(
            cls: typing.Type['RouteSegmentDetails'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routing.types.route_segment_type.RouteSegmentType) -> 'RouteSegmentDetails':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RouteSegmentDetails'],
            zserio_context: RouteSegmentDetails.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.routing.types.route_segment_type.RouteSegmentType) -> 'RouteSegmentDetails':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RouteSegmentDetails):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

        return result

    @property
    def type(self) -> nds.routing.types.route_segment_type.RouteSegmentType:
        return self._type_

    @property
    def delay(self) -> typing.Union[nds.routing.route.delay_information.DelayInformation, None]:
        return self._choice

    @delay.setter
    def delay(self, delay_: typing.Union[nds.routing.route.delay_information.DelayInformation, None]) -> None:
        self._choice = delay_

    @property
    def pollution(self) -> typing.Union[nds.routing.types.pollution.Pollution, None]:
        return self._choice

    @pollution.setter
    def pollution(self, pollution_: typing.Union[nds.routing.types.pollution.Pollution, None]) -> None:
        self._choice = pollution_

    @property
    def toll_cost(self) -> typing.Union[nds.core.types.toll_cost.TollCost, None]:
        return self._choice

    @toll_cost.setter
    def toll_cost(self, toll_cost_: typing.Union[nds.core.types.toll_cost.TollCost, None]) -> None:
        self._choice = toll_cost_

    @property
    def traffic_enforcement_camera_type(self) -> typing.Union[nds.core.types.traffic_enforcement_camera_type.TrafficEnforcementCameraType, None]:
        return self._choice

    @traffic_enforcement_camera_type.setter
    def traffic_enforcement_camera_type(self, traffic_enforcement_camera_type_: typing.Union[nds.core.types.traffic_enforcement_camera_type.TrafficEnforcementCameraType, None]) -> None:
        self._choice = traffic_enforcement_camera_type_

    @property
    def traffic_enforcement_zone_type(self) -> typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None]:
        return self._choice

    @traffic_enforcement_zone_type.setter
    def traffic_enforcement_zone_type(self, traffic_enforcement_zone_type_: typing.Union[nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType, None]) -> None:
        self._choice = traffic_enforcement_zone_type_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            return self.CHOICE_DELAY
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            return self.CHOICE_POLLUTION
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            return self.CHOICE_TOLL_COST
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            return self.CHOICE_TRAFFIC_ENFORCEMENT_CAMERA_TYPE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            return self.CHOICE_TRAFFIC_ENFORCEMENT_ZONE_TYPE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            return self.UNDEFINED_CHOICE
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: RouteSegmentDetails.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            self._choice.init_packing_context(zserio_context.delay)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            self._choice.init_packing_context(zserio_context.pollution)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            self._choice.init_packing_context(zserio_context.toll_cost)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.init_packing_context(zserio_context.traffic_enforcement_camera_type)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.init_packing_context(zserio_context.traffic_enforcement_zone_type)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RouteSegmentDetails.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.delay, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.pollution, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.toll_cost, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_enforcement_camera_type, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.traffic_enforcement_zone_type, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RouteSegmentDetails.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.delay, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.pollution, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.toll_cost, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_enforcement_camera_type, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.traffic_enforcement_zone_type, end_bitposition)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            self._choice = nds.routing.route.delay_information.DelayInformation.from_reader(zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            self._choice = nds.routing.types.pollution.Pollution.from_reader(zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            self._choice = nds.core.types.toll_cost.TollCost.from_reader(zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice = nds.core.types.traffic_enforcement_camera_type.TrafficEnforcementCameraType.from_reader(zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice = nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType.from_reader(zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

    def read_packed(self, zserio_context: RouteSegmentDetails.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            self._choice = nds.routing.route.delay_information.DelayInformation.from_reader_packed(zserio_context.delay, zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            self._choice = nds.routing.types.pollution.Pollution.from_reader_packed(zserio_context.pollution, zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            self._choice = nds.core.types.toll_cost.TollCost.from_reader_packed(zserio_context.toll_cost, zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice = nds.core.types.traffic_enforcement_camera_type.TrafficEnforcementCameraType.from_reader_packed(zserio_context.traffic_enforcement_camera_type, zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice = nds.core.types.traffic_enforcement_zone_type.TrafficEnforcementZoneType.from_reader_packed(zserio_context.traffic_enforcement_zone_type, zserio_reader)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            self._choice.write(zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            self._choice.write(zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.write(zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.write(zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

    def write_packed(self, zserio_context: RouteSegmentDetails.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.routing.types.route_segment_type.RouteSegmentType.DELAY):
            self._choice.write_packed(zserio_context.delay, zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.POLLUTION):
            self._choice.write_packed(zserio_context.pollution, zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TOLL):
            self._choice.write_packed(zserio_context.toll_cost, zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_CAMERA):
            self._choice.write_packed(zserio_context.traffic_enforcement_camera_type, zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TRAFFIC_ENFORCEMENT_ZONE):
            self._choice.write_packed(zserio_context.traffic_enforcement_zone_type, zserio_writer)
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.TUNNEL):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BRIDGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.FERRY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.CAR_TRAIN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PUBLIC_TRANSPORT):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.MOTORWAY):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.UNPAVED):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L3):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L4):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.AUTOMATED_DRIVING_L5):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LIMITED_MOBILE_DATA_COVERAGE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.VIGNETTE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PEDESTRIAN):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.BIKE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.SCOOTER):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.ENVIRONMENT_ZONE):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.USER_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.PHYSICAL_RESTRICTED_ACCESS):
            pass
        elif selector == (nds.routing.types.route_segment_type.RouteSegmentType.LEGAL_RESTRICTED_ACCESS):
            pass
        else:
            pass

    class ZserioPackingContext:
        def __init__(self):
            self._delay_ = nds.routing.route.delay_information.DelayInformation.ZserioPackingContext()
            self._pollution_ = nds.routing.types.pollution.Pollution.ZserioPackingContext()
            self._toll_cost_ = nds.core.types.toll_cost.TollCost.ZserioPackingContext()
            self._traffic_enforcement_camera_type_ = zserio.array.DeltaContext()
            self._traffic_enforcement_zone_type_ = zserio.array.DeltaContext()

        @property
        def delay(self):
            return self._delay_

        @property
        def pollution(self):
            return self._pollution_

        @property
        def toll_cost(self):
            return self._toll_cost_

        @property
        def traffic_enforcement_camera_type(self):
            return self._traffic_enforcement_camera_type_

        @property
        def traffic_enforcement_zone_type(self):
            return self._traffic_enforcement_zone_type_

    CHOICE_DELAY = 0
    CHOICE_POLLUTION = 1
    CHOICE_TOLL_COST = 2
    CHOICE_TRAFFIC_ENFORCEMENT_CAMERA_TYPE = 3
    CHOICE_TRAFFIC_ENFORCEMENT_ZONE_TYPE = 4
    UNDEFINED_CHOICE = -1
