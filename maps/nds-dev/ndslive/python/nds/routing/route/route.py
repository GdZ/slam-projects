# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_path
import nds.core.types.length_centimeters
import nds.core.types.seconds
import nds.routing.guidance.guidance_instructions
import nds.routing.route.route_geometry
import nds.routing.route.route_point
import nds.routing.route.route_segment
import nds.routing.types.route_segment_consumption

class Route:
    def __init__(
            self,
            length_: nds.core.types.length_centimeters.LengthCentimeters = nds.core.types.length_centimeters.LengthCentimeters(),
            travel_time_: nds.core.types.seconds.Seconds = nds.core.types.seconds.Seconds(),
            route_path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None] = None,
            route_point_types_: typing.List[nds.routing.route.route_point.RoutePoint] = None,
            num_route_segments_: int = int(),
            segments_: typing.List[nds.routing.route.route_segment.RouteSegment] = None,
            vehicle_consumption_: typing.Optional[typing.List[nds.routing.types.route_segment_consumption.RouteSegmentConsumption]] = None,
            guidance_: typing.Optional[nds.routing.guidance.guidance_instructions.GuidanceInstructions] = None,
            geometries_: typing.Optional[typing.List[nds.routing.route.route_geometry.RouteGeometry]] = None) -> None:
        self._length_ = length_
        self._travel_time_ = travel_time_
        self._route_path_ = route_path_
        self._route_point_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_point_types()), route_point_types_)
        self._num_route_segments_ = num_route_segments_
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), segments_)
        if vehicle_consumption_ is None:
            self._vehicle_consumption_ = None
        else:
            self._vehicle_consumption_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vehicle_consumption()), vehicle_consumption_)
        self._guidance_ = guidance_
        if geometries_ is None:
            self._geometries_ = None
        else:
            self._geometries_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_geometries()), geometries_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Route'],
            zserio_reader: zserio.BitStreamReader) -> 'Route':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Route'],
            zserio_context: Route.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Route':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Route):
            return ((self._length_ == other._length_) and
                    (self._travel_time_ == other._travel_time_) and
                    (self._route_path_ == other._route_path_) and
                    (self._route_point_types_ == other._route_point_types_) and
                    (self._num_route_segments_ == other._num_route_segments_) and
                    (self._segments_ == other._segments_) and
                    (not other.is_vehicle_consumption_used() if not self.is_vehicle_consumption_used() else (self._vehicle_consumption_ == other._vehicle_consumption_)) and
                    (not other.is_guidance_used() if not self.is_guidance_used() else (self._guidance_ == other._guidance_)) and
                    (not other.is_geometries_used() if not self.is_geometries_used() else (self._geometries_ == other._geometries_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._travel_time_)
        result = zserio.hashcode.calc_hashcode_object(result, self._route_path_)
        result = zserio.hashcode.calc_hashcode_object(result, self._route_point_types_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_route_segments_)
        result = zserio.hashcode.calc_hashcode_object(result, self._segments_)
        if self.is_vehicle_consumption_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._vehicle_consumption_)
        if self.is_guidance_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._guidance_)
        if self.is_geometries_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._geometries_)

        return result

    @property
    def length(self) -> nds.core.types.length_centimeters.LengthCentimeters:
        return self._length_

    @length.setter
    def length(self, length_: nds.core.types.length_centimeters.LengthCentimeters) -> None:
        self._length_ = length_

    @property
    def travel_time(self) -> nds.core.types.seconds.Seconds:
        return self._travel_time_

    @travel_time.setter
    def travel_time(self, travel_time_: nds.core.types.seconds.Seconds) -> None:
        self._travel_time_ = travel_time_

    @property
    def route_path(self) -> typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]:
        return self._route_path_

    @route_path.setter
    def route_path(self, route_path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]) -> None:
        self._route_path_ = route_path_

    @property
    def route_point_types(self) -> typing.List[nds.routing.route.route_point.RoutePoint]:
        return self._route_point_types_.raw_array

    @route_point_types.setter
    def route_point_types(self, route_point_types_: typing.List[nds.routing.route.route_point.RoutePoint]) -> None:
        self._route_point_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_point_types()), route_point_types_)

    @property
    def num_route_segments(self) -> int:
        return self._num_route_segments_

    @num_route_segments.setter
    def num_route_segments(self, num_route_segments_: int) -> None:
        self._num_route_segments_ = num_route_segments_

    @property
    def segments(self) -> typing.List[nds.routing.route.route_segment.RouteSegment]:
        return self._segments_.raw_array

    @segments.setter
    def segments(self, segments_: typing.List[nds.routing.route.route_segment.RouteSegment]) -> None:
        self._segments_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), segments_)

    @property
    def vehicle_consumption(self) -> typing.Optional[typing.List[nds.routing.types.route_segment_consumption.RouteSegmentConsumption]]:
        return None if self._vehicle_consumption_ is None else self._vehicle_consumption_.raw_array

    @vehicle_consumption.setter
    def vehicle_consumption(self, vehicle_consumption_: typing.Optional[typing.List[nds.routing.types.route_segment_consumption.RouteSegmentConsumption]]) -> None:
        if vehicle_consumption_ is None:
            self._vehicle_consumption_ = None
        else:
            self._vehicle_consumption_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vehicle_consumption()), vehicle_consumption_)

    def is_vehicle_consumption_used(self) -> bool:
        return self.is_vehicle_consumption_set()

    def is_vehicle_consumption_set(self) -> bool:
        return not self._vehicle_consumption_ is None

    def reset_vehicle_consumption(self) -> None:
        self._vehicle_consumption_ = None

    @property
    def guidance(self) -> typing.Optional[nds.routing.guidance.guidance_instructions.GuidanceInstructions]:
        return self._guidance_

    @guidance.setter
    def guidance(self, guidance_: typing.Optional[nds.routing.guidance.guidance_instructions.GuidanceInstructions]) -> None:
        self._guidance_ = guidance_

    def is_guidance_used(self) -> bool:
        return self.is_guidance_set()

    def is_guidance_set(self) -> bool:
        return not self._guidance_ is None

    def reset_guidance(self) -> None:
        self._guidance_ = None

    @property
    def geometries(self) -> typing.Optional[typing.List[nds.routing.route.route_geometry.RouteGeometry]]:
        return None if self._geometries_ is None else self._geometries_.raw_array

    @geometries.setter
    def geometries(self, geometries_: typing.Optional[typing.List[nds.routing.route.route_geometry.RouteGeometry]]) -> None:
        if geometries_ is None:
            self._geometries_ = None
        else:
            self._geometries_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_geometries()), geometries_, is_auto=True)

    def is_geometries_used(self) -> bool:
        return self.is_geometries_set()

    def is_geometries_set(self) -> bool:
        return not self._geometries_ is None

    def reset_geometries(self) -> None:
        self._geometries_ = None

    def init_packing_context(self, zserio_context: Route.ZserioPackingContext) -> None:
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)
        zserio_context.travel_time.init(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        self._route_path_.init_packing_context(zserio_context.route_path)
        zserio_context.num_route_segments.init(zserio.array.VarUInt32ArrayTraits(), self._num_route_segments_)
        if self.is_guidance_used():
            self._guidance_.init_packing_context(zserio_context.guidance)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._travel_time_)
        end_bitposition += self._route_path_.bitsizeof(end_bitposition)
        end_bitposition += self._route_point_types_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._num_route_segments_)
        end_bitposition += self._segments_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_consumption_used():
            end_bitposition += self._vehicle_consumption_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_guidance_used():
            end_bitposition += self._guidance_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_geometries_used():
            end_bitposition += self._geometries_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Route.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        end_bitposition += self._route_path_.bitsizeof_packed(zserio_context.route_path, end_bitposition)
        end_bitposition += self._route_point_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.num_route_segments.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._num_route_segments_)
        end_bitposition += self._segments_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_consumption_used():
            end_bitposition += self._vehicle_consumption_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_guidance_used():
            end_bitposition += self._guidance_.bitsizeof_packed(zserio_context.guidance, end_bitposition)
        end_bitposition += 1
        if self.is_geometries_used():
            end_bitposition += self._geometries_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._travel_time_)
        end_bitposition = self._route_path_.initialize_offsets(end_bitposition)
        end_bitposition = self._route_point_types_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._num_route_segments_)
        end_bitposition = self._segments_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_consumption_used():
            end_bitposition = self._vehicle_consumption_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_guidance_used():
            end_bitposition = self._guidance_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_geometries_used():
            end_bitposition = self._geometries_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Route.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        end_bitposition = self._route_path_.initialize_offsets_packed(zserio_context.route_path, end_bitposition)
        end_bitposition = self._route_point_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.num_route_segments.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._num_route_segments_)
        end_bitposition = self._segments_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_vehicle_consumption_used():
            end_bitposition = self._vehicle_consumption_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_guidance_used():
            end_bitposition = self._guidance_.initialize_offsets_packed(zserio_context.guidance, end_bitposition)
        end_bitposition += 1
        if self.is_geometries_used():
            end_bitposition = self._geometries_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._length_ = zserio_reader.read_varuint32()
        self._travel_time_ = zserio_reader.read_varuint()
        self._route_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader(zserio_reader)
        self._route_point_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_point_types()), zserio_reader, self._route_path_.path_geometry.line.num_positions)
        self._num_route_segments_ = zserio_reader.read_varuint32()
        self._segments_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), zserio_reader, self._num_route_segments_)
        if zserio_reader.read_bool():
            self._vehicle_consumption_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vehicle_consumption()), zserio_reader, self._num_route_segments_)
        else:
            self._vehicle_consumption_ = None
        if zserio_reader.read_bool():
            self._guidance_ = nds.routing.guidance.guidance_instructions.GuidanceInstructions.from_reader(zserio_reader)
        else:
            self._guidance_ = None
        if zserio_reader.read_bool():
            self._geometries_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_geometries()), zserio_reader, is_auto=True)
        else:
            self._geometries_ = None

    def read_packed(self, zserio_context: Route.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._travel_time_ = zserio_context.travel_time.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._route_path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader_packed(zserio_context.route_path, zserio_reader)

        self._route_point_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_route_point_types()), zserio_reader, self._route_path_.path_geometry.line.num_positions)

        self._num_route_segments_ = zserio_context.num_route_segments.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._segments_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_segments()), zserio_reader, self._num_route_segments_)

        if zserio_reader.read_bool():
            self._vehicle_consumption_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vehicle_consumption()), zserio_reader, self._num_route_segments_)
        else:
            self._vehicle_consumption_ = None

        if zserio_reader.read_bool():
            self._guidance_ = nds.routing.guidance.guidance_instructions.GuidanceInstructions.from_reader_packed(zserio_context.guidance, zserio_reader)
        else:
            self._guidance_ = None

        if zserio_reader.read_bool():
            self._geometries_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_geometries()), zserio_reader, is_auto=True)
        else:
            self._geometries_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._length_)

        zserio_writer.write_varuint(self._travel_time_)

        self._route_path_.write(zserio_writer)

        # check array length
        if len(self._route_point_types_) != (self._route_path_.path_geometry.line.num_positions):
            raise zserio.PythonRuntimeException("Wrong array length for field Route.routePointTypes: "
                                                f"{len(self._route_point_types_)} != {self._route_path_.path_geometry.line.num_positions}!")
        self._route_point_types_.write(zserio_writer)

        zserio_writer.write_varuint32(self._num_route_segments_)

        # check array length
        if len(self._segments_) != (self._num_route_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field Route.segments: "
                                                f"{len(self._segments_)} != {self._num_route_segments_}!")
        self._segments_.write(zserio_writer)

        if self.is_vehicle_consumption_used():
            zserio_writer.write_bool(True)
            # check array length
            if len(self._vehicle_consumption_) != (self._num_route_segments_):
                raise zserio.PythonRuntimeException("Wrong array length for field Route.vehicleConsumption: "
                                                    f"{len(self._vehicle_consumption_)} != {self._num_route_segments_}!")
            self._vehicle_consumption_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_guidance_used():
            zserio_writer.write_bool(True)
            self._guidance_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_geometries_used():
            zserio_writer.write_bool(True)
            self._geometries_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: Route.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        zserio_context.travel_time.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._travel_time_)

        self._route_path_.write_packed(zserio_context.route_path, zserio_writer)

        # check array length
        if len(self._route_point_types_) != (self._route_path_.path_geometry.line.num_positions):
            raise zserio.PythonRuntimeException("Wrong array length for field Route.routePointTypes: "
                                                f"{len(self._route_point_types_)} != {self._route_path_.path_geometry.line.num_positions}!")
        self._route_point_types_.write_packed(zserio_writer)

        zserio_context.num_route_segments.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._num_route_segments_)

        # check array length
        if len(self._segments_) != (self._num_route_segments_):
            raise zserio.PythonRuntimeException("Wrong array length for field Route.segments: "
                                                f"{len(self._segments_)} != {self._num_route_segments_}!")
        self._segments_.write_packed(zserio_writer)

        if self.is_vehicle_consumption_used():
            zserio_writer.write_bool(True)
            # check array length
            if len(self._vehicle_consumption_) != (self._num_route_segments_):
                raise zserio.PythonRuntimeException("Wrong array length for field Route.vehicleConsumption: "
                                                    f"{len(self._vehicle_consumption_)} != {self._num_route_segments_}!")
            self._vehicle_consumption_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_guidance_used():
            zserio_writer.write_bool(True)
            self._guidance_.write_packed(zserio_context.guidance, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        if self.is_geometries_used():
            zserio_writer.write_bool(True)
            self._geometries_.write_packed(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._length_ = zserio.array.DeltaContext()
            self._travel_time_ = zserio.array.DeltaContext()
            self._route_path_ = nds.core.location.road_location_path.RoadLocationPath.ZserioPackingContext()
            self._num_route_segments_ = zserio.array.DeltaContext()
            self._guidance_ = nds.routing.guidance.guidance_instructions.GuidanceInstructions.ZserioPackingContext()

        @property
        def length(self):
            return self._length_

        @property
        def travel_time(self):
            return self._travel_time_

        @property
        def route_path(self):
            return self._route_path_

        @property
        def num_route_segments(self):
            return self._num_route_segments_

        @property
        def guidance(self):
            return self._guidance_

    class _ZserioElementFactory_route_point_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_point.RoutePoint:
            del zserio_index
            return nds.routing.route.route_point.RoutePoint.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route_point.RoutePoint.ZserioPackingContext:
            return nds.routing.route.route_point.RoutePoint.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route_point.RoutePoint.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_point.RoutePoint:
            del zserio_index
            return nds.routing.route.route_point.RoutePoint.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_segments:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_segment.RouteSegment:
            del zserio_index
            return nds.routing.route.route_segment.RouteSegment.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route_segment.RouteSegment.ZserioPackingContext:
            return nds.routing.route.route_segment.RouteSegment.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route_segment.RouteSegment.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_segment.RouteSegment:
            del zserio_index
            return nds.routing.route.route_segment.RouteSegment.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_vehicle_consumption:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.types.route_segment_consumption.RouteSegmentConsumption:
            del zserio_index
            return nds.routing.types.route_segment_consumption.RouteSegmentConsumption.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.types.route_segment_consumption.RouteSegmentConsumption.ZserioPackingContext:
            return nds.routing.types.route_segment_consumption.RouteSegmentConsumption.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.types.route_segment_consumption.RouteSegmentConsumption.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.types.route_segment_consumption.RouteSegmentConsumption:
            del zserio_index
            return nds.routing.types.route_segment_consumption.RouteSegmentConsumption.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_geometries:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_geometry.RouteGeometry:
            del zserio_index
            return nds.routing.route.route_geometry.RouteGeometry.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.routing.route.route_geometry.RouteGeometry.ZserioPackingContext:
            return nds.routing.route.route_geometry.RouteGeometry.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.routing.route.route_geometry.RouteGeometry.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.routing.route.route_geometry.RouteGeometry:
            del zserio_index
            return nds.routing.route.route_geometry.RouteGeometry.from_reader_packed(zserio_context, zserio_reader)
