# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.line_position
import nds.core.geometry.line_position_offset2d
import nds.core.types.length_centimeters
import nds.core.types.seconds
import nds.routing.route.route_segment_details
import nds.routing.types.route_segment_type

class RouteSegment:
    def __init__(
            self,
            has_start_offset_: bool = bool(),
            has_end_offset_: bool = bool(),
            start_position_: typing.Optional[nds.core.geometry.line_position.LinePosition] = None,
            start_position_with_offset_: typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D] = None,
            end_position_: typing.Optional[nds.core.geometry.line_position.LinePosition] = None,
            end_position_with_offset_: typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D] = None,
            length_: nds.core.types.length_centimeters.LengthCentimeters = nds.core.types.length_centimeters.LengthCentimeters(),
            travel_time_: nds.core.types.seconds.Seconds = nds.core.types.seconds.Seconds(),
            type_: typing.Union[nds.routing.types.route_segment_type.RouteSegmentType, None] = None,
            segment_details_: typing.Union[nds.routing.route.route_segment_details.RouteSegmentDetails, None] = None) -> None:
        self._has_start_offset_ = has_start_offset_
        self._has_end_offset_ = has_end_offset_
        self._start_position_ = start_position_
        self._start_position_with_offset_ = start_position_with_offset_
        self._end_position_ = end_position_
        self._end_position_with_offset_ = end_position_with_offset_
        self._length_ = length_
        self._travel_time_ = travel_time_
        self._type_ = type_
        self._segment_details_ = segment_details_

    @classmethod
    def from_reader(
            cls: typing.Type['RouteSegment'],
            zserio_reader: zserio.BitStreamReader) -> 'RouteSegment':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RouteSegment'],
            zserio_context: RouteSegment.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RouteSegment':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RouteSegment):
            return ((self._has_start_offset_ == other._has_start_offset_) and
                    (self._has_end_offset_ == other._has_end_offset_) and
                    (not other.is_start_position_used() if not self.is_start_position_used() else (self._start_position_ == other._start_position_)) and
                    (not other.is_start_position_with_offset_used() if not self.is_start_position_with_offset_used() else (self._start_position_with_offset_ == other._start_position_with_offset_)) and
                    (not other.is_end_position_used() if not self.is_end_position_used() else (self._end_position_ == other._end_position_)) and
                    (not other.is_end_position_with_offset_used() if not self.is_end_position_with_offset_used() else (self._end_position_with_offset_ == other._end_position_with_offset_)) and
                    (self._length_ == other._length_) and
                    (self._travel_time_ == other._travel_time_) and
                    (self._type_ == other._type_) and
                    (self._segment_details_ == other._segment_details_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_start_offset_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_end_offset_)
        if self.is_start_position_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._start_position_)
        if self.is_start_position_with_offset_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._start_position_with_offset_)
        if self.is_end_position_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._end_position_)
        if self.is_end_position_with_offset_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._end_position_with_offset_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._length_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._travel_time_)
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._segment_details_)

        return result

    @property
    def has_start_offset(self) -> bool:
        return self._has_start_offset_

    @has_start_offset.setter
    def has_start_offset(self, has_start_offset_: bool) -> None:
        self._has_start_offset_ = has_start_offset_

    @property
    def has_end_offset(self) -> bool:
        return self._has_end_offset_

    @has_end_offset.setter
    def has_end_offset(self, has_end_offset_: bool) -> None:
        self._has_end_offset_ = has_end_offset_

    @property
    def start_position(self) -> typing.Optional[nds.core.geometry.line_position.LinePosition]:
        return self._start_position_

    @start_position.setter
    def start_position(self, start_position_: typing.Optional[nds.core.geometry.line_position.LinePosition]) -> None:
        self._start_position_ = start_position_

    def is_start_position_used(self) -> bool:
        return not self._has_start_offset_

    def is_start_position_set(self) -> bool:
        return not self._start_position_ is None

    def reset_start_position(self) -> None:
        self._start_position_ = None

    @property
    def start_position_with_offset(self) -> typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D]:
        return self._start_position_with_offset_

    @start_position_with_offset.setter
    def start_position_with_offset(self, start_position_with_offset_: typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D]) -> None:
        self._start_position_with_offset_ = start_position_with_offset_

    def is_start_position_with_offset_used(self) -> bool:
        return self._has_start_offset_

    def is_start_position_with_offset_set(self) -> bool:
        return not self._start_position_with_offset_ is None

    def reset_start_position_with_offset(self) -> None:
        self._start_position_with_offset_ = None

    @property
    def end_position(self) -> typing.Optional[nds.core.geometry.line_position.LinePosition]:
        return self._end_position_

    @end_position.setter
    def end_position(self, end_position_: typing.Optional[nds.core.geometry.line_position.LinePosition]) -> None:
        self._end_position_ = end_position_

    def is_end_position_used(self) -> bool:
        return not self._has_end_offset_

    def is_end_position_set(self) -> bool:
        return not self._end_position_ is None

    def reset_end_position(self) -> None:
        self._end_position_ = None

    @property
    def end_position_with_offset(self) -> typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D]:
        return self._end_position_with_offset_

    @end_position_with_offset.setter
    def end_position_with_offset(self, end_position_with_offset_: typing.Optional[nds.core.geometry.line_position_offset2d.LinePositionOffset2D]) -> None:
        self._end_position_with_offset_ = end_position_with_offset_

    def is_end_position_with_offset_used(self) -> bool:
        return self._has_end_offset_

    def is_end_position_with_offset_set(self) -> bool:
        return not self._end_position_with_offset_ is None

    def reset_end_position_with_offset(self) -> None:
        self._end_position_with_offset_ = None

    @property
    def length(self) -> nds.core.types.length_centimeters.LengthCentimeters:
        return self._length_

    @length.setter
    def length(self, length_: nds.core.types.length_centimeters.LengthCentimeters) -> None:
        self._length_ = length_

    @property
    def travel_time(self) -> nds.core.types.seconds.Seconds:
        return self._travel_time_

    @travel_time.setter
    def travel_time(self, travel_time_: nds.core.types.seconds.Seconds) -> None:
        self._travel_time_ = travel_time_

    @property
    def type(self) -> typing.Union[nds.routing.types.route_segment_type.RouteSegmentType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.routing.types.route_segment_type.RouteSegmentType, None]) -> None:
        self._type_ = type_

    @property
    def segment_details(self) -> typing.Union[nds.routing.route.route_segment_details.RouteSegmentDetails, None]:
        return self._segment_details_

    @segment_details.setter
    def segment_details(self, segment_details_: typing.Union[nds.routing.route.route_segment_details.RouteSegmentDetails, None]) -> None:
        self._segment_details_ = segment_details_

    def init_packing_context(self, zserio_context: RouteSegment.ZserioPackingContext) -> None:
        if self.is_start_position_used():
            zserio_context.start_position.init(zserio.array.VarSizeArrayTraits(), self._start_position_)
        if self.is_start_position_with_offset_used():
            self._start_position_with_offset_.init_packing_context(zserio_context.start_position_with_offset)
        if self.is_end_position_used():
            zserio_context.end_position.init(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_end_position_with_offset_used():
            self._end_position_with_offset_.init_packing_context(zserio_context.end_position_with_offset)
        zserio_context.length.init(zserio.array.VarUInt32ArrayTraits(), self._length_)
        zserio_context.travel_time.init(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        self._type_.init_packing_context(zserio_context.type)
        self._segment_details_.init_packing_context(zserio_context.segment_details)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        if self.is_start_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_position_)
        if self.is_start_position_with_offset_used():
            end_bitposition += self._start_position_with_offset_.bitsizeof(end_bitposition)
        if self.is_end_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_position_)
        if self.is_end_position_with_offset_used():
            end_bitposition += self._end_position_with_offset_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._travel_time_)
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._segment_details_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RouteSegment.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        if self.is_start_position_used():
            end_bitposition += zserio_context.start_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_position_)
        if self.is_start_position_with_offset_used():
            end_bitposition += self._start_position_with_offset_.bitsizeof_packed(zserio_context.start_position_with_offset, end_bitposition)
        if self.is_end_position_used():
            end_bitposition += zserio_context.end_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_end_position_with_offset_used():
            end_bitposition += self._end_position_with_offset_.bitsizeof_packed(zserio_context.end_position_with_offset, end_bitposition)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._segment_details_.bitsizeof_packed(zserio_context.segment_details, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        if self.is_start_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._start_position_)
        if self.is_start_position_with_offset_used():
            end_bitposition = self._start_position_with_offset_.initialize_offsets(end_bitposition)
        if self.is_end_position_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._end_position_)
        if self.is_end_position_with_offset_used():
            end_bitposition = self._end_position_with_offset_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._length_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._travel_time_)
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._segment_details_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RouteSegment.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        if self.is_start_position_used():
            end_bitposition += zserio_context.start_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._start_position_)
        if self.is_start_position_with_offset_used():
            end_bitposition = self._start_position_with_offset_.initialize_offsets_packed(zserio_context.start_position_with_offset, end_bitposition)
        if self.is_end_position_used():
            end_bitposition += zserio_context.end_position.bitsizeof(zserio.array.VarSizeArrayTraits(), self._end_position_)
        if self.is_end_position_with_offset_used():
            end_bitposition = self._end_position_with_offset_.initialize_offsets_packed(zserio_context.end_position_with_offset, end_bitposition)
        end_bitposition += zserio_context.length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._length_)
        end_bitposition += zserio_context.travel_time.bitsizeof(zserio.array.VarUIntArrayTraits(), self._travel_time_)
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._segment_details_.initialize_offsets_packed(zserio_context.segment_details, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_start_offset_ = zserio_reader.read_bool()
        self._has_end_offset_ = zserio_reader.read_bool()
        if self.is_start_position_used():
            self._start_position_ = zserio_reader.read_varsize()
        else:
            self._start_position_ = None
        if self.is_start_position_with_offset_used():
            self._start_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.from_reader(zserio_reader, 0)
        else:
            self._start_position_with_offset_ = None
        if self.is_end_position_used():
            self._end_position_ = zserio_reader.read_varsize()
        else:
            self._end_position_ = None
        if self.is_end_position_with_offset_used():
            self._end_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.from_reader(zserio_reader, 0)
        else:
            self._end_position_with_offset_ = None
        self._length_ = zserio_reader.read_varuint32()
        self._travel_time_ = zserio_reader.read_varuint()
        self._type_ = nds.routing.types.route_segment_type.RouteSegmentType.from_reader(zserio_reader)
        self._segment_details_ = nds.routing.route.route_segment_details.RouteSegmentDetails.from_reader(zserio_reader, self._type_)

    def read_packed(self, zserio_context: RouteSegment.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_start_offset_ = zserio_reader.read_bool()

        self._has_end_offset_ = zserio_reader.read_bool()

        if self.is_start_position_used():
            self._start_position_ = zserio_context.start_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        else:
            self._start_position_ = None

        if self.is_start_position_with_offset_used():
            self._start_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.from_reader_packed(zserio_context.start_position_with_offset, zserio_reader, 0)
        else:
            self._start_position_with_offset_ = None

        if self.is_end_position_used():
            self._end_position_ = zserio_context.end_position.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
        else:
            self._end_position_ = None

        if self.is_end_position_with_offset_used():
            self._end_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.from_reader_packed(zserio_context.end_position_with_offset, zserio_reader, 0)
        else:
            self._end_position_with_offset_ = None

        self._length_ = zserio_context.length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._travel_time_ = zserio_context.travel_time.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._type_ = nds.routing.types.route_segment_type.RouteSegmentType.from_reader_packed(zserio_context.type, zserio_reader)

        self._segment_details_ = nds.routing.route.route_segment_details.RouteSegmentDetails.from_reader_packed(zserio_context.segment_details, zserio_reader, self._type_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_start_offset_)

        zserio_writer.write_bool(self._has_end_offset_)

        if self.is_start_position_used():
            zserio_writer.write_varsize(self._start_position_)

        if self.is_start_position_with_offset_used():
            # check parameters
            if self._start_position_with_offset_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteSegment.startPositionWithOffset: "
                                                    f"{self._start_position_with_offset_.shift} != {0}!")
            self._start_position_with_offset_.write(zserio_writer)

        if self.is_end_position_used():
            zserio_writer.write_varsize(self._end_position_)

        if self.is_end_position_with_offset_used():
            # check parameters
            if self._end_position_with_offset_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteSegment.endPositionWithOffset: "
                                                    f"{self._end_position_with_offset_.shift} != {0}!")
            self._end_position_with_offset_.write(zserio_writer)

        zserio_writer.write_varuint32(self._length_)

        zserio_writer.write_varuint(self._travel_time_)

        self._type_.write(zserio_writer)

        # check parameters
        if self._segment_details_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RouteSegment.segmentDetails: "
                                                f"{self._segment_details_.type} != {self._type_}!")
        self._segment_details_.write(zserio_writer)

    def write_packed(self, zserio_context: RouteSegment.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_start_offset_)

        zserio_writer.write_bool(self._has_end_offset_)

        if self.is_start_position_used():
            zserio_context.start_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._start_position_)

        if self.is_start_position_with_offset_used():
            # check parameters
            if self._start_position_with_offset_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteSegment.startPositionWithOffset: "
                                                    f"{self._start_position_with_offset_.shift} != {0}!")
            self._start_position_with_offset_.write_packed(zserio_context.start_position_with_offset, zserio_writer)

        if self.is_end_position_used():
            zserio_context.end_position.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._end_position_)

        if self.is_end_position_with_offset_used():
            # check parameters
            if self._end_position_with_offset_.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteSegment.endPositionWithOffset: "
                                                    f"{self._end_position_with_offset_.shift} != {0}!")
            self._end_position_with_offset_.write_packed(zserio_context.end_position_with_offset, zserio_writer)

        zserio_context.length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._length_)

        zserio_context.travel_time.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._travel_time_)

        self._type_.write_packed(zserio_context.type, zserio_writer)

        # check parameters
        if self._segment_details_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field RouteSegment.segmentDetails: "
                                                f"{self._segment_details_.type} != {self._type_}!")
        self._segment_details_.write_packed(zserio_context.segment_details, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._start_position_ = zserio.array.DeltaContext()
            self._start_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.ZserioPackingContext()
            self._end_position_ = zserio.array.DeltaContext()
            self._end_position_with_offset_ = nds.core.geometry.line_position_offset2d.LinePositionOffset2D.ZserioPackingContext()
            self._length_ = zserio.array.DeltaContext()
            self._travel_time_ = zserio.array.DeltaContext()
            self._type_ = zserio.array.DeltaContext()
            self._segment_details_ = nds.routing.route.route_segment_details.RouteSegmentDetails.ZserioPackingContext()

        @property
        def start_position(self):
            return self._start_position_

        @property
        def start_position_with_offset(self):
            return self._start_position_with_offset_

        @property
        def end_position(self):
            return self._end_position_

        @property
        def end_position_with_offset(self):
            return self._end_position_with_offset_

        @property
        def length(self):
            return self._length_

        @property
        def travel_time(self):
            return self._travel_time_

        @property
        def type(self):
            return self._type_

        @property
        def segment_details(self):
            return self._segment_details_
