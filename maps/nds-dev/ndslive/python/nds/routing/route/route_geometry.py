# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.line2d
import nds.core.types.scale_denominator

class RouteGeometry:
    def __init__(
            self,
            scale_: nds.core.types.scale_denominator.ScaleDenominator = nds.core.types.scale_denominator.ScaleDenominator(),
            shift_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            geometry_: typing.Union[nds.core.geometry.line2d.Line2D, None] = None) -> None:
        self._scale_ = scale_
        self._shift_ = shift_
        self._geometry_ = geometry_

    @classmethod
    def from_reader(
            cls: typing.Type['RouteGeometry'],
            zserio_reader: zserio.BitStreamReader) -> 'RouteGeometry':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RouteGeometry'],
            zserio_context: RouteGeometry.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RouteGeometry':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RouteGeometry):
            return ((self._scale_ == other._scale_) and
                    (self._shift_ == other._shift_) and
                    (self._geometry_ == other._geometry_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._scale_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._geometry_)

        return result

    @property
    def scale(self) -> nds.core.types.scale_denominator.ScaleDenominator:
        return self._scale_

    @scale.setter
    def scale(self, scale_: nds.core.types.scale_denominator.ScaleDenominator) -> None:
        self._scale_ = scale_

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @shift.setter
    def shift(self, shift_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._shift_ = shift_

    @property
    def geometry(self) -> typing.Union[nds.core.geometry.line2d.Line2D, None]:
        return self._geometry_

    @geometry.setter
    def geometry(self, geometry_: typing.Union[nds.core.geometry.line2d.Line2D, None]) -> None:
        self._geometry_ = geometry_

    def init_packing_context(self, zserio_context: RouteGeometry.ZserioPackingContext) -> None:
        zserio_context.scale.init(zserio.array.BitFieldArrayTraits(32), self._scale_)
        zserio_context.shift.init(zserio.array.BitFieldArrayTraits(5), self._shift_)
        self._geometry_.init_packing_context(zserio_context.geometry)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition += 5
        end_bitposition += self._geometry_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RouteGeometry.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.scale.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._scale_)
        end_bitposition += zserio_context.shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_)
        end_bitposition += self._geometry_.bitsizeof_packed(zserio_context.geometry, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition += 5
        end_bitposition = self._geometry_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RouteGeometry.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.scale.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._scale_)
        end_bitposition += zserio_context.shift.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_)
        end_bitposition = self._geometry_.initialize_offsets_packed(zserio_context.geometry, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._scale_ = zserio_reader.read_bits(32)
        self._shift_ = zserio_reader.read_bits(5)
        self._geometry_ = nds.core.geometry.line2d.Line2D.from_reader(zserio_reader, self._shift_)

    def read_packed(self, zserio_context: RouteGeometry.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._scale_ = zserio_context.scale.read(zserio.array.BitFieldArrayTraits(32), zserio_reader)

        self._shift_ = zserio_context.shift.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._geometry_ = nds.core.geometry.line2d.Line2D.from_reader_packed(zserio_context.geometry, zserio_reader, self._shift_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._scale_, 32)

        zserio_writer.write_bits(self._shift_, 5)

        # check parameters
        if self._geometry_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteGeometry.geometry: "
                                                f"{self._geometry_.shift} != {self._shift_}!")
        self._geometry_.write(zserio_writer)

    def write_packed(self, zserio_context: RouteGeometry.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.scale.write(zserio.array.BitFieldArrayTraits(32), zserio_writer, self._scale_)

        zserio_context.shift.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._shift_)

        # check parameters
        if self._geometry_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field RouteGeometry.geometry: "
                                                f"{self._geometry_.shift} != {self._shift_}!")
        self._geometry_.write_packed(zserio_context.geometry, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._scale_ = zserio.array.DeltaContext()
            self._shift_ = zserio.array.DeltaContext()
            self._geometry_ = nds.core.geometry.line2d.Line2D.ZserioPackingContext()

        @property
        def scale(self):
            return self._scale_

        @property
        def shift(self):
            return self._shift_

        @property
        def geometry(self):
            return self._geometry_
