# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.display.reference.types.display_area_validity_type
import nds.display.reference.types.label_positioning_hint

class DisplayAreaChoice:
    def __init__(
            self,
            type_: nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            *,
            hint_: typing.Union[nds.display.reference.types.label_positioning_hint.LabelPositioningHint, None] = None) -> None:
        self._type_ = type_
        self._shift_ = shift_
        self._choice: typing.Any = None
        if hint_ is not None:
            self._choice = hint_

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayAreaChoice'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'DisplayAreaChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayAreaChoice'],
            zserio_context: DisplayAreaChoice.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'DisplayAreaChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayAreaChoice):
            return (self._type_ == other._type_ and
                    self._shift_ == other._shift_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType:
        return self._type_

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def hint(self) -> typing.Union[nds.display.reference.types.label_positioning_hint.LabelPositioningHint, None]:
        return self._choice

    @hint.setter
    def hint(self, hint_: typing.Union[nds.display.reference.types.label_positioning_hint.LabelPositioningHint, None]) -> None:
        self._choice = hint_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            return self.CHOICE_HINT
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: DisplayAreaChoice.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            self._choice.init_packing_context(zserio_context.hint)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayAreaChoice.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.hint, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayAreaChoice.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.hint, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            self._choice = nds.display.reference.types.label_positioning_hint.LabelPositioningHint.from_reader(zserio_reader, self._shift_)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

    def read_packed(self, zserio_context: DisplayAreaChoice.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            self._choice = nds.display.reference.types.label_positioning_hint.LabelPositioningHint.from_reader_packed(zserio_context.hint, zserio_reader, self._shift_)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayAreaChoice.hint: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

    def write_packed(self, zserio_context: DisplayAreaChoice.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_area_validity_type.DisplayAreaValidityType.LABEL_POSITIONING_HINT):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayAreaChoice.hint: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.hint, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaChoice!")

    class ZserioPackingContext:
        def __init__(self):
            self._hint_ = nds.display.reference.types.label_positioning_hint.LabelPositioningHint.ZserioPackingContext()

        @property
        def hint(self):
            return self._hint_

    CHOICE_HINT = 0
    UNDEFINED_CHOICE = -1
