# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.display.reference.types.curved_label_positioning_hint
import nds.display.reference.types.display_line_geometry_offset_range
import nds.display.reference.types.display_line_geometry_range
import nds.display.reference.types.display_line_percentage_range
import nds.display.reference.types.display_line_validity_range
import nds.display.reference.types.display_line_validity_type

class DisplayLineRangeChoice:
    def __init__(
            self,
            type_: nds.display.reference.types.display_line_validity_type.DisplayLineValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            *,
            validity_range_: typing.Union[nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange, None] = None,
            geometry_range_: typing.Union[nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange, None] = None,
            geometry_offset_range_: typing.Union[nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange, None] = None,
            percentage_range_: typing.Union[nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange, None] = None,
            curved_label_positioning_hint_: typing.Union[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint, None] = None) -> None:
        self._type_ = type_
        self._shift_ = shift_
        self._choice: typing.Any = None
        if validity_range_ is not None:
            self._choice = validity_range_
        if geometry_range_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayLineRangeChoice is ambiguous!")
            self._choice = geometry_range_
        if geometry_offset_range_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayLineRangeChoice is ambiguous!")
            self._choice = geometry_offset_range_
        if percentage_range_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayLineRangeChoice is ambiguous!")
            self._choice = percentage_range_
        if curved_label_positioning_hint_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayLineRangeChoice is ambiguous!")
            self._choice = curved_label_positioning_hint_

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayLineRangeChoice'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.reference.types.display_line_validity_type.DisplayLineValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'DisplayLineRangeChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayLineRangeChoice'],
            zserio_context: DisplayLineRangeChoice.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.reference.types.display_line_validity_type.DisplayLineValidityType,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'DisplayLineRangeChoice':
        self = object.__new__(cls)
        self._type_ = type_
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayLineRangeChoice):
            return (self._type_ == other._type_ and
                    self._shift_ == other._shift_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.display.reference.types.display_line_validity_type.DisplayLineValidityType:
        return self._type_

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def validity_range(self) -> typing.Union[nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange, None]:
        return self._choice

    @validity_range.setter
    def validity_range(self, validity_range_: typing.Union[nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange, None]) -> None:
        self._choice = validity_range_

    @property
    def geometry_range(self) -> typing.Union[nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange, None]:
        return self._choice

    @geometry_range.setter
    def geometry_range(self, geometry_range_: typing.Union[nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange, None]) -> None:
        self._choice = geometry_range_

    @property
    def geometry_offset_range(self) -> typing.Union[nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange, None]:
        return self._choice

    @geometry_offset_range.setter
    def geometry_offset_range(self, geometry_offset_range_: typing.Union[nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange, None]) -> None:
        self._choice = geometry_offset_range_

    @property
    def percentage_range(self) -> typing.Union[nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange, None]:
        return self._choice

    @percentage_range.setter
    def percentage_range(self, percentage_range_: typing.Union[nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange, None]) -> None:
        self._choice = percentage_range_

    @property
    def curved_label_positioning_hint(self) -> typing.Union[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint, None]:
        return self._choice

    @curved_label_positioning_hint.setter
    def curved_label_positioning_hint(self, curved_label_positioning_hint_: typing.Union[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint, None]) -> None:
        self._choice = curved_label_positioning_hint_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            return self.CHOICE_VALIDITY_RANGE
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            return self.CHOICE_GEOMETRY_RANGE
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            return self.CHOICE_GEOMETRY_OFFSET_RANGE
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            return self.CHOICE_PERCENTAGE_RANGE
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            return self.CHOICE_CURVED_LABEL_POSITIONING_HINT
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: DisplayLineRangeChoice.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            self._choice.init_packing_context(zserio_context.validity_range)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            self._choice.init_packing_context(zserio_context.geometry_range)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            self._choice.init_packing_context(zserio_context.geometry_offset_range)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            self._choice.init_packing_context(zserio_context.percentage_range)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            self._choice.init_packing_context(zserio_context.curved_label_positioning_hint)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayLineRangeChoice.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.validity_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.geometry_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.geometry_offset_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.percentage_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.curved_label_positioning_hint, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayLineRangeChoice.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.validity_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.geometry_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.geometry_offset_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.percentage_range, end_bitposition)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.curved_label_positioning_hint, end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            self._choice = nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange.from_reader(zserio_reader, self._shift_)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            self._choice = nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange.from_reader(zserio_reader)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            self._choice = nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange.from_reader(zserio_reader, self._shift_)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            self._choice = nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange.from_reader(zserio_reader)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            self._choice = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.from_reader(zserio_reader, self._shift_)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

    def read_packed(self, zserio_context: DisplayLineRangeChoice.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            self._choice = nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange.from_reader_packed(zserio_context.validity_range, zserio_reader, self._shift_)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            self._choice = nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange.from_reader_packed(zserio_context.geometry_range, zserio_reader)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            self._choice = nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange.from_reader_packed(zserio_context.geometry_offset_range, zserio_reader, self._shift_)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            self._choice = nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange.from_reader_packed(zserio_context.percentage_range, zserio_reader)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            self._choice = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.from_reader_packed(zserio_context.curved_label_positioning_hint, zserio_reader, self._shift_)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.validityRange: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.geometryOffsetRange: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.curvedLabelPositioningHint: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

    def write_packed(self, zserio_context: DisplayLineRangeChoice.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.COMPLETE):
            pass
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.POSITION):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.validityRange: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.validity_range, zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY):
            self._choice.write_packed(zserio_context.geometry_range, zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.GEOMETRY_OFFSET):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.geometryOffsetRange: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.geometry_offset_range, zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.PERCENTAGE):
            self._choice.write_packed(zserio_context.percentage_range, zserio_writer)
        elif selector == (nds.display.reference.types.display_line_validity_type.DisplayLineValidityType.CURVED_LABEL_POSITIONING_HINT):
            # check parameters
            if self._choice.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field DisplayLineRangeChoice.curvedLabelPositioningHint: "
                                                    f"{self._choice.shift} != {self._shift_}!")
            self._choice.write_packed(zserio_context.curved_label_positioning_hint, zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayLineRangeChoice!")

    class ZserioPackingContext:
        def __init__(self):
            self._validity_range_ = nds.display.reference.types.display_line_validity_range.DisplayLineValidityRange.ZserioPackingContext()
            self._geometry_range_ = nds.display.reference.types.display_line_geometry_range.DisplayLineGeometryRange.ZserioPackingContext()
            self._geometry_offset_range_ = nds.display.reference.types.display_line_geometry_offset_range.DisplayLineGeometryOffsetRange.ZserioPackingContext()
            self._percentage_range_ = nds.display.reference.types.display_line_percentage_range.DisplayLinePercentageRange.ZserioPackingContext()
            self._curved_label_positioning_hint_ = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.ZserioPackingContext()

        @property
        def validity_range(self):
            return self._validity_range_

        @property
        def geometry_range(self):
            return self._geometry_range_

        @property
        def geometry_offset_range(self):
            return self._geometry_offset_range_

        @property
        def percentage_range(self):
            return self._percentage_range_

        @property
        def curved_label_positioning_hint(self):
            return self._curved_label_positioning_hint_

    CHOICE_VALIDITY_RANGE = 0
    CHOICE_GEOMETRY_RANGE = 1
    CHOICE_GEOMETRY_OFFSET_RANGE = 2
    CHOICE_PERCENTAGE_RANGE = 3
    CHOICE_CURVED_LABEL_POSITIONING_HINT = 4
    UNDEFINED_CHOICE = -1
