# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.line2d

class CurvedLabelPositioningHint:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            num_lines_: int = int(),
            hint_lines_: typing.List[nds.core.geometry.line2d.Line2D] = None) -> None:
        self._shift_ = shift_
        self._num_lines_ = num_lines_
        self._hint_lines_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_hint_lines(self)), hint_lines_)

    @classmethod
    def from_reader(
            cls: typing.Type['CurvedLabelPositioningHint'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'CurvedLabelPositioningHint':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['CurvedLabelPositioningHint'],
            zserio_context: CurvedLabelPositioningHint.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'CurvedLabelPositioningHint':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, CurvedLabelPositioningHint):
            return (self._shift_ == other._shift_ and
                    (self._num_lines_ == other._num_lines_) and
                    (self._hint_lines_ == other._hint_lines_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_lines_)
        result = zserio.hashcode.calc_hashcode_object(result, self._hint_lines_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def num_lines(self) -> int:
        return self._num_lines_

    @num_lines.setter
    def num_lines(self, num_lines_: int) -> None:
        self._num_lines_ = num_lines_

    @property
    def hint_lines(self) -> typing.List[nds.core.geometry.line2d.Line2D]:
        return self._hint_lines_.raw_array

    @hint_lines.setter
    def hint_lines(self, hint_lines_: typing.List[nds.core.geometry.line2d.Line2D]) -> None:
        self._hint_lines_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_hint_lines(self)), hint_lines_)

    def init_packing_context(self, zserio_context: CurvedLabelPositioningHint.ZserioPackingContext) -> None:
        zserio_context.num_lines.init(zserio.array.VarSizeArrayTraits(), self._num_lines_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_lines_)
        end_bitposition += self._hint_lines_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: CurvedLabelPositioningHint.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_lines.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_lines_)
        end_bitposition += self._hint_lines_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_lines_)
        end_bitposition = self._hint_lines_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: CurvedLabelPositioningHint.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_lines.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_lines_)
        end_bitposition = self._hint_lines_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_lines_ = zserio_reader.read_varsize()
        self._hint_lines_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_hint_lines(self)), zserio_reader, self._num_lines_)

    def read_packed(self, zserio_context: CurvedLabelPositioningHint.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_lines_ = zserio_context.num_lines.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._hint_lines_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_hint_lines(self)), zserio_reader, self._num_lines_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_lines_)

        # check array length
        if len(self._hint_lines_) != (self._num_lines_):
            raise zserio.PythonRuntimeException("Wrong array length for field CurvedLabelPositioningHint.hintLines: "
                                                f"{len(self._hint_lines_)} != {self._num_lines_}!")
        self._hint_lines_.write(zserio_writer)

    def write_packed(self, zserio_context: CurvedLabelPositioningHint.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_lines.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_lines_)

        # check array length
        if len(self._hint_lines_) != (self._num_lines_):
            raise zserio.PythonRuntimeException("Wrong array length for field CurvedLabelPositioningHint.hintLines: "
                                                f"{len(self._hint_lines_)} != {self._num_lines_}!")
        self._hint_lines_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_lines_ = zserio.array.DeltaContext()

        @property
        def num_lines(self):
            return self._num_lines_

    class _ZserioElementFactory_hint_lines:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line2d.Line2D:
            del zserio_index
            return nds.core.geometry.line2d.Line2D.from_reader(zserio_reader, self._owner._shift_)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.line2d.Line2D.ZserioPackingContext:
            return nds.core.geometry.line2d.Line2D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.line2d.Line2D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.line2d.Line2D:
            del zserio_index
            return nds.core.geometry.line2d.Line2D.from_reader_packed(zserio_context, zserio_reader, self._owner._shift_)
