# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.reference.types.texture_id
import nds.display.reference.types.texture_section_index

class TextureReference:
    def __init__(
            self,
            texture_id_: nds.display.reference.types.texture_id.TextureId = nds.display.reference.types.texture_id.TextureId(),
            is_section_: bool = bool(),
            texture_section_index_: typing.Optional[nds.display.reference.types.texture_section_index.TextureSectionIndex] = None) -> None:
        self._texture_id_ = texture_id_
        self._is_section_ = is_section_
        self._texture_section_index_ = texture_section_index_

    @classmethod
    def from_reader(
            cls: typing.Type['TextureReference'],
            zserio_reader: zserio.BitStreamReader) -> 'TextureReference':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TextureReference'],
            zserio_context: TextureReference.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TextureReference':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TextureReference):
            return ((self._texture_id_ == other._texture_id_) and
                    (self._is_section_ == other._is_section_) and
                    (not other.is_texture_section_index_used() if not self.is_texture_section_index_used() else (self._texture_section_index_ == other._texture_section_index_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._texture_id_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_section_)
        if self.is_texture_section_index_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._texture_section_index_)

        return result

    @property
    def texture_id(self) -> nds.display.reference.types.texture_id.TextureId:
        return self._texture_id_

    @texture_id.setter
    def texture_id(self, texture_id_: nds.display.reference.types.texture_id.TextureId) -> None:
        self._texture_id_ = texture_id_

    @property
    def is_section(self) -> bool:
        return self._is_section_

    @is_section.setter
    def is_section(self, is_section_: bool) -> None:
        self._is_section_ = is_section_

    @property
    def texture_section_index(self) -> typing.Optional[nds.display.reference.types.texture_section_index.TextureSectionIndex]:
        return self._texture_section_index_

    @texture_section_index.setter
    def texture_section_index(self, texture_section_index_: typing.Optional[nds.display.reference.types.texture_section_index.TextureSectionIndex]) -> None:
        self._texture_section_index_ = texture_section_index_

    def is_texture_section_index_used(self) -> bool:
        return self._is_section_ == True

    def is_texture_section_index_set(self) -> bool:
        return not self._texture_section_index_ is None

    def reset_texture_section_index(self) -> None:
        self._texture_section_index_ = None

    def init_packing_context(self, zserio_context: TextureReference.ZserioPackingContext) -> None:
        zserio_context.texture_id.init(zserio.array.VarUInt32ArrayTraits(), self._texture_id_)
        if self.is_texture_section_index_used():
            zserio_context.texture_section_index.init(zserio.array.VarUInt16ArrayTraits(), self._texture_section_index_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._texture_id_)
        end_bitposition += 1
        if self.is_texture_section_index_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._texture_section_index_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TextureReference.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.texture_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._texture_id_)
        end_bitposition += 1
        if self.is_texture_section_index_used():
            end_bitposition += zserio_context.texture_section_index.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._texture_section_index_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._texture_id_)
        end_bitposition += 1
        if self.is_texture_section_index_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._texture_section_index_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TextureReference.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.texture_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._texture_id_)
        end_bitposition += 1
        if self.is_texture_section_index_used():
            end_bitposition += zserio_context.texture_section_index.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._texture_section_index_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._texture_id_ = zserio_reader.read_varuint32()
        self._is_section_ = zserio_reader.read_bool()
        if self.is_texture_section_index_used():
            self._texture_section_index_ = zserio_reader.read_varuint16()
        else:
            self._texture_section_index_ = None

    def read_packed(self, zserio_context: TextureReference.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._texture_id_ = zserio_context.texture_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._is_section_ = zserio_reader.read_bool()

        if self.is_texture_section_index_used():
            self._texture_section_index_ = zserio_context.texture_section_index.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._texture_section_index_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._texture_id_)
        zserio_writer.write_bool(self._is_section_)
        if self.is_texture_section_index_used():
            zserio_writer.write_varuint16(self._texture_section_index_)

    def write_packed(self, zserio_context: TextureReference.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.texture_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._texture_id_)

        zserio_writer.write_bool(self._is_section_)

        if self.is_texture_section_index_used():
            zserio_context.texture_section_index.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._texture_section_index_)

    class ZserioPackingContext:
        def __init__(self):
            self._texture_id_ = zserio.array.DeltaContext()
            self._texture_section_index_ = zserio.array.DeltaContext()

        @property
        def texture_id(self):
            return self._texture_id_

        @property
        def texture_section_index(self):
            return self._texture_section_index_
