# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.coord_width
import nds.core.geometry.position2d
import nds.core.geometry.position_offset2d

class StraightLabelingPosition:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            width_: nds.core.geometry.coord_width.CoordWidth,
            center_position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            radius_position_: typing.Union[nds.core.geometry.position_offset2d.PositionOffset2D, None] = None) -> None:
        self._shift_ = shift_
        self._width_ = width_
        self._center_position_ = center_position_
        self._radius_position_ = radius_position_

    @classmethod
    def from_reader(
            cls: typing.Type['StraightLabelingPosition'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            width_: nds.core.geometry.coord_width.CoordWidth) -> 'StraightLabelingPosition':
        self = object.__new__(cls)
        self._shift_ = shift_
        self._width_ = width_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['StraightLabelingPosition'],
            zserio_context: StraightLabelingPosition.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            width_: nds.core.geometry.coord_width.CoordWidth) -> 'StraightLabelingPosition':
        self = object.__new__(cls)
        self._shift_ = shift_
        self._width_ = width_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, StraightLabelingPosition):
            return (self._shift_ == other._shift_ and
                    self._width_ == other._width_ and
                    (self._center_position_ == other._center_position_) and
                    (self._radius_position_ == other._radius_position_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._width_)
        result = zserio.hashcode.calc_hashcode_object(result, self._center_position_)
        result = zserio.hashcode.calc_hashcode_object(result, self._radius_position_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def width(self) -> nds.core.geometry.coord_width.CoordWidth:
        return self._width_

    @property
    def center_position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._center_position_

    @center_position.setter
    def center_position(self, center_position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._center_position_ = center_position_

    @property
    def radius_position(self) -> typing.Union[nds.core.geometry.position_offset2d.PositionOffset2D, None]:
        return self._radius_position_

    @radius_position.setter
    def radius_position(self, radius_position_: typing.Union[nds.core.geometry.position_offset2d.PositionOffset2D, None]) -> None:
        self._radius_position_ = radius_position_

    def init_packing_context(self, zserio_context: StraightLabelingPosition.ZserioPackingContext) -> None:
        self._center_position_.init_packing_context(zserio_context.center_position)
        self._radius_position_.init_packing_context(zserio_context.radius_position)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._center_position_.bitsizeof(end_bitposition)
        end_bitposition += self._radius_position_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: StraightLabelingPosition.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._center_position_.bitsizeof_packed(zserio_context.center_position, end_bitposition)
        end_bitposition += self._radius_position_.bitsizeof_packed(zserio_context.radius_position, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._center_position_.initialize_offsets(end_bitposition)
        end_bitposition = self._radius_position_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: StraightLabelingPosition.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._center_position_.initialize_offsets_packed(zserio_context.center_position, end_bitposition)
        end_bitposition = self._radius_position_.initialize_offsets_packed(zserio_context.radius_position, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._center_position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._shift_)
        self._radius_position_ = nds.core.geometry.position_offset2d.PositionOffset2D.from_reader(zserio_reader, self._width_, self._shift_)

    def read_packed(self, zserio_context: StraightLabelingPosition.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._center_position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.center_position, zserio_reader, self._shift_)

        self._radius_position_ = nds.core.geometry.position_offset2d.PositionOffset2D.from_reader_packed(zserio_context.radius_position, zserio_reader, self._width_, self._shift_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._center_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field StraightLabelingPosition.centerPosition: "
                                                f"{self._center_position_.shift} != {self._shift_}!")
        self._center_position_.write(zserio_writer)

        # check parameters
        if self._radius_position_.num_bits != (self._width_):
            raise zserio.PythonRuntimeException("Wrong parameter numBits for field StraightLabelingPosition.radiusPosition: "
                                                f"{self._radius_position_.num_bits} != {self._width_}!")
        if self._radius_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field StraightLabelingPosition.radiusPosition: "
                                                f"{self._radius_position_.shift} != {self._shift_}!")
        self._radius_position_.write(zserio_writer)

    def write_packed(self, zserio_context: StraightLabelingPosition.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._center_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field StraightLabelingPosition.centerPosition: "
                                                f"{self._center_position_.shift} != {self._shift_}!")
        self._center_position_.write_packed(zserio_context.center_position, zserio_writer)

        # check parameters
        if self._radius_position_.num_bits != (self._width_):
            raise zserio.PythonRuntimeException("Wrong parameter numBits for field StraightLabelingPosition.radiusPosition: "
                                                f"{self._radius_position_.num_bits} != {self._width_}!")
        if self._radius_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field StraightLabelingPosition.radiusPosition: "
                                                f"{self._radius_position_.shift} != {self._shift_}!")
        self._radius_position_.write_packed(zserio_context.radius_position, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._center_position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._radius_position_ = nds.core.geometry.position_offset2d.PositionOffset2D.ZserioPackingContext()

        @property
        def center_position(self):
            return self._center_position_

        @property
        def radius_position(self):
            return self._radius_position_
