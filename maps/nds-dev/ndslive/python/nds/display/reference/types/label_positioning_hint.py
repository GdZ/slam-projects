# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.display.reference.types.curved_label_positioning_hint
import nds.display.reference.types.straight_label_positioning_hint

class LabelPositioningHint:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            importance_: int = int(),
            has_curved_label_: bool = bool(),
            has_straight_label_: bool = bool(),
            curved_label_hint_: typing.Optional[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint] = None,
            straight_label_hint_: typing.Optional[nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint] = None) -> None:
        self._shift_ = shift_
        self._importance_ = importance_
        self._has_curved_label_ = has_curved_label_
        self._has_straight_label_ = has_straight_label_
        self._curved_label_hint_ = curved_label_hint_
        self._straight_label_hint_ = straight_label_hint_

    @classmethod
    def from_reader(
            cls: typing.Type['LabelPositioningHint'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'LabelPositioningHint':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['LabelPositioningHint'],
            zserio_context: LabelPositioningHint.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'LabelPositioningHint':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, LabelPositioningHint):
            return (self._shift_ == other._shift_ and
                    (self._importance_ == other._importance_) and
                    (self._has_curved_label_ == other._has_curved_label_) and
                    (self._has_straight_label_ == other._has_straight_label_) and
                    (not other.is_curved_label_hint_used() if not self.is_curved_label_hint_used() else (self._curved_label_hint_ == other._curved_label_hint_)) and
                    (not other.is_straight_label_hint_used() if not self.is_straight_label_hint_used() else (self._straight_label_hint_ == other._straight_label_hint_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._importance_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_curved_label_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_straight_label_)
        if self.is_curved_label_hint_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._curved_label_hint_)
        if self.is_straight_label_hint_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._straight_label_hint_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def importance(self) -> int:
        return self._importance_

    @importance.setter
    def importance(self, importance_: int) -> None:
        self._importance_ = importance_

    @property
    def has_curved_label(self) -> bool:
        return self._has_curved_label_

    @has_curved_label.setter
    def has_curved_label(self, has_curved_label_: bool) -> None:
        self._has_curved_label_ = has_curved_label_

    @property
    def has_straight_label(self) -> bool:
        return self._has_straight_label_

    @has_straight_label.setter
    def has_straight_label(self, has_straight_label_: bool) -> None:
        self._has_straight_label_ = has_straight_label_

    @property
    def curved_label_hint(self) -> typing.Optional[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint]:
        return self._curved_label_hint_

    @curved_label_hint.setter
    def curved_label_hint(self, curved_label_hint_: typing.Optional[nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint]) -> None:
        self._curved_label_hint_ = curved_label_hint_

    def is_curved_label_hint_used(self) -> bool:
        return self._has_curved_label_

    def is_curved_label_hint_set(self) -> bool:
        return not self._curved_label_hint_ is None

    def reset_curved_label_hint(self) -> None:
        self._curved_label_hint_ = None

    @property
    def straight_label_hint(self) -> typing.Optional[nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint]:
        return self._straight_label_hint_

    @straight_label_hint.setter
    def straight_label_hint(self, straight_label_hint_: typing.Optional[nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint]) -> None:
        self._straight_label_hint_ = straight_label_hint_

    def is_straight_label_hint_used(self) -> bool:
        return self._has_straight_label_

    def is_straight_label_hint_set(self) -> bool:
        return not self._straight_label_hint_ is None

    def reset_straight_label_hint(self) -> None:
        self._straight_label_hint_ = None

    def init_packing_context(self, zserio_context: LabelPositioningHint.ZserioPackingContext) -> None:
        zserio_context.importance.init(zserio.array.BitFieldArrayTraits(8), self._importance_)
        if self.is_curved_label_hint_used():
            self._curved_label_hint_.init_packing_context(zserio_context.curved_label_hint)
        if self.is_straight_label_hint_used():
            self._straight_label_hint_.init_packing_context(zserio_context.straight_label_hint)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 1
        end_bitposition += 1
        if self.is_curved_label_hint_used():
            end_bitposition += self._curved_label_hint_.bitsizeof(end_bitposition)
        if self.is_straight_label_hint_used():
            end_bitposition += self._straight_label_hint_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: LabelPositioningHint.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.importance.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._importance_)
        end_bitposition += 1
        end_bitposition += 1
        if self.is_curved_label_hint_used():
            end_bitposition += self._curved_label_hint_.bitsizeof_packed(zserio_context.curved_label_hint, end_bitposition)
        if self.is_straight_label_hint_used():
            end_bitposition += self._straight_label_hint_.bitsizeof_packed(zserio_context.straight_label_hint, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        end_bitposition += 1
        end_bitposition += 1
        if self.is_curved_label_hint_used():
            end_bitposition = self._curved_label_hint_.initialize_offsets(end_bitposition)
        if self.is_straight_label_hint_used():
            end_bitposition = self._straight_label_hint_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: LabelPositioningHint.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.importance.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._importance_)
        end_bitposition += 1
        end_bitposition += 1
        if self.is_curved_label_hint_used():
            end_bitposition = self._curved_label_hint_.initialize_offsets_packed(zserio_context.curved_label_hint, end_bitposition)
        if self.is_straight_label_hint_used():
            end_bitposition = self._straight_label_hint_.initialize_offsets_packed(zserio_context.straight_label_hint, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._importance_ = zserio_reader.read_bits(8)
        self._has_curved_label_ = zserio_reader.read_bool()
        self._has_straight_label_ = zserio_reader.read_bool()
        if self.is_curved_label_hint_used():
            self._curved_label_hint_ = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.from_reader(zserio_reader, self._shift_)
        else:
            self._curved_label_hint_ = None
        if self.is_straight_label_hint_used():
            self._straight_label_hint_ = nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint.from_reader(zserio_reader, self._shift_)
        else:
            self._straight_label_hint_ = None

    def read_packed(self, zserio_context: LabelPositioningHint.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._importance_ = zserio_context.importance.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)

        self._has_curved_label_ = zserio_reader.read_bool()

        self._has_straight_label_ = zserio_reader.read_bool()

        if self.is_curved_label_hint_used():
            self._curved_label_hint_ = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.from_reader_packed(zserio_context.curved_label_hint, zserio_reader, self._shift_)
        else:
            self._curved_label_hint_ = None

        if self.is_straight_label_hint_used():
            self._straight_label_hint_ = nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint.from_reader_packed(zserio_context.straight_label_hint, zserio_reader, self._shift_)
        else:
            self._straight_label_hint_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._importance_, 8)

        zserio_writer.write_bool(self._has_curved_label_)

        zserio_writer.write_bool(self._has_straight_label_)

        if self.is_curved_label_hint_used():
            # check parameters
            if self._curved_label_hint_.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field LabelPositioningHint.curvedLabelHint: "
                                                    f"{self._curved_label_hint_.shift} != {self._shift_}!")
            self._curved_label_hint_.write(zserio_writer)

        if self.is_straight_label_hint_used():
            # check parameters
            if self._straight_label_hint_.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field LabelPositioningHint.straightLabelHint: "
                                                    f"{self._straight_label_hint_.shift} != {self._shift_}!")
            self._straight_label_hint_.write(zserio_writer)

    def write_packed(self, zserio_context: LabelPositioningHint.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.importance.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._importance_)

        zserio_writer.write_bool(self._has_curved_label_)

        zserio_writer.write_bool(self._has_straight_label_)

        if self.is_curved_label_hint_used():
            # check parameters
            if self._curved_label_hint_.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field LabelPositioningHint.curvedLabelHint: "
                                                    f"{self._curved_label_hint_.shift} != {self._shift_}!")
            self._curved_label_hint_.write_packed(zserio_context.curved_label_hint, zserio_writer)

        if self.is_straight_label_hint_used():
            # check parameters
            if self._straight_label_hint_.shift != (self._shift_):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field LabelPositioningHint.straightLabelHint: "
                                                    f"{self._straight_label_hint_.shift} != {self._shift_}!")
            self._straight_label_hint_.write_packed(zserio_context.straight_label_hint, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._importance_ = zserio.array.DeltaContext()
            self._curved_label_hint_ = nds.display.reference.types.curved_label_positioning_hint.CurvedLabelPositioningHint.ZserioPackingContext()
            self._straight_label_hint_ = nds.display.reference.types.straight_label_positioning_hint.StraightLabelPositioningHint.ZserioPackingContext()

        @property
        def importance(self):
            return self._importance_

        @property
        def curved_label_hint(self):
            return self._curved_label_hint_

        @property
        def straight_label_hint(self):
            return self._straight_label_hint_
