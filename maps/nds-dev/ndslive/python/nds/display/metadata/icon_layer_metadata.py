# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_format
import nds.core.types.iso3166_codes
import nds.display.metadata.display_scale_tile_level_mapping
import nds.display.metadata.icon_layer_content

class IconLayerMetadata:
    def __init__(
            self,
            content_: typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None] = None,
            contained_icon_formats_: typing.List[nds.core.icons.icon_format.IconFormat] = None,
            iso_country_code_: typing.Optional[nds.core.types.iso3166_codes.Iso3166Codes] = None,
            display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None] = None) -> None:
        self._content_ = content_
        self._contained_icon_formats_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_contained_icon_formats()), contained_icon_formats_, is_auto=True)
        self._iso_country_code_ = iso_country_code_
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    @classmethod
    def from_reader(
            cls: typing.Type['IconLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'IconLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconLayerMetadata'],
            zserio_context: IconLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconLayerMetadata):
            return ((self._content_ == other._content_) and
                    (self._contained_icon_formats_ == other._contained_icon_formats_) and
                    (not other.is_iso_country_code_used() if not self.is_iso_country_code_used() else (self._iso_country_code_ == other._iso_country_code_)) and
                    (self._display_scale_tile_level_mapping_ == other._display_scale_tile_level_mapping_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        result = zserio.hashcode.calc_hashcode_object(result, self._contained_icon_formats_)
        if self.is_iso_country_code_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._iso_country_code_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_scale_tile_level_mapping_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def contained_icon_formats(self) -> typing.List[nds.core.icons.icon_format.IconFormat]:
        return self._contained_icon_formats_.raw_array

    @contained_icon_formats.setter
    def contained_icon_formats(self, contained_icon_formats_: typing.List[nds.core.icons.icon_format.IconFormat]) -> None:
        self._contained_icon_formats_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_contained_icon_formats()), contained_icon_formats_, is_auto=True)

    @property
    def iso_country_code(self) -> typing.Optional[nds.core.types.iso3166_codes.Iso3166Codes]:
        return self._iso_country_code_

    @iso_country_code.setter
    def iso_country_code(self, iso_country_code_: typing.Optional[nds.core.types.iso3166_codes.Iso3166Codes]) -> None:
        self._iso_country_code_ = iso_country_code_

    def is_iso_country_code_used(self) -> bool:
        return self.is_iso_country_code_set()

    def is_iso_country_code_set(self) -> bool:
        return not self._iso_country_code_ is None

    def reset_iso_country_code(self) -> None:
        self._iso_country_code_ = None

    @property
    def display_scale_tile_level_mapping(self) -> typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]:
        return self._display_scale_tile_level_mapping_

    @display_scale_tile_level_mapping.setter
    def display_scale_tile_level_mapping(self, display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]) -> None:
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    def init_packing_context(self, zserio_context: IconLayerMetadata.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        self._display_scale_tile_level_mapping_.init_packing_context(zserio_context.display_scale_tile_level_mapping)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        end_bitposition += self._contained_icon_formats_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_iso_country_code_used():
            end_bitposition += self._iso_country_code_.bitsizeof(end_bitposition)
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        end_bitposition += self._contained_icon_formats_.bitsizeof_packed(end_bitposition)
        end_bitposition += 1
        if self.is_iso_country_code_used():
            end_bitposition += self._iso_country_code_.bitsizeof(end_bitposition)
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        end_bitposition = self._contained_icon_formats_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_iso_country_code_used():
            end_bitposition = self._iso_country_code_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        end_bitposition = self._contained_icon_formats_.initialize_offsets_packed(end_bitposition)
        end_bitposition += 1
        if self.is_iso_country_code_used():
            end_bitposition = self._iso_country_code_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.icon_layer_content.IconLayerContent.from_reader(zserio_reader)
        self._contained_icon_formats_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_contained_icon_formats()), zserio_reader, is_auto=True)
        if zserio_reader.read_bool():
            self._iso_country_code_ = nds.core.types.iso3166_codes.Iso3166Codes.from_reader(zserio_reader)
        else:
            self._iso_country_code_ = None
        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader(zserio_reader)

    def read_packed(self, zserio_context: IconLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.icon_layer_content.IconLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        self._contained_icon_formats_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_contained_icon_formats()), zserio_reader, is_auto=True)

        if zserio_reader.read_bool():
            self._iso_country_code_ = nds.core.types.iso3166_codes.Iso3166Codes.from_reader(zserio_reader)
        else:
            self._iso_country_code_ = None

        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader_packed(zserio_context.display_scale_tile_level_mapping, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        self._contained_icon_formats_.write(zserio_writer)
        if self.is_iso_country_code_used():
            zserio_writer.write_bool(True)
            self._iso_country_code_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        self._display_scale_tile_level_mapping_.write(zserio_writer)

    def write_packed(self, zserio_context: IconLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        self._contained_icon_formats_.write_packed(zserio_writer)

        if self.is_iso_country_code_used():
            zserio_writer.write_bool(True)
            self._iso_country_code_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

        self._display_scale_tile_level_mapping_.write_packed(zserio_context.display_scale_tile_level_mapping, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def display_scale_tile_level_mapping(self):
            return self._display_scale_tile_level_mapping_

    class _ZserioElementFactory_contained_icon_formats:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_format.IconFormat:
            del zserio_index
            return nds.core.icons.icon_format.IconFormat.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_format.IconFormat:
            del zserio_index
            return nds.core.icons.icon_format.IconFormat.from_reader_packed(zserio_context, zserio_reader)
