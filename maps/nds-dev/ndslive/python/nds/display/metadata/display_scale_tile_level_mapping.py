# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.scale_range

class DisplayScaleTileLevelMapping:
    def __init__(
            self,
            num_levels_: int = int(),
            tile_level_: typing.List[int] = None,
            scale_range_: typing.List[nds.core.types.scale_range.ScaleRange] = None) -> None:
        self._num_levels_ = num_levels_
        self._tile_level_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(4), tile_level_)
        self._scale_range_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_range()), scale_range_)

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayScaleTileLevelMapping'],
            zserio_reader: zserio.BitStreamReader) -> 'DisplayScaleTileLevelMapping':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayScaleTileLevelMapping'],
            zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DisplayScaleTileLevelMapping':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayScaleTileLevelMapping):
            return ((self._num_levels_ == other._num_levels_) and
                    (self._tile_level_ == other._tile_level_) and
                    (self._scale_range_ == other._scale_range_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_levels_)
        result = zserio.hashcode.calc_hashcode_object(result, self._tile_level_)
        result = zserio.hashcode.calc_hashcode_object(result, self._scale_range_)

        return result

    @property
    def num_levels(self) -> int:
        return self._num_levels_

    @num_levels.setter
    def num_levels(self, num_levels_: int) -> None:
        self._num_levels_ = num_levels_

    @property
    def tile_level(self) -> typing.List[int]:
        return self._tile_level_.raw_array

    @tile_level.setter
    def tile_level(self, tile_level_: typing.List[int]) -> None:
        self._tile_level_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(4), tile_level_)

    @property
    def scale_range(self) -> typing.List[nds.core.types.scale_range.ScaleRange]:
        return self._scale_range_.raw_array

    @scale_range.setter
    def scale_range(self, scale_range_: typing.List[nds.core.types.scale_range.ScaleRange]) -> None:
        self._scale_range_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_range()), scale_range_)

    def init_packing_context(self, zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext) -> None:
        zserio_context.num_levels.init(zserio.array.BitFieldArrayTraits(4), self._num_levels_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 4
        end_bitposition += self._tile_level_.bitsizeof(end_bitposition)
        end_bitposition += self._scale_range_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_levels.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._num_levels_)
        end_bitposition += self._tile_level_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._scale_range_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 4
        end_bitposition = self._tile_level_.initialize_offsets(end_bitposition)
        end_bitposition = self._scale_range_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_levels.bitsizeof(zserio.array.BitFieldArrayTraits(4), self._num_levels_)
        end_bitposition = self._tile_level_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._scale_range_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_levels_ = zserio_reader.read_bits(4)
        self._tile_level_ = zserio.array.Array.from_reader(zserio.array.BitFieldArrayTraits(4), zserio_reader, self._num_levels_)
        self._scale_range_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_range()), zserio_reader, self._num_levels_)

    def read_packed(self, zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_levels_ = zserio_context.num_levels.read(zserio.array.BitFieldArrayTraits(4), zserio_reader)

        self._tile_level_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(4), zserio_reader, self._num_levels_)

        self._scale_range_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_range()), zserio_reader, self._num_levels_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._num_levels_, 4)

        # check array length
        if len(self._tile_level_) != (self._num_levels_):
            raise zserio.PythonRuntimeException("Wrong array length for field DisplayScaleTileLevelMapping.tileLevel: "
                                                f"{len(self._tile_level_)} != {self._num_levels_}!")
        self._tile_level_.write(zserio_writer)

        # check array length
        if len(self._scale_range_) != (self._num_levels_):
            raise zserio.PythonRuntimeException("Wrong array length for field DisplayScaleTileLevelMapping.scaleRange: "
                                                f"{len(self._scale_range_)} != {self._num_levels_}!")
        self._scale_range_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: DisplayScaleTileLevelMapping.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_levels.write(zserio.array.BitFieldArrayTraits(4), zserio_writer, self._num_levels_)

        # check array length
        if len(self._tile_level_) != (self._num_levels_):
            raise zserio.PythonRuntimeException("Wrong array length for field DisplayScaleTileLevelMapping.tileLevel: "
                                                f"{len(self._tile_level_)} != {self._num_levels_}!")
        self._tile_level_.write_packed(zserio_writer)

        # check array length
        if len(self._scale_range_) != (self._num_levels_):
            raise zserio.PythonRuntimeException("Wrong array length for field DisplayScaleTileLevelMapping.scaleRange: "
                                                f"{len(self._scale_range_)} != {self._num_levels_}!")
        self._scale_range_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_levels_ = zserio.array.DeltaContext()

        @property
        def num_levels(self):
            return self._num_levels_

    class _ZserioElementFactory_scale_range:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.scale_range.ScaleRange:
            del zserio_index
            return nds.core.types.scale_range.ScaleRange.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.types.scale_range.ScaleRange.ZserioPackingContext:
            return nds.core.types.scale_range.ScaleRange.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.types.scale_range.ScaleRange.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.types.scale_range.ScaleRange:
            del zserio_index
            return nds.core.types.scale_range.ScaleRange.from_reader_packed(zserio_context, zserio_reader)
