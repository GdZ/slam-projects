# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.display_line_type

class DisplayLineTypeHierarchyRelation:
    def __init__(
            self,
            parent_: typing.Union[nds.display.types.display_line_type.DisplayLineType, None] = None,
            children_: typing.List[nds.display.types.display_line_type.DisplayLineType] = None) -> None:
        self._parent_ = parent_
        self._children_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_children()), children_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayLineTypeHierarchyRelation'],
            zserio_reader: zserio.BitStreamReader) -> 'DisplayLineTypeHierarchyRelation':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayLineTypeHierarchyRelation'],
            zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DisplayLineTypeHierarchyRelation':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayLineTypeHierarchyRelation):
            return ((self._parent_ == other._parent_) and
                    (self._children_ == other._children_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._parent_)
        result = zserio.hashcode.calc_hashcode_object(result, self._children_)

        return result

    @property
    def parent(self) -> typing.Union[nds.display.types.display_line_type.DisplayLineType, None]:
        return self._parent_

    @parent.setter
    def parent(self, parent_: typing.Union[nds.display.types.display_line_type.DisplayLineType, None]) -> None:
        self._parent_ = parent_

    @property
    def children(self) -> typing.List[nds.display.types.display_line_type.DisplayLineType]:
        return self._children_.raw_array

    @children.setter
    def children(self, children_: typing.List[nds.display.types.display_line_type.DisplayLineType]) -> None:
        self._children_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_children()), children_, is_auto=True)

    def init_packing_context(self, zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext) -> None:
        self._parent_.init_packing_context(zserio_context.parent)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._parent_.bitsizeof(end_bitposition)
        end_bitposition += self._children_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._parent_.bitsizeof_packed(zserio_context.parent, end_bitposition)
        end_bitposition += self._children_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._parent_.initialize_offsets(end_bitposition)
        end_bitposition = self._children_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._parent_.initialize_offsets_packed(zserio_context.parent, end_bitposition)
        end_bitposition = self._children_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._parent_ = nds.display.types.display_line_type.DisplayLineType.from_reader(zserio_reader)
        self._children_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_children()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._parent_ = nds.display.types.display_line_type.DisplayLineType.from_reader_packed(zserio_context.parent, zserio_reader)

        self._children_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_children()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._parent_.write(zserio_writer)
        self._children_.write(zserio_writer)

    def write_packed(self, zserio_context: DisplayLineTypeHierarchyRelation.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._parent_.write_packed(zserio_context.parent, zserio_writer)

        self._children_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._parent_ = zserio.array.DeltaContext()

        @property
        def parent(self):
            return self._parent_

    class _ZserioElementFactory_children:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader_packed(zserio_context, zserio_reader)
