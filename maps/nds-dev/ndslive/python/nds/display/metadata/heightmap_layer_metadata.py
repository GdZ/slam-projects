# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.metadata.display_scale_tile_level_mapping
import nds.display.types.heightmap_map_projection
import nds.display.types.terrain_optimization_type

class HeightmapLayerMetadata:
    def __init__(
            self,
            available_usage_types_: typing.List[nds.display.types.terrain_optimization_type.TerrainOptimizationType] = None,
            map_projection_: typing.Union[nds.display.types.heightmap_map_projection.HeightmapMapProjection, None] = None,
            tile_buffer_size_: int = int(),
            maximum_latitude_: typing.Optional[int] = None,
            display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None] = None) -> None:
        self._available_usage_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_usage_types()), available_usage_types_, is_auto=True)
        self._map_projection_ = map_projection_
        self._tile_buffer_size_ = tile_buffer_size_
        self._maximum_latitude_ = maximum_latitude_
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    @classmethod
    def from_reader(
            cls: typing.Type['HeightmapLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'HeightmapLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['HeightmapLayerMetadata'],
            zserio_context: HeightmapLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'HeightmapLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, HeightmapLayerMetadata):
            return ((self._available_usage_types_ == other._available_usage_types_) and
                    (self._map_projection_ == other._map_projection_) and
                    (self._tile_buffer_size_ == other._tile_buffer_size_) and
                    (not other.is_maximum_latitude_used() if not self.is_maximum_latitude_used() else (self._maximum_latitude_ == other._maximum_latitude_)) and
                    (self._display_scale_tile_level_mapping_ == other._display_scale_tile_level_mapping_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._available_usage_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._map_projection_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._maximum_latitude_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_scale_tile_level_mapping_)

        return result

    @property
    def available_usage_types(self) -> typing.List[nds.display.types.terrain_optimization_type.TerrainOptimizationType]:
        return self._available_usage_types_.raw_array

    @available_usage_types.setter
    def available_usage_types(self, available_usage_types_: typing.List[nds.display.types.terrain_optimization_type.TerrainOptimizationType]) -> None:
        self._available_usage_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_usage_types()), available_usage_types_, is_auto=True)

    @property
    def map_projection(self) -> typing.Union[nds.display.types.heightmap_map_projection.HeightmapMapProjection, None]:
        return self._map_projection_

    @map_projection.setter
    def map_projection(self, map_projection_: typing.Union[nds.display.types.heightmap_map_projection.HeightmapMapProjection, None]) -> None:
        self._map_projection_ = map_projection_

    @property
    def tile_buffer_size(self) -> int:
        return self._tile_buffer_size_

    @tile_buffer_size.setter
    def tile_buffer_size(self, tile_buffer_size_: int) -> None:
        self._tile_buffer_size_ = tile_buffer_size_

    @property
    def maximum_latitude(self) -> typing.Optional[int]:
        return self._maximum_latitude_

    @maximum_latitude.setter
    def maximum_latitude(self, maximum_latitude_: typing.Optional[int]) -> None:
        self._maximum_latitude_ = maximum_latitude_

    def is_maximum_latitude_used(self) -> bool:
        return self._map_projection_ == nds.display.types.heightmap_map_projection.HeightmapMapProjection.WEB_MERCATOR_EPSG_3857

    def is_maximum_latitude_set(self) -> bool:
        return not self._maximum_latitude_ is None

    def reset_maximum_latitude(self) -> None:
        self._maximum_latitude_ = None

    @property
    def display_scale_tile_level_mapping(self) -> typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]:
        return self._display_scale_tile_level_mapping_

    @display_scale_tile_level_mapping.setter
    def display_scale_tile_level_mapping(self, display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]) -> None:
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    def init_packing_context(self, zserio_context: HeightmapLayerMetadata.ZserioPackingContext) -> None:
        self._map_projection_.init_packing_context(zserio_context.map_projection)
        zserio_context.tile_buffer_size.init(zserio.array.VarUInt16ArrayTraits(), self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            zserio_context.maximum_latitude.init(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)
        self._display_scale_tile_level_mapping_.init_packing_context(zserio_context.display_scale_tile_level_mapping)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._available_usage_types_.bitsizeof(end_bitposition)
        end_bitposition += self._map_projection_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            end_bitposition += 32
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: HeightmapLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._available_usage_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._map_projection_.bitsizeof_packed(zserio_context.map_projection, end_bitposition)
        end_bitposition += zserio_context.tile_buffer_size.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            end_bitposition += zserio_context.maximum_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._available_usage_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._map_projection_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            end_bitposition += 32
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: HeightmapLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._available_usage_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._map_projection_.initialize_offsets_packed(zserio_context.map_projection, end_bitposition)
        end_bitposition += zserio_context.tile_buffer_size.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            end_bitposition += zserio_context.maximum_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._available_usage_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_usage_types()), zserio_reader, is_auto=True)
        self._map_projection_ = nds.display.types.heightmap_map_projection.HeightmapMapProjection.from_reader(zserio_reader)
        self._tile_buffer_size_ = zserio_reader.read_varuint16()
        if self.is_maximum_latitude_used():
            self._maximum_latitude_ = zserio_reader.read_signed_bits(32)
        else:
            self._maximum_latitude_ = None
        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader(zserio_reader)

    def read_packed(self, zserio_context: HeightmapLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._available_usage_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_usage_types()), zserio_reader, is_auto=True)

        self._map_projection_ = nds.display.types.heightmap_map_projection.HeightmapMapProjection.from_reader_packed(zserio_context.map_projection, zserio_reader)

        self._tile_buffer_size_ = zserio_context.tile_buffer_size.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        if self.is_maximum_latitude_used():
            self._maximum_latitude_ = zserio_context.maximum_latitude.read(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader)
        else:
            self._maximum_latitude_ = None

        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader_packed(zserio_context.display_scale_tile_level_mapping, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._available_usage_types_.write(zserio_writer)
        self._map_projection_.write(zserio_writer)
        zserio_writer.write_varuint16(self._tile_buffer_size_)
        if self.is_maximum_latitude_used():
            zserio_writer.write_signed_bits(self._maximum_latitude_, 32)
        self._display_scale_tile_level_mapping_.write(zserio_writer)

    def write_packed(self, zserio_context: HeightmapLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._available_usage_types_.write_packed(zserio_writer)

        self._map_projection_.write_packed(zserio_context.map_projection, zserio_writer)

        zserio_context.tile_buffer_size.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._tile_buffer_size_)

        if self.is_maximum_latitude_used():
            zserio_context.maximum_latitude.write(zserio.array.SignedBitFieldArrayTraits(32), zserio_writer, self._maximum_latitude_)

        self._display_scale_tile_level_mapping_.write_packed(zserio_context.display_scale_tile_level_mapping, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._map_projection_ = zserio.array.DeltaContext()
            self._tile_buffer_size_ = zserio.array.DeltaContext()
            self._maximum_latitude_ = zserio.array.DeltaContext()
            self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.ZserioPackingContext()

        @property
        def map_projection(self):
            return self._map_projection_

        @property
        def tile_buffer_size(self):
            return self._tile_buffer_size_

        @property
        def maximum_latitude(self):
            return self._maximum_latitude_

        @property
        def display_scale_tile_level_mapping(self):
            return self._display_scale_tile_level_mapping_

    class _ZserioElementFactory_available_usage_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.terrain_optimization_type.TerrainOptimizationType:
            del zserio_index
            return nds.display.types.terrain_optimization_type.TerrainOptimizationType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.terrain_optimization_type.TerrainOptimizationType:
            del zserio_index
            return nds.display.types.terrain_optimization_type.TerrainOptimizationType.from_reader_packed(zserio_context, zserio_reader)
