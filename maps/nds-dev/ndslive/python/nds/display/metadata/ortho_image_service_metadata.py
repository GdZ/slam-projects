# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.map_projection_method
import nds.display.types.ortho_image_config

class OrthoImageServiceMetadata:
    def __init__(
            self,
            supported_configurations_: typing.List[nds.display.types.ortho_image_config.OrthoImageConfig] = None,
            vertical_pix_resolution_: int = int(),
            coordinate_projection_: typing.Union[nds.core.geometry.map_projection_method.MapProjectionMethod, None] = None,
            maximum_latitude_: typing.Optional[int] = None) -> None:
        self._supported_configurations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_configurations()), supported_configurations_, is_auto=True)
        self._vertical_pix_resolution_ = vertical_pix_resolution_
        self._coordinate_projection_ = coordinate_projection_
        self._maximum_latitude_ = maximum_latitude_

    @classmethod
    def from_reader(
            cls: typing.Type['OrthoImageServiceMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'OrthoImageServiceMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['OrthoImageServiceMetadata'],
            zserio_context: OrthoImageServiceMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'OrthoImageServiceMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OrthoImageServiceMetadata):
            return ((self._supported_configurations_ == other._supported_configurations_) and
                    (self._vertical_pix_resolution_ == other._vertical_pix_resolution_) and
                    (self._coordinate_projection_ == other._coordinate_projection_) and
                    (not other.is_maximum_latitude_used() if not self.is_maximum_latitude_used() else (self._maximum_latitude_ == other._maximum_latitude_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._supported_configurations_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._vertical_pix_resolution_)
        result = zserio.hashcode.calc_hashcode_object(result, self._coordinate_projection_)
        if self.is_maximum_latitude_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._maximum_latitude_)

        return result

    @property
    def supported_configurations(self) -> typing.List[nds.display.types.ortho_image_config.OrthoImageConfig]:
        return self._supported_configurations_.raw_array

    @supported_configurations.setter
    def supported_configurations(self, supported_configurations_: typing.List[nds.display.types.ortho_image_config.OrthoImageConfig]) -> None:
        self._supported_configurations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_configurations()), supported_configurations_, is_auto=True)

    @property
    def vertical_pix_resolution(self) -> int:
        return self._vertical_pix_resolution_

    @vertical_pix_resolution.setter
    def vertical_pix_resolution(self, vertical_pix_resolution_: int) -> None:
        self._vertical_pix_resolution_ = vertical_pix_resolution_

    @property
    def coordinate_projection(self) -> typing.Union[nds.core.geometry.map_projection_method.MapProjectionMethod, None]:
        return self._coordinate_projection_

    @coordinate_projection.setter
    def coordinate_projection(self, coordinate_projection_: typing.Union[nds.core.geometry.map_projection_method.MapProjectionMethod, None]) -> None:
        self._coordinate_projection_ = coordinate_projection_

    @property
    def maximum_latitude(self) -> typing.Optional[int]:
        return self._maximum_latitude_

    @maximum_latitude.setter
    def maximum_latitude(self, maximum_latitude_: typing.Optional[int]) -> None:
        self._maximum_latitude_ = maximum_latitude_

    def is_maximum_latitude_used(self) -> bool:
        return self._coordinate_projection_ == nds.core.geometry.map_projection_method.MapProjectionMethod.WEB_MERCATOR_EPSG_3857

    def is_maximum_latitude_set(self) -> bool:
        return not self._maximum_latitude_ is None

    def reset_maximum_latitude(self) -> None:
        self._maximum_latitude_ = None

    def init_packing_context(self, zserio_context: OrthoImageServiceMetadata.ZserioPackingContext) -> None:
        zserio_context.vertical_pix_resolution.init(zserio.array.VarUInt32ArrayTraits(), self._vertical_pix_resolution_)
        self._coordinate_projection_.init_packing_context(zserio_context.coordinate_projection)
        if self.is_maximum_latitude_used():
            zserio_context.maximum_latitude.init(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._supported_configurations_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._vertical_pix_resolution_)
        end_bitposition += self._coordinate_projection_.bitsizeof(end_bitposition)
        if self.is_maximum_latitude_used():
            end_bitposition += 32

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: OrthoImageServiceMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._supported_configurations_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.vertical_pix_resolution.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._vertical_pix_resolution_)
        end_bitposition += self._coordinate_projection_.bitsizeof_packed(zserio_context.coordinate_projection, end_bitposition)
        if self.is_maximum_latitude_used():
            end_bitposition += zserio_context.maximum_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._supported_configurations_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._vertical_pix_resolution_)
        end_bitposition = self._coordinate_projection_.initialize_offsets(end_bitposition)
        if self.is_maximum_latitude_used():
            end_bitposition += 32

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: OrthoImageServiceMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._supported_configurations_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.vertical_pix_resolution.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._vertical_pix_resolution_)
        end_bitposition = self._coordinate_projection_.initialize_offsets_packed(zserio_context.coordinate_projection, end_bitposition)
        if self.is_maximum_latitude_used():
            end_bitposition += zserio_context.maximum_latitude.bitsizeof(zserio.array.SignedBitFieldArrayTraits(32), self._maximum_latitude_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._supported_configurations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_configurations()), zserio_reader, is_auto=True)
        self._vertical_pix_resolution_ = zserio_reader.read_varuint32()
        self._coordinate_projection_ = nds.core.geometry.map_projection_method.MapProjectionMethod.from_reader(zserio_reader)
        if self.is_maximum_latitude_used():
            self._maximum_latitude_ = zserio_reader.read_signed_bits(32)
        else:
            self._maximum_latitude_ = None

    def read_packed(self, zserio_context: OrthoImageServiceMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._supported_configurations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_supported_configurations()), zserio_reader, is_auto=True)

        self._vertical_pix_resolution_ = zserio_context.vertical_pix_resolution.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._coordinate_projection_ = nds.core.geometry.map_projection_method.MapProjectionMethod.from_reader_packed(zserio_context.coordinate_projection, zserio_reader)

        if self.is_maximum_latitude_used():
            self._maximum_latitude_ = zserio_context.maximum_latitude.read(zserio.array.SignedBitFieldArrayTraits(32), zserio_reader)
        else:
            self._maximum_latitude_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._supported_configurations_.write(zserio_writer)
        zserio_writer.write_varuint32(self._vertical_pix_resolution_)
        self._coordinate_projection_.write(zserio_writer)
        if self.is_maximum_latitude_used():
            zserio_writer.write_signed_bits(self._maximum_latitude_, 32)

    def write_packed(self, zserio_context: OrthoImageServiceMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._supported_configurations_.write_packed(zserio_writer)

        zserio_context.vertical_pix_resolution.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._vertical_pix_resolution_)

        self._coordinate_projection_.write_packed(zserio_context.coordinate_projection, zserio_writer)

        if self.is_maximum_latitude_used():
            zserio_context.maximum_latitude.write(zserio.array.SignedBitFieldArrayTraits(32), zserio_writer, self._maximum_latitude_)

    class ZserioPackingContext:
        def __init__(self):
            self._vertical_pix_resolution_ = zserio.array.DeltaContext()
            self._coordinate_projection_ = zserio.array.DeltaContext()
            self._maximum_latitude_ = zserio.array.DeltaContext()

        @property
        def vertical_pix_resolution(self):
            return self._vertical_pix_resolution_

        @property
        def coordinate_projection(self):
            return self._coordinate_projection_

        @property
        def maximum_latitude(self):
            return self._maximum_latitude_

    class _ZserioElementFactory_supported_configurations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.ortho_image_config.OrthoImageConfig:
            del zserio_index
            return nds.display.types.ortho_image_config.OrthoImageConfig.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.ortho_image_config.OrthoImageConfig.ZserioPackingContext:
            return nds.display.types.ortho_image_config.OrthoImageConfig.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.ortho_image_config.OrthoImageConfig.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.ortho_image_config.OrthoImageConfig:
            del zserio_index
            return nds.display.types.ortho_image_config.OrthoImageConfig.from_reader_packed(zserio_context, zserio_reader)
