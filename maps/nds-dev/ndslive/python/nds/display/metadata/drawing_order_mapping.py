# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.default_drawing_order
import nds.display.types.display_area_type
import nds.display.types.display_line_type
import nds.display.types.display_point_type

class DrawingOrderMapping:
    def __init__(
            self,
            num_display_point_types_: int = int(),
            num_display_line_types_: int = int(),
            num_display_area_types_: int = int(),
            display_point_type_: typing.List[nds.display.types.display_point_type.DisplayPointType] = None,
            display_point_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder] = None,
            display_line_type_: typing.List[nds.display.types.display_line_type.DisplayLineType] = None,
            display_line_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder] = None,
            display_area_type_: typing.List[nds.display.types.display_area_type.DisplayAreaType] = None,
            display_area_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder] = None) -> None:
        self._num_display_point_types_ = num_display_point_types_
        self._num_display_line_types_ = num_display_line_types_
        self._num_display_area_types_ = num_display_area_types_
        self._display_point_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type()), display_point_type_)
        self._display_point_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_point_drawing_order_)
        self._display_line_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type()), display_line_type_)
        self._display_line_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_line_drawing_order_)
        self._display_area_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type()), display_area_type_)
        self._display_area_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_area_drawing_order_)

    @classmethod
    def from_reader(
            cls: typing.Type['DrawingOrderMapping'],
            zserio_reader: zserio.BitStreamReader) -> 'DrawingOrderMapping':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DrawingOrderMapping'],
            zserio_context: DrawingOrderMapping.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DrawingOrderMapping':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DrawingOrderMapping):
            return ((self._num_display_point_types_ == other._num_display_point_types_) and
                    (self._num_display_line_types_ == other._num_display_line_types_) and
                    (self._num_display_area_types_ == other._num_display_area_types_) and
                    (self._display_point_type_ == other._display_point_type_) and
                    (self._display_point_drawing_order_ == other._display_point_drawing_order_) and
                    (self._display_line_type_ == other._display_line_type_) and
                    (self._display_line_drawing_order_ == other._display_line_drawing_order_) and
                    (self._display_area_type_ == other._display_area_type_) and
                    (self._display_area_drawing_order_ == other._display_area_drawing_order_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_display_point_types_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_display_line_types_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_display_area_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_point_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_point_drawing_order_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_line_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_line_drawing_order_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_area_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_area_drawing_order_)

        return result

    @property
    def num_display_point_types(self) -> int:
        return self._num_display_point_types_

    @num_display_point_types.setter
    def num_display_point_types(self, num_display_point_types_: int) -> None:
        self._num_display_point_types_ = num_display_point_types_

    @property
    def num_display_line_types(self) -> int:
        return self._num_display_line_types_

    @num_display_line_types.setter
    def num_display_line_types(self, num_display_line_types_: int) -> None:
        self._num_display_line_types_ = num_display_line_types_

    @property
    def num_display_area_types(self) -> int:
        return self._num_display_area_types_

    @num_display_area_types.setter
    def num_display_area_types(self, num_display_area_types_: int) -> None:
        self._num_display_area_types_ = num_display_area_types_

    @property
    def display_point_type(self) -> typing.List[nds.display.types.display_point_type.DisplayPointType]:
        return self._display_point_type_.raw_array

    @display_point_type.setter
    def display_point_type(self, display_point_type_: typing.List[nds.display.types.display_point_type.DisplayPointType]) -> None:
        self._display_point_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type()), display_point_type_)

    @property
    def display_point_drawing_order(self) -> typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]:
        return self._display_point_drawing_order_.raw_array

    @display_point_drawing_order.setter
    def display_point_drawing_order(self, display_point_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]) -> None:
        self._display_point_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_point_drawing_order_)

    @property
    def display_line_type(self) -> typing.List[nds.display.types.display_line_type.DisplayLineType]:
        return self._display_line_type_.raw_array

    @display_line_type.setter
    def display_line_type(self, display_line_type_: typing.List[nds.display.types.display_line_type.DisplayLineType]) -> None:
        self._display_line_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type()), display_line_type_)

    @property
    def display_line_drawing_order(self) -> typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]:
        return self._display_line_drawing_order_.raw_array

    @display_line_drawing_order.setter
    def display_line_drawing_order(self, display_line_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]) -> None:
        self._display_line_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_line_drawing_order_)

    @property
    def display_area_type(self) -> typing.List[nds.display.types.display_area_type.DisplayAreaType]:
        return self._display_area_type_.raw_array

    @display_area_type.setter
    def display_area_type(self, display_area_type_: typing.List[nds.display.types.display_area_type.DisplayAreaType]) -> None:
        self._display_area_type_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type()), display_area_type_)

    @property
    def display_area_drawing_order(self) -> typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]:
        return self._display_area_drawing_order_.raw_array

    @display_area_drawing_order.setter
    def display_area_drawing_order(self, display_area_drawing_order_: typing.List[nds.display.types.default_drawing_order.DefaultDrawingOrder]) -> None:
        self._display_area_drawing_order_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), display_area_drawing_order_)

    def init_packing_context(self, zserio_context: DrawingOrderMapping.ZserioPackingContext) -> None:
        zserio_context.num_display_point_types.init(zserio.array.VarSizeArrayTraits(), self._num_display_point_types_)
        zserio_context.num_display_line_types.init(zserio.array.VarSizeArrayTraits(), self._num_display_line_types_)
        zserio_context.num_display_area_types.init(zserio.array.VarSizeArrayTraits(), self._num_display_area_types_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_point_types_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_line_types_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_area_types_)
        end_bitposition += self._display_point_type_.bitsizeof(end_bitposition)
        end_bitposition += self._display_point_drawing_order_.bitsizeof(end_bitposition)
        end_bitposition += self._display_line_type_.bitsizeof(end_bitposition)
        end_bitposition += self._display_line_drawing_order_.bitsizeof(end_bitposition)
        end_bitposition += self._display_area_type_.bitsizeof(end_bitposition)
        end_bitposition += self._display_area_drawing_order_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DrawingOrderMapping.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_display_point_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_point_types_)
        end_bitposition += zserio_context.num_display_line_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_line_types_)
        end_bitposition += zserio_context.num_display_area_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_area_types_)
        end_bitposition += self._display_point_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_point_drawing_order_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_line_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_line_drawing_order_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_area_type_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_area_drawing_order_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_point_types_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_line_types_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_display_area_types_)
        end_bitposition = self._display_point_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_point_drawing_order_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_line_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_line_drawing_order_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_area_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_area_drawing_order_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DrawingOrderMapping.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_display_point_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_point_types_)
        end_bitposition += zserio_context.num_display_line_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_line_types_)
        end_bitposition += zserio_context.num_display_area_types.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_display_area_types_)
        end_bitposition = self._display_point_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_point_drawing_order_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_line_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_line_drawing_order_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_area_type_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_area_drawing_order_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_display_point_types_ = zserio_reader.read_varsize()
        self._num_display_line_types_ = zserio_reader.read_varsize()
        self._num_display_area_types_ = zserio_reader.read_varsize()
        self._display_point_type_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type()), zserio_reader, self._num_display_point_types_)
        self._display_point_drawing_order_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_point_types_)
        self._display_line_type_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type()), zserio_reader, self._num_display_line_types_)
        self._display_line_drawing_order_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_line_types_)
        self._display_area_type_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type()), zserio_reader, self._num_display_area_types_)
        self._display_area_drawing_order_ = zserio.array.Array.from_reader(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_area_types_)

    def read_packed(self, zserio_context: DrawingOrderMapping.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_display_point_types_ = zserio_context.num_display_point_types.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_display_line_types_ = zserio_context.num_display_line_types.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_display_area_types_ = zserio_context.num_display_area_types.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._display_point_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type()), zserio_reader, self._num_display_point_types_)

        self._display_point_drawing_order_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_point_types_)

        self._display_line_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type()), zserio_reader, self._num_display_line_types_)

        self._display_line_drawing_order_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_line_types_)

        self._display_area_type_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type()), zserio_reader, self._num_display_area_types_)

        self._display_area_drawing_order_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._num_display_area_types_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_display_point_types_)

        zserio_writer.write_varsize(self._num_display_line_types_)

        zserio_writer.write_varsize(self._num_display_area_types_)

        # check array length
        if len(self._display_point_type_) != (self._num_display_point_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayPointType: "
                                                f"{len(self._display_point_type_)} != {self._num_display_point_types_}!")
        self._display_point_type_.write(zserio_writer)

        # check array length
        if len(self._display_point_drawing_order_) != (self._num_display_point_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: "
                                                f"{len(self._display_point_drawing_order_)} != {self._num_display_point_types_}!")
        self._display_point_drawing_order_.write(zserio_writer)

        # check array length
        if len(self._display_line_type_) != (self._num_display_line_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayLineType: "
                                                f"{len(self._display_line_type_)} != {self._num_display_line_types_}!")
        self._display_line_type_.write(zserio_writer)

        # check array length
        if len(self._display_line_drawing_order_) != (self._num_display_line_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: "
                                                f"{len(self._display_line_drawing_order_)} != {self._num_display_line_types_}!")
        self._display_line_drawing_order_.write(zserio_writer)

        # check array length
        if len(self._display_area_type_) != (self._num_display_area_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayAreaType: "
                                                f"{len(self._display_area_type_)} != {self._num_display_area_types_}!")
        self._display_area_type_.write(zserio_writer)

        # check array length
        if len(self._display_area_drawing_order_) != (self._num_display_area_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: "
                                                f"{len(self._display_area_drawing_order_)} != {self._num_display_area_types_}!")
        self._display_area_drawing_order_.write(zserio_writer)

    def write_packed(self, zserio_context: DrawingOrderMapping.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_display_point_types.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_display_point_types_)

        zserio_context.num_display_line_types.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_display_line_types_)

        zserio_context.num_display_area_types.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_display_area_types_)

        # check array length
        if len(self._display_point_type_) != (self._num_display_point_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayPointType: "
                                                f"{len(self._display_point_type_)} != {self._num_display_point_types_}!")
        self._display_point_type_.write_packed(zserio_writer)

        # check array length
        if len(self._display_point_drawing_order_) != (self._num_display_point_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: "
                                                f"{len(self._display_point_drawing_order_)} != {self._num_display_point_types_}!")
        self._display_point_drawing_order_.write_packed(zserio_writer)

        # check array length
        if len(self._display_line_type_) != (self._num_display_line_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayLineType: "
                                                f"{len(self._display_line_type_)} != {self._num_display_line_types_}!")
        self._display_line_type_.write_packed(zserio_writer)

        # check array length
        if len(self._display_line_drawing_order_) != (self._num_display_line_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: "
                                                f"{len(self._display_line_drawing_order_)} != {self._num_display_line_types_}!")
        self._display_line_drawing_order_.write_packed(zserio_writer)

        # check array length
        if len(self._display_area_type_) != (self._num_display_area_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayAreaType: "
                                                f"{len(self._display_area_type_)} != {self._num_display_area_types_}!")
        self._display_area_type_.write_packed(zserio_writer)

        # check array length
        if len(self._display_area_drawing_order_) != (self._num_display_area_types_):
            raise zserio.PythonRuntimeException("Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: "
                                                f"{len(self._display_area_drawing_order_)} != {self._num_display_area_types_}!")
        self._display_area_drawing_order_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_display_point_types_ = zserio.array.DeltaContext()
            self._num_display_line_types_ = zserio.array.DeltaContext()
            self._num_display_area_types_ = zserio.array.DeltaContext()

        @property
        def num_display_point_types(self):
            return self._num_display_point_types_

        @property
        def num_display_line_types(self):
            return self._num_display_line_types_

        @property
        def num_display_area_types(self):
            return self._num_display_area_types_

    class _ZserioElementFactory_display_point_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_point_type.DisplayPointType:
            del zserio_index
            return nds.display.types.display_point_type.DisplayPointType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_point_type.DisplayPointType:
            del zserio_index
            return nds.display.types.display_point_type.DisplayPointType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_display_line_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_display_area_type:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_area_type.DisplayAreaType:
            del zserio_index
            return nds.display.types.display_area_type.DisplayAreaType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_area_type.DisplayAreaType:
            del zserio_index
            return nds.display.types.display_area_type.DisplayAreaType.from_reader_packed(zserio_context, zserio_reader)
