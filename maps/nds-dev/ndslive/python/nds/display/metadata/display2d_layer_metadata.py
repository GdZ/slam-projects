# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.metadata.display2d_content
import nds.display.metadata.display_area_type_hierarchy_relation
import nds.display.metadata.display_line_type_hierarchy_relation
import nds.display.metadata.display_point_type_hierarchy_relation
import nds.display.metadata.display_scale_tile_level_mapping
import nds.display.metadata.drawing_order_mapping
import nds.display.types.display_area_type
import nds.display.types.display_line_type
import nds.display.types.display_point_type

class Display2DLayerMetadata:
    def __init__(
            self,
            content_: typing.Union[nds.display.metadata.display2d_content.Display2DContent, None] = None,
            available_display_point_types_: typing.Optional[typing.List[nds.display.types.display_point_type.DisplayPointType]] = None,
            available_display_line_types_: typing.Optional[typing.List[nds.display.types.display_line_type.DisplayLineType]] = None,
            available_display_area_types_: typing.Optional[typing.List[nds.display.types.display_area_type.DisplayAreaType]] = None,
            default_drawing_orders_: typing.Union[nds.display.metadata.drawing_order_mapping.DrawingOrderMapping, None] = None,
            display_area_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation]] = None,
            display_line_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation]] = None,
            display_point_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation]] = None,
            display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None] = None) -> None:
        self._content_ = content_
        if available_display_point_types_ is None:
            self._available_display_point_types_ = None
        else:
            self._available_display_point_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_point_types()), available_display_point_types_, is_auto=True)
        if available_display_line_types_ is None:
            self._available_display_line_types_ = None
        else:
            self._available_display_line_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_line_types()), available_display_line_types_, is_auto=True)
        if available_display_area_types_ is None:
            self._available_display_area_types_ = None
        else:
            self._available_display_area_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_area_types()), available_display_area_types_, is_auto=True)
        self._default_drawing_orders_ = default_drawing_orders_
        if display_area_type_relations_ is None:
            self._display_area_type_relations_ = None
        else:
            self._display_area_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type_relations()), display_area_type_relations_, is_auto=True)
        if display_line_type_relations_ is None:
            self._display_line_type_relations_ = None
        else:
            self._display_line_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type_relations()), display_line_type_relations_, is_auto=True)
        if display_point_type_relations_ is None:
            self._display_point_type_relations_ = None
        else:
            self._display_point_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type_relations()), display_point_type_relations_, is_auto=True)
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    @classmethod
    def from_reader(
            cls: typing.Type['Display2DLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'Display2DLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display2DLayerMetadata'],
            zserio_context: Display2DLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Display2DLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display2DLayerMetadata):
            return ((self._content_ == other._content_) and
                    (not other.is_available_display_point_types_used() if not self.is_available_display_point_types_used() else (self._available_display_point_types_ == other._available_display_point_types_)) and
                    (not other.is_available_display_line_types_used() if not self.is_available_display_line_types_used() else (self._available_display_line_types_ == other._available_display_line_types_)) and
                    (not other.is_available_display_area_types_used() if not self.is_available_display_area_types_used() else (self._available_display_area_types_ == other._available_display_area_types_)) and
                    (self._default_drawing_orders_ == other._default_drawing_orders_) and
                    (not other.is_display_area_type_relations_used() if not self.is_display_area_type_relations_used() else (self._display_area_type_relations_ == other._display_area_type_relations_)) and
                    (not other.is_display_line_type_relations_used() if not self.is_display_line_type_relations_used() else (self._display_line_type_relations_ == other._display_line_type_relations_)) and
                    (not other.is_display_point_type_relations_used() if not self.is_display_point_type_relations_used() else (self._display_point_type_relations_ == other._display_point_type_relations_)) and
                    (self._display_scale_tile_level_mapping_ == other._display_scale_tile_level_mapping_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_available_display_point_types_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._available_display_point_types_)
        if self.is_available_display_line_types_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._available_display_line_types_)
        if self.is_available_display_area_types_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._available_display_area_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._default_drawing_orders_)
        if self.is_display_area_type_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_area_type_relations_)
        if self.is_display_line_type_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_line_type_relations_)
        if self.is_display_point_type_relations_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_point_type_relations_)
        result = zserio.hashcode.calc_hashcode_object(result, self._display_scale_tile_level_mapping_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.metadata.display2d_content.Display2DContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.metadata.display2d_content.Display2DContent, None]) -> None:
        self._content_ = content_

    @property
    def available_display_point_types(self) -> typing.Optional[typing.List[nds.display.types.display_point_type.DisplayPointType]]:
        return None if self._available_display_point_types_ is None else self._available_display_point_types_.raw_array

    @available_display_point_types.setter
    def available_display_point_types(self, available_display_point_types_: typing.Optional[typing.List[nds.display.types.display_point_type.DisplayPointType]]) -> None:
        if available_display_point_types_ is None:
            self._available_display_point_types_ = None
        else:
            self._available_display_point_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_point_types()), available_display_point_types_, is_auto=True)

    def is_available_display_point_types_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.POINTS) == nds.display.metadata.display2d_content.Display2DContent.Values.POINTS

    def is_available_display_point_types_set(self) -> bool:
        return not self._available_display_point_types_ is None

    def reset_available_display_point_types(self) -> None:
        self._available_display_point_types_ = None

    @property
    def available_display_line_types(self) -> typing.Optional[typing.List[nds.display.types.display_line_type.DisplayLineType]]:
        return None if self._available_display_line_types_ is None else self._available_display_line_types_.raw_array

    @available_display_line_types.setter
    def available_display_line_types(self, available_display_line_types_: typing.Optional[typing.List[nds.display.types.display_line_type.DisplayLineType]]) -> None:
        if available_display_line_types_ is None:
            self._available_display_line_types_ = None
        else:
            self._available_display_line_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_line_types()), available_display_line_types_, is_auto=True)

    def is_available_display_line_types_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.LINES) == nds.display.metadata.display2d_content.Display2DContent.Values.LINES

    def is_available_display_line_types_set(self) -> bool:
        return not self._available_display_line_types_ is None

    def reset_available_display_line_types(self) -> None:
        self._available_display_line_types_ = None

    @property
    def available_display_area_types(self) -> typing.Optional[typing.List[nds.display.types.display_area_type.DisplayAreaType]]:
        return None if self._available_display_area_types_ is None else self._available_display_area_types_.raw_array

    @available_display_area_types.setter
    def available_display_area_types(self, available_display_area_types_: typing.Optional[typing.List[nds.display.types.display_area_type.DisplayAreaType]]) -> None:
        if available_display_area_types_ is None:
            self._available_display_area_types_ = None
        else:
            self._available_display_area_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_area_types()), available_display_area_types_, is_auto=True)

    def is_available_display_area_types_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.AREAS) == nds.display.metadata.display2d_content.Display2DContent.Values.AREAS or (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREAS) == nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREAS or (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREA_SETS) == nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREA_SETS

    def is_available_display_area_types_set(self) -> bool:
        return not self._available_display_area_types_ is None

    def reset_available_display_area_types(self) -> None:
        self._available_display_area_types_ = None

    @property
    def default_drawing_orders(self) -> typing.Union[nds.display.metadata.drawing_order_mapping.DrawingOrderMapping, None]:
        return self._default_drawing_orders_

    @default_drawing_orders.setter
    def default_drawing_orders(self, default_drawing_orders_: typing.Union[nds.display.metadata.drawing_order_mapping.DrawingOrderMapping, None]) -> None:
        self._default_drawing_orders_ = default_drawing_orders_

    @property
    def display_area_type_relations(self) -> typing.Optional[typing.List[nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation]]:
        return None if self._display_area_type_relations_ is None else self._display_area_type_relations_.raw_array

    @display_area_type_relations.setter
    def display_area_type_relations(self, display_area_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation]]) -> None:
        if display_area_type_relations_ is None:
            self._display_area_type_relations_ = None
        else:
            self._display_area_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type_relations()), display_area_type_relations_, is_auto=True)

    def is_display_area_type_relations_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.AREA_TYPE_RELATIONS) == nds.display.metadata.display2d_content.Display2DContent.Values.AREA_TYPE_RELATIONS

    def is_display_area_type_relations_set(self) -> bool:
        return not self._display_area_type_relations_ is None

    def reset_display_area_type_relations(self) -> None:
        self._display_area_type_relations_ = None

    @property
    def display_line_type_relations(self) -> typing.Optional[typing.List[nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation]]:
        return None if self._display_line_type_relations_ is None else self._display_line_type_relations_.raw_array

    @display_line_type_relations.setter
    def display_line_type_relations(self, display_line_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation]]) -> None:
        if display_line_type_relations_ is None:
            self._display_line_type_relations_ = None
        else:
            self._display_line_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type_relations()), display_line_type_relations_, is_auto=True)

    def is_display_line_type_relations_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.LINE_TYPE_RELATIONS) == nds.display.metadata.display2d_content.Display2DContent.Values.LINE_TYPE_RELATIONS

    def is_display_line_type_relations_set(self) -> bool:
        return not self._display_line_type_relations_ is None

    def reset_display_line_type_relations(self) -> None:
        self._display_line_type_relations_ = None

    @property
    def display_point_type_relations(self) -> typing.Optional[typing.List[nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation]]:
        return None if self._display_point_type_relations_ is None else self._display_point_type_relations_.raw_array

    @display_point_type_relations.setter
    def display_point_type_relations(self, display_point_type_relations_: typing.Optional[typing.List[nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation]]) -> None:
        if display_point_type_relations_ is None:
            self._display_point_type_relations_ = None
        else:
            self._display_point_type_relations_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type_relations()), display_point_type_relations_, is_auto=True)

    def is_display_point_type_relations_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.POINT_TYPE_RELATIONS) == nds.display.metadata.display2d_content.Display2DContent.Values.POINT_TYPE_RELATIONS

    def is_display_point_type_relations_set(self) -> bool:
        return not self._display_point_type_relations_ is None

    def reset_display_point_type_relations(self) -> None:
        self._display_point_type_relations_ = None

    @property
    def display_scale_tile_level_mapping(self) -> typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]:
        return self._display_scale_tile_level_mapping_

    @display_scale_tile_level_mapping.setter
    def display_scale_tile_level_mapping(self, display_scale_tile_level_mapping_: typing.Union[nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping, None]) -> None:
        self._display_scale_tile_level_mapping_ = display_scale_tile_level_mapping_

    def init_packing_context(self, zserio_context: Display2DLayerMetadata.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        self._default_drawing_orders_.init_packing_context(zserio_context.default_drawing_orders)
        self._display_scale_tile_level_mapping_.init_packing_context(zserio_context.display_scale_tile_level_mapping)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_available_display_point_types_used():
            end_bitposition += self._available_display_point_types_.bitsizeof(end_bitposition)
        if self.is_available_display_line_types_used():
            end_bitposition += self._available_display_line_types_.bitsizeof(end_bitposition)
        if self.is_available_display_area_types_used():
            end_bitposition += self._available_display_area_types_.bitsizeof(end_bitposition)
        end_bitposition += self._default_drawing_orders_.bitsizeof(end_bitposition)
        if self.is_display_area_type_relations_used():
            end_bitposition += self._display_area_type_relations_.bitsizeof(end_bitposition)
        if self.is_display_line_type_relations_used():
            end_bitposition += self._display_line_type_relations_.bitsizeof(end_bitposition)
        if self.is_display_point_type_relations_used():
            end_bitposition += self._display_point_type_relations_.bitsizeof(end_bitposition)
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display2DLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_available_display_point_types_used():
            end_bitposition += self._available_display_point_types_.bitsizeof_packed(end_bitposition)
        if self.is_available_display_line_types_used():
            end_bitposition += self._available_display_line_types_.bitsizeof_packed(end_bitposition)
        if self.is_available_display_area_types_used():
            end_bitposition += self._available_display_area_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._default_drawing_orders_.bitsizeof_packed(zserio_context.default_drawing_orders, end_bitposition)
        if self.is_display_area_type_relations_used():
            end_bitposition += self._display_area_type_relations_.bitsizeof_packed(end_bitposition)
        if self.is_display_line_type_relations_used():
            end_bitposition += self._display_line_type_relations_.bitsizeof_packed(end_bitposition)
        if self.is_display_point_type_relations_used():
            end_bitposition += self._display_point_type_relations_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._display_scale_tile_level_mapping_.bitsizeof_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_available_display_point_types_used():
            end_bitposition = self._available_display_point_types_.initialize_offsets(end_bitposition)
        if self.is_available_display_line_types_used():
            end_bitposition = self._available_display_line_types_.initialize_offsets(end_bitposition)
        if self.is_available_display_area_types_used():
            end_bitposition = self._available_display_area_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._default_drawing_orders_.initialize_offsets(end_bitposition)
        if self.is_display_area_type_relations_used():
            end_bitposition = self._display_area_type_relations_.initialize_offsets(end_bitposition)
        if self.is_display_line_type_relations_used():
            end_bitposition = self._display_line_type_relations_.initialize_offsets(end_bitposition)
        if self.is_display_point_type_relations_used():
            end_bitposition = self._display_point_type_relations_.initialize_offsets(end_bitposition)
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display2DLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_available_display_point_types_used():
            end_bitposition = self._available_display_point_types_.initialize_offsets_packed(end_bitposition)
        if self.is_available_display_line_types_used():
            end_bitposition = self._available_display_line_types_.initialize_offsets_packed(end_bitposition)
        if self.is_available_display_area_types_used():
            end_bitposition = self._available_display_area_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._default_drawing_orders_.initialize_offsets_packed(zserio_context.default_drawing_orders, end_bitposition)
        if self.is_display_area_type_relations_used():
            end_bitposition = self._display_area_type_relations_.initialize_offsets_packed(end_bitposition)
        if self.is_display_line_type_relations_used():
            end_bitposition = self._display_line_type_relations_.initialize_offsets_packed(end_bitposition)
        if self.is_display_point_type_relations_used():
            end_bitposition = self._display_point_type_relations_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._display_scale_tile_level_mapping_.initialize_offsets_packed(zserio_context.display_scale_tile_level_mapping, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.display2d_content.Display2DContent.from_reader(zserio_reader)
        if self.is_available_display_point_types_used():
            self._available_display_point_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_point_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_point_types_ = None
        if self.is_available_display_line_types_used():
            self._available_display_line_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_line_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_line_types_ = None
        if self.is_available_display_area_types_used():
            self._available_display_area_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_area_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_area_types_ = None
        self._default_drawing_orders_ = nds.display.metadata.drawing_order_mapping.DrawingOrderMapping.from_reader(zserio_reader)
        if self.is_display_area_type_relations_used():
            self._display_area_type_relations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_area_type_relations_ = None
        if self.is_display_line_type_relations_used():
            self._display_line_type_relations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_line_type_relations_ = None
        if self.is_display_point_type_relations_used():
            self._display_point_type_relations_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_point_type_relations_ = None
        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader(zserio_reader)

    def read_packed(self, zserio_context: Display2DLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.display2d_content.Display2DContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_available_display_point_types_used():
            self._available_display_point_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_point_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_point_types_ = None

        if self.is_available_display_line_types_used():
            self._available_display_line_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_line_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_line_types_ = None

        if self.is_available_display_area_types_used():
            self._available_display_area_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_available_display_area_types()), zserio_reader, is_auto=True)
        else:
            self._available_display_area_types_ = None

        self._default_drawing_orders_ = nds.display.metadata.drawing_order_mapping.DrawingOrderMapping.from_reader_packed(zserio_context.default_drawing_orders, zserio_reader)

        if self.is_display_area_type_relations_used():
            self._display_area_type_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_area_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_area_type_relations_ = None

        if self.is_display_line_type_relations_used():
            self._display_line_type_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_line_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_line_type_relations_ = None

        if self.is_display_point_type_relations_used():
            self._display_point_type_relations_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_display_point_type_relations()), zserio_reader, is_auto=True)
        else:
            self._display_point_type_relations_ = None

        self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.from_reader_packed(zserio_context.display_scale_tile_level_mapping, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_available_display_point_types_used():
            self._available_display_point_types_.write(zserio_writer)
        if self.is_available_display_line_types_used():
            self._available_display_line_types_.write(zserio_writer)
        if self.is_available_display_area_types_used():
            self._available_display_area_types_.write(zserio_writer)
        self._default_drawing_orders_.write(zserio_writer)
        if self.is_display_area_type_relations_used():
            self._display_area_type_relations_.write(zserio_writer)
        if self.is_display_line_type_relations_used():
            self._display_line_type_relations_.write(zserio_writer)
        if self.is_display_point_type_relations_used():
            self._display_point_type_relations_.write(zserio_writer)
        self._display_scale_tile_level_mapping_.write(zserio_writer)

    def write_packed(self, zserio_context: Display2DLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_available_display_point_types_used():
            self._available_display_point_types_.write_packed(zserio_writer)

        if self.is_available_display_line_types_used():
            self._available_display_line_types_.write_packed(zserio_writer)

        if self.is_available_display_area_types_used():
            self._available_display_area_types_.write_packed(zserio_writer)

        self._default_drawing_orders_.write_packed(zserio_context.default_drawing_orders, zserio_writer)

        if self.is_display_area_type_relations_used():
            self._display_area_type_relations_.write_packed(zserio_writer)

        if self.is_display_line_type_relations_used():
            self._display_line_type_relations_.write_packed(zserio_writer)

        if self.is_display_point_type_relations_used():
            self._display_point_type_relations_.write_packed(zserio_writer)

        self._display_scale_tile_level_mapping_.write_packed(zserio_context.display_scale_tile_level_mapping, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._default_drawing_orders_ = nds.display.metadata.drawing_order_mapping.DrawingOrderMapping.ZserioPackingContext()
            self._display_scale_tile_level_mapping_ = nds.display.metadata.display_scale_tile_level_mapping.DisplayScaleTileLevelMapping.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def default_drawing_orders(self):
            return self._default_drawing_orders_

        @property
        def display_scale_tile_level_mapping(self):
            return self._display_scale_tile_level_mapping_

    class _ZserioElementFactory_available_display_point_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_point_type.DisplayPointType:
            del zserio_index
            return nds.display.types.display_point_type.DisplayPointType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_point_type.DisplayPointType:
            del zserio_index
            return nds.display.types.display_point_type.DisplayPointType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_available_display_line_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_line_type.DisplayLineType:
            del zserio_index
            return nds.display.types.display_line_type.DisplayLineType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_available_display_area_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_area_type.DisplayAreaType:
            del zserio_index
            return nds.display.types.display_area_type.DisplayAreaType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.display_area_type.DisplayAreaType:
            del zserio_index
            return nds.display.types.display_area_type.DisplayAreaType.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_display_area_type_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation.ZserioPackingContext:
            return nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_area_type_hierarchy_relation.DisplayAreaTypeHierarchyRelation.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_display_line_type_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation.ZserioPackingContext:
            return nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_line_type_hierarchy_relation.DisplayLineTypeHierarchyRelation.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_display_point_type_relations:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation.ZserioPackingContext:
            return nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation:
            del zserio_index
            return nds.display.metadata.display_point_type_hierarchy_relation.DisplayPointTypeHierarchyRelation.from_reader_packed(zserio_context, zserio_reader)
