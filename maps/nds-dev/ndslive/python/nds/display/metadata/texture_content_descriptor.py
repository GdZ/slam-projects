# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.texture_condition_usage_type
import nds.display.types.texture_format
import nds.display.types.texture_rendering_usage_type

class TextureContentDescriptor:
    def __init__(
            self,
            texture_formats_: typing.List[nds.display.types.texture_format.TextureFormat] = None,
            texture_rendering_usage_types_: typing.List[nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType] = None,
            texture_condition_usage_types_: typing.Union[nds.display.types.texture_condition_usage_type.TextureConditionUsageType, None] = None) -> None:
        self._texture_formats_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_formats()), texture_formats_, is_auto=True)
        self._texture_rendering_usage_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_rendering_usage_types()), texture_rendering_usage_types_, is_auto=True)
        self._texture_condition_usage_types_ = texture_condition_usage_types_

    @classmethod
    def from_reader(
            cls: typing.Type['TextureContentDescriptor'],
            zserio_reader: zserio.BitStreamReader) -> 'TextureContentDescriptor':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TextureContentDescriptor'],
            zserio_context: TextureContentDescriptor.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TextureContentDescriptor':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TextureContentDescriptor):
            return ((self._texture_formats_ == other._texture_formats_) and
                    (self._texture_rendering_usage_types_ == other._texture_rendering_usage_types_) and
                    (self._texture_condition_usage_types_ == other._texture_condition_usage_types_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._texture_formats_)
        result = zserio.hashcode.calc_hashcode_object(result, self._texture_rendering_usage_types_)
        result = zserio.hashcode.calc_hashcode_object(result, self._texture_condition_usage_types_)

        return result

    @property
    def texture_formats(self) -> typing.List[nds.display.types.texture_format.TextureFormat]:
        return self._texture_formats_.raw_array

    @texture_formats.setter
    def texture_formats(self, texture_formats_: typing.List[nds.display.types.texture_format.TextureFormat]) -> None:
        self._texture_formats_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_formats()), texture_formats_, is_auto=True)

    @property
    def texture_rendering_usage_types(self) -> typing.List[nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType]:
        return self._texture_rendering_usage_types_.raw_array

    @texture_rendering_usage_types.setter
    def texture_rendering_usage_types(self, texture_rendering_usage_types_: typing.List[nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType]) -> None:
        self._texture_rendering_usage_types_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_rendering_usage_types()), texture_rendering_usage_types_, is_auto=True)

    @property
    def texture_condition_usage_types(self) -> typing.Union[nds.display.types.texture_condition_usage_type.TextureConditionUsageType, None]:
        return self._texture_condition_usage_types_

    @texture_condition_usage_types.setter
    def texture_condition_usage_types(self, texture_condition_usage_types_: typing.Union[nds.display.types.texture_condition_usage_type.TextureConditionUsageType, None]) -> None:
        self._texture_condition_usage_types_ = texture_condition_usage_types_

    def init_packing_context(self, zserio_context: TextureContentDescriptor.ZserioPackingContext) -> None:
        self._texture_condition_usage_types_.init_packing_context(zserio_context.texture_condition_usage_types)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._texture_formats_.bitsizeof(end_bitposition)
        end_bitposition += self._texture_rendering_usage_types_.bitsizeof(end_bitposition)
        end_bitposition += self._texture_condition_usage_types_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TextureContentDescriptor.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._texture_formats_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._texture_rendering_usage_types_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._texture_condition_usage_types_.bitsizeof_packed(zserio_context.texture_condition_usage_types, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._texture_formats_.initialize_offsets(end_bitposition)
        end_bitposition = self._texture_rendering_usage_types_.initialize_offsets(end_bitposition)
        end_bitposition = self._texture_condition_usage_types_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TextureContentDescriptor.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._texture_formats_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._texture_rendering_usage_types_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._texture_condition_usage_types_.initialize_offsets_packed(zserio_context.texture_condition_usage_types, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._texture_formats_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_formats()), zserio_reader, is_auto=True)
        self._texture_rendering_usage_types_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_rendering_usage_types()), zserio_reader, is_auto=True)
        self._texture_condition_usage_types_ = nds.display.types.texture_condition_usage_type.TextureConditionUsageType.from_reader(zserio_reader)

    def read_packed(self, zserio_context: TextureContentDescriptor.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._texture_formats_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_formats()), zserio_reader, is_auto=True)

        self._texture_rendering_usage_types_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_rendering_usage_types()), zserio_reader, is_auto=True)

        self._texture_condition_usage_types_ = nds.display.types.texture_condition_usage_type.TextureConditionUsageType.from_reader_packed(zserio_context.texture_condition_usage_types, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._texture_formats_.write(zserio_writer)
        self._texture_rendering_usage_types_.write(zserio_writer)
        self._texture_condition_usage_types_.write(zserio_writer)

    def write_packed(self, zserio_context: TextureContentDescriptor.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._texture_formats_.write_packed(zserio_writer)

        self._texture_rendering_usage_types_.write_packed(zserio_writer)

        self._texture_condition_usage_types_.write_packed(zserio_context.texture_condition_usage_types, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._texture_condition_usage_types_ = zserio.array.DeltaContext()

        @property
        def texture_condition_usage_types(self):
            return self._texture_condition_usage_types_

    class _ZserioElementFactory_texture_formats:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_format.TextureFormat:
            del zserio_index
            return nds.display.types.texture_format.TextureFormat.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_format.TextureFormat:
            del zserio_index
            return nds.display.types.texture_format.TextureFormat.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_texture_rendering_usage_types:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType:
            del zserio_index
            return nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(zserio_context: zserio.array.DeltaContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType:
            del zserio_index
            return nds.display.types.texture_rendering_usage_type.TextureRenderingUsageType.from_reader_packed(zserio_context, zserio_reader)
