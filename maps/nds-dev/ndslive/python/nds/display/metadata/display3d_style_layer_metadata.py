# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.metadata.display3d_style_layer_content
import nds.display.metadata.texture_content_descriptor

class Display3DStyleLayerMetadata:
    def __init__(
            self,
            content_: typing.Union[nds.display.metadata.display3d_style_layer_content.Display3DStyleLayerContent, None] = None,
            texture_metadata_: typing.Optional[nds.display.metadata.texture_content_descriptor.TextureContentDescriptor] = None) -> None:
        self._content_ = content_
        self._texture_metadata_ = texture_metadata_

    @classmethod
    def from_reader(
            cls: typing.Type['Display3DStyleLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'Display3DStyleLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display3DStyleLayerMetadata'],
            zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Display3DStyleLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display3DStyleLayerMetadata):
            return ((self._content_ == other._content_) and
                    (not other.is_texture_metadata_used() if not self.is_texture_metadata_used() else (self._texture_metadata_ == other._texture_metadata_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_texture_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_metadata_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.metadata.display3d_style_layer_content.Display3DStyleLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.metadata.display3d_style_layer_content.Display3DStyleLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def texture_metadata(self) -> typing.Optional[nds.display.metadata.texture_content_descriptor.TextureContentDescriptor]:
        return self._texture_metadata_

    @texture_metadata.setter
    def texture_metadata(self, texture_metadata_: typing.Optional[nds.display.metadata.texture_content_descriptor.TextureContentDescriptor]) -> None:
        self._texture_metadata_ = texture_metadata_

    def is_texture_metadata_used(self) -> bool:
        return (self._content_.has_textures)

    def is_texture_metadata_set(self) -> bool:
        return not self._texture_metadata_ is None

    def reset_texture_metadata(self) -> None:
        self._texture_metadata_ = None

    def init_packing_context(self, zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext) -> None:
        if self.is_texture_metadata_used():
            self._texture_metadata_.init_packing_context(zserio_context.texture_metadata)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_texture_metadata_used():
            end_bitposition += self._texture_metadata_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_texture_metadata_used():
            end_bitposition += self._texture_metadata_.bitsizeof_packed(zserio_context.texture_metadata, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_texture_metadata_used():
            end_bitposition = self._texture_metadata_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_texture_metadata_used():
            end_bitposition = self._texture_metadata_.initialize_offsets_packed(zserio_context.texture_metadata, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.display3d_style_layer_content.Display3DStyleLayerContent.from_reader(zserio_reader)
        if self.is_texture_metadata_used():
            self._texture_metadata_ = nds.display.metadata.texture_content_descriptor.TextureContentDescriptor.from_reader(zserio_reader)
        else:
            self._texture_metadata_ = None

    def read_packed(self, zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.display3d_style_layer_content.Display3DStyleLayerContent.from_reader(zserio_reader)

        if self.is_texture_metadata_used():
            self._texture_metadata_ = nds.display.metadata.texture_content_descriptor.TextureContentDescriptor.from_reader_packed(zserio_context.texture_metadata, zserio_reader)
        else:
            self._texture_metadata_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_texture_metadata_used():
            self._texture_metadata_.write(zserio_writer)

    def write_packed(self, zserio_context: Display3DStyleLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)

        if self.is_texture_metadata_used():
            self._texture_metadata_.write_packed(zserio_context.texture_metadata, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._texture_metadata_ = nds.display.metadata.texture_content_descriptor.TextureContentDescriptor.ZserioPackingContext()

        @property
        def texture_metadata(self):
            return self._texture_metadata_
