# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.delta_elevation
import nds.core.types.global_source_id
import nds.display.details.attributes.display_area_attribute_type
import nds.display.details.types.building_floor_count
import nds.display.details.types.building_height
import nds.display.details.types.drawing_order
import nds.display.details.types.elevation_level
import nds.display.details.types.ground_height
import nds.display.details.types.has3d_representation
import nds.display.details.types.roof_color
import nds.display.details.types.wall_color

class DisplayAreaAttributeValue:
    def __init__(
            self,
            type_: nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType,
            *,
            drawing_order_: typing.Union[nds.display.details.types.drawing_order.DrawingOrder, None] = None,
            building_floor_count_: typing.Union[nds.display.details.types.building_floor_count.BuildingFloorCount, None] = None,
            building_height_: typing.Union[nds.display.details.types.building_height.BuildingHeight, None] = None,
            ground_height_: typing.Union[nds.display.details.types.ground_height.GroundHeight, None] = None,
            roof_color_: typing.Union[nds.display.details.types.roof_color.RoofColor, None] = None,
            wall_color_: typing.Union[nds.display.details.types.wall_color.WallColor, None] = None,
            elevation_delta_: typing.Union[nds.core.geometry.delta_elevation.DeltaElevation, None] = None,
            elevation_level_: typing.Union[nds.display.details.types.elevation_level.ElevationLevel, None] = None,
            has3d_representation_: typing.Union[nds.display.details.types.has3d_representation.Has3dRepresentation, None] = None,
            global_source_id_: typing.Union[nds.core.types.global_source_id.GlobalSourceId, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if drawing_order_ is not None:
            self._choice = drawing_order_
        if building_floor_count_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = building_floor_count_
        if building_height_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = building_height_
        if ground_height_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = ground_height_
        if roof_color_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = roof_color_
        if wall_color_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = wall_color_
        if elevation_delta_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = elevation_delta_
        if elevation_level_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = elevation_level_
        if has3d_representation_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = has3d_representation_
        if global_source_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice DisplayAreaAttributeValue is ambiguous!")
            self._choice = global_source_id_

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayAreaAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType) -> 'DisplayAreaAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayAreaAttributeValue'],
            zserio_context: DisplayAreaAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType) -> 'DisplayAreaAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayAreaAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType:
        return self._type_

    @property
    def drawing_order(self) -> typing.Union[nds.display.details.types.drawing_order.DrawingOrder, None]:
        return self._choice

    @drawing_order.setter
    def drawing_order(self, drawing_order_: typing.Union[nds.display.details.types.drawing_order.DrawingOrder, None]) -> None:
        self._choice = drawing_order_

    @property
    def building_floor_count(self) -> nds.display.details.types.building_floor_count.BuildingFloorCount:
        return self._choice

    @building_floor_count.setter
    def building_floor_count(self, building_floor_count_: nds.display.details.types.building_floor_count.BuildingFloorCount) -> None:
        self._choice = building_floor_count_

    @property
    def building_height(self) -> nds.display.details.types.building_height.BuildingHeight:
        return self._choice

    @building_height.setter
    def building_height(self, building_height_: nds.display.details.types.building_height.BuildingHeight) -> None:
        self._choice = building_height_

    @property
    def ground_height(self) -> nds.display.details.types.ground_height.GroundHeight:
        return self._choice

    @ground_height.setter
    def ground_height(self, ground_height_: nds.display.details.types.ground_height.GroundHeight) -> None:
        self._choice = ground_height_

    @property
    def roof_color(self) -> typing.Union[nds.display.details.types.roof_color.RoofColor, None]:
        return self._choice

    @roof_color.setter
    def roof_color(self, roof_color_: typing.Union[nds.display.details.types.roof_color.RoofColor, None]) -> None:
        self._choice = roof_color_

    @property
    def wall_color(self) -> typing.Union[nds.display.details.types.wall_color.WallColor, None]:
        return self._choice

    @wall_color.setter
    def wall_color(self, wall_color_: typing.Union[nds.display.details.types.wall_color.WallColor, None]) -> None:
        self._choice = wall_color_

    @property
    def elevation_delta(self) -> nds.core.geometry.delta_elevation.DeltaElevation:
        return self._choice

    @elevation_delta.setter
    def elevation_delta(self, elevation_delta_: nds.core.geometry.delta_elevation.DeltaElevation) -> None:
        self._choice = elevation_delta_

    @property
    def elevation_level(self) -> nds.display.details.types.elevation_level.ElevationLevel:
        return self._choice

    @elevation_level.setter
    def elevation_level(self, elevation_level_: nds.display.details.types.elevation_level.ElevationLevel) -> None:
        self._choice = elevation_level_

    @property
    def has3d_representation(self) -> typing.Union[nds.display.details.types.has3d_representation.Has3dRepresentation, None]:
        return self._choice

    @has3d_representation.setter
    def has3d_representation(self, has3d_representation_: typing.Union[nds.display.details.types.has3d_representation.Has3dRepresentation, None]) -> None:
        self._choice = has3d_representation_

    @property
    def global_source_id(self) -> nds.core.types.global_source_id.GlobalSourceId:
        return self._choice

    @global_source_id.setter
    def global_source_id(self, global_source_id_: nds.core.types.global_source_id.GlobalSourceId) -> None:
        self._choice = global_source_id_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            return self.CHOICE_DRAWING_ORDER
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            return self.CHOICE_BUILDING_FLOOR_COUNT
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            return self.CHOICE_BUILDING_HEIGHT
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            return self.CHOICE_GROUND_HEIGHT
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            return self.CHOICE_ROOF_COLOR
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            return self.CHOICE_WALL_COLOR
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            return self.CHOICE_ELEVATION_DELTA
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            return self.CHOICE_ELEVATION_LEVEL
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            return self.CHOICE_HAS3D_REPRESENTATION
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            return self.CHOICE_GLOBAL_SOURCE_ID
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: DisplayAreaAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            self._choice.init_packing_context(zserio_context.drawing_order)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            zserio_context.building_floor_count.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            zserio_context.building_height.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            zserio_context.ground_height.init(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            self._choice.init_packing_context(zserio_context.roof_color)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            self._choice.init_packing_context(zserio_context.wall_color)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            zserio_context.elevation_delta.init(zserio.array.VarInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            zserio_context.elevation_level.init(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            pass
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            end_bitposition += 8
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            end_bitposition += 8
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayAreaAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.drawing_order, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            end_bitposition += zserio_context.building_floor_count.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            end_bitposition += zserio_context.building_height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            end_bitposition += zserio_context.ground_height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.roof_color, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.wall_color, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            end_bitposition += zserio_context.elevation_delta.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            end_bitposition += zserio_context.elevation_level.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            end_bitposition += 8
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            end_bitposition += 8
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayAreaAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.drawing_order, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            end_bitposition += zserio_context.building_floor_count.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            end_bitposition += zserio_context.building_height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            end_bitposition += zserio_context.ground_height.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.roof_color, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.wall_color, end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            end_bitposition += zserio_context.elevation_delta.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            end_bitposition += zserio_context.elevation_level.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            self._choice = nds.display.details.types.drawing_order.DrawingOrder.from_reader(zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            self._choice = zserio_reader.read_varuint32()
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            self._choice = nds.display.details.types.roof_color.RoofColor.from_reader(zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            self._choice = nds.display.details.types.wall_color.WallColor.from_reader(zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            self._choice = zserio_reader.read_varint32()
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            self._choice = zserio_reader.read_signed_bits(8)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            self._choice = nds.display.details.types.has3d_representation.Has3dRepresentation.from_reader(zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

    def read_packed(self, zserio_context: DisplayAreaAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            self._choice = nds.display.details.types.drawing_order.DrawingOrder.from_reader_packed(zserio_context.drawing_order, zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            self._choice = zserio_context.building_floor_count.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            self._choice = zserio_context.building_height.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            self._choice = zserio_context.ground_height.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            self._choice = nds.display.details.types.roof_color.RoofColor.from_reader_packed(zserio_context.roof_color, zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            self._choice = nds.display.details.types.wall_color.WallColor.from_reader_packed(zserio_context.wall_color, zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            self._choice = zserio_context.elevation_delta.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            self._choice = zserio_context.elevation_level.read(zserio.array.SignedBitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            self._choice = nds.display.details.types.has3d_representation.Has3dRepresentation.from_reader(zserio_reader)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            zserio_writer.write_varuint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            zserio_writer.write_varint32(self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            zserio_writer.write_signed_bits(self._choice, 8)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

    def write_packed(self, zserio_context: DisplayAreaAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.DRAWING_ORDER):
            self._choice.write_packed(zserio_context.drawing_order, zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_FLOOR_COUNT):
            zserio_context.building_floor_count.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.BUILDING_HEIGHT):
            zserio_context.building_height.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GROUND_HEIGHT):
            zserio_context.ground_height.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ROOF_COLOR):
            self._choice.write_packed(zserio_context.roof_color, zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.WALL_COLOR):
            self._choice.write_packed(zserio_context.wall_color, zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_DELTA):
            zserio_context.elevation_delta.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.ELEVATION_LEVEL):
            zserio_context.elevation_level.write(zserio.array.SignedBitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.HAS_3D_REPRESENTATION):
            self._choice.write(zserio_writer)
        elif selector == (nds.display.details.attributes.display_area_attribute_type.DisplayAreaAttributeType.GLOBAL_SOURCE_ID):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice DisplayAreaAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._drawing_order_ = nds.display.details.types.drawing_order.DrawingOrder.ZserioPackingContext()
            self._building_floor_count_ = zserio.array.DeltaContext()
            self._building_height_ = zserio.array.DeltaContext()
            self._ground_height_ = zserio.array.DeltaContext()
            self._roof_color_ = nds.display.details.types.roof_color.RoofColor.ZserioPackingContext()
            self._wall_color_ = nds.display.details.types.wall_color.WallColor.ZserioPackingContext()
            self._elevation_delta_ = zserio.array.DeltaContext()
            self._elevation_level_ = zserio.array.DeltaContext()

        @property
        def drawing_order(self):
            return self._drawing_order_

        @property
        def building_floor_count(self):
            return self._building_floor_count_

        @property
        def building_height(self):
            return self._building_height_

        @property
        def ground_height(self):
            return self._ground_height_

        @property
        def roof_color(self):
            return self._roof_color_

        @property
        def wall_color(self):
            return self._wall_color_

        @property
        def elevation_delta(self):
            return self._elevation_delta_

        @property
        def elevation_level(self):
            return self._elevation_level_

    CHOICE_DRAWING_ORDER = 0
    CHOICE_BUILDING_FLOOR_COUNT = 1
    CHOICE_BUILDING_HEIGHT = 2
    CHOICE_GROUND_HEIGHT = 3
    CHOICE_ROOF_COLOR = 4
    CHOICE_WALL_COLOR = 5
    CHOICE_ELEVATION_DELTA = 6
    CHOICE_ELEVATION_LEVEL = 7
    CHOICE_HAS3D_REPRESENTATION = 8
    CHOICE_GLOBAL_SOURCE_ID = 9
    UNDEFINED_CHOICE = -1
