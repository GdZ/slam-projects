# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class OriginalPointHeights:
    def __init__(
            self,
            point_height_: typing.List[int] = None) -> None:
        self._point_height_ = zserio.array.Array(zserio.array.VarInt16ArrayTraits(), point_height_)

    @classmethod
    def from_reader(
            cls: typing.Type['OriginalPointHeights'],
            zserio_reader: zserio.BitStreamReader) -> 'OriginalPointHeights':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['OriginalPointHeights'],
            zserio_context: OriginalPointHeights.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'OriginalPointHeights':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OriginalPointHeights):
            return (self._point_height_ == other._point_height_)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._point_height_)

        return result

    @property
    def point_height(self) -> typing.List[int]:
        return self._point_height_.raw_array

    @point_height.setter
    def point_height(self, point_height_: typing.List[int]) -> None:
        self._point_height_ = zserio.array.Array(zserio.array.VarInt16ArrayTraits(), point_height_)

    def init_packing_context(self, zserio_context: OriginalPointHeights.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._point_height_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: OriginalPointHeights.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._point_height_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._point_height_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: OriginalPointHeights.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._point_height_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._point_height_ = zserio.array.Array.from_reader(zserio.array.VarInt16ArrayTraits(), zserio_reader, 2)

    def read_packed(self, zserio_context: OriginalPointHeights.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._point_height_ = zserio.array.Array.from_reader_packed(zserio.array.VarInt16ArrayTraits(), zserio_reader, 2)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check array length
        if len(self._point_height_) != (2):
            raise zserio.PythonRuntimeException("Wrong array length for field OriginalPointHeights.pointHeight: "
                                                f"{len(self._point_height_)} != {2}!")
        self._point_height_.write(zserio_writer)

    def write_packed(self, zserio_context: OriginalPointHeights.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        # check array length
        if len(self._point_height_) != (2):
            raise zserio.PythonRuntimeException("Wrong array length for field OriginalPointHeights.pointHeight: "
                                                f"{len(self._point_height_)} != {2}!")
        self._point_height_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass
