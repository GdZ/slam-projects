# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.display.details.instantiations.display_area_attribute_map_list
import nds.display.details.instantiations.display_area_attribute_set_list
import nds.display.details.instantiations.display_line_attribute_map_list
import nds.display.details.instantiations.display_line_attribute_set_list
import nds.display.details.instantiations.display_point_attribute_map_list
import nds.display.details.instantiations.display_point_attribute_set_list
import nds.display.details.metadata.display_attribute_layer_content
import nds.display.details.types.base_elevation
import nds.system.types.layer_type

class DisplayAttributeLayer:
    def __init__(
            self,
            content_: typing.Union[nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent, None] = None,
            base_elevation_: typing.Optional[nds.display.details.types.base_elevation.BaseElevation] = None,
            display_area_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList] = None,
            display_area_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList] = None,
            display_line_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList] = None,
            display_line_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList] = None,
            display_point_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList] = None,
            display_point_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList] = None) -> None:
        self._content_ = content_
        self._base_elevation_ = base_elevation_
        self._display_area_attribute_maps_ = display_area_attribute_maps_
        self._display_area_attribute_sets_ = display_area_attribute_sets_
        self._display_line_attribute_maps_ = display_line_attribute_maps_
        self._display_line_attribute_sets_ = display_line_attribute_sets_
        self._display_point_attribute_maps_ = display_point_attribute_maps_
        self._display_point_attribute_sets_ = display_point_attribute_sets_

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayAttributeLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'DisplayAttributeLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayAttributeLayer'],
            zserio_context: DisplayAttributeLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DisplayAttributeLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayAttributeLayer):
            return ((self._content_ == other._content_) and
                    (not other.is_base_elevation_used() if not self.is_base_elevation_used() else (self._base_elevation_ == other._base_elevation_)) and
                    (not other.is_display_area_attribute_maps_used() if not self.is_display_area_attribute_maps_used() else (self._display_area_attribute_maps_ == other._display_area_attribute_maps_)) and
                    (not other.is_display_area_attribute_sets_used() if not self.is_display_area_attribute_sets_used() else (self._display_area_attribute_sets_ == other._display_area_attribute_sets_)) and
                    (not other.is_display_line_attribute_maps_used() if not self.is_display_line_attribute_maps_used() else (self._display_line_attribute_maps_ == other._display_line_attribute_maps_)) and
                    (not other.is_display_line_attribute_sets_used() if not self.is_display_line_attribute_sets_used() else (self._display_line_attribute_sets_ == other._display_line_attribute_sets_)) and
                    (not other.is_display_point_attribute_maps_used() if not self.is_display_point_attribute_maps_used() else (self._display_point_attribute_maps_ == other._display_point_attribute_maps_)) and
                    (not other.is_display_point_attribute_sets_used() if not self.is_display_point_attribute_sets_used() else (self._display_point_attribute_sets_ == other._display_point_attribute_sets_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_base_elevation_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_area_attribute_maps_)
        if self.is_display_area_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_area_attribute_sets_)
        if self.is_display_line_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_line_attribute_maps_)
        if self.is_display_line_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_line_attribute_sets_)
        if self.is_display_point_attribute_maps_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_point_attribute_maps_)
        if self.is_display_point_attribute_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_point_attribute_sets_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def base_elevation(self) -> typing.Optional[nds.display.details.types.base_elevation.BaseElevation]:
        return self._base_elevation_

    @base_elevation.setter
    def base_elevation(self, base_elevation_: typing.Optional[nds.display.details.types.base_elevation.BaseElevation]) -> None:
        self._base_elevation_ = base_elevation_

    def is_base_elevation_used(self) -> bool:
        return self.is_base_elevation_set()

    def is_base_elevation_set(self) -> bool:
        return not self._base_elevation_ is None

    def reset_base_elevation(self) -> None:
        self._base_elevation_ = None

    @property
    def display_area_attribute_maps(self) -> typing.Optional[nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList]:
        return self._display_area_attribute_maps_

    @display_area_attribute_maps.setter
    def display_area_attribute_maps(self, display_area_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList]) -> None:
        self._display_area_attribute_maps_ = display_area_attribute_maps_

    def is_display_area_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_AREA_MAPS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_AREA_MAPS

    def is_display_area_attribute_maps_set(self) -> bool:
        return not self._display_area_attribute_maps_ is None

    def reset_display_area_attribute_maps(self) -> None:
        self._display_area_attribute_maps_ = None

    @property
    def display_area_attribute_sets(self) -> typing.Optional[nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList]:
        return self._display_area_attribute_sets_

    @display_area_attribute_sets.setter
    def display_area_attribute_sets(self, display_area_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList]) -> None:
        self._display_area_attribute_sets_ = display_area_attribute_sets_

    def is_display_area_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_AREA_SETS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_AREA_SETS

    def is_display_area_attribute_sets_set(self) -> bool:
        return not self._display_area_attribute_sets_ is None

    def reset_display_area_attribute_sets(self) -> None:
        self._display_area_attribute_sets_ = None

    @property
    def display_line_attribute_maps(self) -> typing.Optional[nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList]:
        return self._display_line_attribute_maps_

    @display_line_attribute_maps.setter
    def display_line_attribute_maps(self, display_line_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList]) -> None:
        self._display_line_attribute_maps_ = display_line_attribute_maps_

    def is_display_line_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_LINE_MAPS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_LINE_MAPS

    def is_display_line_attribute_maps_set(self) -> bool:
        return not self._display_line_attribute_maps_ is None

    def reset_display_line_attribute_maps(self) -> None:
        self._display_line_attribute_maps_ = None

    @property
    def display_line_attribute_sets(self) -> typing.Optional[nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList]:
        return self._display_line_attribute_sets_

    @display_line_attribute_sets.setter
    def display_line_attribute_sets(self, display_line_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList]) -> None:
        self._display_line_attribute_sets_ = display_line_attribute_sets_

    def is_display_line_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_LINE_SETS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_LINE_SETS

    def is_display_line_attribute_sets_set(self) -> bool:
        return not self._display_line_attribute_sets_ is None

    def reset_display_line_attribute_sets(self) -> None:
        self._display_line_attribute_sets_ = None

    @property
    def display_point_attribute_maps(self) -> typing.Optional[nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList]:
        return self._display_point_attribute_maps_

    @display_point_attribute_maps.setter
    def display_point_attribute_maps(self, display_point_attribute_maps_: typing.Optional[nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList]) -> None:
        self._display_point_attribute_maps_ = display_point_attribute_maps_

    def is_display_point_attribute_maps_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_POINT_MAPS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_POINT_MAPS

    def is_display_point_attribute_maps_set(self) -> bool:
        return not self._display_point_attribute_maps_ is None

    def reset_display_point_attribute_maps(self) -> None:
        self._display_point_attribute_maps_ = None

    @property
    def display_point_attribute_sets(self) -> typing.Optional[nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList]:
        return self._display_point_attribute_sets_

    @display_point_attribute_sets.setter
    def display_point_attribute_sets(self, display_point_attribute_sets_: typing.Optional[nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList]) -> None:
        self._display_point_attribute_sets_ = display_point_attribute_sets_

    def is_display_point_attribute_sets_used(self) -> bool:
        return (self._content_ & nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_POINT_SETS) == nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.Values.DISPLAY_POINT_SETS

    def is_display_point_attribute_sets_set(self) -> bool:
        return not self._display_point_attribute_sets_ is None

    def reset_display_point_attribute_sets(self) -> None:
        self._display_point_attribute_sets_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.ATTRIBUTE

    def init_packing_context(self, zserio_context: DisplayAttributeLayer.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_base_elevation_used():
            zserio_context.base_elevation.init(zserio.array.VarInt32ArrayTraits(), self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            self._display_area_attribute_maps_.init_packing_context(zserio_context.display_area_attribute_maps)
        if self.is_display_area_attribute_sets_used():
            self._display_area_attribute_sets_.init_packing_context(zserio_context.display_area_attribute_sets)
        if self.is_display_line_attribute_maps_used():
            self._display_line_attribute_maps_.init_packing_context(zserio_context.display_line_attribute_maps)
        if self.is_display_line_attribute_sets_used():
            self._display_line_attribute_sets_.init_packing_context(zserio_context.display_line_attribute_sets)
        if self.is_display_point_attribute_maps_used():
            self._display_point_attribute_maps_.init_packing_context(zserio_context.display_point_attribute_maps)
        if self.is_display_point_attribute_sets_used():
            self._display_point_attribute_sets_.init_packing_context(zserio_context.display_point_attribute_sets)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        end_bitposition += 1
        if self.is_base_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            end_bitposition += self._display_area_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_display_area_attribute_sets_used():
            end_bitposition += self._display_area_attribute_sets_.bitsizeof(end_bitposition)
        if self.is_display_line_attribute_maps_used():
            end_bitposition += self._display_line_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_display_line_attribute_sets_used():
            end_bitposition += self._display_line_attribute_sets_.bitsizeof(end_bitposition)
        if self.is_display_point_attribute_maps_used():
            end_bitposition += self._display_point_attribute_maps_.bitsizeof(end_bitposition)
        if self.is_display_point_attribute_sets_used():
            end_bitposition += self._display_point_attribute_sets_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayAttributeLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        end_bitposition += 1
        if self.is_base_elevation_used():
            end_bitposition += zserio_context.base_elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            end_bitposition += self._display_area_attribute_maps_.bitsizeof_packed(zserio_context.display_area_attribute_maps, end_bitposition)
        if self.is_display_area_attribute_sets_used():
            end_bitposition += self._display_area_attribute_sets_.bitsizeof_packed(zserio_context.display_area_attribute_sets, end_bitposition)
        if self.is_display_line_attribute_maps_used():
            end_bitposition += self._display_line_attribute_maps_.bitsizeof_packed(zserio_context.display_line_attribute_maps, end_bitposition)
        if self.is_display_line_attribute_sets_used():
            end_bitposition += self._display_line_attribute_sets_.bitsizeof_packed(zserio_context.display_line_attribute_sets, end_bitposition)
        if self.is_display_point_attribute_maps_used():
            end_bitposition += self._display_point_attribute_maps_.bitsizeof_packed(zserio_context.display_point_attribute_maps, end_bitposition)
        if self.is_display_point_attribute_sets_used():
            end_bitposition += self._display_point_attribute_sets_.bitsizeof_packed(zserio_context.display_point_attribute_sets, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        if self.is_base_elevation_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            end_bitposition = self._display_area_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_display_area_attribute_sets_used():
            end_bitposition = self._display_area_attribute_sets_.initialize_offsets(end_bitposition)
        if self.is_display_line_attribute_maps_used():
            end_bitposition = self._display_line_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_display_line_attribute_sets_used():
            end_bitposition = self._display_line_attribute_sets_.initialize_offsets(end_bitposition)
        if self.is_display_point_attribute_maps_used():
            end_bitposition = self._display_point_attribute_maps_.initialize_offsets(end_bitposition)
        if self.is_display_point_attribute_sets_used():
            end_bitposition = self._display_point_attribute_sets_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayAttributeLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        end_bitposition += 1
        if self.is_base_elevation_used():
            end_bitposition += zserio_context.base_elevation.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._base_elevation_)
        if self.is_display_area_attribute_maps_used():
            end_bitposition = self._display_area_attribute_maps_.initialize_offsets_packed(zserio_context.display_area_attribute_maps, end_bitposition)
        if self.is_display_area_attribute_sets_used():
            end_bitposition = self._display_area_attribute_sets_.initialize_offsets_packed(zserio_context.display_area_attribute_sets, end_bitposition)
        if self.is_display_line_attribute_maps_used():
            end_bitposition = self._display_line_attribute_maps_.initialize_offsets_packed(zserio_context.display_line_attribute_maps, end_bitposition)
        if self.is_display_line_attribute_sets_used():
            end_bitposition = self._display_line_attribute_sets_.initialize_offsets_packed(zserio_context.display_line_attribute_sets, end_bitposition)
        if self.is_display_point_attribute_maps_used():
            end_bitposition = self._display_point_attribute_maps_.initialize_offsets_packed(zserio_context.display_point_attribute_maps, end_bitposition)
        if self.is_display_point_attribute_sets_used():
            end_bitposition = self._display_point_attribute_sets_.initialize_offsets_packed(zserio_context.display_point_attribute_sets, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.from_reader(zserio_reader)
        if zserio_reader.read_bool():
            self._base_elevation_ = zserio_reader.read_varint32()
        else:
            self._base_elevation_ = None
        if self.is_display_area_attribute_maps_used():
            self._display_area_attribute_maps_ = nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._display_area_attribute_maps_ = None
        if self.is_display_area_attribute_sets_used():
            self._display_area_attribute_sets_ = nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._display_area_attribute_sets_ = None
        if self.is_display_line_attribute_maps_used():
            self._display_line_attribute_maps_ = nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._display_line_attribute_maps_ = None
        if self.is_display_line_attribute_sets_used():
            self._display_line_attribute_sets_ = nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._display_line_attribute_sets_ = None
        if self.is_display_point_attribute_maps_used():
            self._display_point_attribute_maps_ = nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList.from_reader(zserio_reader, 0)
        else:
            self._display_point_attribute_maps_ = None
        if self.is_display_point_attribute_sets_used():
            self._display_point_attribute_sets_ = nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList.from_reader(zserio_reader, 0)
        else:
            self._display_point_attribute_sets_ = None

    def read_packed(self, zserio_context: DisplayAttributeLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.details.metadata.display_attribute_layer_content.DisplayAttributeLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if zserio_reader.read_bool():
            self._base_elevation_ = zserio_context.base_elevation.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        else:
            self._base_elevation_ = None

        if self.is_display_area_attribute_maps_used():
            self._display_area_attribute_maps_ = nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList.from_reader_packed(zserio_context.display_area_attribute_maps, zserio_reader, 0)
        else:
            self._display_area_attribute_maps_ = None

        if self.is_display_area_attribute_sets_used():
            self._display_area_attribute_sets_ = nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList.from_reader_packed(zserio_context.display_area_attribute_sets, zserio_reader, 0)
        else:
            self._display_area_attribute_sets_ = None

        if self.is_display_line_attribute_maps_used():
            self._display_line_attribute_maps_ = nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList.from_reader_packed(zserio_context.display_line_attribute_maps, zserio_reader, 0)
        else:
            self._display_line_attribute_maps_ = None

        if self.is_display_line_attribute_sets_used():
            self._display_line_attribute_sets_ = nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList.from_reader_packed(zserio_context.display_line_attribute_sets, zserio_reader, 0)
        else:
            self._display_line_attribute_sets_ = None

        if self.is_display_point_attribute_maps_used():
            self._display_point_attribute_maps_ = nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList.from_reader_packed(zserio_context.display_point_attribute_maps, zserio_reader, 0)
        else:
            self._display_point_attribute_maps_ = None

        if self.is_display_point_attribute_sets_used():
            self._display_point_attribute_sets_ = nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList.from_reader_packed(zserio_context.display_point_attribute_sets, zserio_reader, 0)
        else:
            self._display_point_attribute_sets_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)

        if self.is_base_elevation_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varint32(self._base_elevation_)
        else:
            zserio_writer.write_bool(False)

        if self.is_display_area_attribute_maps_used():
            # check parameters
            if self._display_area_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeMaps: "
                                                    f"{self._display_area_attribute_maps_.coord_shift} != {0}!")
            self._display_area_attribute_maps_.write(zserio_writer)

        if self.is_display_area_attribute_sets_used():
            # check parameters
            if self._display_area_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeSets: "
                                                    f"{self._display_area_attribute_sets_.coord_shift} != {0}!")
            self._display_area_attribute_sets_.write(zserio_writer)

        if self.is_display_line_attribute_maps_used():
            # check parameters
            if self._display_line_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeMaps: "
                                                    f"{self._display_line_attribute_maps_.coord_shift} != {0}!")
            self._display_line_attribute_maps_.write(zserio_writer)

        if self.is_display_line_attribute_sets_used():
            # check parameters
            if self._display_line_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeSets: "
                                                    f"{self._display_line_attribute_sets_.coord_shift} != {0}!")
            self._display_line_attribute_sets_.write(zserio_writer)

        if self.is_display_point_attribute_maps_used():
            # check parameters
            if self._display_point_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeMaps: "
                                                    f"{self._display_point_attribute_maps_.coord_shift} != {0}!")
            self._display_point_attribute_maps_.write(zserio_writer)

        if self.is_display_point_attribute_sets_used():
            # check parameters
            if self._display_point_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeSets: "
                                                    f"{self._display_point_attribute_sets_.coord_shift} != {0}!")
            self._display_point_attribute_sets_.write(zserio_writer)

    def write_packed(self, zserio_context: DisplayAttributeLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_base_elevation_used():
            zserio_writer.write_bool(True)
            zserio_context.base_elevation.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._base_elevation_)
        else:
            zserio_writer.write_bool(False)

        if self.is_display_area_attribute_maps_used():
            # check parameters
            if self._display_area_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeMaps: "
                                                    f"{self._display_area_attribute_maps_.coord_shift} != {0}!")
            self._display_area_attribute_maps_.write_packed(zserio_context.display_area_attribute_maps, zserio_writer)

        if self.is_display_area_attribute_sets_used():
            # check parameters
            if self._display_area_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayAreaAttributeSets: "
                                                    f"{self._display_area_attribute_sets_.coord_shift} != {0}!")
            self._display_area_attribute_sets_.write_packed(zserio_context.display_area_attribute_sets, zserio_writer)

        if self.is_display_line_attribute_maps_used():
            # check parameters
            if self._display_line_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeMaps: "
                                                    f"{self._display_line_attribute_maps_.coord_shift} != {0}!")
            self._display_line_attribute_maps_.write_packed(zserio_context.display_line_attribute_maps, zserio_writer)

        if self.is_display_line_attribute_sets_used():
            # check parameters
            if self._display_line_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayLineAttributeSets: "
                                                    f"{self._display_line_attribute_sets_.coord_shift} != {0}!")
            self._display_line_attribute_sets_.write_packed(zserio_context.display_line_attribute_sets, zserio_writer)

        if self.is_display_point_attribute_maps_used():
            # check parameters
            if self._display_point_attribute_maps_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeMaps: "
                                                    f"{self._display_point_attribute_maps_.coord_shift} != {0}!")
            self._display_point_attribute_maps_.write_packed(zserio_context.display_point_attribute_maps, zserio_writer)

        if self.is_display_point_attribute_sets_used():
            # check parameters
            if self._display_point_attribute_sets_.coord_shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter coordShift for field DisplayAttributeLayer.displayPointAttributeSets: "
                                                    f"{self._display_point_attribute_sets_.coord_shift} != {0}!")
            self._display_point_attribute_sets_.write_packed(zserio_context.display_point_attribute_sets, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._base_elevation_ = zserio.array.DeltaContext()
            self._display_area_attribute_maps_ = nds.display.details.instantiations.display_area_attribute_map_list.DisplayAreaAttributeMapList.ZserioPackingContext()
            self._display_area_attribute_sets_ = nds.display.details.instantiations.display_area_attribute_set_list.DisplayAreaAttributeSetList.ZserioPackingContext()
            self._display_line_attribute_maps_ = nds.display.details.instantiations.display_line_attribute_map_list.DisplayLineAttributeMapList.ZserioPackingContext()
            self._display_line_attribute_sets_ = nds.display.details.instantiations.display_line_attribute_set_list.DisplayLineAttributeSetList.ZserioPackingContext()
            self._display_point_attribute_maps_ = nds.display.details.instantiations.display_point_attribute_map_list.DisplayPointAttributeMapList.ZserioPackingContext()
            self._display_point_attribute_sets_ = nds.display.details.instantiations.display_point_attribute_set_list.DisplayPointAttributeSetList.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def base_elevation(self):
            return self._base_elevation_

        @property
        def display_area_attribute_maps(self):
            return self._display_area_attribute_maps_

        @property
        def display_area_attribute_sets(self):
            return self._display_area_attribute_sets_

        @property
        def display_line_attribute_maps(self):
            return self._display_line_attribute_maps_

        @property
        def display_line_attribute_sets(self):
            return self._display_line_attribute_sets_

        @property
        def display_point_attribute_maps(self):
            return self._display_point_attribute_maps_

        @property
        def display_point_attribute_sets(self):
            return self._display_point_attribute_sets_
