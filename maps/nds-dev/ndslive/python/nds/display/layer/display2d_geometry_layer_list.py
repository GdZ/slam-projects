# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.geometry_layer_type
import nds.display.instantiations.area_display_geometry_layer
import nds.display.instantiations.line_display_geometry_layer
import nds.display.instantiations.point_display_geometry_layer
import nds.display.metadata.display2d_content

class Display2DGeometryLayerList:
    def __init__(
            self,
            content_: nds.display.metadata.display2d_content.Display2DContent,
            area_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer] = None,
            line_display_geometry_layer_: typing.Optional[nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer] = None,
            point_display_geometry_layer_: typing.Optional[nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer] = None,
            simple_area_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer] = None,
            simple_area_set_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer] = None) -> None:
        self._content_ = content_
        self._area_display_geometry_layer_ = area_display_geometry_layer_
        self._line_display_geometry_layer_ = line_display_geometry_layer_
        self._point_display_geometry_layer_ = point_display_geometry_layer_
        self._simple_area_display_geometry_layer_ = simple_area_display_geometry_layer_
        self._simple_area_set_display_geometry_layer_ = simple_area_set_display_geometry_layer_

    @classmethod
    def from_reader(
            cls: typing.Type['Display2DGeometryLayerList'],
            zserio_reader: zserio.BitStreamReader,
            content_: nds.display.metadata.display2d_content.Display2DContent) -> 'Display2DGeometryLayerList':
        self = object.__new__(cls)
        self._content_ = content_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display2DGeometryLayerList'],
            zserio_context: Display2DGeometryLayerList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            content_: nds.display.metadata.display2d_content.Display2DContent) -> 'Display2DGeometryLayerList':
        self = object.__new__(cls)
        self._content_ = content_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display2DGeometryLayerList):
            return (self._content_ == other._content_ and
                    (not other.is_area_display_geometry_layer_used() if not self.is_area_display_geometry_layer_used() else (self._area_display_geometry_layer_ == other._area_display_geometry_layer_)) and
                    (not other.is_line_display_geometry_layer_used() if not self.is_line_display_geometry_layer_used() else (self._line_display_geometry_layer_ == other._line_display_geometry_layer_)) and
                    (not other.is_point_display_geometry_layer_used() if not self.is_point_display_geometry_layer_used() else (self._point_display_geometry_layer_ == other._point_display_geometry_layer_)) and
                    (not other.is_simple_area_display_geometry_layer_used() if not self.is_simple_area_display_geometry_layer_used() else (self._simple_area_display_geometry_layer_ == other._simple_area_display_geometry_layer_)) and
                    (not other.is_simple_area_set_display_geometry_layer_used() if not self.is_simple_area_set_display_geometry_layer_used() else (self._simple_area_set_display_geometry_layer_ == other._simple_area_set_display_geometry_layer_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_area_display_geometry_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._area_display_geometry_layer_)
        if self.is_line_display_geometry_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._line_display_geometry_layer_)
        if self.is_point_display_geometry_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._point_display_geometry_layer_)
        if self.is_simple_area_display_geometry_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._simple_area_display_geometry_layer_)
        if self.is_simple_area_set_display_geometry_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._simple_area_set_display_geometry_layer_)

        return result

    @property
    def content(self) -> nds.display.metadata.display2d_content.Display2DContent:
        return self._content_

    @property
    def area_display_geometry_layer(self) -> typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]:
        return self._area_display_geometry_layer_

    @area_display_geometry_layer.setter
    def area_display_geometry_layer(self, area_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]) -> None:
        self._area_display_geometry_layer_ = area_display_geometry_layer_

    def is_area_display_geometry_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.AREAS) == nds.display.metadata.display2d_content.Display2DContent.Values.AREAS

    def is_area_display_geometry_layer_set(self) -> bool:
        return not self._area_display_geometry_layer_ is None

    def reset_area_display_geometry_layer(self) -> None:
        self._area_display_geometry_layer_ = None

    @property
    def line_display_geometry_layer(self) -> typing.Optional[nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer]:
        return self._line_display_geometry_layer_

    @line_display_geometry_layer.setter
    def line_display_geometry_layer(self, line_display_geometry_layer_: typing.Optional[nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer]) -> None:
        self._line_display_geometry_layer_ = line_display_geometry_layer_

    def is_line_display_geometry_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.LINES) == nds.display.metadata.display2d_content.Display2DContent.Values.LINES

    def is_line_display_geometry_layer_set(self) -> bool:
        return not self._line_display_geometry_layer_ is None

    def reset_line_display_geometry_layer(self) -> None:
        self._line_display_geometry_layer_ = None

    @property
    def point_display_geometry_layer(self) -> typing.Optional[nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer]:
        return self._point_display_geometry_layer_

    @point_display_geometry_layer.setter
    def point_display_geometry_layer(self, point_display_geometry_layer_: typing.Optional[nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer]) -> None:
        self._point_display_geometry_layer_ = point_display_geometry_layer_

    def is_point_display_geometry_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.POINTS) == nds.display.metadata.display2d_content.Display2DContent.Values.POINTS

    def is_point_display_geometry_layer_set(self) -> bool:
        return not self._point_display_geometry_layer_ is None

    def reset_point_display_geometry_layer(self) -> None:
        self._point_display_geometry_layer_ = None

    @property
    def simple_area_display_geometry_layer(self) -> typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]:
        return self._simple_area_display_geometry_layer_

    @simple_area_display_geometry_layer.setter
    def simple_area_display_geometry_layer(self, simple_area_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]) -> None:
        self._simple_area_display_geometry_layer_ = simple_area_display_geometry_layer_

    def is_simple_area_display_geometry_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREAS) == nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREAS

    def is_simple_area_display_geometry_layer_set(self) -> bool:
        return not self._simple_area_display_geometry_layer_ is None

    def reset_simple_area_display_geometry_layer(self) -> None:
        self._simple_area_display_geometry_layer_ = None

    @property
    def simple_area_set_display_geometry_layer(self) -> typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]:
        return self._simple_area_set_display_geometry_layer_

    @simple_area_set_display_geometry_layer.setter
    def simple_area_set_display_geometry_layer(self, simple_area_set_display_geometry_layer_: typing.Optional[nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer]) -> None:
        self._simple_area_set_display_geometry_layer_ = simple_area_set_display_geometry_layer_

    def is_simple_area_set_display_geometry_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREA_SETS) == nds.display.metadata.display2d_content.Display2DContent.Values.SIMPLE_AREA_SETS

    def is_simple_area_set_display_geometry_layer_set(self) -> bool:
        return not self._simple_area_set_display_geometry_layer_ is None

    def reset_simple_area_set_display_geometry_layer(self) -> None:
        self._simple_area_set_display_geometry_layer_ = None

    def init_packing_context(self, zserio_context: Display2DGeometryLayerList.ZserioPackingContext) -> None:
        if self.is_area_display_geometry_layer_used():
            self._area_display_geometry_layer_.init_packing_context(zserio_context.area_display_geometry_layer)
        if self.is_line_display_geometry_layer_used():
            self._line_display_geometry_layer_.init_packing_context(zserio_context.line_display_geometry_layer)
        if self.is_point_display_geometry_layer_used():
            self._point_display_geometry_layer_.init_packing_context(zserio_context.point_display_geometry_layer)
        if self.is_simple_area_display_geometry_layer_used():
            self._simple_area_display_geometry_layer_.init_packing_context(zserio_context.simple_area_display_geometry_layer)
        if self.is_simple_area_set_display_geometry_layer_used():
            self._simple_area_set_display_geometry_layer_.init_packing_context(zserio_context.simple_area_set_display_geometry_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_area_display_geometry_layer_used():
            end_bitposition += self._area_display_geometry_layer_.bitsizeof(end_bitposition)
        if self.is_line_display_geometry_layer_used():
            end_bitposition += self._line_display_geometry_layer_.bitsizeof(end_bitposition)
        if self.is_point_display_geometry_layer_used():
            end_bitposition += self._point_display_geometry_layer_.bitsizeof(end_bitposition)
        if self.is_simple_area_display_geometry_layer_used():
            end_bitposition += self._simple_area_display_geometry_layer_.bitsizeof(end_bitposition)
        if self.is_simple_area_set_display_geometry_layer_used():
            end_bitposition += self._simple_area_set_display_geometry_layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display2DGeometryLayerList.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_area_display_geometry_layer_used():
            end_bitposition += self._area_display_geometry_layer_.bitsizeof_packed(zserio_context.area_display_geometry_layer, end_bitposition)
        if self.is_line_display_geometry_layer_used():
            end_bitposition += self._line_display_geometry_layer_.bitsizeof_packed(zserio_context.line_display_geometry_layer, end_bitposition)
        if self.is_point_display_geometry_layer_used():
            end_bitposition += self._point_display_geometry_layer_.bitsizeof_packed(zserio_context.point_display_geometry_layer, end_bitposition)
        if self.is_simple_area_display_geometry_layer_used():
            end_bitposition += self._simple_area_display_geometry_layer_.bitsizeof_packed(zserio_context.simple_area_display_geometry_layer, end_bitposition)
        if self.is_simple_area_set_display_geometry_layer_used():
            end_bitposition += self._simple_area_set_display_geometry_layer_.bitsizeof_packed(zserio_context.simple_area_set_display_geometry_layer, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_area_display_geometry_layer_used():
            end_bitposition = self._area_display_geometry_layer_.initialize_offsets(end_bitposition)
        if self.is_line_display_geometry_layer_used():
            end_bitposition = self._line_display_geometry_layer_.initialize_offsets(end_bitposition)
        if self.is_point_display_geometry_layer_used():
            end_bitposition = self._point_display_geometry_layer_.initialize_offsets(end_bitposition)
        if self.is_simple_area_display_geometry_layer_used():
            end_bitposition = self._simple_area_display_geometry_layer_.initialize_offsets(end_bitposition)
        if self.is_simple_area_set_display_geometry_layer_used():
            end_bitposition = self._simple_area_set_display_geometry_layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display2DGeometryLayerList.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        if self.is_area_display_geometry_layer_used():
            end_bitposition = self._area_display_geometry_layer_.initialize_offsets_packed(zserio_context.area_display_geometry_layer, end_bitposition)
        if self.is_line_display_geometry_layer_used():
            end_bitposition = self._line_display_geometry_layer_.initialize_offsets_packed(zserio_context.line_display_geometry_layer, end_bitposition)
        if self.is_point_display_geometry_layer_used():
            end_bitposition = self._point_display_geometry_layer_.initialize_offsets_packed(zserio_context.point_display_geometry_layer, end_bitposition)
        if self.is_simple_area_display_geometry_layer_used():
            end_bitposition = self._simple_area_display_geometry_layer_.initialize_offsets_packed(zserio_context.simple_area_display_geometry_layer, end_bitposition)
        if self.is_simple_area_set_display_geometry_layer_used():
            end_bitposition = self._simple_area_set_display_geometry_layer_.initialize_offsets_packed(zserio_context.simple_area_set_display_geometry_layer, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_area_display_geometry_layer_used():
            self._area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D, True, True)
        else:
            self._area_display_geometry_layer_ = None
        if self.is_line_display_geometry_layer_used():
            self._line_display_geometry_layer_ = nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D, True, True)
        else:
            self._line_display_geometry_layer_ = None
        if self.is_point_display_geometry_layer_used():
            self._point_display_geometry_layer_ = nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D, True, True)
        else:
            self._point_display_geometry_layer_ = None
        if self.is_simple_area_display_geometry_layer_used():
            self._simple_area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D, True, True)
        else:
            self._simple_area_display_geometry_layer_ = None
        if self.is_simple_area_set_display_geometry_layer_used():
            self._simple_area_set_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D, True, True)
        else:
            self._simple_area_set_display_geometry_layer_ = None

    def read_packed(self, zserio_context: Display2DGeometryLayerList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_area_display_geometry_layer_used():
            self._area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader_packed(zserio_context.area_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D, True, True)
        else:
            self._area_display_geometry_layer_ = None

        if self.is_line_display_geometry_layer_used():
            self._line_display_geometry_layer_ = nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer.from_reader_packed(zserio_context.line_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D, True, True)
        else:
            self._line_display_geometry_layer_ = None

        if self.is_point_display_geometry_layer_used():
            self._point_display_geometry_layer_ = nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer.from_reader_packed(zserio_context.point_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D, True, True)
        else:
            self._point_display_geometry_layer_ = None

        if self.is_simple_area_display_geometry_layer_used():
            self._simple_area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader_packed(zserio_context.simple_area_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D, True, True)
        else:
            self._simple_area_display_geometry_layer_ = None

        if self.is_simple_area_set_display_geometry_layer_used():
            self._simple_area_set_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.from_reader_packed(zserio_context.simple_area_set_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D, True, True)
        else:
            self._simple_area_set_display_geometry_layer_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_area_display_geometry_layer_used():
            # check parameters
            if self._area_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D}!")
            if self._area_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.has_ids} != {True}!")
            if self._area_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.has_types} != {True}!")
            self._area_display_geometry_layer_.write(zserio_writer)

        if self.is_line_display_geometry_layer_used():
            # check parameters
            if self._line_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D}!")
            if self._line_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.has_ids} != {True}!")
            if self._line_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.has_types} != {True}!")
            self._line_display_geometry_layer_.write(zserio_writer)

        if self.is_point_display_geometry_layer_used():
            # check parameters
            if self._point_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D}!")
            if self._point_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.has_ids} != {True}!")
            if self._point_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.has_types} != {True}!")
            self._point_display_geometry_layer_.write(zserio_writer)

        if self.is_simple_area_display_geometry_layer_used():
            # check parameters
            if self._simple_area_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D}!")
            if self._simple_area_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.has_ids} != {True}!")
            if self._simple_area_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.has_types} != {True}!")
            self._simple_area_display_geometry_layer_.write(zserio_writer)

        if self.is_simple_area_set_display_geometry_layer_used():
            # check parameters
            if self._simple_area_set_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D}!")
            if self._simple_area_set_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.has_ids} != {True}!")
            if self._simple_area_set_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.has_types} != {True}!")
            self._simple_area_set_display_geometry_layer_.write(zserio_writer)

    def write_packed(self, zserio_context: Display2DGeometryLayerList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_area_display_geometry_layer_used():
            # check parameters
            if self._area_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.POLYGON_2D}!")
            if self._area_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.has_ids} != {True}!")
            if self._area_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.areaDisplayGeometryLayer: "
                                                    f"{self._area_display_geometry_layer_.has_types} != {True}!")
            self._area_display_geometry_layer_.write_packed(zserio_context.area_display_geometry_layer, zserio_writer)

        if self.is_line_display_geometry_layer_used():
            # check parameters
            if self._line_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.LINE_2D}!")
            if self._line_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.has_ids} != {True}!")
            if self._line_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.lineDisplayGeometryLayer: "
                                                    f"{self._line_display_geometry_layer_.has_types} != {True}!")
            self._line_display_geometry_layer_.write_packed(zserio_context.line_display_geometry_layer, zserio_writer)

        if self.is_point_display_geometry_layer_used():
            # check parameters
            if self._point_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.POSITION_2D}!")
            if self._point_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.has_ids} != {True}!")
            if self._point_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.pointDisplayGeometryLayer: "
                                                    f"{self._point_display_geometry_layer_.has_types} != {True}!")
            self._point_display_geometry_layer_.write_packed(zserio_context.point_display_geometry_layer, zserio_writer)

        if self.is_simple_area_display_geometry_layer_used():
            # check parameters
            if self._simple_area_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_2D}!")
            if self._simple_area_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.has_ids} != {True}!")
            if self._simple_area_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaDisplayGeometryLayer: "
                                                    f"{self._simple_area_display_geometry_layer_.has_types} != {True}!")
            self._simple_area_display_geometry_layer_.write_packed(zserio_context.simple_area_display_geometry_layer, zserio_writer)

        if self.is_simple_area_set_display_geometry_layer_used():
            # check parameters
            if self._simple_area_set_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D):
                raise zserio.PythonRuntimeException("Wrong parameter type for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.SIMPLE_POLYGON_SET_2D}!")
            if self._simple_area_set_display_geometry_layer_.has_ids != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.has_ids} != {True}!")
            if self._simple_area_set_display_geometry_layer_.has_types != (True):
                raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Display2DGeometryLayerList.simpleAreaSetDisplayGeometryLayer: "
                                                    f"{self._simple_area_set_display_geometry_layer_.has_types} != {True}!")
            self._simple_area_set_display_geometry_layer_.write_packed(zserio_context.simple_area_set_display_geometry_layer, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.ZserioPackingContext()
            self._line_display_geometry_layer_ = nds.display.instantiations.line_display_geometry_layer.LineDisplayGeometryLayer.ZserioPackingContext()
            self._point_display_geometry_layer_ = nds.display.instantiations.point_display_geometry_layer.PointDisplayGeometryLayer.ZserioPackingContext()
            self._simple_area_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.ZserioPackingContext()
            self._simple_area_set_display_geometry_layer_ = nds.display.instantiations.area_display_geometry_layer.AreaDisplayGeometryLayer.ZserioPackingContext()

        @property
        def area_display_geometry_layer(self):
            return self._area_display_geometry_layer_

        @property
        def line_display_geometry_layer(self):
            return self._line_display_geometry_layer_

        @property
        def point_display_geometry_layer(self):
            return self._point_display_geometry_layer_

        @property
        def simple_area_display_geometry_layer(self):
            return self._simple_area_display_geometry_layer_

        @property
        def simple_area_set_display_geometry_layer(self):
            return self._simple_area_set_display_geometry_layer_
