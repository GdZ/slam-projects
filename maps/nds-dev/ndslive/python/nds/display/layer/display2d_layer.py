# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.layer.display2d_geometry_layer_list
import nds.display.layer.display2d_layer_header
import nds.display.metadata.display2d_content
import nds.display.types.clipping_edge_list
import nds.system.types.layer_type

class Display2DLayer:
    def __init__(
            self,
            header_: typing.Union[nds.display.layer.display2d_layer_header.Display2DLayerHeader, None] = None,
            geometry_layers_: typing.Optional[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList] = None,
            scale_sublevel_layers_: typing.Optional[typing.List[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList]] = None,
            clipping_edge_list_: typing.Optional[nds.display.types.clipping_edge_list.ClippingEdgeList] = None) -> None:
        self._header_ = header_
        self._geometry_layers_ = geometry_layers_
        if scale_sublevel_layers_ is None:
            self._scale_sublevel_layers_ = None
        else:
            self._scale_sublevel_layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_sublevel_layers(self)), scale_sublevel_layers_)
        self._clipping_edge_list_ = clipping_edge_list_

    @classmethod
    def from_reader(
            cls: typing.Type['Display2DLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'Display2DLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display2DLayer'],
            zserio_context: Display2DLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Display2DLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display2DLayer):
            return ((self._header_ == other._header_) and
                    (not other.is_geometry_layers_used() if not self.is_geometry_layers_used() else (self._geometry_layers_ == other._geometry_layers_)) and
                    (not other.is_scale_sublevel_layers_used() if not self.is_scale_sublevel_layers_used() else (self._scale_sublevel_layers_ == other._scale_sublevel_layers_)) and
                    (not other.is_clipping_edge_list_used() if not self.is_clipping_edge_list_used() else (self._clipping_edge_list_ == other._clipping_edge_list_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        if self.is_geometry_layers_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._geometry_layers_)
        if self.is_scale_sublevel_layers_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._scale_sublevel_layers_)
        if self.is_clipping_edge_list_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._clipping_edge_list_)

        return result

    @property
    def header(self) -> typing.Union[nds.display.layer.display2d_layer_header.Display2DLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.display.layer.display2d_layer_header.Display2DLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def geometry_layers(self) -> typing.Optional[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList]:
        return self._geometry_layers_

    @geometry_layers.setter
    def geometry_layers(self, geometry_layers_: typing.Optional[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList]) -> None:
        self._geometry_layers_ = geometry_layers_

    def is_geometry_layers_used(self) -> bool:
        return not self._header_.has_scale_sublevels

    def is_geometry_layers_set(self) -> bool:
        return not self._geometry_layers_ is None

    def reset_geometry_layers(self) -> None:
        self._geometry_layers_ = None

    @property
    def scale_sublevel_layers(self) -> typing.Optional[typing.List[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList]]:
        return None if self._scale_sublevel_layers_ is None else self._scale_sublevel_layers_.raw_array

    @scale_sublevel_layers.setter
    def scale_sublevel_layers(self, scale_sublevel_layers_: typing.Optional[typing.List[nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList]]) -> None:
        if scale_sublevel_layers_ is None:
            self._scale_sublevel_layers_ = None
        else:
            self._scale_sublevel_layers_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_sublevel_layers(self)), scale_sublevel_layers_)

    def is_scale_sublevel_layers_used(self) -> bool:
        return self._header_.has_scale_sublevels

    def is_scale_sublevel_layers_set(self) -> bool:
        return not self._scale_sublevel_layers_ is None

    def reset_scale_sublevel_layers(self) -> None:
        self._scale_sublevel_layers_ = None

    @property
    def clipping_edge_list(self) -> typing.Optional[nds.display.types.clipping_edge_list.ClippingEdgeList]:
        return self._clipping_edge_list_

    @clipping_edge_list.setter
    def clipping_edge_list(self, clipping_edge_list_: typing.Optional[nds.display.types.clipping_edge_list.ClippingEdgeList]) -> None:
        self._clipping_edge_list_ = clipping_edge_list_

    def is_clipping_edge_list_used(self) -> bool:
        return self._header_.has_clipping_edge_list

    def is_clipping_edge_list_set(self) -> bool:
        return not self._clipping_edge_list_ is None

    def reset_clipping_edge_list(self) -> None:
        self._clipping_edge_list_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: Display2DLayer.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)
        if self.is_geometry_layers_used():
            self._geometry_layers_.init_packing_context(zserio_context.geometry_layers)
        if self.is_clipping_edge_list_used():
            self._clipping_edge_list_.init_packing_context(zserio_context.clipping_edge_list)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        if self.is_geometry_layers_used():
            end_bitposition += self._geometry_layers_.bitsizeof(end_bitposition)
        if self.is_scale_sublevel_layers_used():
            end_bitposition += self._scale_sublevel_layers_.bitsizeof(end_bitposition)
        if self.is_clipping_edge_list_used():
            end_bitposition += self._clipping_edge_list_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display2DLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        if self.is_geometry_layers_used():
            end_bitposition += self._geometry_layers_.bitsizeof_packed(zserio_context.geometry_layers, end_bitposition)
        if self.is_scale_sublevel_layers_used():
            end_bitposition += self._scale_sublevel_layers_.bitsizeof_packed(end_bitposition)
        if self.is_clipping_edge_list_used():
            end_bitposition += self._clipping_edge_list_.bitsizeof_packed(zserio_context.clipping_edge_list, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        if self.is_geometry_layers_used():
            end_bitposition = self._geometry_layers_.initialize_offsets(end_bitposition)
        if self.is_scale_sublevel_layers_used():
            end_bitposition = self._scale_sublevel_layers_.initialize_offsets(end_bitposition)
        if self.is_clipping_edge_list_used():
            end_bitposition = self._clipping_edge_list_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display2DLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        if self.is_geometry_layers_used():
            end_bitposition = self._geometry_layers_.initialize_offsets_packed(zserio_context.geometry_layers, end_bitposition)
        if self.is_scale_sublevel_layers_used():
            end_bitposition = self._scale_sublevel_layers_.initialize_offsets_packed(end_bitposition)
        if self.is_clipping_edge_list_used():
            end_bitposition = self._clipping_edge_list_.initialize_offsets_packed(zserio_context.clipping_edge_list, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.display2d_layer_header.Display2DLayerHeader.from_reader(zserio_reader)
        if self.is_geometry_layers_used():
            self._geometry_layers_ = nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.from_reader(zserio_reader, self._header_.content)
        else:
            self._geometry_layers_ = None
        if self.is_scale_sublevel_layers_used():
            self._scale_sublevel_layers_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_sublevel_layers(self)), zserio_reader, self._header_.num_sublevels)
        else:
            self._scale_sublevel_layers_ = None
        if self.is_clipping_edge_list_used():
            self._clipping_edge_list_ = nds.display.types.clipping_edge_list.ClippingEdgeList.from_reader(zserio_reader)
        else:
            self._clipping_edge_list_ = None

    def read_packed(self, zserio_context: Display2DLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.display2d_layer_header.Display2DLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        if self.is_geometry_layers_used():
            self._geometry_layers_ = nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.from_reader_packed(zserio_context.geometry_layers, zserio_reader, self._header_.content)
        else:
            self._geometry_layers_ = None

        if self.is_scale_sublevel_layers_used():
            self._scale_sublevel_layers_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_scale_sublevel_layers(self)), zserio_reader, self._header_.num_sublevels)
        else:
            self._scale_sublevel_layers_ = None

        if self.is_clipping_edge_list_used():
            self._clipping_edge_list_ = nds.display.types.clipping_edge_list.ClippingEdgeList.from_reader_packed(zserio_context.clipping_edge_list, zserio_reader)
        else:
            self._clipping_edge_list_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)

        if self.is_geometry_layers_used():
            # check parameters
            if self._geometry_layers_.content is not (self._header_.content):
                raise zserio.PythonRuntimeException("Wrong parameter content for field Display2DLayer.geometryLayers: "
                                                    f"{self._geometry_layers_.content} != {self._header_.content}!")
            self._geometry_layers_.write(zserio_writer)

        if self.is_scale_sublevel_layers_used():
            # check array length
            if len(self._scale_sublevel_layers_) != (self._header_.num_sublevels):
                raise zserio.PythonRuntimeException("Wrong array length for field Display2DLayer.scaleSublevelLayers: "
                                                    f"{len(self._scale_sublevel_layers_)} != {self._header_.num_sublevels}!")
            self._scale_sublevel_layers_.write(zserio_writer)

        if self.is_clipping_edge_list_used():
            self._clipping_edge_list_.write(zserio_writer)

    def write_packed(self, zserio_context: Display2DLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        if self.is_geometry_layers_used():
            # check parameters
            if self._geometry_layers_.content is not (self._header_.content):
                raise zserio.PythonRuntimeException("Wrong parameter content for field Display2DLayer.geometryLayers: "
                                                    f"{self._geometry_layers_.content} != {self._header_.content}!")
            self._geometry_layers_.write_packed(zserio_context.geometry_layers, zserio_writer)

        if self.is_scale_sublevel_layers_used():
            # check array length
            if len(self._scale_sublevel_layers_) != (self._header_.num_sublevels):
                raise zserio.PythonRuntimeException("Wrong array length for field Display2DLayer.scaleSublevelLayers: "
                                                    f"{len(self._scale_sublevel_layers_)} != {self._header_.num_sublevels}!")
            self._scale_sublevel_layers_.write_packed(zserio_writer)

        if self.is_clipping_edge_list_used():
            self._clipping_edge_list_.write_packed(zserio_context.clipping_edge_list, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.display.layer.display2d_layer_header.Display2DLayerHeader.ZserioPackingContext()
            self._geometry_layers_ = nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.ZserioPackingContext()
            self._clipping_edge_list_ = nds.display.types.clipping_edge_list.ClippingEdgeList.ZserioPackingContext()

        @property
        def header(self):
            return self._header_

        @property
        def geometry_layers(self):
            return self._geometry_layers_

        @property
        def clipping_edge_list(self):
            return self._clipping_edge_list_

    class _ZserioElementFactory_scale_sublevel_layers:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList:
            del zserio_index
            return nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.from_reader(zserio_reader, self._owner._header_.content)

        @staticmethod
        def create_packing_context() -> nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.ZserioPackingContext:
            return nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList:
            del zserio_index
            return nds.display.layer.display2d_geometry_layer_list.Display2DGeometryLayerList.from_reader_packed(zserio_context, zserio_reader, self._owner._header_.content)
