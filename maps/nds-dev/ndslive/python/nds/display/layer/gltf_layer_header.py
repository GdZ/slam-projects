# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.scale_denominator
import nds.display.types.gltf_version

class GltfLayerHeader:
    def __init__(
            self,
            gltf_version_: typing.Union[nds.display.types.gltf_version.GltfVersion, None] = None,
            min_scale_denominator_: nds.core.types.scale_denominator.ScaleDenominator = nds.core.types.scale_denominator.ScaleDenominator(),
            max_scale_denominator_: nds.core.types.scale_denominator.ScaleDenominator = nds.core.types.scale_denominator.ScaleDenominator()) -> None:
        self._gltf_version_ = gltf_version_
        self._min_scale_denominator_ = min_scale_denominator_
        self._max_scale_denominator_ = max_scale_denominator_

    @classmethod
    def from_reader(
            cls: typing.Type['GltfLayerHeader'],
            zserio_reader: zserio.BitStreamReader) -> 'GltfLayerHeader':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GltfLayerHeader'],
            zserio_context: GltfLayerHeader.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GltfLayerHeader':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GltfLayerHeader):
            return ((self._gltf_version_ == other._gltf_version_) and
                    (self._min_scale_denominator_ == other._min_scale_denominator_) and
                    (self._max_scale_denominator_ == other._max_scale_denominator_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._gltf_version_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._min_scale_denominator_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._max_scale_denominator_)

        return result

    @property
    def gltf_version(self) -> typing.Union[nds.display.types.gltf_version.GltfVersion, None]:
        return self._gltf_version_

    @gltf_version.setter
    def gltf_version(self, gltf_version_: typing.Union[nds.display.types.gltf_version.GltfVersion, None]) -> None:
        self._gltf_version_ = gltf_version_

    @property
    def min_scale_denominator(self) -> nds.core.types.scale_denominator.ScaleDenominator:
        return self._min_scale_denominator_

    @min_scale_denominator.setter
    def min_scale_denominator(self, min_scale_denominator_: nds.core.types.scale_denominator.ScaleDenominator) -> None:
        self._min_scale_denominator_ = min_scale_denominator_

    @property
    def max_scale_denominator(self) -> nds.core.types.scale_denominator.ScaleDenominator:
        return self._max_scale_denominator_

    @max_scale_denominator.setter
    def max_scale_denominator(self, max_scale_denominator_: nds.core.types.scale_denominator.ScaleDenominator) -> None:
        self._max_scale_denominator_ = max_scale_denominator_

    def init_packing_context(self, zserio_context: GltfLayerHeader.ZserioPackingContext) -> None:
        self._gltf_version_.init_packing_context(zserio_context.gltf_version)
        zserio_context.min_scale_denominator.init(zserio.array.BitFieldArrayTraits(32), self._min_scale_denominator_)
        zserio_context.max_scale_denominator.init(zserio.array.BitFieldArrayTraits(32), self._max_scale_denominator_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._gltf_version_.bitsizeof(end_bitposition)
        end_bitposition += 32
        end_bitposition += 32

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GltfLayerHeader.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._gltf_version_.bitsizeof_packed(zserio_context.gltf_version, end_bitposition)
        end_bitposition += zserio_context.min_scale_denominator.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._min_scale_denominator_)
        end_bitposition += zserio_context.max_scale_denominator.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._max_scale_denominator_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._gltf_version_.initialize_offsets(end_bitposition)
        end_bitposition += 32
        end_bitposition += 32

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GltfLayerHeader.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._gltf_version_.initialize_offsets_packed(zserio_context.gltf_version, end_bitposition)
        end_bitposition += zserio_context.min_scale_denominator.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._min_scale_denominator_)
        end_bitposition += zserio_context.max_scale_denominator.bitsizeof(zserio.array.BitFieldArrayTraits(32), self._max_scale_denominator_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._gltf_version_ = nds.display.types.gltf_version.GltfVersion.from_reader(zserio_reader)
        self._min_scale_denominator_ = zserio_reader.read_bits(32)
        self._max_scale_denominator_ = zserio_reader.read_bits(32)

    def read_packed(self, zserio_context: GltfLayerHeader.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._gltf_version_ = nds.display.types.gltf_version.GltfVersion.from_reader_packed(zserio_context.gltf_version, zserio_reader)

        self._min_scale_denominator_ = zserio_context.min_scale_denominator.read(zserio.array.BitFieldArrayTraits(32), zserio_reader)

        self._max_scale_denominator_ = zserio_context.max_scale_denominator.read(zserio.array.BitFieldArrayTraits(32), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._gltf_version_.write(zserio_writer)
        zserio_writer.write_bits(self._min_scale_denominator_, 32)
        zserio_writer.write_bits(self._max_scale_denominator_, 32)

    def write_packed(self, zserio_context: GltfLayerHeader.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._gltf_version_.write_packed(zserio_context.gltf_version, zserio_writer)

        zserio_context.min_scale_denominator.write(zserio.array.BitFieldArrayTraits(32), zserio_writer, self._min_scale_denominator_)

        zserio_context.max_scale_denominator.write(zserio.array.BitFieldArrayTraits(32), zserio_writer, self._max_scale_denominator_)

    class ZserioPackingContext:
        def __init__(self):
            self._gltf_version_ = zserio.array.DeltaContext()
            self._min_scale_denominator_ = zserio.array.DeltaContext()
            self._max_scale_denominator_ = zserio.array.DeltaContext()

        @property
        def gltf_version(self):
            return self._gltf_version_

        @property
        def min_scale_denominator(self):
            return self._min_scale_denominator_

        @property
        def max_scale_denominator(self):
            return self._max_scale_denominator_
