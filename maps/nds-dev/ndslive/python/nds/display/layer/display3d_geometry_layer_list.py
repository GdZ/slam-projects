# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.layer.mesh3d_render_layer_data
import nds.display.metadata.display3d_content

class Display3DGeometryLayerList:
    def __init__(
            self,
            content_: nds.display.metadata.display3d_content.Display3DContent,
            mesh3d_render_layer_: typing.Optional[nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData] = None) -> None:
        self._content_ = content_
        self._mesh3d_render_layer_ = mesh3d_render_layer_

    @classmethod
    def from_reader(
            cls: typing.Type['Display3DGeometryLayerList'],
            zserio_reader: zserio.BitStreamReader,
            content_: nds.display.metadata.display3d_content.Display3DContent) -> 'Display3DGeometryLayerList':
        self = object.__new__(cls)
        self._content_ = content_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display3DGeometryLayerList'],
            zserio_context: Display3DGeometryLayerList.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            content_: nds.display.metadata.display3d_content.Display3DContent) -> 'Display3DGeometryLayerList':
        self = object.__new__(cls)
        self._content_ = content_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display3DGeometryLayerList):
            return (self._content_ == other._content_ and
                    (not other.is_mesh3d_render_layer_used() if not self.is_mesh3d_render_layer_used() else (self._mesh3d_render_layer_ == other._mesh3d_render_layer_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_mesh3d_render_layer_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._mesh3d_render_layer_)

        return result

    @property
    def content(self) -> nds.display.metadata.display3d_content.Display3DContent:
        return self._content_

    @property
    def mesh3d_render_layer(self) -> typing.Optional[nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData]:
        return self._mesh3d_render_layer_

    @mesh3d_render_layer.setter
    def mesh3d_render_layer(self, mesh3d_render_layer_: typing.Optional[nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData]) -> None:
        self._mesh3d_render_layer_ = mesh3d_render_layer_

    def is_mesh3d_render_layer_used(self) -> bool:
        return (self._content_ & nds.display.metadata.display3d_content.Display3DContent.Values.MESH_3D) == nds.display.metadata.display3d_content.Display3DContent.Values.MESH_3D

    def is_mesh3d_render_layer_set(self) -> bool:
        return not self._mesh3d_render_layer_ is None

    def reset_mesh3d_render_layer(self) -> None:
        self._mesh3d_render_layer_ = None

    def init_packing_context(self, zserio_context: Display3DGeometryLayerList.ZserioPackingContext) -> None:
        if self.is_mesh3d_render_layer_used():
            self._mesh3d_render_layer_.init_packing_context(zserio_context.mesh3d_render_layer)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_mesh3d_render_layer_used():
            end_bitposition += self._mesh3d_render_layer_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display3DGeometryLayerList.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_mesh3d_render_layer_used():
            end_bitposition += self._mesh3d_render_layer_.bitsizeof_packed(zserio_context.mesh3d_render_layer, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_mesh3d_render_layer_used():
            end_bitposition = self._mesh3d_render_layer_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display3DGeometryLayerList.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        if self.is_mesh3d_render_layer_used():
            end_bitposition = self._mesh3d_render_layer_.initialize_offsets_packed(zserio_context.mesh3d_render_layer, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_mesh3d_render_layer_used():
            self._mesh3d_render_layer_ = nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData.from_reader(zserio_reader)
        else:
            self._mesh3d_render_layer_ = None

    def read_packed(self, zserio_context: Display3DGeometryLayerList.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_mesh3d_render_layer_used():
            self._mesh3d_render_layer_ = nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData.from_reader_packed(zserio_context.mesh3d_render_layer, zserio_reader)
        else:
            self._mesh3d_render_layer_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_mesh3d_render_layer_used():
            self._mesh3d_render_layer_.write(zserio_writer)

    def write_packed(self, zserio_context: Display3DGeometryLayerList.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_mesh3d_render_layer_used():
            self._mesh3d_render_layer_.write_packed(zserio_context.mesh3d_render_layer, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._mesh3d_render_layer_ = nds.display.layer.mesh3d_render_layer_data.Mesh3DRenderLayerData.ZserioPackingContext()

        @property
        def mesh3d_render_layer(self):
            return self._mesh3d_render_layer_
