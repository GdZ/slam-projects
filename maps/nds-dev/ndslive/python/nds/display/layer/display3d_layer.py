# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.layer.display3d_geometry_layer_list
import nds.display.layer.display3d_layer_header
import nds.display.metadata.display3d_content
import nds.system.types.layer_type

class Display3DLayer:
    def __init__(
            self,
            header_: typing.Union[nds.display.layer.display3d_layer_header.Display3DLayerHeader, None] = None,
            geometry_layers_: typing.Union[nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList, None] = None) -> None:
        self._header_ = header_
        self._geometry_layers_ = geometry_layers_

    @classmethod
    def from_reader(
            cls: typing.Type['Display3DLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'Display3DLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Display3DLayer'],
            zserio_context: Display3DLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Display3DLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Display3DLayer):
            return ((self._header_ == other._header_) and
                    (self._geometry_layers_ == other._geometry_layers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._geometry_layers_)

        return result

    @property
    def header(self) -> typing.Union[nds.display.layer.display3d_layer_header.Display3DLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.display.layer.display3d_layer_header.Display3DLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def geometry_layers(self) -> typing.Union[nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList, None]:
        return self._geometry_layers_

    @geometry_layers.setter
    def geometry_layers(self, geometry_layers_: typing.Union[nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList, None]) -> None:
        self._geometry_layers_ = geometry_layers_

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: Display3DLayer.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)
        self._geometry_layers_.init_packing_context(zserio_context.geometry_layers)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += self._geometry_layers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Display3DLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += self._geometry_layers_.bitsizeof_packed(zserio_context.geometry_layers, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition = self._geometry_layers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Display3DLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition = self._geometry_layers_.initialize_offsets_packed(zserio_context.geometry_layers, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.display3d_layer_header.Display3DLayerHeader.from_reader(zserio_reader)
        self._geometry_layers_ = nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList.from_reader(zserio_reader, self._header_.content)

    def read_packed(self, zserio_context: Display3DLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.display3d_layer_header.Display3DLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._geometry_layers_ = nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList.from_reader_packed(zserio_context.geometry_layers, zserio_reader, self._header_.content)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)

        # check parameters
        if self._geometry_layers_.content is not (self._header_.content):
            raise zserio.PythonRuntimeException("Wrong parameter content for field Display3DLayer.geometryLayers: "
                                                f"{self._geometry_layers_.content} != {self._header_.content}!")
        self._geometry_layers_.write(zserio_writer)

    def write_packed(self, zserio_context: Display3DLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        # check parameters
        if self._geometry_layers_.content is not (self._header_.content):
            raise zserio.PythonRuntimeException("Wrong parameter content for field Display3DLayer.geometryLayers: "
                                                f"{self._geometry_layers_.content} != {self._header_.content}!")
        self._geometry_layers_.write_packed(zserio_context.geometry_layers, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.display.layer.display3d_layer_header.Display3DLayerHeader.ZserioPackingContext()
            self._geometry_layers_ = nds.display.layer.display3d_geometry_layer_list.Display3DGeometryLayerList.ZserioPackingContext()

        @property
        def header(self):
            return self._header_

        @property
        def geometry_layers(self):
            return self._geometry_layers_
