# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.layer.gltf_layer_header

class GltfLayer:
    def __init__(
            self,
            header_: typing.Union[nds.display.layer.gltf_layer_header.GltfLayerHeader, None] = None,
            gltf_data_: typing.Union[zserio.bitbuffer.BitBuffer, None] = None) -> None:
        self._header_ = header_
        self._gltf_data_ = gltf_data_

    @classmethod
    def from_reader(
            cls: typing.Type['GltfLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'GltfLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GltfLayer'],
            zserio_context: GltfLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GltfLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GltfLayer):
            return ((self._header_ == other._header_) and
                    (self._gltf_data_ == other._gltf_data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._gltf_data_)

        return result

    @property
    def header(self) -> typing.Union[nds.display.layer.gltf_layer_header.GltfLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.display.layer.gltf_layer_header.GltfLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def gltf_data(self) -> typing.Union[zserio.bitbuffer.BitBuffer, None]:
        return self._gltf_data_

    @gltf_data.setter
    def gltf_data(self, gltf_data_: typing.Union[zserio.bitbuffer.BitBuffer, None]) -> None:
        self._gltf_data_ = gltf_data_

    def init_packing_context(self, zserio_context: GltfLayer.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._gltf_data_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GltfLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._gltf_data_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._gltf_data_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GltfLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_bitbuffer(self._gltf_data_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.gltf_layer_header.GltfLayerHeader.from_reader(zserio_reader)
        self._gltf_data_ = zserio_reader.read_bitbuffer()

    def read_packed(self, zserio_context: GltfLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.layer.gltf_layer_header.GltfLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._gltf_data_ = zserio_reader.read_bitbuffer()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)
        zserio_writer.write_bitbuffer(self._gltf_data_)

    def write_packed(self, zserio_context: GltfLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        zserio_writer.write_bitbuffer(self._gltf_data_)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.display.layer.gltf_layer_header.GltfLayerHeader.ZserioPackingContext()

        @property
        def header(self):
            return self._header_
