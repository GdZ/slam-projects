# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.geometry_layer_type
import nds.core.geometry.index_buffer
import nds.core.geometry.poly_mesh3d
import nds.display.instantiations.mesh3d_display_geometry_layer
import nds.display.types.color_id
import nds.display.types.mesh3d_render_data
import nds.display.types.mesh3d_render_layer_header
import nds.display.types.normal_sphere
import nds.display.types.texture_coords

class Mesh3DRenderLayerData:
    def __init__(
            self,
            header_: typing.Union[nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader, None] = None,
            mesh3d_display_geometry_layer_: typing.Union[nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer, None] = None,
            normals_: typing.Optional[typing.List[nds.display.types.normal_sphere.NormalSphere]] = None,
            texture_coordinates_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]] = None,
            texture_coords_additional_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]] = None,
            color_ids_: typing.Optional[typing.List[nds.display.types.color_id.ColorId]] = None,
            normal_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer] = None,
            texture_coords_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer] = None,
            texture_coords_additional_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer] = None,
            color_id_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer] = None,
            mesh3d_render_data_: typing.List[nds.display.types.mesh3d_render_data.Mesh3DRenderData] = None) -> None:
        self._header_ = header_
        self._mesh3d_display_geometry_layer_ = mesh3d_display_geometry_layer_
        if normals_ is None:
            self._normals_ = None
        else:
            self._normals_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), normals_)
        if texture_coordinates_ is None:
            self._texture_coordinates_ = None
        else:
            self._texture_coordinates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), texture_coordinates_)
        if texture_coords_additional_ is None:
            self._texture_coords_additional_ = None
        else:
            self._texture_coords_additional_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coords_additional()), texture_coords_additional_)
        if color_ids_ is None:
            self._color_ids_ = None
        else:
            self._color_ids_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), color_ids_)
        self._normal_indices_ = normal_indices_
        self._texture_coords_indices_ = texture_coords_indices_
        self._texture_coords_additional_indices_ = texture_coords_additional_indices_
        self._color_id_indices_ = color_id_indices_
        self._mesh3d_render_data_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh3d_render_data(self)), mesh3d_render_data_)

    @classmethod
    def from_reader(
            cls: typing.Type['Mesh3DRenderLayerData'],
            zserio_reader: zserio.BitStreamReader) -> 'Mesh3DRenderLayerData':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Mesh3DRenderLayerData'],
            zserio_context: Mesh3DRenderLayerData.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Mesh3DRenderLayerData':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Mesh3DRenderLayerData):
            return ((self._header_ == other._header_) and
                    (self._mesh3d_display_geometry_layer_ == other._mesh3d_display_geometry_layer_) and
                    (not other.is_normals_used() if not self.is_normals_used() else (self._normals_ == other._normals_)) and
                    (not other.is_texture_coordinates_used() if not self.is_texture_coordinates_used() else (self._texture_coordinates_ == other._texture_coordinates_)) and
                    (not other.is_texture_coords_additional_used() if not self.is_texture_coords_additional_used() else (self._texture_coords_additional_ == other._texture_coords_additional_)) and
                    (not other.is_color_ids_used() if not self.is_color_ids_used() else (self._color_ids_ == other._color_ids_)) and
                    (not other.is_normal_indices_used() if not self.is_normal_indices_used() else (self._normal_indices_ == other._normal_indices_)) and
                    (not other.is_texture_coords_indices_used() if not self.is_texture_coords_indices_used() else (self._texture_coords_indices_ == other._texture_coords_indices_)) and
                    (not other.is_texture_coords_additional_indices_used() if not self.is_texture_coords_additional_indices_used() else (self._texture_coords_additional_indices_ == other._texture_coords_additional_indices_)) and
                    (not other.is_color_id_indices_used() if not self.is_color_id_indices_used() else (self._color_id_indices_ == other._color_id_indices_)) and
                    (self._mesh3d_render_data_ == other._mesh3d_render_data_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._mesh3d_display_geometry_layer_)
        if self.is_normals_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._normals_)
        if self.is_texture_coordinates_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coordinates_)
        if self.is_texture_coords_additional_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coords_additional_)
        if self.is_color_ids_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._color_ids_)
        if self.is_normal_indices_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._normal_indices_)
        if self.is_texture_coords_indices_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coords_indices_)
        if self.is_texture_coords_additional_indices_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coords_additional_indices_)
        if self.is_color_id_indices_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._color_id_indices_)
        result = zserio.hashcode.calc_hashcode_object(result, self._mesh3d_render_data_)

        return result

    @property
    def header(self) -> typing.Union[nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def mesh3d_display_geometry_layer(self) -> typing.Union[nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer, None]:
        return self._mesh3d_display_geometry_layer_

    @mesh3d_display_geometry_layer.setter
    def mesh3d_display_geometry_layer(self, mesh3d_display_geometry_layer_: typing.Union[nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer, None]) -> None:
        self._mesh3d_display_geometry_layer_ = mesh3d_display_geometry_layer_

    @property
    def normals(self) -> typing.Optional[typing.List[nds.display.types.normal_sphere.NormalSphere]]:
        return None if self._normals_ is None else self._normals_.raw_array

    @normals.setter
    def normals(self, normals_: typing.Optional[typing.List[nds.display.types.normal_sphere.NormalSphere]]) -> None:
        if normals_ is None:
            self._normals_ = None
        else:
            self._normals_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), normals_)

    def is_normals_used(self) -> bool:
        return (self._header_.has_normals)

    def is_normals_set(self) -> bool:
        return not self._normals_ is None

    def reset_normals(self) -> None:
        self._normals_ = None

    @property
    def texture_coordinates(self) -> typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]:
        return None if self._texture_coordinates_ is None else self._texture_coordinates_.raw_array

    @texture_coordinates.setter
    def texture_coordinates(self, texture_coordinates_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]) -> None:
        if texture_coordinates_ is None:
            self._texture_coordinates_ = None
        else:
            self._texture_coordinates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), texture_coordinates_)

    def is_texture_coordinates_used(self) -> bool:
        return (self._header_.has_texture_coords)

    def is_texture_coordinates_set(self) -> bool:
        return not self._texture_coordinates_ is None

    def reset_texture_coordinates(self) -> None:
        self._texture_coordinates_ = None

    @property
    def texture_coords_additional(self) -> typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]:
        return None if self._texture_coords_additional_ is None else self._texture_coords_additional_.raw_array

    @texture_coords_additional.setter
    def texture_coords_additional(self, texture_coords_additional_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]) -> None:
        if texture_coords_additional_ is None:
            self._texture_coords_additional_ = None
        else:
            self._texture_coords_additional_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coords_additional()), texture_coords_additional_)

    def is_texture_coords_additional_used(self) -> bool:
        return (self._header_.has_texture_coords_additional)

    def is_texture_coords_additional_set(self) -> bool:
        return not self._texture_coords_additional_ is None

    def reset_texture_coords_additional(self) -> None:
        self._texture_coords_additional_ = None

    @property
    def color_ids(self) -> typing.Optional[typing.List[nds.display.types.color_id.ColorId]]:
        return None if self._color_ids_ is None else self._color_ids_.raw_array

    @color_ids.setter
    def color_ids(self, color_ids_: typing.Optional[typing.List[nds.display.types.color_id.ColorId]]) -> None:
        if color_ids_ is None:
            self._color_ids_ = None
        else:
            self._color_ids_ = zserio.array.Array(zserio.array.VarUInt16ArrayTraits(), color_ids_)

    def is_color_ids_used(self) -> bool:
        return (self._header_.has_color_per_vertex())

    def is_color_ids_set(self) -> bool:
        return not self._color_ids_ is None

    def reset_color_ids(self) -> None:
        self._color_ids_ = None

    @property
    def normal_indices(self) -> typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]:
        return self._normal_indices_

    @normal_indices.setter
    def normal_indices(self, normal_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]) -> None:
        self._normal_indices_ = normal_indices_

    def is_normal_indices_used(self) -> bool:
        return (self._header_.has_normals)

    def is_normal_indices_set(self) -> bool:
        return not self._normal_indices_ is None

    def reset_normal_indices(self) -> None:
        self._normal_indices_ = None

    @property
    def texture_coords_indices(self) -> typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]:
        return self._texture_coords_indices_

    @texture_coords_indices.setter
    def texture_coords_indices(self, texture_coords_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]) -> None:
        self._texture_coords_indices_ = texture_coords_indices_

    def is_texture_coords_indices_used(self) -> bool:
        return (self._header_.has_texture_coords)

    def is_texture_coords_indices_set(self) -> bool:
        return not self._texture_coords_indices_ is None

    def reset_texture_coords_indices(self) -> None:
        self._texture_coords_indices_ = None

    @property
    def texture_coords_additional_indices(self) -> typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]:
        return self._texture_coords_additional_indices_

    @texture_coords_additional_indices.setter
    def texture_coords_additional_indices(self, texture_coords_additional_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]) -> None:
        self._texture_coords_additional_indices_ = texture_coords_additional_indices_

    def is_texture_coords_additional_indices_used(self) -> bool:
        return (self._header_.has_texture_coords_additional)

    def is_texture_coords_additional_indices_set(self) -> bool:
        return not self._texture_coords_additional_indices_ is None

    def reset_texture_coords_additional_indices(self) -> None:
        self._texture_coords_additional_indices_ = None

    @property
    def color_id_indices(self) -> typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]:
        return self._color_id_indices_

    @color_id_indices.setter
    def color_id_indices(self, color_id_indices_: typing.Optional[nds.core.geometry.index_buffer.IndexBuffer]) -> None:
        self._color_id_indices_ = color_id_indices_

    def is_color_id_indices_used(self) -> bool:
        return (self._header_.has_color_per_vertex())

    def is_color_id_indices_set(self) -> bool:
        return not self._color_id_indices_ is None

    def reset_color_id_indices(self) -> None:
        self._color_id_indices_ = None

    @property
    def mesh3d_render_data(self) -> typing.List[nds.display.types.mesh3d_render_data.Mesh3DRenderData]:
        return self._mesh3d_render_data_.raw_array

    @mesh3d_render_data.setter
    def mesh3d_render_data(self, mesh3d_render_data_: typing.List[nds.display.types.mesh3d_render_data.Mesh3DRenderData]) -> None:
        self._mesh3d_render_data_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh3d_render_data(self)), mesh3d_render_data_)

    def init_packing_context(self, zserio_context: Mesh3DRenderLayerData.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)
        self._mesh3d_display_geometry_layer_.init_packing_context(zserio_context.mesh3d_display_geometry_layer)
        if self.is_normal_indices_used():
            self._normal_indices_.init_packing_context(zserio_context.normal_indices)
        if self.is_texture_coords_indices_used():
            self._texture_coords_indices_.init_packing_context(zserio_context.texture_coords_indices)
        if self.is_texture_coords_additional_indices_used():
            self._texture_coords_additional_indices_.init_packing_context(zserio_context.texture_coords_additional_indices)
        if self.is_color_id_indices_used():
            self._color_id_indices_.init_packing_context(zserio_context.color_id_indices)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += self._mesh3d_display_geometry_layer_.bitsizeof(end_bitposition)
        if self.is_normals_used():
            end_bitposition += self._normals_.bitsizeof_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition += self._texture_coordinates_.bitsizeof(end_bitposition)
        if self.is_texture_coords_additional_used():
            end_bitposition += self._texture_coords_additional_.bitsizeof(end_bitposition)
        if self.is_color_ids_used():
            end_bitposition += self._color_ids_.bitsizeof_packed(end_bitposition)
        if self.is_normal_indices_used():
            end_bitposition += self._normal_indices_.bitsizeof(end_bitposition)
        if self.is_texture_coords_indices_used():
            end_bitposition += self._texture_coords_indices_.bitsizeof(end_bitposition)
        if self.is_texture_coords_additional_indices_used():
            end_bitposition += self._texture_coords_additional_indices_.bitsizeof(end_bitposition)
        if self.is_color_id_indices_used():
            end_bitposition += self._color_id_indices_.bitsizeof(end_bitposition)
        end_bitposition += self._mesh3d_render_data_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Mesh3DRenderLayerData.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += self._mesh3d_display_geometry_layer_.bitsizeof_packed(zserio_context.mesh3d_display_geometry_layer, end_bitposition)
        if self.is_normals_used():
            end_bitposition += self._normals_.bitsizeof_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition += self._texture_coordinates_.bitsizeof(end_bitposition)
        if self.is_texture_coords_additional_used():
            end_bitposition += self._texture_coords_additional_.bitsizeof(end_bitposition)
        if self.is_color_ids_used():
            end_bitposition += self._color_ids_.bitsizeof_packed(end_bitposition)
        if self.is_normal_indices_used():
            end_bitposition += self._normal_indices_.bitsizeof_packed(zserio_context.normal_indices, end_bitposition)
        if self.is_texture_coords_indices_used():
            end_bitposition += self._texture_coords_indices_.bitsizeof_packed(zserio_context.texture_coords_indices, end_bitposition)
        if self.is_texture_coords_additional_indices_used():
            end_bitposition += self._texture_coords_additional_indices_.bitsizeof_packed(zserio_context.texture_coords_additional_indices, end_bitposition)
        if self.is_color_id_indices_used():
            end_bitposition += self._color_id_indices_.bitsizeof_packed(zserio_context.color_id_indices, end_bitposition)
        end_bitposition += self._mesh3d_render_data_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition = self._mesh3d_display_geometry_layer_.initialize_offsets(end_bitposition)
        if self.is_normals_used():
            end_bitposition = self._normals_.initialize_offsets_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition = self._texture_coordinates_.initialize_offsets(end_bitposition)
        if self.is_texture_coords_additional_used():
            end_bitposition = self._texture_coords_additional_.initialize_offsets(end_bitposition)
        if self.is_color_ids_used():
            end_bitposition = self._color_ids_.initialize_offsets_packed(end_bitposition)
        if self.is_normal_indices_used():
            end_bitposition = self._normal_indices_.initialize_offsets(end_bitposition)
        if self.is_texture_coords_indices_used():
            end_bitposition = self._texture_coords_indices_.initialize_offsets(end_bitposition)
        if self.is_texture_coords_additional_indices_used():
            end_bitposition = self._texture_coords_additional_indices_.initialize_offsets(end_bitposition)
        if self.is_color_id_indices_used():
            end_bitposition = self._color_id_indices_.initialize_offsets(end_bitposition)
        end_bitposition = self._mesh3d_render_data_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Mesh3DRenderLayerData.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition = self._mesh3d_display_geometry_layer_.initialize_offsets_packed(zserio_context.mesh3d_display_geometry_layer, end_bitposition)
        if self.is_normals_used():
            end_bitposition = self._normals_.initialize_offsets_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition = self._texture_coordinates_.initialize_offsets(end_bitposition)
        if self.is_texture_coords_additional_used():
            end_bitposition = self._texture_coords_additional_.initialize_offsets(end_bitposition)
        if self.is_color_ids_used():
            end_bitposition = self._color_ids_.initialize_offsets_packed(end_bitposition)
        if self.is_normal_indices_used():
            end_bitposition = self._normal_indices_.initialize_offsets_packed(zserio_context.normal_indices, end_bitposition)
        if self.is_texture_coords_indices_used():
            end_bitposition = self._texture_coords_indices_.initialize_offsets_packed(zserio_context.texture_coords_indices, end_bitposition)
        if self.is_texture_coords_additional_indices_used():
            end_bitposition = self._texture_coords_additional_indices_.initialize_offsets_packed(zserio_context.texture_coords_additional_indices, end_bitposition)
        if self.is_color_id_indices_used():
            end_bitposition = self._color_id_indices_.initialize_offsets_packed(zserio_context.color_id_indices, end_bitposition)
        end_bitposition = self._mesh3d_render_data_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader.from_reader(zserio_reader)
        self._mesh3d_display_geometry_layer_ = nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer.from_reader(zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D, True, True)
        if self.is_normals_used():
            self._normals_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), zserio_reader, self._header_.num_of_normals())
        else:
            self._normals_ = None
        if self.is_texture_coordinates_used():
            self._texture_coordinates_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), zserio_reader, self._header_.num_of_texture_coords())
        else:
            self._texture_coordinates_ = None
        if self.is_texture_coords_additional_used():
            self._texture_coords_additional_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coords_additional()), zserio_reader, self._header_.num_of_texture_coords_additional())
        else:
            self._texture_coords_additional_ = None
        if self.is_color_ids_used():
            self._color_ids_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._header_.num_of_color_ids())
        else:
            self._color_ids_ = None
        if self.is_normal_indices_used():
            self._normal_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader(zserio_reader, len(self._normals_))
        else:
            self._normal_indices_ = None
        if self.is_texture_coords_indices_used():
            self._texture_coords_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader(zserio_reader, len(self._texture_coordinates_))
        else:
            self._texture_coords_indices_ = None
        if self.is_texture_coords_additional_indices_used():
            self._texture_coords_additional_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader(zserio_reader, len(self._texture_coords_additional_))
        else:
            self._texture_coords_additional_indices_ = None
        if self.is_color_id_indices_used():
            self._color_id_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader(zserio_reader, len(self._color_ids_))
        else:
            self._color_id_indices_ = None
        self._mesh3d_render_data_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh3d_render_data(self)), zserio_reader, self._mesh3d_display_geometry_layer_.num_elements)

    def read_packed(self, zserio_context: Mesh3DRenderLayerData.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._mesh3d_display_geometry_layer_ = nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer.from_reader_packed(zserio_context.mesh3d_display_geometry_layer, zserio_reader, nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D, True, True)

        if self.is_normals_used():
            self._normals_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), zserio_reader, self._header_.num_of_normals())
        else:
            self._normals_ = None

        if self.is_texture_coordinates_used():
            self._texture_coordinates_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), zserio_reader, self._header_.num_of_texture_coords())
        else:
            self._texture_coordinates_ = None

        if self.is_texture_coords_additional_used():
            self._texture_coords_additional_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coords_additional()), zserio_reader, self._header_.num_of_texture_coords_additional())
        else:
            self._texture_coords_additional_ = None

        if self.is_color_ids_used():
            self._color_ids_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt16ArrayTraits(), zserio_reader, self._header_.num_of_color_ids())
        else:
            self._color_ids_ = None

        if self.is_normal_indices_used():
            self._normal_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader_packed(zserio_context.normal_indices, zserio_reader, len(self._normals_))
        else:
            self._normal_indices_ = None

        if self.is_texture_coords_indices_used():
            self._texture_coords_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader_packed(zserio_context.texture_coords_indices, zserio_reader, len(self._texture_coordinates_))
        else:
            self._texture_coords_indices_ = None

        if self.is_texture_coords_additional_indices_used():
            self._texture_coords_additional_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader_packed(zserio_context.texture_coords_additional_indices, zserio_reader, len(self._texture_coords_additional_))
        else:
            self._texture_coords_additional_indices_ = None

        if self.is_color_id_indices_used():
            self._color_id_indices_ = nds.core.geometry.index_buffer.IndexBuffer.from_reader_packed(zserio_context.color_id_indices, zserio_reader, len(self._color_ids_))
        else:
            self._color_id_indices_ = None

        self._mesh3d_render_data_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_mesh3d_render_data(self)), zserio_reader, self._mesh3d_display_geometry_layer_.num_elements)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)

        # check parameters
        if self._mesh3d_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D}!")
        if self._mesh3d_display_geometry_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.has_ids} != {True}!")
        if self._mesh3d_display_geometry_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.has_types} != {True}!")
        self._mesh3d_display_geometry_layer_.write(zserio_writer)

        if self.is_normals_used():
            # check array length
            if len(self._normals_) != (self._header_.num_of_normals()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.normals: "
                                                    f"{len(self._normals_)} != {self._header_.num_of_normals()}!")
            self._normals_.write_packed(zserio_writer)

        if self.is_texture_coordinates_used():
            # check array length
            if len(self._texture_coordinates_) != (self._header_.num_of_texture_coords()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: "
                                                    f"{len(self._texture_coordinates_)} != {self._header_.num_of_texture_coords()}!")
            self._texture_coordinates_.write(zserio_writer)

        if self.is_texture_coords_additional_used():
            # check array length
            if len(self._texture_coords_additional_) != (self._header_.num_of_texture_coords_additional()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: "
                                                    f"{len(self._texture_coords_additional_)} != {self._header_.num_of_texture_coords_additional()}!")
            self._texture_coords_additional_.write(zserio_writer)

        if self.is_color_ids_used():
            # check array length
            if len(self._color_ids_) != (self._header_.num_of_color_ids()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.colorIds: "
                                                    f"{len(self._color_ids_)} != {self._header_.num_of_color_ids()}!")
            self._color_ids_.write_packed(zserio_writer)

        if self.is_normal_indices_used():
            # check parameters
            if self._normal_indices_.position_buffer_size != (len(self._normals_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.normalIndices: "
                                                    f"{self._normal_indices_.position_buffer_size} != {len(self._normals_)}!")
            self._normal_indices_.write(zserio_writer)

        if self.is_texture_coords_indices_used():
            # check parameters
            if self._texture_coords_indices_.position_buffer_size != (len(self._texture_coordinates_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsIndices: "
                                                    f"{self._texture_coords_indices_.position_buffer_size} != {len(self._texture_coordinates_)}!")
            self._texture_coords_indices_.write(zserio_writer)

        if self.is_texture_coords_additional_indices_used():
            # check parameters
            if self._texture_coords_additional_indices_.position_buffer_size != (len(self._texture_coords_additional_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsAdditionalIndices: "
                                                    f"{self._texture_coords_additional_indices_.position_buffer_size} != {len(self._texture_coords_additional_)}!")
            self._texture_coords_additional_indices_.write(zserio_writer)

        if self.is_color_id_indices_used():
            # check parameters
            if self._color_id_indices_.position_buffer_size != (len(self._color_ids_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.colorIdIndices: "
                                                    f"{self._color_id_indices_.position_buffer_size} != {len(self._color_ids_)}!")
            self._color_id_indices_.write(zserio_writer)

        # check array length
        if len(self._mesh3d_render_data_) != (self._mesh3d_display_geometry_layer_.num_elements):
            raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: "
                                                f"{len(self._mesh3d_render_data_)} != {self._mesh3d_display_geometry_layer_.num_elements}!")
        self._mesh3d_render_data_.write(zserio_writer)

    def write_packed(self, zserio_context: Mesh3DRenderLayerData.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        # check parameters
        if self._mesh3d_display_geometry_layer_.type is not (nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D):
            raise zserio.PythonRuntimeException("Wrong parameter type for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.type} != {nds.core.geometry.geometry_layer_type.GeometryLayerType.MESH_3D}!")
        if self._mesh3d_display_geometry_layer_.has_ids != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasIds for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.has_ids} != {True}!")
        if self._mesh3d_display_geometry_layer_.has_types != (True):
            raise zserio.PythonRuntimeException("Wrong parameter hasTypes for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: "
                                                f"{self._mesh3d_display_geometry_layer_.has_types} != {True}!")
        self._mesh3d_display_geometry_layer_.write_packed(zserio_context.mesh3d_display_geometry_layer, zserio_writer)

        if self.is_normals_used():
            # check array length
            if len(self._normals_) != (self._header_.num_of_normals()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.normals: "
                                                    f"{len(self._normals_)} != {self._header_.num_of_normals()}!")
            self._normals_.write_packed(zserio_writer)

        if self.is_texture_coordinates_used():
            # check array length
            if len(self._texture_coordinates_) != (self._header_.num_of_texture_coords()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: "
                                                    f"{len(self._texture_coordinates_)} != {self._header_.num_of_texture_coords()}!")
            self._texture_coordinates_.write(zserio_writer)

        if self.is_texture_coords_additional_used():
            # check array length
            if len(self._texture_coords_additional_) != (self._header_.num_of_texture_coords_additional()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: "
                                                    f"{len(self._texture_coords_additional_)} != {self._header_.num_of_texture_coords_additional()}!")
            self._texture_coords_additional_.write(zserio_writer)

        if self.is_color_ids_used():
            # check array length
            if len(self._color_ids_) != (self._header_.num_of_color_ids()):
                raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.colorIds: "
                                                    f"{len(self._color_ids_)} != {self._header_.num_of_color_ids()}!")
            self._color_ids_.write_packed(zserio_writer)

        if self.is_normal_indices_used():
            # check parameters
            if self._normal_indices_.position_buffer_size != (len(self._normals_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.normalIndices: "
                                                    f"{self._normal_indices_.position_buffer_size} != {len(self._normals_)}!")
            self._normal_indices_.write_packed(zserio_context.normal_indices, zserio_writer)

        if self.is_texture_coords_indices_used():
            # check parameters
            if self._texture_coords_indices_.position_buffer_size != (len(self._texture_coordinates_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsIndices: "
                                                    f"{self._texture_coords_indices_.position_buffer_size} != {len(self._texture_coordinates_)}!")
            self._texture_coords_indices_.write_packed(zserio_context.texture_coords_indices, zserio_writer)

        if self.is_texture_coords_additional_indices_used():
            # check parameters
            if self._texture_coords_additional_indices_.position_buffer_size != (len(self._texture_coords_additional_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsAdditionalIndices: "
                                                    f"{self._texture_coords_additional_indices_.position_buffer_size} != {len(self._texture_coords_additional_)}!")
            self._texture_coords_additional_indices_.write_packed(zserio_context.texture_coords_additional_indices, zserio_writer)

        if self.is_color_id_indices_used():
            # check parameters
            if self._color_id_indices_.position_buffer_size != (len(self._color_ids_)):
                raise zserio.PythonRuntimeException("Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.colorIdIndices: "
                                                    f"{self._color_id_indices_.position_buffer_size} != {len(self._color_ids_)}!")
            self._color_id_indices_.write_packed(zserio_context.color_id_indices, zserio_writer)

        # check array length
        if len(self._mesh3d_render_data_) != (self._mesh3d_display_geometry_layer_.num_elements):
            raise zserio.PythonRuntimeException("Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: "
                                                f"{len(self._mesh3d_render_data_)} != {self._mesh3d_display_geometry_layer_.num_elements}!")
        self._mesh3d_render_data_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader.ZserioPackingContext()
            self._mesh3d_display_geometry_layer_ = nds.display.instantiations.mesh3d_display_geometry_layer.Mesh3dDisplayGeometryLayer.ZserioPackingContext()
            self._normal_indices_ = nds.core.geometry.index_buffer.IndexBuffer.ZserioPackingContext()
            self._texture_coords_indices_ = nds.core.geometry.index_buffer.IndexBuffer.ZserioPackingContext()
            self._texture_coords_additional_indices_ = nds.core.geometry.index_buffer.IndexBuffer.ZserioPackingContext()
            self._color_id_indices_ = nds.core.geometry.index_buffer.IndexBuffer.ZserioPackingContext()

        @property
        def header(self):
            return self._header_

        @property
        def mesh3d_display_geometry_layer(self):
            return self._mesh3d_display_geometry_layer_

        @property
        def normal_indices(self):
            return self._normal_indices_

        @property
        def texture_coords_indices(self):
            return self._texture_coords_indices_

        @property
        def texture_coords_additional_indices(self):
            return self._texture_coords_additional_indices_

        @property
        def color_id_indices(self):
            return self._color_id_indices_

    class _ZserioElementFactory_normals:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.normal_sphere.NormalSphere:
            del zserio_index
            return nds.display.types.normal_sphere.NormalSphere.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext:
            return nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.normal_sphere.NormalSphere:
            del zserio_index
            return nds.display.types.normal_sphere.NormalSphere.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_texture_coordinates:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_coords.TextureCoords:
            del zserio_index
            return nds.display.types.texture_coords.TextureCoords.from_reader(zserio_reader)

    class _ZserioElementFactory_texture_coords_additional:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_coords.TextureCoords:
            del zserio_index
            return nds.display.types.texture_coords.TextureCoords.from_reader(zserio_reader)

    class _ZserioElementFactory_mesh3d_render_data:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.mesh3d_render_data.Mesh3DRenderData:
            return nds.display.types.mesh3d_render_data.Mesh3DRenderData.from_reader(zserio_reader, self._owner._mesh3d_display_geometry_layer_.buffers.meshes3d.polymeshes[zserio_index], self._owner._header_)

        @staticmethod
        def create_packing_context() -> nds.display.types.mesh3d_render_data.Mesh3DRenderData.ZserioPackingContext:
            return nds.display.types.mesh3d_render_data.Mesh3DRenderData.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.mesh3d_render_data.Mesh3DRenderData.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.mesh3d_render_data.Mesh3DRenderData:
            return nds.display.types.mesh3d_render_data.Mesh3DRenderData.from_reader_packed(zserio_context, zserio_reader, self._owner._mesh3d_display_geometry_layer_.buffers.meshes3d.polymeshes[zserio_index], self._owner._header_)
