# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_image
import nds.core.icons.icon_set
import nds.core.icons.icon_template_set
import nds.display.metadata.icon_layer_content
import nds.display.types.generic_icon_set_map
import nds.system.types.layer_type

class IconLayer:
    def __init__(
            self,
            content_: typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None] = None,
            icons_: typing.List[nds.core.icons.icon_image.IconImage] = None,
            generic_icon_sets_: typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]] = None,
            generic_icon_set_map_: typing.Optional[typing.List[nds.display.types.generic_icon_set_map.GenericIconSetMap]] = None,
            referenced_icon_sets_: typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]] = None,
            icon_template_sets_: typing.Optional[typing.List[nds.core.icons.icon_template_set.IconTemplateSet]] = None) -> None:
        self._content_ = content_
        self._icons_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icons()), icons_, is_auto=True)
        if generic_icon_sets_ is None:
            self._generic_icon_sets_ = None
        else:
            self._generic_icon_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_sets()), generic_icon_sets_, is_auto=True)
        if generic_icon_set_map_ is None:
            self._generic_icon_set_map_ = None
        else:
            self._generic_icon_set_map_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_set_map()), generic_icon_set_map_, is_auto=True)
        if referenced_icon_sets_ is None:
            self._referenced_icon_sets_ = None
        else:
            self._referenced_icon_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_referenced_icon_sets()), referenced_icon_sets_, is_auto=True)
        if icon_template_sets_ is None:
            self._icon_template_sets_ = None
        else:
            self._icon_template_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_template_sets()), icon_template_sets_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['IconLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'IconLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['IconLayer'],
            zserio_context: IconLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'IconLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, IconLayer):
            return ((self._content_ == other._content_) and
                    (self._icons_ == other._icons_) and
                    (not other.is_generic_icon_sets_used() if not self.is_generic_icon_sets_used() else (self._generic_icon_sets_ == other._generic_icon_sets_)) and
                    (not other.is_generic_icon_set_map_used() if not self.is_generic_icon_set_map_used() else (self._generic_icon_set_map_ == other._generic_icon_set_map_)) and
                    (not other.is_referenced_icon_sets_used() if not self.is_referenced_icon_sets_used() else (self._referenced_icon_sets_ == other._referenced_icon_sets_)) and
                    (not other.is_icon_template_sets_used() if not self.is_icon_template_sets_used() else (self._icon_template_sets_ == other._icon_template_sets_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        result = zserio.hashcode.calc_hashcode_object(result, self._icons_)
        if self.is_generic_icon_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._generic_icon_sets_)
        if self.is_generic_icon_set_map_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._generic_icon_set_map_)
        if self.is_referenced_icon_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._referenced_icon_sets_)
        if self.is_icon_template_sets_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._icon_template_sets_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.metadata.icon_layer_content.IconLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def icons(self) -> typing.List[nds.core.icons.icon_image.IconImage]:
        return self._icons_.raw_array

    @icons.setter
    def icons(self, icons_: typing.List[nds.core.icons.icon_image.IconImage]) -> None:
        self._icons_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icons()), icons_, is_auto=True)

    @property
    def generic_icon_sets(self) -> typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]]:
        return None if self._generic_icon_sets_ is None else self._generic_icon_sets_.raw_array

    @generic_icon_sets.setter
    def generic_icon_sets(self, generic_icon_sets_: typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]]) -> None:
        if generic_icon_sets_ is None:
            self._generic_icon_sets_ = None
        else:
            self._generic_icon_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_sets()), generic_icon_sets_, is_auto=True)

    def is_generic_icon_sets_used(self) -> bool:
        return (self._content_ & nds.display.metadata.icon_layer_content.IconLayerContent.Values.GENERIC_ICON_SETS) == nds.display.metadata.icon_layer_content.IconLayerContent.Values.GENERIC_ICON_SETS

    def is_generic_icon_sets_set(self) -> bool:
        return not self._generic_icon_sets_ is None

    def reset_generic_icon_sets(self) -> None:
        self._generic_icon_sets_ = None

    @property
    def generic_icon_set_map(self) -> typing.Optional[typing.List[nds.display.types.generic_icon_set_map.GenericIconSetMap]]:
        return None if self._generic_icon_set_map_ is None else self._generic_icon_set_map_.raw_array

    @generic_icon_set_map.setter
    def generic_icon_set_map(self, generic_icon_set_map_: typing.Optional[typing.List[nds.display.types.generic_icon_set_map.GenericIconSetMap]]) -> None:
        if generic_icon_set_map_ is None:
            self._generic_icon_set_map_ = None
        else:
            self._generic_icon_set_map_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_set_map()), generic_icon_set_map_, is_auto=True)

    def is_generic_icon_set_map_used(self) -> bool:
        return (self._content_ & nds.display.metadata.icon_layer_content.IconLayerContent.Values.GENERIC_ICON_SETS) == nds.display.metadata.icon_layer_content.IconLayerContent.Values.GENERIC_ICON_SETS

    def is_generic_icon_set_map_set(self) -> bool:
        return not self._generic_icon_set_map_ is None

    def reset_generic_icon_set_map(self) -> None:
        self._generic_icon_set_map_ = None

    @property
    def referenced_icon_sets(self) -> typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]]:
        return None if self._referenced_icon_sets_ is None else self._referenced_icon_sets_.raw_array

    @referenced_icon_sets.setter
    def referenced_icon_sets(self, referenced_icon_sets_: typing.Optional[typing.List[nds.core.icons.icon_set.IconSet]]) -> None:
        if referenced_icon_sets_ is None:
            self._referenced_icon_sets_ = None
        else:
            self._referenced_icon_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_referenced_icon_sets()), referenced_icon_sets_, is_auto=True)

    def is_referenced_icon_sets_used(self) -> bool:
        return (self._content_ & nds.display.metadata.icon_layer_content.IconLayerContent.Values.REFERENCED_ICON_SETS) == nds.display.metadata.icon_layer_content.IconLayerContent.Values.REFERENCED_ICON_SETS

    def is_referenced_icon_sets_set(self) -> bool:
        return not self._referenced_icon_sets_ is None

    def reset_referenced_icon_sets(self) -> None:
        self._referenced_icon_sets_ = None

    @property
    def icon_template_sets(self) -> typing.Optional[typing.List[nds.core.icons.icon_template_set.IconTemplateSet]]:
        return None if self._icon_template_sets_ is None else self._icon_template_sets_.raw_array

    @icon_template_sets.setter
    def icon_template_sets(self, icon_template_sets_: typing.Optional[typing.List[nds.core.icons.icon_template_set.IconTemplateSet]]) -> None:
        if icon_template_sets_ is None:
            self._icon_template_sets_ = None
        else:
            self._icon_template_sets_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_template_sets()), icon_template_sets_, is_auto=True)

    def is_icon_template_sets_used(self) -> bool:
        return (self._content_ & nds.display.metadata.icon_layer_content.IconLayerContent.Values.TEMPLATE_ICON_SETS) == nds.display.metadata.icon_layer_content.IconLayerContent.Values.TEMPLATE_ICON_SETS

    def is_icon_template_sets_set(self) -> bool:
        return not self._icon_template_sets_ is None

    def reset_icon_template_sets(self) -> None:
        self._icon_template_sets_ = None

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.GEOMETRY

    def init_packing_context(self, zserio_context: IconLayer.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        end_bitposition += self._icons_.bitsizeof_packed(end_bitposition)
        if self.is_generic_icon_sets_used():
            end_bitposition += self._generic_icon_sets_.bitsizeof_packed(end_bitposition)
        if self.is_generic_icon_set_map_used():
            end_bitposition += self._generic_icon_set_map_.bitsizeof(end_bitposition)
        if self.is_referenced_icon_sets_used():
            end_bitposition += self._referenced_icon_sets_.bitsizeof_packed(end_bitposition)
        if self.is_icon_template_sets_used():
            end_bitposition += self._icon_template_sets_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: IconLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        end_bitposition += self._icons_.bitsizeof_packed(end_bitposition)
        if self.is_generic_icon_sets_used():
            end_bitposition += self._generic_icon_sets_.bitsizeof_packed(end_bitposition)
        if self.is_generic_icon_set_map_used():
            end_bitposition += self._generic_icon_set_map_.bitsizeof_packed(end_bitposition)
        if self.is_referenced_icon_sets_used():
            end_bitposition += self._referenced_icon_sets_.bitsizeof_packed(end_bitposition)
        if self.is_icon_template_sets_used():
            end_bitposition += self._icon_template_sets_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        end_bitposition = self._icons_.initialize_offsets_packed(end_bitposition)
        if self.is_generic_icon_sets_used():
            end_bitposition = self._generic_icon_sets_.initialize_offsets_packed(end_bitposition)
        if self.is_generic_icon_set_map_used():
            end_bitposition = self._generic_icon_set_map_.initialize_offsets(end_bitposition)
        if self.is_referenced_icon_sets_used():
            end_bitposition = self._referenced_icon_sets_.initialize_offsets_packed(end_bitposition)
        if self.is_icon_template_sets_used():
            end_bitposition = self._icon_template_sets_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: IconLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        end_bitposition = self._icons_.initialize_offsets_packed(end_bitposition)
        if self.is_generic_icon_sets_used():
            end_bitposition = self._generic_icon_sets_.initialize_offsets_packed(end_bitposition)
        if self.is_generic_icon_set_map_used():
            end_bitposition = self._generic_icon_set_map_.initialize_offsets_packed(end_bitposition)
        if self.is_referenced_icon_sets_used():
            end_bitposition = self._referenced_icon_sets_.initialize_offsets_packed(end_bitposition)
        if self.is_icon_template_sets_used():
            end_bitposition = self._icon_template_sets_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.icon_layer_content.IconLayerContent.from_reader(zserio_reader)
        self._icons_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icons()), zserio_reader, is_auto=True)
        if self.is_generic_icon_sets_used():
            self._generic_icon_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_sets()), zserio_reader, is_auto=True)
        else:
            self._generic_icon_sets_ = None
        if self.is_generic_icon_set_map_used():
            self._generic_icon_set_map_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_set_map()), zserio_reader, is_auto=True)
        else:
            self._generic_icon_set_map_ = None
        if self.is_referenced_icon_sets_used():
            self._referenced_icon_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_referenced_icon_sets()), zserio_reader, is_auto=True)
        else:
            self._referenced_icon_sets_ = None
        if self.is_icon_template_sets_used():
            self._icon_template_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_template_sets()), zserio_reader, is_auto=True)
        else:
            self._icon_template_sets_ = None

    def read_packed(self, zserio_context: IconLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.metadata.icon_layer_content.IconLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        self._icons_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icons()), zserio_reader, is_auto=True)

        if self.is_generic_icon_sets_used():
            self._generic_icon_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_sets()), zserio_reader, is_auto=True)
        else:
            self._generic_icon_sets_ = None

        if self.is_generic_icon_set_map_used():
            self._generic_icon_set_map_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_generic_icon_set_map()), zserio_reader, is_auto=True)
        else:
            self._generic_icon_set_map_ = None

        if self.is_referenced_icon_sets_used():
            self._referenced_icon_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_referenced_icon_sets()), zserio_reader, is_auto=True)
        else:
            self._referenced_icon_sets_ = None

        if self.is_icon_template_sets_used():
            self._icon_template_sets_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_icon_template_sets()), zserio_reader, is_auto=True)
        else:
            self._icon_template_sets_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        self._icons_.write_packed(zserio_writer)
        if self.is_generic_icon_sets_used():
            self._generic_icon_sets_.write_packed(zserio_writer)
        if self.is_generic_icon_set_map_used():
            self._generic_icon_set_map_.write(zserio_writer)
        if self.is_referenced_icon_sets_used():
            self._referenced_icon_sets_.write_packed(zserio_writer)
        if self.is_icon_template_sets_used():
            self._icon_template_sets_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: IconLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        self._icons_.write_packed(zserio_writer)

        if self.is_generic_icon_sets_used():
            self._generic_icon_sets_.write_packed(zserio_writer)

        if self.is_generic_icon_set_map_used():
            self._generic_icon_set_map_.write_packed(zserio_writer)

        if self.is_referenced_icon_sets_used():
            self._referenced_icon_sets_.write_packed(zserio_writer)

        if self.is_icon_template_sets_used():
            self._icon_template_sets_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()

        @property
        def content(self):
            return self._content_

    class _ZserioElementFactory_icons:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_image.IconImage:
            del zserio_index
            return nds.core.icons.icon_image.IconImage.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.icon_image.IconImage.ZserioPackingContext:
            return nds.core.icons.icon_image.IconImage.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.icon_image.IconImage.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_image.IconImage:
            del zserio_index
            return nds.core.icons.icon_image.IconImage.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_generic_icon_sets:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_set.IconSet:
            del zserio_index
            return nds.core.icons.icon_set.IconSet.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.icon_set.IconSet.ZserioPackingContext:
            return nds.core.icons.icon_set.IconSet.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.icon_set.IconSet.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_set.IconSet:
            del zserio_index
            return nds.core.icons.icon_set.IconSet.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_generic_icon_set_map:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.generic_icon_set_map.GenericIconSetMap:
            del zserio_index
            return nds.display.types.generic_icon_set_map.GenericIconSetMap.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.generic_icon_set_map.GenericIconSetMap.ZserioPackingContext:
            return nds.display.types.generic_icon_set_map.GenericIconSetMap.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.generic_icon_set_map.GenericIconSetMap.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.generic_icon_set_map.GenericIconSetMap:
            del zserio_index
            return nds.display.types.generic_icon_set_map.GenericIconSetMap.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_referenced_icon_sets:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_set.IconSet:
            del zserio_index
            return nds.core.icons.icon_set.IconSet.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.icon_set.IconSet.ZserioPackingContext:
            return nds.core.icons.icon_set.IconSet.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.icon_set.IconSet.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_set.IconSet:
            del zserio_index
            return nds.core.icons.icon_set.IconSet.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_icon_template_sets:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_template_set.IconTemplateSet:
            del zserio_index
            return nds.core.icons.icon_template_set.IconTemplateSet.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.icons.icon_template_set.IconTemplateSet.ZserioPackingContext:
            return nds.core.icons.icon_template_set.IconTemplateSet.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.icons.icon_template_set.IconTemplateSet.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.icons.icon_template_set.IconTemplateSet:
            del zserio_index
            return nds.core.icons.icon_template_set.IconTemplateSet.from_reader_packed(zserio_context, zserio_reader)
