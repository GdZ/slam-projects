# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.bdam_layer_header
import nds.display.types.bdam_surface_grid
import nds.system.types.layer_type

class BdamLayer:
    def __init__(
            self,
            header_: typing.Union[nds.display.types.bdam_layer_header.BdamLayerHeader, None] = None,
            surface_grids_: typing.List[nds.display.types.bdam_surface_grid.BdamSurfaceGrid] = None) -> None:
        self._header_ = header_
        self._surface_grids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_grids(self)), surface_grids_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['BdamLayer'],
            zserio_reader: zserio.BitStreamReader) -> 'BdamLayer':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BdamLayer'],
            zserio_context: BdamLayer.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BdamLayer':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BdamLayer):
            return ((self._header_ == other._header_) and
                    (self._surface_grids_ == other._surface_grids_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._surface_grids_)

        return result

    @property
    def header(self) -> typing.Union[nds.display.types.bdam_layer_header.BdamLayerHeader, None]:
        return self._header_

    @header.setter
    def header(self, header_: typing.Union[nds.display.types.bdam_layer_header.BdamLayerHeader, None]) -> None:
        self._header_ = header_

    @property
    def surface_grids(self) -> typing.List[nds.display.types.bdam_surface_grid.BdamSurfaceGrid]:
        return self._surface_grids_.raw_array

    @surface_grids.setter
    def surface_grids(self, surface_grids_: typing.List[nds.display.types.bdam_surface_grid.BdamSurfaceGrid]) -> None:
        self._surface_grids_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_grids(self)), surface_grids_, is_auto=True)

    def get_layer_type(self) -> nds.system.types.layer_type.LayerType:
        return nds.system.types.layer_type.LayerType.FEATURE

    def init_packing_context(self, zserio_context: BdamLayer.ZserioPackingContext) -> None:
        self._header_.init_packing_context(zserio_context.header)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof(end_bitposition)
        end_bitposition += self._surface_grids_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BdamLayer.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._header_.bitsizeof_packed(zserio_context.header, end_bitposition)
        end_bitposition += self._surface_grids_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets(end_bitposition)
        end_bitposition = self._surface_grids_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BdamLayer.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._header_.initialize_offsets_packed(zserio_context.header, end_bitposition)
        end_bitposition = self._surface_grids_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.types.bdam_layer_header.BdamLayerHeader.from_reader(zserio_reader)
        self._surface_grids_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_grids(self)), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: BdamLayer.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._header_ = nds.display.types.bdam_layer_header.BdamLayerHeader.from_reader_packed(zserio_context.header, zserio_reader)

        self._surface_grids_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_grids(self)), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write(zserio_writer)
        self._surface_grids_.write(zserio_writer)

    def write_packed(self, zserio_context: BdamLayer.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._header_.write_packed(zserio_context.header, zserio_writer)

        self._surface_grids_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._header_ = nds.display.types.bdam_layer_header.BdamLayerHeader.ZserioPackingContext()

        @property
        def header(self):
            return self._header_

    class _ZserioElementFactory_surface_grids:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface_grid.BdamSurfaceGrid:
            del zserio_index
            return nds.display.types.bdam_surface_grid.BdamSurfaceGrid.from_reader(zserio_reader, self._owner._header_)

        @staticmethod
        def create_packing_context() -> nds.display.types.bdam_surface_grid.BdamSurfaceGrid.ZserioPackingContext:
            return nds.display.types.bdam_surface_grid.BdamSurfaceGrid.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.bdam_surface_grid.BdamSurfaceGrid.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface_grid.BdamSurfaceGrid:
            del zserio_index
            return nds.display.types.bdam_surface_grid.BdamSurfaceGrid.from_reader_packed(zserio_context, zserio_reader, self._owner._header_)
