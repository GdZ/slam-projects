# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.reference.types.texture_reference
import nds.display.types.color_id
import nds.display.types.material_content

class Material:
    def __init__(
            self,
            content_: typing.Union[nds.display.types.material_content.MaterialContent, None] = None,
            ambient_: typing.Optional[nds.display.types.color_id.ColorId] = None,
            diffuse_: typing.Optional[nds.display.types.color_id.ColorId] = None,
            specular_: typing.Optional[nds.display.types.color_id.ColorId] = None,
            shininess_: typing.Optional[int] = None,
            texture_: typing.Optional[nds.display.reference.types.texture_reference.TextureReference] = None) -> None:
        self._content_ = content_
        self._ambient_ = ambient_
        self._diffuse_ = diffuse_
        self._specular_ = specular_
        self._shininess_ = shininess_
        self._texture_ = texture_

    @classmethod
    def from_reader(
            cls: typing.Type['Material'],
            zserio_reader: zserio.BitStreamReader) -> 'Material':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Material'],
            zserio_context: Material.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Material':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Material):
            return ((self._content_ == other._content_) and
                    (not other.is_ambient_used() if not self.is_ambient_used() else (self._ambient_ == other._ambient_)) and
                    (not other.is_diffuse_used() if not self.is_diffuse_used() else (self._diffuse_ == other._diffuse_)) and
                    (not other.is_specular_used() if not self.is_specular_used() else (self._specular_ == other._specular_)) and
                    (not other.is_shininess_used() if not self.is_shininess_used() else (self._shininess_ == other._shininess_)) and
                    (not other.is_texture_used() if not self.is_texture_used() else (self._texture_ == other._texture_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_ambient_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._ambient_)
        if self.is_diffuse_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._diffuse_)
        if self.is_specular_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._specular_)
        if self.is_shininess_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._shininess_)
        if self.is_texture_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_)

        return result

    @property
    def content(self) -> typing.Union[nds.display.types.material_content.MaterialContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.display.types.material_content.MaterialContent, None]) -> None:
        self._content_ = content_

    @property
    def ambient(self) -> typing.Optional[nds.display.types.color_id.ColorId]:
        return self._ambient_

    @ambient.setter
    def ambient(self, ambient_: typing.Optional[nds.display.types.color_id.ColorId]) -> None:
        self._ambient_ = ambient_

    def is_ambient_used(self) -> bool:
        return self._content_.has_ambient_and_diffuse_color == True

    def is_ambient_set(self) -> bool:
        return not self._ambient_ is None

    def reset_ambient(self) -> None:
        self._ambient_ = None

    @property
    def diffuse(self) -> typing.Optional[nds.display.types.color_id.ColorId]:
        return self._diffuse_

    @diffuse.setter
    def diffuse(self, diffuse_: typing.Optional[nds.display.types.color_id.ColorId]) -> None:
        self._diffuse_ = diffuse_

    def is_diffuse_used(self) -> bool:
        return self._content_.has_ambient_and_diffuse_color == True

    def is_diffuse_set(self) -> bool:
        return not self._diffuse_ is None

    def reset_diffuse(self) -> None:
        self._diffuse_ = None

    @property
    def specular(self) -> typing.Optional[nds.display.types.color_id.ColorId]:
        return self._specular_

    @specular.setter
    def specular(self, specular_: typing.Optional[nds.display.types.color_id.ColorId]) -> None:
        self._specular_ = specular_

    def is_specular_used(self) -> bool:
        return self._content_.has_specular_and_shininess_color == True

    def is_specular_set(self) -> bool:
        return not self._specular_ is None

    def reset_specular(self) -> None:
        self._specular_ = None

    @property
    def shininess(self) -> typing.Optional[int]:
        return self._shininess_

    @shininess.setter
    def shininess(self, shininess_: typing.Optional[int]) -> None:
        self._shininess_ = shininess_

    def is_shininess_used(self) -> bool:
        return self._content_.has_specular_and_shininess_color == True

    def is_shininess_set(self) -> bool:
        return not self._shininess_ is None

    def reset_shininess(self) -> None:
        self._shininess_ = None

    @property
    def texture(self) -> typing.Optional[nds.display.reference.types.texture_reference.TextureReference]:
        return self._texture_

    @texture.setter
    def texture(self, texture_: typing.Optional[nds.display.reference.types.texture_reference.TextureReference]) -> None:
        self._texture_ = texture_

    def is_texture_used(self) -> bool:
        return self._content_.uses_textures == True

    def is_texture_set(self) -> bool:
        return not self._texture_ is None

    def reset_texture(self) -> None:
        self._texture_ = None

    def init_packing_context(self, zserio_context: Material.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_ambient_used():
            zserio_context.ambient.init(zserio.array.VarUInt16ArrayTraits(), self._ambient_)
        if self.is_diffuse_used():
            zserio_context.diffuse.init(zserio.array.VarUInt16ArrayTraits(), self._diffuse_)
        if self.is_specular_used():
            zserio_context.specular.init(zserio.array.VarUInt16ArrayTraits(), self._specular_)
        if self.is_shininess_used():
            zserio_context.shininess.init(zserio.array.BitFieldArrayTraits(8), self._shininess_)
        if self.is_texture_used():
            self._texture_.init_packing_context(zserio_context.texture)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_ambient_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._ambient_)
        if self.is_diffuse_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._diffuse_)
        if self.is_specular_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._specular_)
        if self.is_shininess_used():
            end_bitposition += 8
        if self.is_texture_used():
            end_bitposition += self._texture_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Material.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_ambient_used():
            end_bitposition += zserio_context.ambient.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._ambient_)
        if self.is_diffuse_used():
            end_bitposition += zserio_context.diffuse.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._diffuse_)
        if self.is_specular_used():
            end_bitposition += zserio_context.specular.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._specular_)
        if self.is_shininess_used():
            end_bitposition += zserio_context.shininess.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._shininess_)
        if self.is_texture_used():
            end_bitposition += self._texture_.bitsizeof_packed(zserio_context.texture, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_ambient_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._ambient_)
        if self.is_diffuse_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._diffuse_)
        if self.is_specular_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._specular_)
        if self.is_shininess_used():
            end_bitposition += 8
        if self.is_texture_used():
            end_bitposition = self._texture_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Material.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_ambient_used():
            end_bitposition += zserio_context.ambient.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._ambient_)
        if self.is_diffuse_used():
            end_bitposition += zserio_context.diffuse.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._diffuse_)
        if self.is_specular_used():
            end_bitposition += zserio_context.specular.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._specular_)
        if self.is_shininess_used():
            end_bitposition += zserio_context.shininess.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._shininess_)
        if self.is_texture_used():
            end_bitposition = self._texture_.initialize_offsets_packed(zserio_context.texture, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.types.material_content.MaterialContent.from_reader(zserio_reader)
        if self.is_ambient_used():
            self._ambient_ = zserio_reader.read_varuint16()
        else:
            self._ambient_ = None
        if self.is_diffuse_used():
            self._diffuse_ = zserio_reader.read_varuint16()
        else:
            self._diffuse_ = None
        if self.is_specular_used():
            self._specular_ = zserio_reader.read_varuint16()
        else:
            self._specular_ = None
        if self.is_shininess_used():
            self._shininess_ = zserio_reader.read_bits(8)
        else:
            self._shininess_ = None
        if self.is_texture_used():
            self._texture_ = nds.display.reference.types.texture_reference.TextureReference.from_reader(zserio_reader)
        else:
            self._texture_ = None

    def read_packed(self, zserio_context: Material.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.display.types.material_content.MaterialContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_ambient_used():
            self._ambient_ = zserio_context.ambient.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._ambient_ = None

        if self.is_diffuse_used():
            self._diffuse_ = zserio_context.diffuse.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._diffuse_ = None

        if self.is_specular_used():
            self._specular_ = zserio_context.specular.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._specular_ = None

        if self.is_shininess_used():
            self._shininess_ = zserio_context.shininess.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._shininess_ = None

        if self.is_texture_used():
            self._texture_ = nds.display.reference.types.texture_reference.TextureReference.from_reader_packed(zserio_context.texture, zserio_reader)
        else:
            self._texture_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_ambient_used():
            zserio_writer.write_varuint16(self._ambient_)
        if self.is_diffuse_used():
            zserio_writer.write_varuint16(self._diffuse_)
        if self.is_specular_used():
            zserio_writer.write_varuint16(self._specular_)
        if self.is_shininess_used():
            zserio_writer.write_bits(self._shininess_, 8)
        if self.is_texture_used():
            self._texture_.write(zserio_writer)

    def write_packed(self, zserio_context: Material.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_ambient_used():
            zserio_context.ambient.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._ambient_)

        if self.is_diffuse_used():
            zserio_context.diffuse.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._diffuse_)

        if self.is_specular_used():
            zserio_context.specular.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._specular_)

        if self.is_shininess_used():
            zserio_context.shininess.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._shininess_)

        if self.is_texture_used():
            self._texture_.write_packed(zserio_context.texture, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = nds.display.types.material_content.MaterialContent.ZserioPackingContext()
            self._ambient_ = zserio.array.DeltaContext()
            self._diffuse_ = zserio.array.DeltaContext()
            self._specular_ = zserio.array.DeltaContext()
            self._shininess_ = zserio.array.DeltaContext()
            self._texture_ = nds.display.reference.types.texture_reference.TextureReference.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def ambient(self):
            return self._ambient_

        @property
        def diffuse(self):
            return self._diffuse_

        @property
        def specular(self):
            return self._specular_

        @property
        def shininess(self):
            return self._shininess_

        @property
        def texture(self):
            return self._texture_
