# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.generic_icon_set_map_element
import nds.system.types.module_name
import nds.system.types.module_version

class GenericIconSetMap:
    def __init__(
            self,
            module_name_: nds.system.types.module_name.ModuleName = nds.system.types.module_name.ModuleName(),
            module_version_: nds.system.types.module_version.ModuleVersion = nds.system.types.module_version.ModuleVersion(),
            num_elements_: int = int(),
            elements_: typing.List[nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement] = None) -> None:
        self._module_name_ = module_name_
        self._module_version_ = module_version_
        self._num_elements_ = num_elements_
        self._elements_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), elements_)

    @classmethod
    def from_reader(
            cls: typing.Type['GenericIconSetMap'],
            zserio_reader: zserio.BitStreamReader) -> 'GenericIconSetMap':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GenericIconSetMap'],
            zserio_context: GenericIconSetMap.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GenericIconSetMap':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GenericIconSetMap):
            return ((self._module_name_ == other._module_name_) and
                    (self._module_version_ == other._module_version_) and
                    (self._num_elements_ == other._num_elements_) and
                    (self._elements_ == other._elements_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._module_name_)
        result = zserio.hashcode.calc_hashcode_string(result, self._module_version_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_elements_)
        result = zserio.hashcode.calc_hashcode_object(result, self._elements_)

        return result

    @property
    def module_name(self) -> nds.system.types.module_name.ModuleName:
        return self._module_name_

    @module_name.setter
    def module_name(self, module_name_: nds.system.types.module_name.ModuleName) -> None:
        self._module_name_ = module_name_

    @property
    def module_version(self) -> nds.system.types.module_version.ModuleVersion:
        return self._module_version_

    @module_version.setter
    def module_version(self, module_version_: nds.system.types.module_version.ModuleVersion) -> None:
        self._module_version_ = module_version_

    @property
    def num_elements(self) -> int:
        return self._num_elements_

    @num_elements.setter
    def num_elements(self, num_elements_: int) -> None:
        self._num_elements_ = num_elements_

    @property
    def elements(self) -> typing.List[nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement]:
        return self._elements_.raw_array

    @elements.setter
    def elements(self, elements_: typing.List[nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement]) -> None:
        self._elements_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), elements_)

    def init_packing_context(self, zserio_context: GenericIconSetMap.ZserioPackingContext) -> None:
        zserio_context.num_elements.init(zserio.array.VarSizeArrayTraits(), self._num_elements_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_elements_)
        end_bitposition += self._elements_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GenericIconSetMap.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_version_)
        end_bitposition += zserio_context.num_elements.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_elements_)
        end_bitposition += self._elements_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_version_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_elements_)
        end_bitposition = self._elements_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GenericIconSetMap.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_name_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._module_version_)
        end_bitposition += zserio_context.num_elements.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_elements_)
        end_bitposition = self._elements_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_name_ = zserio_reader.read_string()
        self._module_version_ = zserio_reader.read_string()
        self._num_elements_ = zserio_reader.read_varsize()
        self._elements_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), zserio_reader, self._num_elements_)

    def read_packed(self, zserio_context: GenericIconSetMap.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._module_name_ = zserio_reader.read_string()

        self._module_version_ = zserio_reader.read_string()

        self._num_elements_ = zserio_context.num_elements.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._elements_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), zserio_reader, self._num_elements_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._module_name_)

        zserio_writer.write_string(self._module_version_)

        zserio_writer.write_varsize(self._num_elements_)

        # check array length
        if len(self._elements_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field GenericIconSetMap.elements: "
                                                f"{len(self._elements_)} != {self._num_elements_}!")
        self._elements_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: GenericIconSetMap.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._module_name_)

        zserio_writer.write_string(self._module_version_)

        zserio_context.num_elements.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_elements_)

        # check array length
        if len(self._elements_) != (self._num_elements_):
            raise zserio.PythonRuntimeException("Wrong array length for field GenericIconSetMap.elements: "
                                                f"{len(self._elements_)} != {self._num_elements_}!")
        self._elements_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_elements_ = zserio.array.DeltaContext()

        @property
        def num_elements(self):
            return self._num_elements_

    class _ZserioElementFactory_elements:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement:
            del zserio_index
            return nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement.ZserioPackingContext:
            return nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement:
            del zserio_index
            return nds.display.types.generic_icon_set_map_element.GenericIconSetMapElement.from_reader_packed(zserio_context, zserio_reader)
