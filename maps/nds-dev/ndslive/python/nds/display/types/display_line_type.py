# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class DisplayLineType(zserio.Enum):
    DISPLAY_LINE = 0
    LINE_ROAD = 1
    LINE_BLOCK_DETAIL = 2
    LINE_BUILDING_DETAIL = 3
    LINE_PUBLIC_TRANSPORT = 4
    LINE_RAILWAY = 5
    LINE_RAILWAY_LONG_DISTANCE = 6
    LINE_RAILWAY_REGIONAL = 7
    LINE_RAILWAY_LOCAL = 8
    LINE_SUBWAY = 9
    LINE_TRAM = 10
    LINE_MONORAIL = 11
    LINE_BUS = 12
    LINE_WATER = 13
    LINE_CREEK = 14
    LINE_DRAIN = 15
    LINE_RIVER = 16
    LINE_WADI = 17
    LINE_CANAL = 18
    LINE_BORDER = 19
    LINE_BORDER_COUNTRY = 20
    LINE_BORDER_SUB_COUNTRY_SET = 21
    LINE_BORDER_SUB_COUNTRY = 22
    LINE_BORDER_COUNTY = 23
    LINE_BORDER_MUNICIPALITY = 24
    LINE_BORDER_MUNICIPALITY_SUBDIVISION = 25
    LINE_BORDER_NEIGHBORHOOD = 26
    LINE_BORDER_CITY_BLOCK = 27
    LINE_BORDER_NON_ADMIN = 28
    LINE_BORDER_PHONE = 29
    LINE_BORDER_POSTAL = 30
    LINE_BORDER_POLICE = 31
    LINE_BORDER_SCHOOL = 32
    LINE_TIME_ZONE = 33
    LINE_BORDER_DISPUTED = 34
    LINE_BORDER_DISPUTED_COUNTRY = 35
    LINE_BORDER_DISPUTED_SUB_COUNTRY = 36
    LINE_BORDER_TREATY_LINE = 37
    LINE_BORDER_TREATY_LINE_COUNTRY = 38
    LINE_BORDER_TREATY_LINE_SUB_COUNTRY = 39
    LINE_SEA_BORDER_COUNTRY = 40
    LINE_SEA_BORDER_SUB_COUNTRY = 41
    LINE_BORDER_SPECIAL_ADMIN_REGION = 42
    LINE_SEA_BORDER_SUB_COUNTRY_SET = 43

    @classmethod
    def from_name(cls: typing.Type['DisplayLineType'], item_name: str) -> 'DisplayLineType':
        if item_name == 'DISPLAY_LINE':
            item = DisplayLineType.DISPLAY_LINE
        elif item_name == 'LINE_ROAD':
            item = DisplayLineType.LINE_ROAD
        elif item_name == 'LINE_BLOCK_DETAIL':
            item = DisplayLineType.LINE_BLOCK_DETAIL
        elif item_name == 'LINE_BUILDING_DETAIL':
            item = DisplayLineType.LINE_BUILDING_DETAIL
        elif item_name == 'LINE_PUBLIC_TRANSPORT':
            item = DisplayLineType.LINE_PUBLIC_TRANSPORT
        elif item_name == 'LINE_RAILWAY':
            item = DisplayLineType.LINE_RAILWAY
        elif item_name == 'LINE_RAILWAY_LONG_DISTANCE':
            item = DisplayLineType.LINE_RAILWAY_LONG_DISTANCE
        elif item_name == 'LINE_RAILWAY_REGIONAL':
            item = DisplayLineType.LINE_RAILWAY_REGIONAL
        elif item_name == 'LINE_RAILWAY_LOCAL':
            item = DisplayLineType.LINE_RAILWAY_LOCAL
        elif item_name == 'LINE_SUBWAY':
            item = DisplayLineType.LINE_SUBWAY
        elif item_name == 'LINE_TRAM':
            item = DisplayLineType.LINE_TRAM
        elif item_name == 'LINE_MONORAIL':
            item = DisplayLineType.LINE_MONORAIL
        elif item_name == 'LINE_BUS':
            item = DisplayLineType.LINE_BUS
        elif item_name == 'LINE_WATER':
            item = DisplayLineType.LINE_WATER
        elif item_name == 'LINE_CREEK':
            item = DisplayLineType.LINE_CREEK
        elif item_name == 'LINE_DRAIN':
            item = DisplayLineType.LINE_DRAIN
        elif item_name == 'LINE_RIVER':
            item = DisplayLineType.LINE_RIVER
        elif item_name == 'LINE_WADI':
            item = DisplayLineType.LINE_WADI
        elif item_name == 'LINE_CANAL':
            item = DisplayLineType.LINE_CANAL
        elif item_name == 'LINE_BORDER':
            item = DisplayLineType.LINE_BORDER
        elif item_name == 'LINE_BORDER_COUNTRY':
            item = DisplayLineType.LINE_BORDER_COUNTRY
        elif item_name == 'LINE_BORDER_SUB_COUNTRY_SET':
            item = DisplayLineType.LINE_BORDER_SUB_COUNTRY_SET
        elif item_name == 'LINE_BORDER_SUB_COUNTRY':
            item = DisplayLineType.LINE_BORDER_SUB_COUNTRY
        elif item_name == 'LINE_BORDER_COUNTY':
            item = DisplayLineType.LINE_BORDER_COUNTY
        elif item_name == 'LINE_BORDER_MUNICIPALITY':
            item = DisplayLineType.LINE_BORDER_MUNICIPALITY
        elif item_name == 'LINE_BORDER_MUNICIPALITY_SUBDIVISION':
            item = DisplayLineType.LINE_BORDER_MUNICIPALITY_SUBDIVISION
        elif item_name == 'LINE_BORDER_NEIGHBORHOOD':
            item = DisplayLineType.LINE_BORDER_NEIGHBORHOOD
        elif item_name == 'LINE_BORDER_CITY_BLOCK':
            item = DisplayLineType.LINE_BORDER_CITY_BLOCK
        elif item_name == 'LINE_BORDER_NON_ADMIN':
            item = DisplayLineType.LINE_BORDER_NON_ADMIN
        elif item_name == 'LINE_BORDER_PHONE':
            item = DisplayLineType.LINE_BORDER_PHONE
        elif item_name == 'LINE_BORDER_POSTAL':
            item = DisplayLineType.LINE_BORDER_POSTAL
        elif item_name == 'LINE_BORDER_POLICE':
            item = DisplayLineType.LINE_BORDER_POLICE
        elif item_name == 'LINE_BORDER_SCHOOL':
            item = DisplayLineType.LINE_BORDER_SCHOOL
        elif item_name == 'LINE_TIME_ZONE':
            item = DisplayLineType.LINE_TIME_ZONE
        elif item_name == 'LINE_BORDER_DISPUTED':
            item = DisplayLineType.LINE_BORDER_DISPUTED
        elif item_name == 'LINE_BORDER_DISPUTED_COUNTRY':
            item = DisplayLineType.LINE_BORDER_DISPUTED_COUNTRY
        elif item_name == 'LINE_BORDER_DISPUTED_SUB_COUNTRY':
            item = DisplayLineType.LINE_BORDER_DISPUTED_SUB_COUNTRY
        elif item_name == 'LINE_BORDER_TREATY_LINE':
            item = DisplayLineType.LINE_BORDER_TREATY_LINE
        elif item_name == 'LINE_BORDER_TREATY_LINE_COUNTRY':
            item = DisplayLineType.LINE_BORDER_TREATY_LINE_COUNTRY
        elif item_name == 'LINE_BORDER_TREATY_LINE_SUB_COUNTRY':
            item = DisplayLineType.LINE_BORDER_TREATY_LINE_SUB_COUNTRY
        elif item_name == 'LINE_SEA_BORDER_COUNTRY':
            item = DisplayLineType.LINE_SEA_BORDER_COUNTRY
        elif item_name == 'LINE_SEA_BORDER_SUB_COUNTRY':
            item = DisplayLineType.LINE_SEA_BORDER_SUB_COUNTRY
        elif item_name == 'LINE_BORDER_SPECIAL_ADMIN_REGION':
            item = DisplayLineType.LINE_BORDER_SPECIAL_ADMIN_REGION
        elif item_name == 'LINE_SEA_BORDER_SUB_COUNTRY_SET':
            item = DisplayLineType.LINE_SEA_BORDER_SUB_COUNTRY_SET
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'DisplayLineType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['DisplayLineType'], reader: zserio.BitStreamReader) -> 'DisplayLineType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['DisplayLineType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'DisplayLineType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
