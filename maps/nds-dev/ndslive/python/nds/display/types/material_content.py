# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.texture_coords_usage_type

class MaterialContent:
    def __init__(
            self,
            has_ambient_and_diffuse_color_: bool = bool(),
            has_specular_and_shininess_color_: bool = bool(),
            is_transparent_: bool = bool(),
            is_light_emitting_: bool = bool(),
            uses_textures_: bool = bool(),
            texture_coord_usage_type_: typing.Optional[nds.display.types.texture_coords_usage_type.TextureCoordsUsageType] = None) -> None:
        self._has_ambient_and_diffuse_color_ = has_ambient_and_diffuse_color_
        self._has_specular_and_shininess_color_ = has_specular_and_shininess_color_
        self._is_transparent_ = is_transparent_
        self._is_light_emitting_ = is_light_emitting_
        self._uses_textures_ = uses_textures_
        self._texture_coord_usage_type_ = texture_coord_usage_type_

    @classmethod
    def from_reader(
            cls: typing.Type['MaterialContent'],
            zserio_reader: zserio.BitStreamReader) -> 'MaterialContent':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MaterialContent'],
            zserio_context: MaterialContent.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MaterialContent':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MaterialContent):
            return ((self._has_ambient_and_diffuse_color_ == other._has_ambient_and_diffuse_color_) and
                    (self._has_specular_and_shininess_color_ == other._has_specular_and_shininess_color_) and
                    (self._is_transparent_ == other._is_transparent_) and
                    (self._is_light_emitting_ == other._is_light_emitting_) and
                    (self._uses_textures_ == other._uses_textures_) and
                    (not other.is_texture_coord_usage_type_used() if not self.is_texture_coord_usage_type_used() else (self._texture_coord_usage_type_ == other._texture_coord_usage_type_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_ambient_and_diffuse_color_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_specular_and_shininess_color_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_transparent_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_light_emitting_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._uses_textures_)
        if self.is_texture_coord_usage_type_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coord_usage_type_)

        return result

    @property
    def has_ambient_and_diffuse_color(self) -> bool:
        return self._has_ambient_and_diffuse_color_

    @has_ambient_and_diffuse_color.setter
    def has_ambient_and_diffuse_color(self, has_ambient_and_diffuse_color_: bool) -> None:
        self._has_ambient_and_diffuse_color_ = has_ambient_and_diffuse_color_

    @property
    def has_specular_and_shininess_color(self) -> bool:
        return self._has_specular_and_shininess_color_

    @has_specular_and_shininess_color.setter
    def has_specular_and_shininess_color(self, has_specular_and_shininess_color_: bool) -> None:
        self._has_specular_and_shininess_color_ = has_specular_and_shininess_color_

    @property
    def is_transparent(self) -> bool:
        return self._is_transparent_

    @is_transparent.setter
    def is_transparent(self, is_transparent_: bool) -> None:
        self._is_transparent_ = is_transparent_

    @property
    def is_light_emitting(self) -> bool:
        return self._is_light_emitting_

    @is_light_emitting.setter
    def is_light_emitting(self, is_light_emitting_: bool) -> None:
        self._is_light_emitting_ = is_light_emitting_

    @property
    def uses_textures(self) -> bool:
        return self._uses_textures_

    @uses_textures.setter
    def uses_textures(self, uses_textures_: bool) -> None:
        self._uses_textures_ = uses_textures_

    @property
    def texture_coord_usage_type(self) -> typing.Optional[nds.display.types.texture_coords_usage_type.TextureCoordsUsageType]:
        return self._texture_coord_usage_type_

    @texture_coord_usage_type.setter
    def texture_coord_usage_type(self, texture_coord_usage_type_: typing.Optional[nds.display.types.texture_coords_usage_type.TextureCoordsUsageType]) -> None:
        self._texture_coord_usage_type_ = texture_coord_usage_type_

    def is_texture_coord_usage_type_used(self) -> bool:
        return self._uses_textures_

    def is_texture_coord_usage_type_set(self) -> bool:
        return not self._texture_coord_usage_type_ is None

    def reset_texture_coord_usage_type(self) -> None:
        self._texture_coord_usage_type_ = None

    def init_packing_context(self, zserio_context: MaterialContent.ZserioPackingContext) -> None:
        if self.is_texture_coord_usage_type_used():
            self._texture_coord_usage_type_.init_packing_context(zserio_context.texture_coord_usage_type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_texture_coord_usage_type_used():
            end_bitposition += self._texture_coord_usage_type_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MaterialContent.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_texture_coord_usage_type_used():
            end_bitposition += self._texture_coord_usage_type_.bitsizeof_packed(zserio_context.texture_coord_usage_type, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_texture_coord_usage_type_used():
            end_bitposition = self._texture_coord_usage_type_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MaterialContent.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        if self.is_texture_coord_usage_type_used():
            end_bitposition = self._texture_coord_usage_type_.initialize_offsets_packed(zserio_context.texture_coord_usage_type, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_ambient_and_diffuse_color_ = zserio_reader.read_bool()
        self._has_specular_and_shininess_color_ = zserio_reader.read_bool()
        self._is_transparent_ = zserio_reader.read_bool()
        self._is_light_emitting_ = zserio_reader.read_bool()
        self._uses_textures_ = zserio_reader.read_bool()
        if self.is_texture_coord_usage_type_used():
            self._texture_coord_usage_type_ = nds.display.types.texture_coords_usage_type.TextureCoordsUsageType.from_reader(zserio_reader)
        else:
            self._texture_coord_usage_type_ = None

    def read_packed(self, zserio_context: MaterialContent.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_ambient_and_diffuse_color_ = zserio_reader.read_bool()

        self._has_specular_and_shininess_color_ = zserio_reader.read_bool()

        self._is_transparent_ = zserio_reader.read_bool()

        self._is_light_emitting_ = zserio_reader.read_bool()

        self._uses_textures_ = zserio_reader.read_bool()

        if self.is_texture_coord_usage_type_used():
            self._texture_coord_usage_type_ = nds.display.types.texture_coords_usage_type.TextureCoordsUsageType.from_reader_packed(zserio_context.texture_coord_usage_type, zserio_reader)
        else:
            self._texture_coord_usage_type_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_ambient_and_diffuse_color_)
        zserio_writer.write_bool(self._has_specular_and_shininess_color_)
        zserio_writer.write_bool(self._is_transparent_)
        zserio_writer.write_bool(self._is_light_emitting_)
        zserio_writer.write_bool(self._uses_textures_)
        if self.is_texture_coord_usage_type_used():
            self._texture_coord_usage_type_.write(zserio_writer)

    def write_packed(self, zserio_context: MaterialContent.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_ambient_and_diffuse_color_)

        zserio_writer.write_bool(self._has_specular_and_shininess_color_)

        zserio_writer.write_bool(self._is_transparent_)

        zserio_writer.write_bool(self._is_light_emitting_)

        zserio_writer.write_bool(self._uses_textures_)

        if self.is_texture_coord_usage_type_used():
            self._texture_coord_usage_type_.write_packed(zserio_context.texture_coord_usage_type, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._texture_coord_usage_type_ = zserio.array.DeltaContext()

        @property
        def texture_coord_usage_type(self):
            return self._texture_coord_usage_type_
