# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.icons.icon_set_id
import nds.system.types.module_extern

class GenericIconSetMapElement:
    def __init__(
            self,
            id_: nds.core.icons.icon_set_id.IconSetId = nds.core.icons.icon_set_id.IconSetId(),
            descriptor_: nds.system.types.module_extern.ModuleExtern = nds.system.types.module_extern.ModuleExtern(),
            target_enum_value_: typing.Optional[int] = None) -> None:
        self._id_ = id_
        self._descriptor_ = descriptor_
        self._target_enum_value_ = target_enum_value_

    @classmethod
    def from_reader(
            cls: typing.Type['GenericIconSetMapElement'],
            zserio_reader: zserio.BitStreamReader) -> 'GenericIconSetMapElement':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['GenericIconSetMapElement'],
            zserio_context: GenericIconSetMapElement.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'GenericIconSetMapElement':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, GenericIconSetMapElement):
            return ((self._id_ == other._id_) and
                    (self._descriptor_ == other._descriptor_) and
                    (not other.is_target_enum_value_used() if not self.is_target_enum_value_used() else (self._target_enum_value_ == other._target_enum_value_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._id_)
        result = zserio.hashcode.calc_hashcode_string(result, self._descriptor_)
        if self.is_target_enum_value_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._target_enum_value_)

        return result

    @property
    def id(self) -> nds.core.icons.icon_set_id.IconSetId:
        return self._id_

    @id.setter
    def id(self, id_: nds.core.icons.icon_set_id.IconSetId) -> None:
        self._id_ = id_

    @property
    def descriptor(self) -> nds.system.types.module_extern.ModuleExtern:
        return self._descriptor_

    @descriptor.setter
    def descriptor(self, descriptor_: nds.system.types.module_extern.ModuleExtern) -> None:
        self._descriptor_ = descriptor_

    @property
    def target_enum_value(self) -> typing.Optional[int]:
        return self._target_enum_value_

    @target_enum_value.setter
    def target_enum_value(self, target_enum_value_: typing.Optional[int]) -> None:
        self._target_enum_value_ = target_enum_value_

    def is_target_enum_value_used(self) -> bool:
        return self.is_target_enum_value_set()

    def is_target_enum_value_set(self) -> bool:
        return not self._target_enum_value_ is None

    def reset_target_enum_value(self) -> None:
        self._target_enum_value_ = None

    def init_packing_context(self, zserio_context: GenericIconSetMapElement.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUIntArrayTraits(), self._id_)
        if self.is_target_enum_value_used():
            zserio_context.target_enum_value.init(zserio.array.VarIntArrayTraits(), self._target_enum_value_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._descriptor_)
        end_bitposition += 1
        if self.is_target_enum_value_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint(self._target_enum_value_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: GenericIconSetMapElement.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._descriptor_)
        end_bitposition += 1
        if self.is_target_enum_value_used():
            end_bitposition += zserio_context.target_enum_value.bitsizeof(zserio.array.VarIntArrayTraits(), self._target_enum_value_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint(self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._descriptor_)
        end_bitposition += 1
        if self.is_target_enum_value_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint(self._target_enum_value_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: GenericIconSetMapElement.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUIntArrayTraits(), self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._descriptor_)
        end_bitposition += 1
        if self.is_target_enum_value_used():
            end_bitposition += zserio_context.target_enum_value.bitsizeof(zserio.array.VarIntArrayTraits(), self._target_enum_value_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint()
        self._descriptor_ = zserio_reader.read_string()
        if zserio_reader.read_bool():
            self._target_enum_value_ = zserio_reader.read_varint()
        else:
            self._target_enum_value_ = None

    def read_packed(self, zserio_context: GenericIconSetMapElement.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUIntArrayTraits(), zserio_reader)

        self._descriptor_ = zserio_reader.read_string()

        if zserio_reader.read_bool():
            self._target_enum_value_ = zserio_context.target_enum_value.read(zserio.array.VarIntArrayTraits(), zserio_reader)
        else:
            self._target_enum_value_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint(self._id_)
        zserio_writer.write_string(self._descriptor_)
        if self.is_target_enum_value_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varint(self._target_enum_value_)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: GenericIconSetMapElement.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUIntArrayTraits(), zserio_writer, self._id_)

        zserio_writer.write_string(self._descriptor_)

        if self.is_target_enum_value_used():
            zserio_writer.write_bool(True)
            zserio_context.target_enum_value.write(zserio.array.VarIntArrayTraits(), zserio_writer, self._target_enum_value_)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()
            self._target_enum_value_ = zserio.array.DeltaContext()

        @property
        def id(self):
            return self._id_

        @property
        def target_enum_value(self):
            return self._target_enum_value_
