# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.used_color_modes

class Mesh3DRenderLayerHeader:
    def __init__(
            self,
            color_modes_: typing.Union[nds.display.types.used_color_modes.UsedColorModes, None] = None,
            num_color_ids_: typing.Optional[int] = None,
            has_normals_: bool = bool(),
            num_normals_: typing.Optional[int] = None,
            has_texture_coords_: bool = bool(),
            num_texture_coords_: typing.Optional[int] = None,
            has_texture_coords_additional_: bool = bool(),
            num_texture_coords_additional_: typing.Optional[int] = None) -> None:
        self._color_modes_ = color_modes_
        self._num_color_ids_ = num_color_ids_
        self._has_normals_ = has_normals_
        self._num_normals_ = num_normals_
        self._has_texture_coords_ = has_texture_coords_
        self._num_texture_coords_ = num_texture_coords_
        self._has_texture_coords_additional_ = has_texture_coords_additional_
        self._num_texture_coords_additional_ = num_texture_coords_additional_

    @classmethod
    def from_reader(
            cls: typing.Type['Mesh3DRenderLayerHeader'],
            zserio_reader: zserio.BitStreamReader) -> 'Mesh3DRenderLayerHeader':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Mesh3DRenderLayerHeader'],
            zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Mesh3DRenderLayerHeader':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Mesh3DRenderLayerHeader):
            return ((self._color_modes_ == other._color_modes_) and
                    (not other.is_num_color_ids_used() if not self.is_num_color_ids_used() else (self._num_color_ids_ == other._num_color_ids_)) and
                    (self._has_normals_ == other._has_normals_) and
                    (not other.is_num_normals_used() if not self.is_num_normals_used() else (self._num_normals_ == other._num_normals_)) and
                    (self._has_texture_coords_ == other._has_texture_coords_) and
                    (not other.is_num_texture_coords_used() if not self.is_num_texture_coords_used() else (self._num_texture_coords_ == other._num_texture_coords_)) and
                    (self._has_texture_coords_additional_ == other._has_texture_coords_additional_) and
                    (not other.is_num_texture_coords_additional_used() if not self.is_num_texture_coords_additional_used() else (self._num_texture_coords_additional_ == other._num_texture_coords_additional_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._color_modes_)
        if self.is_num_color_ids_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._num_color_ids_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_normals_)
        if self.is_num_normals_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._num_normals_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_coords_)
        if self.is_num_texture_coords_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._num_texture_coords_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_coords_additional_)
        if self.is_num_texture_coords_additional_used():
            result = zserio.hashcode.calc_hashcode_int64(result, self._num_texture_coords_additional_)

        return result

    @property
    def color_modes(self) -> typing.Union[nds.display.types.used_color_modes.UsedColorModes, None]:
        return self._color_modes_

    @color_modes.setter
    def color_modes(self, color_modes_: typing.Union[nds.display.types.used_color_modes.UsedColorModes, None]) -> None:
        self._color_modes_ = color_modes_

    @property
    def num_color_ids(self) -> typing.Optional[int]:
        return self._num_color_ids_

    @num_color_ids.setter
    def num_color_ids(self, num_color_ids_: typing.Optional[int]) -> None:
        self._num_color_ids_ = num_color_ids_

    def is_num_color_ids_used(self) -> bool:
        return (self.has_color_per_vertex() == True)

    def is_num_color_ids_set(self) -> bool:
        return not self._num_color_ids_ is None

    def reset_num_color_ids(self) -> None:
        self._num_color_ids_ = None

    @property
    def has_normals(self) -> bool:
        return self._has_normals_

    @has_normals.setter
    def has_normals(self, has_normals_: bool) -> None:
        self._has_normals_ = has_normals_

    @property
    def num_normals(self) -> typing.Optional[int]:
        return self._num_normals_

    @num_normals.setter
    def num_normals(self, num_normals_: typing.Optional[int]) -> None:
        self._num_normals_ = num_normals_

    def is_num_normals_used(self) -> bool:
        return self._has_normals_ == True

    def is_num_normals_set(self) -> bool:
        return not self._num_normals_ is None

    def reset_num_normals(self) -> None:
        self._num_normals_ = None

    @property
    def has_texture_coords(self) -> bool:
        return self._has_texture_coords_

    @has_texture_coords.setter
    def has_texture_coords(self, has_texture_coords_: bool) -> None:
        self._has_texture_coords_ = has_texture_coords_

    @property
    def num_texture_coords(self) -> typing.Optional[int]:
        return self._num_texture_coords_

    @num_texture_coords.setter
    def num_texture_coords(self, num_texture_coords_: typing.Optional[int]) -> None:
        self._num_texture_coords_ = num_texture_coords_

    def is_num_texture_coords_used(self) -> bool:
        return self._has_texture_coords_

    def is_num_texture_coords_set(self) -> bool:
        return not self._num_texture_coords_ is None

    def reset_num_texture_coords(self) -> None:
        self._num_texture_coords_ = None

    @property
    def has_texture_coords_additional(self) -> bool:
        return self._has_texture_coords_additional_

    @has_texture_coords_additional.setter
    def has_texture_coords_additional(self, has_texture_coords_additional_: bool) -> None:
        self._has_texture_coords_additional_ = has_texture_coords_additional_

    @property
    def num_texture_coords_additional(self) -> typing.Optional[int]:
        return self._num_texture_coords_additional_

    @num_texture_coords_additional.setter
    def num_texture_coords_additional(self, num_texture_coords_additional_: typing.Optional[int]) -> None:
        self._num_texture_coords_additional_ = num_texture_coords_additional_

    def is_num_texture_coords_additional_used(self) -> bool:
        return self._has_texture_coords_additional_

    def is_num_texture_coords_additional_set(self) -> bool:
        return not self._num_texture_coords_additional_ is None

    def reset_num_texture_coords_additional(self) -> None:
        self._num_texture_coords_additional_ = None

    def uses_colors(self) -> bool:
        return (self._color_modes_).value > 0

    def has_color_per_vertex(self) -> bool:
        return (self._color_modes_ & nds.display.types.used_color_modes.UsedColorModes.Values.COLOR_PER_VERTEX) == nds.display.types.used_color_modes.UsedColorModes.Values.COLOR_PER_VERTEX

    def num_of_color_ids(self) -> int:
        return (self._num_color_ids_) if ((self._color_modes_ & nds.display.types.used_color_modes.UsedColorModes.Values.COLOR_PER_VERTEX) == nds.display.types.used_color_modes.UsedColorModes.Values.COLOR_PER_VERTEX) else (0)

    def num_of_normals(self) -> int:
        return (self._num_normals_) if (self._has_normals_) else (0)

    def num_of_texture_coords(self) -> int:
        return (self._num_texture_coords_) if (self._has_texture_coords_) else (0)

    def num_of_texture_coords_additional(self) -> int:
        return (self._num_texture_coords_additional_) if (self._has_texture_coords_additional_) else (0)

    def init_packing_context(self, zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext) -> None:
        self._color_modes_.init_packing_context(zserio_context.color_modes)
        if self.is_num_color_ids_used():
            zserio_context.num_color_ids.init(zserio.array.BitFieldArrayTraits(16), self._num_color_ids_)
        if self.is_num_normals_used():
            zserio_context.num_normals.init(zserio.array.VarSizeArrayTraits(), self._num_normals_)
        if self.is_num_texture_coords_used():
            zserio_context.num_texture_coords.init(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_)
        if self.is_num_texture_coords_additional_used():
            zserio_context.num_texture_coords_additional.init(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_additional_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._color_modes_.bitsizeof(end_bitposition)
        if self.is_num_color_ids_used():
            end_bitposition += 16
        end_bitposition += 1
        if self.is_num_normals_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_normals_)
        end_bitposition += 1
        if self.is_num_texture_coords_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_texture_coords_)
        end_bitposition += 1
        if self.is_num_texture_coords_additional_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_texture_coords_additional_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._color_modes_.bitsizeof_packed(zserio_context.color_modes, end_bitposition)
        if self.is_num_color_ids_used():
            end_bitposition += zserio_context.num_color_ids.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._num_color_ids_)
        end_bitposition += 1
        if self.is_num_normals_used():
            end_bitposition += zserio_context.num_normals.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_normals_)
        end_bitposition += 1
        if self.is_num_texture_coords_used():
            end_bitposition += zserio_context.num_texture_coords.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_)
        end_bitposition += 1
        if self.is_num_texture_coords_additional_used():
            end_bitposition += zserio_context.num_texture_coords_additional.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_additional_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._color_modes_.initialize_offsets(end_bitposition)
        if self.is_num_color_ids_used():
            end_bitposition += 16
        end_bitposition += 1
        if self.is_num_normals_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_normals_)
        end_bitposition += 1
        if self.is_num_texture_coords_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_texture_coords_)
        end_bitposition += 1
        if self.is_num_texture_coords_additional_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_texture_coords_additional_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._color_modes_.initialize_offsets_packed(zserio_context.color_modes, end_bitposition)
        if self.is_num_color_ids_used():
            end_bitposition += zserio_context.num_color_ids.bitsizeof(zserio.array.BitFieldArrayTraits(16), self._num_color_ids_)
        end_bitposition += 1
        if self.is_num_normals_used():
            end_bitposition += zserio_context.num_normals.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_normals_)
        end_bitposition += 1
        if self.is_num_texture_coords_used():
            end_bitposition += zserio_context.num_texture_coords.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_)
        end_bitposition += 1
        if self.is_num_texture_coords_additional_used():
            end_bitposition += zserio_context.num_texture_coords_additional.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_texture_coords_additional_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_modes_ = nds.display.types.used_color_modes.UsedColorModes.from_reader(zserio_reader)

        if self.is_num_color_ids_used():
            self._num_color_ids_ = zserio_reader.read_bits(16)
        else:
            self._num_color_ids_ = None

        self._has_normals_ = zserio_reader.read_bool()

        if self.is_num_normals_used():
            self._num_normals_ = zserio_reader.read_varsize()
            # check constraint
            if not (self._num_normals_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numNormals!")
        else:
            self._num_normals_ = None

        self._has_texture_coords_ = zserio_reader.read_bool()

        if self.is_num_texture_coords_used():
            self._num_texture_coords_ = zserio_reader.read_varsize()
            # check constraint
            if not (self._num_texture_coords_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoords!")
        else:
            self._num_texture_coords_ = None

        self._has_texture_coords_additional_ = zserio_reader.read_bool()

        if self.is_num_texture_coords_additional_used():
            self._num_texture_coords_additional_ = zserio_reader.read_varsize()
            # check constraint
            if not (self._num_texture_coords_additional_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoordsAdditional!")
        else:
            self._num_texture_coords_additional_ = None

    def read_packed(self, zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_modes_ = nds.display.types.used_color_modes.UsedColorModes.from_reader_packed(zserio_context.color_modes, zserio_reader)

        if self.is_num_color_ids_used():
            self._num_color_ids_ = zserio_context.num_color_ids.read(zserio.array.BitFieldArrayTraits(16), zserio_reader)
        else:
            self._num_color_ids_ = None

        self._has_normals_ = zserio_reader.read_bool()

        if self.is_num_normals_used():
            self._num_normals_ = zserio_context.num_normals.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
            # check constraint
            if not (self._num_normals_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numNormals!")
        else:
            self._num_normals_ = None

        self._has_texture_coords_ = zserio_reader.read_bool()

        if self.is_num_texture_coords_used():
            self._num_texture_coords_ = zserio_context.num_texture_coords.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
            # check constraint
            if not (self._num_texture_coords_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoords!")
        else:
            self._num_texture_coords_ = None

        self._has_texture_coords_additional_ = zserio_reader.read_bool()

        if self.is_num_texture_coords_additional_used():
            self._num_texture_coords_additional_ = zserio_context.num_texture_coords_additional.read(zserio.array.VarSizeArrayTraits(), zserio_reader)
            # check constraint
            if not (self._num_texture_coords_additional_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoordsAdditional!")
        else:
            self._num_texture_coords_additional_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._color_modes_.write(zserio_writer)

        if self.is_num_color_ids_used():
            zserio_writer.write_bits(self._num_color_ids_, 16)

        zserio_writer.write_bool(self._has_normals_)

        if self.is_num_normals_used():
            # check constraint
            if not (self._num_normals_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numNormals!")
            zserio_writer.write_varsize(self._num_normals_)

        zserio_writer.write_bool(self._has_texture_coords_)

        if self.is_num_texture_coords_used():
            # check constraint
            if not (self._num_texture_coords_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoords!")
            zserio_writer.write_varsize(self._num_texture_coords_)

        zserio_writer.write_bool(self._has_texture_coords_additional_)

        if self.is_num_texture_coords_additional_used():
            # check constraint
            if not (self._num_texture_coords_additional_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoordsAdditional!")
            zserio_writer.write_varsize(self._num_texture_coords_additional_)

    def write_packed(self, zserio_context: Mesh3DRenderLayerHeader.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._color_modes_.write_packed(zserio_context.color_modes, zserio_writer)

        if self.is_num_color_ids_used():
            zserio_context.num_color_ids.write(zserio.array.BitFieldArrayTraits(16), zserio_writer, self._num_color_ids_)

        zserio_writer.write_bool(self._has_normals_)

        if self.is_num_normals_used():
            # check constraint
            if not (self._num_normals_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numNormals!")
            zserio_context.num_normals.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_normals_)

        zserio_writer.write_bool(self._has_texture_coords_)

        if self.is_num_texture_coords_used():
            # check constraint
            if not (self._num_texture_coords_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoords!")
            zserio_context.num_texture_coords.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_texture_coords_)

        zserio_writer.write_bool(self._has_texture_coords_additional_)

        if self.is_num_texture_coords_additional_used():
            # check constraint
            if not (self._num_texture_coords_additional_ > 0):
                raise zserio.PythonRuntimeException("Constraint violated for field Mesh3DRenderLayerHeader.numTextureCoordsAdditional!")
            zserio_context.num_texture_coords_additional.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_texture_coords_additional_)

    class ZserioPackingContext:
        def __init__(self):
            self._color_modes_ = zserio.array.DeltaContext()
            self._num_color_ids_ = zserio.array.DeltaContext()
            self._num_normals_ = zserio.array.DeltaContext()
            self._num_texture_coords_ = zserio.array.DeltaContext()
            self._num_texture_coords_additional_ = zserio.array.DeltaContext()

        @property
        def color_modes(self):
            return self._color_modes_

        @property
        def num_color_ids(self):
            return self._num_color_ids_

        @property
        def num_normals(self):
            return self._num_normals_

        @property
        def num_texture_coords(self):
            return self._num_texture_coords_

        @property
        def num_texture_coords_additional(self):
            return self._num_texture_coords_additional_
