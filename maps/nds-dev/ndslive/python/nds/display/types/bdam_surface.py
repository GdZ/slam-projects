# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position3d
import nds.display.types.bdam_layer_header
import nds.display.types.bdam_surface_tin
import nds.display.types.normal_sphere
import nds.display.types.regular_grid_vertex
import nds.display.types.surface_grid_cell_size
import nds.display.types.texture_coords
import nds.display.types.vertex_grid_cell_size

class BdamSurface:
    def __init__(
            self,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader,
            surface_cell_size_: nds.display.types.surface_grid_cell_size.SurfaceGridCellSize,
            vertex_cell_size_: nds.display.types.vertex_grid_cell_size.VertexGridCellSize,
            has_regular_vertex_grid_: bool = bool(),
            regular_vertex_grid_: typing.Optional[typing.List[nds.display.types.regular_grid_vertex.RegularGridVertex]] = None,
            vertices_: typing.List[nds.core.geometry.position3d.Position3D] = None,
            normals_: typing.List[nds.display.types.normal_sphere.NormalSphere] = None,
            texture_coordinates_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]] = None,
            surface_tins_: typing.List[nds.display.types.bdam_surface_tin.BdamSurfaceTin] = None) -> None:
        self._header_ = header_
        self._surface_cell_size_ = surface_cell_size_
        self._vertex_cell_size_ = vertex_cell_size_
        self._has_regular_vertex_grid_ = has_regular_vertex_grid_
        if regular_vertex_grid_ is None:
            self._regular_vertex_grid_ = None
        else:
            self._regular_vertex_grid_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_regular_vertex_grid(self)), regular_vertex_grid_)
        self._vertices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vertices(self)), vertices_, is_auto=True)
        self._normals_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), normals_)
        if texture_coordinates_ is None:
            self._texture_coordinates_ = None
        else:
            self._texture_coordinates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), texture_coordinates_)
        self._surface_tins_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_tins(self)), surface_tins_)

    @classmethod
    def from_reader(
            cls: typing.Type['BdamSurface'],
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader,
            surface_cell_size_: nds.display.types.surface_grid_cell_size.SurfaceGridCellSize,
            vertex_cell_size_: nds.display.types.vertex_grid_cell_size.VertexGridCellSize) -> 'BdamSurface':
        self = object.__new__(cls)
        self._header_ = header_
        self._surface_cell_size_ = surface_cell_size_
        self._vertex_cell_size_ = vertex_cell_size_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BdamSurface'],
            zserio_context: BdamSurface.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader,
            surface_cell_size_: nds.display.types.surface_grid_cell_size.SurfaceGridCellSize,
            vertex_cell_size_: nds.display.types.vertex_grid_cell_size.VertexGridCellSize) -> 'BdamSurface':
        self = object.__new__(cls)
        self._header_ = header_
        self._surface_cell_size_ = surface_cell_size_
        self._vertex_cell_size_ = vertex_cell_size_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BdamSurface):
            return (self._header_ == other._header_ and
                    self._surface_cell_size_ == other._surface_cell_size_ and
                    self._vertex_cell_size_ == other._vertex_cell_size_ and
                    (self._has_regular_vertex_grid_ == other._has_regular_vertex_grid_) and
                    (not other.is_regular_vertex_grid_used() if not self.is_regular_vertex_grid_used() else (self._regular_vertex_grid_ == other._regular_vertex_grid_)) and
                    (self._vertices_ == other._vertices_) and
                    (self._normals_ == other._normals_) and
                    (not other.is_texture_coordinates_used() if not self.is_texture_coordinates_used() else (self._texture_coordinates_ == other._texture_coordinates_)) and
                    (self._surface_tins_ == other._surface_tins_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._surface_cell_size_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._vertex_cell_size_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_regular_vertex_grid_)
        if self.is_regular_vertex_grid_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._regular_vertex_grid_)
        result = zserio.hashcode.calc_hashcode_object(result, self._vertices_)
        result = zserio.hashcode.calc_hashcode_object(result, self._normals_)
        if self.is_texture_coordinates_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coordinates_)
        result = zserio.hashcode.calc_hashcode_object(result, self._surface_tins_)

        return result

    @property
    def header(self) -> nds.display.types.bdam_layer_header.BdamLayerHeader:
        return self._header_

    @property
    def surface_cell_size(self) -> nds.display.types.surface_grid_cell_size.SurfaceGridCellSize:
        return self._surface_cell_size_

    @property
    def vertex_cell_size(self) -> nds.display.types.vertex_grid_cell_size.VertexGridCellSize:
        return self._vertex_cell_size_

    @property
    def has_regular_vertex_grid(self) -> bool:
        return self._has_regular_vertex_grid_

    @has_regular_vertex_grid.setter
    def has_regular_vertex_grid(self, has_regular_vertex_grid_: bool) -> None:
        self._has_regular_vertex_grid_ = has_regular_vertex_grid_

    @property
    def regular_vertex_grid(self) -> typing.Optional[typing.List[nds.display.types.regular_grid_vertex.RegularGridVertex]]:
        return None if self._regular_vertex_grid_ is None else self._regular_vertex_grid_.raw_array

    @regular_vertex_grid.setter
    def regular_vertex_grid(self, regular_vertex_grid_: typing.Optional[typing.List[nds.display.types.regular_grid_vertex.RegularGridVertex]]) -> None:
        if regular_vertex_grid_ is None:
            self._regular_vertex_grid_ = None
        else:
            self._regular_vertex_grid_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_regular_vertex_grid(self)), regular_vertex_grid_)

    def is_regular_vertex_grid_used(self) -> bool:
        return self._has_regular_vertex_grid_ == True

    def is_regular_vertex_grid_set(self) -> bool:
        return not self._regular_vertex_grid_ is None

    def reset_regular_vertex_grid(self) -> None:
        self._regular_vertex_grid_ = None

    @property
    def vertices(self) -> typing.List[nds.core.geometry.position3d.Position3D]:
        return self._vertices_.raw_array

    @vertices.setter
    def vertices(self, vertices_: typing.List[nds.core.geometry.position3d.Position3D]) -> None:
        self._vertices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vertices(self)), vertices_, is_auto=True)

    @property
    def normals(self) -> typing.List[nds.display.types.normal_sphere.NormalSphere]:
        return self._normals_.raw_array

    @normals.setter
    def normals(self, normals_: typing.List[nds.display.types.normal_sphere.NormalSphere]) -> None:
        self._normals_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), normals_)

    @property
    def texture_coordinates(self) -> typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]:
        return None if self._texture_coordinates_ is None else self._texture_coordinates_.raw_array

    @texture_coordinates.setter
    def texture_coordinates(self, texture_coordinates_: typing.Optional[typing.List[nds.display.types.texture_coords.TextureCoords]]) -> None:
        if texture_coordinates_ is None:
            self._texture_coordinates_ = None
        else:
            self._texture_coordinates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), texture_coordinates_)

    def is_texture_coordinates_used(self) -> bool:
        return self._header_.has_texture == True

    def is_texture_coordinates_set(self) -> bool:
        return not self._texture_coordinates_ is None

    def reset_texture_coordinates(self) -> None:
        self._texture_coordinates_ = None

    @property
    def surface_tins(self) -> typing.List[nds.display.types.bdam_surface_tin.BdamSurfaceTin]:
        return self._surface_tins_.raw_array

    @surface_tins.setter
    def surface_tins(self, surface_tins_: typing.List[nds.display.types.bdam_surface_tin.BdamSurfaceTin]) -> None:
        self._surface_tins_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_tins(self)), surface_tins_)

    def num_grid_vertices(self) -> int:
        return (((self._surface_cell_size_ // self._vertex_cell_size_) * (self._surface_cell_size_ // self._vertex_cell_size_))) if (self._has_regular_vertex_grid_) else (0)

    def num_vertices(self) -> int:
        return len(self._vertices_) + self.num_grid_vertices()

    def init_packing_context(self, zserio_context: BdamSurface.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_regular_vertex_grid_used():
            end_bitposition += self._regular_vertex_grid_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._vertices_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._normals_.bitsizeof_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition += self._texture_coordinates_.bitsizeof(end_bitposition)
        end_bitposition += self._surface_tins_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BdamSurface.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_regular_vertex_grid_used():
            end_bitposition += self._regular_vertex_grid_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._vertices_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._normals_.bitsizeof_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition += self._texture_coordinates_.bitsizeof(end_bitposition)
        end_bitposition += self._surface_tins_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_regular_vertex_grid_used():
            end_bitposition = self._regular_vertex_grid_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._vertices_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._normals_.initialize_offsets_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition = self._texture_coordinates_.initialize_offsets(end_bitposition)
        end_bitposition = self._surface_tins_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BdamSurface.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_regular_vertex_grid_used():
            end_bitposition = self._regular_vertex_grid_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._vertices_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._normals_.initialize_offsets_packed(end_bitposition)
        if self.is_texture_coordinates_used():
            end_bitposition = self._texture_coordinates_.initialize_offsets(end_bitposition)
        end_bitposition = self._surface_tins_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._has_regular_vertex_grid_ = zserio_reader.read_bool()
        if self.is_regular_vertex_grid_used():
            self._regular_vertex_grid_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_regular_vertex_grid(self)), zserio_reader, self.num_grid_vertices())
        else:
            self._regular_vertex_grid_ = None
        self._vertices_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vertices(self)), zserio_reader, is_auto=True)
        self._normals_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), zserio_reader, len(self._vertices_))
        if self.is_texture_coordinates_used():
            self._texture_coordinates_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), zserio_reader, len(self._vertices_))
        else:
            self._texture_coordinates_ = None
        self._surface_tins_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_tins(self)), zserio_reader, 6)

    def read_packed(self, zserio_context: BdamSurface.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._has_regular_vertex_grid_ = zserio_reader.read_bool()

        if self.is_regular_vertex_grid_used():
            self._regular_vertex_grid_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_regular_vertex_grid(self)), zserio_reader, self.num_grid_vertices())
        else:
            self._regular_vertex_grid_ = None

        self._vertices_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vertices(self)), zserio_reader, is_auto=True)

        self._normals_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_normals()), zserio_reader, len(self._vertices_))

        if self.is_texture_coordinates_used():
            self._texture_coordinates_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_texture_coordinates()), zserio_reader, len(self._vertices_))
        else:
            self._texture_coordinates_ = None

        self._surface_tins_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surface_tins(self)), zserio_reader, 6)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bool(self._has_regular_vertex_grid_)

        if self.is_regular_vertex_grid_used():
            # check array length
            if len(self._regular_vertex_grid_) != (self.num_grid_vertices()):
                raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.regularVertexGrid: "
                                                    f"{len(self._regular_vertex_grid_)} != {self.num_grid_vertices()}!")
            self._regular_vertex_grid_.write_packed(zserio_writer)

        self._vertices_.write_packed(zserio_writer)

        # check array length
        if len(self._normals_) != (len(self._vertices_)):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.normals: "
                                                f"{len(self._normals_)} != {len(self._vertices_)}!")
        self._normals_.write_packed(zserio_writer)

        if self.is_texture_coordinates_used():
            # check array length
            if len(self._texture_coordinates_) != (len(self._vertices_)):
                raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.textureCoordinates: "
                                                    f"{len(self._texture_coordinates_)} != {len(self._vertices_)}!")
            self._texture_coordinates_.write(zserio_writer)

        # check array length
        if len(self._surface_tins_) != (6):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.surfaceTins: "
                                                f"{len(self._surface_tins_)} != {6}!")
        self._surface_tins_.write(zserio_writer)

    def write_packed(self, zserio_context: BdamSurface.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        zserio_writer.write_bool(self._has_regular_vertex_grid_)

        if self.is_regular_vertex_grid_used():
            # check array length
            if len(self._regular_vertex_grid_) != (self.num_grid_vertices()):
                raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.regularVertexGrid: "
                                                    f"{len(self._regular_vertex_grid_)} != {self.num_grid_vertices()}!")
            self._regular_vertex_grid_.write_packed(zserio_writer)

        self._vertices_.write_packed(zserio_writer)

        # check array length
        if len(self._normals_) != (len(self._vertices_)):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.normals: "
                                                f"{len(self._normals_)} != {len(self._vertices_)}!")
        self._normals_.write_packed(zserio_writer)

        if self.is_texture_coordinates_used():
            # check array length
            if len(self._texture_coordinates_) != (len(self._vertices_)):
                raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.textureCoordinates: "
                                                    f"{len(self._texture_coordinates_)} != {len(self._vertices_)}!")
            self._texture_coordinates_.write(zserio_writer)

        # check array length
        if len(self._surface_tins_) != (6):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurface.surfaceTins: "
                                                f"{len(self._surface_tins_)} != {6}!")
        self._surface_tins_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_regular_vertex_grid:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.regular_grid_vertex.RegularGridVertex:
            del zserio_index
            return nds.display.types.regular_grid_vertex.RegularGridVertex.from_reader(zserio_reader, self._owner._header_.shift_z, self._owner._header_.has_texture)

        @staticmethod
        def create_packing_context() -> nds.display.types.regular_grid_vertex.RegularGridVertex.ZserioPackingContext:
            return nds.display.types.regular_grid_vertex.RegularGridVertex.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.regular_grid_vertex.RegularGridVertex.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.regular_grid_vertex.RegularGridVertex:
            del zserio_index
            return nds.display.types.regular_grid_vertex.RegularGridVertex.from_reader_packed(zserio_context, zserio_reader, self._owner._header_.shift_z, self._owner._header_.has_texture)

    class _ZserioElementFactory_vertices:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader(zserio_reader, self._owner._header_.shift_xy, self._owner._header_.shift_z)

        @staticmethod
        def create_packing_context() -> nds.core.geometry.position3d.Position3D.ZserioPackingContext:
            return nds.core.geometry.position3d.Position3D.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.core.geometry.position3d.Position3D.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.geometry.position3d.Position3D:
            del zserio_index
            return nds.core.geometry.position3d.Position3D.from_reader_packed(zserio_context, zserio_reader, self._owner._header_.shift_xy, self._owner._header_.shift_z)

    class _ZserioElementFactory_normals:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.normal_sphere.NormalSphere:
            del zserio_index
            return nds.display.types.normal_sphere.NormalSphere.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext:
            return nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.normal_sphere.NormalSphere:
            del zserio_index
            return nds.display.types.normal_sphere.NormalSphere.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_texture_coordinates:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_coords.TextureCoords:
            del zserio_index
            return nds.display.types.texture_coords.TextureCoords.from_reader(zserio_reader)

    class _ZserioElementFactory_surface_tins:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface_tin.BdamSurfaceTin:
            del zserio_index
            return nds.display.types.bdam_surface_tin.BdamSurfaceTin.from_reader(zserio_reader, zserio.builtin.numbits(self._owner.num_vertices()))

        @staticmethod
        def create_packing_context() -> nds.display.types.bdam_surface_tin.BdamSurfaceTin.ZserioPackingContext:
            return nds.display.types.bdam_surface_tin.BdamSurfaceTin.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.bdam_surface_tin.BdamSurfaceTin.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface_tin.BdamSurfaceTin:
            del zserio_index
            return nds.display.types.bdam_surface_tin.BdamSurfaceTin.from_reader_packed(zserio_context, zserio_reader, zserio.builtin.numbits(self._owner.num_vertices()))
