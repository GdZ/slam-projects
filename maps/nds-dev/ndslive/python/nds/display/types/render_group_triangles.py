# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.poly_mesh3d
import nds.display.types.mesh3d_render_configuration
import nds.display.types.mesh_range_index

class RenderGroupTriangles:
    def __init__(
            self,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration,
            number_of_triangles_: int = int(),
            vert_indices_: typing.List[nds.display.types.mesh_range_index.MeshRangeIndex] = None) -> None:
        self._mesh_ = mesh_
        self._config_ = config_
        self._number_of_triangles_ = number_of_triangles_
        self._vert_indices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vert_indices(self)), vert_indices_)

    @classmethod
    def from_reader(
            cls: typing.Type['RenderGroupTriangles'],
            zserio_reader: zserio.BitStreamReader,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration) -> 'RenderGroupTriangles':
        self = object.__new__(cls)
        self._mesh_ = mesh_
        self._config_ = config_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RenderGroupTriangles'],
            zserio_context: RenderGroupTriangles.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration) -> 'RenderGroupTriangles':
        self = object.__new__(cls)
        self._mesh_ = mesh_
        self._config_ = config_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RenderGroupTriangles):
            return (self._mesh_ == other._mesh_ and
                    self._config_ == other._config_ and
                    (self._number_of_triangles_ == other._number_of_triangles_) and
                    (self._vert_indices_ == other._vert_indices_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._mesh_)
        result = zserio.hashcode.calc_hashcode_object(result, self._config_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._number_of_triangles_)
        result = zserio.hashcode.calc_hashcode_object(result, self._vert_indices_)

        return result

    @property
    def mesh(self) -> nds.core.geometry.poly_mesh3d.PolyMesh3D:
        return self._mesh_

    @property
    def config(self) -> nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration:
        return self._config_

    @property
    def number_of_triangles(self) -> int:
        return self._number_of_triangles_

    @number_of_triangles.setter
    def number_of_triangles(self, number_of_triangles_: int) -> None:
        self._number_of_triangles_ = number_of_triangles_

    @property
    def vert_indices(self) -> typing.List[nds.display.types.mesh_range_index.MeshRangeIndex]:
        return self._vert_indices_.raw_array

    @vert_indices.setter
    def vert_indices(self, vert_indices_: typing.List[nds.display.types.mesh_range_index.MeshRangeIndex]) -> None:
        self._vert_indices_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vert_indices(self)), vert_indices_)

    def num_indices_triangle(self) -> int:
        return (3 * self._number_of_triangles_)

    def max_mesh_index(self) -> int:
        return self._mesh_.num_positions

    def init_packing_context(self, zserio_context: RenderGroupTriangles.ZserioPackingContext) -> None:
        zserio_context.number_of_triangles.init(zserio.array.VarUInt16ArrayTraits(), self._number_of_triangles_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._number_of_triangles_)
        end_bitposition += self._vert_indices_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RenderGroupTriangles.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.number_of_triangles.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._number_of_triangles_)
        end_bitposition += self._vert_indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._number_of_triangles_)
        end_bitposition = self._vert_indices_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RenderGroupTriangles.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.number_of_triangles.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._number_of_triangles_)
        end_bitposition = self._vert_indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._number_of_triangles_ = zserio_reader.read_varuint16()
        self._vert_indices_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vert_indices(self)), zserio_reader, self.num_indices_triangle())

    def read_packed(self, zserio_context: RenderGroupTriangles.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._number_of_triangles_ = zserio_context.number_of_triangles.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._vert_indices_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_vert_indices(self)), zserio_reader, self.num_indices_triangle())

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._number_of_triangles_)

        # check array length
        if len(self._vert_indices_) != (self.num_indices_triangle()):
            raise zserio.PythonRuntimeException("Wrong array length for field RenderGroupTriangles.vertIndices: "
                                                f"{len(self._vert_indices_)} != {self.num_indices_triangle()}!")
        self._vert_indices_.write(zserio_writer)

    def write_packed(self, zserio_context: RenderGroupTriangles.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.number_of_triangles.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._number_of_triangles_)

        # check array length
        if len(self._vert_indices_) != (self.num_indices_triangle()):
            raise zserio.PythonRuntimeException("Wrong array length for field RenderGroupTriangles.vertIndices: "
                                                f"{len(self._vert_indices_)} != {self.num_indices_triangle()}!")
        self._vert_indices_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._number_of_triangles_ = zserio.array.DeltaContext()

        @property
        def number_of_triangles(self):
            return self._number_of_triangles_

    class _ZserioElementFactory_vert_indices:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.mesh_range_index.MeshRangeIndex:
            del zserio_index
            return nds.display.types.mesh_range_index.MeshRangeIndex.from_reader(zserio_reader, self._owner.max_mesh_index())

        @staticmethod
        def create_packing_context() -> nds.display.types.mesh_range_index.MeshRangeIndex.ZserioPackingContext:
            return nds.display.types.mesh_range_index.MeshRangeIndex.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.mesh_range_index.MeshRangeIndex.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.mesh_range_index.MeshRangeIndex:
            del zserio_index
            return nds.display.types.mesh_range_index.MeshRangeIndex.from_reader_packed(zserio_context, zserio_reader, self._owner.max_mesh_index())
