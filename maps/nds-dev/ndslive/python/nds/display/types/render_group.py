# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.index_type
import nds.core.geometry.poly_mesh3d
import nds.display.types.color_id
import nds.display.types.material
import nds.display.types.mesh3d_render_configuration
import nds.display.types.render_group_triangle_strip
import nds.display.types.render_group_triangles

class RenderGroup:
    def __init__(
            self,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration,
            color_id_: typing.Optional[nds.display.types.color_id.ColorId] = None,
            triangle_strip_: typing.Optional[nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip] = None,
            triangles_: typing.Optional[nds.display.types.render_group_triangles.RenderGroupTriangles] = None,
            material_: typing.Optional[nds.display.types.material.Material] = None,
            material_additional_: typing.Optional[nds.display.types.material.Material] = None) -> None:
        self._mesh_ = mesh_
        self._config_ = config_
        self._color_id_ = color_id_
        self._triangle_strip_ = triangle_strip_
        self._triangles_ = triangles_
        self._material_ = material_
        self._material_additional_ = material_additional_

    @classmethod
    def from_reader(
            cls: typing.Type['RenderGroup'],
            zserio_reader: zserio.BitStreamReader,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration) -> 'RenderGroup':
        self = object.__new__(cls)
        self._mesh_ = mesh_
        self._config_ = config_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RenderGroup'],
            zserio_context: RenderGroup.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            mesh_: nds.core.geometry.poly_mesh3d.PolyMesh3D,
            config_: nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration) -> 'RenderGroup':
        self = object.__new__(cls)
        self._mesh_ = mesh_
        self._config_ = config_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RenderGroup):
            return (self._mesh_ == other._mesh_ and
                    self._config_ == other._config_ and
                    (not other.is_color_id_used() if not self.is_color_id_used() else (self._color_id_ == other._color_id_)) and
                    (not other.is_triangle_strip_used() if not self.is_triangle_strip_used() else (self._triangle_strip_ == other._triangle_strip_)) and
                    (not other.is_triangles_used() if not self.is_triangles_used() else (self._triangles_ == other._triangles_)) and
                    (not other.is_material_used() if not self.is_material_used() else (self._material_ == other._material_)) and
                    (not other.is_material_additional_used() if not self.is_material_additional_used() else (self._material_additional_ == other._material_additional_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._mesh_)
        result = zserio.hashcode.calc_hashcode_object(result, self._config_)
        if self.is_color_id_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._color_id_)
        if self.is_triangle_strip_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._triangle_strip_)
        if self.is_triangles_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._triangles_)
        if self.is_material_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._material_)
        if self.is_material_additional_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._material_additional_)

        return result

    @property
    def mesh(self) -> nds.core.geometry.poly_mesh3d.PolyMesh3D:
        return self._mesh_

    @property
    def config(self) -> nds.display.types.mesh3d_render_configuration.Mesh3DRenderConfiguration:
        return self._config_

    @property
    def color_id(self) -> typing.Optional[nds.display.types.color_id.ColorId]:
        return self._color_id_

    @color_id.setter
    def color_id(self, color_id_: typing.Optional[nds.display.types.color_id.ColorId]) -> None:
        self._color_id_ = color_id_

    def is_color_id_used(self) -> bool:
        return self._config_.uses_color_per_render_group()

    def is_color_id_set(self) -> bool:
        return not self._color_id_ is None

    def reset_color_id(self) -> None:
        self._color_id_ = None

    @property
    def triangle_strip(self) -> typing.Optional[nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip]:
        return self._triangle_strip_

    @triangle_strip.setter
    def triangle_strip(self, triangle_strip_: typing.Optional[nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip]) -> None:
        self._triangle_strip_ = triangle_strip_

    def is_triangle_strip_used(self) -> bool:
        return self._mesh_.index_type == nds.core.geometry.index_type.IndexType.TRIANGLE_STRIP

    def is_triangle_strip_set(self) -> bool:
        return not self._triangle_strip_ is None

    def reset_triangle_strip(self) -> None:
        self._triangle_strip_ = None

    @property
    def triangles(self) -> typing.Optional[nds.display.types.render_group_triangles.RenderGroupTriangles]:
        return self._triangles_

    @triangles.setter
    def triangles(self, triangles_: typing.Optional[nds.display.types.render_group_triangles.RenderGroupTriangles]) -> None:
        self._triangles_ = triangles_

    def is_triangles_used(self) -> bool:
        return self._mesh_.index_type == nds.core.geometry.index_type.IndexType.TRIANGLES

    def is_triangles_set(self) -> bool:
        return not self._triangles_ is None

    def reset_triangles(self) -> None:
        self._triangles_ = None

    @property
    def material(self) -> typing.Optional[nds.display.types.material.Material]:
        return self._material_

    @material.setter
    def material(self, material_: typing.Optional[nds.display.types.material.Material]) -> None:
        self._material_ = material_

    def is_material_used(self) -> bool:
        return self._config_.has_texture_coords == True

    def is_material_set(self) -> bool:
        return not self._material_ is None

    def reset_material(self) -> None:
        self._material_ = None

    @property
    def material_additional(self) -> typing.Optional[nds.display.types.material.Material]:
        return self._material_additional_

    @material_additional.setter
    def material_additional(self, material_additional_: typing.Optional[nds.display.types.material.Material]) -> None:
        self._material_additional_ = material_additional_

    def is_material_additional_used(self) -> bool:
        return self._config_.has_texture_coords_additional == True

    def is_material_additional_set(self) -> bool:
        return not self._material_additional_ is None

    def reset_material_additional(self) -> None:
        self._material_additional_ = None

    def init_packing_context(self, zserio_context: RenderGroup.ZserioPackingContext) -> None:
        if self.is_color_id_used():
            zserio_context.color_id.init(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        if self.is_triangle_strip_used():
            self._triangle_strip_.init_packing_context(zserio_context.triangle_strip)
        if self.is_triangles_used():
            self._triangles_.init_packing_context(zserio_context.triangles)
        if self.is_material_used():
            self._material_.init_packing_context(zserio_context.material)
        if self.is_material_additional_used():
            self._material_additional_.init_packing_context(zserio_context.material_additional)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_color_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._color_id_)
        if self.is_triangle_strip_used():
            end_bitposition += self._triangle_strip_.bitsizeof(end_bitposition)
        if self.is_triangles_used():
            end_bitposition += self._triangles_.bitsizeof(end_bitposition)
        if self.is_material_used():
            end_bitposition += self._material_.bitsizeof(end_bitposition)
        if self.is_material_additional_used():
            end_bitposition += self._material_additional_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RenderGroup.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_color_id_used():
            end_bitposition += zserio_context.color_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        if self.is_triangle_strip_used():
            end_bitposition += self._triangle_strip_.bitsizeof_packed(zserio_context.triangle_strip, end_bitposition)
        if self.is_triangles_used():
            end_bitposition += self._triangles_.bitsizeof_packed(zserio_context.triangles, end_bitposition)
        if self.is_material_used():
            end_bitposition += self._material_.bitsizeof_packed(zserio_context.material, end_bitposition)
        if self.is_material_additional_used():
            end_bitposition += self._material_additional_.bitsizeof_packed(zserio_context.material_additional, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        if self.is_color_id_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._color_id_)
        if self.is_triangle_strip_used():
            end_bitposition = self._triangle_strip_.initialize_offsets(end_bitposition)
        if self.is_triangles_used():
            end_bitposition = self._triangles_.initialize_offsets(end_bitposition)
        if self.is_material_used():
            end_bitposition = self._material_.initialize_offsets(end_bitposition)
        if self.is_material_additional_used():
            end_bitposition = self._material_additional_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RenderGroup.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        if self.is_color_id_used():
            end_bitposition += zserio_context.color_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        if self.is_triangle_strip_used():
            end_bitposition = self._triangle_strip_.initialize_offsets_packed(zserio_context.triangle_strip, end_bitposition)
        if self.is_triangles_used():
            end_bitposition = self._triangles_.initialize_offsets_packed(zserio_context.triangles, end_bitposition)
        if self.is_material_used():
            end_bitposition = self._material_.initialize_offsets_packed(zserio_context.material, end_bitposition)
        if self.is_material_additional_used():
            end_bitposition = self._material_additional_.initialize_offsets_packed(zserio_context.material_additional, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_color_id_used():
            self._color_id_ = zserio_reader.read_varuint16()
        else:
            self._color_id_ = None
        if self.is_triangle_strip_used():
            self._triangle_strip_ = nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip.from_reader(zserio_reader, self._mesh_, self._config_)
        else:
            self._triangle_strip_ = None
        if self.is_triangles_used():
            self._triangles_ = nds.display.types.render_group_triangles.RenderGroupTriangles.from_reader(zserio_reader, self._mesh_, self._config_)
        else:
            self._triangles_ = None
        if self.is_material_used():
            self._material_ = nds.display.types.material.Material.from_reader(zserio_reader)
        else:
            self._material_ = None
        if self.is_material_additional_used():
            self._material_additional_ = nds.display.types.material.Material.from_reader(zserio_reader)
        else:
            self._material_additional_ = None

    def read_packed(self, zserio_context: RenderGroup.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if self.is_color_id_used():
            self._color_id_ = zserio_context.color_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        else:
            self._color_id_ = None

        if self.is_triangle_strip_used():
            self._triangle_strip_ = nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip.from_reader_packed(zserio_context.triangle_strip, zserio_reader, self._mesh_, self._config_)
        else:
            self._triangle_strip_ = None

        if self.is_triangles_used():
            self._triangles_ = nds.display.types.render_group_triangles.RenderGroupTriangles.from_reader_packed(zserio_context.triangles, zserio_reader, self._mesh_, self._config_)
        else:
            self._triangles_ = None

        if self.is_material_used():
            self._material_ = nds.display.types.material.Material.from_reader_packed(zserio_context.material, zserio_reader)
        else:
            self._material_ = None

        if self.is_material_additional_used():
            self._material_additional_ = nds.display.types.material.Material.from_reader_packed(zserio_context.material_additional, zserio_reader)
        else:
            self._material_additional_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_color_id_used():
            zserio_writer.write_varuint16(self._color_id_)

        if self.is_triangle_strip_used():
            # check parameters
            if self._triangle_strip_.mesh is not (self._mesh_):
                raise zserio.PythonRuntimeException("Wrong parameter mesh for field RenderGroup.triangleStrip: "
                                                    f"{self._triangle_strip_.mesh} != {self._mesh_}!")
            if self._triangle_strip_.config is not (self._config_):
                raise zserio.PythonRuntimeException("Wrong parameter config for field RenderGroup.triangleStrip: "
                                                    f"{self._triangle_strip_.config} != {self._config_}!")
            self._triangle_strip_.write(zserio_writer)

        if self.is_triangles_used():
            # check parameters
            if self._triangles_.mesh is not (self._mesh_):
                raise zserio.PythonRuntimeException("Wrong parameter mesh for field RenderGroup.triangles: "
                                                    f"{self._triangles_.mesh} != {self._mesh_}!")
            if self._triangles_.config is not (self._config_):
                raise zserio.PythonRuntimeException("Wrong parameter config for field RenderGroup.triangles: "
                                                    f"{self._triangles_.config} != {self._config_}!")
            self._triangles_.write(zserio_writer)

        if self.is_material_used():
            self._material_.write(zserio_writer)

        if self.is_material_additional_used():
            self._material_additional_.write(zserio_writer)

    def write_packed(self, zserio_context: RenderGroup.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_color_id_used():
            zserio_context.color_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._color_id_)

        if self.is_triangle_strip_used():
            # check parameters
            if self._triangle_strip_.mesh is not (self._mesh_):
                raise zserio.PythonRuntimeException("Wrong parameter mesh for field RenderGroup.triangleStrip: "
                                                    f"{self._triangle_strip_.mesh} != {self._mesh_}!")
            if self._triangle_strip_.config is not (self._config_):
                raise zserio.PythonRuntimeException("Wrong parameter config for field RenderGroup.triangleStrip: "
                                                    f"{self._triangle_strip_.config} != {self._config_}!")
            self._triangle_strip_.write_packed(zserio_context.triangle_strip, zserio_writer)

        if self.is_triangles_used():
            # check parameters
            if self._triangles_.mesh is not (self._mesh_):
                raise zserio.PythonRuntimeException("Wrong parameter mesh for field RenderGroup.triangles: "
                                                    f"{self._triangles_.mesh} != {self._mesh_}!")
            if self._triangles_.config is not (self._config_):
                raise zserio.PythonRuntimeException("Wrong parameter config for field RenderGroup.triangles: "
                                                    f"{self._triangles_.config} != {self._config_}!")
            self._triangles_.write_packed(zserio_context.triangles, zserio_writer)

        if self.is_material_used():
            self._material_.write_packed(zserio_context.material, zserio_writer)

        if self.is_material_additional_used():
            self._material_additional_.write_packed(zserio_context.material_additional, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._color_id_ = zserio.array.DeltaContext()
            self._triangle_strip_ = nds.display.types.render_group_triangle_strip.RenderGroupTriangleStrip.ZserioPackingContext()
            self._triangles_ = nds.display.types.render_group_triangles.RenderGroupTriangles.ZserioPackingContext()
            self._material_ = nds.display.types.material.Material.ZserioPackingContext()
            self._material_additional_ = nds.display.types.material.Material.ZserioPackingContext()

        @property
        def color_id(self):
            return self._color_id_

        @property
        def triangle_strip(self):
            return self._triangle_strip_

        @property
        def triangles(self):
            return self._triangles_

        @property
        def material(self):
            return self._material_

        @property
        def material_additional(self):
            return self._material_additional_
