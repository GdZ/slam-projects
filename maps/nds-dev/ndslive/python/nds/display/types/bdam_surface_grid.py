# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d
import nds.core.grid.num_grid_cells
import nds.display.types.bdam_layer_header
import nds.display.types.bdam_surface
import nds.display.types.space_error
import nds.display.types.surface_grid_cell_size
import nds.display.types.vertex_grid_cell_size

class BdamSurfaceGrid:
    def __init__(
            self,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader,
            south_west_corner_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            surface_grid_cell_size_: nds.display.types.surface_grid_cell_size.SurfaceGridCellSize = nds.display.types.surface_grid_cell_size.SurfaceGridCellSize(),
            num_rows_: nds.core.grid.num_grid_cells.NumGridCells = nds.core.grid.num_grid_cells.NumGridCells(),
            num_columns_: nds.core.grid.num_grid_cells.NumGridCells = nds.core.grid.num_grid_cells.NumGridCells(),
            long_side_error_l1_: nds.display.types.space_error.SpaceError = nds.display.types.space_error.SpaceError(),
            short_side_error_l1_: nds.display.types.space_error.SpaceError = nds.display.types.space_error.SpaceError(),
            short_side_error_l2_: nds.display.types.space_error.SpaceError = nds.display.types.space_error.SpaceError(),
            vertex_grid_cell_size_: nds.display.types.vertex_grid_cell_size.VertexGridCellSize = nds.display.types.vertex_grid_cell_size.VertexGridCellSize(),
            surfaces_: typing.List[nds.display.types.bdam_surface.BdamSurface] = None) -> None:
        self._header_ = header_
        self._south_west_corner_ = south_west_corner_
        self._surface_grid_cell_size_ = surface_grid_cell_size_
        self._num_rows_ = num_rows_
        self._num_columns_ = num_columns_
        self._long_side_error_l1_ = long_side_error_l1_
        self._short_side_error_l1_ = short_side_error_l1_
        self._short_side_error_l2_ = short_side_error_l2_
        self._vertex_grid_cell_size_ = vertex_grid_cell_size_
        self._surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surfaces(self)), surfaces_)

    @classmethod
    def from_reader(
            cls: typing.Type['BdamSurfaceGrid'],
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader) -> 'BdamSurfaceGrid':
        self = object.__new__(cls)
        self._header_ = header_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BdamSurfaceGrid'],
            zserio_context: BdamSurfaceGrid.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.bdam_layer_header.BdamLayerHeader) -> 'BdamSurfaceGrid':
        self = object.__new__(cls)
        self._header_ = header_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BdamSurfaceGrid):
            return (self._header_ == other._header_ and
                    (self._south_west_corner_ == other._south_west_corner_) and
                    (self._surface_grid_cell_size_ == other._surface_grid_cell_size_) and
                    (self._num_rows_ == other._num_rows_) and
                    (self._num_columns_ == other._num_columns_) and
                    (self._long_side_error_l1_ == other._long_side_error_l1_) and
                    (self._short_side_error_l1_ == other._short_side_error_l1_) and
                    (self._short_side_error_l2_ == other._short_side_error_l2_) and
                    (self._vertex_grid_cell_size_ == other._vertex_grid_cell_size_) and
                    (self._surfaces_ == other._surfaces_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._south_west_corner_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._surface_grid_cell_size_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_rows_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_columns_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._long_side_error_l1_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._short_side_error_l1_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._short_side_error_l2_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._vertex_grid_cell_size_)
        result = zserio.hashcode.calc_hashcode_object(result, self._surfaces_)

        return result

    @property
    def header(self) -> nds.display.types.bdam_layer_header.BdamLayerHeader:
        return self._header_

    @property
    def south_west_corner(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._south_west_corner_

    @south_west_corner.setter
    def south_west_corner(self, south_west_corner_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._south_west_corner_ = south_west_corner_

    @property
    def surface_grid_cell_size(self) -> nds.display.types.surface_grid_cell_size.SurfaceGridCellSize:
        return self._surface_grid_cell_size_

    @surface_grid_cell_size.setter
    def surface_grid_cell_size(self, surface_grid_cell_size_: nds.display.types.surface_grid_cell_size.SurfaceGridCellSize) -> None:
        self._surface_grid_cell_size_ = surface_grid_cell_size_

    @property
    def num_rows(self) -> nds.core.grid.num_grid_cells.NumGridCells:
        return self._num_rows_

    @num_rows.setter
    def num_rows(self, num_rows_: nds.core.grid.num_grid_cells.NumGridCells) -> None:
        self._num_rows_ = num_rows_

    @property
    def num_columns(self) -> nds.core.grid.num_grid_cells.NumGridCells:
        return self._num_columns_

    @num_columns.setter
    def num_columns(self, num_columns_: nds.core.grid.num_grid_cells.NumGridCells) -> None:
        self._num_columns_ = num_columns_

    @property
    def long_side_error_l1(self) -> nds.display.types.space_error.SpaceError:
        return self._long_side_error_l1_

    @long_side_error_l1.setter
    def long_side_error_l1(self, long_side_error_l1_: nds.display.types.space_error.SpaceError) -> None:
        self._long_side_error_l1_ = long_side_error_l1_

    @property
    def short_side_error_l1(self) -> nds.display.types.space_error.SpaceError:
        return self._short_side_error_l1_

    @short_side_error_l1.setter
    def short_side_error_l1(self, short_side_error_l1_: nds.display.types.space_error.SpaceError) -> None:
        self._short_side_error_l1_ = short_side_error_l1_

    @property
    def short_side_error_l2(self) -> nds.display.types.space_error.SpaceError:
        return self._short_side_error_l2_

    @short_side_error_l2.setter
    def short_side_error_l2(self, short_side_error_l2_: nds.display.types.space_error.SpaceError) -> None:
        self._short_side_error_l2_ = short_side_error_l2_

    @property
    def vertex_grid_cell_size(self) -> nds.display.types.vertex_grid_cell_size.VertexGridCellSize:
        return self._vertex_grid_cell_size_

    @vertex_grid_cell_size.setter
    def vertex_grid_cell_size(self, vertex_grid_cell_size_: nds.display.types.vertex_grid_cell_size.VertexGridCellSize) -> None:
        self._vertex_grid_cell_size_ = vertex_grid_cell_size_

    @property
    def surfaces(self) -> typing.List[nds.display.types.bdam_surface.BdamSurface]:
        return self._surfaces_.raw_array

    @surfaces.setter
    def surfaces(self, surfaces_: typing.List[nds.display.types.bdam_surface.BdamSurface]) -> None:
        self._surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surfaces(self)), surfaces_)

    def init_packing_context(self, zserio_context: BdamSurfaceGrid.ZserioPackingContext) -> None:
        self._south_west_corner_.init_packing_context(zserio_context.south_west_corner)
        zserio_context.surface_grid_cell_size.init(zserio.array.VarSizeArrayTraits(), self._surface_grid_cell_size_)
        zserio_context.num_rows.init(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        zserio_context.num_columns.init(zserio.array.VarSizeArrayTraits(), self._num_columns_)
        zserio_context.long_side_error_l1.init(zserio.array.VarSizeArrayTraits(), self._long_side_error_l1_)
        zserio_context.short_side_error_l1.init(zserio.array.VarSizeArrayTraits(), self._short_side_error_l1_)
        zserio_context.short_side_error_l2.init(zserio.array.VarSizeArrayTraits(), self._short_side_error_l2_)
        zserio_context.vertex_grid_cell_size.init(zserio.array.VarSizeArrayTraits(), self._vertex_grid_cell_size_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_corner_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._surface_grid_cell_size_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_rows_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_columns_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._long_side_error_l1_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._short_side_error_l1_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._short_side_error_l2_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._vertex_grid_cell_size_)
        end_bitposition += self._surfaces_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BdamSurfaceGrid.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._south_west_corner_.bitsizeof_packed(zserio_context.south_west_corner, end_bitposition)
        end_bitposition += zserio_context.surface_grid_cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._surface_grid_cell_size_)
        end_bitposition += zserio_context.num_rows.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        end_bitposition += zserio_context.num_columns.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_columns_)
        end_bitposition += zserio_context.long_side_error_l1.bitsizeof(zserio.array.VarSizeArrayTraits(), self._long_side_error_l1_)
        end_bitposition += zserio_context.short_side_error_l1.bitsizeof(zserio.array.VarSizeArrayTraits(), self._short_side_error_l1_)
        end_bitposition += zserio_context.short_side_error_l2.bitsizeof(zserio.array.VarSizeArrayTraits(), self._short_side_error_l2_)
        end_bitposition += zserio_context.vertex_grid_cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._vertex_grid_cell_size_)
        end_bitposition += self._surfaces_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_corner_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._surface_grid_cell_size_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_rows_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_columns_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._long_side_error_l1_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._short_side_error_l1_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._short_side_error_l2_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._vertex_grid_cell_size_)
        end_bitposition = self._surfaces_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BdamSurfaceGrid.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._south_west_corner_.initialize_offsets_packed(zserio_context.south_west_corner, end_bitposition)
        end_bitposition += zserio_context.surface_grid_cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._surface_grid_cell_size_)
        end_bitposition += zserio_context.num_rows.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_rows_)
        end_bitposition += zserio_context.num_columns.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_columns_)
        end_bitposition += zserio_context.long_side_error_l1.bitsizeof(zserio.array.VarSizeArrayTraits(), self._long_side_error_l1_)
        end_bitposition += zserio_context.short_side_error_l1.bitsizeof(zserio.array.VarSizeArrayTraits(), self._short_side_error_l1_)
        end_bitposition += zserio_context.short_side_error_l2.bitsizeof(zserio.array.VarSizeArrayTraits(), self._short_side_error_l2_)
        end_bitposition += zserio_context.vertex_grid_cell_size.bitsizeof(zserio.array.VarSizeArrayTraits(), self._vertex_grid_cell_size_)
        end_bitposition = self._surfaces_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_corner_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._header_.shift_xy)
        self._surface_grid_cell_size_ = zserio_reader.read_varsize()
        self._num_rows_ = zserio_reader.read_varsize()
        self._num_columns_ = zserio_reader.read_varsize()
        self._long_side_error_l1_ = zserio_reader.read_varsize()
        self._short_side_error_l1_ = zserio_reader.read_varsize()
        self._short_side_error_l2_ = zserio_reader.read_varsize()
        self._vertex_grid_cell_size_ = zserio_reader.read_varsize()
        self._surfaces_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surfaces(self)), zserio_reader, self._num_rows_ * self._num_columns_)

    def read_packed(self, zserio_context: BdamSurfaceGrid.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._south_west_corner_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.south_west_corner, zserio_reader, self._header_.shift_xy)

        self._surface_grid_cell_size_ = zserio_context.surface_grid_cell_size.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_rows_ = zserio_context.num_rows.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._num_columns_ = zserio_context.num_columns.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._long_side_error_l1_ = zserio_context.long_side_error_l1.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._short_side_error_l1_ = zserio_context.short_side_error_l1.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._short_side_error_l2_ = zserio_context.short_side_error_l2.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._vertex_grid_cell_size_ = zserio_context.vertex_grid_cell_size.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._surfaces_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_surfaces(self)), zserio_reader, self._num_rows_ * self._num_columns_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_corner_.shift != (self._header_.shift_xy):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BdamSurfaceGrid.southWestCorner: "
                                                f"{self._south_west_corner_.shift} != {self._header_.shift_xy}!")
        self._south_west_corner_.write(zserio_writer)

        zserio_writer.write_varsize(self._surface_grid_cell_size_)

        zserio_writer.write_varsize(self._num_rows_)

        zserio_writer.write_varsize(self._num_columns_)

        zserio_writer.write_varsize(self._long_side_error_l1_)

        zserio_writer.write_varsize(self._short_side_error_l1_)

        zserio_writer.write_varsize(self._short_side_error_l2_)

        zserio_writer.write_varsize(self._vertex_grid_cell_size_)

        # check array length
        if len(self._surfaces_) != (self._num_rows_ * self._num_columns_):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurfaceGrid.surfaces: "
                                                f"{len(self._surfaces_)} != {self._num_rows_ * self._num_columns_}!")
        self._surfaces_.write(zserio_writer)

    def write_packed(self, zserio_context: BdamSurfaceGrid.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._south_west_corner_.shift != (self._header_.shift_xy):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field BdamSurfaceGrid.southWestCorner: "
                                                f"{self._south_west_corner_.shift} != {self._header_.shift_xy}!")
        self._south_west_corner_.write_packed(zserio_context.south_west_corner, zserio_writer)

        zserio_context.surface_grid_cell_size.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._surface_grid_cell_size_)

        zserio_context.num_rows.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_rows_)

        zserio_context.num_columns.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_columns_)

        zserio_context.long_side_error_l1.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._long_side_error_l1_)

        zserio_context.short_side_error_l1.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._short_side_error_l1_)

        zserio_context.short_side_error_l2.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._short_side_error_l2_)

        zserio_context.vertex_grid_cell_size.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._vertex_grid_cell_size_)

        # check array length
        if len(self._surfaces_) != (self._num_rows_ * self._num_columns_):
            raise zserio.PythonRuntimeException("Wrong array length for field BdamSurfaceGrid.surfaces: "
                                                f"{len(self._surfaces_)} != {self._num_rows_ * self._num_columns_}!")
        self._surfaces_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._south_west_corner_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._surface_grid_cell_size_ = zserio.array.DeltaContext()
            self._num_rows_ = zserio.array.DeltaContext()
            self._num_columns_ = zserio.array.DeltaContext()
            self._long_side_error_l1_ = zserio.array.DeltaContext()
            self._short_side_error_l1_ = zserio.array.DeltaContext()
            self._short_side_error_l2_ = zserio.array.DeltaContext()
            self._vertex_grid_cell_size_ = zserio.array.DeltaContext()

        @property
        def south_west_corner(self):
            return self._south_west_corner_

        @property
        def surface_grid_cell_size(self):
            return self._surface_grid_cell_size_

        @property
        def num_rows(self):
            return self._num_rows_

        @property
        def num_columns(self):
            return self._num_columns_

        @property
        def long_side_error_l1(self):
            return self._long_side_error_l1_

        @property
        def short_side_error_l1(self):
            return self._short_side_error_l1_

        @property
        def short_side_error_l2(self):
            return self._short_side_error_l2_

        @property
        def vertex_grid_cell_size(self):
            return self._vertex_grid_cell_size_

    class _ZserioElementFactory_surfaces:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface.BdamSurface:
            del zserio_index
            return nds.display.types.bdam_surface.BdamSurface.from_reader(zserio_reader, self._owner._header_, self._owner._surface_grid_cell_size_, self._owner._vertex_grid_cell_size_)

        @staticmethod
        def create_packing_context() -> nds.display.types.bdam_surface.BdamSurface.ZserioPackingContext:
            return nds.display.types.bdam_surface.BdamSurface.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.bdam_surface.BdamSurface.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.bdam_surface.BdamSurface:
            del zserio_index
            return nds.display.types.bdam_surface.BdamSurface.from_reader_packed(zserio_context, zserio_reader, self._owner._header_, self._owner._surface_grid_cell_size_, self._owner._vertex_grid_cell_size_)
