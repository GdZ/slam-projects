# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift

class BdamLayerHeader:
    def __init__(
            self,
            shift_xy_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            shift_z_: nds.core.geometry.coord_shift.CoordShift = nds.core.geometry.coord_shift.CoordShift(),
            has_texture_: bool = bool()) -> None:
        self._shift_xy_ = shift_xy_
        self._shift_z_ = shift_z_
        self._has_texture_ = has_texture_

    @classmethod
    def from_reader(
            cls: typing.Type['BdamLayerHeader'],
            zserio_reader: zserio.BitStreamReader) -> 'BdamLayerHeader':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BdamLayerHeader'],
            zserio_context: BdamLayerHeader.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'BdamLayerHeader':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BdamLayerHeader):
            return ((self._shift_xy_ == other._shift_xy_) and
                    (self._shift_z_ == other._shift_z_) and
                    (self._has_texture_ == other._has_texture_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_xy_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_)

        return result

    @property
    def shift_xy(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_xy_

    @shift_xy.setter
    def shift_xy(self, shift_xy_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._shift_xy_ = shift_xy_

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @shift_z.setter
    def shift_z(self, shift_z_: nds.core.geometry.coord_shift.CoordShift) -> None:
        self._shift_z_ = shift_z_

    @property
    def has_texture(self) -> bool:
        return self._has_texture_

    @has_texture.setter
    def has_texture(self, has_texture_: bool) -> None:
        self._has_texture_ = has_texture_

    def init_packing_context(self, zserio_context: BdamLayerHeader.ZserioPackingContext) -> None:
        zserio_context.shift_xy.init(zserio.array.BitFieldArrayTraits(5), self._shift_xy_)
        zserio_context.shift_z.init(zserio.array.BitFieldArrayTraits(5), self._shift_z_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BdamLayerHeader.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.shift_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_xy_)
        end_bitposition += zserio_context.shift_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_z_)
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 5
        end_bitposition += 5
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BdamLayerHeader.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.shift_xy.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_xy_)
        end_bitposition += zserio_context.shift_z.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._shift_z_)
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._shift_xy_ = zserio_reader.read_bits(5)
        self._shift_z_ = zserio_reader.read_bits(5)
        self._has_texture_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: BdamLayerHeader.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._shift_xy_ = zserio_context.shift_xy.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._shift_z_ = zserio_context.shift_z.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

        self._has_texture_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._shift_xy_, 5)
        zserio_writer.write_bits(self._shift_z_, 5)
        zserio_writer.write_bool(self._has_texture_)

    def write_packed(self, zserio_context: BdamLayerHeader.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.shift_xy.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._shift_xy_)

        zserio_context.shift_z.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._shift_z_)

        zserio_writer.write_bool(self._has_texture_)

    class ZserioPackingContext:
        def __init__(self):
            self._shift_xy_ = zserio.array.DeltaContext()
            self._shift_z_ = zserio.array.DeltaContext()

        @property
        def shift_xy(self):
            return self._shift_xy_

        @property
        def shift_z(self):
            return self._shift_z_
