# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.render_surface

class BdamSurfaceTin:
    def __init__(
            self,
            num_index_bits_: int,
            render_surfaces_: typing.List[nds.display.types.render_surface.RenderSurface] = None,
            indices_: typing.List[int] = None) -> None:
        self._num_index_bits_ = num_index_bits_
        self._render_surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_render_surfaces(self)), render_surfaces_, is_auto=True)
        self._indices_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), indices_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['BdamSurfaceTin'],
            zserio_reader: zserio.BitStreamReader,
            num_index_bits_: int) -> 'BdamSurfaceTin':
        self = object.__new__(cls)
        self._num_index_bits_ = num_index_bits_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['BdamSurfaceTin'],
            zserio_context: BdamSurfaceTin.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_index_bits_: int) -> 'BdamSurfaceTin':
        self = object.__new__(cls)
        self._num_index_bits_ = num_index_bits_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, BdamSurfaceTin):
            return (self._num_index_bits_ == other._num_index_bits_ and
                    (self._render_surfaces_ == other._render_surfaces_) and
                    (self._indices_ == other._indices_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_index_bits_)
        result = zserio.hashcode.calc_hashcode_object(result, self._render_surfaces_)
        result = zserio.hashcode.calc_hashcode_object(result, self._indices_)

        return result

    @property
    def num_index_bits(self) -> int:
        return self._num_index_bits_

    @property
    def render_surfaces(self) -> typing.List[nds.display.types.render_surface.RenderSurface]:
        return self._render_surfaces_.raw_array

    @render_surfaces.setter
    def render_surfaces(self, render_surfaces_: typing.List[nds.display.types.render_surface.RenderSurface]) -> None:
        self._render_surfaces_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_render_surfaces(self)), render_surfaces_, is_auto=True)

    @property
    def indices(self) -> typing.List[int]:
        return self._indices_.raw_array

    @indices.setter
    def indices(self, indices_: typing.List[int]) -> None:
        self._indices_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), indices_, is_auto=True)

    def init_packing_context(self, zserio_context: BdamSurfaceTin.ZserioPackingContext) -> None:
        del zserio_context

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._render_surfaces_.bitsizeof(end_bitposition)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: BdamSurfaceTin.ZserioPackingContext, bitposition: int = 0) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition += self._render_surfaces_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._render_surfaces_.initialize_offsets(end_bitposition)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: BdamSurfaceTin.ZserioPackingContext, bitposition: int) -> int:
        del zserio_context

        end_bitposition = bitposition
        end_bitposition = self._render_surfaces_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._render_surfaces_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_render_surfaces(self)), zserio_reader, is_auto=True)
        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: BdamSurfaceTin.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        del zserio_context

        self._render_surfaces_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_render_surfaces(self)), zserio_reader, is_auto=True)

        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._render_surfaces_.write(zserio_writer)
        self._indices_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: BdamSurfaceTin.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        del zserio_context

        self._render_surfaces_.write_packed(zserio_writer)

        self._indices_.write_packed(zserio_writer)

    class ZserioPackingContext:
        pass

    class _ZserioElementFactory_render_surfaces:
        IS_OBJECT_PACKABLE = True

        def __init__(self, owner):
            self._owner = owner

        def create(self, zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.render_surface.RenderSurface:
            del zserio_index
            return nds.display.types.render_surface.RenderSurface.from_reader(zserio_reader, self._owner._num_index_bits_)

        @staticmethod
        def create_packing_context() -> nds.display.types.render_surface.RenderSurface.ZserioPackingContext:
            return nds.display.types.render_surface.RenderSurface.ZserioPackingContext()

        def create_packed(self, zserio_context: nds.display.types.render_surface.RenderSurface.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.render_surface.RenderSurface:
            del zserio_index
            return nds.display.types.render_surface.RenderSurface.from_reader_packed(zserio_context, zserio_reader, self._owner._num_index_bits_)
