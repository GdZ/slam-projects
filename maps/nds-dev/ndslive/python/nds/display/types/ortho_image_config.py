# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.ortho_image_condition_usage_type
import nds.display.types.ortho_image_content_type
import nds.display.types.ortho_image_format

class OrthoImageConfig:
    def __init__(
            self,
            format_: typing.Union[nds.display.types.ortho_image_format.OrthoImageFormat, None] = None,
            source_type_: typing.Union[nds.display.types.ortho_image_content_type.OrthoImageContentType, None] = None,
            usage_type_: typing.Union[nds.display.types.ortho_image_condition_usage_type.OrthoImageConditionUsageType, None] = None) -> None:
        self._format_ = format_
        self._source_type_ = source_type_
        self._usage_type_ = usage_type_

    @classmethod
    def from_reader(
            cls: typing.Type['OrthoImageConfig'],
            zserio_reader: zserio.BitStreamReader) -> 'OrthoImageConfig':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['OrthoImageConfig'],
            zserio_context: OrthoImageConfig.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'OrthoImageConfig':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, OrthoImageConfig):
            return ((self._format_ == other._format_) and
                    (self._source_type_ == other._source_type_) and
                    (self._usage_type_ == other._usage_type_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._format_)
        result = zserio.hashcode.calc_hashcode_object(result, self._source_type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._usage_type_)

        return result

    @property
    def format(self) -> typing.Union[nds.display.types.ortho_image_format.OrthoImageFormat, None]:
        return self._format_

    @format.setter
    def format(self, format_: typing.Union[nds.display.types.ortho_image_format.OrthoImageFormat, None]) -> None:
        self._format_ = format_

    @property
    def source_type(self) -> typing.Union[nds.display.types.ortho_image_content_type.OrthoImageContentType, None]:
        return self._source_type_

    @source_type.setter
    def source_type(self, source_type_: typing.Union[nds.display.types.ortho_image_content_type.OrthoImageContentType, None]) -> None:
        self._source_type_ = source_type_

    @property
    def usage_type(self) -> typing.Union[nds.display.types.ortho_image_condition_usage_type.OrthoImageConditionUsageType, None]:
        return self._usage_type_

    @usage_type.setter
    def usage_type(self, usage_type_: typing.Union[nds.display.types.ortho_image_condition_usage_type.OrthoImageConditionUsageType, None]) -> None:
        self._usage_type_ = usage_type_

    def init_packing_context(self, zserio_context: OrthoImageConfig.ZserioPackingContext) -> None:
        self._format_.init_packing_context(zserio_context.format)
        self._source_type_.init_packing_context(zserio_context.source_type)
        self._usage_type_.init_packing_context(zserio_context.usage_type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._format_.bitsizeof(end_bitposition)
        end_bitposition += self._source_type_.bitsizeof(end_bitposition)
        end_bitposition += self._usage_type_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: OrthoImageConfig.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._format_.bitsizeof_packed(zserio_context.format, end_bitposition)
        end_bitposition += self._source_type_.bitsizeof_packed(zserio_context.source_type, end_bitposition)
        end_bitposition += self._usage_type_.bitsizeof_packed(zserio_context.usage_type, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._format_.initialize_offsets(end_bitposition)
        end_bitposition = self._source_type_.initialize_offsets(end_bitposition)
        end_bitposition = self._usage_type_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: OrthoImageConfig.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._format_.initialize_offsets_packed(zserio_context.format, end_bitposition)
        end_bitposition = self._source_type_.initialize_offsets_packed(zserio_context.source_type, end_bitposition)
        end_bitposition = self._usage_type_.initialize_offsets_packed(zserio_context.usage_type, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._format_ = nds.display.types.ortho_image_format.OrthoImageFormat.from_reader(zserio_reader)
        self._source_type_ = nds.display.types.ortho_image_content_type.OrthoImageContentType.from_reader(zserio_reader)
        self._usage_type_ = nds.display.types.ortho_image_condition_usage_type.OrthoImageConditionUsageType.from_reader(zserio_reader)

    def read_packed(self, zserio_context: OrthoImageConfig.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._format_ = nds.display.types.ortho_image_format.OrthoImageFormat.from_reader_packed(zserio_context.format, zserio_reader)

        self._source_type_ = nds.display.types.ortho_image_content_type.OrthoImageContentType.from_reader_packed(zserio_context.source_type, zserio_reader)

        self._usage_type_ = nds.display.types.ortho_image_condition_usage_type.OrthoImageConditionUsageType.from_reader_packed(zserio_context.usage_type, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._format_.write(zserio_writer)
        self._source_type_.write(zserio_writer)
        self._usage_type_.write(zserio_writer)

    def write_packed(self, zserio_context: OrthoImageConfig.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._format_.write_packed(zserio_context.format, zserio_writer)

        self._source_type_.write_packed(zserio_context.source_type, zserio_writer)

        self._usage_type_.write_packed(zserio_context.usage_type, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._format_ = zserio.array.DeltaContext()
            self._source_type_ = zserio.array.DeltaContext()
            self._usage_type_ = zserio.array.DeltaContext()

        @property
        def format(self):
            return self._format_

        @property
        def source_type(self):
            return self._source_type_

        @property
        def usage_type(self):
            return self._usage_type_
