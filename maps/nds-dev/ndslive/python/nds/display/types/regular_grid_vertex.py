# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.display.types.normal_sphere
import nds.display.types.texture_coords

class RegularGridVertex:
    def __init__(
            self,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            has_texture_: bool,
            elevation_: int = int(),
            normal_: typing.Union[nds.display.types.normal_sphere.NormalSphere, None] = None,
            texture_coord_: typing.Optional[nds.display.types.texture_coords.TextureCoords] = None) -> None:
        self._shift_z_ = shift_z_
        self._has_texture_ = has_texture_
        self._elevation_ = elevation_
        self._normal_ = normal_
        self._texture_coord_ = texture_coord_

    @classmethod
    def from_reader(
            cls: typing.Type['RegularGridVertex'],
            zserio_reader: zserio.BitStreamReader,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            has_texture_: bool) -> 'RegularGridVertex':
        self = object.__new__(cls)
        self._shift_z_ = shift_z_
        self._has_texture_ = has_texture_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RegularGridVertex'],
            zserio_context: RegularGridVertex.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_z_: nds.core.geometry.coord_shift.CoordShift,
            has_texture_: bool) -> 'RegularGridVertex':
        self = object.__new__(cls)
        self._shift_z_ = shift_z_
        self._has_texture_ = has_texture_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RegularGridVertex):
            return (self._shift_z_ == other._shift_z_ and
                    self._has_texture_ == other._has_texture_ and
                    (self._elevation_ == other._elevation_) and
                    (self._normal_ == other._normal_) and
                    (not other.is_texture_coord_used() if not self.is_texture_coord_used() else (self._texture_coord_ == other._texture_coord_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_z_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._elevation_)
        result = zserio.hashcode.calc_hashcode_object(result, self._normal_)
        if self.is_texture_coord_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._texture_coord_)

        return result

    @property
    def shift_z(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_z_

    @property
    def has_texture(self) -> bool:
        return self._has_texture_

    @property
    def elevation(self) -> int:
        return self._elevation_

    @elevation.setter
    def elevation(self, elevation_: int) -> None:
        self._elevation_ = elevation_

    @property
    def normal(self) -> typing.Union[nds.display.types.normal_sphere.NormalSphere, None]:
        return self._normal_

    @normal.setter
    def normal(self, normal_: typing.Union[nds.display.types.normal_sphere.NormalSphere, None]) -> None:
        self._normal_ = normal_

    @property
    def texture_coord(self) -> typing.Optional[nds.display.types.texture_coords.TextureCoords]:
        return self._texture_coord_

    @texture_coord.setter
    def texture_coord(self, texture_coord_: typing.Optional[nds.display.types.texture_coords.TextureCoords]) -> None:
        self._texture_coord_ = texture_coord_

    def is_texture_coord_used(self) -> bool:
        return self._has_texture_ == True

    def is_texture_coord_set(self) -> bool:
        return not self._texture_coord_ is None

    def reset_texture_coord(self) -> None:
        self._texture_coord_ = None

    def init_packing_context(self, zserio_context: RegularGridVertex.ZserioPackingContext) -> None:
        zserio_context.elevation.init(zserio.array.SignedBitFieldArrayTraits(31 - self._shift_z_ + 1), self._elevation_)
        self._normal_.init_packing_context(zserio_context.normal)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 31 - self._shift_z_ + 1
        end_bitposition += self._normal_.bitsizeof(end_bitposition)
        if self.is_texture_coord_used():
            end_bitposition += self._texture_coord_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RegularGridVertex.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(31 - self._shift_z_ + 1), self._elevation_)
        end_bitposition += self._normal_.bitsizeof_packed(zserio_context.normal, end_bitposition)
        if self.is_texture_coord_used():
            end_bitposition += self._texture_coord_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 31 - self._shift_z_ + 1
        end_bitposition = self._normal_.initialize_offsets(end_bitposition)
        if self.is_texture_coord_used():
            end_bitposition = self._texture_coord_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RegularGridVertex.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.elevation.bitsizeof(zserio.array.SignedBitFieldArrayTraits(31 - self._shift_z_ + 1), self._elevation_)
        end_bitposition = self._normal_.initialize_offsets_packed(zserio_context.normal, end_bitposition)
        if self.is_texture_coord_used():
            end_bitposition = self._texture_coord_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._elevation_ = zserio_reader.read_signed_bits(31 - self._shift_z_ + 1)
        self._normal_ = nds.display.types.normal_sphere.NormalSphere.from_reader(zserio_reader)
        if self.is_texture_coord_used():
            self._texture_coord_ = nds.display.types.texture_coords.TextureCoords.from_reader(zserio_reader)
        else:
            self._texture_coord_ = None

    def read_packed(self, zserio_context: RegularGridVertex.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._elevation_ = zserio_context.elevation.read(zserio.array.SignedBitFieldArrayTraits(31 - self._shift_z_ + 1), zserio_reader)

        self._normal_ = nds.display.types.normal_sphere.NormalSphere.from_reader_packed(zserio_context.normal, zserio_reader)

        if self.is_texture_coord_used():
            self._texture_coord_ = nds.display.types.texture_coords.TextureCoords.from_reader(zserio_reader)
        else:
            self._texture_coord_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_signed_bits(self._elevation_, 31 - self._shift_z_ + 1)
        self._normal_.write(zserio_writer)
        if self.is_texture_coord_used():
            self._texture_coord_.write(zserio_writer)

    def write_packed(self, zserio_context: RegularGridVertex.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.elevation.write(zserio.array.SignedBitFieldArrayTraits(31 - self._shift_z_ + 1), zserio_writer, self._elevation_)

        self._normal_.write_packed(zserio_context.normal, zserio_writer)

        if self.is_texture_coord_used():
            self._texture_coord_.write(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._elevation_ = zserio.array.DeltaContext()
            self._normal_ = nds.display.types.normal_sphere.NormalSphere.ZserioPackingContext()

        @property
        def elevation(self):
            return self._elevation_

        @property
        def normal(self):
            return self._normal_
