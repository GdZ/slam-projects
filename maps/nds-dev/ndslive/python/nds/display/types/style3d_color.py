# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.color.color_rgba
import nds.display.types.color_id

class Style3DColor:
    def __init__(
            self,
            color_id_: nds.display.types.color_id.ColorId = nds.display.types.color_id.ColorId(),
            color_rgba_: typing.Union[nds.core.color.color_rgba.ColorRgba, None] = None) -> None:
        self._color_id_ = color_id_
        self._color_rgba_ = color_rgba_

    @classmethod
    def from_reader(
            cls: typing.Type['Style3DColor'],
            zserio_reader: zserio.BitStreamReader) -> 'Style3DColor':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Style3DColor'],
            zserio_context: Style3DColor.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Style3DColor':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Style3DColor):
            return ((self._color_id_ == other._color_id_) and
                    (self._color_rgba_ == other._color_rgba_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._color_id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._color_rgba_)

        return result

    @property
    def color_id(self) -> nds.display.types.color_id.ColorId:
        return self._color_id_

    @color_id.setter
    def color_id(self, color_id_: nds.display.types.color_id.ColorId) -> None:
        self._color_id_ = color_id_

    @property
    def color_rgba(self) -> typing.Union[nds.core.color.color_rgba.ColorRgba, None]:
        return self._color_rgba_

    @color_rgba.setter
    def color_rgba(self, color_rgba_: typing.Union[nds.core.color.color_rgba.ColorRgba, None]) -> None:
        self._color_rgba_ = color_rgba_

    def init_packing_context(self, zserio_context: Style3DColor.ZserioPackingContext) -> None:
        zserio_context.color_id.init(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        self._color_rgba_.init_packing_context(zserio_context.color_rgba)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._color_id_)
        end_bitposition += self._color_rgba_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Style3DColor.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.color_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        end_bitposition += self._color_rgba_.bitsizeof_packed(zserio_context.color_rgba, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._color_id_)
        end_bitposition = self._color_rgba_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Style3DColor.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.color_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._color_id_)
        end_bitposition = self._color_rgba_.initialize_offsets_packed(zserio_context.color_rgba, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_id_ = zserio_reader.read_varuint16()
        self._color_rgba_ = nds.core.color.color_rgba.ColorRgba.from_reader(zserio_reader)

    def read_packed(self, zserio_context: Style3DColor.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_id_ = zserio_context.color_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._color_rgba_ = nds.core.color.color_rgba.ColorRgba.from_reader_packed(zserio_context.color_rgba, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._color_id_)
        self._color_rgba_.write(zserio_writer)

    def write_packed(self, zserio_context: Style3DColor.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.color_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._color_id_)

        self._color_rgba_.write_packed(zserio_context.color_rgba, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._color_id_ = zserio.array.DeltaContext()
            self._color_rgba_ = nds.core.color.color_rgba.ColorRgba.ZserioPackingContext()

        @property
        def color_id(self):
            return self._color_id_

        @property
        def color_rgba(self):
            return self._color_rgba_
