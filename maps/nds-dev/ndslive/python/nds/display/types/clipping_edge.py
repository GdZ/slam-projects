# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.geometry.position2d

class ClippingEdge:
    def __init__(
            self,
            shift_: nds.core.geometry.coord_shift.CoordShift,
            start_position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None,
            end_position_: typing.Union[nds.core.geometry.position2d.Position2D, None] = None) -> None:
        self._shift_ = shift_
        self._start_position_ = start_position_
        self._end_position_ = end_position_

    @classmethod
    def from_reader(
            cls: typing.Type['ClippingEdge'],
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'ClippingEdge':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['ClippingEdge'],
            zserio_context: ClippingEdge.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            shift_: nds.core.geometry.coord_shift.CoordShift) -> 'ClippingEdge':
        self = object.__new__(cls)
        self._shift_ = shift_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ClippingEdge):
            return (self._shift_ == other._shift_ and
                    (self._start_position_ == other._start_position_) and
                    (self._end_position_ == other._end_position_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._shift_)
        result = zserio.hashcode.calc_hashcode_object(result, self._start_position_)
        result = zserio.hashcode.calc_hashcode_object(result, self._end_position_)

        return result

    @property
    def shift(self) -> nds.core.geometry.coord_shift.CoordShift:
        return self._shift_

    @property
    def start_position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._start_position_

    @start_position.setter
    def start_position(self, start_position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._start_position_ = start_position_

    @property
    def end_position(self) -> typing.Union[nds.core.geometry.position2d.Position2D, None]:
        return self._end_position_

    @end_position.setter
    def end_position(self, end_position_: typing.Union[nds.core.geometry.position2d.Position2D, None]) -> None:
        self._end_position_ = end_position_

    def init_packing_context(self, zserio_context: ClippingEdge.ZserioPackingContext) -> None:
        self._start_position_.init_packing_context(zserio_context.start_position)
        self._end_position_.init_packing_context(zserio_context.end_position)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_position_.bitsizeof(end_bitposition)
        end_bitposition += self._end_position_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: ClippingEdge.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._start_position_.bitsizeof_packed(zserio_context.start_position, end_bitposition)
        end_bitposition += self._end_position_.bitsizeof_packed(zserio_context.end_position, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_position_.initialize_offsets(end_bitposition)
        end_bitposition = self._end_position_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: ClippingEdge.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._start_position_.initialize_offsets_packed(zserio_context.start_position, end_bitposition)
        end_bitposition = self._end_position_.initialize_offsets_packed(zserio_context.end_position, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._shift_)
        self._end_position_ = nds.core.geometry.position2d.Position2D.from_reader(zserio_reader, self._shift_)

    def read_packed(self, zserio_context: ClippingEdge.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.start_position, zserio_reader, self._shift_)

        self._end_position_ = nds.core.geometry.position2d.Position2D.from_reader_packed(zserio_context.end_position, zserio_reader, self._shift_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._start_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field ClippingEdge.startPosition: "
                                                f"{self._start_position_.shift} != {self._shift_}!")
        self._start_position_.write(zserio_writer)

        # check parameters
        if self._end_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field ClippingEdge.endPosition: "
                                                f"{self._end_position_.shift} != {self._shift_}!")
        self._end_position_.write(zserio_writer)

    def write_packed(self, zserio_context: ClippingEdge.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check parameters
        if self._start_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field ClippingEdge.startPosition: "
                                                f"{self._start_position_.shift} != {self._shift_}!")
        self._start_position_.write_packed(zserio_context.start_position, zserio_writer)

        # check parameters
        if self._end_position_.shift != (self._shift_):
            raise zserio.PythonRuntimeException("Wrong parameter shift for field ClippingEdge.endPosition: "
                                                f"{self._end_position_.shift} != {self._shift_}!")
        self._end_position_.write_packed(zserio_context.end_position, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._start_position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()
            self._end_position_ = nds.core.geometry.position2d.Position2D.ZserioPackingContext()

        @property
        def start_position(self):
            return self._start_position_

        @property
        def end_position(self):
            return self._end_position_
