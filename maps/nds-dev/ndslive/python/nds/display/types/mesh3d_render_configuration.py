# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.color_mode
import nds.display.types.mesh3d_render_layer_header

class Mesh3DRenderConfiguration:
    def __init__(
            self,
            header_: nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader,
            color_mode_: typing.Union[nds.display.types.color_mode.ColorMode, None] = None,
            has_texture_coords_: bool = bool(),
            has_texture_coords_additional_: bool = bool(),
            has_normals_: bool = bool()) -> None:
        self._header_ = header_
        self._color_mode_ = color_mode_
        self._has_texture_coords_ = has_texture_coords_
        self._has_texture_coords_additional_ = has_texture_coords_additional_
        self._has_normals_ = has_normals_

    @classmethod
    def from_reader(
            cls: typing.Type['Mesh3DRenderConfiguration'],
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader) -> 'Mesh3DRenderConfiguration':
        self = object.__new__(cls)
        self._header_ = header_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Mesh3DRenderConfiguration'],
            zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            header_: nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader) -> 'Mesh3DRenderConfiguration':
        self = object.__new__(cls)
        self._header_ = header_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Mesh3DRenderConfiguration):
            return (self._header_ == other._header_ and
                    (self._color_mode_ == other._color_mode_) and
                    (self._has_texture_coords_ == other._has_texture_coords_) and
                    (self._has_texture_coords_additional_ == other._has_texture_coords_additional_) and
                    (self._has_normals_ == other._has_normals_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._header_)
        result = zserio.hashcode.calc_hashcode_object(result, self._color_mode_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_coords_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_texture_coords_additional_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_normals_)

        return result

    @property
    def header(self) -> nds.display.types.mesh3d_render_layer_header.Mesh3DRenderLayerHeader:
        return self._header_

    @property
    def color_mode(self) -> typing.Union[nds.display.types.color_mode.ColorMode, None]:
        return self._color_mode_

    @color_mode.setter
    def color_mode(self, color_mode_: typing.Union[nds.display.types.color_mode.ColorMode, None]) -> None:
        self._color_mode_ = color_mode_

    @property
    def has_texture_coords(self) -> bool:
        return self._has_texture_coords_

    @has_texture_coords.setter
    def has_texture_coords(self, has_texture_coords_: bool) -> None:
        self._has_texture_coords_ = has_texture_coords_

    @property
    def has_texture_coords_additional(self) -> bool:
        return self._has_texture_coords_additional_

    @has_texture_coords_additional.setter
    def has_texture_coords_additional(self, has_texture_coords_additional_: bool) -> None:
        self._has_texture_coords_additional_ = has_texture_coords_additional_

    @property
    def has_normals(self) -> bool:
        return self._has_normals_

    @has_normals.setter
    def has_normals(self, has_normals_: bool) -> None:
        self._has_normals_ = has_normals_

    def uses_color_per_vertex(self) -> bool:
        return self._header_.uses_colors() and self._color_mode_ == nds.display.types.color_mode.ColorMode.COLOR_PER_VERTEX

    def uses_color_per_render_group(self) -> bool:
        return self._header_.uses_colors() and self._color_mode_ == nds.display.types.color_mode.ColorMode.COLOR_PER_RENDER_GROUP

    def init_packing_context(self, zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext) -> None:
        self._color_mode_.init_packing_context(zserio_context.color_mode)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._color_mode_.bitsizeof(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._color_mode_.bitsizeof_packed(zserio_context.color_mode, end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._color_mode_.initialize_offsets(end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._color_mode_.initialize_offsets_packed(zserio_context.color_mode, end_bitposition)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_mode_ = nds.display.types.color_mode.ColorMode.from_reader(zserio_reader)
        self._has_texture_coords_ = zserio_reader.read_bool()
        self._has_texture_coords_additional_ = zserio_reader.read_bool()
        self._has_normals_ = zserio_reader.read_bool()

    def read_packed(self, zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._color_mode_ = nds.display.types.color_mode.ColorMode.from_reader_packed(zserio_context.color_mode, zserio_reader)

        self._has_texture_coords_ = zserio_reader.read_bool()

        self._has_texture_coords_additional_ = zserio_reader.read_bool()

        self._has_normals_ = zserio_reader.read_bool()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._color_mode_.write(zserio_writer)
        zserio_writer.write_bool(self._has_texture_coords_)
        zserio_writer.write_bool(self._has_texture_coords_additional_)
        zserio_writer.write_bool(self._has_normals_)

    def write_packed(self, zserio_context: Mesh3DRenderConfiguration.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._color_mode_.write_packed(zserio_context.color_mode, zserio_writer)

        zserio_writer.write_bool(self._has_texture_coords_)

        zserio_writer.write_bool(self._has_texture_coords_additional_)

        zserio_writer.write_bool(self._has_normals_)

    class ZserioPackingContext:
        def __init__(self):
            self._color_mode_ = zserio.array.DeltaContext()

        @property
        def color_mode(self):
            return self._color_mode_
