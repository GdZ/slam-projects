# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.reference.types.texture_section_number
import nds.display.types.texture_section

class TextureSectionArray:
    def __init__(
            self,
            num_sections_: nds.display.reference.types.texture_section_number.TextureSectionNumber = nds.display.reference.types.texture_section_number.TextureSectionNumber(),
            sections_: typing.List[nds.display.types.texture_section.TextureSection] = None) -> None:
        self._num_sections_ = num_sections_
        self._sections_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_sections()), sections_)

    @classmethod
    def from_reader(
            cls: typing.Type['TextureSectionArray'],
            zserio_reader: zserio.BitStreamReader) -> 'TextureSectionArray':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['TextureSectionArray'],
            zserio_context: TextureSectionArray.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'TextureSectionArray':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, TextureSectionArray):
            return ((self._num_sections_ == other._num_sections_) and
                    (self._sections_ == other._sections_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_sections_)
        result = zserio.hashcode.calc_hashcode_object(result, self._sections_)

        return result

    @property
    def num_sections(self) -> nds.display.reference.types.texture_section_number.TextureSectionNumber:
        return self._num_sections_

    @num_sections.setter
    def num_sections(self, num_sections_: nds.display.reference.types.texture_section_number.TextureSectionNumber) -> None:
        self._num_sections_ = num_sections_

    @property
    def sections(self) -> typing.List[nds.display.types.texture_section.TextureSection]:
        return self._sections_.raw_array

    @sections.setter
    def sections(self, sections_: typing.List[nds.display.types.texture_section.TextureSection]) -> None:
        self._sections_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_sections()), sections_)

    def init_packing_context(self, zserio_context: TextureSectionArray.ZserioPackingContext) -> None:
        zserio_context.num_sections.init(zserio.array.VarUInt16ArrayTraits(), self._num_sections_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_sections_)
        end_bitposition += self._sections_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: TextureSectionArray.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_sections.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_sections_)
        end_bitposition += self._sections_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._num_sections_)
        end_bitposition = self._sections_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: TextureSectionArray.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_sections.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._num_sections_)
        end_bitposition = self._sections_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_sections_ = zserio_reader.read_varuint16()
        self._sections_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_sections()), zserio_reader, self._num_sections_)

    def read_packed(self, zserio_context: TextureSectionArray.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_sections_ = zserio_context.num_sections.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._sections_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_sections()), zserio_reader, self._num_sections_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._num_sections_)

        # check array length
        if len(self._sections_) != (self._num_sections_):
            raise zserio.PythonRuntimeException("Wrong array length for field TextureSectionArray.sections: "
                                                f"{len(self._sections_)} != {self._num_sections_}!")
        self._sections_.write(zserio_writer)

    def write_packed(self, zserio_context: TextureSectionArray.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_sections.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._num_sections_)

        # check array length
        if len(self._sections_) != (self._num_sections_):
            raise zserio.PythonRuntimeException("Wrong array length for field TextureSectionArray.sections: "
                                                f"{len(self._sections_)} != {self._num_sections_}!")
        self._sections_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_sections_ = zserio.array.DeltaContext()

        @property
        def num_sections(self):
            return self._num_sections_

    class _ZserioElementFactory_sections:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_section.TextureSection:
            del zserio_index
            return nds.display.types.texture_section.TextureSection.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.display.types.texture_section.TextureSection.ZserioPackingContext:
            return nds.display.types.texture_section.TextureSection.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.display.types.texture_section.TextureSection.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.display.types.texture_section.TextureSection:
            del zserio_index
            return nds.display.types.texture_section.TextureSection.from_reader_packed(zserio_context, zserio_reader)
