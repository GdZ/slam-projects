# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class DisplayPointType(zserio.Enum):
    DISPLAY_POINT = 0
    POINT_MUNICIPALITY_CENTER = 1
    POINT_MUNICIPALITY_SUBDIVISION_CENTER = 2
    POINT_HAMLET = 3
    POINT_MOUNTAIN_PEAK = 4
    POINT_NEIGHBORHOOD = 5
    POINT_CONTROLLED_ACCESS_EXIT = 6
    POINT_CONTROLLED_ACCESS_ENTRY = 7
    POINT_CONTROLLED_ACCESS_INTERSECTION = 8
    POINT_COUNTRY = 9
    POINT_SUB_COUNTRY = 10
    POINT_TRAFFIC_LIGHT = 11
    POINT_SEA_OCEAN = 12
    POINT_SUB_COUNTRY_SET = 13
    POINT_COUNTY = 14
    POINT_CITY_BLOCK = 15
    POINT_ISLAND = 16
    POINT_AUTONOMOUS_REGION = 17
    POINT_MUNICIPALITY_CENTER_CAPITAL = 18
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY = 19
    POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY = 20
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY = 21
    POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET = 22
    POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET = 23
    POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE = 24

    @classmethod
    def from_name(cls: typing.Type['DisplayPointType'], item_name: str) -> 'DisplayPointType':
        if item_name == 'DISPLAY_POINT':
            item = DisplayPointType.DISPLAY_POINT
        elif item_name == 'POINT_MUNICIPALITY_CENTER':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER
        elif item_name == 'POINT_MUNICIPALITY_SUBDIVISION_CENTER':
            item = DisplayPointType.POINT_MUNICIPALITY_SUBDIVISION_CENTER
        elif item_name == 'POINT_HAMLET':
            item = DisplayPointType.POINT_HAMLET
        elif item_name == 'POINT_MOUNTAIN_PEAK':
            item = DisplayPointType.POINT_MOUNTAIN_PEAK
        elif item_name == 'POINT_NEIGHBORHOOD':
            item = DisplayPointType.POINT_NEIGHBORHOOD
        elif item_name == 'POINT_CONTROLLED_ACCESS_EXIT':
            item = DisplayPointType.POINT_CONTROLLED_ACCESS_EXIT
        elif item_name == 'POINT_CONTROLLED_ACCESS_ENTRY':
            item = DisplayPointType.POINT_CONTROLLED_ACCESS_ENTRY
        elif item_name == 'POINT_CONTROLLED_ACCESS_INTERSECTION':
            item = DisplayPointType.POINT_CONTROLLED_ACCESS_INTERSECTION
        elif item_name == 'POINT_COUNTRY':
            item = DisplayPointType.POINT_COUNTRY
        elif item_name == 'POINT_SUB_COUNTRY':
            item = DisplayPointType.POINT_SUB_COUNTRY
        elif item_name == 'POINT_TRAFFIC_LIGHT':
            item = DisplayPointType.POINT_TRAFFIC_LIGHT
        elif item_name == 'POINT_SEA_OCEAN':
            item = DisplayPointType.POINT_SEA_OCEAN
        elif item_name == 'POINT_SUB_COUNTRY_SET':
            item = DisplayPointType.POINT_SUB_COUNTRY_SET
        elif item_name == 'POINT_COUNTY':
            item = DisplayPointType.POINT_COUNTY
        elif item_name == 'POINT_CITY_BLOCK':
            item = DisplayPointType.POINT_CITY_BLOCK
        elif item_name == 'POINT_ISLAND':
            item = DisplayPointType.POINT_ISLAND
        elif item_name == 'POINT_AUTONOMOUS_REGION':
            item = DisplayPointType.POINT_AUTONOMOUS_REGION
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTY
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_COUNTRY_SET
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_SUB_COUNTRY_SET
        elif item_name == 'POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE':
            item = DisplayPointType.POINT_MUNICIPALITY_CENTER_CAPITAL_ZONE
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'DisplayPointType'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['DisplayPointType'], reader: zserio.BitStreamReader) -> 'DisplayPointType':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['DisplayPointType'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'DisplayPointType':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
