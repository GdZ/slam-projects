# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.display.types.material

class RenderSurfacePart:
    def __init__(
            self,
            num_index_bits_: int,
            material_: typing.Optional[nds.display.types.material.Material] = None,
            indices_: typing.List[int] = None) -> None:
        self._num_index_bits_ = num_index_bits_
        self._material_ = material_
        self._indices_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), indices_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['RenderSurfacePart'],
            zserio_reader: zserio.BitStreamReader,
            num_index_bits_: int) -> 'RenderSurfacePart':
        self = object.__new__(cls)
        self._num_index_bits_ = num_index_bits_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RenderSurfacePart'],
            zserio_context: RenderSurfacePart.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            num_index_bits_: int) -> 'RenderSurfacePart':
        self = object.__new__(cls)
        self._num_index_bits_ = num_index_bits_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RenderSurfacePart):
            return (self._num_index_bits_ == other._num_index_bits_ and
                    (not other.is_material_used() if not self.is_material_used() else (self._material_ == other._material_)) and
                    (self._indices_ == other._indices_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._num_index_bits_)
        if self.is_material_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._material_)
        result = zserio.hashcode.calc_hashcode_object(result, self._indices_)

        return result

    @property
    def num_index_bits(self) -> int:
        return self._num_index_bits_

    @property
    def material(self) -> typing.Optional[nds.display.types.material.Material]:
        return self._material_

    @material.setter
    def material(self, material_: typing.Optional[nds.display.types.material.Material]) -> None:
        self._material_ = material_

    def is_material_used(self) -> bool:
        return self.is_material_set()

    def is_material_set(self) -> bool:
        return not self._material_ is None

    def reset_material(self) -> None:
        self._material_ = None

    @property
    def indices(self) -> typing.List[int]:
        return self._indices_.raw_array

    @indices.setter
    def indices(self, indices_: typing.List[int]) -> None:
        self._indices_ = zserio.array.Array(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), indices_, is_auto=True)

    def init_packing_context(self, zserio_context: RenderSurfacePart.ZserioPackingContext) -> None:
        if self.is_material_used():
            self._material_.init_packing_context(zserio_context.material)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_material_used():
            end_bitposition += self._material_.bitsizeof(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RenderSurfacePart.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_material_used():
            end_bitposition += self._material_.bitsizeof_packed(zserio_context.material, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition += self._indices_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_material_used():
            end_bitposition = self._material_.initialize_offsets(end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RenderSurfacePart.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += 1
        if self.is_material_used():
            end_bitposition = self._material_.initialize_offsets_packed(zserio_context.material, end_bitposition)
        end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
        end_bitposition = self._indices_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._material_ = nds.display.types.material.Material.from_reader(zserio_reader)
        else:
            self._material_ = None
        zserio_reader.alignto(8)
        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: RenderSurfacePart.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        if zserio_reader.read_bool():
            self._material_ = nds.display.types.material.Material.from_reader_packed(zserio_context.material, zserio_reader)
        else:
            self._material_ = None

        zserio_reader.alignto(8)
        self._indices_ = zserio.array.Array.from_reader_packed(zserio.array.BitFieldArrayTraits(self._num_index_bits_ + 1), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_material_used():
            zserio_writer.write_bool(True)
            self._material_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)
        zserio_writer.alignto(8)
        self._indices_.write_packed(zserio_writer)

    def write_packed(self, zserio_context: RenderSurfacePart.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        if self.is_material_used():
            zserio_writer.write_bool(True)
            self._material_.write_packed(zserio_context.material, zserio_writer)
        else:
            zserio_writer.write_bool(False)

        zserio_writer.alignto(8)
        self._indices_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._material_ = nds.display.types.material.Material.ZserioPackingContext()

        @property
        def material(self):
            return self._material_
