# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class WarningSign(zserio.Enum):
    GENERAL_HAZARD = 0
    PASS_LEFT_OR_RIGHT_OF_OBSTACLE = 1
    PASS_LEFT_OF_OBSTACLE = 2
    PASS_RIGHT_OF_OBSTACLE = 3
    CATTLE = 4
    ANIMALS = 5
    ROAD_WORKS = 6
    LIVING_STREET_ENTRY = 7
    LIVING_STREET_EXIT = 8
    CURVE_RIGHT = 9
    CURVE_LEFT = 10
    TRUCK_ROLLOVER = 11
    FOG_AREA = 12
    CURVE_RIGHT_THEN_LEFT = 13
    CURVE_LEFT_THEN_RIGHT = 14
    TIRE_CHAINS_MANDATORY = 15
    HIJACKING_HOTSPOT = 16
    CURVY_ROAD = 17
    REVERSE_BENDS = 18
    ROUNDABOUT_AHEAD = 19
    NO_OVERTAKING_FOR_TRUCKS = 20
    NO_OVERTAKING_FOR_TRUCKS_END = 21
    DANGEROUS_INTERSECTION = 22
    OVERPASS_AHEAD = 23
    TUNNEL = 24
    FERRY_TERMINAL = 25
    NARROW_BRIDGE = 26
    NO_IDLING = 27
    HUMPBACK_BRIDGE = 28
    EMBANKMENT_ON_THE_RIGHT = 29
    EMBANKMENT_ON_THE_LEFT = 30
    LIGHT_SIGNALS = 31
    YIELD = 32
    STOP = 33
    PRIORITY_ROAD = 34
    INTERSECTION = 35
    CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD = 36
    CROSSING_WITH_PRIORITY_TO_THE_RIGHT = 37
    BRANCH_TO_THE_RIGHT = 38
    BRANCH_TO_THE_LEFT = 39
    CARRIAGEWAY_NARROWS = 40
    CARRIAGEWAY_NARROWS_RIGHT = 41
    CARRIAGEWAY_NARROWS_LEFT = 42
    LANE_MERGE_FROM_RIGHT = 43
    LANE_MERGE_FROM_LEFT = 44
    LANE_MERGE_CENTER = 45
    NO_OVERTAKING = 46
    NO_OVERTAKING_END = 47
    PROTECTED_PASSING_END = 48
    PROTECTED_PASSING = 49
    PEDESTRIANS = 50
    PEDESTRIAN_CROSSING = 51
    CHILDREN = 52
    SCHOOL_ZONE = 53
    CYCLISTS = 54
    TWO_WAY_TRAFFIC = 55
    RAILROAD_CROSSING_WITH_GATES = 56
    RAILROAD_CROSSING_WITHOUT_GATES = 57
    RAILROAD_CROSSING = 58
    TRAMWAY_CROSSING = 59
    FALLING_ROCKS = 60
    FALLING_ROCKS_ON_THE_LEFT = 61
    FALLING_ROCKS_ON_THE_RIGHT = 62
    STEEP_DROP_ON_LEFT = 63
    STEEP_DROP_ON_RIGHT = 64
    SLIPPERY_ROAD = 65
    STEEP_INCLINE = 66
    STEEP_DECLINE = 67
    UNEVEN_ROAD = 68
    BUMP = 69
    DIP = 70
    ROAD_FLOODS = 71
    ICY_ROAD = 72
    WIND = 73
    TRAFFIC_CONGESTION = 74
    HIGH_ACCIDENT_AREA = 75
    CITY_ENTRY = 76
    AUDIBLE_WARNING = 77
    END_OF_ALL_RESTRICTIONS = 78
    PRIORITY_OVER_ONCOMING = 79
    YIELD_TO_ONCOMING = 80
    CITY_EXIT = 81
    VILLAGE_AHEAD = 82
    SPEED_CAMERA = 83
    TRAFFIC_ENFORCEMENT_CAMERA = 84
    SPEED_LIMIT = 85
    SPEED_LIMIT_END = 86
    MOVABLE_BRIDGE = 87
    SLOW_DOWN = 88
    INTERSECTION_T_RIGHT = 89
    INTERSECTION_T_LEFT = 90
    INTERSECTION_T_LEFT_RIGHT = 91
    INTERSECTION_Y = 92
    PRIORITY_ROAD_END = 93
    USE_LOW_GEAR = 94
    NO_COMPRESSION_BRAKING = 95
    WAITING_LINE = 96
    DONT_STOP_ZONE = 97
    LANE_USED_IN_BOTH_DIRECTIONS = 98
    HONKING_PROHIBITED = 99
    FASTEN_SEAT_BELT = 100
    DEAD_END = 101
    ADVISORY_SPEED_LIMIT = 102
    SPEED_LIMIT_NIGHT = 103
    MINIMUM_SPEED = 104
    VARIABLE_SPEED_LIMIT = 105
    VARIABLE = 106
    UNPROTECTED_LEFT_TURN = 107
    USE_LOW_GEAR_END = 108
    NO_COMPRESSION_BRAKING_END = 109
    DOUBLE_HAIRPIN_CURVE = 110
    TRIPLE_HAIRPIN_CURVE = 111
    EMBANKMENT = 112
    HILL = 113
    PROTECTED_PASSING_LEFT = 114
    PROTECTED_PASSING_RIGHT = 115
    RISK_OF_GROUNDING = 116
    CURVY_ROAD_LEFT = 117
    CURVY_ROAD_RIGHT = 118
    ADVISORY_SPEED_LIMIT_END = 119
    MOTORWAY = 120
    MOTORWAY_END = 121
    ONEWAY = 122
    BICYCLE_PATH = 123
    BICYCLE_PATH_END = 124
    HEIGHT_RESTRICTION = 125
    LENGTH_RESTRICTION = 126
    WIDTH_RESTRICTION = 127
    WEIGHT_RESTRICTION = 128
    PASSING_RESTRICTION = 129
    TURN_RESTRICTION = 130
    CARS_PROHIBITED = 131
    VEHICLES_PROHIBITED = 132
    PEDESTRIANS_PROHIBITED = 133
    PEDESTRIAN_ZONE = 134
    PEDESTRIAN_ZONE_END = 135
    DO_NOT_ENTER = 136
    TRUCK_SPEED_LIMIT = 137
    TRUCK_SPEED_LIMIT_END = 138
    MINIMUM_SPEED_END = 139
    HAMLET_ENTRY = 140
    HAMLET_EXIT = 141
    MOTOR_VEHICLE_ROAD = 142
    MOTOR_VEHICLE_ROAD_END = 143
    PEDESTRIAN_PATH = 144
    PEDESTRIAN_PATH_END = 145
    GOOD_LUCK = 146
    NO_TURN_ON_RED = 147
    TURN_ON_RED_ALLOWED = 148
    NO_LEFT_TURN = 149
    NO_RIGHT_TURN = 150
    NO_STRAIGHT_THROUGH = 151
    NO_LEFT_OR_RIGHT_TURN = 152
    NO_STRAIGHT_THROUGH_OR_LEFT_TURN = 153
    NO_STRAIGHT_THROUGH_OR_RIGHT_TURN = 154
    STRAIGHT_THROUGH_ONLY = 155
    LEFT_TURN_ONLY = 156
    RIGHT_TURN_ONLY = 157
    STRAIGHT_THROUGH_OR_LEFT_TURN_ONLY = 158
    STRAIGHT_THROUGH_OR_RIGHT_TURN_ONLY = 159
    LEFT_OR_RIGHT_TURN_ONLY = 160
    NO_U_TURN = 161
    U_TURN_ONLY = 162
    U_TURN_ALLOWED = 163
    CROSSING_WITH_PRIORITY_TO_THE_LEFT = 164
    UNPROTECTED_RIGHT_TURN = 165
    ROUNDABOUT = 166
    SPEED_LIMIT_ZONE = 167
    SPEED_LIMIT_ZONE_END = 168
    BICYCLE_ZONE = 169
    BICYCLE_ZONE_END = 170
    SCHOOL_ZONE_END = 171

    @classmethod
    def from_name(cls: typing.Type['WarningSign'], item_name: str) -> 'WarningSign':
        if item_name == 'GENERAL_HAZARD':
            item = WarningSign.GENERAL_HAZARD
        elif item_name == 'PASS_LEFT_OR_RIGHT_OF_OBSTACLE':
            item = WarningSign.PASS_LEFT_OR_RIGHT_OF_OBSTACLE
        elif item_name == 'PASS_LEFT_OF_OBSTACLE':
            item = WarningSign.PASS_LEFT_OF_OBSTACLE
        elif item_name == 'PASS_RIGHT_OF_OBSTACLE':
            item = WarningSign.PASS_RIGHT_OF_OBSTACLE
        elif item_name == 'CATTLE':
            item = WarningSign.CATTLE
        elif item_name == 'ANIMALS':
            item = WarningSign.ANIMALS
        elif item_name == 'ROAD_WORKS':
            item = WarningSign.ROAD_WORKS
        elif item_name == 'LIVING_STREET_ENTRY':
            item = WarningSign.LIVING_STREET_ENTRY
        elif item_name == 'LIVING_STREET_EXIT':
            item = WarningSign.LIVING_STREET_EXIT
        elif item_name == 'CURVE_RIGHT':
            item = WarningSign.CURVE_RIGHT
        elif item_name == 'CURVE_LEFT':
            item = WarningSign.CURVE_LEFT
        elif item_name == 'TRUCK_ROLLOVER':
            item = WarningSign.TRUCK_ROLLOVER
        elif item_name == 'FOG_AREA':
            item = WarningSign.FOG_AREA
        elif item_name == 'CURVE_RIGHT_THEN_LEFT':
            item = WarningSign.CURVE_RIGHT_THEN_LEFT
        elif item_name == 'CURVE_LEFT_THEN_RIGHT':
            item = WarningSign.CURVE_LEFT_THEN_RIGHT
        elif item_name == 'TIRE_CHAINS_MANDATORY':
            item = WarningSign.TIRE_CHAINS_MANDATORY
        elif item_name == 'HIJACKING_HOTSPOT':
            item = WarningSign.HIJACKING_HOTSPOT
        elif item_name == 'CURVY_ROAD':
            item = WarningSign.CURVY_ROAD
        elif item_name == 'REVERSE_BENDS':
            item = WarningSign.REVERSE_BENDS
        elif item_name == 'ROUNDABOUT_AHEAD':
            item = WarningSign.ROUNDABOUT_AHEAD
        elif item_name == 'NO_OVERTAKING_FOR_TRUCKS':
            item = WarningSign.NO_OVERTAKING_FOR_TRUCKS
        elif item_name == 'NO_OVERTAKING_FOR_TRUCKS_END':
            item = WarningSign.NO_OVERTAKING_FOR_TRUCKS_END
        elif item_name == 'DANGEROUS_INTERSECTION':
            item = WarningSign.DANGEROUS_INTERSECTION
        elif item_name == 'OVERPASS_AHEAD':
            item = WarningSign.OVERPASS_AHEAD
        elif item_name == 'TUNNEL':
            item = WarningSign.TUNNEL
        elif item_name == 'FERRY_TERMINAL':
            item = WarningSign.FERRY_TERMINAL
        elif item_name == 'NARROW_BRIDGE':
            item = WarningSign.NARROW_BRIDGE
        elif item_name == 'NO_IDLING':
            item = WarningSign.NO_IDLING
        elif item_name == 'HUMPBACK_BRIDGE':
            item = WarningSign.HUMPBACK_BRIDGE
        elif item_name == 'EMBANKMENT_ON_THE_RIGHT':
            item = WarningSign.EMBANKMENT_ON_THE_RIGHT
        elif item_name == 'EMBANKMENT_ON_THE_LEFT':
            item = WarningSign.EMBANKMENT_ON_THE_LEFT
        elif item_name == 'LIGHT_SIGNALS':
            item = WarningSign.LIGHT_SIGNALS
        elif item_name == 'YIELD':
            item = WarningSign.YIELD
        elif item_name == 'STOP':
            item = WarningSign.STOP
        elif item_name == 'PRIORITY_ROAD':
            item = WarningSign.PRIORITY_ROAD
        elif item_name == 'INTERSECTION':
            item = WarningSign.INTERSECTION
        elif item_name == 'CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD':
            item = WarningSign.CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD
        elif item_name == 'CROSSING_WITH_PRIORITY_TO_THE_RIGHT':
            item = WarningSign.CROSSING_WITH_PRIORITY_TO_THE_RIGHT
        elif item_name == 'BRANCH_TO_THE_RIGHT':
            item = WarningSign.BRANCH_TO_THE_RIGHT
        elif item_name == 'BRANCH_TO_THE_LEFT':
            item = WarningSign.BRANCH_TO_THE_LEFT
        elif item_name == 'CARRIAGEWAY_NARROWS':
            item = WarningSign.CARRIAGEWAY_NARROWS
        elif item_name == 'CARRIAGEWAY_NARROWS_RIGHT':
            item = WarningSign.CARRIAGEWAY_NARROWS_RIGHT
        elif item_name == 'CARRIAGEWAY_NARROWS_LEFT':
            item = WarningSign.CARRIAGEWAY_NARROWS_LEFT
        elif item_name == 'LANE_MERGE_FROM_RIGHT':
            item = WarningSign.LANE_MERGE_FROM_RIGHT
        elif item_name == 'LANE_MERGE_FROM_LEFT':
            item = WarningSign.LANE_MERGE_FROM_LEFT
        elif item_name == 'LANE_MERGE_CENTER':
            item = WarningSign.LANE_MERGE_CENTER
        elif item_name == 'NO_OVERTAKING':
            item = WarningSign.NO_OVERTAKING
        elif item_name == 'NO_OVERTAKING_END':
            item = WarningSign.NO_OVERTAKING_END
        elif item_name == 'PROTECTED_PASSING_END':
            item = WarningSign.PROTECTED_PASSING_END
        elif item_name == 'PROTECTED_PASSING':
            item = WarningSign.PROTECTED_PASSING
        elif item_name == 'PEDESTRIANS':
            item = WarningSign.PEDESTRIANS
        elif item_name == 'PEDESTRIAN_CROSSING':
            item = WarningSign.PEDESTRIAN_CROSSING
        elif item_name == 'CHILDREN':
            item = WarningSign.CHILDREN
        elif item_name == 'SCHOOL_ZONE':
            item = WarningSign.SCHOOL_ZONE
        elif item_name == 'CYCLISTS':
            item = WarningSign.CYCLISTS
        elif item_name == 'TWO_WAY_TRAFFIC':
            item = WarningSign.TWO_WAY_TRAFFIC
        elif item_name == 'RAILROAD_CROSSING_WITH_GATES':
            item = WarningSign.RAILROAD_CROSSING_WITH_GATES
        elif item_name == 'RAILROAD_CROSSING_WITHOUT_GATES':
            item = WarningSign.RAILROAD_CROSSING_WITHOUT_GATES
        elif item_name == 'RAILROAD_CROSSING':
            item = WarningSign.RAILROAD_CROSSING
        elif item_name == 'TRAMWAY_CROSSING':
            item = WarningSign.TRAMWAY_CROSSING
        elif item_name == 'FALLING_ROCKS':
            item = WarningSign.FALLING_ROCKS
        elif item_name == 'FALLING_ROCKS_ON_THE_LEFT':
            item = WarningSign.FALLING_ROCKS_ON_THE_LEFT
        elif item_name == 'FALLING_ROCKS_ON_THE_RIGHT':
            item = WarningSign.FALLING_ROCKS_ON_THE_RIGHT
        elif item_name == 'STEEP_DROP_ON_LEFT':
            item = WarningSign.STEEP_DROP_ON_LEFT
        elif item_name == 'STEEP_DROP_ON_RIGHT':
            item = WarningSign.STEEP_DROP_ON_RIGHT
        elif item_name == 'SLIPPERY_ROAD':
            item = WarningSign.SLIPPERY_ROAD
        elif item_name == 'STEEP_INCLINE':
            item = WarningSign.STEEP_INCLINE
        elif item_name == 'STEEP_DECLINE':
            item = WarningSign.STEEP_DECLINE
        elif item_name == 'UNEVEN_ROAD':
            item = WarningSign.UNEVEN_ROAD
        elif item_name == 'BUMP':
            item = WarningSign.BUMP
        elif item_name == 'DIP':
            item = WarningSign.DIP
        elif item_name == 'ROAD_FLOODS':
            item = WarningSign.ROAD_FLOODS
        elif item_name == 'ICY_ROAD':
            item = WarningSign.ICY_ROAD
        elif item_name == 'WIND':
            item = WarningSign.WIND
        elif item_name == 'TRAFFIC_CONGESTION':
            item = WarningSign.TRAFFIC_CONGESTION
        elif item_name == 'HIGH_ACCIDENT_AREA':
            item = WarningSign.HIGH_ACCIDENT_AREA
        elif item_name == 'CITY_ENTRY':
            item = WarningSign.CITY_ENTRY
        elif item_name == 'AUDIBLE_WARNING':
            item = WarningSign.AUDIBLE_WARNING
        elif item_name == 'END_OF_ALL_RESTRICTIONS':
            item = WarningSign.END_OF_ALL_RESTRICTIONS
        elif item_name == 'PRIORITY_OVER_ONCOMING':
            item = WarningSign.PRIORITY_OVER_ONCOMING
        elif item_name == 'YIELD_TO_ONCOMING':
            item = WarningSign.YIELD_TO_ONCOMING
        elif item_name == 'CITY_EXIT':
            item = WarningSign.CITY_EXIT
        elif item_name == 'VILLAGE_AHEAD':
            item = WarningSign.VILLAGE_AHEAD
        elif item_name == 'SPEED_CAMERA':
            item = WarningSign.SPEED_CAMERA
        elif item_name == 'TRAFFIC_ENFORCEMENT_CAMERA':
            item = WarningSign.TRAFFIC_ENFORCEMENT_CAMERA
        elif item_name == 'SPEED_LIMIT':
            item = WarningSign.SPEED_LIMIT
        elif item_name == 'SPEED_LIMIT_END':
            item = WarningSign.SPEED_LIMIT_END
        elif item_name == 'MOVABLE_BRIDGE':
            item = WarningSign.MOVABLE_BRIDGE
        elif item_name == 'SLOW_DOWN':
            item = WarningSign.SLOW_DOWN
        elif item_name == 'INTERSECTION_T_RIGHT':
            item = WarningSign.INTERSECTION_T_RIGHT
        elif item_name == 'INTERSECTION_T_LEFT':
            item = WarningSign.INTERSECTION_T_LEFT
        elif item_name == 'INTERSECTION_T_LEFT_RIGHT':
            item = WarningSign.INTERSECTION_T_LEFT_RIGHT
        elif item_name == 'INTERSECTION_Y':
            item = WarningSign.INTERSECTION_Y
        elif item_name == 'PRIORITY_ROAD_END':
            item = WarningSign.PRIORITY_ROAD_END
        elif item_name == 'USE_LOW_GEAR':
            item = WarningSign.USE_LOW_GEAR
        elif item_name == 'NO_COMPRESSION_BRAKING':
            item = WarningSign.NO_COMPRESSION_BRAKING
        elif item_name == 'WAITING_LINE':
            item = WarningSign.WAITING_LINE
        elif item_name == 'DONT_STOP_ZONE':
            item = WarningSign.DONT_STOP_ZONE
        elif item_name == 'LANE_USED_IN_BOTH_DIRECTIONS':
            item = WarningSign.LANE_USED_IN_BOTH_DIRECTIONS
        elif item_name == 'HONKING_PROHIBITED':
            item = WarningSign.HONKING_PROHIBITED
        elif item_name == 'FASTEN_SEAT_BELT':
            item = WarningSign.FASTEN_SEAT_BELT
        elif item_name == 'DEAD_END':
            item = WarningSign.DEAD_END
        elif item_name == 'ADVISORY_SPEED_LIMIT':
            item = WarningSign.ADVISORY_SPEED_LIMIT
        elif item_name == 'SPEED_LIMIT_NIGHT':
            item = WarningSign.SPEED_LIMIT_NIGHT
        elif item_name == 'MINIMUM_SPEED':
            item = WarningSign.MINIMUM_SPEED
        elif item_name == 'VARIABLE_SPEED_LIMIT':
            item = WarningSign.VARIABLE_SPEED_LIMIT
        elif item_name == 'VARIABLE':
            item = WarningSign.VARIABLE
        elif item_name == 'UNPROTECTED_LEFT_TURN':
            item = WarningSign.UNPROTECTED_LEFT_TURN
        elif item_name == 'USE_LOW_GEAR_END':
            item = WarningSign.USE_LOW_GEAR_END
        elif item_name == 'NO_COMPRESSION_BRAKING_END':
            item = WarningSign.NO_COMPRESSION_BRAKING_END
        elif item_name == 'DOUBLE_HAIRPIN_CURVE':
            item = WarningSign.DOUBLE_HAIRPIN_CURVE
        elif item_name == 'TRIPLE_HAIRPIN_CURVE':
            item = WarningSign.TRIPLE_HAIRPIN_CURVE
        elif item_name == 'EMBANKMENT':
            item = WarningSign.EMBANKMENT
        elif item_name == 'HILL':
            item = WarningSign.HILL
        elif item_name == 'PROTECTED_PASSING_LEFT':
            item = WarningSign.PROTECTED_PASSING_LEFT
        elif item_name == 'PROTECTED_PASSING_RIGHT':
            item = WarningSign.PROTECTED_PASSING_RIGHT
        elif item_name == 'RISK_OF_GROUNDING':
            item = WarningSign.RISK_OF_GROUNDING
        elif item_name == 'CURVY_ROAD_LEFT':
            item = WarningSign.CURVY_ROAD_LEFT
        elif item_name == 'CURVY_ROAD_RIGHT':
            item = WarningSign.CURVY_ROAD_RIGHT
        elif item_name == 'ADVISORY_SPEED_LIMIT_END':
            item = WarningSign.ADVISORY_SPEED_LIMIT_END
        elif item_name == 'MOTORWAY':
            item = WarningSign.MOTORWAY
        elif item_name == 'MOTORWAY_END':
            item = WarningSign.MOTORWAY_END
        elif item_name == 'ONEWAY':
            item = WarningSign.ONEWAY
        elif item_name == 'BICYCLE_PATH':
            item = WarningSign.BICYCLE_PATH
        elif item_name == 'BICYCLE_PATH_END':
            item = WarningSign.BICYCLE_PATH_END
        elif item_name == 'HEIGHT_RESTRICTION':
            item = WarningSign.HEIGHT_RESTRICTION
        elif item_name == 'LENGTH_RESTRICTION':
            item = WarningSign.LENGTH_RESTRICTION
        elif item_name == 'WIDTH_RESTRICTION':
            item = WarningSign.WIDTH_RESTRICTION
        elif item_name == 'WEIGHT_RESTRICTION':
            item = WarningSign.WEIGHT_RESTRICTION
        elif item_name == 'PASSING_RESTRICTION':
            item = WarningSign.PASSING_RESTRICTION
        elif item_name == 'TURN_RESTRICTION':
            item = WarningSign.TURN_RESTRICTION
        elif item_name == 'CARS_PROHIBITED':
            item = WarningSign.CARS_PROHIBITED
        elif item_name == 'VEHICLES_PROHIBITED':
            item = WarningSign.VEHICLES_PROHIBITED
        elif item_name == 'PEDESTRIANS_PROHIBITED':
            item = WarningSign.PEDESTRIANS_PROHIBITED
        elif item_name == 'PEDESTRIAN_ZONE':
            item = WarningSign.PEDESTRIAN_ZONE
        elif item_name == 'PEDESTRIAN_ZONE_END':
            item = WarningSign.PEDESTRIAN_ZONE_END
        elif item_name == 'DO_NOT_ENTER':
            item = WarningSign.DO_NOT_ENTER
        elif item_name == 'TRUCK_SPEED_LIMIT':
            item = WarningSign.TRUCK_SPEED_LIMIT
        elif item_name == 'TRUCK_SPEED_LIMIT_END':
            item = WarningSign.TRUCK_SPEED_LIMIT_END
        elif item_name == 'MINIMUM_SPEED_END':
            item = WarningSign.MINIMUM_SPEED_END
        elif item_name == 'HAMLET_ENTRY':
            item = WarningSign.HAMLET_ENTRY
        elif item_name == 'HAMLET_EXIT':
            item = WarningSign.HAMLET_EXIT
        elif item_name == 'MOTOR_VEHICLE_ROAD':
            item = WarningSign.MOTOR_VEHICLE_ROAD
        elif item_name == 'MOTOR_VEHICLE_ROAD_END':
            item = WarningSign.MOTOR_VEHICLE_ROAD_END
        elif item_name == 'PEDESTRIAN_PATH':
            item = WarningSign.PEDESTRIAN_PATH
        elif item_name == 'PEDESTRIAN_PATH_END':
            item = WarningSign.PEDESTRIAN_PATH_END
        elif item_name == 'GOOD_LUCK':
            item = WarningSign.GOOD_LUCK
        elif item_name == 'NO_TURN_ON_RED':
            item = WarningSign.NO_TURN_ON_RED
        elif item_name == 'TURN_ON_RED_ALLOWED':
            item = WarningSign.TURN_ON_RED_ALLOWED
        elif item_name == 'NO_LEFT_TURN':
            item = WarningSign.NO_LEFT_TURN
        elif item_name == 'NO_RIGHT_TURN':
            item = WarningSign.NO_RIGHT_TURN
        elif item_name == 'NO_STRAIGHT_THROUGH':
            item = WarningSign.NO_STRAIGHT_THROUGH
        elif item_name == 'NO_LEFT_OR_RIGHT_TURN':
            item = WarningSign.NO_LEFT_OR_RIGHT_TURN
        elif item_name == 'NO_STRAIGHT_THROUGH_OR_LEFT_TURN':
            item = WarningSign.NO_STRAIGHT_THROUGH_OR_LEFT_TURN
        elif item_name == 'NO_STRAIGHT_THROUGH_OR_RIGHT_TURN':
            item = WarningSign.NO_STRAIGHT_THROUGH_OR_RIGHT_TURN
        elif item_name == 'STRAIGHT_THROUGH_ONLY':
            item = WarningSign.STRAIGHT_THROUGH_ONLY
        elif item_name == 'LEFT_TURN_ONLY':
            item = WarningSign.LEFT_TURN_ONLY
        elif item_name == 'RIGHT_TURN_ONLY':
            item = WarningSign.RIGHT_TURN_ONLY
        elif item_name == 'STRAIGHT_THROUGH_OR_LEFT_TURN_ONLY':
            item = WarningSign.STRAIGHT_THROUGH_OR_LEFT_TURN_ONLY
        elif item_name == 'STRAIGHT_THROUGH_OR_RIGHT_TURN_ONLY':
            item = WarningSign.STRAIGHT_THROUGH_OR_RIGHT_TURN_ONLY
        elif item_name == 'LEFT_OR_RIGHT_TURN_ONLY':
            item = WarningSign.LEFT_OR_RIGHT_TURN_ONLY
        elif item_name == 'NO_U_TURN':
            item = WarningSign.NO_U_TURN
        elif item_name == 'U_TURN_ONLY':
            item = WarningSign.U_TURN_ONLY
        elif item_name == 'U_TURN_ALLOWED':
            item = WarningSign.U_TURN_ALLOWED
        elif item_name == 'CROSSING_WITH_PRIORITY_TO_THE_LEFT':
            item = WarningSign.CROSSING_WITH_PRIORITY_TO_THE_LEFT
        elif item_name == 'UNPROTECTED_RIGHT_TURN':
            item = WarningSign.UNPROTECTED_RIGHT_TURN
        elif item_name == 'ROUNDABOUT':
            item = WarningSign.ROUNDABOUT
        elif item_name == 'SPEED_LIMIT_ZONE':
            item = WarningSign.SPEED_LIMIT_ZONE
        elif item_name == 'SPEED_LIMIT_ZONE_END':
            item = WarningSign.SPEED_LIMIT_ZONE_END
        elif item_name == 'BICYCLE_ZONE':
            item = WarningSign.BICYCLE_ZONE
        elif item_name == 'BICYCLE_ZONE_END':
            item = WarningSign.BICYCLE_ZONE_END
        elif item_name == 'SCHOOL_ZONE_END':
            item = WarningSign.SCHOOL_ZONE_END
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'WarningSign'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type['WarningSign'], reader: zserio.BitStreamReader) -> 'WarningSign':
        return cls(reader.read_varuint16())

    @classmethod
    def from_reader_packed(cls: typing.Type['WarningSign'],
                           delta_context: zserio.array.DeltaContext,
                           reader: zserio.BitStreamReader) -> 'WarningSign':
        return cls(delta_context.read(zserio.array.VarUInt16ArrayTraits(),
                                      reader))

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.VarUInt16ArrayTraits(),
                           self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return zserio.bitsizeof.bitsizeof_varuint16(self.value)

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.VarUInt16ArrayTraits(),
                                       self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_varuint16(self.value)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.VarUInt16ArrayTraits(), writer, self.value)
