# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.geometry.coord_shift
import nds.core.speech.phonetic_transcription_list
import nds.core.types.language_code
import nds.name.properties.property_type
import nds.name.types.address_format_id
import nds.name.types.address_only
import nds.name.types.house_position
import nds.name.types.lane_address_point
import nds.name.types.name_detail_type
import nds.name.types.name_usage_type
import nds.name.types.not_address_relevant
import nds.name.types.prefer_road_name_over_road_number
import nds.name.types.preferred_name
import nds.name.types.road_address_point
import nds.name.types.road_name_id
import nds.name.types.road_number_prefix
import nds.name.types.road_number_suffix

class PropertyValue:
    def __init__(
            self,
            type_: nds.name.properties.property_type.PropertyType,
            *,
            language_code_: typing.Union[nds.core.types.language_code.LanguageCode, None] = None,
            usage_type_: typing.Union[nds.name.types.name_usage_type.NameUsageType, None] = None,
            detail_type_: typing.Union[nds.name.types.name_detail_type.NameDetailType, None] = None,
            preferred_name_: typing.Union[nds.name.types.preferred_name.PreferredName, None] = None,
            address_only_: typing.Union[nds.name.types.address_only.AddressOnly, None] = None,
            road_name_id_: typing.Union[nds.name.types.road_name_id.RoadNameId, None] = None,
            not_address_relevant_: typing.Union[nds.name.types.not_address_relevant.NotAddressRelevant, None] = None,
            address_format_id_: typing.Union[nds.name.types.address_format_id.AddressFormatId, None] = None,
            road_number_prefix_: typing.Union[nds.name.types.road_number_prefix.RoadNumberPrefix, None] = None,
            road_number_suffix_: typing.Union[nds.name.types.road_number_suffix.RoadNumberSuffix, None] = None,
            road_address_point_: typing.Union[nds.name.types.road_address_point.RoadAddressPoint, None] = None,
            lane_address_point_: typing.Union[nds.name.types.lane_address_point.LaneAddressPoint, None] = None,
            house_position_: typing.Union[nds.name.types.house_position.HousePosition, None] = None,
            phonetic_transcription_: typing.Union[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList, None] = None,
            prefer_road_name_over_road_number_: typing.Union[nds.name.types.prefer_road_name_over_road_number.PreferRoadNameOverRoadNumber, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if language_code_ is not None:
            self._choice = language_code_
        if usage_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = usage_type_
        if detail_type_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = detail_type_
        if preferred_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = preferred_name_
        if address_only_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = address_only_
        if road_name_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = road_name_id_
        if not_address_relevant_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = not_address_relevant_
        if address_format_id_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = address_format_id_
        if road_number_prefix_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = road_number_prefix_
        if road_number_suffix_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = road_number_suffix_
        if road_address_point_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = road_address_point_
        if lane_address_point_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = lane_address_point_
        if house_position_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = house_position_
        if phonetic_transcription_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = phonetic_transcription_
        if prefer_road_name_over_road_number_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice PropertyValue is ambiguous!")
            self._choice = prefer_road_name_over_road_number_

    @classmethod
    def from_reader(
            cls: typing.Type['PropertyValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.name.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PropertyValue'],
            zserio_context: PropertyValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.name.properties.property_type.PropertyType) -> 'PropertyValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PropertyValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.name.properties.property_type.PropertyType:
        return self._type_

    @property
    def language_code(self) -> nds.core.types.language_code.LanguageCode:
        return self._choice

    @language_code.setter
    def language_code(self, language_code_: nds.core.types.language_code.LanguageCode) -> None:
        self._choice = language_code_

    @property
    def usage_type(self) -> typing.Union[nds.name.types.name_usage_type.NameUsageType, None]:
        return self._choice

    @usage_type.setter
    def usage_type(self, usage_type_: typing.Union[nds.name.types.name_usage_type.NameUsageType, None]) -> None:
        self._choice = usage_type_

    @property
    def detail_type(self) -> typing.Union[nds.name.types.name_detail_type.NameDetailType, None]:
        return self._choice

    @detail_type.setter
    def detail_type(self, detail_type_: typing.Union[nds.name.types.name_detail_type.NameDetailType, None]) -> None:
        self._choice = detail_type_

    @property
    def preferred_name(self) -> typing.Union[nds.name.types.preferred_name.PreferredName, None]:
        return self._choice

    @preferred_name.setter
    def preferred_name(self, preferred_name_: typing.Union[nds.name.types.preferred_name.PreferredName, None]) -> None:
        self._choice = preferred_name_

    @property
    def address_only(self) -> typing.Union[nds.name.types.address_only.AddressOnly, None]:
        return self._choice

    @address_only.setter
    def address_only(self, address_only_: typing.Union[nds.name.types.address_only.AddressOnly, None]) -> None:
        self._choice = address_only_

    @property
    def road_name_id(self) -> nds.name.types.road_name_id.RoadNameId:
        return self._choice

    @road_name_id.setter
    def road_name_id(self, road_name_id_: nds.name.types.road_name_id.RoadNameId) -> None:
        self._choice = road_name_id_

    @property
    def not_address_relevant(self) -> typing.Union[nds.name.types.not_address_relevant.NotAddressRelevant, None]:
        return self._choice

    @not_address_relevant.setter
    def not_address_relevant(self, not_address_relevant_: typing.Union[nds.name.types.not_address_relevant.NotAddressRelevant, None]) -> None:
        self._choice = not_address_relevant_

    @property
    def address_format_id(self) -> nds.name.types.address_format_id.AddressFormatId:
        return self._choice

    @address_format_id.setter
    def address_format_id(self, address_format_id_: nds.name.types.address_format_id.AddressFormatId) -> None:
        self._choice = address_format_id_

    @property
    def road_number_prefix(self) -> typing.Union[nds.name.types.road_number_prefix.RoadNumberPrefix, None]:
        return self._choice

    @road_number_prefix.setter
    def road_number_prefix(self, road_number_prefix_: typing.Union[nds.name.types.road_number_prefix.RoadNumberPrefix, None]) -> None:
        self._choice = road_number_prefix_

    @property
    def road_number_suffix(self) -> typing.Union[nds.name.types.road_number_suffix.RoadNumberSuffix, None]:
        return self._choice

    @road_number_suffix.setter
    def road_number_suffix(self, road_number_suffix_: typing.Union[nds.name.types.road_number_suffix.RoadNumberSuffix, None]) -> None:
        self._choice = road_number_suffix_

    @property
    def road_address_point(self) -> typing.Union[nds.name.types.road_address_point.RoadAddressPoint, None]:
        return self._choice

    @road_address_point.setter
    def road_address_point(self, road_address_point_: typing.Union[nds.name.types.road_address_point.RoadAddressPoint, None]) -> None:
        self._choice = road_address_point_

    @property
    def lane_address_point(self) -> typing.Union[nds.name.types.lane_address_point.LaneAddressPoint, None]:
        return self._choice

    @lane_address_point.setter
    def lane_address_point(self, lane_address_point_: typing.Union[nds.name.types.lane_address_point.LaneAddressPoint, None]) -> None:
        self._choice = lane_address_point_

    @property
    def house_position(self) -> typing.Union[nds.name.types.house_position.HousePosition, None]:
        return self._choice

    @house_position.setter
    def house_position(self, house_position_: typing.Union[nds.name.types.house_position.HousePosition, None]) -> None:
        self._choice = house_position_

    @property
    def phonetic_transcription(self) -> typing.Union[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList, None]:
        return self._choice

    @phonetic_transcription.setter
    def phonetic_transcription(self, phonetic_transcription_: typing.Union[nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList, None]) -> None:
        self._choice = phonetic_transcription_

    @property
    def prefer_road_name_over_road_number(self) -> typing.Union[nds.name.types.prefer_road_name_over_road_number.PreferRoadNameOverRoadNumber, None]:
        return self._choice

    @prefer_road_name_over_road_number.setter
    def prefer_road_name_over_road_number(self, prefer_road_name_over_road_number_: typing.Union[nds.name.types.prefer_road_name_over_road_number.PreferRoadNameOverRoadNumber, None]) -> None:
        self._choice = prefer_road_name_over_road_number_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            return self.UNDEFINED_CHOICE
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            return self.CHOICE_LANGUAGE_CODE
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            return self.CHOICE_USAGE_TYPE
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            return self.CHOICE_DETAIL_TYPE
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            return self.CHOICE_PREFERRED_NAME
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            return self.CHOICE_ADDRESS_ONLY
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            return self.CHOICE_ROAD_NAME_ID
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            return self.CHOICE_NOT_ADDRESS_RELEVANT
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            return self.CHOICE_ADDRESS_FORMAT_ID
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            return self.CHOICE_ROAD_NUMBER_PREFIX
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            return self.CHOICE_ROAD_NUMBER_SUFFIX
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            return self.CHOICE_ROAD_ADDRESS_POINT
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            return self.CHOICE_LANE_ADDRESS_POINT
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            return self.CHOICE_HOUSE_POSITION
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            return self.CHOICE_PHONETIC_TRANSCRIPTION
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            return self.CHOICE_PREFER_ROAD_NAME_OVER_ROAD_NUMBER
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: PropertyValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            self._choice.init_packing_context(zserio_context.usage_type)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            self._choice.init_packing_context(zserio_context.detail_type)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            zserio_context.road_name_id.init(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            zserio_context.address_format_id.init(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            self._choice.init_packing_context(zserio_context.road_number_prefix)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            self._choice.init_packing_context(zserio_context.road_number_suffix)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            self._choice.init_packing_context(zserio_context.road_address_point)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            self._choice.init_packing_context(zserio_context.lane_address_point)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            self._choice.init_packing_context(zserio_context.house_position)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            self._choice.init_packing_context(zserio_context.phonetic_transcription)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            end_bitposition += 8
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.usage_type, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.detail_type, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            end_bitposition += zserio_context.road_name_id.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            end_bitposition += zserio_context.address_format_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_number_prefix, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_number_suffix, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.road_address_point, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.lane_address_point, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.house_position, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.phonetic_transcription, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            end_bitposition += 8
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            end_bitposition += zserio_context.language_code.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.usage_type, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.detail_type, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            end_bitposition += zserio_context.road_name_id.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            end_bitposition += zserio_context.address_format_id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_number_prefix, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_number_suffix, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.road_address_point, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.lane_address_point, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.house_position, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.phonetic_transcription, end_bitposition)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            self._choice = nds.name.types.name_usage_type.NameUsageType.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            self._choice = nds.name.types.name_detail_type.NameDetailType.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            self._choice = nds.name.types.preferred_name.PreferredName.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            self._choice = nds.name.types.address_only.AddressOnly.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            self._choice = zserio_reader.read_bits(8)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            self._choice = nds.name.types.not_address_relevant.NotAddressRelevant.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            self._choice = zserio_reader.read_varuint16()
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            self._choice = nds.name.types.road_number_prefix.RoadNumberPrefix.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            self._choice = nds.name.types.road_number_suffix.RoadNumberSuffix.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            self._choice = nds.name.types.road_address_point.RoadAddressPoint.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            self._choice = nds.name.types.lane_address_point.LaneAddressPoint.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            self._choice = nds.name.types.house_position.HousePosition.from_reader(zserio_reader, 0)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            self._choice = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            self._choice = nds.name.types.prefer_road_name_over_road_number.PreferRoadNameOverRoadNumber.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def read_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            self._choice = zserio_context.language_code.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            self._choice = nds.name.types.name_usage_type.NameUsageType.from_reader_packed(zserio_context.usage_type, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            self._choice = nds.name.types.name_detail_type.NameDetailType.from_reader_packed(zserio_context.detail_type, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            self._choice = nds.name.types.preferred_name.PreferredName.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            self._choice = nds.name.types.address_only.AddressOnly.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            self._choice = zserio_context.road_name_id.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            self._choice = nds.name.types.not_address_relevant.NotAddressRelevant.from_reader(zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            self._choice = zserio_context.address_format_id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            self._choice = nds.name.types.road_number_prefix.RoadNumberPrefix.from_reader_packed(zserio_context.road_number_prefix, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            self._choice = nds.name.types.road_number_suffix.RoadNumberSuffix.from_reader_packed(zserio_context.road_number_suffix, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            self._choice = nds.name.types.road_address_point.RoadAddressPoint.from_reader_packed(zserio_context.road_address_point, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            self._choice = nds.name.types.lane_address_point.LaneAddressPoint.from_reader_packed(zserio_context.lane_address_point, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            self._choice = nds.name.types.house_position.HousePosition.from_reader_packed(zserio_context.house_position, zserio_reader, 0)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            self._choice = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.from_reader_packed(zserio_context.phonetic_transcription, zserio_reader)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            self._choice = nds.name.types.prefer_road_name_over_road_number.PreferRoadNameOverRoadNumber.from_reader(zserio_reader)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            zserio_writer.write_bits(self._choice, 8)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            zserio_writer.write_varuint16(self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            # check parameters
            if self._choice.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field PropertyValue.housePosition: "
                                                    f"{self._choice.shift} != {0}!")
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    def write_packed(self, zserio_context: PropertyValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.name.properties.property_type.PropertyType.CORE):
            pass
        elif selector == (nds.name.properties.property_type.PropertyType.LANGUAGE_CODE):
            zserio_context.language_code.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.USAGE_TYPE):
            self._choice.write_packed(zserio_context.usage_type, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.DETAIL_TYPE):
            self._choice.write_packed(zserio_context.detail_type, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFERRED_NAME):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_ONLY):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NAME_ID):
            zserio_context.road_name_id.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.NOT_ADDRESS_RELEVANT):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ADDRESS_FORMAT_ID):
            zserio_context.address_format_id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._choice)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_PREFIX):
            self._choice.write_packed(zserio_context.road_number_prefix, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_NUMBER_SUFFIX):
            self._choice.write_packed(zserio_context.road_number_suffix, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.ROAD_ADDRESS_POINT):
            self._choice.write_packed(zserio_context.road_address_point, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.LANE_ADDRESS_POINT):
            self._choice.write_packed(zserio_context.lane_address_point, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.HOUSE_POSITION):
            # check parameters
            if self._choice.shift != (0):
                raise zserio.PythonRuntimeException("Wrong parameter shift for field PropertyValue.housePosition: "
                                                    f"{self._choice.shift} != {0}!")
            self._choice.write_packed(zserio_context.house_position, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PHONETIC_TRANSCRIPTION):
            self._choice.write_packed(zserio_context.phonetic_transcription, zserio_writer)
        elif selector == (nds.name.properties.property_type.PropertyType.PREFER_ROAD_NAME_OVER_ROAD_NUMBER):
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in choice PropertyValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._language_code_ = zserio.array.DeltaContext()
            self._usage_type_ = zserio.array.DeltaContext()
            self._detail_type_ = zserio.array.DeltaContext()
            self._road_name_id_ = zserio.array.DeltaContext()
            self._address_format_id_ = zserio.array.DeltaContext()
            self._road_number_prefix_ = nds.name.types.road_number_prefix.RoadNumberPrefix.ZserioPackingContext()
            self._road_number_suffix_ = nds.name.types.road_number_suffix.RoadNumberSuffix.ZserioPackingContext()
            self._road_address_point_ = nds.name.types.road_address_point.RoadAddressPoint.ZserioPackingContext()
            self._lane_address_point_ = nds.name.types.lane_address_point.LaneAddressPoint.ZserioPackingContext()
            self._house_position_ = nds.name.types.house_position.HousePosition.ZserioPackingContext()
            self._phonetic_transcription_ = nds.core.speech.phonetic_transcription_list.PhoneticTranscriptionList.ZserioPackingContext()

        @property
        def language_code(self):
            return self._language_code_

        @property
        def usage_type(self):
            return self._usage_type_

        @property
        def detail_type(self):
            return self._detail_type_

        @property
        def road_name_id(self):
            return self._road_name_id_

        @property
        def address_format_id(self):
            return self._address_format_id_

        @property
        def road_number_prefix(self):
            return self._road_number_prefix_

        @property
        def road_number_suffix(self):
            return self._road_number_suffix_

        @property
        def road_address_point(self):
            return self._road_address_point_

        @property
        def lane_address_point(self):
            return self._lane_address_point_

        @property
        def house_position(self):
            return self._house_position_

        @property
        def phonetic_transcription(self):
            return self._phonetic_transcription_

    CHOICE_LANGUAGE_CODE = 0
    CHOICE_USAGE_TYPE = 1
    CHOICE_DETAIL_TYPE = 2
    CHOICE_PREFERRED_NAME = 3
    CHOICE_ADDRESS_ONLY = 4
    CHOICE_ROAD_NAME_ID = 5
    CHOICE_NOT_ADDRESS_RELEVANT = 6
    CHOICE_ADDRESS_FORMAT_ID = 7
    CHOICE_ROAD_NUMBER_PREFIX = 8
    CHOICE_ROAD_NUMBER_SUFFIX = 9
    CHOICE_ROAD_ADDRESS_POINT = 10
    CHOICE_LANE_ADDRESS_POINT = 11
    CHOICE_HOUSE_POSITION = 12
    CHOICE_PHONETIC_TRANSCRIPTION = 13
    CHOICE_PREFER_ROAD_NAME_OVER_ROAD_NUMBER = 14
    UNDEFINED_CHOICE = -1
