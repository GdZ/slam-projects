# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.language.available_languages
import nds.name.instantiations.name_display_area_attribute_metadata
import nds.name.instantiations.name_display_line_range_attribute_metadata
import nds.name.instantiations.name_display_point_attribute_metadata
import nds.name.metadata.display_name_layer_content

class DisplayNameLayerMetadata:
    def __init__(
            self,
            content_: typing.Union[nds.name.metadata.display_name_layer_content.DisplayNameLayerContent, None] = None,
            display_line_range_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata] = None,
            display_area_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata] = None,
            display_point_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata] = None,
            available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None] = None) -> None:
        self._content_ = content_
        self._display_line_range_attribute_metadata_ = display_line_range_attribute_metadata_
        self._display_area_attribute_metadata_ = display_area_attribute_metadata_
        self._display_point_attribute_metadata_ = display_point_attribute_metadata_
        self._available_languages_ = available_languages_

    @classmethod
    def from_reader(
            cls: typing.Type['DisplayNameLayerMetadata'],
            zserio_reader: zserio.BitStreamReader) -> 'DisplayNameLayerMetadata':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['DisplayNameLayerMetadata'],
            zserio_context: DisplayNameLayerMetadata.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'DisplayNameLayerMetadata':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, DisplayNameLayerMetadata):
            return ((self._content_ == other._content_) and
                    (not other.is_display_line_range_attribute_metadata_used() if not self.is_display_line_range_attribute_metadata_used() else (self._display_line_range_attribute_metadata_ == other._display_line_range_attribute_metadata_)) and
                    (not other.is_display_area_attribute_metadata_used() if not self.is_display_area_attribute_metadata_used() else (self._display_area_attribute_metadata_ == other._display_area_attribute_metadata_)) and
                    (not other.is_display_point_attribute_metadata_used() if not self.is_display_point_attribute_metadata_used() else (self._display_point_attribute_metadata_ == other._display_point_attribute_metadata_)) and
                    (self._available_languages_ == other._available_languages_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._content_)
        if self.is_display_line_range_attribute_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_line_range_attribute_metadata_)
        if self.is_display_area_attribute_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_area_attribute_metadata_)
        if self.is_display_point_attribute_metadata_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._display_point_attribute_metadata_)
        result = zserio.hashcode.calc_hashcode_object(result, self._available_languages_)

        return result

    @property
    def content(self) -> typing.Union[nds.name.metadata.display_name_layer_content.DisplayNameLayerContent, None]:
        return self._content_

    @content.setter
    def content(self, content_: typing.Union[nds.name.metadata.display_name_layer_content.DisplayNameLayerContent, None]) -> None:
        self._content_ = content_

    @property
    def display_line_range_attribute_metadata(self) -> typing.Optional[nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata]:
        return self._display_line_range_attribute_metadata_

    @display_line_range_attribute_metadata.setter
    def display_line_range_attribute_metadata(self, display_line_range_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata]) -> None:
        self._display_line_range_attribute_metadata_ = display_line_range_attribute_metadata_

    def is_display_line_range_attribute_metadata_used(self) -> bool:
        return (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_LINE_RANGE_MAPS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_LINE_RANGE_MAPS or (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_LINE_RANGE_SETS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_LINE_RANGE_SETS

    def is_display_line_range_attribute_metadata_set(self) -> bool:
        return not self._display_line_range_attribute_metadata_ is None

    def reset_display_line_range_attribute_metadata(self) -> None:
        self._display_line_range_attribute_metadata_ = None

    @property
    def display_area_attribute_metadata(self) -> typing.Optional[nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata]:
        return self._display_area_attribute_metadata_

    @display_area_attribute_metadata.setter
    def display_area_attribute_metadata(self, display_area_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata]) -> None:
        self._display_area_attribute_metadata_ = display_area_attribute_metadata_

    def is_display_area_attribute_metadata_used(self) -> bool:
        return (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_AREA_MAPS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_AREA_MAPS or (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_AREA_SETS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_AREA_SETS

    def is_display_area_attribute_metadata_set(self) -> bool:
        return not self._display_area_attribute_metadata_ is None

    def reset_display_area_attribute_metadata(self) -> None:
        self._display_area_attribute_metadata_ = None

    @property
    def display_point_attribute_metadata(self) -> typing.Optional[nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata]:
        return self._display_point_attribute_metadata_

    @display_point_attribute_metadata.setter
    def display_point_attribute_metadata(self, display_point_attribute_metadata_: typing.Optional[nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata]) -> None:
        self._display_point_attribute_metadata_ = display_point_attribute_metadata_

    def is_display_point_attribute_metadata_used(self) -> bool:
        return (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_POINT_MAPS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_POINT_MAPS or (self._content_ & nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_POINT_SETS) == nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.Values.DISPLAY_POINT_SETS

    def is_display_point_attribute_metadata_set(self) -> bool:
        return not self._display_point_attribute_metadata_ is None

    def reset_display_point_attribute_metadata(self) -> None:
        self._display_point_attribute_metadata_ = None

    @property
    def available_languages(self) -> typing.Union[nds.core.language.available_languages.AvailableLanguages, None]:
        return self._available_languages_

    @available_languages.setter
    def available_languages(self, available_languages_: typing.Union[nds.core.language.available_languages.AvailableLanguages, None]) -> None:
        self._available_languages_ = available_languages_

    def init_packing_context(self, zserio_context: DisplayNameLayerMetadata.ZserioPackingContext) -> None:
        self._content_.init_packing_context(zserio_context.content)
        if self.is_display_line_range_attribute_metadata_used():
            self._display_line_range_attribute_metadata_.init_packing_context(zserio_context.display_line_range_attribute_metadata)
        if self.is_display_area_attribute_metadata_used():
            self._display_area_attribute_metadata_.init_packing_context(zserio_context.display_area_attribute_metadata)
        if self.is_display_point_attribute_metadata_used():
            self._display_point_attribute_metadata_.init_packing_context(zserio_context.display_point_attribute_metadata)
        self._available_languages_.init_packing_context(zserio_context.available_languages)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof(end_bitposition)
        if self.is_display_line_range_attribute_metadata_used():
            end_bitposition += self._display_line_range_attribute_metadata_.bitsizeof(end_bitposition)
        if self.is_display_area_attribute_metadata_used():
            end_bitposition += self._display_area_attribute_metadata_.bitsizeof(end_bitposition)
        if self.is_display_point_attribute_metadata_used():
            end_bitposition += self._display_point_attribute_metadata_.bitsizeof(end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: DisplayNameLayerMetadata.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._content_.bitsizeof_packed(zserio_context.content, end_bitposition)
        if self.is_display_line_range_attribute_metadata_used():
            end_bitposition += self._display_line_range_attribute_metadata_.bitsizeof_packed(zserio_context.display_line_range_attribute_metadata, end_bitposition)
        if self.is_display_area_attribute_metadata_used():
            end_bitposition += self._display_area_attribute_metadata_.bitsizeof_packed(zserio_context.display_area_attribute_metadata, end_bitposition)
        if self.is_display_point_attribute_metadata_used():
            end_bitposition += self._display_point_attribute_metadata_.bitsizeof_packed(zserio_context.display_point_attribute_metadata, end_bitposition)
        end_bitposition += self._available_languages_.bitsizeof_packed(zserio_context.available_languages, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets(end_bitposition)
        if self.is_display_line_range_attribute_metadata_used():
            end_bitposition = self._display_line_range_attribute_metadata_.initialize_offsets(end_bitposition)
        if self.is_display_area_attribute_metadata_used():
            end_bitposition = self._display_area_attribute_metadata_.initialize_offsets(end_bitposition)
        if self.is_display_point_attribute_metadata_used():
            end_bitposition = self._display_point_attribute_metadata_.initialize_offsets(end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: DisplayNameLayerMetadata.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._content_.initialize_offsets_packed(zserio_context.content, end_bitposition)
        if self.is_display_line_range_attribute_metadata_used():
            end_bitposition = self._display_line_range_attribute_metadata_.initialize_offsets_packed(zserio_context.display_line_range_attribute_metadata, end_bitposition)
        if self.is_display_area_attribute_metadata_used():
            end_bitposition = self._display_area_attribute_metadata_.initialize_offsets_packed(zserio_context.display_area_attribute_metadata, end_bitposition)
        if self.is_display_point_attribute_metadata_used():
            end_bitposition = self._display_point_attribute_metadata_.initialize_offsets_packed(zserio_context.display_point_attribute_metadata, end_bitposition)
        end_bitposition = self._available_languages_.initialize_offsets_packed(zserio_context.available_languages, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.from_reader(zserio_reader)
        if self.is_display_line_range_attribute_metadata_used():
            self._display_line_range_attribute_metadata_ = nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata.from_reader(zserio_reader)
        else:
            self._display_line_range_attribute_metadata_ = None
        if self.is_display_area_attribute_metadata_used():
            self._display_area_attribute_metadata_ = nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata.from_reader(zserio_reader)
        else:
            self._display_area_attribute_metadata_ = None
        if self.is_display_point_attribute_metadata_used():
            self._display_point_attribute_metadata_ = nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata.from_reader(zserio_reader)
        else:
            self._display_point_attribute_metadata_ = None
        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader(zserio_reader)

    def read_packed(self, zserio_context: DisplayNameLayerMetadata.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._content_ = nds.name.metadata.display_name_layer_content.DisplayNameLayerContent.from_reader_packed(zserio_context.content, zserio_reader)

        if self.is_display_line_range_attribute_metadata_used():
            self._display_line_range_attribute_metadata_ = nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata.from_reader_packed(zserio_context.display_line_range_attribute_metadata, zserio_reader)
        else:
            self._display_line_range_attribute_metadata_ = None

        if self.is_display_area_attribute_metadata_used():
            self._display_area_attribute_metadata_ = nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata.from_reader_packed(zserio_context.display_area_attribute_metadata, zserio_reader)
        else:
            self._display_area_attribute_metadata_ = None

        if self.is_display_point_attribute_metadata_used():
            self._display_point_attribute_metadata_ = nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata.from_reader_packed(zserio_context.display_point_attribute_metadata, zserio_reader)
        else:
            self._display_point_attribute_metadata_ = None

        self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.from_reader_packed(zserio_context.available_languages, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write(zserio_writer)
        if self.is_display_line_range_attribute_metadata_used():
            self._display_line_range_attribute_metadata_.write(zserio_writer)
        if self.is_display_area_attribute_metadata_used():
            self._display_area_attribute_metadata_.write(zserio_writer)
        if self.is_display_point_attribute_metadata_used():
            self._display_point_attribute_metadata_.write(zserio_writer)
        self._available_languages_.write(zserio_writer)

    def write_packed(self, zserio_context: DisplayNameLayerMetadata.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._content_.write_packed(zserio_context.content, zserio_writer)

        if self.is_display_line_range_attribute_metadata_used():
            self._display_line_range_attribute_metadata_.write_packed(zserio_context.display_line_range_attribute_metadata, zserio_writer)

        if self.is_display_area_attribute_metadata_used():
            self._display_area_attribute_metadata_.write_packed(zserio_context.display_area_attribute_metadata, zserio_writer)

        if self.is_display_point_attribute_metadata_used():
            self._display_point_attribute_metadata_.write_packed(zserio_context.display_point_attribute_metadata, zserio_writer)

        self._available_languages_.write_packed(zserio_context.available_languages, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._content_ = zserio.array.DeltaContext()
            self._display_line_range_attribute_metadata_ = nds.name.instantiations.name_display_line_range_attribute_metadata.NameDisplayLineRangeAttributeMetadata.ZserioPackingContext()
            self._display_area_attribute_metadata_ = nds.name.instantiations.name_display_area_attribute_metadata.NameDisplayAreaAttributeMetadata.ZserioPackingContext()
            self._display_point_attribute_metadata_ = nds.name.instantiations.name_display_point_attribute_metadata.NameDisplayPointAttributeMetadata.ZserioPackingContext()
            self._available_languages_ = nds.core.language.available_languages.AvailableLanguages.ZserioPackingContext()

        @property
        def content(self):
            return self._content_

        @property
        def display_line_range_attribute_metadata(self):
            return self._display_line_range_attribute_metadata_

        @property
        def display_area_attribute_metadata(self):
            return self._display_area_attribute_metadata_

        @property
        def display_point_attribute_metadata(self):
            return self._display_point_attribute_metadata_

        @property
        def available_languages(self):
            return self._available_languages_
