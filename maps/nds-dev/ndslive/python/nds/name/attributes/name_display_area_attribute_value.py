# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.attributes.name_display_area_attribute_type
import nds.name.types.administrative_hierarchy
import nds.name.types.bridge_name
import nds.name.types.intersection_name
import nds.name.types.label_name
import nds.name.types.road_name
import nds.name.types.service_area_name
import nds.name.types.tunnel_name

class NameDisplayAreaAttributeValue:
    def __init__(
            self,
            type_: nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType,
            *,
            road_name_: typing.Union[nds.name.types.road_name.RoadName, None] = None,
            bridge_name_: typing.Union[nds.name.types.bridge_name.BridgeName, None] = None,
            tunnel_name_: typing.Union[nds.name.types.tunnel_name.TunnelName, None] = None,
            area_name_: typing.Union[nds.name.types.label_name.LabelName, None] = None,
            building_name_: typing.Union[nds.name.types.label_name.LabelName, None] = None,
            nature_area_name_: typing.Union[nds.name.types.label_name.LabelName, None] = None,
            water_name_: typing.Union[nds.name.types.label_name.LabelName, None] = None,
            administrative_area_name_: typing.Union[nds.name.types.label_name.LabelName, None] = None,
            administrative_hierarchy_: typing.Union[nds.name.types.administrative_hierarchy.AdministrativeHierarchy, None] = None,
            service_area_name_: typing.Union[nds.name.types.service_area_name.ServiceAreaName, None] = None,
            intersection_name_: typing.Union[nds.name.types.intersection_name.IntersectionName, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if road_name_ is not None:
            self._choice = road_name_
        if bridge_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = bridge_name_
        if tunnel_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = tunnel_name_
        if area_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = area_name_
        if building_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = building_name_
        if nature_area_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = nature_area_name_
        if water_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = water_name_
        if administrative_area_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = administrative_area_name_
        if administrative_hierarchy_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = administrative_hierarchy_
        if service_area_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = service_area_name_
        if intersection_name_ is not None:
            if self._choice != None:
                raise zserio.PythonRuntimeException("Calling constructor of choice NameDisplayAreaAttributeValue is ambiguous!")
            self._choice = intersection_name_

    @classmethod
    def from_reader(
            cls: typing.Type['NameDisplayAreaAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType) -> 'NameDisplayAreaAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['NameDisplayAreaAttributeValue'],
            zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            type_: nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType) -> 'NameDisplayAreaAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NameDisplayAreaAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType:
        return self._type_

    @property
    def road_name(self) -> nds.name.types.road_name.RoadName:
        return self._choice

    @road_name.setter
    def road_name(self, road_name_: nds.name.types.road_name.RoadName) -> None:
        self._choice = road_name_

    @property
    def bridge_name(self) -> nds.name.types.bridge_name.BridgeName:
        return self._choice

    @bridge_name.setter
    def bridge_name(self, bridge_name_: nds.name.types.bridge_name.BridgeName) -> None:
        self._choice = bridge_name_

    @property
    def tunnel_name(self) -> nds.name.types.tunnel_name.TunnelName:
        return self._choice

    @tunnel_name.setter
    def tunnel_name(self, tunnel_name_: nds.name.types.tunnel_name.TunnelName) -> None:
        self._choice = tunnel_name_

    @property
    def area_name(self) -> nds.name.types.label_name.LabelName:
        return self._choice

    @area_name.setter
    def area_name(self, area_name_: nds.name.types.label_name.LabelName) -> None:
        self._choice = area_name_

    @property
    def building_name(self) -> nds.name.types.label_name.LabelName:
        return self._choice

    @building_name.setter
    def building_name(self, building_name_: nds.name.types.label_name.LabelName) -> None:
        self._choice = building_name_

    @property
    def nature_area_name(self) -> nds.name.types.label_name.LabelName:
        return self._choice

    @nature_area_name.setter
    def nature_area_name(self, nature_area_name_: nds.name.types.label_name.LabelName) -> None:
        self._choice = nature_area_name_

    @property
    def water_name(self) -> nds.name.types.label_name.LabelName:
        return self._choice

    @water_name.setter
    def water_name(self, water_name_: nds.name.types.label_name.LabelName) -> None:
        self._choice = water_name_

    @property
    def administrative_area_name(self) -> nds.name.types.label_name.LabelName:
        return self._choice

    @administrative_area_name.setter
    def administrative_area_name(self, administrative_area_name_: nds.name.types.label_name.LabelName) -> None:
        self._choice = administrative_area_name_

    @property
    def administrative_hierarchy(self) -> typing.Union[nds.name.types.administrative_hierarchy.AdministrativeHierarchy, None]:
        return self._choice

    @administrative_hierarchy.setter
    def administrative_hierarchy(self, administrative_hierarchy_: typing.Union[nds.name.types.administrative_hierarchy.AdministrativeHierarchy, None]) -> None:
        self._choice = administrative_hierarchy_

    @property
    def service_area_name(self) -> nds.name.types.service_area_name.ServiceAreaName:
        return self._choice

    @service_area_name.setter
    def service_area_name(self, service_area_name_: nds.name.types.service_area_name.ServiceAreaName) -> None:
        self._choice = service_area_name_

    @property
    def intersection_name(self) -> nds.name.types.intersection_name.IntersectionName:
        return self._choice

    @intersection_name.setter
    def intersection_name(self, intersection_name_: nds.name.types.intersection_name.IntersectionName) -> None:
        self._choice = intersection_name_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            return self.CHOICE_ROAD_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            return self.CHOICE_BRIDGE_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            return self.CHOICE_TUNNEL_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            return self.CHOICE_AREA_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            return self.CHOICE_BUILDING_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            return self.CHOICE_NATURE_AREA_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            return self.CHOICE_WATER_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            return self.CHOICE_ADMINISTRATIVE_AREA_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            return self.CHOICE_ADMINISTRATIVE_HIERARCHY
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            return self.CHOICE_SERVICE_AREA_NAME
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            return self.CHOICE_INTERSECTION_NAME
        else:
            return self.UNDEFINED_CHOICE

    def init_packing_context(self, zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            self._choice.init_packing_context(zserio_context.administrative_hierarchy)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            pass
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            pass
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext,
                         bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            end_bitposition += self._choice.bitsizeof_packed(zserio_context.administrative_hierarchy, end_bitposition)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext,
                                  bitposition: int) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            end_bitposition = self._choice.initialize_offsets_packed(zserio_context.administrative_hierarchy, end_bitposition)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            self._choice = nds.name.types.administrative_hierarchy.AdministrativeHierarchy.from_reader(zserio_reader)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

    def read_packed(self, zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext,
                    zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            self._choice = nds.name.types.administrative_hierarchy.AdministrativeHierarchy.from_reader_packed(zserio_context.administrative_hierarchy, zserio_reader)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            self._choice = zserio_reader.read_string()
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            self._choice.write(zserio_writer)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

    def write_packed(self, zserio_context: NameDisplayAreaAttributeValue.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ROAD_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BRIDGE_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.TUNNEL_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.AREA_LABEL_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.BUILDING_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.NATURE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.WATER_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.ADMINISTRATIVE_HIERARCHY):
            self._choice.write_packed(zserio_context.administrative_hierarchy, zserio_writer)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.SERVICE_AREA_NAME):
            zserio_writer.write_string(self._choice)
        elif selector == (nds.name.attributes.name_display_area_attribute_type.NameDisplayAreaAttributeType.INTERSECTION_NAME):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameDisplayAreaAttributeValue!")

    class ZserioPackingContext:
        def __init__(self):
            self._administrative_hierarchy_ = nds.name.types.administrative_hierarchy.AdministrativeHierarchy.ZserioPackingContext()

        @property
        def administrative_hierarchy(self):
            return self._administrative_hierarchy_

    CHOICE_ROAD_NAME = 0
    CHOICE_BRIDGE_NAME = 1
    CHOICE_TUNNEL_NAME = 2
    CHOICE_AREA_NAME = 3
    CHOICE_BUILDING_NAME = 4
    CHOICE_NATURE_AREA_NAME = 5
    CHOICE_WATER_NAME = 6
    CHOICE_ADMINISTRATIVE_AREA_NAME = 7
    CHOICE_ADMINISTRATIVE_HIERARCHY = 8
    CHOICE_SERVICE_AREA_NAME = 9
    CHOICE_INTERSECTION_NAME = 10
    UNDEFINED_CHOICE = -1
