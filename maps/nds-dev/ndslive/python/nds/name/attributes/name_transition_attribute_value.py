# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.attributes.name_transition_attribute_type
import nds.name.types.intersection_name

class NameTransitionAttributeValue:
    def __init__(
            self,
            type_: nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType,
            *,
            intersection_name_: typing.Union[nds.name.types.intersection_name.IntersectionName, None] = None) -> None:
        self._type_ = type_
        self._choice: typing.Any = None
        if intersection_name_ is not None:
            self._choice = intersection_name_

    @classmethod
    def from_reader(
            cls: typing.Type['NameTransitionAttributeValue'],
            zserio_reader: zserio.BitStreamReader,
            type_: nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType) -> 'NameTransitionAttributeValue':
        self = object.__new__(cls)
        self._type_ = type_

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, NameTransitionAttributeValue):
            return (self._type_ == other._type_ and
                    self._choice == other._choice)

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        else:
            pass

        return result

    @property
    def type(self) -> nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType:
        return self._type_

    @property
    def intersection_name(self) -> nds.name.types.intersection_name.IntersectionName:
        return self._choice

    @intersection_name.setter
    def intersection_name(self, intersection_name_: nds.name.types.intersection_name.IntersectionName) -> None:
        self._choice = intersection_name_

    @property
    def choice_tag(self) -> int:
        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            return self.CHOICE_INTERSECTION_NAME
        else:
            return self.UNDEFINED_CHOICE

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameTransitionAttributeValue!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameTransitionAttributeValue!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            self._choice = zserio_reader.read_string()
        else:
            raise zserio.PythonRuntimeException("No match in choice NameTransitionAttributeValue!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        selector = self._type_

        if selector == (nds.name.attributes.name_transition_attribute_type.NameTransitionAttributeType.INTERSECTION_NAME):
            zserio_writer.write_string(self._choice)
        else:
            raise zserio.PythonRuntimeException("No match in choice NameTransitionAttributeValue!")

    CHOICE_INTERSECTION_NAME = 0
    UNDEFINED_CHOICE = -1
