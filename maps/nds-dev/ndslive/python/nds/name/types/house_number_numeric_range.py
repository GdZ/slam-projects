# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.types.house_number_increment
import nds.name.types.house_number_numeric

class HouseNumberNumericRange:
    def __init__(
            self,
            has_pattern_: bool,
            is_even_odd_: bool,
            start_house_number_: nds.name.types.house_number_numeric.HouseNumberNumeric = nds.name.types.house_number_numeric.HouseNumberNumeric(),
            end_house_number_: nds.name.types.house_number_numeric.HouseNumberNumeric = nds.name.types.house_number_numeric.HouseNumberNumeric(),
            pattern_: typing.Optional[str] = None) -> None:
        self._has_pattern_ = has_pattern_
        self._is_even_odd_ = is_even_odd_
        self._start_house_number_ = start_house_number_
        self._end_house_number_ = end_house_number_
        self._pattern_ = pattern_

    @classmethod
    def from_reader(
            cls: typing.Type['HouseNumberNumericRange'],
            zserio_reader: zserio.BitStreamReader,
            has_pattern_: bool,
            is_even_odd_: bool) -> 'HouseNumberNumericRange':
        self = object.__new__(cls)
        self._has_pattern_ = has_pattern_
        self._is_even_odd_ = is_even_odd_

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['HouseNumberNumericRange'],
            zserio_context: HouseNumberNumericRange.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            has_pattern_: bool,
            is_even_odd_: bool) -> 'HouseNumberNumericRange':
        self = object.__new__(cls)
        self._has_pattern_ = has_pattern_
        self._is_even_odd_ = is_even_odd_

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, HouseNumberNumericRange):
            return (self._has_pattern_ == other._has_pattern_ and
                    self._is_even_odd_ == other._is_even_odd_ and
                    (self._start_house_number_ == other._start_house_number_) and
                    (self._end_house_number_ == other._end_house_number_) and
                    (not other.is_pattern_used() if not self.is_pattern_used() else (self._pattern_ == other._pattern_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_bool(result, self._has_pattern_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._is_even_odd_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._start_house_number_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._end_house_number_)
        if self.is_pattern_used():
            result = zserio.hashcode.calc_hashcode_string(result, self._pattern_)

        return result

    @property
    def has_pattern(self) -> bool:
        return self._has_pattern_

    @property
    def is_even_odd(self) -> bool:
        return self._is_even_odd_

    @property
    def start_house_number(self) -> nds.name.types.house_number_numeric.HouseNumberNumeric:
        return self._start_house_number_

    @start_house_number.setter
    def start_house_number(self, start_house_number_: nds.name.types.house_number_numeric.HouseNumberNumeric) -> None:
        self._start_house_number_ = start_house_number_

    @property
    def end_house_number(self) -> nds.name.types.house_number_numeric.HouseNumberNumeric:
        return self._end_house_number_

    @end_house_number.setter
    def end_house_number(self, end_house_number_: nds.name.types.house_number_numeric.HouseNumberNumeric) -> None:
        self._end_house_number_ = end_house_number_

    @property
    def pattern(self) -> typing.Optional[str]:
        return self._pattern_

    @pattern.setter
    def pattern(self, pattern_: typing.Optional[str]) -> None:
        self._pattern_ = pattern_

    def is_pattern_used(self) -> bool:
        return self._has_pattern_

    def is_pattern_set(self) -> bool:
        return not self._pattern_ is None

    def reset_pattern(self) -> None:
        self._pattern_ = None

    def get_increment(self) -> nds.name.types.house_number_increment.HouseNumberIncrement:
        return (nds.name.types.house_number_increment.HouseNumberIncrement.DECREASING) if ((self._start_house_number_ > self._end_house_number_)) else (nds.name.types.house_number_increment.HouseNumberIncrement.INCREASING)

    def init_packing_context(self, zserio_context: HouseNumberNumericRange.ZserioPackingContext) -> None:
        zserio_context.start_house_number.init(zserio.array.VarUInt32ArrayTraits(), self._start_house_number_)
        zserio_context.end_house_number.init(zserio.array.VarUInt32ArrayTraits(), self._end_house_number_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._start_house_number_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._end_house_number_)
        if self.is_pattern_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._pattern_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: HouseNumberNumericRange.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.start_house_number.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._start_house_number_)
        end_bitposition += zserio_context.end_house_number.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._end_house_number_)
        if self.is_pattern_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._pattern_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._start_house_number_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._end_house_number_)
        if self.is_pattern_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._pattern_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: HouseNumberNumericRange.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.start_house_number.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._start_house_number_)
        end_bitposition += zserio_context.end_house_number.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._end_house_number_)
        if self.is_pattern_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._pattern_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_house_number_ = zserio_reader.read_varuint32()

        self._end_house_number_ = zserio_reader.read_varuint32()
        # check constraint
        if not (self._end_house_number_ != self._start_house_number_):
            raise zserio.PythonRuntimeException("Constraint violated for field HouseNumberNumericRange.endHouseNumber!")

        if self.is_pattern_used():
            self._pattern_ = zserio_reader.read_string()
        else:
            self._pattern_ = None

    def read_packed(self, zserio_context: HouseNumberNumericRange.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._start_house_number_ = zserio_context.start_house_number.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._end_house_number_ = zserio_context.end_house_number.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)
        # check constraint
        if not (self._end_house_number_ != self._start_house_number_):
            raise zserio.PythonRuntimeException("Constraint violated for field HouseNumberNumericRange.endHouseNumber!")

        if self.is_pattern_used():
            self._pattern_ = zserio_reader.read_string()
        else:
            self._pattern_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._start_house_number_)

        # check constraint
        if not (self._end_house_number_ != self._start_house_number_):
            raise zserio.PythonRuntimeException("Constraint violated for field HouseNumberNumericRange.endHouseNumber!")
        zserio_writer.write_varuint32(self._end_house_number_)

        if self.is_pattern_used():
            zserio_writer.write_string(self._pattern_)

    def write_packed(self, zserio_context: HouseNumberNumericRange.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.start_house_number.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._start_house_number_)

        # check constraint
        if not (self._end_house_number_ != self._start_house_number_):
            raise zserio.PythonRuntimeException("Constraint violated for field HouseNumberNumericRange.endHouseNumber!")
        zserio_context.end_house_number.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._end_house_number_)

        if self.is_pattern_used():
            zserio_writer.write_string(self._pattern_)

    class ZserioPackingContext:
        def __init__(self):
            self._start_house_number_ = zserio.array.DeltaContext()
            self._end_house_number_ = zserio.array.DeltaContext()

        @property
        def start_house_number(self):
            return self._start_house_number_

        @property
        def end_house_number(self):
            return self._end_house_number_
