# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class RoadNumberComponent:
    def __init__(
            self,
            component_string_: str = str(),
            on_icon_: bool = bool(),
            acoustic_output_: bool = bool(),
            text_output_: bool = bool(),
            local_priority_: int = int()) -> None:
        self._component_string_ = component_string_
        self._on_icon_ = on_icon_
        self._acoustic_output_ = acoustic_output_
        self._text_output_ = text_output_
        self._local_priority_ = local_priority_

    @classmethod
    def from_reader(
            cls: typing.Type['RoadNumberComponent'],
            zserio_reader: zserio.BitStreamReader) -> 'RoadNumberComponent':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['RoadNumberComponent'],
            zserio_context: RoadNumberComponent.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'RoadNumberComponent':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, RoadNumberComponent):
            return ((self._component_string_ == other._component_string_) and
                    (self._on_icon_ == other._on_icon_) and
                    (self._acoustic_output_ == other._acoustic_output_) and
                    (self._text_output_ == other._text_output_) and
                    (self._local_priority_ == other._local_priority_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_string(result, self._component_string_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._on_icon_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._acoustic_output_)
        result = zserio.hashcode.calc_hashcode_bool(result, self._text_output_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._local_priority_)

        return result

    @property
    def component_string(self) -> str:
        return self._component_string_

    @component_string.setter
    def component_string(self, component_string_: str) -> None:
        self._component_string_ = component_string_

    @property
    def on_icon(self) -> bool:
        return self._on_icon_

    @on_icon.setter
    def on_icon(self, on_icon_: bool) -> None:
        self._on_icon_ = on_icon_

    @property
    def acoustic_output(self) -> bool:
        return self._acoustic_output_

    @acoustic_output.setter
    def acoustic_output(self, acoustic_output_: bool) -> None:
        self._acoustic_output_ = acoustic_output_

    @property
    def text_output(self) -> bool:
        return self._text_output_

    @text_output.setter
    def text_output(self, text_output_: bool) -> None:
        self._text_output_ = text_output_

    @property
    def local_priority(self) -> int:
        return self._local_priority_

    @local_priority.setter
    def local_priority(self, local_priority_: int) -> None:
        self._local_priority_ = local_priority_

    def init_packing_context(self, zserio_context: RoadNumberComponent.ZserioPackingContext) -> None:
        zserio_context.local_priority.init(zserio.array.BitFieldArrayTraits(5), self._local_priority_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._component_string_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 5

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: RoadNumberComponent.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._component_string_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += zserio_context.local_priority.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._local_priority_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._component_string_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 5

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: RoadNumberComponent.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._component_string_)
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += 1
        end_bitposition += zserio_context.local_priority.bitsizeof(zserio.array.BitFieldArrayTraits(5), self._local_priority_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._component_string_ = zserio_reader.read_string()
        self._on_icon_ = zserio_reader.read_bool()
        self._acoustic_output_ = zserio_reader.read_bool()
        self._text_output_ = zserio_reader.read_bool()
        self._local_priority_ = zserio_reader.read_bits(5)

    def read_packed(self, zserio_context: RoadNumberComponent.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._component_string_ = zserio_reader.read_string()

        self._on_icon_ = zserio_reader.read_bool()

        self._acoustic_output_ = zserio_reader.read_bool()

        self._text_output_ = zserio_reader.read_bool()

        self._local_priority_ = zserio_context.local_priority.read(zserio.array.BitFieldArrayTraits(5), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._component_string_)
        zserio_writer.write_bool(self._on_icon_)
        zserio_writer.write_bool(self._acoustic_output_)
        zserio_writer.write_bool(self._text_output_)
        zserio_writer.write_bits(self._local_priority_, 5)

    def write_packed(self, zserio_context: RoadNumberComponent.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_string(self._component_string_)

        zserio_writer.write_bool(self._on_icon_)

        zserio_writer.write_bool(self._acoustic_output_)

        zserio_writer.write_bool(self._text_output_)

        zserio_context.local_priority.write(zserio.array.BitFieldArrayTraits(5), zserio_writer, self._local_priority_)

    class ZserioPackingContext:
        def __init__(self):
            self._local_priority_ = zserio.array.DeltaContext()

        @property
        def local_priority(self):
            return self._local_priority_
