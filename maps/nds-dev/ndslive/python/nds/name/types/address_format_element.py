# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.types.address_format_element_type
import nds.name.types.admin_hierarchy_element_type

class AddressFormatElement:
    def __init__(
            self,
            type_: typing.Union[nds.name.types.address_format_element_type.AddressFormatElementType, None] = None,
            admin_hierarchy_element_type_: typing.Optional[nds.name.types.admin_hierarchy_element_type.AdminHierarchyElementType] = None,
            element_separator_: str = str()) -> None:
        self._type_ = type_
        self._admin_hierarchy_element_type_ = admin_hierarchy_element_type_
        self._element_separator_ = element_separator_

    @classmethod
    def from_reader(
            cls: typing.Type['AddressFormatElement'],
            zserio_reader: zserio.BitStreamReader) -> 'AddressFormatElement':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AddressFormatElement'],
            zserio_context: AddressFormatElement.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'AddressFormatElement':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AddressFormatElement):
            return ((self._type_ == other._type_) and
                    (not other.is_admin_hierarchy_element_type_used() if not self.is_admin_hierarchy_element_type_used() else (self._admin_hierarchy_element_type_ == other._admin_hierarchy_element_type_)) and
                    (self._element_separator_ == other._element_separator_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        if self.is_admin_hierarchy_element_type_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._admin_hierarchy_element_type_)
        result = zserio.hashcode.calc_hashcode_string(result, self._element_separator_)

        return result

    @property
    def type(self) -> typing.Union[nds.name.types.address_format_element_type.AddressFormatElementType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.name.types.address_format_element_type.AddressFormatElementType, None]) -> None:
        self._type_ = type_

    @property
    def admin_hierarchy_element_type(self) -> typing.Optional[nds.name.types.admin_hierarchy_element_type.AdminHierarchyElementType]:
        return self._admin_hierarchy_element_type_

    @admin_hierarchy_element_type.setter
    def admin_hierarchy_element_type(self, admin_hierarchy_element_type_: typing.Optional[nds.name.types.admin_hierarchy_element_type.AdminHierarchyElementType]) -> None:
        self._admin_hierarchy_element_type_ = admin_hierarchy_element_type_

    def is_admin_hierarchy_element_type_used(self) -> bool:
        return self._type_ == nds.name.types.address_format_element_type.AddressFormatElementType.ADMINISTRATIVE_HIERARCHY_ELEMENT

    def is_admin_hierarchy_element_type_set(self) -> bool:
        return not self._admin_hierarchy_element_type_ is None

    def reset_admin_hierarchy_element_type(self) -> None:
        self._admin_hierarchy_element_type_ = None

    @property
    def element_separator(self) -> str:
        return self._element_separator_

    @element_separator.setter
    def element_separator(self, element_separator_: str) -> None:
        self._element_separator_ = element_separator_

    def init_packing_context(self, zserio_context: AddressFormatElement.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        if self.is_admin_hierarchy_element_type_used():
            self._admin_hierarchy_element_type_.init_packing_context(zserio_context.admin_hierarchy_element_type)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        if self.is_admin_hierarchy_element_type_used():
            end_bitposition += self._admin_hierarchy_element_type_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._element_separator_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AddressFormatElement.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        if self.is_admin_hierarchy_element_type_used():
            end_bitposition += self._admin_hierarchy_element_type_.bitsizeof_packed(zserio_context.admin_hierarchy_element_type, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._element_separator_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        if self.is_admin_hierarchy_element_type_used():
            end_bitposition = self._admin_hierarchy_element_type_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._element_separator_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AddressFormatElement.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        if self.is_admin_hierarchy_element_type_used():
            end_bitposition = self._admin_hierarchy_element_type_.initialize_offsets_packed(zserio_context.admin_hierarchy_element_type, end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._element_separator_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.name.types.address_format_element_type.AddressFormatElementType.from_reader(zserio_reader)
        if self.is_admin_hierarchy_element_type_used():
            self._admin_hierarchy_element_type_ = nds.name.types.admin_hierarchy_element_type.AdminHierarchyElementType.from_reader(zserio_reader)
        else:
            self._admin_hierarchy_element_type_ = None
        self._element_separator_ = zserio_reader.read_string()

    def read_packed(self, zserio_context: AddressFormatElement.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.name.types.address_format_element_type.AddressFormatElementType.from_reader_packed(zserio_context.type, zserio_reader)

        if self.is_admin_hierarchy_element_type_used():
            self._admin_hierarchy_element_type_ = nds.name.types.admin_hierarchy_element_type.AdminHierarchyElementType.from_reader_packed(zserio_context.admin_hierarchy_element_type, zserio_reader)
        else:
            self._admin_hierarchy_element_type_ = None

        self._element_separator_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)
        if self.is_admin_hierarchy_element_type_used():
            self._admin_hierarchy_element_type_.write(zserio_writer)
        zserio_writer.write_string(self._element_separator_)

    def write_packed(self, zserio_context: AddressFormatElement.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        if self.is_admin_hierarchy_element_type_used():
            self._admin_hierarchy_element_type_.write_packed(zserio_context.admin_hierarchy_element_type, zserio_writer)

        zserio_writer.write_string(self._element_separator_)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._admin_hierarchy_element_type_ = zserio.array.DeltaContext()

        @property
        def type(self):
            return self._type_

        @property
        def admin_hierarchy_element_type(self):
            return self._admin_hierarchy_element_type_
