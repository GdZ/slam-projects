# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.types.address_format_element
import nds.name.types.address_format_id

class AddressFormat:
    def __init__(
            self,
            id_: nds.name.types.address_format_id.AddressFormatId = nds.name.types.address_format_id.AddressFormatId(),
            elements_: typing.List[nds.name.types.address_format_element.AddressFormatElement] = None) -> None:
        self._id_ = id_
        self._elements_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), elements_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['AddressFormat'],
            zserio_reader: zserio.BitStreamReader) -> 'AddressFormat':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['AddressFormat'],
            zserio_context: AddressFormat.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'AddressFormat':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, AddressFormat):
            return ((self._id_ == other._id_) and
                    (self._elements_ == other._elements_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._elements_)

        return result

    @property
    def id(self) -> nds.name.types.address_format_id.AddressFormatId:
        return self._id_

    @id.setter
    def id(self, id_: nds.name.types.address_format_id.AddressFormatId) -> None:
        self._id_ = id_

    @property
    def elements(self) -> typing.List[nds.name.types.address_format_element.AddressFormatElement]:
        return self._elements_.raw_array

    @elements.setter
    def elements(self, elements_: typing.List[nds.name.types.address_format_element.AddressFormatElement]) -> None:
        self._elements_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), elements_, is_auto=True)

    def init_packing_context(self, zserio_context: AddressFormat.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUInt16ArrayTraits(), self._id_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._id_)
        end_bitposition += self._elements_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: AddressFormat.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._id_)
        end_bitposition += self._elements_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint16(self._id_)
        end_bitposition = self._elements_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: AddressFormat.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt16ArrayTraits(), self._id_)
        end_bitposition = self._elements_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint16()
        self._elements_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: AddressFormat.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUInt16ArrayTraits(), zserio_reader)

        self._elements_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_elements()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint16(self._id_)
        self._elements_.write(zserio_writer)

    def write_packed(self, zserio_context: AddressFormat.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUInt16ArrayTraits(), zserio_writer, self._id_)

        self._elements_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()

        @property
        def id(self):
            return self._id_

    class _ZserioElementFactory_elements:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.name.types.address_format_element.AddressFormatElement:
            del zserio_index
            return nds.name.types.address_format_element.AddressFormatElement.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.name.types.address_format_element.AddressFormatElement.ZserioPackingContext:
            return nds.name.types.address_format_element.AddressFormatElement.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.name.types.address_format_element.AddressFormatElement.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.name.types.address_format_element.AddressFormatElement:
            del zserio_index
            return nds.name.types.address_format_element.AddressFormatElement.from_reader_packed(zserio_context, zserio_reader)
