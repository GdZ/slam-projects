# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.name.types.house_number_range_numbers
import nds.name.types.house_number_type

class HouseNumberRange:
    def __init__(
            self,
            type_: typing.Union[nds.name.types.house_number_type.HouseNumberType, None] = None,
            numbers_: typing.Union[nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers, None] = None) -> None:
        self._type_ = type_
        self._numbers_ = numbers_

    @classmethod
    def from_reader(
            cls: typing.Type['HouseNumberRange'],
            zserio_reader: zserio.BitStreamReader) -> 'HouseNumberRange':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['HouseNumberRange'],
            zserio_context: HouseNumberRange.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'HouseNumberRange':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, HouseNumberRange):
            return ((self._type_ == other._type_) and
                    (self._numbers_ == other._numbers_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._type_)
        result = zserio.hashcode.calc_hashcode_object(result, self._numbers_)

        return result

    @property
    def type(self) -> typing.Union[nds.name.types.house_number_type.HouseNumberType, None]:
        return self._type_

    @type.setter
    def type(self, type_: typing.Union[nds.name.types.house_number_type.HouseNumberType, None]) -> None:
        self._type_ = type_

    @property
    def numbers(self) -> typing.Union[nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers, None]:
        return self._numbers_

    @numbers.setter
    def numbers(self, numbers_: typing.Union[nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers, None]) -> None:
        self._numbers_ = numbers_

    def init_packing_context(self, zserio_context: HouseNumberRange.ZserioPackingContext) -> None:
        self._type_.init_packing_context(zserio_context.type)
        self._numbers_.init_packing_context(zserio_context.numbers)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof(end_bitposition)
        end_bitposition += self._numbers_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: HouseNumberRange.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._type_.bitsizeof_packed(zserio_context.type, end_bitposition)
        end_bitposition += self._numbers_.bitsizeof_packed(zserio_context.numbers, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets(end_bitposition)
        end_bitposition = self._numbers_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: HouseNumberRange.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._type_.initialize_offsets_packed(zserio_context.type, end_bitposition)
        end_bitposition = self._numbers_.initialize_offsets_packed(zserio_context.numbers, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.name.types.house_number_type.HouseNumberType.from_reader(zserio_reader)
        self._numbers_ = nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers.from_reader(zserio_reader, self._type_)

    def read_packed(self, zserio_context: HouseNumberRange.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._type_ = nds.name.types.house_number_type.HouseNumberType.from_reader_packed(zserio_context.type, zserio_reader)

        self._numbers_ = nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers.from_reader_packed(zserio_context.numbers, zserio_reader, self._type_)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write(zserio_writer)

        # check parameters
        if self._numbers_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field HouseNumberRange.numbers: "
                                                f"{self._numbers_.type} != {self._type_}!")
        self._numbers_.write(zserio_writer)

    def write_packed(self, zserio_context: HouseNumberRange.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._type_.write_packed(zserio_context.type, zserio_writer)

        # check parameters
        if self._numbers_.type is not (self._type_):
            raise zserio.PythonRuntimeException("Wrong parameter type for field HouseNumberRange.numbers: "
                                                f"{self._numbers_.type} != {self._type_}!")
        self._numbers_.write_packed(zserio_context.numbers, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._type_ = zserio.array.DeltaContext()
            self._numbers_ = nds.name.types.house_number_range_numbers.HouseNumberRangeNumbers.ZserioPackingContext()

        @property
        def type(self):
            return self._type_

        @property
        def numbers(self):
            return self._numbers_
