# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.vehicle.reference.types.horizon_path_id
import nds.vehicle.types.horizon_path

class Horizon:
    def __init__(
            self,
            num_paths_: int = int(),
            horizon_: typing.List[nds.vehicle.types.horizon_path.HorizonPath] = None,
            most_probable_path_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId] = None) -> None:
        self._num_paths_ = num_paths_
        self._horizon_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_horizon()), horizon_)
        self._most_probable_path_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), most_probable_path_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Horizon'],
            zserio_reader: zserio.BitStreamReader) -> 'Horizon':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['Horizon'],
            zserio_context: Horizon.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'Horizon':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Horizon):
            return ((self._num_paths_ == other._num_paths_) and
                    (self._horizon_ == other._horizon_) and
                    (self._most_probable_path_ == other._most_probable_path_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int64(result, self._num_paths_)
        result = zserio.hashcode.calc_hashcode_object(result, self._horizon_)
        result = zserio.hashcode.calc_hashcode_object(result, self._most_probable_path_)

        return result

    @property
    def num_paths(self) -> int:
        return self._num_paths_

    @num_paths.setter
    def num_paths(self, num_paths_: int) -> None:
        self._num_paths_ = num_paths_

    @property
    def horizon(self) -> typing.List[nds.vehicle.types.horizon_path.HorizonPath]:
        return self._horizon_.raw_array

    @horizon.setter
    def horizon(self, horizon_: typing.List[nds.vehicle.types.horizon_path.HorizonPath]) -> None:
        self._horizon_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_horizon()), horizon_)

    @property
    def most_probable_path(self) -> typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]:
        return self._most_probable_path_.raw_array

    @most_probable_path.setter
    def most_probable_path(self, most_probable_path_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]) -> None:
        self._most_probable_path_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), most_probable_path_, is_auto=True)

    def init_packing_context(self, zserio_context: Horizon.ZserioPackingContext) -> None:
        zserio_context.num_paths.init(zserio.array.VarSizeArrayTraits(), self._num_paths_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_paths_)
        end_bitposition += self._horizon_.bitsizeof(end_bitposition)
        end_bitposition += self._most_probable_path_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: Horizon.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_paths.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_paths_)
        end_bitposition += self._horizon_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._most_probable_path_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._num_paths_)
        end_bitposition = self._horizon_.initialize_offsets(end_bitposition)
        end_bitposition = self._most_probable_path_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: Horizon.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.num_paths.bitsizeof(zserio.array.VarSizeArrayTraits(), self._num_paths_)
        end_bitposition = self._horizon_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._most_probable_path_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_paths_ = zserio_reader.read_varsize()
        self._horizon_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_horizon()), zserio_reader, self._num_paths_)
        self._most_probable_path_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: Horizon.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._num_paths_ = zserio_context.num_paths.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._horizon_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_horizon()), zserio_reader, self._num_paths_)

        self._most_probable_path_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._num_paths_)

        # check array length
        if len(self._horizon_) != (self._num_paths_):
            raise zserio.PythonRuntimeException("Wrong array length for field Horizon.horizon: "
                                                f"{len(self._horizon_)} != {self._num_paths_}!")
        self._horizon_.write(zserio_writer)

        self._most_probable_path_.write(zserio_writer)

    def write_packed(self, zserio_context: Horizon.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.num_paths.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._num_paths_)

        # check array length
        if len(self._horizon_) != (self._num_paths_):
            raise zserio.PythonRuntimeException("Wrong array length for field Horizon.horizon: "
                                                f"{len(self._horizon_)} != {self._num_paths_}!")
        self._horizon_.write_packed(zserio_writer)

        self._most_probable_path_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._num_paths_ = zserio.array.DeltaContext()

        @property
        def num_paths(self):
            return self._num_paths_

    class _ZserioElementFactory_horizon:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.vehicle.types.horizon_path.HorizonPath:
            del zserio_index
            return nds.vehicle.types.horizon_path.HorizonPath.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.vehicle.types.horizon_path.HorizonPath.ZserioPackingContext:
            return nds.vehicle.types.horizon_path.HorizonPath.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.vehicle.types.horizon_path.HorizonPath.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.vehicle.types.horizon_path.HorizonPath:
            del zserio_index
            return nds.vehicle.types.horizon_path.HorizonPath.from_reader_packed(zserio_context, zserio_reader)
