# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.speed_kmh
import nds.core.vehicle.heading
import nds.core.vehicle.match_probability
import nds.vehicle.reference.types.horizon_path_id
import nds.vehicle.reference.types.horizon_path_offset

class PoseRoadPathMatched:
    def __init__(
            self,
            id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId = nds.vehicle.reference.types.horizon_path_id.HorizonPathId(),
            offset_: nds.vehicle.reference.types.horizon_path_offset.HorizonPathOffset = nds.vehicle.reference.types.horizon_path_offset.HorizonPathOffset(),
            altitude_: typing.Optional[int] = None,
            heading_: typing.Optional[nds.core.vehicle.heading.Heading] = None,
            speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh] = None,
            probability_: typing.Optional[nds.core.vehicle.match_probability.MatchProbability] = None) -> None:
        self._id_ = id_
        self._offset_ = offset_
        self._altitude_ = altitude_
        self._heading_ = heading_
        self._speed_ = speed_
        self._probability_ = probability_

    @classmethod
    def from_reader(
            cls: typing.Type['PoseRoadPathMatched'],
            zserio_reader: zserio.BitStreamReader) -> 'PoseRoadPathMatched':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoseRoadPathMatched'],
            zserio_context: PoseRoadPathMatched.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoseRoadPathMatched':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoseRoadPathMatched):
            return ((self._id_ == other._id_) and
                    (self._offset_ == other._offset_) and
                    (not other.is_altitude_used() if not self.is_altitude_used() else (self._altitude_ == other._altitude_)) and
                    (not other.is_heading_used() if not self.is_heading_used() else (self._heading_ == other._heading_)) and
                    (not other.is_speed_used() if not self.is_speed_used() else (self._speed_ == other._speed_)) and
                    (not other.is_probability_used() if not self.is_probability_used() else (self._probability_ == other._probability_)))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._id_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._offset_)
        if self.is_altitude_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._altitude_)
        if self.is_heading_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._heading_)
        if self.is_speed_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._speed_)
        if self.is_probability_used():
            result = zserio.hashcode.calc_hashcode_object(result, self._probability_)

        return result

    @property
    def id(self) -> nds.vehicle.reference.types.horizon_path_id.HorizonPathId:
        return self._id_

    @id.setter
    def id(self, id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId) -> None:
        self._id_ = id_

    @property
    def offset(self) -> nds.vehicle.reference.types.horizon_path_offset.HorizonPathOffset:
        return self._offset_

    @offset.setter
    def offset(self, offset_: nds.vehicle.reference.types.horizon_path_offset.HorizonPathOffset) -> None:
        self._offset_ = offset_

    @property
    def altitude(self) -> typing.Optional[int]:
        return self._altitude_

    @altitude.setter
    def altitude(self, altitude_: typing.Optional[int]) -> None:
        self._altitude_ = altitude_

    def is_altitude_used(self) -> bool:
        return self.is_altitude_set()

    def is_altitude_set(self) -> bool:
        return not self._altitude_ is None

    def reset_altitude(self) -> None:
        self._altitude_ = None

    @property
    def heading(self) -> typing.Optional[nds.core.vehicle.heading.Heading]:
        return self._heading_

    @heading.setter
    def heading(self, heading_: typing.Optional[nds.core.vehicle.heading.Heading]) -> None:
        self._heading_ = heading_

    def is_heading_used(self) -> bool:
        return self.is_heading_set()

    def is_heading_set(self) -> bool:
        return not self._heading_ is None

    def reset_heading(self) -> None:
        self._heading_ = None

    @property
    def speed(self) -> typing.Optional[nds.core.types.speed_kmh.SpeedKmh]:
        return self._speed_

    @speed.setter
    def speed(self, speed_: typing.Optional[nds.core.types.speed_kmh.SpeedKmh]) -> None:
        self._speed_ = speed_

    def is_speed_used(self) -> bool:
        return self.is_speed_set()

    def is_speed_set(self) -> bool:
        return not self._speed_ is None

    def reset_speed(self) -> None:
        self._speed_ = None

    @property
    def probability(self) -> typing.Optional[nds.core.vehicle.match_probability.MatchProbability]:
        return self._probability_

    @probability.setter
    def probability(self, probability_: typing.Optional[nds.core.vehicle.match_probability.MatchProbability]) -> None:
        self._probability_ = probability_

    def is_probability_used(self) -> bool:
        return self.is_probability_set()

    def is_probability_set(self) -> bool:
        return not self._probability_ is None

    def reset_probability(self) -> None:
        self._probability_ = None

    def init_packing_context(self, zserio_context: PoseRoadPathMatched.ZserioPackingContext) -> None:
        zserio_context.id.init(zserio.array.VarUInt32ArrayTraits(), self._id_)
        zserio_context.offset.init(zserio.array.VarUInt32ArrayTraits(), self._offset_)
        if self.is_altitude_used():
            zserio_context.altitude.init(zserio.array.VarInt32ArrayTraits(), self._altitude_)
        if self.is_heading_used():
            zserio_context.heading.init(zserio.array.BitFieldArrayTraits(8), self._heading_)
        if self.is_speed_used():
            zserio_context.speed.init(zserio.array.BitFieldArrayTraits(8), self._speed_)
        if self.is_probability_used():
            self._probability_.init_packing_context(zserio_context.probability)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._offset_)
        end_bitposition += 1
        if self.is_altitude_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._altitude_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition += self._probability_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoseRoadPathMatched.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._id_)
        end_bitposition += zserio_context.offset.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._offset_)
        end_bitposition += 1
        if self.is_altitude_used():
            end_bitposition += zserio_context.altitude.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._altitude_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition += self._probability_.bitsizeof_packed(zserio_context.probability, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._offset_)
        end_bitposition += 1
        if self.is_altitude_used():
            end_bitposition += zserio.bitsizeof.bitsizeof_varint32(self._altitude_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += 8
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition = self._probability_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoseRoadPathMatched.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._id_)
        end_bitposition += zserio_context.offset.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._offset_)
        end_bitposition += 1
        if self.is_altitude_used():
            end_bitposition += zserio_context.altitude.bitsizeof(zserio.array.VarInt32ArrayTraits(), self._altitude_)
        end_bitposition += 1
        if self.is_heading_used():
            end_bitposition += zserio_context.heading.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._heading_)
        end_bitposition += 1
        if self.is_speed_used():
            end_bitposition += zserio_context.speed.bitsizeof(zserio.array.BitFieldArrayTraits(8), self._speed_)
        end_bitposition += 1
        if self.is_probability_used():
            end_bitposition = self._probability_.initialize_offsets_packed(zserio_context.probability, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_varuint32()
        self._offset_ = zserio_reader.read_varuint32()
        if zserio_reader.read_bool():
            self._altitude_ = zserio_reader.read_varint32()
        else:
            self._altitude_ = None
        if zserio_reader.read_bool():
            self._heading_ = zserio_reader.read_bits(8)
        else:
            self._heading_ = None
        if zserio_reader.read_bool():
            self._speed_ = zserio_reader.read_bits(8)
        else:
            self._speed_ = None
        if zserio_reader.read_bool():
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.from_reader(zserio_reader)
        else:
            self._probability_ = None

    def read_packed(self, zserio_context: PoseRoadPathMatched.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_context.id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._offset_ = zserio_context.offset.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        if zserio_reader.read_bool():
            self._altitude_ = zserio_context.altitude.read(zserio.array.VarInt32ArrayTraits(), zserio_reader)
        else:
            self._altitude_ = None

        if zserio_reader.read_bool():
            self._heading_ = zserio_context.heading.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._heading_ = None

        if zserio_reader.read_bool():
            self._speed_ = zserio_context.speed.read(zserio.array.BitFieldArrayTraits(8), zserio_reader)
        else:
            self._speed_ = None

        if zserio_reader.read_bool():
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.from_reader_packed(zserio_context.probability, zserio_reader)
        else:
            self._probability_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._id_)
        zserio_writer.write_varuint32(self._offset_)
        if self.is_altitude_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_varint32(self._altitude_)
        else:
            zserio_writer.write_bool(False)
        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._heading_, 8)
        else:
            zserio_writer.write_bool(False)
        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_writer.write_bits(self._speed_, 8)
        else:
            zserio_writer.write_bool(False)
        if self.is_probability_used():
            zserio_writer.write_bool(True)
            self._probability_.write(zserio_writer)
        else:
            zserio_writer.write_bool(False)

    def write_packed(self, zserio_context: PoseRoadPathMatched.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._id_)

        zserio_context.offset.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._offset_)

        if self.is_altitude_used():
            zserio_writer.write_bool(True)
            zserio_context.altitude.write(zserio.array.VarInt32ArrayTraits(), zserio_writer, self._altitude_)
        else:
            zserio_writer.write_bool(False)

        if self.is_heading_used():
            zserio_writer.write_bool(True)
            zserio_context.heading.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._heading_)
        else:
            zserio_writer.write_bool(False)

        if self.is_speed_used():
            zserio_writer.write_bool(True)
            zserio_context.speed.write(zserio.array.BitFieldArrayTraits(8), zserio_writer, self._speed_)
        else:
            zserio_writer.write_bool(False)

        if self.is_probability_used():
            zserio_writer.write_bool(True)
            self._probability_.write_packed(zserio_context.probability, zserio_writer)
        else:
            zserio_writer.write_bool(False)

    class ZserioPackingContext:
        def __init__(self):
            self._id_ = zserio.array.DeltaContext()
            self._offset_ = zserio.array.DeltaContext()
            self._altitude_ = zserio.array.DeltaContext()
            self._heading_ = zserio.array.DeltaContext()
            self._speed_ = zserio.array.DeltaContext()
            self._probability_ = nds.core.vehicle.match_probability.MatchProbability.ZserioPackingContext()

        @property
        def id(self):
            return self._id_

        @property
        def offset(self):
            return self._offset_

        @property
        def altitude(self):
            return self._altitude_

        @property
        def heading(self):
            return self._heading_

        @property
        def speed(self):
            return self._speed_

        @property
        def probability(self):
            return self._probability_
