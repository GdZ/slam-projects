# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.location.road_location_path
import nds.vehicle.reference.types.horizon_path_id

class HorizonPath:
    def __init__(
            self,
            path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId = nds.vehicle.reference.types.horizon_path_id.HorizonPathId(),
            parent_path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId = nds.vehicle.reference.types.horizon_path_id.HorizonPathId(),
            parent_segment_index_: int = int(),
            path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None] = None) -> None:
        self._path_id_ = path_id_
        self._parent_path_id_ = parent_path_id_
        self._parent_segment_index_ = parent_segment_index_
        self._path_ = path_

    @classmethod
    def from_reader(
            cls: typing.Type['HorizonPath'],
            zserio_reader: zserio.BitStreamReader) -> 'HorizonPath':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['HorizonPath'],
            zserio_context: HorizonPath.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'HorizonPath':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, HorizonPath):
            return ((self._path_id_ == other._path_id_) and
                    (self._parent_path_id_ == other._parent_path_id_) and
                    (self._parent_segment_index_ == other._parent_segment_index_) and
                    (self._path_ == other._path_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._path_id_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._parent_path_id_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._parent_segment_index_)
        result = zserio.hashcode.calc_hashcode_object(result, self._path_)

        return result

    @property
    def path_id(self) -> nds.vehicle.reference.types.horizon_path_id.HorizonPathId:
        return self._path_id_

    @path_id.setter
    def path_id(self, path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId) -> None:
        self._path_id_ = path_id_

    @property
    def parent_path_id(self) -> nds.vehicle.reference.types.horizon_path_id.HorizonPathId:
        return self._parent_path_id_

    @parent_path_id.setter
    def parent_path_id(self, parent_path_id_: nds.vehicle.reference.types.horizon_path_id.HorizonPathId) -> None:
        self._parent_path_id_ = parent_path_id_

    @property
    def parent_segment_index(self) -> int:
        return self._parent_segment_index_

    @parent_segment_index.setter
    def parent_segment_index(self, parent_segment_index_: int) -> None:
        self._parent_segment_index_ = parent_segment_index_

    @property
    def path(self) -> typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]:
        return self._path_

    @path.setter
    def path(self, path_: typing.Union[nds.core.location.road_location_path.RoadLocationPath, None]) -> None:
        self._path_ = path_

    def init_packing_context(self, zserio_context: HorizonPath.ZserioPackingContext) -> None:
        zserio_context.path_id.init(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        zserio_context.parent_path_id.init(zserio.array.VarUInt32ArrayTraits(), self._parent_path_id_)
        zserio_context.parent_segment_index.init(zserio.array.VarSizeArrayTraits(), self._parent_segment_index_)
        self._path_.init_packing_context(zserio_context.path)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._parent_path_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._parent_segment_index_)
        end_bitposition += self._path_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: HorizonPath.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition += zserio_context.parent_path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._parent_path_id_)
        end_bitposition += zserio_context.parent_segment_index.bitsizeof(zserio.array.VarSizeArrayTraits(), self._parent_segment_index_)
        end_bitposition += self._path_.bitsizeof_packed(zserio_context.path, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._path_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._parent_path_id_)
        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._parent_segment_index_)
        end_bitposition = self._path_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: HorizonPath.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition += zserio_context.path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._path_id_)
        end_bitposition += zserio_context.parent_path_id.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._parent_path_id_)
        end_bitposition += zserio_context.parent_segment_index.bitsizeof(zserio.array.VarSizeArrayTraits(), self._parent_segment_index_)
        end_bitposition = self._path_.initialize_offsets_packed(zserio_context.path, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_id_ = zserio_reader.read_varuint32()
        self._parent_path_id_ = zserio_reader.read_varuint32()
        self._parent_segment_index_ = zserio_reader.read_varsize()
        self._path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader(zserio_reader)

    def read_packed(self, zserio_context: HorizonPath.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._path_id_ = zserio_context.path_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._parent_path_id_ = zserio_context.parent_path_id.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

        self._parent_segment_index_ = zserio_context.parent_segment_index.read(zserio.array.VarSizeArrayTraits(), zserio_reader)

        self._path_ = nds.core.location.road_location_path.RoadLocationPath.from_reader_packed(zserio_context.path, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varuint32(self._path_id_)
        zserio_writer.write_varuint32(self._parent_path_id_)
        zserio_writer.write_varsize(self._parent_segment_index_)
        self._path_.write(zserio_writer)

    def write_packed(self, zserio_context: HorizonPath.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_context.path_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._path_id_)

        zserio_context.parent_path_id.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._parent_path_id_)

        zserio_context.parent_segment_index.write(zserio.array.VarSizeArrayTraits(), zserio_writer, self._parent_segment_index_)

        self._path_.write_packed(zserio_context.path, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._path_id_ = zserio.array.DeltaContext()
            self._parent_path_id_ = zserio.array.DeltaContext()
            self._parent_segment_index_ = zserio.array.DeltaContext()
            self._path_ = nds.core.location.road_location_path.RoadLocationPath.ZserioPackingContext()

        @property
        def path_id(self):
            return self._path_id_

        @property
        def parent_path_id(self):
            return self._parent_path_id_

        @property
        def parent_segment_index(self):
            return self._parent_segment_index_

        @property
        def path(self):
            return self._path_
