# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp
import nds.core.vehicle.pose_raw

class PoseRawTopic:
    def __init__(
            self,
            stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            pose_: typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None] = None) -> None:
        self._stamp_ = stamp_
        self._pose_ = pose_

    @classmethod
    def from_reader(
            cls: typing.Type['PoseRawTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'PoseRawTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoseRawTopic'],
            zserio_context: PoseRawTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoseRawTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoseRawTopic):
            return ((self._stamp_ == other._stamp_) and
                    (self._pose_ == other._pose_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._stamp_)
        result = zserio.hashcode.calc_hashcode_object(result, self._pose_)

        return result

    @property
    def stamp(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._stamp_

    @stamp.setter
    def stamp(self, stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._stamp_ = stamp_

    @property
    def pose(self) -> typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None]:
        return self._pose_

    @pose.setter
    def pose(self, pose_: typing.Union[nds.core.vehicle.pose_raw.PoseRaw, None]) -> None:
        self._pose_ = pose_

    def init_packing_context(self, zserio_context: PoseRawTopic.ZserioPackingContext) -> None:
        self._stamp_.init_packing_context(zserio_context.stamp)
        self._pose_.init_packing_context(zserio_context.pose)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof(end_bitposition)
        end_bitposition += self._pose_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoseRawTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += self._pose_.bitsizeof_packed(zserio_context.pose, end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets(end_bitposition)
        end_bitposition = self._pose_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoseRawTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets_packed(zserio_context.stamp, end_bitposition)
        end_bitposition = self._pose_.initialize_offsets_packed(zserio_context.pose, end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._pose_ = nds.core.vehicle.pose_raw.PoseRaw.from_reader(zserio_reader)

    def read_packed(self, zserio_context: PoseRawTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.stamp, zserio_reader)

        self._pose_ = nds.core.vehicle.pose_raw.PoseRaw.from_reader_packed(zserio_context.pose, zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write(zserio_writer)
        self._pose_.write(zserio_writer)

    def write_packed(self, zserio_context: PoseRawTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write_packed(zserio_context.stamp, zserio_writer)

        self._pose_.write_packed(zserio_context.pose, zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._stamp_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()
            self._pose_ = nds.core.vehicle.pose_raw.PoseRaw.ZserioPackingContext()

        @property
        def stamp(self):
            return self._stamp_

        @property
        def pose(self):
            return self._pose_
