# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp
import nds.vehicle.reference.types.horizon_path_id
import nds.vehicle.types.horizon

class MatchedGeoRoadNetworkTopic:
    def __init__(
            self,
            stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            matched_road_network_: typing.Union[nds.vehicle.types.horizon.Horizon, None] = None,
            unmatched_paths_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId] = None) -> None:
        self._stamp_ = stamp_
        self._matched_road_network_ = matched_road_network_
        self._unmatched_paths_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), unmatched_paths_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['MatchedGeoRoadNetworkTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'MatchedGeoRoadNetworkTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MatchedGeoRoadNetworkTopic'],
            zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MatchedGeoRoadNetworkTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MatchedGeoRoadNetworkTopic):
            return ((self._stamp_ == other._stamp_) and
                    (self._matched_road_network_ == other._matched_road_network_) and
                    (self._unmatched_paths_ == other._unmatched_paths_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._stamp_)
        result = zserio.hashcode.calc_hashcode_object(result, self._matched_road_network_)
        result = zserio.hashcode.calc_hashcode_object(result, self._unmatched_paths_)

        return result

    @property
    def stamp(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._stamp_

    @stamp.setter
    def stamp(self, stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._stamp_ = stamp_

    @property
    def matched_road_network(self) -> typing.Union[nds.vehicle.types.horizon.Horizon, None]:
        return self._matched_road_network_

    @matched_road_network.setter
    def matched_road_network(self, matched_road_network_: typing.Union[nds.vehicle.types.horizon.Horizon, None]) -> None:
        self._matched_road_network_ = matched_road_network_

    @property
    def unmatched_paths(self) -> typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]:
        return self._unmatched_paths_.raw_array

    @unmatched_paths.setter
    def unmatched_paths(self, unmatched_paths_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]) -> None:
        self._unmatched_paths_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), unmatched_paths_, is_auto=True)

    def init_packing_context(self, zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext) -> None:
        self._stamp_.init_packing_context(zserio_context.stamp)
        self._matched_road_network_.init_packing_context(zserio_context.matched_road_network)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof(end_bitposition)
        end_bitposition += self._matched_road_network_.bitsizeof(end_bitposition)
        end_bitposition += self._unmatched_paths_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += self._matched_road_network_.bitsizeof_packed(zserio_context.matched_road_network, end_bitposition)
        end_bitposition += self._unmatched_paths_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets(end_bitposition)
        end_bitposition = self._matched_road_network_.initialize_offsets(end_bitposition)
        end_bitposition = self._unmatched_paths_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets_packed(zserio_context.stamp, end_bitposition)
        end_bitposition = self._matched_road_network_.initialize_offsets_packed(zserio_context.matched_road_network, end_bitposition)
        end_bitposition = self._unmatched_paths_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._matched_road_network_ = nds.vehicle.types.horizon.Horizon.from_reader(zserio_reader)
        self._unmatched_paths_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.stamp, zserio_reader)

        self._matched_road_network_ = nds.vehicle.types.horizon.Horizon.from_reader_packed(zserio_context.matched_road_network, zserio_reader)

        self._unmatched_paths_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write(zserio_writer)
        self._matched_road_network_.write(zserio_writer)
        self._unmatched_paths_.write(zserio_writer)

    def write_packed(self, zserio_context: MatchedGeoRoadNetworkTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write_packed(zserio_context.stamp, zserio_writer)

        self._matched_road_network_.write_packed(zserio_context.matched_road_network, zserio_writer)

        self._unmatched_paths_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._stamp_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()
            self._matched_road_network_ = nds.vehicle.types.horizon.Horizon.ZserioPackingContext()

        @property
        def stamp(self):
            return self._stamp_

        @property
        def matched_road_network(self):
            return self._matched_road_network_
