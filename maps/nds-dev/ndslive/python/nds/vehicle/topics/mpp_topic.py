# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp
import nds.vehicle.reference.types.horizon_path_id

class MppTopic:
    def __init__(
            self,
            time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            mpp_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId] = None) -> None:
        self._time_ = time_
        self._mpp_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), mpp_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['MppTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'MppTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['MppTopic'],
            zserio_context: MppTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'MppTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, MppTopic):
            return ((self._time_ == other._time_) and
                    (self._mpp_ == other._mpp_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._time_)
        result = zserio.hashcode.calc_hashcode_object(result, self._mpp_)

        return result

    @property
    def time(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._time_

    @time.setter
    def time(self, time_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._time_ = time_

    @property
    def mpp(self) -> typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]:
        return self._mpp_.raw_array

    @mpp.setter
    def mpp(self, mpp_: typing.List[nds.vehicle.reference.types.horizon_path_id.HorizonPathId]) -> None:
        self._mpp_ = zserio.array.Array(zserio.array.VarUInt32ArrayTraits(), mpp_, is_auto=True)

    def init_packing_context(self, zserio_context: MppTopic.ZserioPackingContext) -> None:
        self._time_.init_packing_context(zserio_context.time)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._time_.bitsizeof(end_bitposition)
        end_bitposition += self._mpp_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: MppTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._time_.bitsizeof_packed(zserio_context.time, end_bitposition)
        end_bitposition += self._mpp_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._time_.initialize_offsets(end_bitposition)
        end_bitposition = self._mpp_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: MppTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._time_.initialize_offsets_packed(zserio_context.time, end_bitposition)
        end_bitposition = self._mpp_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._time_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._mpp_ = zserio.array.Array.from_reader(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: MppTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._time_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.time, zserio_reader)

        self._mpp_ = zserio.array.Array.from_reader_packed(zserio.array.VarUInt32ArrayTraits(), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._time_.write(zserio_writer)
        self._mpp_.write(zserio_writer)

    def write_packed(self, zserio_context: MppTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._time_.write_packed(zserio_context.time, zserio_writer)

        self._mpp_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._time_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()

        @property
        def time(self):
            return self._time_
