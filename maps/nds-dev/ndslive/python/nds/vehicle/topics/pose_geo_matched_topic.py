# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.time_stamp
import nds.core.vehicle.pose_geo_matched

class PoseGeoMatchedTopic:
    def __init__(
            self,
            stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None] = None,
            pose_matched_candidates_: typing.List[nds.core.vehicle.pose_geo_matched.PoseGeoMatched] = None) -> None:
        self._stamp_ = stamp_
        self._pose_matched_candidates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose_matched_candidates()), pose_matched_candidates_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['PoseGeoMatchedTopic'],
            zserio_reader: zserio.BitStreamReader) -> 'PoseGeoMatchedTopic':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['PoseGeoMatchedTopic'],
            zserio_context: PoseGeoMatchedTopic.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'PoseGeoMatchedTopic':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, PoseGeoMatchedTopic):
            return ((self._stamp_ == other._stamp_) and
                    (self._pose_matched_candidates_ == other._pose_matched_candidates_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._stamp_)
        result = zserio.hashcode.calc_hashcode_object(result, self._pose_matched_candidates_)

        return result

    @property
    def stamp(self) -> typing.Union[nds.core.types.time_stamp.TimeStamp, None]:
        return self._stamp_

    @stamp.setter
    def stamp(self, stamp_: typing.Union[nds.core.types.time_stamp.TimeStamp, None]) -> None:
        self._stamp_ = stamp_

    @property
    def pose_matched_candidates(self) -> typing.List[nds.core.vehicle.pose_geo_matched.PoseGeoMatched]:
        return self._pose_matched_candidates_.raw_array

    @pose_matched_candidates.setter
    def pose_matched_candidates(self, pose_matched_candidates_: typing.List[nds.core.vehicle.pose_geo_matched.PoseGeoMatched]) -> None:
        self._pose_matched_candidates_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose_matched_candidates()), pose_matched_candidates_, is_auto=True)

    def init_packing_context(self, zserio_context: PoseGeoMatchedTopic.ZserioPackingContext) -> None:
        self._stamp_.init_packing_context(zserio_context.stamp)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof(end_bitposition)
        end_bitposition += self._pose_matched_candidates_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: PoseGeoMatchedTopic.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._stamp_.bitsizeof_packed(zserio_context.stamp, end_bitposition)
        end_bitposition += self._pose_matched_candidates_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets(end_bitposition)
        end_bitposition = self._pose_matched_candidates_.initialize_offsets(end_bitposition)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: PoseGeoMatchedTopic.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._stamp_.initialize_offsets_packed(zserio_context.stamp, end_bitposition)
        end_bitposition = self._pose_matched_candidates_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader(zserio_reader)
        self._pose_matched_candidates_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose_matched_candidates()), zserio_reader, is_auto=True)

    def read_packed(self, zserio_context: PoseGeoMatchedTopic.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._stamp_ = nds.core.types.time_stamp.TimeStamp.from_reader_packed(zserio_context.stamp, zserio_reader)

        self._pose_matched_candidates_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose_matched_candidates()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write(zserio_writer)
        self._pose_matched_candidates_.write(zserio_writer)

    def write_packed(self, zserio_context: PoseGeoMatchedTopic.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        self._stamp_.write_packed(zserio_context.stamp, zserio_writer)

        self._pose_matched_candidates_.write_packed(zserio_writer)

    class ZserioPackingContext:
        def __init__(self):
            self._stamp_ = nds.core.types.time_stamp.TimeStamp.ZserioPackingContext()

        @property
        def stamp(self):
            return self._stamp_

    class _ZserioElementFactory_pose_matched_candidates:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.vehicle.pose_geo_matched.PoseGeoMatched:
            del zserio_index
            return nds.core.vehicle.pose_geo_matched.PoseGeoMatched.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.vehicle.pose_geo_matched.PoseGeoMatched.ZserioPackingContext:
            return nds.core.vehicle.pose_geo_matched.PoseGeoMatched.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.vehicle.pose_geo_matched.PoseGeoMatched.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.vehicle.pose_geo_matched.PoseGeoMatched:
            del zserio_index
            return nds.core.vehicle.pose_geo_matched.PoseGeoMatched.from_reader_packed(zserio_context, zserio_reader)
