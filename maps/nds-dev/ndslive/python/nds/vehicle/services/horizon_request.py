# Automatically generated by Zserio Python extension version 2.12.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds.core.types.length_meters
import nds.core.vehicle.vehicle_pose

class HorizonRequest:
    def __init__(
            self,
            pose_: typing.List[nds.core.vehicle.vehicle_pose.VehiclePose] = None,
            horizon_length_: nds.core.types.length_meters.LengthMeters = nds.core.types.length_meters.LengthMeters()) -> None:
        self._pose_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose()), pose_, is_auto=True)
        self._horizon_length_ = horizon_length_

    @classmethod
    def from_reader(
            cls: typing.Type['HorizonRequest'],
            zserio_reader: zserio.BitStreamReader) -> 'HorizonRequest':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @classmethod
    def from_reader_packed(
            cls: typing.Type['HorizonRequest'],
            zserio_context: HorizonRequest.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader) -> 'HorizonRequest':
        self = object.__new__(cls)

        self.read_packed(zserio_context, zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, HorizonRequest):
            return ((self._pose_ == other._pose_) and
                    (self._horizon_length_ == other._horizon_length_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._pose_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._horizon_length_)

        return result

    @property
    def pose(self) -> typing.List[nds.core.vehicle.vehicle_pose.VehiclePose]:
        return self._pose_.raw_array

    @pose.setter
    def pose(self, pose_: typing.List[nds.core.vehicle.vehicle_pose.VehiclePose]) -> None:
        self._pose_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose()), pose_, is_auto=True)

    @property
    def horizon_length(self) -> nds.core.types.length_meters.LengthMeters:
        return self._horizon_length_

    @horizon_length.setter
    def horizon_length(self, horizon_length_: nds.core.types.length_meters.LengthMeters) -> None:
        self._horizon_length_ = horizon_length_

    def init_packing_context(self, zserio_context: HorizonRequest.ZserioPackingContext) -> None:
        zserio_context.horizon_length.init(zserio.array.VarUInt32ArrayTraits(), self._horizon_length_)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._pose_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._horizon_length_)

        return end_bitposition - bitposition

    def bitsizeof_packed(self, zserio_context: HorizonRequest.ZserioPackingContext, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._pose_.bitsizeof_packed(end_bitposition)
        end_bitposition += zserio_context.horizon_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._horizon_length_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._pose_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_varuint32(self._horizon_length_)

        return end_bitposition

    def initialize_offsets_packed(self, zserio_context: HorizonRequest.ZserioPackingContext, bitposition: int) -> int:
        end_bitposition = bitposition
        end_bitposition = self._pose_.initialize_offsets_packed(end_bitposition)
        end_bitposition += zserio_context.horizon_length.bitsizeof(zserio.array.VarUInt32ArrayTraits(), self._horizon_length_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._pose_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._pose_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field HorizonRequest.pose!")

        self._horizon_length_ = zserio_reader.read_varuint32()

    def read_packed(self, zserio_context: HorizonRequest.ZserioPackingContext, zserio_reader: zserio.BitStreamReader) -> None:
        self._pose_ = zserio.array.Array.from_reader_packed(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_pose()), zserio_reader, is_auto=True)
        # check constraint
        if not (len(self._pose_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field HorizonRequest.pose!")

        self._horizon_length_ = zserio_context.horizon_length.read(zserio.array.VarUInt32ArrayTraits(), zserio_reader)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (len(self._pose_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field HorizonRequest.pose!")
        self._pose_.write(zserio_writer)

        zserio_writer.write_varuint32(self._horizon_length_)

    def write_packed(self, zserio_context: HorizonRequest.ZserioPackingContext,
                     zserio_writer: zserio.BitStreamWriter) -> None:
        # check constraint
        if not (len(self._pose_) >= 1):
            raise zserio.PythonRuntimeException("Constraint violated for field HorizonRequest.pose!")
        self._pose_.write_packed(zserio_writer)

        zserio_context.horizon_length.write(zserio.array.VarUInt32ArrayTraits(), zserio_writer, self._horizon_length_)

    class ZserioPackingContext:
        def __init__(self):
            self._horizon_length_ = zserio.array.DeltaContext()

        @property
        def horizon_length(self):
            return self._horizon_length_

    class _ZserioElementFactory_pose:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.vehicle.vehicle_pose.VehiclePose:
            del zserio_index
            return nds.core.vehicle.vehicle_pose.VehiclePose.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> nds.core.vehicle.vehicle_pose.VehiclePose.ZserioPackingContext:
            return nds.core.vehicle.vehicle_pose.VehiclePose.ZserioPackingContext()

        @staticmethod
        def create_packed(zserio_context: nds.core.vehicle.vehicle_pose.VehiclePose.ZserioPackingContext,
                          zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds.core.vehicle.vehicle_pose.VehiclePose:
            del zserio_index
            return nds.core.vehicle.vehicle_pose.VehiclePose.from_reader_packed(zserio_context, zserio_reader)
