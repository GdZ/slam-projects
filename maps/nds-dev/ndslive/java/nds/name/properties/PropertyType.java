/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.properties;

public enum PropertyType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    CORE((short)0),
    LANGUAGE_CODE((short)1),
    USAGE_TYPE((short)2),
    DETAIL_TYPE((short)3),
    PREFERRED_NAME((short)4),
    ADDRESS_ONLY((short)5),
    ROAD_NAME_ID((short)6),
    NOT_ADDRESS_RELEVANT((short)7),
    ADDRESS_FORMAT_ID((short)8),
    ROAD_NUMBER_PREFIX((short)9),
    ROAD_NUMBER_SUFFIX((short)10),
    ROAD_ADDRESS_POINT((short)11),
    LANE_ADDRESS_POINT((short)12),
    HOUSE_POSITION((short)13),
    PHONETIC_TRANSCRIPTION((short)14),
    PREFER_ROAD_NAME_OVER_ROAD_NUMBER((short)15);

    private PropertyType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static PropertyType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static PropertyType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static PropertyType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return CORE;
            case (short)1:
                return LANGUAGE_CODE;
            case (short)2:
                return USAGE_TYPE;
            case (short)3:
                return DETAIL_TYPE;
            case (short)4:
                return PREFERRED_NAME;
            case (short)5:
                return ADDRESS_ONLY;
            case (short)6:
                return ROAD_NAME_ID;
            case (short)7:
                return NOT_ADDRESS_RELEVANT;
            case (short)8:
                return ADDRESS_FORMAT_ID;
            case (short)9:
                return ROAD_NUMBER_PREFIX;
            case (short)10:
                return ROAD_NUMBER_SUFFIX;
            case (short)11:
                return ROAD_ADDRESS_POINT;
            case (short)12:
                return LANE_ADDRESS_POINT;
            case (short)13:
                return HOUSE_POSITION;
            case (short)14:
                return PHONETIC_TRANSCRIPTION;
            case (short)15:
                return PREFER_ROAD_NAME_OVER_ROAD_NUMBER;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration PropertyType: " + value + "!");
        }
    }

    public static PropertyType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("CORE"))
            return CORE;
        if (itemName.equals("LANGUAGE_CODE"))
            return LANGUAGE_CODE;
        if (itemName.equals("USAGE_TYPE"))
            return USAGE_TYPE;
        if (itemName.equals("DETAIL_TYPE"))
            return DETAIL_TYPE;
        if (itemName.equals("PREFERRED_NAME"))
            return PREFERRED_NAME;
        if (itemName.equals("ADDRESS_ONLY"))
            return ADDRESS_ONLY;
        if (itemName.equals("ROAD_NAME_ID"))
            return ROAD_NAME_ID;
        if (itemName.equals("NOT_ADDRESS_RELEVANT"))
            return NOT_ADDRESS_RELEVANT;
        if (itemName.equals("ADDRESS_FORMAT_ID"))
            return ADDRESS_FORMAT_ID;
        if (itemName.equals("ROAD_NUMBER_PREFIX"))
            return ROAD_NUMBER_PREFIX;
        if (itemName.equals("ROAD_NUMBER_SUFFIX"))
            return ROAD_NUMBER_SUFFIX;
        if (itemName.equals("ROAD_ADDRESS_POINT"))
            return ROAD_ADDRESS_POINT;
        if (itemName.equals("LANE_ADDRESS_POINT"))
            return LANE_ADDRESS_POINT;
        if (itemName.equals("HOUSE_POSITION"))
            return HOUSE_POSITION;
        if (itemName.equals("PHONETIC_TRANSCRIPTION"))
            return PHONETIC_TRANSCRIPTION;
        if (itemName.equals("PREFER_ROAD_NAME_OVER_ROAD_NUMBER"))
            return PREFER_ROAD_NAME_OVER_ROAD_NUMBER;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration PropertyType!");
    }

    private short value;
}
