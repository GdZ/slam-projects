/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.properties;

public class PropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            languageCode_ = new zserio.runtime.array.DeltaContext();
            usageType_ = new zserio.runtime.array.DeltaContext();
            detailType_ = new zserio.runtime.array.DeltaContext();
            roadNameId_ = new zserio.runtime.array.DeltaContext();
            addressFormatId_ = new zserio.runtime.array.DeltaContext();
            roadNumberPrefix_ = new nds.name.types.RoadNumberComponent.ZserioPackingContext();
            roadNumberSuffix_ = new nds.name.types.RoadNumberComponent.ZserioPackingContext();
            roadAddressPoint_ = new nds.name.types.RoadAddressPoint.ZserioPackingContext();
            laneAddressPoint_ = new nds.name.types.LaneAddressPoint.ZserioPackingContext();
            housePosition_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            phoneticTranscription_ = new nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLanguageCode()
        {
            return languageCode_;
        }

        public zserio.runtime.array.DeltaContext getUsageType()
        {
            return usageType_;
        }

        public zserio.runtime.array.DeltaContext getDetailType()
        {
            return detailType_;
        }

        public zserio.runtime.array.DeltaContext getRoadNameId()
        {
            return roadNameId_;
        }

        public zserio.runtime.array.DeltaContext getAddressFormatId()
        {
            return addressFormatId_;
        }

        public nds.name.types.RoadNumberComponent.ZserioPackingContext getRoadNumberPrefix()
        {
            return roadNumberPrefix_;
        }

        public nds.name.types.RoadNumberComponent.ZserioPackingContext getRoadNumberSuffix()
        {
            return roadNumberSuffix_;
        }

        public nds.name.types.RoadAddressPoint.ZserioPackingContext getRoadAddressPoint()
        {
            return roadAddressPoint_;
        }

        public nds.name.types.LaneAddressPoint.ZserioPackingContext getLaneAddressPoint()
        {
            return laneAddressPoint_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getHousePosition()
        {
            return housePosition_;
        }

        public nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext getPhoneticTranscription()
        {
            return phoneticTranscription_;
        }

        private zserio.runtime.array.DeltaContext languageCode_;
        private zserio.runtime.array.DeltaContext usageType_;
        private zserio.runtime.array.DeltaContext detailType_;
        private zserio.runtime.array.DeltaContext roadNameId_;
        private zserio.runtime.array.DeltaContext addressFormatId_;
        private nds.name.types.RoadNumberComponent.ZserioPackingContext roadNumberPrefix_;
        private nds.name.types.RoadNumberComponent.ZserioPackingContext roadNumberSuffix_;
        private nds.name.types.RoadAddressPoint.ZserioPackingContext roadAddressPoint_;
        private nds.name.types.LaneAddressPoint.ZserioPackingContext laneAddressPoint_;
        private nds.core.geometry.Position2D.ZserioPackingContext housePosition_;
        private nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext phoneticTranscription_;
    };

    public PropertyValue(
            nds.name.properties.PropertyType type_)
    {
        this.type_ = type_;
    }

    public PropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.name.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.name.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case CORE:
            return UNDEFINED_CHOICE;
        case LANGUAGE_CODE:
            return CHOICE_languageCode;
        case USAGE_TYPE:
            return CHOICE_usageType;
        case DETAIL_TYPE:
            return CHOICE_detailType;
        case PREFERRED_NAME:
            return CHOICE_preferredName;
        case ADDRESS_ONLY:
            return CHOICE_addressOnly;
        case ROAD_NAME_ID:
            return CHOICE_roadNameId;
        case NOT_ADDRESS_RELEVANT:
            return CHOICE_notAddressRelevant;
        case ADDRESS_FORMAT_ID:
            return CHOICE_addressFormatId;
        case ROAD_NUMBER_PREFIX:
            return CHOICE_roadNumberPrefix;
        case ROAD_NUMBER_SUFFIX:
            return CHOICE_roadNumberSuffix;
        case ROAD_ADDRESS_POINT:
            return CHOICE_roadAddressPoint;
        case LANE_ADDRESS_POINT:
            return CHOICE_laneAddressPoint;
        case HOUSE_POSITION:
            return CHOICE_housePosition;
        case PHONETIC_TRANSCRIPTION:
            return CHOICE_phoneticTranscription;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            return CHOICE_preferRoadNameOverRoadNumber;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            zserioContext.getLanguageCode().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getLanguageCode()));
            break;
        case USAGE_TYPE:
            getUsageType().initPackingContext(zserioContext.getUsageType());
            break;
        case DETAIL_TYPE:
            getDetailType().initPackingContext(zserioContext.getDetailType());
            break;
        case PREFERRED_NAME:
            break;
        case ADDRESS_ONLY:
            break;
        case ROAD_NAME_ID:
            zserioContext.getRoadNameId().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRoadNameId()));
            break;
        case NOT_ADDRESS_RELEVANT:
            break;
        case ADDRESS_FORMAT_ID:
            zserioContext.getAddressFormatId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAddressFormatId()));
            break;
        case ROAD_NUMBER_PREFIX:
            getRoadNumberPrefix().initPackingContext(zserioContext.getRoadNumberPrefix());
            break;
        case ROAD_NUMBER_SUFFIX:
            getRoadNumberSuffix().initPackingContext(zserioContext.getRoadNumberSuffix());
            break;
        case ROAD_ADDRESS_POINT:
            getRoadAddressPoint().initPackingContext(zserioContext.getRoadAddressPoint());
            break;
        case LANE_ADDRESS_POINT:
            getLaneAddressPoint().initPackingContext(zserioContext.getLaneAddressPoint());
            break;
        case HOUSE_POSITION:
            getHousePosition().initPackingContext(zserioContext.getHousePosition());
            break;
        case PHONETIC_TRANSCRIPTION:
            getPhoneticTranscription().initPackingContext(zserioContext.getPhoneticTranscription());
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getLanguageCode());
            break;
        case USAGE_TYPE:
            endBitPosition += getUsageType().bitSizeOf(endBitPosition);
            break;
        case DETAIL_TYPE:
            endBitPosition += getDetailType().bitSizeOf(endBitPosition);
            break;
        case PREFERRED_NAME:
            endBitPosition += getPreferredName().bitSizeOf(endBitPosition);
            break;
        case ADDRESS_ONLY:
            endBitPosition += getAddressOnly().bitSizeOf(endBitPosition);
            break;
        case ROAD_NAME_ID:
            endBitPosition += 8;
            break;
        case NOT_ADDRESS_RELEVANT:
            endBitPosition += getNotAddressRelevant().bitSizeOf(endBitPosition);
            break;
        case ADDRESS_FORMAT_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getAddressFormatId());
            break;
        case ROAD_NUMBER_PREFIX:
            endBitPosition += getRoadNumberPrefix().bitSizeOf(endBitPosition);
            break;
        case ROAD_NUMBER_SUFFIX:
            endBitPosition += getRoadNumberSuffix().bitSizeOf(endBitPosition);
            break;
        case ROAD_ADDRESS_POINT:
            endBitPosition += getRoadAddressPoint().bitSizeOf(endBitPosition);
            break;
        case LANE_ADDRESS_POINT:
            endBitPosition += getLaneAddressPoint().bitSizeOf(endBitPosition);
            break;
        case HOUSE_POSITION:
            endBitPosition += getHousePosition().bitSizeOf(endBitPosition);
            break;
        case PHONETIC_TRANSCRIPTION:
            endBitPosition += getPhoneticTranscription().bitSizeOf(endBitPosition);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            endBitPosition += getPreferRoadNameOverRoadNumber().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getLanguageCode()));
            break;
        case USAGE_TYPE:
            endBitPosition += getUsageType().bitSizeOf(zserioContext.getUsageType(), endBitPosition);
            break;
        case DETAIL_TYPE:
            endBitPosition += getDetailType().bitSizeOf(zserioContext.getDetailType(), endBitPosition);
            break;
        case PREFERRED_NAME:
            endBitPosition += getPreferredName().bitSizeOf(endBitPosition);
            break;
        case ADDRESS_ONLY:
            endBitPosition += getAddressOnly().bitSizeOf(endBitPosition);
            break;
        case ROAD_NAME_ID:
            endBitPosition += zserioContext.getRoadNameId().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRoadNameId()));
            break;
        case NOT_ADDRESS_RELEVANT:
            endBitPosition += getNotAddressRelevant().bitSizeOf(endBitPosition);
            break;
        case ADDRESS_FORMAT_ID:
            endBitPosition += zserioContext.getAddressFormatId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAddressFormatId()));
            break;
        case ROAD_NUMBER_PREFIX:
            endBitPosition += getRoadNumberPrefix().bitSizeOf(zserioContext.getRoadNumberPrefix(), endBitPosition);
            break;
        case ROAD_NUMBER_SUFFIX:
            endBitPosition += getRoadNumberSuffix().bitSizeOf(zserioContext.getRoadNumberSuffix(), endBitPosition);
            break;
        case ROAD_ADDRESS_POINT:
            endBitPosition += getRoadAddressPoint().bitSizeOf(zserioContext.getRoadAddressPoint(), endBitPosition);
            break;
        case LANE_ADDRESS_POINT:
            endBitPosition += getLaneAddressPoint().bitSizeOf(zserioContext.getLaneAddressPoint(), endBitPosition);
            break;
        case HOUSE_POSITION:
            endBitPosition += getHousePosition().bitSizeOf(zserioContext.getHousePosition(), endBitPosition);
            break;
        case PHONETIC_TRANSCRIPTION:
            endBitPosition += getPhoneticTranscription().bitSizeOf(zserioContext.getPhoneticTranscription(), endBitPosition);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            endBitPosition += getPreferRoadNameOverRoadNumber().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.name.properties.PropertyType getType()
    {
        return this.type_;
    }

    public short getLanguageCode()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setLanguageCode(short languageCode_)
    {
        objectChoice = languageCode_;
    }

    public nds.name.types.NameUsageType getUsageType()
    {
        return (nds.name.types.NameUsageType)objectChoice;
    }

    public void setUsageType(nds.name.types.NameUsageType usageType_)
    {
        objectChoice = usageType_;
    }

    public nds.name.types.NameDetailType getDetailType()
    {
        return (nds.name.types.NameDetailType)objectChoice;
    }

    public void setDetailType(nds.name.types.NameDetailType detailType_)
    {
        objectChoice = detailType_;
    }

    public nds.core.types.Flag getPreferredName()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setPreferredName(nds.core.types.Flag preferredName_)
    {
        objectChoice = preferredName_;
    }

    public nds.core.types.Flag getAddressOnly()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setAddressOnly(nds.core.types.Flag addressOnly_)
    {
        objectChoice = addressOnly_;
    }

    public short getRoadNameId()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setRoadNameId(short roadNameId_)
    {
        objectChoice = roadNameId_;
    }

    public nds.core.types.Flag getNotAddressRelevant()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setNotAddressRelevant(nds.core.types.Flag notAddressRelevant_)
    {
        objectChoice = notAddressRelevant_;
    }

    public short getAddressFormatId()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAddressFormatId(short addressFormatId_)
    {
        objectChoice = addressFormatId_;
    }

    public nds.name.types.RoadNumberComponent getRoadNumberPrefix()
    {
        return (nds.name.types.RoadNumberComponent)objectChoice;
    }

    public void setRoadNumberPrefix(nds.name.types.RoadNumberComponent roadNumberPrefix_)
    {
        objectChoice = roadNumberPrefix_;
    }

    public nds.name.types.RoadNumberComponent getRoadNumberSuffix()
    {
        return (nds.name.types.RoadNumberComponent)objectChoice;
    }

    public void setRoadNumberSuffix(nds.name.types.RoadNumberComponent roadNumberSuffix_)
    {
        objectChoice = roadNumberSuffix_;
    }

    public nds.name.types.RoadAddressPoint getRoadAddressPoint()
    {
        return (nds.name.types.RoadAddressPoint)objectChoice;
    }

    public void setRoadAddressPoint(nds.name.types.RoadAddressPoint roadAddressPoint_)
    {
        objectChoice = roadAddressPoint_;
    }

    public nds.name.types.LaneAddressPoint getLaneAddressPoint()
    {
        return (nds.name.types.LaneAddressPoint)objectChoice;
    }

    public void setLaneAddressPoint(nds.name.types.LaneAddressPoint laneAddressPoint_)
    {
        objectChoice = laneAddressPoint_;
    }

    public nds.core.geometry.Position2D getHousePosition()
    {
        return (nds.core.geometry.Position2D)objectChoice;
    }

    public void setHousePosition(nds.core.geometry.Position2D housePosition_)
    {
        objectChoice = housePosition_;
    }

    public nds.core.speech.PhoneticTranscriptionList getPhoneticTranscription()
    {
        return (nds.core.speech.PhoneticTranscriptionList)objectChoice;
    }

    public void setPhoneticTranscription(nds.core.speech.PhoneticTranscriptionList phoneticTranscription_)
    {
        objectChoice = phoneticTranscription_;
    }

    public nds.core.types.Flag getPreferRoadNameOverRoadNumber()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setPreferRoadNameOverRoadNumber(nds.core.types.Flag preferRoadNameOverRoadNumber_)
    {
        objectChoice = preferRoadNameOverRoadNumber_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PropertyValue)
        {
            final PropertyValue that = (PropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case CORE:
                // empty
                break;
            case LANGUAGE_CODE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case USAGE_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.NameUsageType)objectChoice);
                break;
            case DETAIL_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.NameDetailType)objectChoice);
                break;
            case PREFERRED_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ADDRESS_ONLY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ROAD_NAME_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NOT_ADDRESS_RELEVANT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ADDRESS_FORMAT_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ROAD_NUMBER_PREFIX:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.RoadNumberComponent)objectChoice);
                break;
            case ROAD_NUMBER_SUFFIX:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.RoadNumberComponent)objectChoice);
                break;
            case ROAD_ADDRESS_POINT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.RoadAddressPoint)objectChoice);
                break;
            case LANE_ADDRESS_POINT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.LaneAddressPoint)objectChoice);
                break;
            case HOUSE_POSITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.Position2D)objectChoice);
                break;
            case PHONETIC_TRANSCRIPTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.speech.PhoneticTranscriptionList)objectChoice);
                break;
            case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            objectChoice = in.readVarUInt16();
            break;
        case USAGE_TYPE:
            objectChoice = nds.name.types.NameUsageType.readEnum(in);
            break;
        case DETAIL_TYPE:
            objectChoice = nds.name.types.NameDetailType.readEnum(in);
            break;
        case PREFERRED_NAME:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADDRESS_ONLY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ROAD_NAME_ID:
            objectChoice = in.readUnsignedByte();
            break;
        case NOT_ADDRESS_RELEVANT:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADDRESS_FORMAT_ID:
            objectChoice = in.readVarUInt16();
            break;
        case ROAD_NUMBER_PREFIX:
            objectChoice = new nds.name.types.RoadNumberComponent(in);
            break;
        case ROAD_NUMBER_SUFFIX:
            objectChoice = new nds.name.types.RoadNumberComponent(in);
            break;
        case ROAD_ADDRESS_POINT:
            objectChoice = new nds.name.types.RoadAddressPoint(in);
            break;
        case LANE_ADDRESS_POINT:
            objectChoice = new nds.name.types.LaneAddressPoint(in);
            break;
        case HOUSE_POSITION:
            objectChoice = new nds.core.geometry.Position2D(in, (byte)(0));
            break;
        case PHONETIC_TRANSCRIPTION:
            objectChoice = new nds.core.speech.PhoneticTranscriptionList(in);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            objectChoice = new nds.core.types.Flag(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getLanguageCode().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case USAGE_TYPE:
            objectChoice = nds.name.types.NameUsageType.readEnum(zserioContext.getUsageType(), in);
            break;
        case DETAIL_TYPE:
            objectChoice = nds.name.types.NameDetailType.readEnum(zserioContext.getDetailType(), in);
            break;
        case PREFERRED_NAME:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADDRESS_ONLY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ROAD_NAME_ID:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getRoadNameId().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case NOT_ADDRESS_RELEVANT:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADDRESS_FORMAT_ID:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAddressFormatId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case ROAD_NUMBER_PREFIX:
            objectChoice = new nds.name.types.RoadNumberComponent(zserioContext.getRoadNumberPrefix(), in);
            break;
        case ROAD_NUMBER_SUFFIX:
            objectChoice = new nds.name.types.RoadNumberComponent(zserioContext.getRoadNumberSuffix(), in);
            break;
        case ROAD_ADDRESS_POINT:
            objectChoice = new nds.name.types.RoadAddressPoint(zserioContext.getRoadAddressPoint(), in);
            break;
        case LANE_ADDRESS_POINT:
            objectChoice = new nds.name.types.LaneAddressPoint(zserioContext.getLaneAddressPoint(), in);
            break;
        case HOUSE_POSITION:
            objectChoice = new nds.core.geometry.Position2D(zserioContext.getHousePosition(), in, (byte)(0));
            break;
        case PHONETIC_TRANSCRIPTION:
            objectChoice = new nds.core.speech.PhoneticTranscriptionList(zserioContext.getPhoneticTranscription(), in);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            objectChoice = new nds.core.types.Flag(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getLanguageCode());
            }
            break;
        case USAGE_TYPE:
            {
                endBitPosition += getUsageType().bitSizeOf(endBitPosition);
            }
            break;
        case DETAIL_TYPE:
            {
                endBitPosition += getDetailType().bitSizeOf(endBitPosition);
            }
            break;
        case PREFERRED_NAME:
            {
                endBitPosition = getPreferredName().initializeOffsets(endBitPosition);
            }
            break;
        case ADDRESS_ONLY:
            {
                endBitPosition = getAddressOnly().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NAME_ID:
            {
                endBitPosition += 8;
            }
            break;
        case NOT_ADDRESS_RELEVANT:
            {
                endBitPosition = getNotAddressRelevant().initializeOffsets(endBitPosition);
            }
            break;
        case ADDRESS_FORMAT_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getAddressFormatId());
            }
            break;
        case ROAD_NUMBER_PREFIX:
            {
                endBitPosition = getRoadNumberPrefix().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NUMBER_SUFFIX:
            {
                endBitPosition = getRoadNumberSuffix().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_ADDRESS_POINT:
            {
                endBitPosition = getRoadAddressPoint().initializeOffsets(endBitPosition);
            }
            break;
        case LANE_ADDRESS_POINT:
            {
                endBitPosition = getLaneAddressPoint().initializeOffsets(endBitPosition);
            }
            break;
        case HOUSE_POSITION:
            {
                endBitPosition = getHousePosition().initializeOffsets(endBitPosition);
            }
            break;
        case PHONETIC_TRANSCRIPTION:
            {
                endBitPosition = getPhoneticTranscription().initializeOffsets(endBitPosition);
            }
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            {
                endBitPosition = getPreferRoadNameOverRoadNumber().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            {
                endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getLanguageCode()));
            }
            break;
        case USAGE_TYPE:
            {
                endBitPosition = getUsageType().initializeOffsets(zserioContext.getUsageType(), endBitPosition);
            }
            break;
        case DETAIL_TYPE:
            {
                endBitPosition = getDetailType().initializeOffsets(zserioContext.getDetailType(), endBitPosition);
            }
            break;
        case PREFERRED_NAME:
            {
                endBitPosition = getPreferredName().initializeOffsets(endBitPosition);
            }
            break;
        case ADDRESS_ONLY:
            {
                endBitPosition = getAddressOnly().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NAME_ID:
            {
                endBitPosition += zserioContext.getRoadNameId().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getRoadNameId()));
            }
            break;
        case NOT_ADDRESS_RELEVANT:
            {
                endBitPosition = getNotAddressRelevant().initializeOffsets(endBitPosition);
            }
            break;
        case ADDRESS_FORMAT_ID:
            {
                endBitPosition += zserioContext.getAddressFormatId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAddressFormatId()));
            }
            break;
        case ROAD_NUMBER_PREFIX:
            {
                endBitPosition = getRoadNumberPrefix().initializeOffsets(zserioContext.getRoadNumberPrefix(), endBitPosition);
            }
            break;
        case ROAD_NUMBER_SUFFIX:
            {
                endBitPosition = getRoadNumberSuffix().initializeOffsets(zserioContext.getRoadNumberSuffix(), endBitPosition);
            }
            break;
        case ROAD_ADDRESS_POINT:
            {
                endBitPosition = getRoadAddressPoint().initializeOffsets(zserioContext.getRoadAddressPoint(), endBitPosition);
            }
            break;
        case LANE_ADDRESS_POINT:
            {
                endBitPosition = getLaneAddressPoint().initializeOffsets(zserioContext.getLaneAddressPoint(), endBitPosition);
            }
            break;
        case HOUSE_POSITION:
            {
                endBitPosition = getHousePosition().initializeOffsets(zserioContext.getHousePosition(), endBitPosition);
            }
            break;
        case PHONETIC_TRANSCRIPTION:
            {
                endBitPosition = getPhoneticTranscription().initializeOffsets(zserioContext.getPhoneticTranscription(), endBitPosition);
            }
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            {
                endBitPosition = getPreferRoadNameOverRoadNumber().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            out.writeVarUInt16(getLanguageCode());
            break;
        case USAGE_TYPE:
            getUsageType().write(out);
            break;
        case DETAIL_TYPE:
            getDetailType().write(out);
            break;
        case PREFERRED_NAME:
            getPreferredName().write(out);
            break;
        case ADDRESS_ONLY:
            getAddressOnly().write(out);
            break;
        case ROAD_NAME_ID:
            out.writeUnsignedByte(getRoadNameId());
            break;
        case NOT_ADDRESS_RELEVANT:
            getNotAddressRelevant().write(out);
            break;
        case ADDRESS_FORMAT_ID:
            out.writeVarUInt16(getAddressFormatId());
            break;
        case ROAD_NUMBER_PREFIX:
            getRoadNumberPrefix().write(out);
            break;
        case ROAD_NUMBER_SUFFIX:
            getRoadNumberSuffix().write(out);
            break;
        case ROAD_ADDRESS_POINT:
            getRoadAddressPoint().write(out);
            break;
        case LANE_ADDRESS_POINT:
            getLaneAddressPoint().write(out);
            break;
        case HOUSE_POSITION:
            // check parameters
            if (getHousePosition().getShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field PropertyValue.housePosition: " +
                        getHousePosition().getShift() + " != " + (byte)(0) + "!");
            }
            getHousePosition().write(out);
            break;
        case PHONETIC_TRANSCRIPTION:
            getPhoneticTranscription().write(out);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            getPreferRoadNameOverRoadNumber().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case LANGUAGE_CODE:
            zserioContext.getLanguageCode().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getLanguageCode()));
            break;
        case USAGE_TYPE:
            getUsageType().write(zserioContext.getUsageType(), out);
            break;
        case DETAIL_TYPE:
            getDetailType().write(zserioContext.getDetailType(), out);
            break;
        case PREFERRED_NAME:
            getPreferredName().write(out);
            break;
        case ADDRESS_ONLY:
            getAddressOnly().write(out);
            break;
        case ROAD_NAME_ID:
            zserioContext.getRoadNameId().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRoadNameId()));
            break;
        case NOT_ADDRESS_RELEVANT:
            getNotAddressRelevant().write(out);
            break;
        case ADDRESS_FORMAT_ID:
            zserioContext.getAddressFormatId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAddressFormatId()));
            break;
        case ROAD_NUMBER_PREFIX:
            getRoadNumberPrefix().write(zserioContext.getRoadNumberPrefix(), out);
            break;
        case ROAD_NUMBER_SUFFIX:
            getRoadNumberSuffix().write(zserioContext.getRoadNumberSuffix(), out);
            break;
        case ROAD_ADDRESS_POINT:
            getRoadAddressPoint().write(zserioContext.getRoadAddressPoint(), out);
            break;
        case LANE_ADDRESS_POINT:
            getLaneAddressPoint().write(zserioContext.getLaneAddressPoint(), out);
            break;
        case HOUSE_POSITION:
            getHousePosition().write(zserioContext.getHousePosition(), out);
            break;
        case PHONETIC_TRANSCRIPTION:
            getPhoneticTranscription().write(zserioContext.getPhoneticTranscription(), out);
            break;
        case PREFER_ROAD_NAME_OVER_ROAD_NUMBER:
            getPreferRoadNameOverRoadNumber().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_languageCode = 0;
    public static final int CHOICE_usageType = 1;
    public static final int CHOICE_detailType = 2;
    public static final int CHOICE_preferredName = 3;
    public static final int CHOICE_addressOnly = 4;
    public static final int CHOICE_roadNameId = 5;
    public static final int CHOICE_notAddressRelevant = 6;
    public static final int CHOICE_addressFormatId = 7;
    public static final int CHOICE_roadNumberPrefix = 8;
    public static final int CHOICE_roadNumberSuffix = 9;
    public static final int CHOICE_roadAddressPoint = 10;
    public static final int CHOICE_laneAddressPoint = 11;
    public static final int CHOICE_housePosition = 12;
    public static final int CHOICE_phoneticTranscription = 13;
    public static final int CHOICE_preferRoadNameOverRoadNumber = 14;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.name.properties.PropertyType type_;
    private java.lang.Object objectChoice;
}
