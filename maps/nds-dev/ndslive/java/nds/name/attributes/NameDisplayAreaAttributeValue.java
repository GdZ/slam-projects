/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.attributes;

public class NameDisplayAreaAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            administrativeHierarchy_ = new nds.name.types.AdministrativeHierarchy.ZserioPackingContext();
        }

        public nds.name.types.AdministrativeHierarchy.ZserioPackingContext getAdministrativeHierarchy()
        {
            return administrativeHierarchy_;
        }

        private nds.name.types.AdministrativeHierarchy.ZserioPackingContext administrativeHierarchy_;
    };

    public NameDisplayAreaAttributeValue(
            nds.name.attributes.NameDisplayAreaAttributeType type_)
    {
        this.type_ = type_;
    }

    public NameDisplayAreaAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.name.attributes.NameDisplayAreaAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public NameDisplayAreaAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.name.attributes.NameDisplayAreaAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case ROAD_NAME:
            return CHOICE_roadName;
        case BRIDGE_NAME:
            return CHOICE_bridgeName;
        case TUNNEL_NAME:
            return CHOICE_tunnelName;
        case AREA_LABEL_NAME:
            return CHOICE_areaName;
        case BUILDING_NAME:
            return CHOICE_buildingName;
        case NATURE_AREA_NAME:
            return CHOICE_natureAreaName;
        case WATER_NAME:
            return CHOICE_waterName;
        case ADMINISTRATIVE_AREA_NAME:
            return CHOICE_administrativeAreaName;
        case ADMINISTRATIVE_HIERARCHY:
            return CHOICE_administrativeHierarchy;
        case SERVICE_AREA_NAME:
            return CHOICE_serviceAreaName;
        case INTERSECTION_NAME:
            return CHOICE_intersectionName;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD_NAME:
            break;
        case BRIDGE_NAME:
            break;
        case TUNNEL_NAME:
            break;
        case AREA_LABEL_NAME:
            break;
        case BUILDING_NAME:
            break;
        case NATURE_AREA_NAME:
            break;
        case WATER_NAME:
            break;
        case ADMINISTRATIVE_AREA_NAME:
            break;
        case ADMINISTRATIVE_HIERARCHY:
            getAdministrativeHierarchy().initPackingContext(zserioContext.getAdministrativeHierarchy());
            break;
        case SERVICE_AREA_NAME:
            break;
        case INTERSECTION_NAME:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getRoadName());
            break;
        case BRIDGE_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBridgeName());
            break;
        case TUNNEL_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getTunnelName());
            break;
        case AREA_LABEL_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAreaName());
            break;
        case BUILDING_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBuildingName());
            break;
        case NATURE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getNatureAreaName());
            break;
        case WATER_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWaterName());
            break;
        case ADMINISTRATIVE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAdministrativeAreaName());
            break;
        case ADMINISTRATIVE_HIERARCHY:
            endBitPosition += getAdministrativeHierarchy().bitSizeOf(endBitPosition);
            break;
        case SERVICE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getServiceAreaName());
            break;
        case INTERSECTION_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getIntersectionName());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getRoadName());
            break;
        case BRIDGE_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBridgeName());
            break;
        case TUNNEL_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getTunnelName());
            break;
        case AREA_LABEL_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAreaName());
            break;
        case BUILDING_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBuildingName());
            break;
        case NATURE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getNatureAreaName());
            break;
        case WATER_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWaterName());
            break;
        case ADMINISTRATIVE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAdministrativeAreaName());
            break;
        case ADMINISTRATIVE_HIERARCHY:
            endBitPosition += getAdministrativeHierarchy().bitSizeOf(zserioContext.getAdministrativeHierarchy(), endBitPosition);
            break;
        case SERVICE_AREA_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getServiceAreaName());
            break;
        case INTERSECTION_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getIntersectionName());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.name.attributes.NameDisplayAreaAttributeType getType()
    {
        return this.type_;
    }

    public java.lang.String getRoadName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setRoadName(java.lang.String roadName_)
    {
        objectChoice = roadName_;
    }

    public java.lang.String getBridgeName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setBridgeName(java.lang.String bridgeName_)
    {
        objectChoice = bridgeName_;
    }

    public java.lang.String getTunnelName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setTunnelName(java.lang.String tunnelName_)
    {
        objectChoice = tunnelName_;
    }

    public java.lang.String getAreaName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setAreaName(java.lang.String areaName_)
    {
        objectChoice = areaName_;
    }

    public java.lang.String getBuildingName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setBuildingName(java.lang.String buildingName_)
    {
        objectChoice = buildingName_;
    }

    public java.lang.String getNatureAreaName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setNatureAreaName(java.lang.String natureAreaName_)
    {
        objectChoice = natureAreaName_;
    }

    public java.lang.String getWaterName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setWaterName(java.lang.String waterName_)
    {
        objectChoice = waterName_;
    }

    public java.lang.String getAdministrativeAreaName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setAdministrativeAreaName(java.lang.String administrativeAreaName_)
    {
        objectChoice = administrativeAreaName_;
    }

    public nds.name.types.AdministrativeHierarchy getAdministrativeHierarchy()
    {
        return (nds.name.types.AdministrativeHierarchy)objectChoice;
    }

    public void setAdministrativeHierarchy(nds.name.types.AdministrativeHierarchy administrativeHierarchy_)
    {
        objectChoice = administrativeHierarchy_;
    }

    public java.lang.String getServiceAreaName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setServiceAreaName(java.lang.String serviceAreaName_)
    {
        objectChoice = serviceAreaName_;
    }

    public java.lang.String getIntersectionName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setIntersectionName(java.lang.String intersectionName_)
    {
        objectChoice = intersectionName_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof NameDisplayAreaAttributeValue)
        {
            final NameDisplayAreaAttributeValue that = (NameDisplayAreaAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case ROAD_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case BRIDGE_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case TUNNEL_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case AREA_LABEL_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case BUILDING_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case NATURE_AREA_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case WATER_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case ADMINISTRATIVE_AREA_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case ADMINISTRATIVE_HIERARCHY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.AdministrativeHierarchy)objectChoice);
                break;
            case SERVICE_AREA_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case INTERSECTION_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case ROAD_NAME:
            objectChoice = in.readString();
            break;
        case BRIDGE_NAME:
            objectChoice = in.readString();
            break;
        case TUNNEL_NAME:
            objectChoice = in.readString();
            break;
        case AREA_LABEL_NAME:
            objectChoice = in.readString();
            break;
        case BUILDING_NAME:
            objectChoice = in.readString();
            break;
        case NATURE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case WATER_NAME:
            objectChoice = in.readString();
            break;
        case ADMINISTRATIVE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case ADMINISTRATIVE_HIERARCHY:
            objectChoice = new nds.name.types.AdministrativeHierarchy(in);
            break;
        case SERVICE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case INTERSECTION_NAME:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD_NAME:
            objectChoice = in.readString();
            break;
        case BRIDGE_NAME:
            objectChoice = in.readString();
            break;
        case TUNNEL_NAME:
            objectChoice = in.readString();
            break;
        case AREA_LABEL_NAME:
            objectChoice = in.readString();
            break;
        case BUILDING_NAME:
            objectChoice = in.readString();
            break;
        case NATURE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case WATER_NAME:
            objectChoice = in.readString();
            break;
        case ADMINISTRATIVE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case ADMINISTRATIVE_HIERARCHY:
            objectChoice = new nds.name.types.AdministrativeHierarchy(zserioContext.getAdministrativeHierarchy(), in);
            break;
        case SERVICE_AREA_NAME:
            objectChoice = in.readString();
            break;
        case INTERSECTION_NAME:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getRoadName());
            }
            break;
        case BRIDGE_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBridgeName());
            }
            break;
        case TUNNEL_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getTunnelName());
            }
            break;
        case AREA_LABEL_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAreaName());
            }
            break;
        case BUILDING_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBuildingName());
            }
            break;
        case NATURE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getNatureAreaName());
            }
            break;
        case WATER_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWaterName());
            }
            break;
        case ADMINISTRATIVE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAdministrativeAreaName());
            }
            break;
        case ADMINISTRATIVE_HIERARCHY:
            {
                endBitPosition = getAdministrativeHierarchy().initializeOffsets(endBitPosition);
            }
            break;
        case SERVICE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getServiceAreaName());
            }
            break;
        case INTERSECTION_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getIntersectionName());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getRoadName());
            }
            break;
        case BRIDGE_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBridgeName());
            }
            break;
        case TUNNEL_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getTunnelName());
            }
            break;
        case AREA_LABEL_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAreaName());
            }
            break;
        case BUILDING_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBuildingName());
            }
            break;
        case NATURE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getNatureAreaName());
            }
            break;
        case WATER_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWaterName());
            }
            break;
        case ADMINISTRATIVE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAdministrativeAreaName());
            }
            break;
        case ADMINISTRATIVE_HIERARCHY:
            {
                endBitPosition = getAdministrativeHierarchy().initializeOffsets(zserioContext.getAdministrativeHierarchy(), endBitPosition);
            }
            break;
        case SERVICE_AREA_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getServiceAreaName());
            }
            break;
        case INTERSECTION_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getIntersectionName());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case ROAD_NAME:
            out.writeString(getRoadName());
            break;
        case BRIDGE_NAME:
            out.writeString(getBridgeName());
            break;
        case TUNNEL_NAME:
            out.writeString(getTunnelName());
            break;
        case AREA_LABEL_NAME:
            out.writeString(getAreaName());
            break;
        case BUILDING_NAME:
            out.writeString(getBuildingName());
            break;
        case NATURE_AREA_NAME:
            out.writeString(getNatureAreaName());
            break;
        case WATER_NAME:
            out.writeString(getWaterName());
            break;
        case ADMINISTRATIVE_AREA_NAME:
            out.writeString(getAdministrativeAreaName());
            break;
        case ADMINISTRATIVE_HIERARCHY:
            getAdministrativeHierarchy().write(out);
            break;
        case SERVICE_AREA_NAME:
            out.writeString(getServiceAreaName());
            break;
        case INTERSECTION_NAME:
            out.writeString(getIntersectionName());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD_NAME:
            out.writeString(getRoadName());
            break;
        case BRIDGE_NAME:
            out.writeString(getBridgeName());
            break;
        case TUNNEL_NAME:
            out.writeString(getTunnelName());
            break;
        case AREA_LABEL_NAME:
            out.writeString(getAreaName());
            break;
        case BUILDING_NAME:
            out.writeString(getBuildingName());
            break;
        case NATURE_AREA_NAME:
            out.writeString(getNatureAreaName());
            break;
        case WATER_NAME:
            out.writeString(getWaterName());
            break;
        case ADMINISTRATIVE_AREA_NAME:
            out.writeString(getAdministrativeAreaName());
            break;
        case ADMINISTRATIVE_HIERARCHY:
            getAdministrativeHierarchy().write(zserioContext.getAdministrativeHierarchy(), out);
            break;
        case SERVICE_AREA_NAME:
            out.writeString(getServiceAreaName());
            break;
        case INTERSECTION_NAME:
            out.writeString(getIntersectionName());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice NameDisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_roadName = 0;
    public static final int CHOICE_bridgeName = 1;
    public static final int CHOICE_tunnelName = 2;
    public static final int CHOICE_areaName = 3;
    public static final int CHOICE_buildingName = 4;
    public static final int CHOICE_natureAreaName = 5;
    public static final int CHOICE_waterName = 6;
    public static final int CHOICE_administrativeAreaName = 7;
    public static final int CHOICE_administrativeHierarchy = 8;
    public static final int CHOICE_serviceAreaName = 9;
    public static final int CHOICE_intersectionName = 10;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.name.attributes.NameDisplayAreaAttributeType type_;
    private java.lang.Object objectChoice;
}
