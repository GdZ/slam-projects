/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public class HouseNumberRangeNumbers implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            houseNumberRangeEvenOdd_ = new nds.name.types.HouseNumberNumericRange.ZserioPackingContext();
            houseNumberRangeEvenOddPattern_ = new nds.name.types.HouseNumberNumericRange.ZserioPackingContext();
            houseNumberRangeContinuous_ = new nds.name.types.HouseNumberNumericRange.ZserioPackingContext();
            houseNumberRangeContinuousPattern_ = new nds.name.types.HouseNumberNumericRange.ZserioPackingContext();
        }

        public nds.name.types.HouseNumberNumericRange.ZserioPackingContext getHouseNumberRangeEvenOdd()
        {
            return houseNumberRangeEvenOdd_;
        }

        public nds.name.types.HouseNumberNumericRange.ZserioPackingContext getHouseNumberRangeEvenOddPattern()
        {
            return houseNumberRangeEvenOddPattern_;
        }

        public nds.name.types.HouseNumberNumericRange.ZserioPackingContext getHouseNumberRangeContinuous()
        {
            return houseNumberRangeContinuous_;
        }

        public nds.name.types.HouseNumberNumericRange.ZserioPackingContext getHouseNumberRangeContinuousPattern()
        {
            return houseNumberRangeContinuousPattern_;
        }

        private nds.name.types.HouseNumberNumericRange.ZserioPackingContext houseNumberRangeEvenOdd_;
        private nds.name.types.HouseNumberNumericRange.ZserioPackingContext houseNumberRangeEvenOddPattern_;
        private nds.name.types.HouseNumberNumericRange.ZserioPackingContext houseNumberRangeContinuous_;
        private nds.name.types.HouseNumberNumericRange.ZserioPackingContext houseNumberRangeContinuousPattern_;
    };

    public HouseNumberRangeNumbers(
            nds.name.types.HouseNumberType type_)
    {
        this.type_ = type_;
    }

    public HouseNumberRangeNumbers(zserio.runtime.io.BitStreamReader in,
            nds.name.types.HouseNumberType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public HouseNumberRangeNumbers(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.name.types.HouseNumberType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            return CHOICE_houseNumberRangeEvenOdd;
        case RANGE_EVEN_ODD_PATTERN:
            return CHOICE_houseNumberRangeEvenOddPattern;
        case RANGE_CONTINUOUS:
            return CHOICE_houseNumberRangeContinuous;
        case RANGE_CONTINUOUS_PATTERN:
            return CHOICE_houseNumberRangeContinuousPattern;
        case LIST_NUMERIC:
            return CHOICE_houseNumberNumeric;
        case LIST_STRING:
            return CHOICE_houseNumber;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            getHouseNumberRangeEvenOdd().initPackingContext(zserioContext.getHouseNumberRangeEvenOdd());
            break;
        case RANGE_EVEN_ODD_PATTERN:
            getHouseNumberRangeEvenOddPattern().initPackingContext(zserioContext.getHouseNumberRangeEvenOddPattern());
            break;
        case RANGE_CONTINUOUS:
            getHouseNumberRangeContinuous().initPackingContext(zserioContext.getHouseNumberRangeContinuous());
            break;
        case RANGE_CONTINUOUS_PATTERN:
            getHouseNumberRangeContinuousPattern().initPackingContext(zserioContext.getHouseNumberRangeContinuousPattern());
            break;
        case LIST_NUMERIC:
            break;
        case LIST_STRING:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case RANGE_EVEN_ODD:
            endBitPosition += getHouseNumberRangeEvenOdd().bitSizeOf(endBitPosition);
            break;
        case RANGE_EVEN_ODD_PATTERN:
            endBitPosition += getHouseNumberRangeEvenOddPattern().bitSizeOf(endBitPosition);
            break;
        case RANGE_CONTINUOUS:
            endBitPosition += getHouseNumberRangeContinuous().bitSizeOf(endBitPosition);
            break;
        case RANGE_CONTINUOUS_PATTERN:
            endBitPosition += getHouseNumberRangeContinuousPattern().bitSizeOf(endBitPosition);
            break;
        case LIST_NUMERIC:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        case LIST_STRING:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case RANGE_EVEN_ODD:
            endBitPosition += getHouseNumberRangeEvenOdd().bitSizeOf(zserioContext.getHouseNumberRangeEvenOdd(), endBitPosition);
            break;
        case RANGE_EVEN_ODD_PATTERN:
            endBitPosition += getHouseNumberRangeEvenOddPattern().bitSizeOf(zserioContext.getHouseNumberRangeEvenOddPattern(), endBitPosition);
            break;
        case RANGE_CONTINUOUS:
            endBitPosition += getHouseNumberRangeContinuous().bitSizeOf(zserioContext.getHouseNumberRangeContinuous(), endBitPosition);
            break;
        case RANGE_CONTINUOUS_PATTERN:
            endBitPosition += getHouseNumberRangeContinuousPattern().bitSizeOf(zserioContext.getHouseNumberRangeContinuousPattern(), endBitPosition);
            break;
        case LIST_NUMERIC:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case LIST_STRING:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.name.types.HouseNumberType getType()
    {
        return this.type_;
    }

    public nds.name.types.HouseNumberNumericRange getHouseNumberRangeEvenOdd()
    {
        return (nds.name.types.HouseNumberNumericRange)objectChoice;
    }

    public void setHouseNumberRangeEvenOdd(nds.name.types.HouseNumberNumericRange houseNumberRangeEvenOdd_)
    {
        objectChoice = houseNumberRangeEvenOdd_;
    }

    public nds.name.types.HouseNumberNumericRange getHouseNumberRangeEvenOddPattern()
    {
        return (nds.name.types.HouseNumberNumericRange)objectChoice;
    }

    public void setHouseNumberRangeEvenOddPattern(nds.name.types.HouseNumberNumericRange houseNumberRangeEvenOddPattern_)
    {
        objectChoice = houseNumberRangeEvenOddPattern_;
    }

    public nds.name.types.HouseNumberNumericRange getHouseNumberRangeContinuous()
    {
        return (nds.name.types.HouseNumberNumericRange)objectChoice;
    }

    public void setHouseNumberRangeContinuous(nds.name.types.HouseNumberNumericRange houseNumberRangeContinuous_)
    {
        objectChoice = houseNumberRangeContinuous_;
    }

    public nds.name.types.HouseNumberNumericRange getHouseNumberRangeContinuousPattern()
    {
        return (nds.name.types.HouseNumberNumericRange)objectChoice;
    }

    public void setHouseNumberRangeContinuousPattern(nds.name.types.HouseNumberNumericRange houseNumberRangeContinuousPattern_)
    {
        objectChoice = houseNumberRangeContinuousPattern_;
    }

    public int[] getHouseNumberNumeric()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setHouseNumberNumeric(int[] houseNumberNumeric_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(houseNumberNumeric_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public java.lang.String[] getHouseNumber()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setHouseNumber(java.lang.String[] houseNumber_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.StringRawArray(houseNumber_),
                new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof HouseNumberRangeNumbers)
        {
            final HouseNumberRangeNumbers that = (HouseNumberRangeNumbers)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case RANGE_EVEN_ODD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.HouseNumberNumericRange)objectChoice);
                break;
            case RANGE_EVEN_ODD_PATTERN:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.HouseNumberNumericRange)objectChoice);
                break;
            case RANGE_CONTINUOUS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.HouseNumberNumericRange)objectChoice);
                break;
            case RANGE_CONTINUOUS_PATTERN:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.name.types.HouseNumberNumericRange)objectChoice);
                break;
            case LIST_NUMERIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case LIST_STRING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            objectChoice = new nds.name.types.HouseNumberNumericRange(in, (boolean)(false), (boolean)(true));
            break;
        case RANGE_EVEN_ODD_PATTERN:
            objectChoice = new nds.name.types.HouseNumberNumericRange(in, (boolean)(true), (boolean)(true));
            break;
        case RANGE_CONTINUOUS:
            objectChoice = new nds.name.types.HouseNumberNumericRange(in, (boolean)(false), (boolean)(false));
            break;
        case RANGE_CONTINUOUS_PATTERN:
            objectChoice = new nds.name.types.HouseNumberNumericRange(in, (boolean)(true), (boolean)(false));
            break;
        case LIST_NUMERIC:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.IntRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).read(in);
            break;
        case LIST_STRING:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).read(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            objectChoice = new nds.name.types.HouseNumberNumericRange(zserioContext.getHouseNumberRangeEvenOdd(), in, (boolean)(false), (boolean)(true));
            break;
        case RANGE_EVEN_ODD_PATTERN:
            objectChoice = new nds.name.types.HouseNumberNumericRange(zserioContext.getHouseNumberRangeEvenOddPattern(), in, (boolean)(true), (boolean)(true));
            break;
        case RANGE_CONTINUOUS:
            objectChoice = new nds.name.types.HouseNumberNumericRange(zserioContext.getHouseNumberRangeContinuous(), in, (boolean)(false), (boolean)(false));
            break;
        case RANGE_CONTINUOUS_PATTERN:
            objectChoice = new nds.name.types.HouseNumberNumericRange(zserioContext.getHouseNumberRangeContinuousPattern(), in, (boolean)(true), (boolean)(false));
            break;
        case LIST_NUMERIC:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.IntRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in);
            break;
        case LIST_STRING:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).read(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case RANGE_EVEN_ODD:
            {
                endBitPosition = getHouseNumberRangeEvenOdd().initializeOffsets(endBitPosition);
            }
            break;
        case RANGE_EVEN_ODD_PATTERN:
            {
                endBitPosition = getHouseNumberRangeEvenOddPattern().initializeOffsets(endBitPosition);
            }
            break;
        case RANGE_CONTINUOUS:
            {
                endBitPosition = getHouseNumberRangeContinuous().initializeOffsets(endBitPosition);
            }
            break;
        case RANGE_CONTINUOUS_PATTERN:
            {
                endBitPosition = getHouseNumberRangeContinuousPattern().initializeOffsets(endBitPosition);
            }
            break;
        case LIST_NUMERIC:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        case LIST_STRING:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case RANGE_EVEN_ODD:
            {
                endBitPosition = getHouseNumberRangeEvenOdd().initializeOffsets(zserioContext.getHouseNumberRangeEvenOdd(), endBitPosition);
            }
            break;
        case RANGE_EVEN_ODD_PATTERN:
            {
                endBitPosition = getHouseNumberRangeEvenOddPattern().initializeOffsets(zserioContext.getHouseNumberRangeEvenOddPattern(), endBitPosition);
            }
            break;
        case RANGE_CONTINUOUS:
            {
                endBitPosition = getHouseNumberRangeContinuous().initializeOffsets(zserioContext.getHouseNumberRangeContinuous(), endBitPosition);
            }
            break;
        case RANGE_CONTINUOUS_PATTERN:
            {
                endBitPosition = getHouseNumberRangeContinuousPattern().initializeOffsets(zserioContext.getHouseNumberRangeContinuousPattern(), endBitPosition);
            }
            break;
        case LIST_NUMERIC:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case LIST_STRING:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            // check parameters
            if (getHouseNumberRangeEvenOdd().getHasPattern() != (boolean)(false))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasPattern for field HouseNumberRangeNumbers.houseNumberRangeEvenOdd: " +
                        getHouseNumberRangeEvenOdd().getHasPattern() + " != " + (boolean)(false) + "!");
            }
            if (getHouseNumberRangeEvenOdd().getIsEvenOdd() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter isEvenOdd for field HouseNumberRangeNumbers.houseNumberRangeEvenOdd: " +
                        getHouseNumberRangeEvenOdd().getIsEvenOdd() + " != " + (boolean)(true) + "!");
            }
            getHouseNumberRangeEvenOdd().write(out);
            break;
        case RANGE_EVEN_ODD_PATTERN:
            // check parameters
            if (getHouseNumberRangeEvenOddPattern().getHasPattern() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasPattern for field HouseNumberRangeNumbers.houseNumberRangeEvenOddPattern: " +
                        getHouseNumberRangeEvenOddPattern().getHasPattern() + " != " + (boolean)(true) + "!");
            }
            if (getHouseNumberRangeEvenOddPattern().getIsEvenOdd() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter isEvenOdd for field HouseNumberRangeNumbers.houseNumberRangeEvenOddPattern: " +
                        getHouseNumberRangeEvenOddPattern().getIsEvenOdd() + " != " + (boolean)(true) + "!");
            }
            getHouseNumberRangeEvenOddPattern().write(out);
            break;
        case RANGE_CONTINUOUS:
            // check parameters
            if (getHouseNumberRangeContinuous().getHasPattern() != (boolean)(false))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasPattern for field HouseNumberRangeNumbers.houseNumberRangeContinuous: " +
                        getHouseNumberRangeContinuous().getHasPattern() + " != " + (boolean)(false) + "!");
            }
            if (getHouseNumberRangeContinuous().getIsEvenOdd() != (boolean)(false))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter isEvenOdd for field HouseNumberRangeNumbers.houseNumberRangeContinuous: " +
                        getHouseNumberRangeContinuous().getIsEvenOdd() + " != " + (boolean)(false) + "!");
            }
            getHouseNumberRangeContinuous().write(out);
            break;
        case RANGE_CONTINUOUS_PATTERN:
            // check parameters
            if (getHouseNumberRangeContinuousPattern().getHasPattern() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasPattern for field HouseNumberRangeNumbers.houseNumberRangeContinuousPattern: " +
                        getHouseNumberRangeContinuousPattern().getHasPattern() + " != " + (boolean)(true) + "!");
            }
            if (getHouseNumberRangeContinuousPattern().getIsEvenOdd() != (boolean)(false))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter isEvenOdd for field HouseNumberRangeNumbers.houseNumberRangeContinuousPattern: " +
                        getHouseNumberRangeContinuousPattern().getIsEvenOdd() + " != " + (boolean)(false) + "!");
            }
            getHouseNumberRangeContinuousPattern().write(out);
            break;
        case LIST_NUMERIC:
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        case LIST_STRING:
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case RANGE_EVEN_ODD:
            getHouseNumberRangeEvenOdd().write(zserioContext.getHouseNumberRangeEvenOdd(), out);
            break;
        case RANGE_EVEN_ODD_PATTERN:
            getHouseNumberRangeEvenOddPattern().write(zserioContext.getHouseNumberRangeEvenOddPattern(), out);
            break;
        case RANGE_CONTINUOUS:
            getHouseNumberRangeContinuous().write(zserioContext.getHouseNumberRangeContinuous(), out);
            break;
        case RANGE_CONTINUOUS_PATTERN:
            getHouseNumberRangeContinuousPattern().write(zserioContext.getHouseNumberRangeContinuousPattern(), out);
            break;
        case LIST_NUMERIC:
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case LIST_STRING:
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice HouseNumberRangeNumbers: " + getType() + "!");
        }
    }

    public static final int CHOICE_houseNumberRangeEvenOdd = 0;
    public static final int CHOICE_houseNumberRangeEvenOddPattern = 1;
    public static final int CHOICE_houseNumberRangeContinuous = 2;
    public static final int CHOICE_houseNumberRangeContinuousPattern = 3;
    public static final int CHOICE_houseNumberNumeric = 4;
    public static final int CHOICE_houseNumber = 5;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.name.types.HouseNumberType type_;
    private java.lang.Object objectChoice;
}
