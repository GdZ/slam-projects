/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public class HouseNumberNumericRange implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            startHouseNumber_ = new zserio.runtime.array.DeltaContext();
            endHouseNumber_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getStartHouseNumber()
        {
            return startHouseNumber_;
        }

        public zserio.runtime.array.DeltaContext getEndHouseNumber()
        {
            return endHouseNumber_;
        }

        private zserio.runtime.array.DeltaContext startHouseNumber_;
        private zserio.runtime.array.DeltaContext endHouseNumber_;
    };

    public HouseNumberNumericRange(
            boolean hasPattern_,
            boolean isEvenOdd_)
    {
        this.hasPattern_ = hasPattern_;
        this.isEvenOdd_ = isEvenOdd_;
    }

    public HouseNumberNumericRange(zserio.runtime.io.BitStreamReader in,
            boolean hasPattern_,
            boolean isEvenOdd_)
            throws java.io.IOException
    {
        this.hasPattern_ = hasPattern_;
        this.isEvenOdd_ = isEvenOdd_;

        read(in);
    }

    public HouseNumberNumericRange(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            boolean hasPattern_,
            boolean isEvenOdd_)
            throws java.io.IOException
    {
        this.hasPattern_ = hasPattern_;
        this.isEvenOdd_ = isEvenOdd_;

        read(context, in);
    }

    public HouseNumberNumericRange(
            boolean hasPattern_,
            boolean isEvenOdd_,
            int startHouseNumber_,
            int endHouseNumber_,
            java.lang.String pattern_)
    {
        this(hasPattern_, isEvenOdd_);

        setStartHouseNumber(startHouseNumber_);
        setEndHouseNumber(endHouseNumber_);
        setPattern(pattern_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getStartHouseNumber().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startHouseNumber_));
        zserioContext.getEndHouseNumber().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(endHouseNumber_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(startHouseNumber_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(endHouseNumber_);
        if (isPatternUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(pattern_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getStartHouseNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startHouseNumber_));
        endBitPosition += zserioContext.getEndHouseNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(endHouseNumber_));
        if (isPatternUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(pattern_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasPattern()
    {
        return this.hasPattern_;
    }

    public boolean getIsEvenOdd()
    {
        return this.isEvenOdd_;
    }

    public int getStartHouseNumber()
    {
        return startHouseNumber_;
    }

    public void setStartHouseNumber(int startHouseNumber_)
    {
        this.startHouseNumber_ = startHouseNumber_;
    }

    public int getEndHouseNumber()
    {
        return endHouseNumber_;
    }

    public void setEndHouseNumber(int endHouseNumber_)
    {
        this.endHouseNumber_ = endHouseNumber_;
    }

    public java.lang.String getPattern()
    {
        return pattern_;
    }

    public void setPattern(java.lang.String pattern_)
    {
        this.pattern_ = pattern_;
    }

    public boolean isPatternUsed()
    {
        return (getHasPattern());
    }

    public boolean isPatternSet()
    {
        return (pattern_ != null);
    }

    public void resetPattern()
    {
        this.pattern_ = null;
    }

    public nds.name.types.HouseNumberIncrement funcGetIncrement()
    {
        return (nds.name.types.HouseNumberIncrement)(((getStartHouseNumber() > getEndHouseNumber())) ? nds.name.types.HouseNumberIncrement.DECREASING : nds.name.types.HouseNumberIncrement.INCREASING);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof HouseNumberNumericRange)
        {
            final HouseNumberNumericRange that = (HouseNumberNumericRange)obj;

            return
                    this.hasPattern_ == that.hasPattern_ &&
                    this.isEvenOdd_ == that.isEvenOdd_ &&
                    startHouseNumber_ == that.startHouseNumber_ &&
                    endHouseNumber_ == that.endHouseNumber_ &&
                    ((!isPatternUsed()) ? !that.isPatternUsed() :
                        ((pattern_ == null) ? that.pattern_ == null : pattern_.equals(that.pattern_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasPattern());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getIsEvenOdd());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startHouseNumber_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endHouseNumber_);
        if (isPatternUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, pattern_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        startHouseNumber_ = in.readVarUInt32();

        endHouseNumber_ = in.readVarUInt32();

        if (getHasPattern())
        {
            pattern_ = in.readString();
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startHouseNumber_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getStartHouseNumber().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        endHouseNumber_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getEndHouseNumber().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (getHasPattern())
        {
            pattern_ = in.readString();
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(startHouseNumber_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(endHouseNumber_);
        if (isPatternUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(pattern_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getStartHouseNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startHouseNumber_));
        endBitPosition += zserioContext.getEndHouseNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(endHouseNumber_));
        if (isPatternUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(pattern_);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt32(startHouseNumber_);

        out.writeVarUInt32(endHouseNumber_);

        if (isPatternUsed())
        {
            out.writeString(pattern_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getStartHouseNumber().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(startHouseNumber_));

        zserioContext.getEndHouseNumber().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(endHouseNumber_));

        if (isPatternUsed())
        {
            out.writeString(pattern_);
        }
    }

    private void checkConstraints()
    {
        if (!(getEndHouseNumber() != getStartHouseNumber()))
            throw new zserio.runtime.ConstraintError("Constraint violated at HouseNumberNumericRange.endHouseNumber!");
    }

    private final boolean hasPattern_;
    private final boolean isEvenOdd_;
    private int startHouseNumber_;
    private int endHouseNumber_;
    private java.lang.String pattern_;
}
