/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public class AddressFormat implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        private zserio.runtime.array.DeltaContext id_;
    };

    public AddressFormat()
    {
    }

    public AddressFormat(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public AddressFormat(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public AddressFormat(
            short id_,
            nds.name.types.AddressFormatElement[] elements_)
    {
        setId(id_);
        setElements(elements_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(id_);
        endBitPosition += elements_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
        endBitPosition += elements_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getId()
    {
        return id_;
    }

    public void setId(short id_)
    {
        this.id_ = id_;
    }

    public nds.name.types.AddressFormatElement[] getElements()
    {
        return (elements_ == null) ? null : elements_.getRawArray();
    }

    public void setElements(nds.name.types.AddressFormatElement[] elements_)
    {
        this.elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.AddressFormatElement.class, elements_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.AddressFormatElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AddressFormat)
        {
            final AddressFormat that = (AddressFormat)obj;

            return
                    id_ == that.id_ &&
                    ((elements_ == null) ? that.elements_ == null : elements_.equals(that.elements_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, elements_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt16();

        elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.AddressFormatElement.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.AddressFormatElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.AUTO);
        elements_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.AddressFormatElement.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.AddressFormatElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.AUTO);
        elements_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(id_);
        endBitPosition = elements_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
        endBitPosition = elements_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(id_);

        elements_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));

        elements_.writePacked(out);
    }

    private static final class ZserioElementFactory_elements implements zserio.runtime.array.PackableElementFactory<nds.name.types.AddressFormatElement>
    {
        @Override
        public nds.name.types.AddressFormatElement create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.name.types.AddressFormatElement(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.name.types.AddressFormatElement.ZserioPackingContext();
        }

        @Override
        public nds.name.types.AddressFormatElement create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.name.types.AddressFormatElement(context, in);
        }
    }

    private short id_;
    private zserio.runtime.array.Array elements_;
}
