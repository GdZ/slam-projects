/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public class AdministrativeHierarchy implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numElements_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumElements()
        {
            return numElements_;
        }

        private zserio.runtime.array.DeltaContext numElements_;
    };

    public AdministrativeHierarchy()
    {
    }

    public AdministrativeHierarchy(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public AdministrativeHierarchy(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public AdministrativeHierarchy(
            int numElements_,
            int[] adminElements_)
    {
        setNumElements(numElements_);
        setAdminElements(adminElements_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumElements().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numElements_);
        endBitPosition += adminElements_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumElements().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
        endBitPosition += adminElements_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumElements()
    {
        return numElements_;
    }

    public void setNumElements(int numElements_)
    {
        this.numElements_ = numElements_;
    }

    public int[] getAdminElements()
    {
        return (adminElements_ == null) ? null : adminElements_.getRawArray();
    }

    public void setAdminElements(int[] adminElements_)
    {
        this.adminElements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(adminElements_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AdministrativeHierarchy)
        {
            final AdministrativeHierarchy that = (AdministrativeHierarchy)obj;

            return
                    numElements_ == that.numElements_ &&
                    ((adminElements_ == null) ? that.adminElements_ == null : adminElements_.equals(that.adminElements_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numElements_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, adminElements_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numElements_ = in.readVarSize();

        adminElements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        adminElements_.read(in, (int)(getNumElements()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numElements_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumElements().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        adminElements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        adminElements_.readPacked(in, (int)(getNumElements()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numElements_);
        endBitPosition = adminElements_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumElements().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
        endBitPosition = adminElements_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numElements_);

        if (adminElements_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AdministrativeHierarchy.adminElements: " +
                    adminElements_.size() + " != " + (int)(getNumElements()) + "!");
        }
        adminElements_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumElements().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));

        if (adminElements_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AdministrativeHierarchy.adminElements: " +
                    adminElements_.size() + " != " + (int)(getNumElements()) + "!");
        }
        adminElements_.writePacked(out);
    }

    private int numElements_;
    private zserio.runtime.array.Array adminElements_;
}
