/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public enum AdminHierarchyElementType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    COUNTRY((short)0),
    SUB_COUNTRY((short)1),
    SUB_COUNTRY_SET((short)2),
    COUNTY((short)3),
    MUNICIPALITY((short)4),
    MUNICIPALITY_SUBDIVISION((short)5),
    HAMLET((short)6),
    LICENSE_PLATE_ZONE((short)7),
    ZONE((short)8),
    COUNTRY_SET((short)9),
    NEIGHBORHOOD((short)10),
    NAMED_AREA((short)11),
    CITY_BLOCK((short)12),
    POSTAL_CODE((short)13);

    private AdminHierarchyElementType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static AdminHierarchyElementType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static AdminHierarchyElementType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static AdminHierarchyElementType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return COUNTRY;
            case (short)1:
                return SUB_COUNTRY;
            case (short)2:
                return SUB_COUNTRY_SET;
            case (short)3:
                return COUNTY;
            case (short)4:
                return MUNICIPALITY;
            case (short)5:
                return MUNICIPALITY_SUBDIVISION;
            case (short)6:
                return HAMLET;
            case (short)7:
                return LICENSE_PLATE_ZONE;
            case (short)8:
                return ZONE;
            case (short)9:
                return COUNTRY_SET;
            case (short)10:
                return NEIGHBORHOOD;
            case (short)11:
                return NAMED_AREA;
            case (short)12:
                return CITY_BLOCK;
            case (short)13:
                return POSTAL_CODE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration AdminHierarchyElementType: " + value + "!");
        }
    }

    public static AdminHierarchyElementType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("COUNTRY"))
            return COUNTRY;
        if (itemName.equals("SUB_COUNTRY"))
            return SUB_COUNTRY;
        if (itemName.equals("SUB_COUNTRY_SET"))
            return SUB_COUNTRY_SET;
        if (itemName.equals("COUNTY"))
            return COUNTY;
        if (itemName.equals("MUNICIPALITY"))
            return MUNICIPALITY;
        if (itemName.equals("MUNICIPALITY_SUBDIVISION"))
            return MUNICIPALITY_SUBDIVISION;
        if (itemName.equals("HAMLET"))
            return HAMLET;
        if (itemName.equals("LICENSE_PLATE_ZONE"))
            return LICENSE_PLATE_ZONE;
        if (itemName.equals("ZONE"))
            return ZONE;
        if (itemName.equals("COUNTRY_SET"))
            return COUNTRY_SET;
        if (itemName.equals("NEIGHBORHOOD"))
            return NEIGHBORHOOD;
        if (itemName.equals("NAMED_AREA"))
            return NAMED_AREA;
        if (itemName.equals("CITY_BLOCK"))
            return CITY_BLOCK;
        if (itemName.equals("POSTAL_CODE"))
            return POSTAL_CODE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration AdminHierarchyElementType!");
    }

    private short value;
}
