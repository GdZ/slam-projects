/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.name.types;

public class LaneAddressPoint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            postalPosition_ = new nds.name.types.LaneAddressPointReference.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.name.types.LaneAddressPointReference.ZserioPackingContext getPostalPosition()
        {
            return postalPosition_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private nds.name.types.LaneAddressPointReference.ZserioPackingContext postalPosition_;
    };

    public LaneAddressPoint()
    {
    }

    public LaneAddressPoint(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneAddressPoint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneAddressPoint(
            nds.name.types.AddressPointType type_,
            nds.name.types.LaneAddressPointReference[] accessPositions_,
            nds.name.types.LaneAddressPointReference postalPosition_)
    {
        setType(type_);
        setAccessPositions(accessPositions_);
        setPostalPosition(postalPosition_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        if (isPostalPositionUsed())
        {
            postalPosition_.initPackingContext(zserioContext.getPostalPosition());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isAccessPositionsUsed())
        {
            endBitPosition += accessPositions_.bitSizeOf(endBitPosition);
        }
        if (isPostalPositionUsed())
        {
            endBitPosition += postalPosition_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        if (isAccessPositionsUsed())
        {
            endBitPosition += accessPositions_.bitSizeOfPacked(endBitPosition);
        }
        if (isPostalPositionUsed())
        {
            endBitPosition += postalPosition_.bitSizeOf(zserioContext.getPostalPosition(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.name.types.AddressPointType getType()
    {
        return type_;
    }

    public void setType(nds.name.types.AddressPointType type_)
    {
        this.type_ = type_;
    }

    public nds.name.types.LaneAddressPointReference[] getAccessPositions()
    {
        return (accessPositions_ == null) ? null : accessPositions_.getRawArray();
    }

    public void setAccessPositions(nds.name.types.LaneAddressPointReference[] accessPositions_)
    {
        if (accessPositions_ == null)
        {
            this.accessPositions_ = null;
        }
        else
        {
            this.accessPositions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.LaneAddressPointReference.class, accessPositions_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.LaneAddressPointReference>(new ZserioElementFactory_accessPositions()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAccessPositionsUsed()
    {
        return (getType() == nds.name.types.AddressPointType.POSTAL_POSITION);
    }

    public boolean isAccessPositionsSet()
    {
        return (accessPositions_ != null);
    }

    public void resetAccessPositions()
    {
        this.accessPositions_ = null;
    }

    public nds.name.types.LaneAddressPointReference getPostalPosition()
    {
        return postalPosition_;
    }

    public void setPostalPosition(nds.name.types.LaneAddressPointReference postalPosition_)
    {
        this.postalPosition_ = postalPosition_;
    }

    public boolean isPostalPositionUsed()
    {
        return (getType() == nds.name.types.AddressPointType.ACCESS_POSITION);
    }

    public boolean isPostalPositionSet()
    {
        return (postalPosition_ != null);
    }

    public void resetPostalPosition()
    {
        this.postalPosition_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneAddressPoint)
        {
            final LaneAddressPoint that = (LaneAddressPoint)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((!isAccessPositionsUsed()) ? !that.isAccessPositionsUsed() :
                        ((accessPositions_ == null) ? that.accessPositions_ == null : accessPositions_.equals(that.accessPositions_))) &&
                    ((!isPostalPositionUsed()) ? !that.isPostalPositionUsed() :
                        ((postalPosition_ == null) ? that.postalPosition_ == null : postalPosition_.equals(that.postalPosition_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isAccessPositionsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, accessPositions_);
        if (isPostalPositionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, postalPosition_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.name.types.AddressPointType.readEnum(in);

        if (getType() == nds.name.types.AddressPointType.POSTAL_POSITION)
        {
            accessPositions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.LaneAddressPointReference.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.LaneAddressPointReference>(new ZserioElementFactory_accessPositions()),
                    zserio.runtime.array.ArrayType.AUTO);
            accessPositions_.read(in);
        }

        if (getType() == nds.name.types.AddressPointType.ACCESS_POSITION)
        {
            postalPosition_ = new nds.name.types.LaneAddressPointReference(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.name.types.AddressPointType.readEnum(zserioContext.getType(), in);

        if (getType() == nds.name.types.AddressPointType.POSTAL_POSITION)
        {
            accessPositions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.name.types.LaneAddressPointReference.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.name.types.LaneAddressPointReference>(new ZserioElementFactory_accessPositions()),
                    zserio.runtime.array.ArrayType.AUTO);
            accessPositions_.readPacked(in);
        }

        if (getType() == nds.name.types.AddressPointType.ACCESS_POSITION)
        {
            postalPosition_ = new nds.name.types.LaneAddressPointReference(zserioContext.getPostalPosition(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isAccessPositionsUsed())
        {
            endBitPosition = accessPositions_.initializeOffsets(endBitPosition);
        }
        if (isPostalPositionUsed())
        {
            endBitPosition = postalPosition_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        if (isAccessPositionsUsed())
        {
            endBitPosition = accessPositions_.initializeOffsetsPacked(endBitPosition);
        }
        if (isPostalPositionUsed())
        {
            endBitPosition = postalPosition_.initializeOffsets(zserioContext.getPostalPosition(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        if (isAccessPositionsUsed())
        {
            accessPositions_.write(out);
        }

        if (isPostalPositionUsed())
        {
            postalPosition_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        if (isAccessPositionsUsed())
        {
            accessPositions_.writePacked(out);
        }

        if (isPostalPositionUsed())
        {
            postalPosition_.write(zserioContext.getPostalPosition(), out);
        }
    }

    private static final class ZserioElementFactory_accessPositions implements zserio.runtime.array.PackableElementFactory<nds.name.types.LaneAddressPointReference>
    {
        @Override
        public nds.name.types.LaneAddressPointReference create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.name.types.LaneAddressPointReference(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.name.types.LaneAddressPointReference.ZserioPackingContext();
        }

        @Override
        public nds.name.types.LaneAddressPointReference create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.name.types.LaneAddressPointReference(context, in);
        }
    }

    private nds.name.types.AddressPointType type_;
    private zserio.runtime.array.Array accessPositions_;
    private nds.name.types.LaneAddressPointReference postalPosition_;
}
