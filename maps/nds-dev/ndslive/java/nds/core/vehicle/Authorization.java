/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class Authorization implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public Authorization()
    {
        this((int)0);
    }

    public Authorization(int value)
    {
        if (value < 0 || value > 536870911)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'Authorization' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public Authorization(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt32();
    }

    public Authorization(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof Authorization))
            return false;

        final Authorization otherAuthorization = (Authorization)other;
        return value == otherAuthorization.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(Authorization.Values.RESIDENTIAL).equals(Authorization.Values.RESIDENTIAL))
            builder.append(builder.length() == 0 ? "RESIDENTIAL" : " | RESIDENTIAL");
        if (this.and(Authorization.Values.AGRICULTURAL).equals(Authorization.Values.AGRICULTURAL))
            builder.append(builder.length() == 0 ? "AGRICULTURAL" : " | AGRICULTURAL");
        if (this.and(Authorization.Values.FORESTRY).equals(Authorization.Values.FORESTRY))
            builder.append(builder.length() == 0 ? "FORESTRY" : " | FORESTRY");
        if (this.and(Authorization.Values.MILITARY).equals(Authorization.Values.MILITARY))
            builder.append(builder.length() == 0 ? "MILITARY" : " | MILITARY");
        if (this.and(Authorization.Values.FACILITY).equals(Authorization.Values.FACILITY))
            builder.append(builder.length() == 0 ? "FACILITY" : " | FACILITY");
        if (this.and(Authorization.Values.EMPLOYEES).equals(Authorization.Values.EMPLOYEES))
            builder.append(builder.length() == 0 ? "EMPLOYEES" : " | EMPLOYEES");
        if (this.and(Authorization.Values.DELIVERY).equals(Authorization.Values.DELIVERY))
            builder.append(builder.length() == 0 ? "DELIVERY" : " | DELIVERY");
        if (this.and(Authorization.Values.DISABLED_PERSONS).equals(Authorization.Values.DISABLED_PERSONS))
            builder.append(builder.length() == 0 ? "DISABLED_PERSONS" : " | DISABLED_PERSONS");
        if (this.and(Authorization.Values.SPECIAL_AUTHORIZATION).equals(Authorization.Values.SPECIAL_AUTHORIZATION))
            builder.append(builder.length() == 0 ? "SPECIAL_AUTHORIZATION" : " | SPECIAL_AUTHORIZATION");
        if (this.and(Authorization.Values.FOREIGN_VEHICLE).equals(Authorization.Values.FOREIGN_VEHICLE))
            builder.append(builder.length() == 0 ? "FOREIGN_VEHICLE" : " | FOREIGN_VEHICLE");
        if (this.and(Authorization.Values.LOCAL_VEHICLE).equals(Authorization.Values.LOCAL_VEHICLE))
            builder.append(builder.length() == 0 ? "LOCAL_VEHICLE" : " | LOCAL_VEHICLE");
        if (this.and(Authorization.Values.FEE_PAID).equals(Authorization.Values.FEE_PAID))
            builder.append(builder.length() == 0 ? "FEE_PAID" : " | FEE_PAID");
        if (this.and(Authorization.Values.REGISTERED_LICENSE_PLATE).equals(Authorization.Values.REGISTERED_LICENSE_PLATE))
            builder.append(builder.length() == 0 ? "REGISTERED_LICENSE_PLATE" : " | REGISTERED_LICENSE_PLATE");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public Authorization or(Authorization other)
    {
        return new Authorization((int)(value | other.value));
    }

    public Authorization and(Authorization other)
    {
        return new Authorization((int)(value & other.value));
    }

    public Authorization xor(Authorization other)
    {
        return new Authorization((int)(value ^ other.value));
    }

    public Authorization not()
    {
        return new Authorization((int)(~value & 536870911));
    }

    public static final class Values
    {
        public static final Authorization RESIDENTIAL = new Authorization(1);
        public static final Authorization AGRICULTURAL = new Authorization(2);
        public static final Authorization FORESTRY = new Authorization(4);
        public static final Authorization MILITARY = new Authorization(8);
        public static final Authorization FACILITY = new Authorization(16);
        public static final Authorization EMPLOYEES = new Authorization(32);
        public static final Authorization DELIVERY = new Authorization(64);
        public static final Authorization DISABLED_PERSONS = new Authorization(128);
        public static final Authorization SPECIAL_AUTHORIZATION = new Authorization(256);
        public static final Authorization FOREIGN_VEHICLE = new Authorization(512);
        public static final Authorization LOCAL_VEHICLE = new Authorization(1024);
        public static final Authorization FEE_PAID = new Authorization(2048);
        public static final Authorization REGISTERED_LICENSE_PLATE = new Authorization(4096);
    }

    private int value;
}
