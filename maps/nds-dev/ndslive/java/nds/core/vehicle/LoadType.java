/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class LoadType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public LoadType()
    {
        this((int)0);
    }

    public LoadType(int value)
    {
        if (value < 0 || value > 536870911)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'LoadType' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public LoadType(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt32();
    }

    public LoadType(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof LoadType))
            return false;

        final LoadType otherLoadType = (LoadType)other;
        return value == otherLoadType.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(LoadType.Values.WATER_POLLUTING).equals(LoadType.Values.WATER_POLLUTING))
            builder.append(builder.length() == 0 ? "WATER_POLLUTING" : " | WATER_POLLUTING");
        if (this.and(LoadType.Values.EXPLOSIVE).equals(LoadType.Values.EXPLOSIVE))
            builder.append(builder.length() == 0 ? "EXPLOSIVE" : " | EXPLOSIVE");
        if (this.and(LoadType.Values.OTHER_DANGEROUS_GOODS).equals(LoadType.Values.OTHER_DANGEROUS_GOODS))
            builder.append(builder.length() == 0 ? "OTHER_DANGEROUS_GOODS" : " | OTHER_DANGEROUS_GOODS");
        if (this.and(LoadType.Values.NO_LOAD).equals(LoadType.Values.NO_LOAD))
            builder.append(builder.length() == 0 ? "NO_LOAD" : " | NO_LOAD");
        if (this.and(LoadType.Values.SPECIAL_LOAD).equals(LoadType.Values.SPECIAL_LOAD))
            builder.append(builder.length() == 0 ? "SPECIAL_LOAD" : " | SPECIAL_LOAD");
        if (this.and(LoadType.Values.GAS).equals(LoadType.Values.GAS))
            builder.append(builder.length() == 0 ? "GAS" : " | GAS");
        if (this.and(LoadType.Values.FLAMMABLE_LIQUIDS).equals(LoadType.Values.FLAMMABLE_LIQUIDS))
            builder.append(builder.length() == 0 ? "FLAMMABLE_LIQUIDS" : " | FLAMMABLE_LIQUIDS");
        if (this.and(LoadType.Values.FLAMMABLE_SOLIDS).equals(LoadType.Values.FLAMMABLE_SOLIDS))
            builder.append(builder.length() == 0 ? "FLAMMABLE_SOLIDS" : " | FLAMMABLE_SOLIDS");
        if (this.and(LoadType.Values.OXIDIZERS_AND_ORGANIC_PEROXIDES).equals(LoadType.Values.OXIDIZERS_AND_ORGANIC_PEROXIDES))
            builder.append(builder.length() == 0 ? "OXIDIZERS_AND_ORGANIC_PEROXIDES" : " | OXIDIZERS_AND_ORGANIC_PEROXIDES");
        if (this.and(LoadType.Values.TOXIC_AND_INFECTIOUS_SUBSTANCES).equals(LoadType.Values.TOXIC_AND_INFECTIOUS_SUBSTANCES))
            builder.append(builder.length() == 0 ? "TOXIC_AND_INFECTIOUS_SUBSTANCES" : " | TOXIC_AND_INFECTIOUS_SUBSTANCES");
        if (this.and(LoadType.Values.RADIOACTIVE_SUBSTANCES).equals(LoadType.Values.RADIOACTIVE_SUBSTANCES))
            builder.append(builder.length() == 0 ? "RADIOACTIVE_SUBSTANCES" : " | RADIOACTIVE_SUBSTANCES");
        if (this.and(LoadType.Values.CORROSIVE_SUBSTANCES).equals(LoadType.Values.CORROSIVE_SUBSTANCES))
            builder.append(builder.length() == 0 ? "CORROSIVE_SUBSTANCES" : " | CORROSIVE_SUBSTANCES");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public LoadType or(LoadType other)
    {
        return new LoadType((int)(value | other.value));
    }

    public LoadType and(LoadType other)
    {
        return new LoadType((int)(value & other.value));
    }

    public LoadType xor(LoadType other)
    {
        return new LoadType((int)(value ^ other.value));
    }

    public LoadType not()
    {
        return new LoadType((int)(~value & 536870911));
    }

    public static final class Values
    {
        public static final LoadType WATER_POLLUTING = new LoadType(1);
        public static final LoadType EXPLOSIVE = new LoadType(2);
        public static final LoadType OTHER_DANGEROUS_GOODS = new LoadType(4);
        public static final LoadType NO_LOAD = new LoadType(8);
        public static final LoadType SPECIAL_LOAD = new LoadType(16);
        public static final LoadType GAS = new LoadType(32);
        public static final LoadType FLAMMABLE_LIQUIDS = new LoadType(64);
        public static final LoadType FLAMMABLE_SOLIDS = new LoadType(128);
        public static final LoadType OXIDIZERS_AND_ORGANIC_PEROXIDES = new LoadType(256);
        public static final LoadType TOXIC_AND_INFECTIOUS_SUBSTANCES = new LoadType(512);
        public static final LoadType RADIOACTIVE_SUBSTANCES = new LoadType(1024);
        public static final LoadType CORROSIVE_SUBSTANCES = new LoadType(2048);
    }

    private int value;
}
