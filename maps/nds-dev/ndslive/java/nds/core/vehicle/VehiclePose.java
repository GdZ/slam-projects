/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class VehiclePose implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            choiceTag = new zserio.runtime.array.DeltaContext();
            poseRaw_ = new nds.core.vehicle.PoseRaw.ZserioPackingContext();
            poseGeoMatched_ = new nds.core.vehicle.PoseGeoMatched.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getChoiceTag()
        {
            return choiceTag;
        }

        public nds.core.vehicle.PoseRaw.ZserioPackingContext getPoseRaw()
        {
            return poseRaw_;
        }

        public nds.core.vehicle.PoseGeoMatched.ZserioPackingContext getPoseGeoMatched()
        {
            return poseGeoMatched_;
        }

        private zserio.runtime.array.DeltaContext choiceTag;
        private nds.core.vehicle.PoseRaw.ZserioPackingContext poseRaw_;
        private nds.core.vehicle.PoseGeoMatched.ZserioPackingContext poseGeoMatched_;
    };

    public VehiclePose()
    {
    }

    public VehiclePose(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public VehiclePose(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public int choiceTag()
    {
        return choiceTag;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getChoiceTag().init(
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(choiceTag));

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            getPoseRaw().initPackingContext(zserioContext.getPoseRaw());
            break;
        case CHOICE_poseGeoMatched:
            getPoseGeoMatched().initPackingContext(zserioContext.getPoseGeoMatched());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(choiceTag);

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            endBitPosition += getPoseRaw().bitSizeOf(endBitPosition);
            break;
        case CHOICE_poseGeoMatched:
            endBitPosition += getPoseGeoMatched().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getChoiceTag().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(choiceTag));

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            endBitPosition += getPoseRaw().bitSizeOf(zserioContext.getPoseRaw(), endBitPosition);
            break;
        case CHOICE_poseGeoMatched:
            endBitPosition += getPoseGeoMatched().bitSizeOf(zserioContext.getPoseGeoMatched(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.vehicle.PoseRaw getPoseRaw()
    {
        return (nds.core.vehicle.PoseRaw)objectChoice;
    }

    public void setPoseRaw(nds.core.vehicle.PoseRaw poseRaw_)
    {
        choiceTag = CHOICE_poseRaw;
        objectChoice = poseRaw_;
    }

    public nds.core.vehicle.PoseGeoMatched getPoseGeoMatched()
    {
        return (nds.core.vehicle.PoseGeoMatched)objectChoice;
    }

    public void setPoseGeoMatched(nds.core.vehicle.PoseGeoMatched poseGeoMatched_)
    {
        choiceTag = CHOICE_poseGeoMatched;
        objectChoice = poseGeoMatched_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof VehiclePose)
        {
            final VehiclePose that = (VehiclePose)obj;

            return
                    choiceTag == that.choiceTag &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, choiceTag);
        if (objectChoice != null)
        {
            switch (choiceTag)
            {
            case CHOICE_poseRaw:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result,
                        (nds.core.vehicle.PoseRaw)objectChoice);
                break;
            case CHOICE_poseGeoMatched:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result,
                        (nds.core.vehicle.PoseGeoMatched)objectChoice);
                break;
            default:
                break; // UNDEFINED_CHOICE
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        choiceTag = in.readVarSize();

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            objectChoice = new nds.core.vehicle.PoseRaw(in);
            break;
        case CHOICE_poseGeoMatched:
            objectChoice = new nds.core.vehicle.PoseGeoMatched(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        choiceTag = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getChoiceTag().read(
                        new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            objectChoice = new nds.core.vehicle.PoseRaw(zserioContext.getPoseRaw(), in);
            break;
        case CHOICE_poseGeoMatched:
            objectChoice = new nds.core.vehicle.PoseGeoMatched(zserioContext.getPoseGeoMatched(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(choiceTag);

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            endBitPosition = getPoseRaw().initializeOffsets(endBitPosition);
            break;
        case CHOICE_poseGeoMatched:
            endBitPosition = getPoseGeoMatched().initializeOffsets(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getChoiceTag().bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(choiceTag));

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            endBitPosition = getPoseRaw().initializeOffsets(zserioContext.getPoseRaw(), endBitPosition);
            break;
        case CHOICE_poseGeoMatched:
            endBitPosition = getPoseGeoMatched().initializeOffsets(zserioContext.getPoseGeoMatched(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(choiceTag);

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            getPoseRaw().write(out);
            break;
        case CHOICE_poseGeoMatched:
            getPoseGeoMatched().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        };
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getChoiceTag().write(
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(choiceTag));

        switch (choiceTag)
        {
        case CHOICE_poseRaw:
            getPoseRaw().write(zserioContext.getPoseRaw(), out);
            break;
        case CHOICE_poseGeoMatched:
            getPoseGeoMatched().write(zserioContext.getPoseGeoMatched(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in union VehiclePose!");
        };
    }

    public static final int CHOICE_poseRaw = 0;
    public static final int CHOICE_poseGeoMatched = 1;
    public static final int UNDEFINED_CHOICE = -1;

    private java.lang.Object objectChoice;
    private int choiceTag = UNDEFINED_CHOICE;
}
