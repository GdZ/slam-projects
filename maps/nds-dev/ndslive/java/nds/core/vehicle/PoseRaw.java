/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class PoseRaw implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            longitude_ = new zserio.runtime.array.DeltaContext();
            latitude_ = new zserio.runtime.array.DeltaContext();
            elevation_ = new zserio.runtime.array.DeltaContext();
            heading_ = new zserio.runtime.array.DeltaContext();
            pitch_ = new zserio.runtime.array.DeltaContext();
            speed_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getLongitude()
        {
            return longitude_;
        }

        public zserio.runtime.array.DeltaContext getLatitude()
        {
            return latitude_;
        }

        public zserio.runtime.array.DeltaContext getElevation()
        {
            return elevation_;
        }

        public zserio.runtime.array.DeltaContext getHeading()
        {
            return heading_;
        }

        public zserio.runtime.array.DeltaContext getPitch()
        {
            return pitch_;
        }

        public zserio.runtime.array.DeltaContext getSpeed()
        {
            return speed_;
        }

        private zserio.runtime.array.DeltaContext longitude_;
        private zserio.runtime.array.DeltaContext latitude_;
        private zserio.runtime.array.DeltaContext elevation_;
        private zserio.runtime.array.DeltaContext heading_;
        private zserio.runtime.array.DeltaContext pitch_;
        private zserio.runtime.array.DeltaContext speed_;
    };

    public PoseRaw()
    {
    }

    public PoseRaw(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoseRaw(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoseRaw(
            int longitude_,
            int latitude_,
            java.lang.Integer elevation_,
            java.lang.Short heading_,
            java.lang.Byte pitch_,
            java.lang.Short speed_)
    {
        setLongitude(longitude_);
        setLatitude(latitude_);
        setElevation(elevation_);
        setHeading(heading_);
        setPitch(pitch_);
        setSpeed(speed_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLongitude().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longitude_));
        zserioContext.getLatitude().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(latitude_));
        if (isElevationUsed())
        {
            zserioContext.getElevation().init(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        if (isHeadingUsed())
        {
            zserioContext.getHeading().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        if (isPitchUsed())
        {
            zserioContext.getPitch().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(pitch_));
        }
        if (isSpeedUsed())
        {
            zserioContext.getSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 32;
        endBitPosition += 32;
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(elevation_);
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isPitchUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLongitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longitude_));
        endBitPosition += zserioContext.getLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(latitude_));
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserioContext.getElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isPitchUsed())
        {
            endBitPosition += zserioContext.getPitch().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(pitch_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public int getLongitude()
    {
        return longitude_;
    }

    public void setLongitude(int longitude_)
    {
        this.longitude_ = longitude_;
    }

    public int getLatitude()
    {
        return latitude_;
    }

    public void setLatitude(int latitude_)
    {
        this.latitude_ = latitude_;
    }

    public java.lang.Integer getElevation()
    {
        return elevation_;
    }

    public void setElevation(java.lang.Integer elevation_)
    {
        this.elevation_ = elevation_;
    }

    public boolean isElevationUsed()
    {
        return isElevationSet();
    }

    public boolean isElevationSet()
    {
        return (elevation_ != null);
    }

    public void resetElevation()
    {
        this.elevation_ = null;
    }

    public java.lang.Short getHeading()
    {
        return heading_;
    }

    public void setHeading(java.lang.Short heading_)
    {
        this.heading_ = heading_;
    }

    public boolean isHeadingUsed()
    {
        return isHeadingSet();
    }

    public boolean isHeadingSet()
    {
        return (heading_ != null);
    }

    public void resetHeading()
    {
        this.heading_ = null;
    }

    public java.lang.Byte getPitch()
    {
        return pitch_;
    }

    public void setPitch(java.lang.Byte pitch_)
    {
        this.pitch_ = pitch_;
    }

    public boolean isPitchUsed()
    {
        return isPitchSet();
    }

    public boolean isPitchSet()
    {
        return (pitch_ != null);
    }

    public void resetPitch()
    {
        this.pitch_ = null;
    }

    public java.lang.Short getSpeed()
    {
        return speed_;
    }

    public void setSpeed(java.lang.Short speed_)
    {
        this.speed_ = speed_;
    }

    public boolean isSpeedUsed()
    {
        return isSpeedSet();
    }

    public boolean isSpeedSet()
    {
        return (speed_ != null);
    }

    public void resetSpeed()
    {
        this.speed_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoseRaw)
        {
            final PoseRaw that = (PoseRaw)obj;

            return
                    longitude_ == that.longitude_ &&
                    latitude_ == that.latitude_ &&
                    ((!isElevationUsed()) ? !that.isElevationUsed() :
                        ((elevation_ == null) ? that.elevation_ == null : elevation_.equals(that.elevation_))) &&
                    ((!isHeadingUsed()) ? !that.isHeadingUsed() :
                        ((heading_ == null) ? that.heading_ == null : heading_.equals(that.heading_))) &&
                    ((!isPitchUsed()) ? !that.isPitchUsed() :
                        ((pitch_ == null) ? that.pitch_ == null : pitch_.equals(that.pitch_))) &&
                    ((!isSpeedUsed()) ? !that.isSpeedUsed() :
                        ((speed_ == null) ? that.speed_ == null : speed_.equals(that.speed_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, longitude_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, latitude_);
        if (isElevationUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, elevation_);
        if (isHeadingUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, heading_);
        if (isPitchUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, pitch_);
        if (isSpeedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, speed_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        longitude_ = in.readInt();

        latitude_ = in.readInt();

        if (in.readBool())
        {
            elevation_ = in.readVarInt32();
        }

        if (in.readBool())
        {
            heading_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            pitch_ = in.readByte();
        }

        if (in.readBool())
        {
            speed_ = in.readUnsignedByte();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        longitude_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLongitude().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();

        latitude_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLatitude().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();

        if (in.readBool())
        {
            elevation_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getElevation().read(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            heading_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getHeading().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            pitch_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getPitch().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            speed_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 32;
        endBitPosition += 32;
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(elevation_);
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isPitchUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLongitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longitude_));
        endBitPosition += zserioContext.getLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(latitude_));
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserioContext.getElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isPitchUsed())
        {
            endBitPosition += zserioContext.getPitch().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(pitch_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeInt(longitude_);

        out.writeInt(latitude_);

        if (isElevationUsed())
        {
            out.writeBool(true);
            out.writeVarInt32(elevation_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(heading_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isPitchUsed())
        {
            out.writeBool(true);
            out.writeByte(pitch_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(speed_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLongitude().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(longitude_));

        zserioContext.getLatitude().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(latitude_));

        if (isElevationUsed())
        {
            out.writeBool(true);
            zserioContext.getElevation().write(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            zserioContext.getHeading().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isPitchUsed())
        {
            out.writeBool(true);
            zserioContext.getPitch().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(pitch_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            zserioContext.getSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private int longitude_;
    private int latitude_;
    private java.lang.Integer elevation_;
    private java.lang.Short heading_;
    private java.lang.Byte pitch_;
    private java.lang.Short speed_;
}
