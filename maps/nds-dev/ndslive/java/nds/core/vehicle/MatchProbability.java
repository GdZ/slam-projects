/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class MatchProbability implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            percent_ = new zserio.runtime.array.DeltaContext();
            deviation_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getPercent()
        {
            return percent_;
        }

        public zserio.runtime.array.DeltaContext getDeviation()
        {
            return deviation_;
        }

        private zserio.runtime.array.DeltaContext percent_;
        private zserio.runtime.array.DeltaContext deviation_;
    };

    public MatchProbability()
    {
    }

    public MatchProbability(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MatchProbability(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MatchProbability(
            short percent_,
            int deviation_)
    {
        setPercent(percent_);
        setDeviation(deviation_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getPercent().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(percent_));
        zserioContext.getDeviation().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(deviation_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(deviation_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPercent().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(percent_));
        endBitPosition += zserioContext.getDeviation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(deviation_));

        return (int)(endBitPosition - bitPosition);
    }

    public short getPercent()
    {
        return percent_;
    }

    public void setPercent(short percent_)
    {
        this.percent_ = percent_;
    }

    public int getDeviation()
    {
        return deviation_;
    }

    public void setDeviation(int deviation_)
    {
        this.deviation_ = deviation_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MatchProbability)
        {
            final MatchProbability that = (MatchProbability)obj;

            return
                    percent_ == that.percent_ &&
                    deviation_ == that.deviation_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, percent_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, deviation_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        percent_ = in.readUnsignedByte();

        deviation_ = in.readVarUInt32();

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        percent_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getPercent().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        deviation_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getDeviation().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(deviation_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPercent().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(percent_));
        endBitPosition += zserioContext.getDeviation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(deviation_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeUnsignedByte(percent_);

        out.writeVarUInt32(deviation_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getPercent().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(percent_));

        zserioContext.getDeviation().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(deviation_));
    }

    private void checkConstraints()
    {
        if (!(getPercent() <= 200))
            throw new zserio.runtime.ConstraintError("Constraint violated at MatchProbability.percent!");
    }

    private short percent_;
    private int deviation_;
}
