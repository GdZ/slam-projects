/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class ConsumptionEfficiency implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            grossWeight_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getGrossWeight()
        {
            return grossWeight_;
        }

        private zserio.runtime.array.DeltaContext grossWeight_;
    };

    public ConsumptionEfficiency()
    {
    }

    public ConsumptionEfficiency(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ConsumptionEfficiency(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ConsumptionEfficiency(
            int grossWeight_,
            float accelerationEfficiency_,
            float decelerationEfficiency_,
            float uphillEfficiency_,
            float downhillEfficiency_)
    {
        setGrossWeight(grossWeight_);
        setAccelerationEfficiency(accelerationEfficiency_);
        setDecelerationEfficiency(decelerationEfficiency_);
        setUphillEfficiency(uphillEfficiency_);
        setDownhillEfficiency(downhillEfficiency_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getGrossWeight().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(grossWeight_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(grossWeight_);
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getGrossWeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(grossWeight_));
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;

        return (int)(endBitPosition - bitPosition);
    }

    public int getGrossWeight()
    {
        return grossWeight_;
    }

    public void setGrossWeight(int grossWeight_)
    {
        this.grossWeight_ = grossWeight_;
    }

    public float getAccelerationEfficiency()
    {
        return accelerationEfficiency_;
    }

    public void setAccelerationEfficiency(float accelerationEfficiency_)
    {
        this.accelerationEfficiency_ = accelerationEfficiency_;
    }

    public float getDecelerationEfficiency()
    {
        return decelerationEfficiency_;
    }

    public void setDecelerationEfficiency(float decelerationEfficiency_)
    {
        this.decelerationEfficiency_ = decelerationEfficiency_;
    }

    public float getUphillEfficiency()
    {
        return uphillEfficiency_;
    }

    public void setUphillEfficiency(float uphillEfficiency_)
    {
        this.uphillEfficiency_ = uphillEfficiency_;
    }

    public float getDownhillEfficiency()
    {
        return downhillEfficiency_;
    }

    public void setDownhillEfficiency(float downhillEfficiency_)
    {
        this.downhillEfficiency_ = downhillEfficiency_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ConsumptionEfficiency)
        {
            final ConsumptionEfficiency that = (ConsumptionEfficiency)obj;

            return
                    grossWeight_ == that.grossWeight_ &&
                    java.lang.Float.floatToIntBits(accelerationEfficiency_) == java.lang.Float.floatToIntBits(that.accelerationEfficiency_) &&
                    java.lang.Float.floatToIntBits(decelerationEfficiency_) == java.lang.Float.floatToIntBits(that.decelerationEfficiency_) &&
                    java.lang.Float.floatToIntBits(uphillEfficiency_) == java.lang.Float.floatToIntBits(that.uphillEfficiency_) &&
                    java.lang.Float.floatToIntBits(downhillEfficiency_) == java.lang.Float.floatToIntBits(that.downhillEfficiency_);
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, grossWeight_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, accelerationEfficiency_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, decelerationEfficiency_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, uphillEfficiency_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, downhillEfficiency_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        grossWeight_ = in.readVarUInt32();

        accelerationEfficiency_ = in.readFloat16();

        decelerationEfficiency_ = in.readFloat16();

        uphillEfficiency_ = in.readFloat16();

        downhillEfficiency_ = in.readFloat16();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        grossWeight_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getGrossWeight().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        accelerationEfficiency_ = in.readFloat16();

        decelerationEfficiency_ = in.readFloat16();

        uphillEfficiency_ = in.readFloat16();

        downhillEfficiency_ = in.readFloat16();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(grossWeight_);
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getGrossWeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(grossWeight_));
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;
        endBitPosition += 16;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(grossWeight_);

        out.writeFloat16(accelerationEfficiency_);

        out.writeFloat16(decelerationEfficiency_);

        out.writeFloat16(uphillEfficiency_);

        out.writeFloat16(downhillEfficiency_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getGrossWeight().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(grossWeight_));

        out.writeFloat16(accelerationEfficiency_);

        out.writeFloat16(decelerationEfficiency_);

        out.writeFloat16(uphillEfficiency_);

        out.writeFloat16(downhillEfficiency_);
    }

    private int grossWeight_;
    private float accelerationEfficiency_;
    private float decelerationEfficiency_;
    private float uphillEfficiency_;
    private float downhillEfficiency_;
}
