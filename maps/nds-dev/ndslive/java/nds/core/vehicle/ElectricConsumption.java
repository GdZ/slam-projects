/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class ElectricConsumption implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            maxCharge_ = new zserio.runtime.array.DeltaContext();
            currentCharge_ = new zserio.runtime.array.DeltaContext();
            auxConsumption_ = new zserio.runtime.array.DeltaContext();
            normalConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext();
            trafficConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext();
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext();
            consumptionElevationGain_ = new zserio.runtime.array.DeltaContext();
            recuperationElevationLoss_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getMaxCharge()
        {
            return maxCharge_;
        }

        public zserio.runtime.array.DeltaContext getCurrentCharge()
        {
            return currentCharge_;
        }

        public zserio.runtime.array.DeltaContext getAuxConsumption()
        {
            return auxConsumption_;
        }

        public nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext getNormalConsumption()
        {
            return normalConsumption_;
        }

        public nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext getTrafficConsumption()
        {
            return trafficConsumption_;
        }

        public nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext getEfficiency()
        {
            return efficiency_;
        }

        public zserio.runtime.array.DeltaContext getConsumptionElevationGain()
        {
            return consumptionElevationGain_;
        }

        public zserio.runtime.array.DeltaContext getRecuperationElevationLoss()
        {
            return recuperationElevationLoss_;
        }

        private zserio.runtime.array.DeltaContext maxCharge_;
        private zserio.runtime.array.DeltaContext currentCharge_;
        private zserio.runtime.array.DeltaContext auxConsumption_;
        private nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext normalConsumption_;
        private nds.core.vehicle.ElectricConsumptionCurve.ZserioPackingContext trafficConsumption_;
        private nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext efficiency_;
        private zserio.runtime.array.DeltaContext consumptionElevationGain_;
        private zserio.runtime.array.DeltaContext recuperationElevationLoss_;
    };

    public ElectricConsumption()
    {
    }

    public ElectricConsumption(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ElectricConsumption(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ElectricConsumption(
            int maxCharge_,
            int currentCharge_,
            java.lang.Integer auxConsumption_,
            nds.core.vehicle.ElectricConsumptionCurve normalConsumption_,
            nds.core.vehicle.ElectricConsumptionCurve trafficConsumption_,
            nds.core.vehicle.ConsumptionEfficiency efficiency_,
            java.lang.Integer consumptionElevationGain_,
            java.lang.Integer recuperationElevationLoss_)
    {
        setMaxCharge(maxCharge_);
        setCurrentCharge(currentCharge_);
        setAuxConsumption(auxConsumption_);
        setNormalConsumption(normalConsumption_);
        setTrafficConsumption(trafficConsumption_);
        setEfficiency(efficiency_);
        setConsumptionElevationGain(consumptionElevationGain_);
        setRecuperationElevationLoss(recuperationElevationLoss_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getMaxCharge().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxCharge_));
        zserioContext.getCurrentCharge().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(currentCharge_));
        if (isAuxConsumptionUsed())
        {
            zserioContext.getAuxConsumption().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(auxConsumption_));
        }
        normalConsumption_.initPackingContext(zserioContext.getNormalConsumption());
        if (isTrafficConsumptionUsed())
        {
            trafficConsumption_.initPackingContext(zserioContext.getTrafficConsumption());
        }
        if (isEfficiencyUsed())
        {
            efficiency_.initPackingContext(zserioContext.getEfficiency());
        }
        if (isConsumptionElevationGainUsed())
        {
            zserioContext.getConsumptionElevationGain().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(consumptionElevationGain_));
        }
        if (isRecuperationElevationLossUsed())
        {
            zserioContext.getRecuperationElevationLoss().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(recuperationElevationLoss_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxCharge_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(currentCharge_);
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(auxConsumption_);
        }
        endBitPosition += normalConsumption_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition += trafficConsumption_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition += efficiency_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isConsumptionElevationGainUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(consumptionElevationGain_);
        }
        endBitPosition += 1;
        if (isRecuperationElevationLossUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(recuperationElevationLoss_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getMaxCharge().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxCharge_));
        endBitPosition += zserioContext.getCurrentCharge().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(currentCharge_));
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += zserioContext.getAuxConsumption().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(auxConsumption_));
        }
        endBitPosition += normalConsumption_.bitSizeOf(zserioContext.getNormalConsumption(), endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition += trafficConsumption_.bitSizeOf(zserioContext.getTrafficConsumption(), endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition += efficiency_.bitSizeOf(zserioContext.getEfficiency(), endBitPosition);
        }
        endBitPosition += 1;
        if (isConsumptionElevationGainUsed())
        {
            endBitPosition += zserioContext.getConsumptionElevationGain().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(consumptionElevationGain_));
        }
        endBitPosition += 1;
        if (isRecuperationElevationLossUsed())
        {
            endBitPosition += zserioContext.getRecuperationElevationLoss().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(recuperationElevationLoss_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public int getMaxCharge()
    {
        return maxCharge_;
    }

    public void setMaxCharge(int maxCharge_)
    {
        this.maxCharge_ = maxCharge_;
    }

    public int getCurrentCharge()
    {
        return currentCharge_;
    }

    public void setCurrentCharge(int currentCharge_)
    {
        this.currentCharge_ = currentCharge_;
    }

    public java.lang.Integer getAuxConsumption()
    {
        return auxConsumption_;
    }

    public void setAuxConsumption(java.lang.Integer auxConsumption_)
    {
        this.auxConsumption_ = auxConsumption_;
    }

    public boolean isAuxConsumptionUsed()
    {
        return isAuxConsumptionSet();
    }

    public boolean isAuxConsumptionSet()
    {
        return (auxConsumption_ != null);
    }

    public void resetAuxConsumption()
    {
        this.auxConsumption_ = null;
    }

    public nds.core.vehicle.ElectricConsumptionCurve getNormalConsumption()
    {
        return normalConsumption_;
    }

    public void setNormalConsumption(nds.core.vehicle.ElectricConsumptionCurve normalConsumption_)
    {
        this.normalConsumption_ = normalConsumption_;
    }

    public nds.core.vehicle.ElectricConsumptionCurve getTrafficConsumption()
    {
        return trafficConsumption_;
    }

    public void setTrafficConsumption(nds.core.vehicle.ElectricConsumptionCurve trafficConsumption_)
    {
        this.trafficConsumption_ = trafficConsumption_;
    }

    public boolean isTrafficConsumptionUsed()
    {
        return isTrafficConsumptionSet();
    }

    public boolean isTrafficConsumptionSet()
    {
        return (trafficConsumption_ != null);
    }

    public void resetTrafficConsumption()
    {
        this.trafficConsumption_ = null;
    }

    public nds.core.vehicle.ConsumptionEfficiency getEfficiency()
    {
        return efficiency_;
    }

    public void setEfficiency(nds.core.vehicle.ConsumptionEfficiency efficiency_)
    {
        this.efficiency_ = efficiency_;
    }

    public boolean isEfficiencyUsed()
    {
        return isEfficiencySet();
    }

    public boolean isEfficiencySet()
    {
        return (efficiency_ != null);
    }

    public void resetEfficiency()
    {
        this.efficiency_ = null;
    }

    public java.lang.Integer getConsumptionElevationGain()
    {
        return consumptionElevationGain_;
    }

    public void setConsumptionElevationGain(java.lang.Integer consumptionElevationGain_)
    {
        this.consumptionElevationGain_ = consumptionElevationGain_;
    }

    public boolean isConsumptionElevationGainUsed()
    {
        return isConsumptionElevationGainSet();
    }

    public boolean isConsumptionElevationGainSet()
    {
        return (consumptionElevationGain_ != null);
    }

    public void resetConsumptionElevationGain()
    {
        this.consumptionElevationGain_ = null;
    }

    public java.lang.Integer getRecuperationElevationLoss()
    {
        return recuperationElevationLoss_;
    }

    public void setRecuperationElevationLoss(java.lang.Integer recuperationElevationLoss_)
    {
        this.recuperationElevationLoss_ = recuperationElevationLoss_;
    }

    public boolean isRecuperationElevationLossUsed()
    {
        return isRecuperationElevationLossSet();
    }

    public boolean isRecuperationElevationLossSet()
    {
        return (recuperationElevationLoss_ != null);
    }

    public void resetRecuperationElevationLoss()
    {
        this.recuperationElevationLoss_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ElectricConsumption)
        {
            final ElectricConsumption that = (ElectricConsumption)obj;

            return
                    maxCharge_ == that.maxCharge_ &&
                    currentCharge_ == that.currentCharge_ &&
                    ((!isAuxConsumptionUsed()) ? !that.isAuxConsumptionUsed() :
                        ((auxConsumption_ == null) ? that.auxConsumption_ == null : auxConsumption_.equals(that.auxConsumption_))) &&
                    ((normalConsumption_ == null) ? that.normalConsumption_ == null : normalConsumption_.equals(that.normalConsumption_)) &&
                    ((!isTrafficConsumptionUsed()) ? !that.isTrafficConsumptionUsed() :
                        ((trafficConsumption_ == null) ? that.trafficConsumption_ == null : trafficConsumption_.equals(that.trafficConsumption_))) &&
                    ((!isEfficiencyUsed()) ? !that.isEfficiencyUsed() :
                        ((efficiency_ == null) ? that.efficiency_ == null : efficiency_.equals(that.efficiency_))) &&
                    ((!isConsumptionElevationGainUsed()) ? !that.isConsumptionElevationGainUsed() :
                        ((consumptionElevationGain_ == null) ? that.consumptionElevationGain_ == null : consumptionElevationGain_.equals(that.consumptionElevationGain_))) &&
                    ((!isRecuperationElevationLossUsed()) ? !that.isRecuperationElevationLossUsed() :
                        ((recuperationElevationLoss_ == null) ? that.recuperationElevationLoss_ == null : recuperationElevationLoss_.equals(that.recuperationElevationLoss_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxCharge_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, currentCharge_);
        if (isAuxConsumptionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, auxConsumption_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, normalConsumption_);
        if (isTrafficConsumptionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, trafficConsumption_);
        if (isEfficiencyUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, efficiency_);
        if (isConsumptionElevationGainUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, consumptionElevationGain_);
        if (isRecuperationElevationLossUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, recuperationElevationLoss_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        maxCharge_ = in.readVarUInt32();

        currentCharge_ = in.readVarUInt32();

        if (in.readBool())
        {
            auxConsumption_ = in.readVarUInt32();
        }

        normalConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve(in);

        if (in.readBool())
        {
            trafficConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve(in);
        }

        if (in.readBool())
        {
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency(in);
        }

        if (in.readBool())
        {
            consumptionElevationGain_ = in.readVarUInt32();
        }

        if (in.readBool())
        {
            recuperationElevationLoss_ = in.readVarUInt32();
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        maxCharge_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getMaxCharge().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        currentCharge_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getCurrentCharge().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (in.readBool())
        {
            auxConsumption_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getAuxConsumption().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }

        normalConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve(zserioContext.getNormalConsumption(), in);

        if (in.readBool())
        {
            trafficConsumption_ = new nds.core.vehicle.ElectricConsumptionCurve(zserioContext.getTrafficConsumption(), in);
        }

        if (in.readBool())
        {
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency(zserioContext.getEfficiency(), in);
        }

        if (in.readBool())
        {
            consumptionElevationGain_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getConsumptionElevationGain().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            recuperationElevationLoss_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getRecuperationElevationLoss().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxCharge_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(currentCharge_);
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(auxConsumption_);
        }
        endBitPosition = normalConsumption_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition = trafficConsumption_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition = efficiency_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isConsumptionElevationGainUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(consumptionElevationGain_);
        }
        endBitPosition += 1;
        if (isRecuperationElevationLossUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(recuperationElevationLoss_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getMaxCharge().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxCharge_));
        endBitPosition += zserioContext.getCurrentCharge().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(currentCharge_));
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += zserioContext.getAuxConsumption().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(auxConsumption_));
        }
        endBitPosition = normalConsumption_.initializeOffsets(zserioContext.getNormalConsumption(), endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition = trafficConsumption_.initializeOffsets(zserioContext.getTrafficConsumption(), endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition = efficiency_.initializeOffsets(zserioContext.getEfficiency(), endBitPosition);
        }
        endBitPosition += 1;
        if (isConsumptionElevationGainUsed())
        {
            endBitPosition += zserioContext.getConsumptionElevationGain().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(consumptionElevationGain_));
        }
        endBitPosition += 1;
        if (isRecuperationElevationLossUsed())
        {
            endBitPosition += zserioContext.getRecuperationElevationLoss().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(recuperationElevationLoss_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt32(maxCharge_);

        out.writeVarUInt32(currentCharge_);

        if (isAuxConsumptionUsed())
        {
            out.writeBool(true);
            out.writeVarUInt32(auxConsumption_);
        }
        else
        {
            out.writeBool(false);
        }

        normalConsumption_.write(out);

        if (isTrafficConsumptionUsed())
        {
            out.writeBool(true);
            trafficConsumption_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isEfficiencyUsed())
        {
            out.writeBool(true);
            efficiency_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isConsumptionElevationGainUsed())
        {
            out.writeBool(true);
            out.writeVarUInt32(consumptionElevationGain_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRecuperationElevationLossUsed())
        {
            out.writeBool(true);
            out.writeVarUInt32(recuperationElevationLoss_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getMaxCharge().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxCharge_));

        zserioContext.getCurrentCharge().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(currentCharge_));

        if (isAuxConsumptionUsed())
        {
            out.writeBool(true);
            zserioContext.getAuxConsumption().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(auxConsumption_));
        }
        else
        {
            out.writeBool(false);
        }

        normalConsumption_.write(zserioContext.getNormalConsumption(), out);

        if (isTrafficConsumptionUsed())
        {
            out.writeBool(true);
            trafficConsumption_.write(zserioContext.getTrafficConsumption(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isEfficiencyUsed())
        {
            out.writeBool(true);
            efficiency_.write(zserioContext.getEfficiency(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isConsumptionElevationGainUsed())
        {
            out.writeBool(true);
            zserioContext.getConsumptionElevationGain().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(consumptionElevationGain_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isRecuperationElevationLossUsed())
        {
            out.writeBool(true);
            zserioContext.getRecuperationElevationLoss().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(recuperationElevationLoss_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private void checkConstraints()
    {
        if (!(getCurrentCharge() <= getMaxCharge()))
            throw new zserio.runtime.ConstraintError("Constraint violated at ElectricConsumption.currentCharge!");
    }

    private int maxCharge_;
    private int currentCharge_;
    private java.lang.Integer auxConsumption_;
    private nds.core.vehicle.ElectricConsumptionCurve normalConsumption_;
    private nds.core.vehicle.ElectricConsumptionCurve trafficConsumption_;
    private nds.core.vehicle.ConsumptionEfficiency efficiency_;
    private java.lang.Integer consumptionElevationGain_;
    private java.lang.Integer recuperationElevationLoss_;
}
