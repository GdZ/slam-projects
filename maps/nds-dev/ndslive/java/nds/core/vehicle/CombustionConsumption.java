/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class CombustionConsumption implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            normalConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext();
            trafficConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext();
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext();
        }

        public nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext getNormalConsumption()
        {
            return normalConsumption_;
        }

        public nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext getTrafficConsumption()
        {
            return trafficConsumption_;
        }

        public nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext getEfficiency()
        {
            return efficiency_;
        }

        private nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext normalConsumption_;
        private nds.core.vehicle.CombustionConsumptionCurve.ZserioPackingContext trafficConsumption_;
        private nds.core.vehicle.ConsumptionEfficiency.ZserioPackingContext efficiency_;
    };

    public CombustionConsumption()
    {
    }

    public CombustionConsumption(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public CombustionConsumption(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public CombustionConsumption(
            float currentFuelSupply_,
            java.lang.Float auxConsumption_,
            nds.core.vehicle.CombustionConsumptionCurve normalConsumption_,
            nds.core.vehicle.CombustionConsumptionCurve trafficConsumption_,
            nds.core.vehicle.ConsumptionEfficiency efficiency_)
    {
        setCurrentFuelSupply(currentFuelSupply_);
        setAuxConsumption(auxConsumption_);
        setNormalConsumption(normalConsumption_);
        setTrafficConsumption(trafficConsumption_);
        setEfficiency(efficiency_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        normalConsumption_.initPackingContext(zserioContext.getNormalConsumption());
        if (isTrafficConsumptionUsed())
        {
            trafficConsumption_.initPackingContext(zserioContext.getTrafficConsumption());
        }
        if (isEfficiencyUsed())
        {
            efficiency_.initPackingContext(zserioContext.getEfficiency());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += normalConsumption_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition += trafficConsumption_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition += efficiency_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += normalConsumption_.bitSizeOf(zserioContext.getNormalConsumption(), endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition += trafficConsumption_.bitSizeOf(zserioContext.getTrafficConsumption(), endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition += efficiency_.bitSizeOf(zserioContext.getEfficiency(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public float getCurrentFuelSupply()
    {
        return currentFuelSupply_;
    }

    public void setCurrentFuelSupply(float currentFuelSupply_)
    {
        this.currentFuelSupply_ = currentFuelSupply_;
    }

    public java.lang.Float getAuxConsumption()
    {
        return auxConsumption_;
    }

    public void setAuxConsumption(java.lang.Float auxConsumption_)
    {
        this.auxConsumption_ = auxConsumption_;
    }

    public boolean isAuxConsumptionUsed()
    {
        return isAuxConsumptionSet();
    }

    public boolean isAuxConsumptionSet()
    {
        return (auxConsumption_ != null);
    }

    public void resetAuxConsumption()
    {
        this.auxConsumption_ = null;
    }

    public nds.core.vehicle.CombustionConsumptionCurve getNormalConsumption()
    {
        return normalConsumption_;
    }

    public void setNormalConsumption(nds.core.vehicle.CombustionConsumptionCurve normalConsumption_)
    {
        this.normalConsumption_ = normalConsumption_;
    }

    public nds.core.vehicle.CombustionConsumptionCurve getTrafficConsumption()
    {
        return trafficConsumption_;
    }

    public void setTrafficConsumption(nds.core.vehicle.CombustionConsumptionCurve trafficConsumption_)
    {
        this.trafficConsumption_ = trafficConsumption_;
    }

    public boolean isTrafficConsumptionUsed()
    {
        return isTrafficConsumptionSet();
    }

    public boolean isTrafficConsumptionSet()
    {
        return (trafficConsumption_ != null);
    }

    public void resetTrafficConsumption()
    {
        this.trafficConsumption_ = null;
    }

    public nds.core.vehicle.ConsumptionEfficiency getEfficiency()
    {
        return efficiency_;
    }

    public void setEfficiency(nds.core.vehicle.ConsumptionEfficiency efficiency_)
    {
        this.efficiency_ = efficiency_;
    }

    public boolean isEfficiencyUsed()
    {
        return isEfficiencySet();
    }

    public boolean isEfficiencySet()
    {
        return (efficiency_ != null);
    }

    public void resetEfficiency()
    {
        this.efficiency_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CombustionConsumption)
        {
            final CombustionConsumption that = (CombustionConsumption)obj;

            return
                    java.lang.Float.floatToIntBits(currentFuelSupply_) == java.lang.Float.floatToIntBits(that.currentFuelSupply_) &&
                    ((!isAuxConsumptionUsed()) ? !that.isAuxConsumptionUsed() :
                        ((auxConsumption_ == null) ? that.auxConsumption_ == null : auxConsumption_.equals(that.auxConsumption_))) &&
                    ((normalConsumption_ == null) ? that.normalConsumption_ == null : normalConsumption_.equals(that.normalConsumption_)) &&
                    ((!isTrafficConsumptionUsed()) ? !that.isTrafficConsumptionUsed() :
                        ((trafficConsumption_ == null) ? that.trafficConsumption_ == null : trafficConsumption_.equals(that.trafficConsumption_))) &&
                    ((!isEfficiencyUsed()) ? !that.isEfficiencyUsed() :
                        ((efficiency_ == null) ? that.efficiency_ == null : efficiency_.equals(that.efficiency_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, currentFuelSupply_);
        if (isAuxConsumptionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, auxConsumption_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, normalConsumption_);
        if (isTrafficConsumptionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, trafficConsumption_);
        if (isEfficiencyUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, efficiency_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        currentFuelSupply_ = in.readFloat16();

        if (in.readBool())
        {
            auxConsumption_ = in.readFloat16();
        }

        normalConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve(in);

        if (in.readBool())
        {
            trafficConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve(in);
        }

        if (in.readBool())
        {
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        currentFuelSupply_ = in.readFloat16();

        if (in.readBool())
        {
            auxConsumption_ = in.readFloat16();
        }

        normalConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve(zserioContext.getNormalConsumption(), in);

        if (in.readBool())
        {
            trafficConsumption_ = new nds.core.vehicle.CombustionConsumptionCurve(zserioContext.getTrafficConsumption(), in);
        }

        if (in.readBool())
        {
            efficiency_ = new nds.core.vehicle.ConsumptionEfficiency(zserioContext.getEfficiency(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition = normalConsumption_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition = trafficConsumption_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition = efficiency_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 1;
        if (isAuxConsumptionUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition = normalConsumption_.initializeOffsets(zserioContext.getNormalConsumption(), endBitPosition);
        endBitPosition += 1;
        if (isTrafficConsumptionUsed())
        {
            endBitPosition = trafficConsumption_.initializeOffsets(zserioContext.getTrafficConsumption(), endBitPosition);
        }
        endBitPosition += 1;
        if (isEfficiencyUsed())
        {
            endBitPosition = efficiency_.initializeOffsets(zserioContext.getEfficiency(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeFloat16(currentFuelSupply_);

        if (isAuxConsumptionUsed())
        {
            out.writeBool(true);
            out.writeFloat16(auxConsumption_);
        }
        else
        {
            out.writeBool(false);
        }

        normalConsumption_.write(out);

        if (isTrafficConsumptionUsed())
        {
            out.writeBool(true);
            trafficConsumption_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isEfficiencyUsed())
        {
            out.writeBool(true);
            efficiency_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeFloat16(currentFuelSupply_);

        if (isAuxConsumptionUsed())
        {
            out.writeBool(true);
            out.writeFloat16(auxConsumption_);
        }
        else
        {
            out.writeBool(false);
        }

        normalConsumption_.write(zserioContext.getNormalConsumption(), out);

        if (isTrafficConsumptionUsed())
        {
            out.writeBool(true);
            trafficConsumption_.write(zserioContext.getTrafficConsumption(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isEfficiencyUsed())
        {
            out.writeBool(true);
            efficiency_.write(zserioContext.getEfficiency(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private float currentFuelSupply_;
    private java.lang.Float auxConsumption_;
    private nds.core.vehicle.CombustionConsumptionCurve normalConsumption_;
    private nds.core.vehicle.CombustionConsumptionCurve trafficConsumption_;
    private nds.core.vehicle.ConsumptionEfficiency efficiency_;
}
