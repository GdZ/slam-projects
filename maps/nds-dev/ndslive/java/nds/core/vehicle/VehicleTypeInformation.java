/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class VehicleTypeInformation implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            frequentlyUsedVehicles_ = new zserio.runtime.array.DeltaContext();
            bigVehicles_ = new zserio.runtime.array.DeltaContext();
            publicServiceVehicles_ = new zserio.runtime.array.DeltaContext();
            slowRoadUsers_ = new zserio.runtime.array.DeltaContext();
            emergencyMilitaryDetails_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getFrequentlyUsedVehicles()
        {
            return frequentlyUsedVehicles_;
        }

        public zserio.runtime.array.DeltaContext getBigVehicles()
        {
            return bigVehicles_;
        }

        public zserio.runtime.array.DeltaContext getPublicServiceVehicles()
        {
            return publicServiceVehicles_;
        }

        public zserio.runtime.array.DeltaContext getSlowRoadUsers()
        {
            return slowRoadUsers_;
        }

        public zserio.runtime.array.DeltaContext getEmergencyMilitaryDetails()
        {
            return emergencyMilitaryDetails_;
        }

        private zserio.runtime.array.DeltaContext frequentlyUsedVehicles_;
        private zserio.runtime.array.DeltaContext bigVehicles_;
        private zserio.runtime.array.DeltaContext publicServiceVehicles_;
        private zserio.runtime.array.DeltaContext slowRoadUsers_;
        private zserio.runtime.array.DeltaContext emergencyMilitaryDetails_;
    };

    public VehicleTypeInformation()
    {
    }

    public VehicleTypeInformation(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public VehicleTypeInformation(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public VehicleTypeInformation(
            nds.core.vehicle.FrequentlyUsedVehicleTypes frequentlyUsedVehicles_,
            nds.core.vehicle.BigVehicleTypes bigVehicles_,
            nds.core.vehicle.PublicServiceVehicleTypes publicServiceVehicles_,
            nds.core.vehicle.SlowRoadUserTypes slowRoadUsers_,
            nds.core.vehicle.EmergencyMilitaryDetailTypes emergencyMilitaryDetails_)
    {
        setFrequentlyUsedVehicles(frequentlyUsedVehicles_);
        setBigVehicles(bigVehicles_);
        setPublicServiceVehicles(publicServiceVehicles_);
        setSlowRoadUsers(slowRoadUsers_);
        setEmergencyMilitaryDetails(emergencyMilitaryDetails_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        frequentlyUsedVehicles_.initPackingContext(zserioContext.getFrequentlyUsedVehicles());
        bigVehicles_.initPackingContext(zserioContext.getBigVehicles());
        publicServiceVehicles_.initPackingContext(zserioContext.getPublicServiceVehicles());
        slowRoadUsers_.initPackingContext(zserioContext.getSlowRoadUsers());
        emergencyMilitaryDetails_.initPackingContext(zserioContext.getEmergencyMilitaryDetails());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += frequentlyUsedVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += bigVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += publicServiceVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += slowRoadUsers_.bitSizeOf(endBitPosition);
        endBitPosition += emergencyMilitaryDetails_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += frequentlyUsedVehicles_.bitSizeOf(zserioContext.getFrequentlyUsedVehicles(), endBitPosition);
        endBitPosition += bigVehicles_.bitSizeOf(zserioContext.getBigVehicles(), endBitPosition);
        endBitPosition += publicServiceVehicles_.bitSizeOf(zserioContext.getPublicServiceVehicles(), endBitPosition);
        endBitPosition += slowRoadUsers_.bitSizeOf(zserioContext.getSlowRoadUsers(), endBitPosition);
        endBitPosition += emergencyMilitaryDetails_.bitSizeOf(zserioContext.getEmergencyMilitaryDetails(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.vehicle.FrequentlyUsedVehicleTypes getFrequentlyUsedVehicles()
    {
        return frequentlyUsedVehicles_;
    }

    public void setFrequentlyUsedVehicles(nds.core.vehicle.FrequentlyUsedVehicleTypes frequentlyUsedVehicles_)
    {
        this.frequentlyUsedVehicles_ = frequentlyUsedVehicles_;
    }

    public nds.core.vehicle.BigVehicleTypes getBigVehicles()
    {
        return bigVehicles_;
    }

    public void setBigVehicles(nds.core.vehicle.BigVehicleTypes bigVehicles_)
    {
        this.bigVehicles_ = bigVehicles_;
    }

    public nds.core.vehicle.PublicServiceVehicleTypes getPublicServiceVehicles()
    {
        return publicServiceVehicles_;
    }

    public void setPublicServiceVehicles(nds.core.vehicle.PublicServiceVehicleTypes publicServiceVehicles_)
    {
        this.publicServiceVehicles_ = publicServiceVehicles_;
    }

    public nds.core.vehicle.SlowRoadUserTypes getSlowRoadUsers()
    {
        return slowRoadUsers_;
    }

    public void setSlowRoadUsers(nds.core.vehicle.SlowRoadUserTypes slowRoadUsers_)
    {
        this.slowRoadUsers_ = slowRoadUsers_;
    }

    public nds.core.vehicle.EmergencyMilitaryDetailTypes getEmergencyMilitaryDetails()
    {
        return emergencyMilitaryDetails_;
    }

    public void setEmergencyMilitaryDetails(nds.core.vehicle.EmergencyMilitaryDetailTypes emergencyMilitaryDetails_)
    {
        this.emergencyMilitaryDetails_ = emergencyMilitaryDetails_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof VehicleTypeInformation)
        {
            final VehicleTypeInformation that = (VehicleTypeInformation)obj;

            return
                    ((frequentlyUsedVehicles_ == null) ? that.frequentlyUsedVehicles_ == null : frequentlyUsedVehicles_.equals(that.frequentlyUsedVehicles_)) &&
                    ((bigVehicles_ == null) ? that.bigVehicles_ == null : bigVehicles_.equals(that.bigVehicles_)) &&
                    ((publicServiceVehicles_ == null) ? that.publicServiceVehicles_ == null : publicServiceVehicles_.equals(that.publicServiceVehicles_)) &&
                    ((slowRoadUsers_ == null) ? that.slowRoadUsers_ == null : slowRoadUsers_.equals(that.slowRoadUsers_)) &&
                    ((emergencyMilitaryDetails_ == null) ? that.emergencyMilitaryDetails_ == null : emergencyMilitaryDetails_.equals(that.emergencyMilitaryDetails_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, frequentlyUsedVehicles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, bigVehicles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, publicServiceVehicles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, slowRoadUsers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, emergencyMilitaryDetails_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        frequentlyUsedVehicles_ = new nds.core.vehicle.FrequentlyUsedVehicleTypes(in);

        bigVehicles_ = new nds.core.vehicle.BigVehicleTypes(in);

        publicServiceVehicles_ = new nds.core.vehicle.PublicServiceVehicleTypes(in);

        slowRoadUsers_ = new nds.core.vehicle.SlowRoadUserTypes(in);

        emergencyMilitaryDetails_ = new nds.core.vehicle.EmergencyMilitaryDetailTypes(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        frequentlyUsedVehicles_ = new nds.core.vehicle.FrequentlyUsedVehicleTypes(zserioContext.getFrequentlyUsedVehicles(), in);

        bigVehicles_ = new nds.core.vehicle.BigVehicleTypes(zserioContext.getBigVehicles(), in);

        publicServiceVehicles_ = new nds.core.vehicle.PublicServiceVehicleTypes(zserioContext.getPublicServiceVehicles(), in);

        slowRoadUsers_ = new nds.core.vehicle.SlowRoadUserTypes(zserioContext.getSlowRoadUsers(), in);

        emergencyMilitaryDetails_ = new nds.core.vehicle.EmergencyMilitaryDetailTypes(zserioContext.getEmergencyMilitaryDetails(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += frequentlyUsedVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += bigVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += publicServiceVehicles_.bitSizeOf(endBitPosition);
        endBitPosition += slowRoadUsers_.bitSizeOf(endBitPosition);
        endBitPosition += emergencyMilitaryDetails_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = frequentlyUsedVehicles_.initializeOffsets(zserioContext.getFrequentlyUsedVehicles(), endBitPosition);
        endBitPosition = bigVehicles_.initializeOffsets(zserioContext.getBigVehicles(), endBitPosition);
        endBitPosition = publicServiceVehicles_.initializeOffsets(zserioContext.getPublicServiceVehicles(), endBitPosition);
        endBitPosition = slowRoadUsers_.initializeOffsets(zserioContext.getSlowRoadUsers(), endBitPosition);
        endBitPosition = emergencyMilitaryDetails_.initializeOffsets(zserioContext.getEmergencyMilitaryDetails(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        frequentlyUsedVehicles_.write(out);

        bigVehicles_.write(out);

        publicServiceVehicles_.write(out);

        slowRoadUsers_.write(out);

        emergencyMilitaryDetails_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        frequentlyUsedVehicles_.write(zserioContext.getFrequentlyUsedVehicles(), out);

        bigVehicles_.write(zserioContext.getBigVehicles(), out);

        publicServiceVehicles_.write(zserioContext.getPublicServiceVehicles(), out);

        slowRoadUsers_.write(zserioContext.getSlowRoadUsers(), out);

        emergencyMilitaryDetails_.write(zserioContext.getEmergencyMilitaryDetails(), out);
    }

    private nds.core.vehicle.FrequentlyUsedVehicleTypes frequentlyUsedVehicles_;
    private nds.core.vehicle.BigVehicleTypes bigVehicles_;
    private nds.core.vehicle.PublicServiceVehicleTypes publicServiceVehicles_;
    private nds.core.vehicle.SlowRoadUserTypes slowRoadUsers_;
    private nds.core.vehicle.EmergencyMilitaryDetailTypes emergencyMilitaryDetails_;
}
