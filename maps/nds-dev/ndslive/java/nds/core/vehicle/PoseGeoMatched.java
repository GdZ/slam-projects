/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class PoseGeoMatched implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            coordinate_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            elevation_ = new zserio.runtime.array.DeltaContext();
            zLevel_ = new zserio.runtime.array.DeltaContext();
            frc_ = new zserio.runtime.array.DeltaContext();
            heading_ = new zserio.runtime.array.DeltaContext();
            speed_ = new zserio.runtime.array.DeltaContext();
            probability_ = new nds.core.vehicle.MatchProbability.ZserioPackingContext();
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getCoordinate()
        {
            return coordinate_;
        }

        public zserio.runtime.array.DeltaContext getElevation()
        {
            return elevation_;
        }

        public zserio.runtime.array.DeltaContext getZLevel()
        {
            return zLevel_;
        }

        public zserio.runtime.array.DeltaContext getFrc()
        {
            return frc_;
        }

        public zserio.runtime.array.DeltaContext getHeading()
        {
            return heading_;
        }

        public zserio.runtime.array.DeltaContext getSpeed()
        {
            return speed_;
        }

        public nds.core.vehicle.MatchProbability.ZserioPackingContext getProbability()
        {
            return probability_;
        }

        private nds.core.geometry.Position2D.ZserioPackingContext coordinate_;
        private zserio.runtime.array.DeltaContext elevation_;
        private zserio.runtime.array.DeltaContext zLevel_;
        private zserio.runtime.array.DeltaContext frc_;
        private zserio.runtime.array.DeltaContext heading_;
        private zserio.runtime.array.DeltaContext speed_;
        private nds.core.vehicle.MatchProbability.ZserioPackingContext probability_;
    };

    public PoseGeoMatched()
    {
    }

    public PoseGeoMatched(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoseGeoMatched(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoseGeoMatched(
            nds.core.geometry.Position2D coordinate_,
            java.lang.Integer elevation_,
            java.lang.Byte zLevel_,
            java.lang.Byte frc_,
            java.lang.Short heading_,
            java.lang.Short speed_,
            nds.core.vehicle.MatchProbability probability_)
    {
        setCoordinate(coordinate_);
        setElevation(elevation_);
        setZLevel(zLevel_);
        setFrc(frc_);
        setHeading(heading_);
        setSpeed(speed_);
        setProbability(probability_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        coordinate_.initPackingContext(zserioContext.getCoordinate());
        if (isElevationUsed())
        {
            zserioContext.getElevation().init(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        if (isZLevelUsed())
        {
            zserioContext.getZLevel().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        }
        if (isFrcUsed())
        {
            zserioContext.getFrc().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        if (isHeadingUsed())
        {
            zserioContext.getHeading().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        if (isSpeedUsed())
        {
            zserioContext.getSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        if (isProbabilityUsed())
        {
            probability_.initPackingContext(zserioContext.getProbability());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += coordinate_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(elevation_);
        }
        endBitPosition += 1;
        if (isZLevelUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += 3;
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition += probability_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += coordinate_.bitSizeOf(zserioContext.getCoordinate(), endBitPosition);
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserioContext.getElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        endBitPosition += 1;
        if (isZLevelUsed())
        {
            endBitPosition += zserioContext.getZLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        }
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += zserioContext.getFrc().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition += probability_.bitSizeOf(zserioContext.getProbability(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.geometry.Position2D getCoordinate()
    {
        return coordinate_;
    }

    public void setCoordinate(nds.core.geometry.Position2D coordinate_)
    {
        this.coordinate_ = coordinate_;
    }

    public java.lang.Integer getElevation()
    {
        return elevation_;
    }

    public void setElevation(java.lang.Integer elevation_)
    {
        this.elevation_ = elevation_;
    }

    public boolean isElevationUsed()
    {
        return isElevationSet();
    }

    public boolean isElevationSet()
    {
        return (elevation_ != null);
    }

    public void resetElevation()
    {
        this.elevation_ = null;
    }

    public java.lang.Byte getZLevel()
    {
        return zLevel_;
    }

    public void setZLevel(java.lang.Byte zLevel_)
    {
        this.zLevel_ = zLevel_;
    }

    public boolean isZLevelUsed()
    {
        return isZLevelSet();
    }

    public boolean isZLevelSet()
    {
        return (zLevel_ != null);
    }

    public void resetZLevel()
    {
        this.zLevel_ = null;
    }

    public java.lang.Byte getFrc()
    {
        return frc_;
    }

    public void setFrc(java.lang.Byte frc_)
    {
        this.frc_ = frc_;
    }

    public boolean isFrcUsed()
    {
        return isFrcSet();
    }

    public boolean isFrcSet()
    {
        return (frc_ != null);
    }

    public void resetFrc()
    {
        this.frc_ = null;
    }

    public java.lang.Short getHeading()
    {
        return heading_;
    }

    public void setHeading(java.lang.Short heading_)
    {
        this.heading_ = heading_;
    }

    public boolean isHeadingUsed()
    {
        return isHeadingSet();
    }

    public boolean isHeadingSet()
    {
        return (heading_ != null);
    }

    public void resetHeading()
    {
        this.heading_ = null;
    }

    public java.lang.Short getSpeed()
    {
        return speed_;
    }

    public void setSpeed(java.lang.Short speed_)
    {
        this.speed_ = speed_;
    }

    public boolean isSpeedUsed()
    {
        return isSpeedSet();
    }

    public boolean isSpeedSet()
    {
        return (speed_ != null);
    }

    public void resetSpeed()
    {
        this.speed_ = null;
    }

    public nds.core.vehicle.MatchProbability getProbability()
    {
        return probability_;
    }

    public void setProbability(nds.core.vehicle.MatchProbability probability_)
    {
        this.probability_ = probability_;
    }

    public boolean isProbabilityUsed()
    {
        return isProbabilitySet();
    }

    public boolean isProbabilitySet()
    {
        return (probability_ != null);
    }

    public void resetProbability()
    {
        this.probability_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoseGeoMatched)
        {
            final PoseGeoMatched that = (PoseGeoMatched)obj;

            return
                    ((coordinate_ == null) ? that.coordinate_ == null : coordinate_.equals(that.coordinate_)) &&
                    ((!isElevationUsed()) ? !that.isElevationUsed() :
                        ((elevation_ == null) ? that.elevation_ == null : elevation_.equals(that.elevation_))) &&
                    ((!isZLevelUsed()) ? !that.isZLevelUsed() :
                        ((zLevel_ == null) ? that.zLevel_ == null : zLevel_.equals(that.zLevel_))) &&
                    ((!isFrcUsed()) ? !that.isFrcUsed() :
                        ((frc_ == null) ? that.frc_ == null : frc_.equals(that.frc_))) &&
                    ((!isHeadingUsed()) ? !that.isHeadingUsed() :
                        ((heading_ == null) ? that.heading_ == null : heading_.equals(that.heading_))) &&
                    ((!isSpeedUsed()) ? !that.isSpeedUsed() :
                        ((speed_ == null) ? that.speed_ == null : speed_.equals(that.speed_))) &&
                    ((!isProbabilityUsed()) ? !that.isProbabilityUsed() :
                        ((probability_ == null) ? that.probability_ == null : probability_.equals(that.probability_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coordinate_);
        if (isElevationUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, elevation_);
        if (isZLevelUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, zLevel_);
        if (isFrcUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, frc_);
        if (isHeadingUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, heading_);
        if (isSpeedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, speed_);
        if (isProbabilityUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, probability_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        coordinate_ = new nds.core.geometry.Position2D(in, (byte)(0));

        if (in.readBool())
        {
            elevation_ = in.readVarInt32();
        }

        if (in.readBool())
        {
            zLevel_ = in.readByte();
        }

        if (in.readBool())
        {
            frc_ = (byte)in.readBits(3);
        }

        if (in.readBool())
        {
            heading_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            speed_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            probability_ = new nds.core.vehicle.MatchProbability(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        coordinate_ = new nds.core.geometry.Position2D(zserioContext.getCoordinate(), in, (byte)(0));

        if (in.readBool())
        {
            elevation_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getElevation().read(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            zLevel_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getZLevel().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            frc_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getFrc().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), in)).get();
        }

        if (in.readBool())
        {
            heading_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getHeading().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            speed_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            probability_ = new nds.core.vehicle.MatchProbability(zserioContext.getProbability(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = coordinate_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(elevation_);
        }
        endBitPosition += 1;
        if (isZLevelUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += 3;
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition = probability_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = coordinate_.initializeOffsets(zserioContext.getCoordinate(), endBitPosition);
        endBitPosition += 1;
        if (isElevationUsed())
        {
            endBitPosition += zserioContext.getElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        endBitPosition += 1;
        if (isZLevelUsed())
        {
            endBitPosition += zserioContext.getZLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        }
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += zserioContext.getFrc().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition = probability_.initializeOffsets(zserioContext.getProbability(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (coordinate_.getShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field PoseGeoMatched.coordinate: " +
                    coordinate_.getShift() + " != " + (byte)(0) + "!");
        }
        coordinate_.write(out);

        if (isElevationUsed())
        {
            out.writeBool(true);
            out.writeVarInt32(elevation_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isZLevelUsed())
        {
            out.writeBool(true);
            out.writeByte(zLevel_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isFrcUsed())
        {
            out.writeBool(true);
            out.writeBits(frc_, 3);
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(heading_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(speed_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isProbabilityUsed())
        {
            out.writeBool(true);
            probability_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        coordinate_.write(zserioContext.getCoordinate(), out);

        if (isElevationUsed())
        {
            out.writeBool(true);
            zserioContext.getElevation().write(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(elevation_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isZLevelUsed())
        {
            out.writeBool(true);
            zserioContext.getZLevel().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isFrcUsed())
        {
            out.writeBool(true);
            zserioContext.getFrc().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            zserioContext.getHeading().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            zserioContext.getSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isProbabilityUsed())
        {
            out.writeBool(true);
            probability_.write(zserioContext.getProbability(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.core.geometry.Position2D coordinate_;
    private java.lang.Integer elevation_;
    private java.lang.Byte zLevel_;
    private java.lang.Byte frc_;
    private java.lang.Short heading_;
    private java.lang.Short speed_;
    private nds.core.vehicle.MatchProbability probability_;
}
