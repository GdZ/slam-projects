/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.vehicle;

public class VehicleClassSpecification implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            engine_ = new nds.core.vehicle.Engine.ZserioPackingContext();
            equipment_ = new zserio.runtime.array.DeltaContext();
            maxDimensions_ = new nds.core.vehicle.VehicleDimensions.ZserioPackingContext();
            minDimensions_ = new nds.core.vehicle.VehicleDimensions.ZserioPackingContext();
            load_ = new zserio.runtime.array.DeltaContext();
            axles_ = new nds.core.vehicle.AxleDetails.ZserioPackingContext();
            assistFunctions_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.vehicle.Engine.ZserioPackingContext getEngine()
        {
            return engine_;
        }

        public zserio.runtime.array.DeltaContext getEquipment()
        {
            return equipment_;
        }

        public nds.core.vehicle.VehicleDimensions.ZserioPackingContext getMaxDimensions()
        {
            return maxDimensions_;
        }

        public nds.core.vehicle.VehicleDimensions.ZserioPackingContext getMinDimensions()
        {
            return minDimensions_;
        }

        public zserio.runtime.array.DeltaContext getLoad()
        {
            return load_;
        }

        public nds.core.vehicle.AxleDetails.ZserioPackingContext getAxles()
        {
            return axles_;
        }

        public zserio.runtime.array.DeltaContext getAssistFunctions()
        {
            return assistFunctions_;
        }

        private nds.core.vehicle.Engine.ZserioPackingContext engine_;
        private zserio.runtime.array.DeltaContext equipment_;
        private nds.core.vehicle.VehicleDimensions.ZserioPackingContext maxDimensions_;
        private nds.core.vehicle.VehicleDimensions.ZserioPackingContext minDimensions_;
        private zserio.runtime.array.DeltaContext load_;
        private nds.core.vehicle.AxleDetails.ZserioPackingContext axles_;
        private zserio.runtime.array.DeltaContext assistFunctions_;
    };

    public VehicleClassSpecification()
    {
    }

    public VehicleClassSpecification(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public VehicleClassSpecification(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public VehicleClassSpecification(
            nds.core.vehicle.Engine engine_,
            nds.core.vehicle.Equipment equipment_,
            nds.core.vehicle.VehicleDimensions maxDimensions_,
            nds.core.vehicle.VehicleDimensions minDimensions_,
            nds.core.vehicle.LoadType load_,
            nds.core.vehicle.AxleDetails axles_,
            nds.core.vehicle.DriverAssistFunctions assistFunctions_)
    {
        setEngine(engine_);
        setEquipment(equipment_);
        setMaxDimensions(maxDimensions_);
        setMinDimensions(minDimensions_);
        setLoad(load_);
        setAxles(axles_);
        setAssistFunctions(assistFunctions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        engine_.initPackingContext(zserioContext.getEngine());
        equipment_.initPackingContext(zserioContext.getEquipment());
        maxDimensions_.initPackingContext(zserioContext.getMaxDimensions());
        minDimensions_.initPackingContext(zserioContext.getMinDimensions());
        load_.initPackingContext(zserioContext.getLoad());
        axles_.initPackingContext(zserioContext.getAxles());
        assistFunctions_.initPackingContext(zserioContext.getAssistFunctions());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += engine_.bitSizeOf(endBitPosition);
        endBitPosition += equipment_.bitSizeOf(endBitPosition);
        endBitPosition += maxDimensions_.bitSizeOf(endBitPosition);
        endBitPosition += minDimensions_.bitSizeOf(endBitPosition);
        endBitPosition += load_.bitSizeOf(endBitPosition);
        endBitPosition += axles_.bitSizeOf(endBitPosition);
        endBitPosition += assistFunctions_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += engine_.bitSizeOf(zserioContext.getEngine(), endBitPosition);
        endBitPosition += equipment_.bitSizeOf(zserioContext.getEquipment(), endBitPosition);
        endBitPosition += maxDimensions_.bitSizeOf(zserioContext.getMaxDimensions(), endBitPosition);
        endBitPosition += minDimensions_.bitSizeOf(zserioContext.getMinDimensions(), endBitPosition);
        endBitPosition += load_.bitSizeOf(zserioContext.getLoad(), endBitPosition);
        endBitPosition += axles_.bitSizeOf(zserioContext.getAxles(), endBitPosition);
        endBitPosition += assistFunctions_.bitSizeOf(zserioContext.getAssistFunctions(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.vehicle.Engine getEngine()
    {
        return engine_;
    }

    public void setEngine(nds.core.vehicle.Engine engine_)
    {
        this.engine_ = engine_;
    }

    public nds.core.vehicle.Equipment getEquipment()
    {
        return equipment_;
    }

    public void setEquipment(nds.core.vehicle.Equipment equipment_)
    {
        this.equipment_ = equipment_;
    }

    public nds.core.vehicle.VehicleDimensions getMaxDimensions()
    {
        return maxDimensions_;
    }

    public void setMaxDimensions(nds.core.vehicle.VehicleDimensions maxDimensions_)
    {
        this.maxDimensions_ = maxDimensions_;
    }

    public nds.core.vehicle.VehicleDimensions getMinDimensions()
    {
        return minDimensions_;
    }

    public void setMinDimensions(nds.core.vehicle.VehicleDimensions minDimensions_)
    {
        this.minDimensions_ = minDimensions_;
    }

    public nds.core.vehicle.LoadType getLoad()
    {
        return load_;
    }

    public void setLoad(nds.core.vehicle.LoadType load_)
    {
        this.load_ = load_;
    }

    public nds.core.vehicle.AxleDetails getAxles()
    {
        return axles_;
    }

    public void setAxles(nds.core.vehicle.AxleDetails axles_)
    {
        this.axles_ = axles_;
    }

    public nds.core.vehicle.DriverAssistFunctions getAssistFunctions()
    {
        return assistFunctions_;
    }

    public void setAssistFunctions(nds.core.vehicle.DriverAssistFunctions assistFunctions_)
    {
        this.assistFunctions_ = assistFunctions_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof VehicleClassSpecification)
        {
            final VehicleClassSpecification that = (VehicleClassSpecification)obj;

            return
                    ((engine_ == null) ? that.engine_ == null : engine_.equals(that.engine_)) &&
                    ((equipment_ == null) ? that.equipment_ == null : equipment_.equals(that.equipment_)) &&
                    ((maxDimensions_ == null) ? that.maxDimensions_ == null : maxDimensions_.equals(that.maxDimensions_)) &&
                    ((minDimensions_ == null) ? that.minDimensions_ == null : minDimensions_.equals(that.minDimensions_)) &&
                    ((load_ == null) ? that.load_ == null : load_.equals(that.load_)) &&
                    ((axles_ == null) ? that.axles_ == null : axles_.equals(that.axles_)) &&
                    ((assistFunctions_ == null) ? that.assistFunctions_ == null : assistFunctions_.equals(that.assistFunctions_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, engine_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, equipment_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxDimensions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, minDimensions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, load_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, axles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, assistFunctions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        engine_ = new nds.core.vehicle.Engine(in);

        equipment_ = new nds.core.vehicle.Equipment(in);

        maxDimensions_ = new nds.core.vehicle.VehicleDimensions(in);

        minDimensions_ = new nds.core.vehicle.VehicleDimensions(in);

        load_ = new nds.core.vehicle.LoadType(in);

        axles_ = new nds.core.vehicle.AxleDetails(in);

        assistFunctions_ = new nds.core.vehicle.DriverAssistFunctions(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        engine_ = new nds.core.vehicle.Engine(zserioContext.getEngine(), in);

        equipment_ = new nds.core.vehicle.Equipment(zserioContext.getEquipment(), in);

        maxDimensions_ = new nds.core.vehicle.VehicleDimensions(zserioContext.getMaxDimensions(), in);

        minDimensions_ = new nds.core.vehicle.VehicleDimensions(zserioContext.getMinDimensions(), in);

        load_ = new nds.core.vehicle.LoadType(zserioContext.getLoad(), in);

        axles_ = new nds.core.vehicle.AxleDetails(zserioContext.getAxles(), in);

        assistFunctions_ = new nds.core.vehicle.DriverAssistFunctions(zserioContext.getAssistFunctions(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = engine_.initializeOffsets(endBitPosition);
        endBitPosition += equipment_.bitSizeOf(endBitPosition);
        endBitPosition = maxDimensions_.initializeOffsets(endBitPosition);
        endBitPosition = minDimensions_.initializeOffsets(endBitPosition);
        endBitPosition += load_.bitSizeOf(endBitPosition);
        endBitPosition = axles_.initializeOffsets(endBitPosition);
        endBitPosition += assistFunctions_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = engine_.initializeOffsets(zserioContext.getEngine(), endBitPosition);
        endBitPosition = equipment_.initializeOffsets(zserioContext.getEquipment(), endBitPosition);
        endBitPosition = maxDimensions_.initializeOffsets(zserioContext.getMaxDimensions(), endBitPosition);
        endBitPosition = minDimensions_.initializeOffsets(zserioContext.getMinDimensions(), endBitPosition);
        endBitPosition = load_.initializeOffsets(zserioContext.getLoad(), endBitPosition);
        endBitPosition = axles_.initializeOffsets(zserioContext.getAxles(), endBitPosition);
        endBitPosition = assistFunctions_.initializeOffsets(zserioContext.getAssistFunctions(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        engine_.write(out);

        equipment_.write(out);

        maxDimensions_.write(out);

        minDimensions_.write(out);

        load_.write(out);

        axles_.write(out);

        assistFunctions_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        engine_.write(zserioContext.getEngine(), out);

        equipment_.write(zserioContext.getEquipment(), out);

        maxDimensions_.write(zserioContext.getMaxDimensions(), out);

        minDimensions_.write(zserioContext.getMinDimensions(), out);

        load_.write(zserioContext.getLoad(), out);

        axles_.write(zserioContext.getAxles(), out);

        assistFunctions_.write(zserioContext.getAssistFunctions(), out);
    }

    private nds.core.vehicle.Engine engine_;
    private nds.core.vehicle.Equipment equipment_;
    private nds.core.vehicle.VehicleDimensions maxDimensions_;
    private nds.core.vehicle.VehicleDimensions minDimensions_;
    private nds.core.vehicle.LoadType load_;
    private nds.core.vehicle.AxleDetails axles_;
    private nds.core.vehicle.DriverAssistFunctions assistFunctions_;
}
