/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.icons;

public class IconSetReferenceWithHeading implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            iconSetReference_ = new zserio.runtime.array.DeltaContext();
            iconHeading_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getIconSetReference()
        {
            return iconSetReference_;
        }

        public zserio.runtime.array.DeltaContext getIconHeading()
        {
            return iconHeading_;
        }

        private zserio.runtime.array.DeltaContext iconSetReference_;
        private zserio.runtime.array.DeltaContext iconHeading_;
    };

    public IconSetReferenceWithHeading()
    {
    }

    public IconSetReferenceWithHeading(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public IconSetReferenceWithHeading(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public IconSetReferenceWithHeading(
            java.math.BigInteger iconSetReference_,
            short iconHeading_)
    {
        setIconSetReference(iconSetReference_);
        setIconHeading(iconHeading_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIconSetReference().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        zserioContext.getIconHeading().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconHeading_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetReference_);
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        endBitPosition += zserioContext.getIconHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconHeading_));

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getIconSetReference()
    {
        return iconSetReference_;
    }

    public void setIconSetReference(java.math.BigInteger iconSetReference_)
    {
        this.iconSetReference_ = iconSetReference_;
    }

    public short getIconHeading()
    {
        return iconHeading_;
    }

    public void setIconHeading(short iconHeading_)
    {
        this.iconHeading_ = iconHeading_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IconSetReferenceWithHeading)
        {
            final IconSetReferenceWithHeading that = (IconSetReferenceWithHeading)obj;

            return
                    ((iconSetReference_ == null) ? that.iconSetReference_ == null : iconSetReference_.equals(that.iconSetReference_)) &&
                    iconHeading_ == that.iconHeading_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconSetReference_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconHeading_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        iconSetReference_ = in.readVarUInt();

        iconHeading_ = in.readUnsignedByte();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        iconSetReference_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getIconSetReference().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        iconHeading_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getIconHeading().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetReference_);
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        endBitPosition += zserioContext.getIconHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconHeading_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(iconSetReference_);

        out.writeUnsignedByte(iconHeading_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIconSetReference().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));

        zserioContext.getIconHeading().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconHeading_));
    }

    private java.math.BigInteger iconSetReference_;
    private short iconHeading_;
}
