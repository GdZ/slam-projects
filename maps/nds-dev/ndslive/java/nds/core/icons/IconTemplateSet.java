/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.icons;

public class IconTemplateSet implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            templateSetId_ = new zserio.runtime.array.DeltaContext();
            numIcons_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getTemplateSetId()
        {
            return templateSetId_;
        }

        public zserio.runtime.array.DeltaContext getNumIcons()
        {
            return numIcons_;
        }

        private zserio.runtime.array.DeltaContext templateSetId_;
        private zserio.runtime.array.DeltaContext numIcons_;
    };

    public IconTemplateSet()
    {
    }

    public IconTemplateSet(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public IconTemplateSet(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public IconTemplateSet(
            short templateSetId_,
            int numIcons_,
            nds.core.icons.IconUsageType[] usageType_,
            byte[] drawingLayer_,
            nds.core.icons.ImageAnchorPos[] templateConnectionPoint_,
            int[] iconId_)
    {
        setTemplateSetId(templateSetId_);
        setNumIcons(numIcons_);
        setUsageType(usageType_);
        setDrawingLayer(drawingLayer_);
        setTemplateConnectionPoint(templateConnectionPoint_);
        setIconId(iconId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTemplateSetId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(templateSetId_));
        zserioContext.getNumIcons().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(templateSetId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numIcons_);
        endBitPosition += usageType_.bitSizeOf(endBitPosition);
        endBitPosition += drawingLayer_.bitSizeOf(endBitPosition);
        endBitPosition += templateConnectionPoint_.bitSizeOf(endBitPosition);
        endBitPosition += iconId_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTemplateSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(templateSetId_));
        endBitPosition += zserioContext.getNumIcons().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
        endBitPosition += usageType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += drawingLayer_.bitSizeOfPacked(endBitPosition);
        endBitPosition += templateConnectionPoint_.bitSizeOfPacked(endBitPosition);
        endBitPosition += iconId_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getTemplateSetId()
    {
        return templateSetId_;
    }

    public void setTemplateSetId(short templateSetId_)
    {
        this.templateSetId_ = templateSetId_;
    }

    public int getNumIcons()
    {
        return numIcons_;
    }

    public void setNumIcons(int numIcons_)
    {
        this.numIcons_ = numIcons_;
    }

    public nds.core.icons.IconUsageType[] getUsageType()
    {
        return (usageType_ == null) ? null : usageType_.getRawArray();
    }

    public void setUsageType(nds.core.icons.IconUsageType[] usageType_)
    {
        this.usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class, usageType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public byte[] getDrawingLayer()
    {
        return (drawingLayer_ == null) ? null : drawingLayer_.getRawArray();
    }

    public void setDrawingLayer(byte[] drawingLayer_)
    {
        this.drawingLayer_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ByteRawArray(drawingLayer_),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.icons.ImageAnchorPos[] getTemplateConnectionPoint()
    {
        return (templateConnectionPoint_ == null) ? null : templateConnectionPoint_.getRawArray();
    }

    public void setTemplateConnectionPoint(nds.core.icons.ImageAnchorPos[] templateConnectionPoint_)
    {
        this.templateConnectionPoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.ImageAnchorPos.class, templateConnectionPoint_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.ImageAnchorPos>(new ZserioElementFactory_templateConnectionPoint()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int[] getIconId()
    {
        return (iconId_ == null) ? null : iconId_.getRawArray();
    }

    public void setIconId(int[] iconId_)
    {
        this.iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(iconId_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IconTemplateSet)
        {
            final IconTemplateSet that = (IconTemplateSet)obj;

            return
                    templateSetId_ == that.templateSetId_ &&
                    numIcons_ == that.numIcons_ &&
                    ((usageType_ == null) ? that.usageType_ == null : usageType_.equals(that.usageType_)) &&
                    ((drawingLayer_ == null) ? that.drawingLayer_ == null : drawingLayer_.equals(that.drawingLayer_)) &&
                    ((templateConnectionPoint_ == null) ? that.templateConnectionPoint_ == null : templateConnectionPoint_.equals(that.templateConnectionPoint_)) &&
                    ((iconId_ == null) ? that.iconId_ == null : iconId_.equals(that.iconId_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, templateSetId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numIcons_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, usageType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, drawingLayer_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, templateConnectionPoint_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        templateSetId_ = in.readVarUInt16();

        numIcons_ = in.readVarSize();

        usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
        usageType_.read(in, (int)(getNumIcons()));

        drawingLayer_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ByteRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        drawingLayer_.read(in, (int)(getNumIcons()));

        templateConnectionPoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.ImageAnchorPos.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.ImageAnchorPos>(new ZserioElementFactory_templateConnectionPoint()),
                zserio.runtime.array.ArrayType.NORMAL);
        templateConnectionPoint_.read(in, (int)(getNumIcons()));

        iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconId_.read(in, (int)(getNumIcons()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        templateSetId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getTemplateSetId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        numIcons_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumIcons().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
        usageType_.readPacked(in, (int)(getNumIcons()));

        drawingLayer_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ByteRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        drawingLayer_.readPacked(in, (int)(getNumIcons()));

        templateConnectionPoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.ImageAnchorPos.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.ImageAnchorPos>(new ZserioElementFactory_templateConnectionPoint()),
                zserio.runtime.array.ArrayType.NORMAL);
        templateConnectionPoint_.readPacked(in, (int)(getNumIcons()));

        iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconId_.readPacked(in, (int)(getNumIcons()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(templateSetId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numIcons_);
        endBitPosition = usageType_.initializeOffsets(endBitPosition);
        endBitPosition = drawingLayer_.initializeOffsets(endBitPosition);
        endBitPosition = templateConnectionPoint_.initializeOffsets(endBitPosition);
        endBitPosition = iconId_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTemplateSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(templateSetId_));
        endBitPosition += zserioContext.getNumIcons().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
        endBitPosition = usageType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = drawingLayer_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = templateConnectionPoint_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = iconId_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(templateSetId_);

        out.writeVarSize(numIcons_);

        if (usageType_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.usageType: " +
                    usageType_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        usageType_.write(out);

        if (drawingLayer_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.drawingLayer: " +
                    drawingLayer_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        drawingLayer_.write(out);

        if (templateConnectionPoint_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.templateConnectionPoint: " +
                    templateConnectionPoint_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        templateConnectionPoint_.write(out);

        if (iconId_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.iconId: " +
                    iconId_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconId_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTemplateSetId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(templateSetId_));

        zserioContext.getNumIcons().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));

        if (usageType_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.usageType: " +
                    usageType_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        usageType_.writePacked(out);

        if (drawingLayer_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.drawingLayer: " +
                    drawingLayer_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        drawingLayer_.writePacked(out);

        if (templateConnectionPoint_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.templateConnectionPoint: " +
                    templateConnectionPoint_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        templateConnectionPoint_.writePacked(out);

        if (iconId_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconTemplateSet.iconId: " +
                    iconId_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconId_.writePacked(out);
    }

    private static final class ZserioElementFactory_usageType implements zserio.runtime.array.PackableElementFactory<nds.core.icons.IconUsageType>
    {
        @Override
        public nds.core.icons.IconUsageType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.icons.IconUsageType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.icons.IconUsageType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.icons.IconUsageType(context, in);
        }
    }

    private static final class ZserioElementFactory_templateConnectionPoint implements zserio.runtime.array.PackableElementFactory<nds.core.icons.ImageAnchorPos>
    {
        @Override
        public nds.core.icons.ImageAnchorPos create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.icons.ImageAnchorPos(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.icons.ImageAnchorPos.ZserioPackingContext();
        }

        @Override
        public nds.core.icons.ImageAnchorPos create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.icons.ImageAnchorPos(context, in);
        }
    }

    private short templateSetId_;
    private int numIcons_;
    private zserio.runtime.array.Array usageType_;
    private zserio.runtime.array.Array drawingLayer_;
    private zserio.runtime.array.Array templateConnectionPoint_;
    private zserio.runtime.array.Array iconId_;
}
