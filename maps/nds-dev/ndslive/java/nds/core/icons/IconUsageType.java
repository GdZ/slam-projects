/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.icons;

public class IconUsageType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public IconUsageType()
    {
        this((long)0);
    }

    public IconUsageType(long value)
    {
        if (value < 0L || value > 144115188075855871L)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'IconUsageType' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public IconUsageType(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt64();
    }

    public IconUsageType(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.LongArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt64ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt64ArrayTraits(),
                new zserio.runtime.array.ArrayElement.LongArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt64(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt64ArrayTraits(),
                new zserio.runtime.array.ArrayElement.LongArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof IconUsageType))
            return false;

        final IconUsageType otherIconUsageType = (IconUsageType)other;
        return value == otherIconUsageType.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(IconUsageType.Values.TWO_D).equals(IconUsageType.Values.TWO_D))
            builder.append(builder.length() == 0 ? "TWO_D" : " | TWO_D");
        if (this.and(IconUsageType.Values.THREE_D).equals(IconUsageType.Values.THREE_D))
            builder.append(builder.length() == 0 ? "THREE_D" : " | THREE_D");
        if (this.and(IconUsageType.Values.NIGHT).equals(IconUsageType.Values.NIGHT))
            builder.append(builder.length() == 0 ? "NIGHT" : " | NIGHT");
        if (this.and(IconUsageType.Values.DAY).equals(IconUsageType.Values.DAY))
            builder.append(builder.length() == 0 ? "DAY" : " | DAY");
        if (this.and(IconUsageType.Values.HIGHLIGHTED).equals(IconUsageType.Values.HIGHLIGHTED))
            builder.append(builder.length() == 0 ? "HIGHLIGHTED" : " | HIGHLIGHTED");
        if (this.and(IconUsageType.Values.MAP).equals(IconUsageType.Values.MAP))
            builder.append(builder.length() == 0 ? "MAP" : " | MAP");
        if (this.and(IconUsageType.Values.LIST).equals(IconUsageType.Values.LIST))
            builder.append(builder.length() == 0 ? "LIST" : " | LIST");
        if (this.and(IconUsageType.Values.STACKED).equals(IconUsageType.Values.STACKED))
            builder.append(builder.length() == 0 ? "STACKED" : " | STACKED");
        if (this.and(IconUsageType.Values.ON_ROUTE).equals(IconUsageType.Values.ON_ROUTE))
            builder.append(builder.length() == 0 ? "ON_ROUTE" : " | ON_ROUTE");
        if (this.and(IconUsageType.Values.OFF_ROUTE).equals(IconUsageType.Values.OFF_ROUTE))
            builder.append(builder.length() == 0 ? "OFF_ROUTE" : " | OFF_ROUTE");
        if (this.and(IconUsageType.Values.GUIDANCE).equals(IconUsageType.Values.GUIDANCE))
            builder.append(builder.length() == 0 ? "GUIDANCE" : " | GUIDANCE");
        if (this.and(IconUsageType.Values.ICD).equals(IconUsageType.Values.ICD))
            builder.append(builder.length() == 0 ? "ICD" : " | ICD");
        if (this.and(IconUsageType.Values.HUD).equals(IconUsageType.Values.HUD))
            builder.append(builder.length() == 0 ? "HUD" : " | HUD");
        if (this.and(IconUsageType.Values.NOT_HIGHLIGHTED).equals(IconUsageType.Values.NOT_HIGHLIGHTED))
            builder.append(builder.length() == 0 ? "NOT_HIGHLIGHTED" : " | NOT_HIGHLIGHTED");
        if (this.and(IconUsageType.Values.NOT_STACKED).equals(IconUsageType.Values.NOT_STACKED))
            builder.append(builder.length() == 0 ? "NOT_STACKED" : " | NOT_STACKED");
        if (this.and(IconUsageType.Values.BUTTON).equals(IconUsageType.Values.BUTTON))
            builder.append(builder.length() == 0 ? "BUTTON" : " | BUTTON");
        if (this.and(IconUsageType.Values.CID).equals(IconUsageType.Values.CID))
            builder.append(builder.length() == 0 ? "CID" : " | CID");
        if (this.and(IconUsageType.Values.IN_FOCUS).equals(IconUsageType.Values.IN_FOCUS))
            builder.append(builder.length() == 0 ? "IN_FOCUS" : " | IN_FOCUS");
        if (this.and(IconUsageType.Values.OUT_OF_FOCUS).equals(IconUsageType.Values.OUT_OF_FOCUS))
            builder.append(builder.length() == 0 ? "OUT_OF_FOCUS" : " | OUT_OF_FOCUS");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt64(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt64ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.LongArrayElement(value));
    }

    public long getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public IconUsageType or(IconUsageType other)
    {
        return new IconUsageType((long)(value | other.value));
    }

    public IconUsageType and(IconUsageType other)
    {
        return new IconUsageType((long)(value & other.value));
    }

    public IconUsageType xor(IconUsageType other)
    {
        return new IconUsageType((long)(value ^ other.value));
    }

    public IconUsageType not()
    {
        return new IconUsageType((long)(~value & 144115188075855871L));
    }

    public static final class Values
    {
        public static final IconUsageType TWO_D = new IconUsageType(1L);
        public static final IconUsageType THREE_D = new IconUsageType(2L);
        public static final IconUsageType NIGHT = new IconUsageType(4L);
        public static final IconUsageType DAY = new IconUsageType(8L);
        public static final IconUsageType HIGHLIGHTED = new IconUsageType(16L);
        public static final IconUsageType MAP = new IconUsageType(32L);
        public static final IconUsageType LIST = new IconUsageType(64L);
        public static final IconUsageType STACKED = new IconUsageType(128L);
        public static final IconUsageType ON_ROUTE = new IconUsageType(256L);
        public static final IconUsageType OFF_ROUTE = new IconUsageType(512L);
        public static final IconUsageType GUIDANCE = new IconUsageType(1024L);
        public static final IconUsageType ICD = new IconUsageType(2048L);
        public static final IconUsageType HUD = new IconUsageType(4096L);
        public static final IconUsageType NOT_HIGHLIGHTED = new IconUsageType(8192L);
        public static final IconUsageType NOT_STACKED = new IconUsageType(16384L);
        public static final IconUsageType BUTTON = new IconUsageType(32768L);
        public static final IconUsageType CID = new IconUsageType(65536L);
        public static final IconUsageType IN_FOCUS = new IconUsageType(131072L);
        public static final IconUsageType OUT_OF_FOCUS = new IconUsageType(262144L);
    }

    private long value;
}
