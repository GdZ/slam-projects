/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.icons;

public class IconSet implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            iconSetId_ = new zserio.runtime.array.DeltaContext();
            scaleRangeId_ = new zserio.runtime.array.DeltaContext();
            numIcons_ = new zserio.runtime.array.DeltaContext();
            iconDrawingPriority_ = new zserio.runtime.array.DeltaContext();
            iconTemplateSetId_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getIconSetId()
        {
            return iconSetId_;
        }

        public zserio.runtime.array.DeltaContext getScaleRangeId()
        {
            return scaleRangeId_;
        }

        public zserio.runtime.array.DeltaContext getNumIcons()
        {
            return numIcons_;
        }

        public zserio.runtime.array.DeltaContext getIconDrawingPriority()
        {
            return iconDrawingPriority_;
        }

        public zserio.runtime.array.DeltaContext getIconTemplateSetId()
        {
            return iconTemplateSetId_;
        }

        private zserio.runtime.array.DeltaContext iconSetId_;
        private zserio.runtime.array.DeltaContext scaleRangeId_;
        private zserio.runtime.array.DeltaContext numIcons_;
        private zserio.runtime.array.DeltaContext iconDrawingPriority_;
        private zserio.runtime.array.DeltaContext iconTemplateSetId_;
    };

    public IconSet()
    {
    }

    public IconSet(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public IconSet(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public IconSet(
            java.math.BigInteger iconSetId_,
            int scaleRangeId_,
            int numIcons_,
            nds.core.icons.IconUsageType[] iconUsage_,
            int[] iconId_,
            nds.core.icons.IconDisplayArrangements[] iconDisplayArrangement_,
            short iconDrawingPriority_,
            java.lang.Short iconTemplateSetId_)
    {
        setIconSetId(iconSetId_);
        setScaleRangeId(scaleRangeId_);
        setNumIcons(numIcons_);
        setIconUsage(iconUsage_);
        setIconId(iconId_);
        setIconDisplayArrangement(iconDisplayArrangement_);
        setIconDrawingPriority(iconDrawingPriority_);
        setIconTemplateSetId(iconTemplateSetId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIconSetId().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetId_));
        zserioContext.getScaleRangeId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(scaleRangeId_));
        zserioContext.getNumIcons().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
        zserioContext.getIconDrawingPriority().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconDrawingPriority_));
        if (isIconTemplateSetIdUsed())
        {
            zserioContext.getIconTemplateSetId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(iconTemplateSetId_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(scaleRangeId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numIcons_);
        endBitPosition += iconUsage_.bitSizeOf(endBitPosition);
        endBitPosition += iconId_.bitSizeOf(endBitPosition);
        endBitPosition += iconDisplayArrangement_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(iconDrawingPriority_);
        endBitPosition += 1;
        if (isIconTemplateSetIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(iconTemplateSetId_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIconSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetId_));
        endBitPosition += zserioContext.getScaleRangeId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(scaleRangeId_));
        endBitPosition += zserioContext.getNumIcons().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
        endBitPosition += iconUsage_.bitSizeOfPacked(endBitPosition);
        endBitPosition += iconId_.bitSizeOfPacked(endBitPosition);
        endBitPosition += iconDisplayArrangement_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getIconDrawingPriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconDrawingPriority_));
        endBitPosition += 1;
        if (isIconTemplateSetIdUsed())
        {
            endBitPosition += zserioContext.getIconTemplateSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(iconTemplateSetId_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getIconSetId()
    {
        return iconSetId_;
    }

    public void setIconSetId(java.math.BigInteger iconSetId_)
    {
        this.iconSetId_ = iconSetId_;
    }

    public int getScaleRangeId()
    {
        return scaleRangeId_;
    }

    public void setScaleRangeId(int scaleRangeId_)
    {
        this.scaleRangeId_ = scaleRangeId_;
    }

    public int getNumIcons()
    {
        return numIcons_;
    }

    public void setNumIcons(int numIcons_)
    {
        this.numIcons_ = numIcons_;
    }

    public nds.core.icons.IconUsageType[] getIconUsage()
    {
        return (iconUsage_ == null) ? null : iconUsage_.getRawArray();
    }

    public void setIconUsage(nds.core.icons.IconUsageType[] iconUsage_)
    {
        this.iconUsage_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class, iconUsage_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_iconUsage()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int[] getIconId()
    {
        return (iconId_ == null) ? null : iconId_.getRawArray();
    }

    public void setIconId(int[] iconId_)
    {
        this.iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(iconId_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.icons.IconDisplayArrangements[] getIconDisplayArrangement()
    {
        return (iconDisplayArrangement_ == null) ? null : iconDisplayArrangement_.getRawArray();
    }

    public void setIconDisplayArrangement(nds.core.icons.IconDisplayArrangements[] iconDisplayArrangement_)
    {
        this.iconDisplayArrangement_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.icons.IconDisplayArrangements.class, iconDisplayArrangement_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconDisplayArrangements>(new ZserioElementFactory_iconDisplayArrangement()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short getIconDrawingPriority()
    {
        return iconDrawingPriority_;
    }

    public void setIconDrawingPriority(short iconDrawingPriority_)
    {
        this.iconDrawingPriority_ = iconDrawingPriority_;
    }

    public java.lang.Short getIconTemplateSetId()
    {
        return iconTemplateSetId_;
    }

    public void setIconTemplateSetId(java.lang.Short iconTemplateSetId_)
    {
        this.iconTemplateSetId_ = iconTemplateSetId_;
    }

    public boolean isIconTemplateSetIdUsed()
    {
        return isIconTemplateSetIdSet();
    }

    public boolean isIconTemplateSetIdSet()
    {
        return (iconTemplateSetId_ != null);
    }

    public void resetIconTemplateSetId()
    {
        this.iconTemplateSetId_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IconSet)
        {
            final IconSet that = (IconSet)obj;

            return
                    ((iconSetId_ == null) ? that.iconSetId_ == null : iconSetId_.equals(that.iconSetId_)) &&
                    scaleRangeId_ == that.scaleRangeId_ &&
                    numIcons_ == that.numIcons_ &&
                    ((iconUsage_ == null) ? that.iconUsage_ == null : iconUsage_.equals(that.iconUsage_)) &&
                    ((iconId_ == null) ? that.iconId_ == null : iconId_.equals(that.iconId_)) &&
                    ((iconDisplayArrangement_ == null) ? that.iconDisplayArrangement_ == null : iconDisplayArrangement_.equals(that.iconDisplayArrangement_)) &&
                    iconDrawingPriority_ == that.iconDrawingPriority_ &&
                    ((!isIconTemplateSetIdUsed()) ? !that.isIconTemplateSetIdUsed() :
                        ((iconTemplateSetId_ == null) ? that.iconTemplateSetId_ == null : iconTemplateSetId_.equals(that.iconTemplateSetId_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconSetId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, scaleRangeId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numIcons_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconUsage_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconDisplayArrangement_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconDrawingPriority_);
        if (isIconTemplateSetIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconTemplateSetId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        iconSetId_ = in.readVarUInt();

        scaleRangeId_ = in.readVarUInt32();

        numIcons_ = in.readVarSize();

        iconUsage_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_iconUsage()),
                zserio.runtime.array.ArrayType.NORMAL);
        iconUsage_.read(in, (int)(getNumIcons()));

        iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconId_.read(in, (int)(getNumIcons()));

        iconDisplayArrangement_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.icons.IconDisplayArrangements.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconDisplayArrangements>(new ZserioElementFactory_iconDisplayArrangement()),
                zserio.runtime.array.ArrayType.NORMAL);
        iconDisplayArrangement_.read(in, (int)(getNumIcons()));

        iconDrawingPriority_ = in.readVarUInt16();

        if (in.readBool())
        {
            iconTemplateSetId_ = in.readVarUInt16();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        iconSetId_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getIconSetId().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        scaleRangeId_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getScaleRangeId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        numIcons_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumIcons().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        iconUsage_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.icons.IconUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconUsageType>(new ZserioElementFactory_iconUsage()),
                zserio.runtime.array.ArrayType.NORMAL);
        iconUsage_.readPacked(in, (int)(getNumIcons()));

        iconId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconId_.readPacked(in, (int)(getNumIcons()));

        iconDisplayArrangement_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.icons.IconDisplayArrangements.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.icons.IconDisplayArrangements>(new ZserioElementFactory_iconDisplayArrangement()),
                zserio.runtime.array.ArrayType.NORMAL);
        iconDisplayArrangement_.readPacked(in, (int)(getNumIcons()));

        iconDrawingPriority_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getIconDrawingPriority().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        if (in.readBool())
        {
            iconTemplateSetId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getIconTemplateSetId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(scaleRangeId_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numIcons_);
        endBitPosition = iconUsage_.initializeOffsets(endBitPosition);
        endBitPosition = iconId_.initializeOffsets(endBitPosition);
        endBitPosition = iconDisplayArrangement_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(iconDrawingPriority_);
        endBitPosition += 1;
        if (isIconTemplateSetIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(iconTemplateSetId_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIconSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetId_));
        endBitPosition += zserioContext.getScaleRangeId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(scaleRangeId_));
        endBitPosition += zserioContext.getNumIcons().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));
        endBitPosition = iconUsage_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = iconId_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = iconDisplayArrangement_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getIconDrawingPriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconDrawingPriority_));
        endBitPosition += 1;
        if (isIconTemplateSetIdUsed())
        {
            endBitPosition += zserioContext.getIconTemplateSetId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(iconTemplateSetId_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(iconSetId_);

        out.writeVarUInt32(scaleRangeId_);

        out.writeVarSize(numIcons_);

        if (iconUsage_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconUsage: " +
                    iconUsage_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconUsage_.write(out);

        if (iconId_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconId: " +
                    iconId_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconId_.write(out);

        if (iconDisplayArrangement_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconDisplayArrangement: " +
                    iconDisplayArrangement_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconDisplayArrangement_.write(out);

        out.writeVarUInt16(iconDrawingPriority_);

        if (isIconTemplateSetIdUsed())
        {
            out.writeBool(true);
            out.writeVarUInt16(iconTemplateSetId_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIconSetId().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetId_));

        zserioContext.getScaleRangeId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(scaleRangeId_));

        zserioContext.getNumIcons().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numIcons_));

        if (iconUsage_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconUsage: " +
                    iconUsage_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconUsage_.writePacked(out);

        if (iconId_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconId: " +
                    iconId_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconId_.writePacked(out);

        if (iconDisplayArrangement_.size() != (int)(getNumIcons()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IconSet.iconDisplayArrangement: " +
                    iconDisplayArrangement_.size() + " != " + (int)(getNumIcons()) + "!");
        }
        iconDisplayArrangement_.writePacked(out);

        zserioContext.getIconDrawingPriority().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(iconDrawingPriority_));

        if (isIconTemplateSetIdUsed())
        {
            out.writeBool(true);
            zserioContext.getIconTemplateSetId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(iconTemplateSetId_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_iconUsage implements zserio.runtime.array.PackableElementFactory<nds.core.icons.IconUsageType>
    {
        @Override
        public nds.core.icons.IconUsageType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.icons.IconUsageType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.icons.IconUsageType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.icons.IconUsageType(context, in);
        }
    }

    private static final class ZserioElementFactory_iconDisplayArrangement implements zserio.runtime.array.PackableElementFactory<nds.core.icons.IconDisplayArrangements>
    {
        @Override
        public nds.core.icons.IconDisplayArrangements create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.core.icons.IconDisplayArrangements.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.icons.IconDisplayArrangements create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.core.icons.IconDisplayArrangements.readEnum(context, in);
        }
    }

    private java.math.BigInteger iconSetId_;
    private int scaleRangeId_;
    private int numIcons_;
    private zserio.runtime.array.Array iconUsage_;
    private zserio.runtime.array.Array iconId_;
    private zserio.runtime.array.Array iconDisplayArrangement_;
    private short iconDrawingPriority_ = 0;
    private java.lang.Short iconTemplateSetId_;
}
