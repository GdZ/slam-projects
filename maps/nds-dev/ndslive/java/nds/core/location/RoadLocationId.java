/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.location;

public class RoadLocationId implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            branchId_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getBranchId()
        {
            return branchId_;
        }

        private zserio.runtime.array.DeltaContext branchId_;
    };

    public RoadLocationId()
    {
    }

    public RoadLocationId(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadLocationId(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadLocationId(
            short[] value_,
            short branchId_)
    {
        setValue(value_);
        setBranchId(branchId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getBranchId().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(branchId_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += value_.bitSizeOf(endBitPosition);
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += value_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getBranchId().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(branchId_));

        return (int)(endBitPosition - bitPosition);
    }

    public short[] getValue()
    {
        return (value_ == null) ? null : value_.getRawArray();
    }

    public void setValue(short[] value_)
    {
        this.value_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(value_),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short getBranchId()
    {
        return branchId_;
    }

    public void setBranchId(short branchId_)
    {
        this.branchId_ = branchId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationId)
        {
            final RoadLocationId that = (RoadLocationId)obj;

            return
                    ((value_ == null) ? that.value_ == null : value_.equals(that.value_)) &&
                    branchId_ == that.branchId_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, branchId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        value_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        value_.read(in, (int)(16));

        branchId_ = in.readUnsignedByte();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        value_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        value_.readPacked(in, (int)(16));

        branchId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getBranchId().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = value_.initializeOffsets(endBitPosition);
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = value_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getBranchId().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(branchId_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (value_.size() != (int)(16))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RoadLocationId.value: " +
                    value_.size() + " != " + (int)(16) + "!");
        }
        value_.write(out);

        out.writeUnsignedByte(branchId_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (value_.size() != (int)(16))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RoadLocationId.value: " +
                    value_.size() + " != " + (int)(16) + "!");
        }
        value_.writePacked(out);

        zserioContext.getBranchId().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(branchId_));
    }

    private zserio.runtime.array.Array value_;
    private short branchId_ = nds.core.location.NO_BRANCH.NO_BRANCH;
}
