/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.location;

public class LocationSegment implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            range_ = new nds.core.geometry.LineRange2D.ZserioPackingContext();
            absoluteBearingStart_ = new zserio.runtime.array.DeltaContext();
            absoluteBearingEnd_ = new zserio.runtime.array.DeltaContext();
            length_ = new zserio.runtime.array.DeltaContext();
            frc_ = new zserio.runtime.array.DeltaContext();
            roadtypes_ = new nds.core.types.RoadType.ZserioPackingContext();
        }

        public nds.core.geometry.LineRange2D.ZserioPackingContext getRange()
        {
            return range_;
        }

        public zserio.runtime.array.DeltaContext getAbsoluteBearingStart()
        {
            return absoluteBearingStart_;
        }

        public zserio.runtime.array.DeltaContext getAbsoluteBearingEnd()
        {
            return absoluteBearingEnd_;
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        public zserio.runtime.array.DeltaContext getFrc()
        {
            return frc_;
        }

        public nds.core.types.RoadType.ZserioPackingContext getRoadtypes()
        {
            return roadtypes_;
        }

        private nds.core.geometry.LineRange2D.ZserioPackingContext range_;
        private zserio.runtime.array.DeltaContext absoluteBearingStart_;
        private zserio.runtime.array.DeltaContext absoluteBearingEnd_;
        private zserio.runtime.array.DeltaContext length_;
        private zserio.runtime.array.DeltaContext frc_;
        private nds.core.types.RoadType.ZserioPackingContext roadtypes_;
    };

    public LocationSegment(
            nds.core.location.LocationGeometry pathGeometry_)
    {
        this.pathGeometry_ = pathGeometry_;
    }

    public LocationSegment(zserio.runtime.io.BitStreamReader in,
            nds.core.location.LocationGeometry pathGeometry_)
            throws java.io.IOException
    {
        this.pathGeometry_ = pathGeometry_;

        read(in);
    }

    public LocationSegment(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.location.LocationGeometry pathGeometry_)
            throws java.io.IOException
    {
        this.pathGeometry_ = pathGeometry_;

        read(context, in);
    }

    public LocationSegment(
            nds.core.location.LocationGeometry pathGeometry_,
            nds.core.geometry.LineRange2D range_,
            short absoluteBearingStart_,
            short absoluteBearingEnd_,
            int length_,
            java.lang.Byte frc_,
            nds.core.types.RoadType roadtypes_,
            java.lang.String roadName_,
            java.lang.String roadNumber_)
    {
        this(pathGeometry_);

        setRange(range_);
        setAbsoluteBearingStart(absoluteBearingStart_);
        setAbsoluteBearingEnd(absoluteBearingEnd_);
        setLength(length_);
        setFrc(frc_);
        setRoadtypes(roadtypes_);
        setRoadName(roadName_);
        setRoadNumber(roadNumber_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_.initPackingContext(zserioContext.getRange());
        zserioContext.getAbsoluteBearingStart().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingStart_));
        zserioContext.getAbsoluteBearingEnd().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingEnd_));
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        if (isFrcUsed())
        {
            zserioContext.getFrc().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        if (isRoadtypesUsed())
        {
            roadtypes_.initPackingContext(zserioContext.getRoadtypes());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += range_.bitSizeOf(endBitPosition);
        endBitPosition += 8;
        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += 3;
        }
        endBitPosition += 1;
        if (isRoadtypesUsed())
        {
            endBitPosition += roadtypes_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isRoadNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadName_);
        }
        endBitPosition += 1;
        if (isRoadNumberUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadNumber_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += range_.bitSizeOf(zserioContext.getRange(), endBitPosition);
        endBitPosition += zserioContext.getAbsoluteBearingStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingStart_));
        endBitPosition += zserioContext.getAbsoluteBearingEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingEnd_));
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += zserioContext.getFrc().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        endBitPosition += 1;
        if (isRoadtypesUsed())
        {
            endBitPosition += roadtypes_.bitSizeOf(zserioContext.getRoadtypes(), endBitPosition);
        }
        endBitPosition += 1;
        if (isRoadNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadName_);
        }
        endBitPosition += 1;
        if (isRoadNumberUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadNumber_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.location.LocationGeometry getPathGeometry()
    {
        return this.pathGeometry_;
    }

    public nds.core.geometry.LineRange2D getRange()
    {
        return range_;
    }

    public void setRange(nds.core.geometry.LineRange2D range_)
    {
        this.range_ = range_;
    }

    public short getAbsoluteBearingStart()
    {
        return absoluteBearingStart_;
    }

    public void setAbsoluteBearingStart(short absoluteBearingStart_)
    {
        this.absoluteBearingStart_ = absoluteBearingStart_;
    }

    public short getAbsoluteBearingEnd()
    {
        return absoluteBearingEnd_;
    }

    public void setAbsoluteBearingEnd(short absoluteBearingEnd_)
    {
        this.absoluteBearingEnd_ = absoluteBearingEnd_;
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    public java.lang.Byte getFrc()
    {
        return frc_;
    }

    public void setFrc(java.lang.Byte frc_)
    {
        this.frc_ = frc_;
    }

    public boolean isFrcUsed()
    {
        return isFrcSet();
    }

    public boolean isFrcSet()
    {
        return (frc_ != null);
    }

    public void resetFrc()
    {
        this.frc_ = null;
    }

    public nds.core.types.RoadType getRoadtypes()
    {
        return roadtypes_;
    }

    public void setRoadtypes(nds.core.types.RoadType roadtypes_)
    {
        this.roadtypes_ = roadtypes_;
    }

    public boolean isRoadtypesUsed()
    {
        return isRoadtypesSet();
    }

    public boolean isRoadtypesSet()
    {
        return (roadtypes_ != null);
    }

    public void resetRoadtypes()
    {
        this.roadtypes_ = null;
    }

    public java.lang.String getRoadName()
    {
        return roadName_;
    }

    public void setRoadName(java.lang.String roadName_)
    {
        this.roadName_ = roadName_;
    }

    public boolean isRoadNameUsed()
    {
        return isRoadNameSet();
    }

    public boolean isRoadNameSet()
    {
        return (roadName_ != null);
    }

    public void resetRoadName()
    {
        this.roadName_ = null;
    }

    public java.lang.String getRoadNumber()
    {
        return roadNumber_;
    }

    public void setRoadNumber(java.lang.String roadNumber_)
    {
        this.roadNumber_ = roadNumber_;
    }

    public boolean isRoadNumberUsed()
    {
        return isRoadNumberSet();
    }

    public boolean isRoadNumberSet()
    {
        return (roadNumber_ != null);
    }

    public void resetRoadNumber()
    {
        this.roadNumber_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LocationSegment)
        {
            final LocationSegment that = (LocationSegment)obj;

            return
                    ((this.pathGeometry_ == null) ? that.pathGeometry_ == null : this.pathGeometry_.equals(that.pathGeometry_)) &&
                    ((range_ == null) ? that.range_ == null : range_.equals(that.range_)) &&
                    absoluteBearingStart_ == that.absoluteBearingStart_ &&
                    absoluteBearingEnd_ == that.absoluteBearingEnd_ &&
                    length_ == that.length_ &&
                    ((!isFrcUsed()) ? !that.isFrcUsed() :
                        ((frc_ == null) ? that.frc_ == null : frc_.equals(that.frc_))) &&
                    ((!isRoadtypesUsed()) ? !that.isRoadtypesUsed() :
                        ((roadtypes_ == null) ? that.roadtypes_ == null : roadtypes_.equals(that.roadtypes_))) &&
                    ((!isRoadNameUsed()) ? !that.isRoadNameUsed() :
                        ((roadName_ == null) ? that.roadName_ == null : roadName_.equals(that.roadName_))) &&
                    ((!isRoadNumberUsed()) ? !that.isRoadNumberUsed() :
                        ((roadNumber_ == null) ? that.roadNumber_ == null : roadNumber_.equals(that.roadNumber_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getPathGeometry());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, range_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, absoluteBearingStart_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, absoluteBearingEnd_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);
        if (isFrcUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, frc_);
        if (isRoadtypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadtypes_);
        if (isRoadNameUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadName_);
        if (isRoadNumberUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadNumber_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        range_ = new nds.core.geometry.LineRange2D(in, getPathGeometry().getLine());

        absoluteBearingStart_ = in.readUnsignedByte();

        absoluteBearingEnd_ = in.readUnsignedByte();

        length_ = in.readVarUInt32();

        if (in.readBool())
        {
            frc_ = (byte)in.readBits(3);
        }

        if (in.readBool())
        {
            roadtypes_ = new nds.core.types.RoadType(in);
        }

        if (in.readBool())
        {
            roadName_ = in.readString();
        }

        if (in.readBool())
        {
            roadNumber_ = in.readString();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_ = new nds.core.geometry.LineRange2D(zserioContext.getRange(), in, getPathGeometry().getLine());

        absoluteBearingStart_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getAbsoluteBearingStart().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        absoluteBearingEnd_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getAbsoluteBearingEnd().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (in.readBool())
        {
            frc_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getFrc().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), in)).get();
        }

        if (in.readBool())
        {
            roadtypes_ = new nds.core.types.RoadType(zserioContext.getRoadtypes(), in);
        }

        if (in.readBool())
        {
            roadName_ = in.readString();
        }

        if (in.readBool())
        {
            roadNumber_ = in.readString();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = range_.initializeOffsets(endBitPosition);
        endBitPosition += 8;
        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += 3;
        }
        endBitPosition += 1;
        if (isRoadtypesUsed())
        {
            endBitPosition = roadtypes_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isRoadNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadName_);
        }
        endBitPosition += 1;
        if (isRoadNumberUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadNumber_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = range_.initializeOffsets(zserioContext.getRange(), endBitPosition);
        endBitPosition += zserioContext.getAbsoluteBearingStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingStart_));
        endBitPosition += zserioContext.getAbsoluteBearingEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingEnd_));
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += 1;
        if (isFrcUsed())
        {
            endBitPosition += zserioContext.getFrc().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        endBitPosition += 1;
        if (isRoadtypesUsed())
        {
            endBitPosition = roadtypes_.initializeOffsets(zserioContext.getRoadtypes(), endBitPosition);
        }
        endBitPosition += 1;
        if (isRoadNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadName_);
        }
        endBitPosition += 1;
        if (isRoadNumberUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(roadNumber_);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (range_.getLine() != (getPathGeometry().getLine()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter line for field LocationSegment.range!");
        }
        range_.write(out);

        out.writeUnsignedByte(absoluteBearingStart_);

        out.writeUnsignedByte(absoluteBearingEnd_);

        out.writeVarUInt32(length_);

        if (isFrcUsed())
        {
            out.writeBool(true);
            out.writeBits(frc_, 3);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadtypesUsed())
        {
            out.writeBool(true);
            roadtypes_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadNameUsed())
        {
            out.writeBool(true);
            out.writeString(roadName_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadNumberUsed())
        {
            out.writeBool(true);
            out.writeString(roadNumber_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_.write(zserioContext.getRange(), out);

        zserioContext.getAbsoluteBearingStart().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingStart_));

        zserioContext.getAbsoluteBearingEnd().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(absoluteBearingEnd_));

        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        if (isFrcUsed())
        {
            out.writeBool(true);
            zserioContext.getFrc().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(frc_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadtypesUsed())
        {
            out.writeBool(true);
            roadtypes_.write(zserioContext.getRoadtypes(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadNameUsed())
        {
            out.writeBool(true);
            out.writeString(roadName_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoadNumberUsed())
        {
            out.writeBool(true);
            out.writeString(roadNumber_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private final nds.core.location.LocationGeometry pathGeometry_;
    private nds.core.geometry.LineRange2D range_;
    private short absoluteBearingStart_;
    private short absoluteBearingEnd_;
    private int length_;
    private java.lang.Byte frc_;
    private nds.core.types.RoadType roadtypes_;
    private java.lang.String roadName_;
    private java.lang.String roadNumber_;
}
