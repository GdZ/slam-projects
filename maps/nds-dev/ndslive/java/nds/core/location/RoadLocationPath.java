/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.location;

public class RoadLocationPath implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            pathGeometry_ = new nds.core.location.LocationGeometry.ZserioPackingContext();
        }

        public nds.core.location.LocationGeometry.ZserioPackingContext getPathGeometry()
        {
            return pathGeometry_;
        }

        private nds.core.location.LocationGeometry.ZserioPackingContext pathGeometry_;
    };

    public RoadLocationPath()
    {
    }

    public RoadLocationPath(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadLocationPath(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadLocationPath(
            nds.core.location.LocationGeometry pathGeometry_,
            nds.core.location.LocationSegment[] locationPathSegments_)
    {
        setPathGeometry(pathGeometry_);
        setLocationPathSegments(locationPathSegments_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        pathGeometry_.initPackingContext(zserioContext.getPathGeometry());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += pathGeometry_.bitSizeOf(endBitPosition);
        endBitPosition += locationPathSegments_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += pathGeometry_.bitSizeOf(zserioContext.getPathGeometry(), endBitPosition);
        endBitPosition += locationPathSegments_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.location.LocationGeometry getPathGeometry()
    {
        return pathGeometry_;
    }

    public void setPathGeometry(nds.core.location.LocationGeometry pathGeometry_)
    {
        this.pathGeometry_ = pathGeometry_;
    }

    public nds.core.location.LocationSegment[] getLocationPathSegments()
    {
        return (locationPathSegments_ == null) ? null : locationPathSegments_.getRawArray();
    }

    public void setLocationPathSegments(nds.core.location.LocationSegment[] locationPathSegments_)
    {
        this.locationPathSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.location.LocationSegment.class, locationPathSegments_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.location.LocationSegment>(new ZserioElementFactory_locationPathSegments()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationPath)
        {
            final RoadLocationPath that = (RoadLocationPath)obj;

            return
                    ((pathGeometry_ == null) ? that.pathGeometry_ == null : pathGeometry_.equals(that.pathGeometry_)) &&
                    ((locationPathSegments_ == null) ? that.locationPathSegments_ == null : locationPathSegments_.equals(that.locationPathSegments_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, pathGeometry_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationPathSegments_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        pathGeometry_ = new nds.core.location.LocationGeometry(in);

        locationPathSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.location.LocationSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.location.LocationSegment>(new ZserioElementFactory_locationPathSegments()),
                zserio.runtime.array.ArrayType.AUTO);
        locationPathSegments_.readPacked(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        pathGeometry_ = new nds.core.location.LocationGeometry(zserioContext.getPathGeometry(), in);

        locationPathSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.location.LocationSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.location.LocationSegment>(new ZserioElementFactory_locationPathSegments()),
                zserio.runtime.array.ArrayType.AUTO);
        locationPathSegments_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = pathGeometry_.initializeOffsets(endBitPosition);
        endBitPosition = locationPathSegments_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = pathGeometry_.initializeOffsets(zserioContext.getPathGeometry(), endBitPosition);
        endBitPosition = locationPathSegments_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        pathGeometry_.write(out);

        locationPathSegments_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        pathGeometry_.write(zserioContext.getPathGeometry(), out);

        locationPathSegments_.writePacked(out);
    }

    private final class ZserioElementFactory_locationPathSegments implements zserio.runtime.array.PackableElementFactory<nds.core.location.LocationSegment>
    {
        @Override
        public nds.core.location.LocationSegment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.location.LocationSegment(in, getPathGeometry());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.location.LocationSegment.ZserioPackingContext();
        }

        @Override
        public nds.core.location.LocationSegment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.location.LocationSegment(context, in, getPathGeometry());
        }
    }

    private nds.core.location.LocationGeometry pathGeometry_;
    private zserio.runtime.array.Array locationPathSegments_;
}
