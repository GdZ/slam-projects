/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public enum ConditionTypeCode implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    TIME_RANGE_OF_DAY(0),
    TIME_RANGE_OF_WEEK(1),
    DATE_RANGE_OF_YEAR(2),
    DAYS_OF_WEEK(3),
    DAYS_OF_MONTH(4),
    DAY_OF_YEAR(5),
    MONTHS_OF_YEAR(6),
    WEEK_IN_MONTH(7),
    WEEKDAY_IN_MONTH(8),
    CALENDAR_WEEK(9),
    TIME_DURATION(10),
    ODD_OR_EVEN_DAYS(11),
    FUZZY_TIME_DOMAIN(12),
    WEATHER(13),
    FREQUENTLY_USED_VEHICLE_TYPES(14),
    SLOW_ROAD_USERS(15),
    BIG_VEHICLES(16),
    PUBLIC_SERVICE_VEHICLES(17),
    EMERGENCY_MILITARY_DETAILS(18),
    EQUIPMENT(19),
    AUTHORIZATION(20),
    LOAD(21),
    NUM_AXLES(22),
    OCCUPANCY(23),
    LENGTH_METRIC(24),
    LENGTH_IMPERIAL(25),
    VEHICLE_HEIGHT_METRIC(26),
    VEHICLE_HEIGHT_IMPERIAL(27),
    VEHICLE_WIDTH_METRIC(28),
    VEHICLE_WIDTH_IMPERIAL(29),
    WEIGHT_METRIC(30),
    WEIGHT_IMPERIAL(31),
    WEIGHT_PER_AXLE_METRIC(32),
    WEIGHT_PER_AXLE_IMPERIAL(33),
    WEIGHT_PER_TANDEM_AXLE_METRIC(34),
    WEIGHT_PER_TANDEM_AXLE_IMPERIAL(35),
    WEIGHT_PER_TRIDEM_AXLE_METRIC(36),
    WEIGHT_PER_TRIDEM_AXLE_IMPERIAL(37),
    TIME_RANGE_OF_WEEKDAYS(38),
    VISIBILITY(39),
    SURFACE(40),
    EURO_EMISSION_CLASS(41),
    TIME_DURATION_HOURS(42),
    TIME_RANGE_OF_YEAR(43),
    NUM_TRAILERS(44),
    TRAILER_LENGTH_METRIC(45),
    TRAILER_LENGTH_IMPERIAL(46),
    ENGINE_DISPLACEMENT(47),
    ENERGY_TYPE(48),
    BRAKED_TRAILER(49),
    PUBLIC_BUS_TYPE(50);

    private ConditionTypeCode(int value)
    {
        this.value = value;
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits(16),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 16;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits(16),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedShort(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits(16), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public static ConditionTypeCode readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedShort());
    }

    public static ConditionTypeCode readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits(16), in)).get());
    }

    public static ConditionTypeCode toEnum(int value)
    {
        switch (value)
        {
            case 0:
                return TIME_RANGE_OF_DAY;
            case 1:
                return TIME_RANGE_OF_WEEK;
            case 2:
                return DATE_RANGE_OF_YEAR;
            case 3:
                return DAYS_OF_WEEK;
            case 4:
                return DAYS_OF_MONTH;
            case 5:
                return DAY_OF_YEAR;
            case 6:
                return MONTHS_OF_YEAR;
            case 7:
                return WEEK_IN_MONTH;
            case 8:
                return WEEKDAY_IN_MONTH;
            case 9:
                return CALENDAR_WEEK;
            case 10:
                return TIME_DURATION;
            case 11:
                return ODD_OR_EVEN_DAYS;
            case 12:
                return FUZZY_TIME_DOMAIN;
            case 13:
                return WEATHER;
            case 14:
                return FREQUENTLY_USED_VEHICLE_TYPES;
            case 15:
                return SLOW_ROAD_USERS;
            case 16:
                return BIG_VEHICLES;
            case 17:
                return PUBLIC_SERVICE_VEHICLES;
            case 18:
                return EMERGENCY_MILITARY_DETAILS;
            case 19:
                return EQUIPMENT;
            case 20:
                return AUTHORIZATION;
            case 21:
                return LOAD;
            case 22:
                return NUM_AXLES;
            case 23:
                return OCCUPANCY;
            case 24:
                return LENGTH_METRIC;
            case 25:
                return LENGTH_IMPERIAL;
            case 26:
                return VEHICLE_HEIGHT_METRIC;
            case 27:
                return VEHICLE_HEIGHT_IMPERIAL;
            case 28:
                return VEHICLE_WIDTH_METRIC;
            case 29:
                return VEHICLE_WIDTH_IMPERIAL;
            case 30:
                return WEIGHT_METRIC;
            case 31:
                return WEIGHT_IMPERIAL;
            case 32:
                return WEIGHT_PER_AXLE_METRIC;
            case 33:
                return WEIGHT_PER_AXLE_IMPERIAL;
            case 34:
                return WEIGHT_PER_TANDEM_AXLE_METRIC;
            case 35:
                return WEIGHT_PER_TANDEM_AXLE_IMPERIAL;
            case 36:
                return WEIGHT_PER_TRIDEM_AXLE_METRIC;
            case 37:
                return WEIGHT_PER_TRIDEM_AXLE_IMPERIAL;
            case 38:
                return TIME_RANGE_OF_WEEKDAYS;
            case 39:
                return VISIBILITY;
            case 40:
                return SURFACE;
            case 41:
                return EURO_EMISSION_CLASS;
            case 42:
                return TIME_DURATION_HOURS;
            case 43:
                return TIME_RANGE_OF_YEAR;
            case 44:
                return NUM_TRAILERS;
            case 45:
                return TRAILER_LENGTH_METRIC;
            case 46:
                return TRAILER_LENGTH_IMPERIAL;
            case 47:
                return ENGINE_DISPLACEMENT;
            case 48:
                return ENERGY_TYPE;
            case 49:
                return BRAKED_TRAILER;
            case 50:
                return PUBLIC_BUS_TYPE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration ConditionTypeCode: " + value + "!");
        }
    }

    public static ConditionTypeCode toEnum(java.lang.String itemName)
    {
        if (itemName.equals("TIME_RANGE_OF_DAY"))
            return TIME_RANGE_OF_DAY;
        if (itemName.equals("TIME_RANGE_OF_WEEK"))
            return TIME_RANGE_OF_WEEK;
        if (itemName.equals("DATE_RANGE_OF_YEAR"))
            return DATE_RANGE_OF_YEAR;
        if (itemName.equals("DAYS_OF_WEEK"))
            return DAYS_OF_WEEK;
        if (itemName.equals("DAYS_OF_MONTH"))
            return DAYS_OF_MONTH;
        if (itemName.equals("DAY_OF_YEAR"))
            return DAY_OF_YEAR;
        if (itemName.equals("MONTHS_OF_YEAR"))
            return MONTHS_OF_YEAR;
        if (itemName.equals("WEEK_IN_MONTH"))
            return WEEK_IN_MONTH;
        if (itemName.equals("WEEKDAY_IN_MONTH"))
            return WEEKDAY_IN_MONTH;
        if (itemName.equals("CALENDAR_WEEK"))
            return CALENDAR_WEEK;
        if (itemName.equals("TIME_DURATION"))
            return TIME_DURATION;
        if (itemName.equals("ODD_OR_EVEN_DAYS"))
            return ODD_OR_EVEN_DAYS;
        if (itemName.equals("FUZZY_TIME_DOMAIN"))
            return FUZZY_TIME_DOMAIN;
        if (itemName.equals("WEATHER"))
            return WEATHER;
        if (itemName.equals("FREQUENTLY_USED_VEHICLE_TYPES"))
            return FREQUENTLY_USED_VEHICLE_TYPES;
        if (itemName.equals("SLOW_ROAD_USERS"))
            return SLOW_ROAD_USERS;
        if (itemName.equals("BIG_VEHICLES"))
            return BIG_VEHICLES;
        if (itemName.equals("PUBLIC_SERVICE_VEHICLES"))
            return PUBLIC_SERVICE_VEHICLES;
        if (itemName.equals("EMERGENCY_MILITARY_DETAILS"))
            return EMERGENCY_MILITARY_DETAILS;
        if (itemName.equals("EQUIPMENT"))
            return EQUIPMENT;
        if (itemName.equals("AUTHORIZATION"))
            return AUTHORIZATION;
        if (itemName.equals("LOAD"))
            return LOAD;
        if (itemName.equals("NUM_AXLES"))
            return NUM_AXLES;
        if (itemName.equals("OCCUPANCY"))
            return OCCUPANCY;
        if (itemName.equals("LENGTH_METRIC"))
            return LENGTH_METRIC;
        if (itemName.equals("LENGTH_IMPERIAL"))
            return LENGTH_IMPERIAL;
        if (itemName.equals("VEHICLE_HEIGHT_METRIC"))
            return VEHICLE_HEIGHT_METRIC;
        if (itemName.equals("VEHICLE_HEIGHT_IMPERIAL"))
            return VEHICLE_HEIGHT_IMPERIAL;
        if (itemName.equals("VEHICLE_WIDTH_METRIC"))
            return VEHICLE_WIDTH_METRIC;
        if (itemName.equals("VEHICLE_WIDTH_IMPERIAL"))
            return VEHICLE_WIDTH_IMPERIAL;
        if (itemName.equals("WEIGHT_METRIC"))
            return WEIGHT_METRIC;
        if (itemName.equals("WEIGHT_IMPERIAL"))
            return WEIGHT_IMPERIAL;
        if (itemName.equals("WEIGHT_PER_AXLE_METRIC"))
            return WEIGHT_PER_AXLE_METRIC;
        if (itemName.equals("WEIGHT_PER_AXLE_IMPERIAL"))
            return WEIGHT_PER_AXLE_IMPERIAL;
        if (itemName.equals("WEIGHT_PER_TANDEM_AXLE_METRIC"))
            return WEIGHT_PER_TANDEM_AXLE_METRIC;
        if (itemName.equals("WEIGHT_PER_TANDEM_AXLE_IMPERIAL"))
            return WEIGHT_PER_TANDEM_AXLE_IMPERIAL;
        if (itemName.equals("WEIGHT_PER_TRIDEM_AXLE_METRIC"))
            return WEIGHT_PER_TRIDEM_AXLE_METRIC;
        if (itemName.equals("WEIGHT_PER_TRIDEM_AXLE_IMPERIAL"))
            return WEIGHT_PER_TRIDEM_AXLE_IMPERIAL;
        if (itemName.equals("TIME_RANGE_OF_WEEKDAYS"))
            return TIME_RANGE_OF_WEEKDAYS;
        if (itemName.equals("VISIBILITY"))
            return VISIBILITY;
        if (itemName.equals("SURFACE"))
            return SURFACE;
        if (itemName.equals("EURO_EMISSION_CLASS"))
            return EURO_EMISSION_CLASS;
        if (itemName.equals("TIME_DURATION_HOURS"))
            return TIME_DURATION_HOURS;
        if (itemName.equals("TIME_RANGE_OF_YEAR"))
            return TIME_RANGE_OF_YEAR;
        if (itemName.equals("NUM_TRAILERS"))
            return NUM_TRAILERS;
        if (itemName.equals("TRAILER_LENGTH_METRIC"))
            return TRAILER_LENGTH_METRIC;
        if (itemName.equals("TRAILER_LENGTH_IMPERIAL"))
            return TRAILER_LENGTH_IMPERIAL;
        if (itemName.equals("ENGINE_DISPLACEMENT"))
            return ENGINE_DISPLACEMENT;
        if (itemName.equals("ENERGY_TYPE"))
            return ENERGY_TYPE;
        if (itemName.equals("BRAKED_TRAILER"))
            return BRAKED_TRAILER;
        if (itemName.equals("PUBLIC_BUS_TYPE"))
            return PUBLIC_BUS_TYPE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration ConditionTypeCode!");
    }

    private int value;
}
