/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class TimeRangeOfWeekDays implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public TimeRangeOfWeekDays()
    {
    }

    public TimeRangeOfWeekDays(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TimeRangeOfWeekDays(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TimeRangeOfWeekDays(
            nds.core.conditions.TimeRangeOfDay[] rangeOfWeekDay_)
    {
        setRangeOfWeekDay(rangeOfWeekDay_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += rangeOfWeekDay_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += rangeOfWeekDay_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.TimeRangeOfDay[] getRangeOfWeekDay()
    {
        return (rangeOfWeekDay_ == null) ? null : rangeOfWeekDay_.getRawArray();
    }

    public void setRangeOfWeekDay(nds.core.conditions.TimeRangeOfDay[] rangeOfWeekDay_)
    {
        this.rangeOfWeekDay_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.conditions.TimeRangeOfDay.class, rangeOfWeekDay_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.conditions.TimeRangeOfDay>(new ZserioElementFactory_rangeOfWeekDay()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TimeRangeOfWeekDays)
        {
            final TimeRangeOfWeekDays that = (TimeRangeOfWeekDays)obj;

            return
                    ((rangeOfWeekDay_ == null) ? that.rangeOfWeekDay_ == null : rangeOfWeekDay_.equals(that.rangeOfWeekDay_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, rangeOfWeekDay_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        rangeOfWeekDay_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.conditions.TimeRangeOfDay.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.conditions.TimeRangeOfDay>(new ZserioElementFactory_rangeOfWeekDay()),
                zserio.runtime.array.ArrayType.NORMAL);
        rangeOfWeekDay_.read(in, (int)(7));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        rangeOfWeekDay_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.conditions.TimeRangeOfDay.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.conditions.TimeRangeOfDay>(new ZserioElementFactory_rangeOfWeekDay()),
                zserio.runtime.array.ArrayType.NORMAL);
        rangeOfWeekDay_.readPacked(in, (int)(7));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = rangeOfWeekDay_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = rangeOfWeekDay_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (rangeOfWeekDay_.size() != (int)(7))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TimeRangeOfWeekDays.rangeOfWeekDay: " +
                    rangeOfWeekDay_.size() + " != " + (int)(7) + "!");
        }
        rangeOfWeekDay_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        if (rangeOfWeekDay_.size() != (int)(7))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TimeRangeOfWeekDays.rangeOfWeekDay: " +
                    rangeOfWeekDay_.size() + " != " + (int)(7) + "!");
        }
        rangeOfWeekDay_.writePacked(out);
    }

    private static final class ZserioElementFactory_rangeOfWeekDay implements zserio.runtime.array.PackableElementFactory<nds.core.conditions.TimeRangeOfDay>
    {
        @Override
        public nds.core.conditions.TimeRangeOfDay create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.conditions.TimeRangeOfDay(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.conditions.TimeRangeOfDay.ZserioPackingContext();
        }

        @Override
        public nds.core.conditions.TimeRangeOfDay create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.conditions.TimeRangeOfDay(context, in);
        }
    }

    private zserio.runtime.array.Array rangeOfWeekDay_;
}
