/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class WeekdayInMonth implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            dayOfWeek_ = new zserio.runtime.array.DeltaContext();
            nThWeekdayInMonth_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getDayOfWeek()
        {
            return dayOfWeek_;
        }

        public zserio.runtime.array.DeltaContext getNThWeekdayInMonth()
        {
            return nThWeekdayInMonth_;
        }

        private zserio.runtime.array.DeltaContext dayOfWeek_;
        private zserio.runtime.array.DeltaContext nThWeekdayInMonth_;
    };

    public WeekdayInMonth()
    {
    }

    public WeekdayInMonth(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public WeekdayInMonth(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public WeekdayInMonth(
            byte dayOfWeek_,
            boolean countBackwardWeekdayInMonth_,
            byte nThWeekdayInMonth_)
    {
        setDayOfWeek(dayOfWeek_);
        setCountBackwardWeekdayInMonth(countBackwardWeekdayInMonth_);
        setNThWeekdayInMonth(nThWeekdayInMonth_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getDayOfWeek().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(dayOfWeek_));
        zserioContext.getNThWeekdayInMonth().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(nThWeekdayInMonth_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 4;
        endBitPosition += 1;
        endBitPosition += 3;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDayOfWeek().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(dayOfWeek_));
        endBitPosition += 1;
        endBitPosition += zserioContext.getNThWeekdayInMonth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(nThWeekdayInMonth_));

        return (int)(endBitPosition - bitPosition);
    }

    public byte getDayOfWeek()
    {
        return dayOfWeek_;
    }

    public void setDayOfWeek(byte dayOfWeek_)
    {
        this.dayOfWeek_ = dayOfWeek_;
    }

    public boolean getCountBackwardWeekdayInMonth()
    {
        return countBackwardWeekdayInMonth_;
    }

    public void setCountBackwardWeekdayInMonth(boolean countBackwardWeekdayInMonth_)
    {
        this.countBackwardWeekdayInMonth_ = countBackwardWeekdayInMonth_;
    }

    public byte getNThWeekdayInMonth()
    {
        return nThWeekdayInMonth_;
    }

    public void setNThWeekdayInMonth(byte nThWeekdayInMonth_)
    {
        this.nThWeekdayInMonth_ = nThWeekdayInMonth_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof WeekdayInMonth)
        {
            final WeekdayInMonth that = (WeekdayInMonth)obj;

            return
                    dayOfWeek_ == that.dayOfWeek_ &&
                    countBackwardWeekdayInMonth_ == that.countBackwardWeekdayInMonth_ &&
                    nThWeekdayInMonth_ == that.nThWeekdayInMonth_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, dayOfWeek_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, countBackwardWeekdayInMonth_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nThWeekdayInMonth_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        dayOfWeek_ = (byte)in.readBits(4);

        countBackwardWeekdayInMonth_ = in.readBool();

        nThWeekdayInMonth_ = (byte)in.readBits(3);

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        dayOfWeek_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getDayOfWeek().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();

        countBackwardWeekdayInMonth_ = in.readBool();

        nThWeekdayInMonth_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNThWeekdayInMonth().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), in)).get();

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 4;
        endBitPosition += 1;
        endBitPosition += 3;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDayOfWeek().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(dayOfWeek_));
        endBitPosition += 1;
        endBitPosition += zserioContext.getNThWeekdayInMonth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(nThWeekdayInMonth_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeBits(dayOfWeek_, 4);

        out.writeBool(countBackwardWeekdayInMonth_);

        out.writeBits(nThWeekdayInMonth_, 3);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getDayOfWeek().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(dayOfWeek_));

        out.writeBool(countBackwardWeekdayInMonth_);

        zserioContext.getNThWeekdayInMonth().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(nThWeekdayInMonth_));
    }

    private void checkConstraints()
    {
        if (!(getDayOfWeek() <= 6))
            throw new zserio.runtime.ConstraintError("Constraint violated at WeekdayInMonth.dayOfWeek!");
    }

    private byte dayOfWeek_;
    private boolean countBackwardWeekdayInMonth_;
    private byte nThWeekdayInMonth_;
}
