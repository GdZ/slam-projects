/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class FuzzyTimeDomainCondition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            fuzzyTime_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getFuzzyTime()
        {
            return fuzzyTime_;
        }

        private zserio.runtime.array.DeltaContext fuzzyTime_;
    };

    public FuzzyTimeDomainCondition()
    {
    }

    public FuzzyTimeDomainCondition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public FuzzyTimeDomainCondition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public FuzzyTimeDomainCondition(
            nds.core.conditions.FuzzyTimeDomain fuzzyTime_,
            boolean isInclusive_)
    {
        setFuzzyTime(fuzzyTime_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        fuzzyTime_.initPackingContext(zserioContext.getFuzzyTime());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += fuzzyTime_.bitSizeOf(endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += fuzzyTime_.bitSizeOf(zserioContext.getFuzzyTime(), endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.FuzzyTimeDomain getFuzzyTime()
    {
        return fuzzyTime_;
    }

    public void setFuzzyTime(nds.core.conditions.FuzzyTimeDomain fuzzyTime_)
    {
        this.fuzzyTime_ = fuzzyTime_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof FuzzyTimeDomainCondition)
        {
            final FuzzyTimeDomainCondition that = (FuzzyTimeDomainCondition)obj;

            return
                    ((fuzzyTime_ == null) ? that.fuzzyTime_ == null : fuzzyTime_.getValue() == that.fuzzyTime_.getValue()) &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, fuzzyTime_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        fuzzyTime_ = nds.core.conditions.FuzzyTimeDomain.readEnum(in);

        isInclusive_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        fuzzyTime_ = nds.core.conditions.FuzzyTimeDomain.readEnum(zserioContext.getFuzzyTime(), in);

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += fuzzyTime_.bitSizeOf(endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = fuzzyTime_.initializeOffsets(zserioContext.getFuzzyTime(), endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        fuzzyTime_.write(out);

        out.writeBool(isInclusive_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        fuzzyTime_.write(zserioContext.getFuzzyTime(), out);

        out.writeBool(isInclusive_);
    }

    private nds.core.conditions.FuzzyTimeDomain fuzzyTime_;
    private boolean isInclusive_;
}
