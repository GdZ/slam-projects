/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class TrailerLengthImperialCondition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            trailerNumber_ = new zserio.runtime.array.DeltaContext();
            length_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getTrailerNumber()
        {
            return trailerNumber_;
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        private zserio.runtime.array.DeltaContext trailerNumber_;
        private zserio.runtime.array.DeltaContext length_;
    };

    public TrailerLengthImperialCondition()
    {
    }

    public TrailerLengthImperialCondition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrailerLengthImperialCondition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrailerLengthImperialCondition(
            byte trailerNumber_,
            int length_,
            boolean isInclusive_)
    {
        setTrailerNumber(trailerNumber_);
        setLength(length_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTrailerNumber().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(2)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(trailerNumber_));
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 2;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTrailerNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(2)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(trailerNumber_));
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public byte getTrailerNumber()
    {
        return trailerNumber_;
    }

    public void setTrailerNumber(byte trailerNumber_)
    {
        this.trailerNumber_ = trailerNumber_;
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrailerLengthImperialCondition)
        {
            final TrailerLengthImperialCondition that = (TrailerLengthImperialCondition)obj;

            return
                    trailerNumber_ == that.trailerNumber_ &&
                    length_ == that.length_ &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, trailerNumber_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        trailerNumber_ = (byte)in.readBits(2);

        length_ = in.readVarUInt32();

        isInclusive_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        trailerNumber_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getTrailerNumber().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(2)), in)).get();

        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 2;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTrailerNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(2)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(trailerNumber_));
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBits(trailerNumber_, 2);

        out.writeVarUInt32(length_);

        out.writeBool(isInclusive_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTrailerNumber().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(2)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(trailerNumber_));

        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        out.writeBool(isInclusive_);
    }

    private byte trailerNumber_;
    private int length_;
    private boolean isInclusive_;
}
