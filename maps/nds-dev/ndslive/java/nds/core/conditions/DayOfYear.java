/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class DayOfYear implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            year_ = new zserio.runtime.array.DeltaContext();
            month_ = new zserio.runtime.array.DeltaContext();
            day_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getYear()
        {
            return year_;
        }

        public zserio.runtime.array.DeltaContext getMonth()
        {
            return month_;
        }

        public zserio.runtime.array.DeltaContext getDay()
        {
            return day_;
        }

        private zserio.runtime.array.DeltaContext year_;
        private zserio.runtime.array.DeltaContext month_;
        private zserio.runtime.array.DeltaContext day_;
    };

    public DayOfYear()
    {
    }

    public DayOfYear(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DayOfYear(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DayOfYear(
            short year_,
            byte month_,
            byte day_,
            boolean isInclusive_)
    {
        setYear(year_);
        setMonth(month_);
        setDay(day_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getYear().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldShortArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(year_));
        zserioContext.getMonth().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(month_));
        zserioContext.getDay().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(day_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 4;
        endBitPosition += 5;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldShortArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(year_));
        endBitPosition += zserioContext.getMonth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(month_));
        endBitPosition += zserioContext.getDay().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(day_));
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public short getYear()
    {
        return year_;
    }

    public void setYear(short year_)
    {
        this.year_ = year_;
    }

    public byte getMonth()
    {
        return month_;
    }

    public void setMonth(byte month_)
    {
        this.month_ = month_;
    }

    public byte getDay()
    {
        return day_;
    }

    public void setDay(byte day_)
    {
        this.day_ = day_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DayOfYear)
        {
            final DayOfYear that = (DayOfYear)obj;

            return
                    year_ == that.year_ &&
                    month_ == that.month_ &&
                    day_ == that.day_ &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, year_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, month_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, day_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        year_ = in.readShort();

        month_ = (byte)in.readBits(4);

        day_ = (byte)in.readBits(5);

        isInclusive_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        year_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getYear().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldShortArrayTraits((int)(16)), in)).get();

        month_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getMonth().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();

        day_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getDay().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 4;
        endBitPosition += 5;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldShortArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(year_));
        endBitPosition += zserioContext.getMonth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(month_));
        endBitPosition += zserioContext.getDay().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(day_));
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeShort(year_);

        out.writeBits(month_, 4);

        out.writeBits(day_, 5);

        out.writeBool(isInclusive_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getYear().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldShortArrayTraits((int)(16)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(year_));

        zserioContext.getMonth().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(month_));

        zserioContext.getDay().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(day_));

        out.writeBool(isInclusive_);
    }

    private short year_;
    private byte month_;
    private byte day_;
    private boolean isInclusive_;
}
