/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public enum FuzzyTimeDomain implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    EXTERNAL((short)0),
    DAWN((short)1),
    DUSK((short)2),
    SCHOOL((short)3),
    HOLIDAY((short)4),
    WINTER((short)5),
    SPRING((short)6),
    SUMMER((short)7),
    AUTUMN((short)8),
    HIGH_TIDE((short)9),
    LOW_TIDE((short)10),
    HIGH_WATER((short)11),
    LOW_WATER((short)12),
    WET((short)13),
    DRY((short)14),
    PEAK_HOURS((short)15),
    OFF_PEAK_HOURS((short)16),
    MORNING((short)17),
    EVENING_RUSH_HOUR((short)18),
    MORNING_RUSH_HOUR((short)19),
    DAY((short)20),
    NIGHT((short)21),
    NON_SCHOOL_HOURS((short)22),
    SCHOOL_HOURS((short)23),
    WHEN_CHILDREN_ARE_PRESENT((short)24),
    SUNRISE_TILL_SUNSET((short)25),
    SUNSET_TILL_SUNRISE((short)26),
    AFTERNOON((short)27),
    EVENT((short)28),
    MARKET_HOURS((short)29),
    UNDEFINED_OCCASION((short)30),
    RACE_DAYS((short)31),
    POLLUTION((short)32),
    EVENING((short)33),
    BUSINESS_HOURS((short)34),
    SKI_SEASON((short)35),
    TOURIST_SEASON((short)36),
    CHURCH_HOURS((short)37),
    SUMMER_SCHOOL((short)38),
    FUNERAL((short)39),
    HUNTING_SEASON((short)40),
    MILITARY_EXERCISE((short)41);

    private FuzzyTimeDomain(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static FuzzyTimeDomain readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static FuzzyTimeDomain readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static FuzzyTimeDomain toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return EXTERNAL;
            case (short)1:
                return DAWN;
            case (short)2:
                return DUSK;
            case (short)3:
                return SCHOOL;
            case (short)4:
                return HOLIDAY;
            case (short)5:
                return WINTER;
            case (short)6:
                return SPRING;
            case (short)7:
                return SUMMER;
            case (short)8:
                return AUTUMN;
            case (short)9:
                return HIGH_TIDE;
            case (short)10:
                return LOW_TIDE;
            case (short)11:
                return HIGH_WATER;
            case (short)12:
                return LOW_WATER;
            case (short)13:
                return WET;
            case (short)14:
                return DRY;
            case (short)15:
                return PEAK_HOURS;
            case (short)16:
                return OFF_PEAK_HOURS;
            case (short)17:
                return MORNING;
            case (short)18:
                return EVENING_RUSH_HOUR;
            case (short)19:
                return MORNING_RUSH_HOUR;
            case (short)20:
                return DAY;
            case (short)21:
                return NIGHT;
            case (short)22:
                return NON_SCHOOL_HOURS;
            case (short)23:
                return SCHOOL_HOURS;
            case (short)24:
                return WHEN_CHILDREN_ARE_PRESENT;
            case (short)25:
                return SUNRISE_TILL_SUNSET;
            case (short)26:
                return SUNSET_TILL_SUNRISE;
            case (short)27:
                return AFTERNOON;
            case (short)28:
                return EVENT;
            case (short)29:
                return MARKET_HOURS;
            case (short)30:
                return UNDEFINED_OCCASION;
            case (short)31:
                return RACE_DAYS;
            case (short)32:
                return POLLUTION;
            case (short)33:
                return EVENING;
            case (short)34:
                return BUSINESS_HOURS;
            case (short)35:
                return SKI_SEASON;
            case (short)36:
                return TOURIST_SEASON;
            case (short)37:
                return CHURCH_HOURS;
            case (short)38:
                return SUMMER_SCHOOL;
            case (short)39:
                return FUNERAL;
            case (short)40:
                return HUNTING_SEASON;
            case (short)41:
                return MILITARY_EXERCISE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration FuzzyTimeDomain: " + value + "!");
        }
    }

    public static FuzzyTimeDomain toEnum(java.lang.String itemName)
    {
        if (itemName.equals("EXTERNAL"))
            return EXTERNAL;
        if (itemName.equals("DAWN"))
            return DAWN;
        if (itemName.equals("DUSK"))
            return DUSK;
        if (itemName.equals("SCHOOL"))
            return SCHOOL;
        if (itemName.equals("HOLIDAY"))
            return HOLIDAY;
        if (itemName.equals("WINTER"))
            return WINTER;
        if (itemName.equals("SPRING"))
            return SPRING;
        if (itemName.equals("SUMMER"))
            return SUMMER;
        if (itemName.equals("AUTUMN"))
            return AUTUMN;
        if (itemName.equals("HIGH_TIDE"))
            return HIGH_TIDE;
        if (itemName.equals("LOW_TIDE"))
            return LOW_TIDE;
        if (itemName.equals("HIGH_WATER"))
            return HIGH_WATER;
        if (itemName.equals("LOW_WATER"))
            return LOW_WATER;
        if (itemName.equals("WET"))
            return WET;
        if (itemName.equals("DRY"))
            return DRY;
        if (itemName.equals("PEAK_HOURS"))
            return PEAK_HOURS;
        if (itemName.equals("OFF_PEAK_HOURS"))
            return OFF_PEAK_HOURS;
        if (itemName.equals("MORNING"))
            return MORNING;
        if (itemName.equals("EVENING_RUSH_HOUR"))
            return EVENING_RUSH_HOUR;
        if (itemName.equals("MORNING_RUSH_HOUR"))
            return MORNING_RUSH_HOUR;
        if (itemName.equals("DAY"))
            return DAY;
        if (itemName.equals("NIGHT"))
            return NIGHT;
        if (itemName.equals("NON_SCHOOL_HOURS"))
            return NON_SCHOOL_HOURS;
        if (itemName.equals("SCHOOL_HOURS"))
            return SCHOOL_HOURS;
        if (itemName.equals("WHEN_CHILDREN_ARE_PRESENT"))
            return WHEN_CHILDREN_ARE_PRESENT;
        if (itemName.equals("SUNRISE_TILL_SUNSET"))
            return SUNRISE_TILL_SUNSET;
        if (itemName.equals("SUNSET_TILL_SUNRISE"))
            return SUNSET_TILL_SUNRISE;
        if (itemName.equals("AFTERNOON"))
            return AFTERNOON;
        if (itemName.equals("EVENT"))
            return EVENT;
        if (itemName.equals("MARKET_HOURS"))
            return MARKET_HOURS;
        if (itemName.equals("UNDEFINED_OCCASION"))
            return UNDEFINED_OCCASION;
        if (itemName.equals("RACE_DAYS"))
            return RACE_DAYS;
        if (itemName.equals("POLLUTION"))
            return POLLUTION;
        if (itemName.equals("EVENING"))
            return EVENING;
        if (itemName.equals("BUSINESS_HOURS"))
            return BUSINESS_HOURS;
        if (itemName.equals("SKI_SEASON"))
            return SKI_SEASON;
        if (itemName.equals("TOURIST_SEASON"))
            return TOURIST_SEASON;
        if (itemName.equals("CHURCH_HOURS"))
            return CHURCH_HOURS;
        if (itemName.equals("SUMMER_SCHOOL"))
            return SUMMER_SCHOOL;
        if (itemName.equals("FUNERAL"))
            return FUNERAL;
        if (itemName.equals("HUNTING_SEASON"))
            return HUNTING_SEASON;
        if (itemName.equals("MILITARY_EXERCISE"))
            return MILITARY_EXERCISE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration FuzzyTimeDomain!");
    }

    private short value;
}
