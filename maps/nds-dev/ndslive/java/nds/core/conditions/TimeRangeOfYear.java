/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class TimeRangeOfYear implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            startDay_ = new nds.core.conditions.DayOfYear.ZserioPackingContext();
            startTime_ = new nds.core.conditions.TimeOfDay.ZserioPackingContext();
            endDay_ = new nds.core.conditions.DayOfYear.ZserioPackingContext();
            endTime_ = new nds.core.conditions.TimeOfDay.ZserioPackingContext();
        }

        public nds.core.conditions.DayOfYear.ZserioPackingContext getStartDay()
        {
            return startDay_;
        }

        public nds.core.conditions.TimeOfDay.ZserioPackingContext getStartTime()
        {
            return startTime_;
        }

        public nds.core.conditions.DayOfYear.ZserioPackingContext getEndDay()
        {
            return endDay_;
        }

        public nds.core.conditions.TimeOfDay.ZserioPackingContext getEndTime()
        {
            return endTime_;
        }

        private nds.core.conditions.DayOfYear.ZserioPackingContext startDay_;
        private nds.core.conditions.TimeOfDay.ZserioPackingContext startTime_;
        private nds.core.conditions.DayOfYear.ZserioPackingContext endDay_;
        private nds.core.conditions.TimeOfDay.ZserioPackingContext endTime_;
    };

    public TimeRangeOfYear()
    {
    }

    public TimeRangeOfYear(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TimeRangeOfYear(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TimeRangeOfYear(
            nds.core.conditions.DayOfYear startDay_,
            nds.core.conditions.TimeOfDay startTime_,
            nds.core.conditions.DayOfYear endDay_,
            nds.core.conditions.TimeOfDay endTime_,
            boolean isInclusive_)
    {
        setStartDay(startDay_);
        setStartTime(startTime_);
        setEndDay(endDay_);
        setEndTime(endTime_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        startDay_.initPackingContext(zserioContext.getStartDay());
        startTime_.initPackingContext(zserioContext.getStartTime());
        endDay_.initPackingContext(zserioContext.getEndDay());
        endTime_.initPackingContext(zserioContext.getEndTime());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += startDay_.bitSizeOf(endBitPosition);
        endBitPosition += startTime_.bitSizeOf(endBitPosition);
        endBitPosition += endDay_.bitSizeOf(endBitPosition);
        endBitPosition += endTime_.bitSizeOf(endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += startDay_.bitSizeOf(zserioContext.getStartDay(), endBitPosition);
        endBitPosition += startTime_.bitSizeOf(zserioContext.getStartTime(), endBitPosition);
        endBitPosition += endDay_.bitSizeOf(zserioContext.getEndDay(), endBitPosition);
        endBitPosition += endTime_.bitSizeOf(zserioContext.getEndTime(), endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.DayOfYear getStartDay()
    {
        return startDay_;
    }

    public void setStartDay(nds.core.conditions.DayOfYear startDay_)
    {
        this.startDay_ = startDay_;
    }

    public nds.core.conditions.TimeOfDay getStartTime()
    {
        return startTime_;
    }

    public void setStartTime(nds.core.conditions.TimeOfDay startTime_)
    {
        this.startTime_ = startTime_;
    }

    public nds.core.conditions.DayOfYear getEndDay()
    {
        return endDay_;
    }

    public void setEndDay(nds.core.conditions.DayOfYear endDay_)
    {
        this.endDay_ = endDay_;
    }

    public nds.core.conditions.TimeOfDay getEndTime()
    {
        return endTime_;
    }

    public void setEndTime(nds.core.conditions.TimeOfDay endTime_)
    {
        this.endTime_ = endTime_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TimeRangeOfYear)
        {
            final TimeRangeOfYear that = (TimeRangeOfYear)obj;

            return
                    ((startDay_ == null) ? that.startDay_ == null : startDay_.equals(that.startDay_)) &&
                    ((startTime_ == null) ? that.startTime_ == null : startTime_.equals(that.startTime_)) &&
                    ((endDay_ == null) ? that.endDay_ == null : endDay_.equals(that.endDay_)) &&
                    ((endTime_ == null) ? that.endTime_ == null : endTime_.equals(that.endTime_)) &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startDay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startTime_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endDay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endTime_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        startDay_ = new nds.core.conditions.DayOfYear(in);

        startTime_ = new nds.core.conditions.TimeOfDay(in);

        endDay_ = new nds.core.conditions.DayOfYear(in);

        endTime_ = new nds.core.conditions.TimeOfDay(in);

        isInclusive_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startDay_ = new nds.core.conditions.DayOfYear(zserioContext.getStartDay(), in);

        startTime_ = new nds.core.conditions.TimeOfDay(zserioContext.getStartTime(), in);

        endDay_ = new nds.core.conditions.DayOfYear(zserioContext.getEndDay(), in);

        endTime_ = new nds.core.conditions.TimeOfDay(zserioContext.getEndTime(), in);

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = startDay_.initializeOffsets(endBitPosition);
        endBitPosition = startTime_.initializeOffsets(endBitPosition);
        endBitPosition = endDay_.initializeOffsets(endBitPosition);
        endBitPosition = endTime_.initializeOffsets(endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = startDay_.initializeOffsets(zserioContext.getStartDay(), endBitPosition);
        endBitPosition = startTime_.initializeOffsets(zserioContext.getStartTime(), endBitPosition);
        endBitPosition = endDay_.initializeOffsets(zserioContext.getEndDay(), endBitPosition);
        endBitPosition = endTime_.initializeOffsets(zserioContext.getEndTime(), endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        startDay_.write(out);

        startTime_.write(out);

        endDay_.write(out);

        endTime_.write(out);

        out.writeBool(isInclusive_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startDay_.write(zserioContext.getStartDay(), out);

        startTime_.write(zserioContext.getStartTime(), out);

        endDay_.write(zserioContext.getEndDay(), out);

        endTime_.write(zserioContext.getEndTime(), out);

        out.writeBool(isInclusive_);
    }

    private nds.core.conditions.DayOfYear startDay_;
    private nds.core.conditions.TimeOfDay startTime_;
    private nds.core.conditions.DayOfYear endDay_;
    private nds.core.conditions.TimeOfDay endTime_;
    private boolean isInclusive_;
}
