/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class DaysOfWeek implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public DaysOfWeek()
    {
    }

    public DaysOfWeek(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DaysOfWeek(
            boolean isSunday_,
            boolean isMonday_,
            boolean isTuesday_,
            boolean isWednesday_,
            boolean isThursday_,
            boolean isFriday_,
            boolean isSaturday_,
            boolean isInclusive_)
    {
        setIsSunday(isSunday_);
        setIsMonday(isMonday_);
        setIsTuesday(isTuesday_);
        setIsWednesday(isWednesday_);
        setIsThursday(isThursday_);
        setIsFriday(isFriday_);
        setIsSaturday(isSaturday_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getIsSunday()
    {
        return isSunday_;
    }

    public void setIsSunday(boolean isSunday_)
    {
        this.isSunday_ = isSunday_;
    }

    public boolean getIsMonday()
    {
        return isMonday_;
    }

    public void setIsMonday(boolean isMonday_)
    {
        this.isMonday_ = isMonday_;
    }

    public boolean getIsTuesday()
    {
        return isTuesday_;
    }

    public void setIsTuesday(boolean isTuesday_)
    {
        this.isTuesday_ = isTuesday_;
    }

    public boolean getIsWednesday()
    {
        return isWednesday_;
    }

    public void setIsWednesday(boolean isWednesday_)
    {
        this.isWednesday_ = isWednesday_;
    }

    public boolean getIsThursday()
    {
        return isThursday_;
    }

    public void setIsThursday(boolean isThursday_)
    {
        this.isThursday_ = isThursday_;
    }

    public boolean getIsFriday()
    {
        return isFriday_;
    }

    public void setIsFriday(boolean isFriday_)
    {
        this.isFriday_ = isFriday_;
    }

    public boolean getIsSaturday()
    {
        return isSaturday_;
    }

    public void setIsSaturday(boolean isSaturday_)
    {
        this.isSaturday_ = isSaturday_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DaysOfWeek)
        {
            final DaysOfWeek that = (DaysOfWeek)obj;

            return
                    isSunday_ == that.isSunday_ &&
                    isMonday_ == that.isMonday_ &&
                    isTuesday_ == that.isTuesday_ &&
                    isWednesday_ == that.isWednesday_ &&
                    isThursday_ == that.isThursday_ &&
                    isFriday_ == that.isFriday_ &&
                    isSaturday_ == that.isSaturday_ &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isSunday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isMonday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isTuesday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isWednesday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isThursday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isFriday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isSaturday_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        isSunday_ = in.readBool();

        isMonday_ = in.readBool();

        isTuesday_ = in.readBool();

        isWednesday_ = in.readBool();

        isThursday_ = in.readBool();

        isFriday_ = in.readBool();

        isSaturday_ = in.readBool();

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(isSunday_);

        out.writeBool(isMonday_);

        out.writeBool(isTuesday_);

        out.writeBool(isWednesday_);

        out.writeBool(isThursday_);

        out.writeBool(isFriday_);

        out.writeBool(isSaturday_);

        out.writeBool(isInclusive_);
    }

    private boolean isSunday_;
    private boolean isMonday_;
    private boolean isTuesday_;
    private boolean isWednesday_;
    private boolean isThursday_;
    private boolean isFriday_;
    private boolean isSaturday_;
    private boolean isInclusive_;
}
