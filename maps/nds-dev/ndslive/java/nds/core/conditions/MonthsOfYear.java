/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class MonthsOfYear implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public MonthsOfYear()
    {
    }

    public MonthsOfYear(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MonthsOfYear(
            boolean january_,
            boolean february_,
            boolean march_,
            boolean april_,
            boolean may_,
            boolean june_,
            boolean july_,
            boolean august_,
            boolean september_,
            boolean october_,
            boolean november_,
            boolean december_,
            boolean isInclusive_)
    {
        setJanuary(january_);
        setFebruary(february_);
        setMarch(march_);
        setApril(april_);
        setMay(may_);
        setJune(june_);
        setJuly(july_);
        setAugust(august_);
        setSeptember(september_);
        setOctober(october_);
        setNovember(november_);
        setDecember(december_);
        setIsInclusive(isInclusive_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getJanuary()
    {
        return january_;
    }

    public void setJanuary(boolean january_)
    {
        this.january_ = january_;
    }

    public boolean getFebruary()
    {
        return february_;
    }

    public void setFebruary(boolean february_)
    {
        this.february_ = february_;
    }

    public boolean getMarch()
    {
        return march_;
    }

    public void setMarch(boolean march_)
    {
        this.march_ = march_;
    }

    public boolean getApril()
    {
        return april_;
    }

    public void setApril(boolean april_)
    {
        this.april_ = april_;
    }

    public boolean getMay()
    {
        return may_;
    }

    public void setMay(boolean may_)
    {
        this.may_ = may_;
    }

    public boolean getJune()
    {
        return june_;
    }

    public void setJune(boolean june_)
    {
        this.june_ = june_;
    }

    public boolean getJuly()
    {
        return july_;
    }

    public void setJuly(boolean july_)
    {
        this.july_ = july_;
    }

    public boolean getAugust()
    {
        return august_;
    }

    public void setAugust(boolean august_)
    {
        this.august_ = august_;
    }

    public boolean getSeptember()
    {
        return september_;
    }

    public void setSeptember(boolean september_)
    {
        this.september_ = september_;
    }

    public boolean getOctober()
    {
        return october_;
    }

    public void setOctober(boolean october_)
    {
        this.october_ = october_;
    }

    public boolean getNovember()
    {
        return november_;
    }

    public void setNovember(boolean november_)
    {
        this.november_ = november_;
    }

    public boolean getDecember()
    {
        return december_;
    }

    public void setDecember(boolean december_)
    {
        this.december_ = december_;
    }

    public boolean getIsInclusive()
    {
        return isInclusive_;
    }

    public void setIsInclusive(boolean isInclusive_)
    {
        this.isInclusive_ = isInclusive_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MonthsOfYear)
        {
            final MonthsOfYear that = (MonthsOfYear)obj;

            return
                    january_ == that.january_ &&
                    february_ == that.february_ &&
                    march_ == that.march_ &&
                    april_ == that.april_ &&
                    may_ == that.may_ &&
                    june_ == that.june_ &&
                    july_ == that.july_ &&
                    august_ == that.august_ &&
                    september_ == that.september_ &&
                    october_ == that.october_ &&
                    november_ == that.november_ &&
                    december_ == that.december_ &&
                    isInclusive_ == that.isInclusive_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, january_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, february_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, march_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, april_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, may_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, june_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, july_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, august_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, september_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, october_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, november_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, december_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInclusive_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        january_ = in.readBool();

        february_ = in.readBool();

        march_ = in.readBool();

        april_ = in.readBool();

        may_ = in.readBool();

        june_ = in.readBool();

        july_ = in.readBool();

        august_ = in.readBool();

        september_ = in.readBool();

        october_ = in.readBool();

        november_ = in.readBool();

        december_ = in.readBool();

        isInclusive_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(january_);

        out.writeBool(february_);

        out.writeBool(march_);

        out.writeBool(april_);

        out.writeBool(may_);

        out.writeBool(june_);

        out.writeBool(july_);

        out.writeBool(august_);

        out.writeBool(september_);

        out.writeBool(october_);

        out.writeBool(november_);

        out.writeBool(december_);

        out.writeBool(isInclusive_);
    }

    private boolean january_;
    private boolean february_;
    private boolean march_;
    private boolean april_;
    private boolean may_;
    private boolean june_;
    private boolean july_;
    private boolean august_;
    private boolean september_;
    private boolean october_;
    private boolean november_;
    private boolean december_;
    private boolean isInclusive_;
}
