/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.conditions;

public class ConditionValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            timeRangeOfDay_ = new nds.core.conditions.TimeRangeOfDay.ZserioPackingContext();
            timeRangeOfWeek_ = new nds.core.conditions.TimeRangeOfWeek.ZserioPackingContext();
            dateRangeOfYear_ = new nds.core.conditions.DateRangeOfYear.ZserioPackingContext();
            dayOfYear_ = new nds.core.conditions.DayOfYear.ZserioPackingContext();
            weekInMonth_ = new nds.core.conditions.WeekInMonth.ZserioPackingContext();
            weekdayInMonth_ = new nds.core.conditions.WeekdayInMonth.ZserioPackingContext();
            calendarWeek_ = new nds.core.conditions.CalendarWeek.ZserioPackingContext();
            timeDuration_ = new nds.core.conditions.TimeDuration.ZserioPackingContext();
            fuzzyTimeDomain_ = new nds.core.conditions.FuzzyTimeDomainCondition.ZserioPackingContext();
            weather_ = new nds.core.conditions.WeatherCondition.ZserioPackingContext();
            frequentlyUsedVehicles_ = new nds.core.conditions.FrequentlyUsedVehicleTypesCondition.ZserioPackingContext();
            slowRoadUsers_ = new nds.core.conditions.SlowRoadUsersCondition.ZserioPackingContext();
            bigVehicles_ = new nds.core.conditions.BigVehiclesCondition.ZserioPackingContext();
            publicServiceVehicles_ = new nds.core.conditions.PublicServiceVehiclesCondition.ZserioPackingContext();
            emergencyMilitaryDetails_ = new nds.core.conditions.EmergencyMilitaryDetailCondition.ZserioPackingContext();
            equipment_ = new nds.core.conditions.EquipmentCondition.ZserioPackingContext();
            authorization_ = new nds.core.conditions.AuthorizationCondition.ZserioPackingContext();
            load_ = new nds.core.conditions.LoadCondition.ZserioPackingContext();
            numAxles_ = new zserio.runtime.array.DeltaContext();
            occupancy_ = new nds.core.conditions.Occupancy.ZserioPackingContext();
            vehicleLengthMetric_ = new zserio.runtime.array.DeltaContext();
            vehicleLengthImperial_ = new zserio.runtime.array.DeltaContext();
            vehicleHeightMetric_ = new zserio.runtime.array.DeltaContext();
            vehicleHeightImperial_ = new zserio.runtime.array.DeltaContext();
            vehicleWidthMetric_ = new zserio.runtime.array.DeltaContext();
            vehicleWidthImperial_ = new zserio.runtime.array.DeltaContext();
            weightMetric_ = new zserio.runtime.array.DeltaContext();
            weightImperial_ = new zserio.runtime.array.DeltaContext();
            weightPerAxleMetric_ = new zserio.runtime.array.DeltaContext();
            weightPerAxleImperial_ = new zserio.runtime.array.DeltaContext();
            weightPerTandemAxleMetric_ = new zserio.runtime.array.DeltaContext();
            weightPerTandemAxleImperial_ = new zserio.runtime.array.DeltaContext();
            weightPerTridemAxleMetric_ = new zserio.runtime.array.DeltaContext();
            weightPerTridemAxleImperial_ = new zserio.runtime.array.DeltaContext();
            timeRangeOfWeekDays_ = new nds.core.conditions.TimeRangeOfWeekDays.ZserioPackingContext();
            visibility_ = new zserio.runtime.array.DeltaContext();
            surface_ = new zserio.runtime.array.DeltaContext();
            euroEmissionClass_ = new zserio.runtime.array.DeltaContext();
            timeDurationHours_ = new nds.core.conditions.TimeDurationHours.ZserioPackingContext();
            timeRangeOfYear_ = new nds.core.conditions.TimeRangeOfYear.ZserioPackingContext();
            numTrailers_ = new nds.core.conditions.NumTrailersCondition.ZserioPackingContext();
            trailerLengthMetric_ = new nds.core.conditions.TrailerLengthMetricCondition.ZserioPackingContext();
            trailerLengthImperial_ = new nds.core.conditions.TrailerLengthImperialCondition.ZserioPackingContext();
            engineDisplacement_ = new zserio.runtime.array.DeltaContext();
            energyType_ = new nds.core.conditions.EnergyTypeCondition.ZserioPackingContext();
            publicBusTypes_ = new nds.core.conditions.PublicBusTypeCondition.ZserioPackingContext();
        }

        public nds.core.conditions.TimeRangeOfDay.ZserioPackingContext getTimeRangeOfDay()
        {
            return timeRangeOfDay_;
        }

        public nds.core.conditions.TimeRangeOfWeek.ZserioPackingContext getTimeRangeOfWeek()
        {
            return timeRangeOfWeek_;
        }

        public nds.core.conditions.DateRangeOfYear.ZserioPackingContext getDateRangeOfYear()
        {
            return dateRangeOfYear_;
        }

        public nds.core.conditions.DayOfYear.ZserioPackingContext getDayOfYear()
        {
            return dayOfYear_;
        }

        public nds.core.conditions.WeekInMonth.ZserioPackingContext getWeekInMonth()
        {
            return weekInMonth_;
        }

        public nds.core.conditions.WeekdayInMonth.ZserioPackingContext getWeekdayInMonth()
        {
            return weekdayInMonth_;
        }

        public nds.core.conditions.CalendarWeek.ZserioPackingContext getCalendarWeek()
        {
            return calendarWeek_;
        }

        public nds.core.conditions.TimeDuration.ZserioPackingContext getTimeDuration()
        {
            return timeDuration_;
        }

        public nds.core.conditions.FuzzyTimeDomainCondition.ZserioPackingContext getFuzzyTimeDomain()
        {
            return fuzzyTimeDomain_;
        }

        public nds.core.conditions.WeatherCondition.ZserioPackingContext getWeather()
        {
            return weather_;
        }

        public nds.core.conditions.FrequentlyUsedVehicleTypesCondition.ZserioPackingContext getFrequentlyUsedVehicles()
        {
            return frequentlyUsedVehicles_;
        }

        public nds.core.conditions.SlowRoadUsersCondition.ZserioPackingContext getSlowRoadUsers()
        {
            return slowRoadUsers_;
        }

        public nds.core.conditions.BigVehiclesCondition.ZserioPackingContext getBigVehicles()
        {
            return bigVehicles_;
        }

        public nds.core.conditions.PublicServiceVehiclesCondition.ZserioPackingContext getPublicServiceVehicles()
        {
            return publicServiceVehicles_;
        }

        public nds.core.conditions.EmergencyMilitaryDetailCondition.ZserioPackingContext getEmergencyMilitaryDetails()
        {
            return emergencyMilitaryDetails_;
        }

        public nds.core.conditions.EquipmentCondition.ZserioPackingContext getEquipment()
        {
            return equipment_;
        }

        public nds.core.conditions.AuthorizationCondition.ZserioPackingContext getAuthorization()
        {
            return authorization_;
        }

        public nds.core.conditions.LoadCondition.ZserioPackingContext getLoad()
        {
            return load_;
        }

        public zserio.runtime.array.DeltaContext getNumAxles()
        {
            return numAxles_;
        }

        public nds.core.conditions.Occupancy.ZserioPackingContext getOccupancy()
        {
            return occupancy_;
        }

        public zserio.runtime.array.DeltaContext getVehicleLengthMetric()
        {
            return vehicleLengthMetric_;
        }

        public zserio.runtime.array.DeltaContext getVehicleLengthImperial()
        {
            return vehicleLengthImperial_;
        }

        public zserio.runtime.array.DeltaContext getVehicleHeightMetric()
        {
            return vehicleHeightMetric_;
        }

        public zserio.runtime.array.DeltaContext getVehicleHeightImperial()
        {
            return vehicleHeightImperial_;
        }

        public zserio.runtime.array.DeltaContext getVehicleWidthMetric()
        {
            return vehicleWidthMetric_;
        }

        public zserio.runtime.array.DeltaContext getVehicleWidthImperial()
        {
            return vehicleWidthImperial_;
        }

        public zserio.runtime.array.DeltaContext getWeightMetric()
        {
            return weightMetric_;
        }

        public zserio.runtime.array.DeltaContext getWeightImperial()
        {
            return weightImperial_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerAxleMetric()
        {
            return weightPerAxleMetric_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerAxleImperial()
        {
            return weightPerAxleImperial_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerTandemAxleMetric()
        {
            return weightPerTandemAxleMetric_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerTandemAxleImperial()
        {
            return weightPerTandemAxleImperial_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerTridemAxleMetric()
        {
            return weightPerTridemAxleMetric_;
        }

        public zserio.runtime.array.DeltaContext getWeightPerTridemAxleImperial()
        {
            return weightPerTridemAxleImperial_;
        }

        public nds.core.conditions.TimeRangeOfWeekDays.ZserioPackingContext getTimeRangeOfWeekDays()
        {
            return timeRangeOfWeekDays_;
        }

        public zserio.runtime.array.DeltaContext getVisibility()
        {
            return visibility_;
        }

        public zserio.runtime.array.DeltaContext getSurface()
        {
            return surface_;
        }

        public zserio.runtime.array.DeltaContext getEuroEmissionClass()
        {
            return euroEmissionClass_;
        }

        public nds.core.conditions.TimeDurationHours.ZserioPackingContext getTimeDurationHours()
        {
            return timeDurationHours_;
        }

        public nds.core.conditions.TimeRangeOfYear.ZserioPackingContext getTimeRangeOfYear()
        {
            return timeRangeOfYear_;
        }

        public nds.core.conditions.NumTrailersCondition.ZserioPackingContext getNumTrailers()
        {
            return numTrailers_;
        }

        public nds.core.conditions.TrailerLengthMetricCondition.ZserioPackingContext getTrailerLengthMetric()
        {
            return trailerLengthMetric_;
        }

        public nds.core.conditions.TrailerLengthImperialCondition.ZserioPackingContext getTrailerLengthImperial()
        {
            return trailerLengthImperial_;
        }

        public zserio.runtime.array.DeltaContext getEngineDisplacement()
        {
            return engineDisplacement_;
        }

        public nds.core.conditions.EnergyTypeCondition.ZserioPackingContext getEnergyType()
        {
            return energyType_;
        }

        public nds.core.conditions.PublicBusTypeCondition.ZserioPackingContext getPublicBusTypes()
        {
            return publicBusTypes_;
        }

        private nds.core.conditions.TimeRangeOfDay.ZserioPackingContext timeRangeOfDay_;
        private nds.core.conditions.TimeRangeOfWeek.ZserioPackingContext timeRangeOfWeek_;
        private nds.core.conditions.DateRangeOfYear.ZserioPackingContext dateRangeOfYear_;
        private nds.core.conditions.DayOfYear.ZserioPackingContext dayOfYear_;
        private nds.core.conditions.WeekInMonth.ZserioPackingContext weekInMonth_;
        private nds.core.conditions.WeekdayInMonth.ZserioPackingContext weekdayInMonth_;
        private nds.core.conditions.CalendarWeek.ZserioPackingContext calendarWeek_;
        private nds.core.conditions.TimeDuration.ZserioPackingContext timeDuration_;
        private nds.core.conditions.FuzzyTimeDomainCondition.ZserioPackingContext fuzzyTimeDomain_;
        private nds.core.conditions.WeatherCondition.ZserioPackingContext weather_;
        private nds.core.conditions.FrequentlyUsedVehicleTypesCondition.ZserioPackingContext frequentlyUsedVehicles_;
        private nds.core.conditions.SlowRoadUsersCondition.ZserioPackingContext slowRoadUsers_;
        private nds.core.conditions.BigVehiclesCondition.ZserioPackingContext bigVehicles_;
        private nds.core.conditions.PublicServiceVehiclesCondition.ZserioPackingContext publicServiceVehicles_;
        private nds.core.conditions.EmergencyMilitaryDetailCondition.ZserioPackingContext emergencyMilitaryDetails_;
        private nds.core.conditions.EquipmentCondition.ZserioPackingContext equipment_;
        private nds.core.conditions.AuthorizationCondition.ZserioPackingContext authorization_;
        private nds.core.conditions.LoadCondition.ZserioPackingContext load_;
        private zserio.runtime.array.DeltaContext numAxles_;
        private nds.core.conditions.Occupancy.ZserioPackingContext occupancy_;
        private zserio.runtime.array.DeltaContext vehicleLengthMetric_;
        private zserio.runtime.array.DeltaContext vehicleLengthImperial_;
        private zserio.runtime.array.DeltaContext vehicleHeightMetric_;
        private zserio.runtime.array.DeltaContext vehicleHeightImperial_;
        private zserio.runtime.array.DeltaContext vehicleWidthMetric_;
        private zserio.runtime.array.DeltaContext vehicleWidthImperial_;
        private zserio.runtime.array.DeltaContext weightMetric_;
        private zserio.runtime.array.DeltaContext weightImperial_;
        private zserio.runtime.array.DeltaContext weightPerAxleMetric_;
        private zserio.runtime.array.DeltaContext weightPerAxleImperial_;
        private zserio.runtime.array.DeltaContext weightPerTandemAxleMetric_;
        private zserio.runtime.array.DeltaContext weightPerTandemAxleImperial_;
        private zserio.runtime.array.DeltaContext weightPerTridemAxleMetric_;
        private zserio.runtime.array.DeltaContext weightPerTridemAxleImperial_;
        private nds.core.conditions.TimeRangeOfWeekDays.ZserioPackingContext timeRangeOfWeekDays_;
        private zserio.runtime.array.DeltaContext visibility_;
        private zserio.runtime.array.DeltaContext surface_;
        private zserio.runtime.array.DeltaContext euroEmissionClass_;
        private nds.core.conditions.TimeDurationHours.ZserioPackingContext timeDurationHours_;
        private nds.core.conditions.TimeRangeOfYear.ZserioPackingContext timeRangeOfYear_;
        private nds.core.conditions.NumTrailersCondition.ZserioPackingContext numTrailers_;
        private nds.core.conditions.TrailerLengthMetricCondition.ZserioPackingContext trailerLengthMetric_;
        private nds.core.conditions.TrailerLengthImperialCondition.ZserioPackingContext trailerLengthImperial_;
        private zserio.runtime.array.DeltaContext engineDisplacement_;
        private nds.core.conditions.EnergyTypeCondition.ZserioPackingContext energyType_;
        private nds.core.conditions.PublicBusTypeCondition.ZserioPackingContext publicBusTypes_;
    };

    public ConditionValue(
            nds.core.conditions.ConditionTypeCode code_)
    {
        this.code_ = code_;
    }

    public ConditionValue(zserio.runtime.io.BitStreamReader in,
            nds.core.conditions.ConditionTypeCode code_)
            throws java.io.IOException
    {
        this.code_ = code_;

        read(in);
    }

    public ConditionValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.conditions.ConditionTypeCode code_)
            throws java.io.IOException
    {
        this.code_ = code_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            return CHOICE_timeRangeOfDay;
        case TIME_RANGE_OF_WEEK:
            return CHOICE_timeRangeOfWeek;
        case DATE_RANGE_OF_YEAR:
            return CHOICE_dateRangeOfYear;
        case DAYS_OF_WEEK:
            return CHOICE_daysOfWeek;
        case DAYS_OF_MONTH:
            return CHOICE_daysOfMonth;
        case DAY_OF_YEAR:
            return CHOICE_dayOfYear;
        case MONTHS_OF_YEAR:
            return CHOICE_monthsOfYear;
        case WEEK_IN_MONTH:
            return CHOICE_weekInMonth;
        case WEEKDAY_IN_MONTH:
            return CHOICE_weekdayInMonth;
        case CALENDAR_WEEK:
            return CHOICE_calendarWeek;
        case TIME_DURATION:
            return CHOICE_timeDuration;
        case ODD_OR_EVEN_DAYS:
            return CHOICE_oddOrEvenDays;
        case FUZZY_TIME_DOMAIN:
            return CHOICE_fuzzyTimeDomain;
        case WEATHER:
            return CHOICE_weather;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            return CHOICE_frequentlyUsedVehicles;
        case SLOW_ROAD_USERS:
            return CHOICE_slowRoadUsers;
        case BIG_VEHICLES:
            return CHOICE_bigVehicles;
        case PUBLIC_SERVICE_VEHICLES:
            return CHOICE_publicServiceVehicles;
        case EMERGENCY_MILITARY_DETAILS:
            return CHOICE_emergencyMilitaryDetails;
        case EQUIPMENT:
            return CHOICE_equipment;
        case AUTHORIZATION:
            return CHOICE_authorization;
        case LOAD:
            return CHOICE_load;
        case NUM_AXLES:
            return CHOICE_numAxles;
        case OCCUPANCY:
            return CHOICE_occupancy;
        case LENGTH_METRIC:
            return CHOICE_vehicleLengthMetric;
        case LENGTH_IMPERIAL:
            return CHOICE_vehicleLengthImperial;
        case VEHICLE_HEIGHT_METRIC:
            return CHOICE_vehicleHeightMetric;
        case VEHICLE_HEIGHT_IMPERIAL:
            return CHOICE_vehicleHeightImperial;
        case VEHICLE_WIDTH_METRIC:
            return CHOICE_vehicleWidthMetric;
        case VEHICLE_WIDTH_IMPERIAL:
            return CHOICE_vehicleWidthImperial;
        case WEIGHT_METRIC:
            return CHOICE_weightMetric;
        case WEIGHT_IMPERIAL:
            return CHOICE_weightImperial;
        case WEIGHT_PER_AXLE_METRIC:
            return CHOICE_weightPerAxleMetric;
        case WEIGHT_PER_AXLE_IMPERIAL:
            return CHOICE_weightPerAxleImperial;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            return CHOICE_weightPerTandemAxleMetric;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            return CHOICE_weightPerTandemAxleImperial;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            return CHOICE_weightPerTridemAxleMetric;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            return CHOICE_weightPerTridemAxleImperial;
        case TIME_RANGE_OF_WEEKDAYS:
            return CHOICE_timeRangeOfWeekDays;
        case VISIBILITY:
            return CHOICE_visibility;
        case SURFACE:
            return CHOICE_surface;
        case EURO_EMISSION_CLASS:
            return CHOICE_euroEmissionClass;
        case TIME_DURATION_HOURS:
            return CHOICE_timeDurationHours;
        case TIME_RANGE_OF_YEAR:
            return CHOICE_timeRangeOfYear;
        case NUM_TRAILERS:
            return CHOICE_numTrailers;
        case TRAILER_LENGTH_METRIC:
            return CHOICE_trailerLengthMetric;
        case TRAILER_LENGTH_IMPERIAL:
            return CHOICE_trailerLengthImperial;
        case ENGINE_DISPLACEMENT:
            return CHOICE_engineDisplacement;
        case ENERGY_TYPE:
            return CHOICE_energyType;
        case BRAKED_TRAILER:
            return CHOICE_brakedTrailer;
        case PUBLIC_BUS_TYPE:
            return CHOICE_publicBusTypes;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            getTimeRangeOfDay().initPackingContext(zserioContext.getTimeRangeOfDay());
            break;
        case TIME_RANGE_OF_WEEK:
            getTimeRangeOfWeek().initPackingContext(zserioContext.getTimeRangeOfWeek());
            break;
        case DATE_RANGE_OF_YEAR:
            getDateRangeOfYear().initPackingContext(zserioContext.getDateRangeOfYear());
            break;
        case DAYS_OF_WEEK:
            break;
        case DAYS_OF_MONTH:
            break;
        case DAY_OF_YEAR:
            getDayOfYear().initPackingContext(zserioContext.getDayOfYear());
            break;
        case MONTHS_OF_YEAR:
            break;
        case WEEK_IN_MONTH:
            getWeekInMonth().initPackingContext(zserioContext.getWeekInMonth());
            break;
        case WEEKDAY_IN_MONTH:
            getWeekdayInMonth().initPackingContext(zserioContext.getWeekdayInMonth());
            break;
        case CALENDAR_WEEK:
            getCalendarWeek().initPackingContext(zserioContext.getCalendarWeek());
            break;
        case TIME_DURATION:
            getTimeDuration().initPackingContext(zserioContext.getTimeDuration());
            break;
        case ODD_OR_EVEN_DAYS:
            break;
        case FUZZY_TIME_DOMAIN:
            getFuzzyTimeDomain().initPackingContext(zserioContext.getFuzzyTimeDomain());
            break;
        case WEATHER:
            getWeather().initPackingContext(zserioContext.getWeather());
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            getFrequentlyUsedVehicles().initPackingContext(zserioContext.getFrequentlyUsedVehicles());
            break;
        case SLOW_ROAD_USERS:
            getSlowRoadUsers().initPackingContext(zserioContext.getSlowRoadUsers());
            break;
        case BIG_VEHICLES:
            getBigVehicles().initPackingContext(zserioContext.getBigVehicles());
            break;
        case PUBLIC_SERVICE_VEHICLES:
            getPublicServiceVehicles().initPackingContext(zserioContext.getPublicServiceVehicles());
            break;
        case EMERGENCY_MILITARY_DETAILS:
            getEmergencyMilitaryDetails().initPackingContext(zserioContext.getEmergencyMilitaryDetails());
            break;
        case EQUIPMENT:
            getEquipment().initPackingContext(zserioContext.getEquipment());
            break;
        case AUTHORIZATION:
            getAuthorization().initPackingContext(zserioContext.getAuthorization());
            break;
        case LOAD:
            getLoad().initPackingContext(zserioContext.getLoad());
            break;
        case NUM_AXLES:
            zserioContext.getNumAxles().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumAxles()));
            break;
        case OCCUPANCY:
            getOccupancy().initPackingContext(zserioContext.getOccupancy());
            break;
        case LENGTH_METRIC:
            zserioContext.getVehicleLengthMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthMetric()));
            break;
        case LENGTH_IMPERIAL:
            zserioContext.getVehicleLengthImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthImperial()));
            break;
        case VEHICLE_HEIGHT_METRIC:
            zserioContext.getVehicleHeightMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightMetric()));
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            zserioContext.getVehicleHeightImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightImperial()));
            break;
        case VEHICLE_WIDTH_METRIC:
            zserioContext.getVehicleWidthMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthMetric()));
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            zserioContext.getVehicleWidthImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthImperial()));
            break;
        case WEIGHT_METRIC:
            zserioContext.getWeightMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightMetric()));
            break;
        case WEIGHT_IMPERIAL:
            zserioContext.getWeightImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightImperial()));
            break;
        case WEIGHT_PER_AXLE_METRIC:
            zserioContext.getWeightPerAxleMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleMetric()));
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            zserioContext.getWeightPerAxleImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleImperial()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            zserioContext.getWeightPerTandemAxleMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleMetric()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            zserioContext.getWeightPerTandemAxleImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleImperial()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            zserioContext.getWeightPerTridemAxleMetric().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleMetric()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            zserioContext.getWeightPerTridemAxleImperial().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleImperial()));
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            getTimeRangeOfWeekDays().initPackingContext(zserioContext.getTimeRangeOfWeekDays());
            break;
        case VISIBILITY:
            getVisibility().initPackingContext(zserioContext.getVisibility());
            break;
        case SURFACE:
            getSurface().initPackingContext(zserioContext.getSurface());
            break;
        case EURO_EMISSION_CLASS:
            getEuroEmissionClass().initPackingContext(zserioContext.getEuroEmissionClass());
            break;
        case TIME_DURATION_HOURS:
            getTimeDurationHours().initPackingContext(zserioContext.getTimeDurationHours());
            break;
        case TIME_RANGE_OF_YEAR:
            getTimeRangeOfYear().initPackingContext(zserioContext.getTimeRangeOfYear());
            break;
        case NUM_TRAILERS:
            getNumTrailers().initPackingContext(zserioContext.getNumTrailers());
            break;
        case TRAILER_LENGTH_METRIC:
            getTrailerLengthMetric().initPackingContext(zserioContext.getTrailerLengthMetric());
            break;
        case TRAILER_LENGTH_IMPERIAL:
            getTrailerLengthImperial().initPackingContext(zserioContext.getTrailerLengthImperial());
            break;
        case ENGINE_DISPLACEMENT:
            zserioContext.getEngineDisplacement().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getEngineDisplacement()));
            break;
        case ENERGY_TYPE:
            getEnergyType().initPackingContext(zserioContext.getEnergyType());
            break;
        case BRAKED_TRAILER:
            break;
        case PUBLIC_BUS_TYPE:
            getPublicBusTypes().initPackingContext(zserioContext.getPublicBusTypes());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            endBitPosition += getTimeRangeOfDay().bitSizeOf(endBitPosition);
            break;
        case TIME_RANGE_OF_WEEK:
            endBitPosition += getTimeRangeOfWeek().bitSizeOf(endBitPosition);
            break;
        case DATE_RANGE_OF_YEAR:
            endBitPosition += getDateRangeOfYear().bitSizeOf(endBitPosition);
            break;
        case DAYS_OF_WEEK:
            endBitPosition += getDaysOfWeek().bitSizeOf(endBitPosition);
            break;
        case DAYS_OF_MONTH:
            endBitPosition += getDaysOfMonth().bitSizeOf(endBitPosition);
            break;
        case DAY_OF_YEAR:
            endBitPosition += getDayOfYear().bitSizeOf(endBitPosition);
            break;
        case MONTHS_OF_YEAR:
            endBitPosition += getMonthsOfYear().bitSizeOf(endBitPosition);
            break;
        case WEEK_IN_MONTH:
            endBitPosition += getWeekInMonth().bitSizeOf(endBitPosition);
            break;
        case WEEKDAY_IN_MONTH:
            endBitPosition += getWeekdayInMonth().bitSizeOf(endBitPosition);
            break;
        case CALENDAR_WEEK:
            endBitPosition += getCalendarWeek().bitSizeOf(endBitPosition);
            break;
        case TIME_DURATION:
            endBitPosition += getTimeDuration().bitSizeOf(endBitPosition);
            break;
        case ODD_OR_EVEN_DAYS:
            endBitPosition += 1;
            break;
        case FUZZY_TIME_DOMAIN:
            endBitPosition += getFuzzyTimeDomain().bitSizeOf(endBitPosition);
            break;
        case WEATHER:
            endBitPosition += getWeather().bitSizeOf(endBitPosition);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            endBitPosition += getFrequentlyUsedVehicles().bitSizeOf(endBitPosition);
            break;
        case SLOW_ROAD_USERS:
            endBitPosition += getSlowRoadUsers().bitSizeOf(endBitPosition);
            break;
        case BIG_VEHICLES:
            endBitPosition += getBigVehicles().bitSizeOf(endBitPosition);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            endBitPosition += getPublicServiceVehicles().bitSizeOf(endBitPosition);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            endBitPosition += getEmergencyMilitaryDetails().bitSizeOf(endBitPosition);
            break;
        case EQUIPMENT:
            endBitPosition += getEquipment().bitSizeOf(endBitPosition);
            break;
        case AUTHORIZATION:
            endBitPosition += getAuthorization().bitSizeOf(endBitPosition);
            break;
        case LOAD:
            endBitPosition += getLoad().bitSizeOf(endBitPosition);
            break;
        case NUM_AXLES:
            endBitPosition += 8;
            break;
        case OCCUPANCY:
            endBitPosition += getOccupancy().bitSizeOf(endBitPosition);
            break;
        case LENGTH_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleLengthMetric());
            break;
        case LENGTH_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleLengthImperial());
            break;
        case VEHICLE_HEIGHT_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleHeightMetric());
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleHeightImperial());
            break;
        case VEHICLE_WIDTH_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleWidthMetric());
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleWidthImperial());
            break;
        case WEIGHT_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightMetric());
            break;
        case WEIGHT_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightImperial());
            break;
        case WEIGHT_PER_AXLE_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerAxleMetric());
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerAxleImperial());
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTandemAxleMetric());
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTandemAxleImperial());
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTridemAxleMetric());
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTridemAxleImperial());
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            endBitPosition += getTimeRangeOfWeekDays().bitSizeOf(endBitPosition);
            break;
        case VISIBILITY:
            endBitPosition += getVisibility().bitSizeOf(endBitPosition);
            break;
        case SURFACE:
            endBitPosition += getSurface().bitSizeOf(endBitPosition);
            break;
        case EURO_EMISSION_CLASS:
            endBitPosition += getEuroEmissionClass().bitSizeOf(endBitPosition);
            break;
        case TIME_DURATION_HOURS:
            endBitPosition += getTimeDurationHours().bitSizeOf(endBitPosition);
            break;
        case TIME_RANGE_OF_YEAR:
            endBitPosition += getTimeRangeOfYear().bitSizeOf(endBitPosition);
            break;
        case NUM_TRAILERS:
            endBitPosition += getNumTrailers().bitSizeOf(endBitPosition);
            break;
        case TRAILER_LENGTH_METRIC:
            endBitPosition += getTrailerLengthMetric().bitSizeOf(endBitPosition);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            endBitPosition += getTrailerLengthImperial().bitSizeOf(endBitPosition);
            break;
        case ENGINE_DISPLACEMENT:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getEngineDisplacement());
            break;
        case ENERGY_TYPE:
            endBitPosition += getEnergyType().bitSizeOf(endBitPosition);
            break;
        case BRAKED_TRAILER:
            endBitPosition += 1;
            break;
        case PUBLIC_BUS_TYPE:
            endBitPosition += getPublicBusTypes().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            endBitPosition += getTimeRangeOfDay().bitSizeOf(zserioContext.getTimeRangeOfDay(), endBitPosition);
            break;
        case TIME_RANGE_OF_WEEK:
            endBitPosition += getTimeRangeOfWeek().bitSizeOf(zserioContext.getTimeRangeOfWeek(), endBitPosition);
            break;
        case DATE_RANGE_OF_YEAR:
            endBitPosition += getDateRangeOfYear().bitSizeOf(zserioContext.getDateRangeOfYear(), endBitPosition);
            break;
        case DAYS_OF_WEEK:
            endBitPosition += getDaysOfWeek().bitSizeOf(endBitPosition);
            break;
        case DAYS_OF_MONTH:
            endBitPosition += getDaysOfMonth().bitSizeOf(endBitPosition);
            break;
        case DAY_OF_YEAR:
            endBitPosition += getDayOfYear().bitSizeOf(zserioContext.getDayOfYear(), endBitPosition);
            break;
        case MONTHS_OF_YEAR:
            endBitPosition += getMonthsOfYear().bitSizeOf(endBitPosition);
            break;
        case WEEK_IN_MONTH:
            endBitPosition += getWeekInMonth().bitSizeOf(zserioContext.getWeekInMonth(), endBitPosition);
            break;
        case WEEKDAY_IN_MONTH:
            endBitPosition += getWeekdayInMonth().bitSizeOf(zserioContext.getWeekdayInMonth(), endBitPosition);
            break;
        case CALENDAR_WEEK:
            endBitPosition += getCalendarWeek().bitSizeOf(zserioContext.getCalendarWeek(), endBitPosition);
            break;
        case TIME_DURATION:
            endBitPosition += getTimeDuration().bitSizeOf(zserioContext.getTimeDuration(), endBitPosition);
            break;
        case ODD_OR_EVEN_DAYS:
            endBitPosition += 1;
            break;
        case FUZZY_TIME_DOMAIN:
            endBitPosition += getFuzzyTimeDomain().bitSizeOf(zserioContext.getFuzzyTimeDomain(), endBitPosition);
            break;
        case WEATHER:
            endBitPosition += getWeather().bitSizeOf(zserioContext.getWeather(), endBitPosition);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            endBitPosition += getFrequentlyUsedVehicles().bitSizeOf(zserioContext.getFrequentlyUsedVehicles(), endBitPosition);
            break;
        case SLOW_ROAD_USERS:
            endBitPosition += getSlowRoadUsers().bitSizeOf(zserioContext.getSlowRoadUsers(), endBitPosition);
            break;
        case BIG_VEHICLES:
            endBitPosition += getBigVehicles().bitSizeOf(zserioContext.getBigVehicles(), endBitPosition);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            endBitPosition += getPublicServiceVehicles().bitSizeOf(zserioContext.getPublicServiceVehicles(), endBitPosition);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            endBitPosition += getEmergencyMilitaryDetails().bitSizeOf(zserioContext.getEmergencyMilitaryDetails(), endBitPosition);
            break;
        case EQUIPMENT:
            endBitPosition += getEquipment().bitSizeOf(zserioContext.getEquipment(), endBitPosition);
            break;
        case AUTHORIZATION:
            endBitPosition += getAuthorization().bitSizeOf(zserioContext.getAuthorization(), endBitPosition);
            break;
        case LOAD:
            endBitPosition += getLoad().bitSizeOf(zserioContext.getLoad(), endBitPosition);
            break;
        case NUM_AXLES:
            endBitPosition += zserioContext.getNumAxles().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumAxles()));
            break;
        case OCCUPANCY:
            endBitPosition += getOccupancy().bitSizeOf(zserioContext.getOccupancy(), endBitPosition);
            break;
        case LENGTH_METRIC:
            endBitPosition += zserioContext.getVehicleLengthMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthMetric()));
            break;
        case LENGTH_IMPERIAL:
            endBitPosition += zserioContext.getVehicleLengthImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthImperial()));
            break;
        case VEHICLE_HEIGHT_METRIC:
            endBitPosition += zserioContext.getVehicleHeightMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightMetric()));
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            endBitPosition += zserioContext.getVehicleHeightImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightImperial()));
            break;
        case VEHICLE_WIDTH_METRIC:
            endBitPosition += zserioContext.getVehicleWidthMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthMetric()));
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            endBitPosition += zserioContext.getVehicleWidthImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthImperial()));
            break;
        case WEIGHT_METRIC:
            endBitPosition += zserioContext.getWeightMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightMetric()));
            break;
        case WEIGHT_IMPERIAL:
            endBitPosition += zserioContext.getWeightImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightImperial()));
            break;
        case WEIGHT_PER_AXLE_METRIC:
            endBitPosition += zserioContext.getWeightPerAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleMetric()));
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            endBitPosition += zserioContext.getWeightPerAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleImperial()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            endBitPosition += zserioContext.getWeightPerTandemAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleMetric()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            endBitPosition += zserioContext.getWeightPerTandemAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleImperial()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            endBitPosition += zserioContext.getWeightPerTridemAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleMetric()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            endBitPosition += zserioContext.getWeightPerTridemAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleImperial()));
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            endBitPosition += getTimeRangeOfWeekDays().bitSizeOf(zserioContext.getTimeRangeOfWeekDays(), endBitPosition);
            break;
        case VISIBILITY:
            endBitPosition += getVisibility().bitSizeOf(zserioContext.getVisibility(), endBitPosition);
            break;
        case SURFACE:
            endBitPosition += getSurface().bitSizeOf(zserioContext.getSurface(), endBitPosition);
            break;
        case EURO_EMISSION_CLASS:
            endBitPosition += getEuroEmissionClass().bitSizeOf(zserioContext.getEuroEmissionClass(), endBitPosition);
            break;
        case TIME_DURATION_HOURS:
            endBitPosition += getTimeDurationHours().bitSizeOf(zserioContext.getTimeDurationHours(), endBitPosition);
            break;
        case TIME_RANGE_OF_YEAR:
            endBitPosition += getTimeRangeOfYear().bitSizeOf(zserioContext.getTimeRangeOfYear(), endBitPosition);
            break;
        case NUM_TRAILERS:
            endBitPosition += getNumTrailers().bitSizeOf(zserioContext.getNumTrailers(), endBitPosition);
            break;
        case TRAILER_LENGTH_METRIC:
            endBitPosition += getTrailerLengthMetric().bitSizeOf(zserioContext.getTrailerLengthMetric(), endBitPosition);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            endBitPosition += getTrailerLengthImperial().bitSizeOf(zserioContext.getTrailerLengthImperial(), endBitPosition);
            break;
        case ENGINE_DISPLACEMENT:
            endBitPosition += zserioContext.getEngineDisplacement().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getEngineDisplacement()));
            break;
        case ENERGY_TYPE:
            endBitPosition += getEnergyType().bitSizeOf(zserioContext.getEnergyType(), endBitPosition);
            break;
        case BRAKED_TRAILER:
            endBitPosition += 1;
            break;
        case PUBLIC_BUS_TYPE:
            endBitPosition += getPublicBusTypes().bitSizeOf(zserioContext.getPublicBusTypes(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.ConditionTypeCode getCode()
    {
        return this.code_;
    }

    public nds.core.conditions.TimeRangeOfDay getTimeRangeOfDay()
    {
        return (nds.core.conditions.TimeRangeOfDay)objectChoice;
    }

    public void setTimeRangeOfDay(nds.core.conditions.TimeRangeOfDay timeRangeOfDay_)
    {
        objectChoice = timeRangeOfDay_;
    }

    public nds.core.conditions.TimeRangeOfWeek getTimeRangeOfWeek()
    {
        return (nds.core.conditions.TimeRangeOfWeek)objectChoice;
    }

    public void setTimeRangeOfWeek(nds.core.conditions.TimeRangeOfWeek timeRangeOfWeek_)
    {
        objectChoice = timeRangeOfWeek_;
    }

    public nds.core.conditions.DateRangeOfYear getDateRangeOfYear()
    {
        return (nds.core.conditions.DateRangeOfYear)objectChoice;
    }

    public void setDateRangeOfYear(nds.core.conditions.DateRangeOfYear dateRangeOfYear_)
    {
        objectChoice = dateRangeOfYear_;
    }

    public nds.core.conditions.DaysOfWeek getDaysOfWeek()
    {
        return (nds.core.conditions.DaysOfWeek)objectChoice;
    }

    public void setDaysOfWeek(nds.core.conditions.DaysOfWeek daysOfWeek_)
    {
        objectChoice = daysOfWeek_;
    }

    public nds.core.conditions.DaysOfMonth getDaysOfMonth()
    {
        return (nds.core.conditions.DaysOfMonth)objectChoice;
    }

    public void setDaysOfMonth(nds.core.conditions.DaysOfMonth daysOfMonth_)
    {
        objectChoice = daysOfMonth_;
    }

    public nds.core.conditions.DayOfYear getDayOfYear()
    {
        return (nds.core.conditions.DayOfYear)objectChoice;
    }

    public void setDayOfYear(nds.core.conditions.DayOfYear dayOfYear_)
    {
        objectChoice = dayOfYear_;
    }

    public nds.core.conditions.MonthsOfYear getMonthsOfYear()
    {
        return (nds.core.conditions.MonthsOfYear)objectChoice;
    }

    public void setMonthsOfYear(nds.core.conditions.MonthsOfYear monthsOfYear_)
    {
        objectChoice = monthsOfYear_;
    }

    public nds.core.conditions.WeekInMonth getWeekInMonth()
    {
        return (nds.core.conditions.WeekInMonth)objectChoice;
    }

    public void setWeekInMonth(nds.core.conditions.WeekInMonth weekInMonth_)
    {
        objectChoice = weekInMonth_;
    }

    public nds.core.conditions.WeekdayInMonth getWeekdayInMonth()
    {
        return (nds.core.conditions.WeekdayInMonth)objectChoice;
    }

    public void setWeekdayInMonth(nds.core.conditions.WeekdayInMonth weekdayInMonth_)
    {
        objectChoice = weekdayInMonth_;
    }

    public nds.core.conditions.CalendarWeek getCalendarWeek()
    {
        return (nds.core.conditions.CalendarWeek)objectChoice;
    }

    public void setCalendarWeek(nds.core.conditions.CalendarWeek calendarWeek_)
    {
        objectChoice = calendarWeek_;
    }

    public nds.core.conditions.TimeDuration getTimeDuration()
    {
        return (nds.core.conditions.TimeDuration)objectChoice;
    }

    public void setTimeDuration(nds.core.conditions.TimeDuration timeDuration_)
    {
        objectChoice = timeDuration_;
    }

    public boolean getOddOrEvenDays()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setOddOrEvenDays(boolean oddOrEvenDays_)
    {
        objectChoice = oddOrEvenDays_;
    }

    public nds.core.conditions.FuzzyTimeDomainCondition getFuzzyTimeDomain()
    {
        return (nds.core.conditions.FuzzyTimeDomainCondition)objectChoice;
    }

    public void setFuzzyTimeDomain(nds.core.conditions.FuzzyTimeDomainCondition fuzzyTimeDomain_)
    {
        objectChoice = fuzzyTimeDomain_;
    }

    public nds.core.conditions.WeatherCondition getWeather()
    {
        return (nds.core.conditions.WeatherCondition)objectChoice;
    }

    public void setWeather(nds.core.conditions.WeatherCondition weather_)
    {
        objectChoice = weather_;
    }

    public nds.core.conditions.FrequentlyUsedVehicleTypesCondition getFrequentlyUsedVehicles()
    {
        return (nds.core.conditions.FrequentlyUsedVehicleTypesCondition)objectChoice;
    }

    public void setFrequentlyUsedVehicles(nds.core.conditions.FrequentlyUsedVehicleTypesCondition frequentlyUsedVehicles_)
    {
        objectChoice = frequentlyUsedVehicles_;
    }

    public nds.core.conditions.SlowRoadUsersCondition getSlowRoadUsers()
    {
        return (nds.core.conditions.SlowRoadUsersCondition)objectChoice;
    }

    public void setSlowRoadUsers(nds.core.conditions.SlowRoadUsersCondition slowRoadUsers_)
    {
        objectChoice = slowRoadUsers_;
    }

    public nds.core.conditions.BigVehiclesCondition getBigVehicles()
    {
        return (nds.core.conditions.BigVehiclesCondition)objectChoice;
    }

    public void setBigVehicles(nds.core.conditions.BigVehiclesCondition bigVehicles_)
    {
        objectChoice = bigVehicles_;
    }

    public nds.core.conditions.PublicServiceVehiclesCondition getPublicServiceVehicles()
    {
        return (nds.core.conditions.PublicServiceVehiclesCondition)objectChoice;
    }

    public void setPublicServiceVehicles(nds.core.conditions.PublicServiceVehiclesCondition publicServiceVehicles_)
    {
        objectChoice = publicServiceVehicles_;
    }

    public nds.core.conditions.EmergencyMilitaryDetailCondition getEmergencyMilitaryDetails()
    {
        return (nds.core.conditions.EmergencyMilitaryDetailCondition)objectChoice;
    }

    public void setEmergencyMilitaryDetails(nds.core.conditions.EmergencyMilitaryDetailCondition emergencyMilitaryDetails_)
    {
        objectChoice = emergencyMilitaryDetails_;
    }

    public nds.core.conditions.EquipmentCondition getEquipment()
    {
        return (nds.core.conditions.EquipmentCondition)objectChoice;
    }

    public void setEquipment(nds.core.conditions.EquipmentCondition equipment_)
    {
        objectChoice = equipment_;
    }

    public nds.core.conditions.AuthorizationCondition getAuthorization()
    {
        return (nds.core.conditions.AuthorizationCondition)objectChoice;
    }

    public void setAuthorization(nds.core.conditions.AuthorizationCondition authorization_)
    {
        objectChoice = authorization_;
    }

    public nds.core.conditions.LoadCondition getLoad()
    {
        return (nds.core.conditions.LoadCondition)objectChoice;
    }

    public void setLoad(nds.core.conditions.LoadCondition load_)
    {
        objectChoice = load_;
    }

    public short getNumAxles()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumAxles(short numAxles_)
    {
        objectChoice = numAxles_;
    }

    public nds.core.conditions.Occupancy getOccupancy()
    {
        return (nds.core.conditions.Occupancy)objectChoice;
    }

    public void setOccupancy(nds.core.conditions.Occupancy occupancy_)
    {
        objectChoice = occupancy_;
    }

    public int getVehicleLengthMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleLengthMetric(int vehicleLengthMetric_)
    {
        objectChoice = vehicleLengthMetric_;
    }

    public int getVehicleLengthImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleLengthImperial(int vehicleLengthImperial_)
    {
        objectChoice = vehicleLengthImperial_;
    }

    public int getVehicleHeightMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleHeightMetric(int vehicleHeightMetric_)
    {
        objectChoice = vehicleHeightMetric_;
    }

    public int getVehicleHeightImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleHeightImperial(int vehicleHeightImperial_)
    {
        objectChoice = vehicleHeightImperial_;
    }

    public int getVehicleWidthMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleWidthMetric(int vehicleWidthMetric_)
    {
        objectChoice = vehicleWidthMetric_;
    }

    public int getVehicleWidthImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setVehicleWidthImperial(int vehicleWidthImperial_)
    {
        objectChoice = vehicleWidthImperial_;
    }

    public int getWeightMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightMetric(int weightMetric_)
    {
        objectChoice = weightMetric_;
    }

    public int getWeightImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightImperial(int weightImperial_)
    {
        objectChoice = weightImperial_;
    }

    public int getWeightPerAxleMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerAxleMetric(int weightPerAxleMetric_)
    {
        objectChoice = weightPerAxleMetric_;
    }

    public int getWeightPerAxleImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerAxleImperial(int weightPerAxleImperial_)
    {
        objectChoice = weightPerAxleImperial_;
    }

    public int getWeightPerTandemAxleMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerTandemAxleMetric(int weightPerTandemAxleMetric_)
    {
        objectChoice = weightPerTandemAxleMetric_;
    }

    public int getWeightPerTandemAxleImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerTandemAxleImperial(int weightPerTandemAxleImperial_)
    {
        objectChoice = weightPerTandemAxleImperial_;
    }

    public int getWeightPerTridemAxleMetric()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerTridemAxleMetric(int weightPerTridemAxleMetric_)
    {
        objectChoice = weightPerTridemAxleMetric_;
    }

    public int getWeightPerTridemAxleImperial()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setWeightPerTridemAxleImperial(int weightPerTridemAxleImperial_)
    {
        objectChoice = weightPerTridemAxleImperial_;
    }

    public nds.core.conditions.TimeRangeOfWeekDays getTimeRangeOfWeekDays()
    {
        return (nds.core.conditions.TimeRangeOfWeekDays)objectChoice;
    }

    public void setTimeRangeOfWeekDays(nds.core.conditions.TimeRangeOfWeekDays timeRangeOfWeekDays_)
    {
        objectChoice = timeRangeOfWeekDays_;
    }

    public nds.core.conditions.Visibility getVisibility()
    {
        return (nds.core.conditions.Visibility)objectChoice;
    }

    public void setVisibility(nds.core.conditions.Visibility visibility_)
    {
        objectChoice = visibility_;
    }

    public nds.core.conditions.Surface getSurface()
    {
        return (nds.core.conditions.Surface)objectChoice;
    }

    public void setSurface(nds.core.conditions.Surface surface_)
    {
        objectChoice = surface_;
    }

    public nds.core.vehicle.VehicleEuroEmissionClass getEuroEmissionClass()
    {
        return (nds.core.vehicle.VehicleEuroEmissionClass)objectChoice;
    }

    public void setEuroEmissionClass(nds.core.vehicle.VehicleEuroEmissionClass euroEmissionClass_)
    {
        objectChoice = euroEmissionClass_;
    }

    public nds.core.conditions.TimeDurationHours getTimeDurationHours()
    {
        return (nds.core.conditions.TimeDurationHours)objectChoice;
    }

    public void setTimeDurationHours(nds.core.conditions.TimeDurationHours timeDurationHours_)
    {
        objectChoice = timeDurationHours_;
    }

    public nds.core.conditions.TimeRangeOfYear getTimeRangeOfYear()
    {
        return (nds.core.conditions.TimeRangeOfYear)objectChoice;
    }

    public void setTimeRangeOfYear(nds.core.conditions.TimeRangeOfYear timeRangeOfYear_)
    {
        objectChoice = timeRangeOfYear_;
    }

    public nds.core.conditions.NumTrailersCondition getNumTrailers()
    {
        return (nds.core.conditions.NumTrailersCondition)objectChoice;
    }

    public void setNumTrailers(nds.core.conditions.NumTrailersCondition numTrailers_)
    {
        objectChoice = numTrailers_;
    }

    public nds.core.conditions.TrailerLengthMetricCondition getTrailerLengthMetric()
    {
        return (nds.core.conditions.TrailerLengthMetricCondition)objectChoice;
    }

    public void setTrailerLengthMetric(nds.core.conditions.TrailerLengthMetricCondition trailerLengthMetric_)
    {
        objectChoice = trailerLengthMetric_;
    }

    public nds.core.conditions.TrailerLengthImperialCondition getTrailerLengthImperial()
    {
        return (nds.core.conditions.TrailerLengthImperialCondition)objectChoice;
    }

    public void setTrailerLengthImperial(nds.core.conditions.TrailerLengthImperialCondition trailerLengthImperial_)
    {
        objectChoice = trailerLengthImperial_;
    }

    public short getEngineDisplacement()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setEngineDisplacement(short engineDisplacement_)
    {
        objectChoice = engineDisplacement_;
    }

    public nds.core.conditions.EnergyTypeCondition getEnergyType()
    {
        return (nds.core.conditions.EnergyTypeCondition)objectChoice;
    }

    public void setEnergyType(nds.core.conditions.EnergyTypeCondition energyType_)
    {
        objectChoice = energyType_;
    }

    public boolean getBrakedTrailer()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setBrakedTrailer(boolean brakedTrailer_)
    {
        objectChoice = brakedTrailer_;
    }

    public nds.core.conditions.PublicBusTypeCondition getPublicBusTypes()
    {
        return (nds.core.conditions.PublicBusTypeCondition)objectChoice;
    }

    public void setPublicBusTypes(nds.core.conditions.PublicBusTypeCondition publicBusTypes_)
    {
        objectChoice = publicBusTypes_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ConditionValue)
        {
            final ConditionValue that = (ConditionValue)obj;

            return
                    ((this.code_ == null) ? that.code_ == null : this.code_.getValue() == that.code_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getCode());
        if (objectChoice != null)
        {
            switch (getCode())
            {
            case TIME_RANGE_OF_DAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeRangeOfDay)objectChoice);
                break;
            case TIME_RANGE_OF_WEEK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeRangeOfWeek)objectChoice);
                break;
            case DATE_RANGE_OF_YEAR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.DateRangeOfYear)objectChoice);
                break;
            case DAYS_OF_WEEK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.DaysOfWeek)objectChoice);
                break;
            case DAYS_OF_MONTH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.DaysOfMonth)objectChoice);
                break;
            case DAY_OF_YEAR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.DayOfYear)objectChoice);
                break;
            case MONTHS_OF_YEAR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.MonthsOfYear)objectChoice);
                break;
            case WEEK_IN_MONTH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.WeekInMonth)objectChoice);
                break;
            case WEEKDAY_IN_MONTH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.WeekdayInMonth)objectChoice);
                break;
            case CALENDAR_WEEK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.CalendarWeek)objectChoice);
                break;
            case TIME_DURATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeDuration)objectChoice);
                break;
            case ODD_OR_EVEN_DAYS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case FUZZY_TIME_DOMAIN:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.FuzzyTimeDomainCondition)objectChoice);
                break;
            case WEATHER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.WeatherCondition)objectChoice);
                break;
            case FREQUENTLY_USED_VEHICLE_TYPES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.FrequentlyUsedVehicleTypesCondition)objectChoice);
                break;
            case SLOW_ROAD_USERS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.SlowRoadUsersCondition)objectChoice);
                break;
            case BIG_VEHICLES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.BigVehiclesCondition)objectChoice);
                break;
            case PUBLIC_SERVICE_VEHICLES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.PublicServiceVehiclesCondition)objectChoice);
                break;
            case EMERGENCY_MILITARY_DETAILS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.EmergencyMilitaryDetailCondition)objectChoice);
                break;
            case EQUIPMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.EquipmentCondition)objectChoice);
                break;
            case AUTHORIZATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.AuthorizationCondition)objectChoice);
                break;
            case LOAD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.LoadCondition)objectChoice);
                break;
            case NUM_AXLES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case OCCUPANCY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.Occupancy)objectChoice);
                break;
            case LENGTH_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case LENGTH_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case VEHICLE_HEIGHT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case VEHICLE_HEIGHT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case VEHICLE_WIDTH_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case VEHICLE_WIDTH_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_AXLE_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_AXLE_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_TANDEM_AXLE_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_TRIDEM_AXLE_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case TIME_RANGE_OF_WEEKDAYS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeRangeOfWeekDays)objectChoice);
                break;
            case VISIBILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.Visibility)objectChoice);
                break;
            case SURFACE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.Surface)objectChoice);
                break;
            case EURO_EMISSION_CLASS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.vehicle.VehicleEuroEmissionClass)objectChoice);
                break;
            case TIME_DURATION_HOURS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeDurationHours)objectChoice);
                break;
            case TIME_RANGE_OF_YEAR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TimeRangeOfYear)objectChoice);
                break;
            case NUM_TRAILERS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.NumTrailersCondition)objectChoice);
                break;
            case TRAILER_LENGTH_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TrailerLengthMetricCondition)objectChoice);
                break;
            case TRAILER_LENGTH_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.TrailerLengthImperialCondition)objectChoice);
                break;
            case ENGINE_DISPLACEMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ENERGY_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.EnergyTypeCondition)objectChoice);
                break;
            case BRAKED_TRAILER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case PUBLIC_BUS_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.PublicBusTypeCondition)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            objectChoice = new nds.core.conditions.TimeRangeOfDay(in);
            break;
        case TIME_RANGE_OF_WEEK:
            objectChoice = new nds.core.conditions.TimeRangeOfWeek(in);
            break;
        case DATE_RANGE_OF_YEAR:
            objectChoice = new nds.core.conditions.DateRangeOfYear(in);
            break;
        case DAYS_OF_WEEK:
            objectChoice = new nds.core.conditions.DaysOfWeek(in);
            break;
        case DAYS_OF_MONTH:
            objectChoice = new nds.core.conditions.DaysOfMonth(in);
            break;
        case DAY_OF_YEAR:
            objectChoice = new nds.core.conditions.DayOfYear(in);
            break;
        case MONTHS_OF_YEAR:
            objectChoice = new nds.core.conditions.MonthsOfYear(in);
            break;
        case WEEK_IN_MONTH:
            objectChoice = new nds.core.conditions.WeekInMonth(in);
            break;
        case WEEKDAY_IN_MONTH:
            objectChoice = new nds.core.conditions.WeekdayInMonth(in);
            break;
        case CALENDAR_WEEK:
            objectChoice = new nds.core.conditions.CalendarWeek(in);
            break;
        case TIME_DURATION:
            objectChoice = new nds.core.conditions.TimeDuration(in);
            break;
        case ODD_OR_EVEN_DAYS:
            objectChoice = in.readBool();
            break;
        case FUZZY_TIME_DOMAIN:
            objectChoice = new nds.core.conditions.FuzzyTimeDomainCondition(in);
            break;
        case WEATHER:
            objectChoice = new nds.core.conditions.WeatherCondition(in);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            objectChoice = new nds.core.conditions.FrequentlyUsedVehicleTypesCondition(in);
            break;
        case SLOW_ROAD_USERS:
            objectChoice = new nds.core.conditions.SlowRoadUsersCondition(in);
            break;
        case BIG_VEHICLES:
            objectChoice = new nds.core.conditions.BigVehiclesCondition(in);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            objectChoice = new nds.core.conditions.PublicServiceVehiclesCondition(in);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            objectChoice = new nds.core.conditions.EmergencyMilitaryDetailCondition(in);
            break;
        case EQUIPMENT:
            objectChoice = new nds.core.conditions.EquipmentCondition(in);
            break;
        case AUTHORIZATION:
            objectChoice = new nds.core.conditions.AuthorizationCondition(in);
            break;
        case LOAD:
            objectChoice = new nds.core.conditions.LoadCondition(in);
            break;
        case NUM_AXLES:
            objectChoice = in.readUnsignedByte();
            break;
        case OCCUPANCY:
            objectChoice = new nds.core.conditions.Occupancy(in);
            break;
        case LENGTH_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case LENGTH_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case VEHICLE_HEIGHT_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case VEHICLE_WIDTH_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_AXLE_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            objectChoice = in.readVarUInt32();
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            objectChoice = new nds.core.conditions.TimeRangeOfWeekDays(in);
            break;
        case VISIBILITY:
            objectChoice = nds.core.conditions.Visibility.readEnum(in);
            break;
        case SURFACE:
            objectChoice = nds.core.conditions.Surface.readEnum(in);
            break;
        case EURO_EMISSION_CLASS:
            objectChoice = new nds.core.vehicle.VehicleEuroEmissionClass(in);
            break;
        case TIME_DURATION_HOURS:
            objectChoice = new nds.core.conditions.TimeDurationHours(in);
            break;
        case TIME_RANGE_OF_YEAR:
            objectChoice = new nds.core.conditions.TimeRangeOfYear(in);
            break;
        case NUM_TRAILERS:
            objectChoice = new nds.core.conditions.NumTrailersCondition(in);
            break;
        case TRAILER_LENGTH_METRIC:
            objectChoice = new nds.core.conditions.TrailerLengthMetricCondition(in);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            objectChoice = new nds.core.conditions.TrailerLengthImperialCondition(in);
            break;
        case ENGINE_DISPLACEMENT:
            objectChoice = in.readVarUInt16();
            break;
        case ENERGY_TYPE:
            objectChoice = new nds.core.conditions.EnergyTypeCondition(in);
            break;
        case BRAKED_TRAILER:
            objectChoice = in.readBool();
            break;
        case PUBLIC_BUS_TYPE:
            objectChoice = new nds.core.conditions.PublicBusTypeCondition(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            objectChoice = new nds.core.conditions.TimeRangeOfDay(zserioContext.getTimeRangeOfDay(), in);
            break;
        case TIME_RANGE_OF_WEEK:
            objectChoice = new nds.core.conditions.TimeRangeOfWeek(zserioContext.getTimeRangeOfWeek(), in);
            break;
        case DATE_RANGE_OF_YEAR:
            objectChoice = new nds.core.conditions.DateRangeOfYear(zserioContext.getDateRangeOfYear(), in);
            break;
        case DAYS_OF_WEEK:
            objectChoice = new nds.core.conditions.DaysOfWeek(in);
            break;
        case DAYS_OF_MONTH:
            objectChoice = new nds.core.conditions.DaysOfMonth(in);
            break;
        case DAY_OF_YEAR:
            objectChoice = new nds.core.conditions.DayOfYear(zserioContext.getDayOfYear(), in);
            break;
        case MONTHS_OF_YEAR:
            objectChoice = new nds.core.conditions.MonthsOfYear(in);
            break;
        case WEEK_IN_MONTH:
            objectChoice = new nds.core.conditions.WeekInMonth(zserioContext.getWeekInMonth(), in);
            break;
        case WEEKDAY_IN_MONTH:
            objectChoice = new nds.core.conditions.WeekdayInMonth(zserioContext.getWeekdayInMonth(), in);
            break;
        case CALENDAR_WEEK:
            objectChoice = new nds.core.conditions.CalendarWeek(zserioContext.getCalendarWeek(), in);
            break;
        case TIME_DURATION:
            objectChoice = new nds.core.conditions.TimeDuration(zserioContext.getTimeDuration(), in);
            break;
        case ODD_OR_EVEN_DAYS:
            objectChoice = in.readBool();
            break;
        case FUZZY_TIME_DOMAIN:
            objectChoice = new nds.core.conditions.FuzzyTimeDomainCondition(zserioContext.getFuzzyTimeDomain(), in);
            break;
        case WEATHER:
            objectChoice = new nds.core.conditions.WeatherCondition(zserioContext.getWeather(), in);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            objectChoice = new nds.core.conditions.FrequentlyUsedVehicleTypesCondition(zserioContext.getFrequentlyUsedVehicles(), in);
            break;
        case SLOW_ROAD_USERS:
            objectChoice = new nds.core.conditions.SlowRoadUsersCondition(zserioContext.getSlowRoadUsers(), in);
            break;
        case BIG_VEHICLES:
            objectChoice = new nds.core.conditions.BigVehiclesCondition(zserioContext.getBigVehicles(), in);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            objectChoice = new nds.core.conditions.PublicServiceVehiclesCondition(zserioContext.getPublicServiceVehicles(), in);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            objectChoice = new nds.core.conditions.EmergencyMilitaryDetailCondition(zserioContext.getEmergencyMilitaryDetails(), in);
            break;
        case EQUIPMENT:
            objectChoice = new nds.core.conditions.EquipmentCondition(zserioContext.getEquipment(), in);
            break;
        case AUTHORIZATION:
            objectChoice = new nds.core.conditions.AuthorizationCondition(zserioContext.getAuthorization(), in);
            break;
        case LOAD:
            objectChoice = new nds.core.conditions.LoadCondition(zserioContext.getLoad(), in);
            break;
        case NUM_AXLES:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumAxles().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case OCCUPANCY:
            objectChoice = new nds.core.conditions.Occupancy(zserioContext.getOccupancy(), in);
            break;
        case LENGTH_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleLengthMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case LENGTH_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleLengthImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case VEHICLE_HEIGHT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleHeightMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleHeightImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case VEHICLE_WIDTH_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleWidthMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getVehicleWidthImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_AXLE_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerAxleMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerAxleImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerTandemAxleMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerTandemAxleImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerTridemAxleMetric().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getWeightPerTridemAxleImperial().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            objectChoice = new nds.core.conditions.TimeRangeOfWeekDays(zserioContext.getTimeRangeOfWeekDays(), in);
            break;
        case VISIBILITY:
            objectChoice = nds.core.conditions.Visibility.readEnum(zserioContext.getVisibility(), in);
            break;
        case SURFACE:
            objectChoice = nds.core.conditions.Surface.readEnum(zserioContext.getSurface(), in);
            break;
        case EURO_EMISSION_CLASS:
            objectChoice = new nds.core.vehicle.VehicleEuroEmissionClass(zserioContext.getEuroEmissionClass(), in);
            break;
        case TIME_DURATION_HOURS:
            objectChoice = new nds.core.conditions.TimeDurationHours(zserioContext.getTimeDurationHours(), in);
            break;
        case TIME_RANGE_OF_YEAR:
            objectChoice = new nds.core.conditions.TimeRangeOfYear(zserioContext.getTimeRangeOfYear(), in);
            break;
        case NUM_TRAILERS:
            objectChoice = new nds.core.conditions.NumTrailersCondition(zserioContext.getNumTrailers(), in);
            break;
        case TRAILER_LENGTH_METRIC:
            objectChoice = new nds.core.conditions.TrailerLengthMetricCondition(zserioContext.getTrailerLengthMetric(), in);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            objectChoice = new nds.core.conditions.TrailerLengthImperialCondition(zserioContext.getTrailerLengthImperial(), in);
            break;
        case ENGINE_DISPLACEMENT:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getEngineDisplacement().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case ENERGY_TYPE:
            objectChoice = new nds.core.conditions.EnergyTypeCondition(zserioContext.getEnergyType(), in);
            break;
        case BRAKED_TRAILER:
            objectChoice = in.readBool();
            break;
        case PUBLIC_BUS_TYPE:
            objectChoice = new nds.core.conditions.PublicBusTypeCondition(zserioContext.getPublicBusTypes(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            {
                endBitPosition = getTimeRangeOfDay().initializeOffsets(endBitPosition);
            }
            break;
        case TIME_RANGE_OF_WEEK:
            {
                endBitPosition = getTimeRangeOfWeek().initializeOffsets(endBitPosition);
            }
            break;
        case DATE_RANGE_OF_YEAR:
            {
                endBitPosition = getDateRangeOfYear().initializeOffsets(endBitPosition);
            }
            break;
        case DAYS_OF_WEEK:
            {
                endBitPosition = getDaysOfWeek().initializeOffsets(endBitPosition);
            }
            break;
        case DAYS_OF_MONTH:
            {
                endBitPosition = getDaysOfMonth().initializeOffsets(endBitPosition);
            }
            break;
        case DAY_OF_YEAR:
            {
                endBitPosition = getDayOfYear().initializeOffsets(endBitPosition);
            }
            break;
        case MONTHS_OF_YEAR:
            {
                endBitPosition = getMonthsOfYear().initializeOffsets(endBitPosition);
            }
            break;
        case WEEK_IN_MONTH:
            {
                endBitPosition = getWeekInMonth().initializeOffsets(endBitPosition);
            }
            break;
        case WEEKDAY_IN_MONTH:
            {
                endBitPosition = getWeekdayInMonth().initializeOffsets(endBitPosition);
            }
            break;
        case CALENDAR_WEEK:
            {
                endBitPosition = getCalendarWeek().initializeOffsets(endBitPosition);
            }
            break;
        case TIME_DURATION:
            {
                endBitPosition = getTimeDuration().initializeOffsets(endBitPosition);
            }
            break;
        case ODD_OR_EVEN_DAYS:
            {
                endBitPosition += 1;
            }
            break;
        case FUZZY_TIME_DOMAIN:
            {
                endBitPosition = getFuzzyTimeDomain().initializeOffsets(endBitPosition);
            }
            break;
        case WEATHER:
            {
                endBitPosition = getWeather().initializeOffsets(endBitPosition);
            }
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            {
                endBitPosition = getFrequentlyUsedVehicles().initializeOffsets(endBitPosition);
            }
            break;
        case SLOW_ROAD_USERS:
            {
                endBitPosition = getSlowRoadUsers().initializeOffsets(endBitPosition);
            }
            break;
        case BIG_VEHICLES:
            {
                endBitPosition = getBigVehicles().initializeOffsets(endBitPosition);
            }
            break;
        case PUBLIC_SERVICE_VEHICLES:
            {
                endBitPosition = getPublicServiceVehicles().initializeOffsets(endBitPosition);
            }
            break;
        case EMERGENCY_MILITARY_DETAILS:
            {
                endBitPosition = getEmergencyMilitaryDetails().initializeOffsets(endBitPosition);
            }
            break;
        case EQUIPMENT:
            {
                endBitPosition = getEquipment().initializeOffsets(endBitPosition);
            }
            break;
        case AUTHORIZATION:
            {
                endBitPosition = getAuthorization().initializeOffsets(endBitPosition);
            }
            break;
        case LOAD:
            {
                endBitPosition = getLoad().initializeOffsets(endBitPosition);
            }
            break;
        case NUM_AXLES:
            {
                endBitPosition += 8;
            }
            break;
        case OCCUPANCY:
            {
                endBitPosition = getOccupancy().initializeOffsets(endBitPosition);
            }
            break;
        case LENGTH_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleLengthMetric());
            }
            break;
        case LENGTH_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleLengthImperial());
            }
            break;
        case VEHICLE_HEIGHT_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleHeightMetric());
            }
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleHeightImperial());
            }
            break;
        case VEHICLE_WIDTH_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleWidthMetric());
            }
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getVehicleWidthImperial());
            }
            break;
        case WEIGHT_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightMetric());
            }
            break;
        case WEIGHT_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightImperial());
            }
            break;
        case WEIGHT_PER_AXLE_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerAxleMetric());
            }
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerAxleImperial());
            }
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTandemAxleMetric());
            }
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTandemAxleImperial());
            }
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTridemAxleMetric());
            }
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getWeightPerTridemAxleImperial());
            }
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            {
                endBitPosition = getTimeRangeOfWeekDays().initializeOffsets(endBitPosition);
            }
            break;
        case VISIBILITY:
            {
                endBitPosition += getVisibility().bitSizeOf(endBitPosition);
            }
            break;
        case SURFACE:
            {
                endBitPosition += getSurface().bitSizeOf(endBitPosition);
            }
            break;
        case EURO_EMISSION_CLASS:
            {
                endBitPosition += getEuroEmissionClass().bitSizeOf(endBitPosition);
            }
            break;
        case TIME_DURATION_HOURS:
            {
                endBitPosition = getTimeDurationHours().initializeOffsets(endBitPosition);
            }
            break;
        case TIME_RANGE_OF_YEAR:
            {
                endBitPosition = getTimeRangeOfYear().initializeOffsets(endBitPosition);
            }
            break;
        case NUM_TRAILERS:
            {
                endBitPosition = getNumTrailers().initializeOffsets(endBitPosition);
            }
            break;
        case TRAILER_LENGTH_METRIC:
            {
                endBitPosition = getTrailerLengthMetric().initializeOffsets(endBitPosition);
            }
            break;
        case TRAILER_LENGTH_IMPERIAL:
            {
                endBitPosition = getTrailerLengthImperial().initializeOffsets(endBitPosition);
            }
            break;
        case ENGINE_DISPLACEMENT:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getEngineDisplacement());
            }
            break;
        case ENERGY_TYPE:
            {
                endBitPosition = getEnergyType().initializeOffsets(endBitPosition);
            }
            break;
        case BRAKED_TRAILER:
            {
                endBitPosition += 1;
            }
            break;
        case PUBLIC_BUS_TYPE:
            {
                endBitPosition = getPublicBusTypes().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            {
                endBitPosition = getTimeRangeOfDay().initializeOffsets(zserioContext.getTimeRangeOfDay(), endBitPosition);
            }
            break;
        case TIME_RANGE_OF_WEEK:
            {
                endBitPosition = getTimeRangeOfWeek().initializeOffsets(zserioContext.getTimeRangeOfWeek(), endBitPosition);
            }
            break;
        case DATE_RANGE_OF_YEAR:
            {
                endBitPosition = getDateRangeOfYear().initializeOffsets(zserioContext.getDateRangeOfYear(), endBitPosition);
            }
            break;
        case DAYS_OF_WEEK:
            {
                endBitPosition = getDaysOfWeek().initializeOffsets(endBitPosition);
            }
            break;
        case DAYS_OF_MONTH:
            {
                endBitPosition = getDaysOfMonth().initializeOffsets(endBitPosition);
            }
            break;
        case DAY_OF_YEAR:
            {
                endBitPosition = getDayOfYear().initializeOffsets(zserioContext.getDayOfYear(), endBitPosition);
            }
            break;
        case MONTHS_OF_YEAR:
            {
                endBitPosition = getMonthsOfYear().initializeOffsets(endBitPosition);
            }
            break;
        case WEEK_IN_MONTH:
            {
                endBitPosition = getWeekInMonth().initializeOffsets(zserioContext.getWeekInMonth(), endBitPosition);
            }
            break;
        case WEEKDAY_IN_MONTH:
            {
                endBitPosition = getWeekdayInMonth().initializeOffsets(zserioContext.getWeekdayInMonth(), endBitPosition);
            }
            break;
        case CALENDAR_WEEK:
            {
                endBitPosition = getCalendarWeek().initializeOffsets(zserioContext.getCalendarWeek(), endBitPosition);
            }
            break;
        case TIME_DURATION:
            {
                endBitPosition = getTimeDuration().initializeOffsets(zserioContext.getTimeDuration(), endBitPosition);
            }
            break;
        case ODD_OR_EVEN_DAYS:
            {
                endBitPosition += 1;
            }
            break;
        case FUZZY_TIME_DOMAIN:
            {
                endBitPosition = getFuzzyTimeDomain().initializeOffsets(zserioContext.getFuzzyTimeDomain(), endBitPosition);
            }
            break;
        case WEATHER:
            {
                endBitPosition = getWeather().initializeOffsets(zserioContext.getWeather(), endBitPosition);
            }
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            {
                endBitPosition = getFrequentlyUsedVehicles().initializeOffsets(zserioContext.getFrequentlyUsedVehicles(), endBitPosition);
            }
            break;
        case SLOW_ROAD_USERS:
            {
                endBitPosition = getSlowRoadUsers().initializeOffsets(zserioContext.getSlowRoadUsers(), endBitPosition);
            }
            break;
        case BIG_VEHICLES:
            {
                endBitPosition = getBigVehicles().initializeOffsets(zserioContext.getBigVehicles(), endBitPosition);
            }
            break;
        case PUBLIC_SERVICE_VEHICLES:
            {
                endBitPosition = getPublicServiceVehicles().initializeOffsets(zserioContext.getPublicServiceVehicles(), endBitPosition);
            }
            break;
        case EMERGENCY_MILITARY_DETAILS:
            {
                endBitPosition = getEmergencyMilitaryDetails().initializeOffsets(zserioContext.getEmergencyMilitaryDetails(), endBitPosition);
            }
            break;
        case EQUIPMENT:
            {
                endBitPosition = getEquipment().initializeOffsets(zserioContext.getEquipment(), endBitPosition);
            }
            break;
        case AUTHORIZATION:
            {
                endBitPosition = getAuthorization().initializeOffsets(zserioContext.getAuthorization(), endBitPosition);
            }
            break;
        case LOAD:
            {
                endBitPosition = getLoad().initializeOffsets(zserioContext.getLoad(), endBitPosition);
            }
            break;
        case NUM_AXLES:
            {
                endBitPosition += zserioContext.getNumAxles().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumAxles()));
            }
            break;
        case OCCUPANCY:
            {
                endBitPosition = getOccupancy().initializeOffsets(zserioContext.getOccupancy(), endBitPosition);
            }
            break;
        case LENGTH_METRIC:
            {
                endBitPosition += zserioContext.getVehicleLengthMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthMetric()));
            }
            break;
        case LENGTH_IMPERIAL:
            {
                endBitPosition += zserioContext.getVehicleLengthImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthImperial()));
            }
            break;
        case VEHICLE_HEIGHT_METRIC:
            {
                endBitPosition += zserioContext.getVehicleHeightMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightMetric()));
            }
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            {
                endBitPosition += zserioContext.getVehicleHeightImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightImperial()));
            }
            break;
        case VEHICLE_WIDTH_METRIC:
            {
                endBitPosition += zserioContext.getVehicleWidthMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthMetric()));
            }
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            {
                endBitPosition += zserioContext.getVehicleWidthImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthImperial()));
            }
            break;
        case WEIGHT_METRIC:
            {
                endBitPosition += zserioContext.getWeightMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightMetric()));
            }
            break;
        case WEIGHT_IMPERIAL:
            {
                endBitPosition += zserioContext.getWeightImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightImperial()));
            }
            break;
        case WEIGHT_PER_AXLE_METRIC:
            {
                endBitPosition += zserioContext.getWeightPerAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleMetric()));
            }
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            {
                endBitPosition += zserioContext.getWeightPerAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleImperial()));
            }
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            {
                endBitPosition += zserioContext.getWeightPerTandemAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleMetric()));
            }
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            {
                endBitPosition += zserioContext.getWeightPerTandemAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleImperial()));
            }
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            {
                endBitPosition += zserioContext.getWeightPerTridemAxleMetric().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleMetric()));
            }
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            {
                endBitPosition += zserioContext.getWeightPerTridemAxleImperial().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleImperial()));
            }
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            {
                endBitPosition = getTimeRangeOfWeekDays().initializeOffsets(zserioContext.getTimeRangeOfWeekDays(), endBitPosition);
            }
            break;
        case VISIBILITY:
            {
                endBitPosition = getVisibility().initializeOffsets(zserioContext.getVisibility(), endBitPosition);
            }
            break;
        case SURFACE:
            {
                endBitPosition = getSurface().initializeOffsets(zserioContext.getSurface(), endBitPosition);
            }
            break;
        case EURO_EMISSION_CLASS:
            {
                endBitPosition = getEuroEmissionClass().initializeOffsets(zserioContext.getEuroEmissionClass(), endBitPosition);
            }
            break;
        case TIME_DURATION_HOURS:
            {
                endBitPosition = getTimeDurationHours().initializeOffsets(zserioContext.getTimeDurationHours(), endBitPosition);
            }
            break;
        case TIME_RANGE_OF_YEAR:
            {
                endBitPosition = getTimeRangeOfYear().initializeOffsets(zserioContext.getTimeRangeOfYear(), endBitPosition);
            }
            break;
        case NUM_TRAILERS:
            {
                endBitPosition = getNumTrailers().initializeOffsets(zserioContext.getNumTrailers(), endBitPosition);
            }
            break;
        case TRAILER_LENGTH_METRIC:
            {
                endBitPosition = getTrailerLengthMetric().initializeOffsets(zserioContext.getTrailerLengthMetric(), endBitPosition);
            }
            break;
        case TRAILER_LENGTH_IMPERIAL:
            {
                endBitPosition = getTrailerLengthImperial().initializeOffsets(zserioContext.getTrailerLengthImperial(), endBitPosition);
            }
            break;
        case ENGINE_DISPLACEMENT:
            {
                endBitPosition += zserioContext.getEngineDisplacement().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getEngineDisplacement()));
            }
            break;
        case ENERGY_TYPE:
            {
                endBitPosition = getEnergyType().initializeOffsets(zserioContext.getEnergyType(), endBitPosition);
            }
            break;
        case BRAKED_TRAILER:
            {
                endBitPosition += 1;
            }
            break;
        case PUBLIC_BUS_TYPE:
            {
                endBitPosition = getPublicBusTypes().initializeOffsets(zserioContext.getPublicBusTypes(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            getTimeRangeOfDay().write(out);
            break;
        case TIME_RANGE_OF_WEEK:
            getTimeRangeOfWeek().write(out);
            break;
        case DATE_RANGE_OF_YEAR:
            getDateRangeOfYear().write(out);
            break;
        case DAYS_OF_WEEK:
            getDaysOfWeek().write(out);
            break;
        case DAYS_OF_MONTH:
            getDaysOfMonth().write(out);
            break;
        case DAY_OF_YEAR:
            getDayOfYear().write(out);
            break;
        case MONTHS_OF_YEAR:
            getMonthsOfYear().write(out);
            break;
        case WEEK_IN_MONTH:
            getWeekInMonth().write(out);
            break;
        case WEEKDAY_IN_MONTH:
            getWeekdayInMonth().write(out);
            break;
        case CALENDAR_WEEK:
            getCalendarWeek().write(out);
            break;
        case TIME_DURATION:
            getTimeDuration().write(out);
            break;
        case ODD_OR_EVEN_DAYS:
            out.writeBool(getOddOrEvenDays());
            break;
        case FUZZY_TIME_DOMAIN:
            getFuzzyTimeDomain().write(out);
            break;
        case WEATHER:
            getWeather().write(out);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            getFrequentlyUsedVehicles().write(out);
            break;
        case SLOW_ROAD_USERS:
            getSlowRoadUsers().write(out);
            break;
        case BIG_VEHICLES:
            getBigVehicles().write(out);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            getPublicServiceVehicles().write(out);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            getEmergencyMilitaryDetails().write(out);
            break;
        case EQUIPMENT:
            getEquipment().write(out);
            break;
        case AUTHORIZATION:
            getAuthorization().write(out);
            break;
        case LOAD:
            getLoad().write(out);
            break;
        case NUM_AXLES:
            out.writeUnsignedByte(getNumAxles());
            break;
        case OCCUPANCY:
            getOccupancy().write(out);
            break;
        case LENGTH_METRIC:
            out.writeVarUInt32(getVehicleLengthMetric());
            break;
        case LENGTH_IMPERIAL:
            out.writeVarUInt32(getVehicleLengthImperial());
            break;
        case VEHICLE_HEIGHT_METRIC:
            out.writeVarUInt32(getVehicleHeightMetric());
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            out.writeVarUInt32(getVehicleHeightImperial());
            break;
        case VEHICLE_WIDTH_METRIC:
            out.writeVarUInt32(getVehicleWidthMetric());
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            out.writeVarUInt32(getVehicleWidthImperial());
            break;
        case WEIGHT_METRIC:
            out.writeVarUInt32(getWeightMetric());
            break;
        case WEIGHT_IMPERIAL:
            out.writeVarUInt32(getWeightImperial());
            break;
        case WEIGHT_PER_AXLE_METRIC:
            out.writeVarUInt32(getWeightPerAxleMetric());
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            out.writeVarUInt32(getWeightPerAxleImperial());
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            out.writeVarUInt32(getWeightPerTandemAxleMetric());
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            out.writeVarUInt32(getWeightPerTandemAxleImperial());
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            out.writeVarUInt32(getWeightPerTridemAxleMetric());
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            out.writeVarUInt32(getWeightPerTridemAxleImperial());
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            getTimeRangeOfWeekDays().write(out);
            break;
        case VISIBILITY:
            getVisibility().write(out);
            break;
        case SURFACE:
            getSurface().write(out);
            break;
        case EURO_EMISSION_CLASS:
            getEuroEmissionClass().write(out);
            break;
        case TIME_DURATION_HOURS:
            getTimeDurationHours().write(out);
            break;
        case TIME_RANGE_OF_YEAR:
            getTimeRangeOfYear().write(out);
            break;
        case NUM_TRAILERS:
            getNumTrailers().write(out);
            break;
        case TRAILER_LENGTH_METRIC:
            getTrailerLengthMetric().write(out);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            getTrailerLengthImperial().write(out);
            break;
        case ENGINE_DISPLACEMENT:
            out.writeVarUInt16(getEngineDisplacement());
            break;
        case ENERGY_TYPE:
            getEnergyType().write(out);
            break;
        case BRAKED_TRAILER:
            out.writeBool(getBrakedTrailer());
            break;
        case PUBLIC_BUS_TYPE:
            getPublicBusTypes().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getCode())
        {
        case TIME_RANGE_OF_DAY:
            getTimeRangeOfDay().write(zserioContext.getTimeRangeOfDay(), out);
            break;
        case TIME_RANGE_OF_WEEK:
            getTimeRangeOfWeek().write(zserioContext.getTimeRangeOfWeek(), out);
            break;
        case DATE_RANGE_OF_YEAR:
            getDateRangeOfYear().write(zserioContext.getDateRangeOfYear(), out);
            break;
        case DAYS_OF_WEEK:
            getDaysOfWeek().write(out);
            break;
        case DAYS_OF_MONTH:
            getDaysOfMonth().write(out);
            break;
        case DAY_OF_YEAR:
            getDayOfYear().write(zserioContext.getDayOfYear(), out);
            break;
        case MONTHS_OF_YEAR:
            getMonthsOfYear().write(out);
            break;
        case WEEK_IN_MONTH:
            getWeekInMonth().write(zserioContext.getWeekInMonth(), out);
            break;
        case WEEKDAY_IN_MONTH:
            getWeekdayInMonth().write(zserioContext.getWeekdayInMonth(), out);
            break;
        case CALENDAR_WEEK:
            getCalendarWeek().write(zserioContext.getCalendarWeek(), out);
            break;
        case TIME_DURATION:
            getTimeDuration().write(zserioContext.getTimeDuration(), out);
            break;
        case ODD_OR_EVEN_DAYS:
            out.writeBool(getOddOrEvenDays());
            break;
        case FUZZY_TIME_DOMAIN:
            getFuzzyTimeDomain().write(zserioContext.getFuzzyTimeDomain(), out);
            break;
        case WEATHER:
            getWeather().write(zserioContext.getWeather(), out);
            break;
        case FREQUENTLY_USED_VEHICLE_TYPES:
            getFrequentlyUsedVehicles().write(zserioContext.getFrequentlyUsedVehicles(), out);
            break;
        case SLOW_ROAD_USERS:
            getSlowRoadUsers().write(zserioContext.getSlowRoadUsers(), out);
            break;
        case BIG_VEHICLES:
            getBigVehicles().write(zserioContext.getBigVehicles(), out);
            break;
        case PUBLIC_SERVICE_VEHICLES:
            getPublicServiceVehicles().write(zserioContext.getPublicServiceVehicles(), out);
            break;
        case EMERGENCY_MILITARY_DETAILS:
            getEmergencyMilitaryDetails().write(zserioContext.getEmergencyMilitaryDetails(), out);
            break;
        case EQUIPMENT:
            getEquipment().write(zserioContext.getEquipment(), out);
            break;
        case AUTHORIZATION:
            getAuthorization().write(zserioContext.getAuthorization(), out);
            break;
        case LOAD:
            getLoad().write(zserioContext.getLoad(), out);
            break;
        case NUM_AXLES:
            zserioContext.getNumAxles().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumAxles()));
            break;
        case OCCUPANCY:
            getOccupancy().write(zserioContext.getOccupancy(), out);
            break;
        case LENGTH_METRIC:
            zserioContext.getVehicleLengthMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthMetric()));
            break;
        case LENGTH_IMPERIAL:
            zserioContext.getVehicleLengthImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleLengthImperial()));
            break;
        case VEHICLE_HEIGHT_METRIC:
            zserioContext.getVehicleHeightMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightMetric()));
            break;
        case VEHICLE_HEIGHT_IMPERIAL:
            zserioContext.getVehicleHeightImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleHeightImperial()));
            break;
        case VEHICLE_WIDTH_METRIC:
            zserioContext.getVehicleWidthMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthMetric()));
            break;
        case VEHICLE_WIDTH_IMPERIAL:
            zserioContext.getVehicleWidthImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getVehicleWidthImperial()));
            break;
        case WEIGHT_METRIC:
            zserioContext.getWeightMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightMetric()));
            break;
        case WEIGHT_IMPERIAL:
            zserioContext.getWeightImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightImperial()));
            break;
        case WEIGHT_PER_AXLE_METRIC:
            zserioContext.getWeightPerAxleMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleMetric()));
            break;
        case WEIGHT_PER_AXLE_IMPERIAL:
            zserioContext.getWeightPerAxleImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerAxleImperial()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_METRIC:
            zserioContext.getWeightPerTandemAxleMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleMetric()));
            break;
        case WEIGHT_PER_TANDEM_AXLE_IMPERIAL:
            zserioContext.getWeightPerTandemAxleImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTandemAxleImperial()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_METRIC:
            zserioContext.getWeightPerTridemAxleMetric().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleMetric()));
            break;
        case WEIGHT_PER_TRIDEM_AXLE_IMPERIAL:
            zserioContext.getWeightPerTridemAxleImperial().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getWeightPerTridemAxleImperial()));
            break;
        case TIME_RANGE_OF_WEEKDAYS:
            getTimeRangeOfWeekDays().write(zserioContext.getTimeRangeOfWeekDays(), out);
            break;
        case VISIBILITY:
            getVisibility().write(zserioContext.getVisibility(), out);
            break;
        case SURFACE:
            getSurface().write(zserioContext.getSurface(), out);
            break;
        case EURO_EMISSION_CLASS:
            getEuroEmissionClass().write(zserioContext.getEuroEmissionClass(), out);
            break;
        case TIME_DURATION_HOURS:
            getTimeDurationHours().write(zserioContext.getTimeDurationHours(), out);
            break;
        case TIME_RANGE_OF_YEAR:
            getTimeRangeOfYear().write(zserioContext.getTimeRangeOfYear(), out);
            break;
        case NUM_TRAILERS:
            getNumTrailers().write(zserioContext.getNumTrailers(), out);
            break;
        case TRAILER_LENGTH_METRIC:
            getTrailerLengthMetric().write(zserioContext.getTrailerLengthMetric(), out);
            break;
        case TRAILER_LENGTH_IMPERIAL:
            getTrailerLengthImperial().write(zserioContext.getTrailerLengthImperial(), out);
            break;
        case ENGINE_DISPLACEMENT:
            zserioContext.getEngineDisplacement().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getEngineDisplacement()));
            break;
        case ENERGY_TYPE:
            getEnergyType().write(zserioContext.getEnergyType(), out);
            break;
        case BRAKED_TRAILER:
            out.writeBool(getBrakedTrailer());
            break;
        case PUBLIC_BUS_TYPE:
            getPublicBusTypes().write(zserioContext.getPublicBusTypes(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ConditionValue: " + getCode() + "!");
        }
    }

    public static final int CHOICE_timeRangeOfDay = 0;
    public static final int CHOICE_timeRangeOfWeek = 1;
    public static final int CHOICE_dateRangeOfYear = 2;
    public static final int CHOICE_daysOfWeek = 3;
    public static final int CHOICE_daysOfMonth = 4;
    public static final int CHOICE_dayOfYear = 5;
    public static final int CHOICE_monthsOfYear = 6;
    public static final int CHOICE_weekInMonth = 7;
    public static final int CHOICE_weekdayInMonth = 8;
    public static final int CHOICE_calendarWeek = 9;
    public static final int CHOICE_timeDuration = 10;
    public static final int CHOICE_oddOrEvenDays = 11;
    public static final int CHOICE_fuzzyTimeDomain = 12;
    public static final int CHOICE_weather = 13;
    public static final int CHOICE_frequentlyUsedVehicles = 14;
    public static final int CHOICE_slowRoadUsers = 15;
    public static final int CHOICE_bigVehicles = 16;
    public static final int CHOICE_publicServiceVehicles = 17;
    public static final int CHOICE_emergencyMilitaryDetails = 18;
    public static final int CHOICE_equipment = 19;
    public static final int CHOICE_authorization = 20;
    public static final int CHOICE_load = 21;
    public static final int CHOICE_numAxles = 22;
    public static final int CHOICE_occupancy = 23;
    public static final int CHOICE_vehicleLengthMetric = 24;
    public static final int CHOICE_vehicleLengthImperial = 25;
    public static final int CHOICE_vehicleHeightMetric = 26;
    public static final int CHOICE_vehicleHeightImperial = 27;
    public static final int CHOICE_vehicleWidthMetric = 28;
    public static final int CHOICE_vehicleWidthImperial = 29;
    public static final int CHOICE_weightMetric = 30;
    public static final int CHOICE_weightImperial = 31;
    public static final int CHOICE_weightPerAxleMetric = 32;
    public static final int CHOICE_weightPerAxleImperial = 33;
    public static final int CHOICE_weightPerTandemAxleMetric = 34;
    public static final int CHOICE_weightPerTandemAxleImperial = 35;
    public static final int CHOICE_weightPerTridemAxleMetric = 36;
    public static final int CHOICE_weightPerTridemAxleImperial = 37;
    public static final int CHOICE_timeRangeOfWeekDays = 38;
    public static final int CHOICE_visibility = 39;
    public static final int CHOICE_surface = 40;
    public static final int CHOICE_euroEmissionClass = 41;
    public static final int CHOICE_timeDurationHours = 42;
    public static final int CHOICE_timeRangeOfYear = 43;
    public static final int CHOICE_numTrailers = 44;
    public static final int CHOICE_trailerLengthMetric = 45;
    public static final int CHOICE_trailerLengthImperial = 46;
    public static final int CHOICE_engineDisplacement = 47;
    public static final int CHOICE_energyType = 48;
    public static final int CHOICE_brakedTrailer = 49;
    public static final int CHOICE_publicBusTypes = 50;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.core.conditions.ConditionTypeCode code_;
    private java.lang.Object objectChoice;
}
