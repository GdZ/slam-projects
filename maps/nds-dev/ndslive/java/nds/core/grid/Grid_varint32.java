/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.grid;

public class Grid_varint32 implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            southWestCorner_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            numRows_ = new zserio.runtime.array.DeltaContext();
            numColumns_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getSouthWestCorner()
        {
            return southWestCorner_;
        }

        public zserio.runtime.array.DeltaContext getNumRows()
        {
            return numRows_;
        }

        public zserio.runtime.array.DeltaContext getNumColumns()
        {
            return numColumns_;
        }

        private nds.core.geometry.Position2D.ZserioPackingContext southWestCorner_;
        private zserio.runtime.array.DeltaContext numRows_;
        private zserio.runtime.array.DeltaContext numColumns_;
    };

    public Grid_varint32(
            int size_,
            byte shift_)
    {
        this.size_ = size_;
        this.shift_ = shift_;
    }

    public Grid_varint32(zserio.runtime.io.BitStreamReader in,
            int size_,
            byte shift_)
            throws java.io.IOException
    {
        this.size_ = size_;
        this.shift_ = shift_;

        read(in);
    }

    public Grid_varint32(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            int size_,
            byte shift_)
            throws java.io.IOException
    {
        this.size_ = size_;
        this.shift_ = shift_;

        read(context, in);
    }

    public Grid_varint32(
            int size_,
            byte shift_,
            nds.core.geometry.Position2D southWestCorner_,
            int numRows_,
            int numColumns_,
            int[] grid_)
    {
        this(size_, shift_);

        setSouthWestCorner(southWestCorner_);
        setNumRows(numRows_);
        setNumColumns(numColumns_);
        setGrid(grid_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_.initPackingContext(zserioContext.getSouthWestCorner());
        zserioContext.getNumRows().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        zserioContext.getNumColumns().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += southWestCorner_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRows_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numColumns_);
        endBitPosition += grid_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += southWestCorner_.bitSizeOf(zserioContext.getSouthWestCorner(), endBitPosition);
        endBitPosition += zserioContext.getNumRows().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        endBitPosition += zserioContext.getNumColumns().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
        endBitPosition += grid_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getSize()
    {
        return this.size_;
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.core.geometry.Position2D getSouthWestCorner()
    {
        return southWestCorner_;
    }

    public void setSouthWestCorner(nds.core.geometry.Position2D southWestCorner_)
    {
        this.southWestCorner_ = southWestCorner_;
    }

    public int getNumRows()
    {
        return numRows_;
    }

    public void setNumRows(int numRows_)
    {
        this.numRows_ = numRows_;
    }

    public int getNumColumns()
    {
        return numColumns_;
    }

    public void setNumColumns(int numColumns_)
    {
        this.numColumns_ = numColumns_;
    }

    public int[] getGrid()
    {
        return (grid_ == null) ? null : grid_.getRawArray();
    }

    public void setGrid(int[] grid_)
    {
        this.grid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(grid_),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int funcCellSize()
    {
        return (int)(getSize());
    }

    public long funcWidth()
    {
        return (long)(getNumColumns() * getSize());
    }

    public long funcHeight()
    {
        return (long)(getNumRows() * getSize());
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Grid_varint32)
        {
            final Grid_varint32 that = (Grid_varint32)obj;

            return
                    this.size_ == that.size_ &&
                    this.shift_ == that.shift_ &&
                    ((southWestCorner_ == null) ? that.southWestCorner_ == null : southWestCorner_.equals(that.southWestCorner_)) &&
                    numRows_ == that.numRows_ &&
                    numColumns_ == that.numColumns_ &&
                    ((grid_ == null) ? that.grid_ == null : grid_.equals(that.grid_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getSize());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, southWestCorner_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRows_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numColumns_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, grid_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        southWestCorner_ = new nds.core.geometry.Position2D(in, (byte)(getShift()));

        numRows_ = in.readVarSize();

        numColumns_ = in.readVarSize();

        grid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        grid_.readPacked(in, (int)(getNumRows() * getNumColumns()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_ = new nds.core.geometry.Position2D(zserioContext.getSouthWestCorner(), in, (byte)(getShift()));

        numRows_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumRows().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numColumns_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumColumns().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        grid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        grid_.readPacked(in, (int)(getNumRows() * getNumColumns()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = southWestCorner_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRows_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numColumns_);
        endBitPosition = grid_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = southWestCorner_.initializeOffsets(zserioContext.getSouthWestCorner(), endBitPosition);
        endBitPosition += zserioContext.getNumRows().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        endBitPosition += zserioContext.getNumColumns().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
        endBitPosition = grid_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (southWestCorner_.getShift() != (byte)(getShift()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field Grid_varint32.southWestCorner: " +
                    southWestCorner_.getShift() + " != " + (byte)(getShift()) + "!");
        }
        southWestCorner_.write(out);

        out.writeVarSize(numRows_);

        out.writeVarSize(numColumns_);

        if (grid_.size() != (int)(getNumRows() * getNumColumns()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Grid_varint32.grid: " +
                    grid_.size() + " != " + (int)(getNumRows() * getNumColumns()) + "!");
        }
        grid_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_.write(zserioContext.getSouthWestCorner(), out);

        zserioContext.getNumRows().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));

        zserioContext.getNumColumns().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));

        if (grid_.size() != (int)(getNumRows() * getNumColumns()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Grid_varint32.grid: " +
                    grid_.size() + " != " + (int)(getNumRows() * getNumColumns()) + "!");
        }
        grid_.writePacked(out);
    }

    private final int size_;
    private final byte shift_;
    private nds.core.geometry.Position2D southWestCorner_;
    private int numRows_;
    private int numColumns_;
    private zserio.runtime.array.Array grid_;
}
