/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.properties;

public class AttributeReason implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            hasPosition_ = new zserio.runtime.array.DeltaContext();
            position2D_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            position3D_ = new nds.core.geometry.Position3D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getHasPosition()
        {
            return hasPosition_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getPosition2D()
        {
            return position2D_;
        }

        public nds.core.geometry.Position3D.ZserioPackingContext getPosition3D()
        {
            return position3D_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext hasPosition_;
        private nds.core.geometry.Position2D.ZserioPackingContext position2D_;
        private nds.core.geometry.Position3D.ZserioPackingContext position3D_;
    };

    public AttributeReason()
    {
    }

    public AttributeReason(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public AttributeReason(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public AttributeReason(
            nds.core.properties.AttributeReasonType type_,
            nds.core.properties.AttributeReasonPositionAvailability hasPosition_,
            nds.core.geometry.Position2D position2D_,
            nds.core.geometry.Position3D position3D_)
    {
        setType(type_);
        setHasPosition(hasPosition_);
        setPosition2D(position2D_);
        setPosition3D(position3D_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        hasPosition_.initPackingContext(zserioContext.getHasPosition());
        if (isPosition2DUsed())
        {
            position2D_.initPackingContext(zserioContext.getPosition2D());
        }
        if (isPosition3DUsed())
        {
            position3D_.initPackingContext(zserioContext.getPosition3D());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += hasPosition_.bitSizeOf(endBitPosition);
        if (isPosition2DUsed())
        {
            endBitPosition += position2D_.bitSizeOf(endBitPosition);
        }
        if (isPosition3DUsed())
        {
            endBitPosition += position3D_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += hasPosition_.bitSizeOf(zserioContext.getHasPosition(), endBitPosition);
        if (isPosition2DUsed())
        {
            endBitPosition += position2D_.bitSizeOf(zserioContext.getPosition2D(), endBitPosition);
        }
        if (isPosition3DUsed())
        {
            endBitPosition += position3D_.bitSizeOf(zserioContext.getPosition3D(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.properties.AttributeReasonType getType()
    {
        return type_;
    }

    public void setType(nds.core.properties.AttributeReasonType type_)
    {
        this.type_ = type_;
    }

    public nds.core.properties.AttributeReasonPositionAvailability getHasPosition()
    {
        return hasPosition_;
    }

    public void setHasPosition(nds.core.properties.AttributeReasonPositionAvailability hasPosition_)
    {
        this.hasPosition_ = hasPosition_;
    }

    public nds.core.geometry.Position2D getPosition2D()
    {
        return position2D_;
    }

    public void setPosition2D(nds.core.geometry.Position2D position2D_)
    {
        this.position2D_ = position2D_;
    }

    public boolean isPosition2DUsed()
    {
        return (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_2D);
    }

    public boolean isPosition2DSet()
    {
        return (position2D_ != null);
    }

    public void resetPosition2D()
    {
        this.position2D_ = null;
    }

    public nds.core.geometry.Position3D getPosition3D()
    {
        return position3D_;
    }

    public void setPosition3D(nds.core.geometry.Position3D position3D_)
    {
        this.position3D_ = position3D_;
    }

    public boolean isPosition3DUsed()
    {
        return (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_3D);
    }

    public boolean isPosition3DSet()
    {
        return (position3D_ != null);
    }

    public void resetPosition3D()
    {
        this.position3D_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AttributeReason)
        {
            final AttributeReason that = (AttributeReason)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((hasPosition_ == null) ? that.hasPosition_ == null : hasPosition_.getValue() == that.hasPosition_.getValue()) &&
                    ((!isPosition2DUsed()) ? !that.isPosition2DUsed() :
                        ((position2D_ == null) ? that.position2D_ == null : position2D_.equals(that.position2D_))) &&
                    ((!isPosition3DUsed()) ? !that.isPosition3DUsed() :
                        ((position3D_ == null) ? that.position3D_ == null : position3D_.equals(that.position3D_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasPosition_);
        if (isPosition2DUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, position2D_);
        if (isPosition3DUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, position3D_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.core.properties.AttributeReasonType.readEnum(in);

        hasPosition_ = nds.core.properties.AttributeReasonPositionAvailability.readEnum(in);

        if (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_2D)
        {
            position2D_ = new nds.core.geometry.Position2D(in, (byte)(0));
        }

        if (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_3D)
        {
            position3D_ = new nds.core.geometry.Position3D(in, (byte)(0), (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.core.properties.AttributeReasonType.readEnum(zserioContext.getType(), in);

        hasPosition_ = nds.core.properties.AttributeReasonPositionAvailability.readEnum(zserioContext.getHasPosition(), in);

        if (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_2D)
        {
            position2D_ = new nds.core.geometry.Position2D(zserioContext.getPosition2D(), in, (byte)(0));
        }

        if (getHasPosition() == nds.core.properties.AttributeReasonPositionAvailability.POSITION_3D)
        {
            position3D_ = new nds.core.geometry.Position3D(zserioContext.getPosition3D(), in, (byte)(0), (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += hasPosition_.bitSizeOf(endBitPosition);
        if (isPosition2DUsed())
        {
            endBitPosition = position2D_.initializeOffsets(endBitPosition);
        }
        if (isPosition3DUsed())
        {
            endBitPosition = position3D_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = hasPosition_.initializeOffsets(zserioContext.getHasPosition(), endBitPosition);
        if (isPosition2DUsed())
        {
            endBitPosition = position2D_.initializeOffsets(zserioContext.getPosition2D(), endBitPosition);
        }
        if (isPosition3DUsed())
        {
            endBitPosition = position3D_.initializeOffsets(zserioContext.getPosition3D(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        hasPosition_.write(out);

        if (isPosition2DUsed())
        {
            // check parameters
            if (position2D_.getShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field AttributeReason.position2D: " +
                        position2D_.getShift() + " != " + (byte)(0) + "!");
            }
            position2D_.write(out);
        }

        if (isPosition3DUsed())
        {
            // check parameters
            if (position3D_.getShiftXY() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field AttributeReason.position3D: " +
                        position3D_.getShiftXY() + " != " + (byte)(0) + "!");
            }
            if (position3D_.getShiftZ() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field AttributeReason.position3D: " +
                        position3D_.getShiftZ() + " != " + (byte)(0) + "!");
            }
            position3D_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        hasPosition_.write(zserioContext.getHasPosition(), out);

        if (isPosition2DUsed())
        {
            position2D_.write(zserioContext.getPosition2D(), out);
        }

        if (isPosition3DUsed())
        {
            position3D_.write(zserioContext.getPosition3D(), out);
        }
    }

    private nds.core.properties.AttributeReasonType type_;
    private nds.core.properties.AttributeReasonPositionAvailability hasPosition_;
    private nds.core.geometry.Position2D position2D_;
    private nds.core.geometry.Position3D position3D_;
}
