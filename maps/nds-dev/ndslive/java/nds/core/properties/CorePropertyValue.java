/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.properties;

public class CorePropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            reason_ = new nds.core.properties.AttributeReason.ZserioPackingContext();
            confidence_ = new zserio.runtime.array.DeltaContext();
            age_ = new nds.core.types.TimeStamp.ZserioPackingContext();
            source_ = new zserio.runtime.array.DeltaContext();
            iconSetReference_ = new zserio.runtime.array.DeltaContext();
            iconSetReferenceWithHeading_ = new nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext();
            globalIconSetReference_ = new zserio.runtime.array.DeltaContext();
            globalIconSetReferenceWithHeading_ = new nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext();
        }

        public nds.core.properties.AttributeReason.ZserioPackingContext getReason()
        {
            return reason_;
        }

        public zserio.runtime.array.DeltaContext getConfidence()
        {
            return confidence_;
        }

        public nds.core.types.TimeStamp.ZserioPackingContext getAge()
        {
            return age_;
        }

        public zserio.runtime.array.DeltaContext getSource()
        {
            return source_;
        }

        public zserio.runtime.array.DeltaContext getIconSetReference()
        {
            return iconSetReference_;
        }

        public nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext getIconSetReferenceWithHeading()
        {
            return iconSetReferenceWithHeading_;
        }

        public zserio.runtime.array.DeltaContext getGlobalIconSetReference()
        {
            return globalIconSetReference_;
        }

        public nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext getGlobalIconSetReferenceWithHeading()
        {
            return globalIconSetReferenceWithHeading_;
        }

        private nds.core.properties.AttributeReason.ZserioPackingContext reason_;
        private zserio.runtime.array.DeltaContext confidence_;
        private nds.core.types.TimeStamp.ZserioPackingContext age_;
        private zserio.runtime.array.DeltaContext source_;
        private zserio.runtime.array.DeltaContext iconSetReference_;
        private nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext iconSetReferenceWithHeading_;
        private zserio.runtime.array.DeltaContext globalIconSetReference_;
        private nds.core.icons.IconSetReferenceWithHeading.ZserioPackingContext globalIconSetReferenceWithHeading_;
    };

    public CorePropertyValue(
            nds.core.properties.CorePropertyType type_)
    {
        this.type_ = type_;
    }

    public CorePropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.core.properties.CorePropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public CorePropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.properties.CorePropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            return CHOICE_reason;
        case METRIC_UNIT:
            return UNDEFINED_CHOICE;
        case IMPERIAL_UNIT:
            return UNDEFINED_CHOICE;
        case ATTRIBUTE_CONFIDENCE:
            return CHOICE_confidence;
        case ATTRIBUTE_AGE:
            return CHOICE_age;
        case ATTRIBUTE_SOURCE:
            return CHOICE_source;
        case ICON_SET_REFERENCE:
            return CHOICE_iconSetReference;
        case ICON_SET_REFERENCE_WITH_HEADING:
            return CHOICE_iconSetReferenceWithHeading;
        case GLOBAL_ICON_SET_REFERENCE:
            return CHOICE_globalIconSetReference;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            return CHOICE_globalIconSetReferenceWithHeading;
        case TOLL_PAYMENT:
            return CHOICE_tollPaymentMethod;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            getReason().initPackingContext(zserioContext.getReason());
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            zserioContext.getConfidence().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getConfidence()));
            break;
        case ATTRIBUTE_AGE:
            getAge().initPackingContext(zserioContext.getAge());
            break;
        case ATTRIBUTE_SOURCE:
            getSource().initPackingContext(zserioContext.getSource());
            break;
        case ICON_SET_REFERENCE:
            zserioContext.getIconSetReference().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getIconSetReference()));
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            getIconSetReferenceWithHeading().initPackingContext(zserioContext.getIconSetReferenceWithHeading());
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            zserioContext.getGlobalIconSetReference().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getGlobalIconSetReference()));
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            getGlobalIconSetReferenceWithHeading().initPackingContext(zserioContext.getGlobalIconSetReferenceWithHeading());
            break;
        case TOLL_PAYMENT:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ATTRIBUTE_REASON:
            endBitPosition += getReason().bitSizeOf(endBitPosition);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            endBitPosition += 8;
            break;
        case ATTRIBUTE_AGE:
            endBitPosition += getAge().bitSizeOf(endBitPosition);
            break;
        case ATTRIBUTE_SOURCE:
            endBitPosition += getSource().bitSizeOf(endBitPosition);
            break;
        case ICON_SET_REFERENCE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getIconSetReference());
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            endBitPosition += getIconSetReferenceWithHeading().bitSizeOf(endBitPosition);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getGlobalIconSetReference());
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            endBitPosition += getGlobalIconSetReferenceWithHeading().bitSizeOf(endBitPosition);
            break;
        case TOLL_PAYMENT:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ATTRIBUTE_REASON:
            endBitPosition += getReason().bitSizeOf(zserioContext.getReason(), endBitPosition);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            endBitPosition += zserioContext.getConfidence().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getConfidence()));
            break;
        case ATTRIBUTE_AGE:
            endBitPosition += getAge().bitSizeOf(zserioContext.getAge(), endBitPosition);
            break;
        case ATTRIBUTE_SOURCE:
            endBitPosition += getSource().bitSizeOf(zserioContext.getSource(), endBitPosition);
            break;
        case ICON_SET_REFERENCE:
            endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getIconSetReference()));
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            endBitPosition += getIconSetReferenceWithHeading().bitSizeOf(zserioContext.getIconSetReferenceWithHeading(), endBitPosition);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            endBitPosition += zserioContext.getGlobalIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getGlobalIconSetReference()));
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            endBitPosition += getGlobalIconSetReferenceWithHeading().bitSizeOf(zserioContext.getGlobalIconSetReferenceWithHeading(), endBitPosition);
            break;
        case TOLL_PAYMENT:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.properties.CorePropertyType getType()
    {
        return this.type_;
    }

    public nds.core.properties.AttributeReason getReason()
    {
        return (nds.core.properties.AttributeReason)objectChoice;
    }

    public void setReason(nds.core.properties.AttributeReason reason_)
    {
        objectChoice = reason_;
    }

    public short getConfidence()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setConfidence(short confidence_)
    {
        objectChoice = confidence_;
    }

    public nds.core.types.TimeStamp getAge()
    {
        return (nds.core.types.TimeStamp)objectChoice;
    }

    public void setAge(nds.core.types.TimeStamp age_)
    {
        objectChoice = age_;
    }

    public nds.core.properties.AttributeSourceType getSource()
    {
        return (nds.core.properties.AttributeSourceType)objectChoice;
    }

    public void setSource(nds.core.properties.AttributeSourceType source_)
    {
        objectChoice = source_;
    }

    public java.math.BigInteger getIconSetReference()
    {
        return (java.math.BigInteger)objectChoice;
    }

    public void setIconSetReference(java.math.BigInteger iconSetReference_)
    {
        objectChoice = iconSetReference_;
    }

    public nds.core.icons.IconSetReferenceWithHeading getIconSetReferenceWithHeading()
    {
        return (nds.core.icons.IconSetReferenceWithHeading)objectChoice;
    }

    public void setIconSetReferenceWithHeading(nds.core.icons.IconSetReferenceWithHeading iconSetReferenceWithHeading_)
    {
        objectChoice = iconSetReferenceWithHeading_;
    }

    public java.math.BigInteger getGlobalIconSetReference()
    {
        return (java.math.BigInteger)objectChoice;
    }

    public void setGlobalIconSetReference(java.math.BigInteger globalIconSetReference_)
    {
        objectChoice = globalIconSetReference_;
    }

    public nds.core.icons.IconSetReferenceWithHeading getGlobalIconSetReferenceWithHeading()
    {
        return (nds.core.icons.IconSetReferenceWithHeading)objectChoice;
    }

    public void setGlobalIconSetReferenceWithHeading(nds.core.icons.IconSetReferenceWithHeading globalIconSetReferenceWithHeading_)
    {
        objectChoice = globalIconSetReferenceWithHeading_;
    }

    public nds.core.properties.TollPaymentMethod[] getTollPaymentMethod()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setTollPaymentMethod(nds.core.properties.TollPaymentMethod[] tollPaymentMethod_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.properties.TollPaymentMethod.class, tollPaymentMethod_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.properties.TollPaymentMethod>(new ZserioElementFactory_tollPaymentMethod()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CorePropertyValue)
        {
            final CorePropertyValue that = (CorePropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case ATTRIBUTE_REASON:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.properties.AttributeReason)objectChoice);
                break;
            case METRIC_UNIT:
                // empty
                break;
            case IMPERIAL_UNIT:
                // empty
                break;
            case ATTRIBUTE_CONFIDENCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ATTRIBUTE_AGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.TimeStamp)objectChoice);
                break;
            case ATTRIBUTE_SOURCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.properties.AttributeSourceType)objectChoice);
                break;
            case ICON_SET_REFERENCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.math.BigInteger)objectChoice);
                break;
            case ICON_SET_REFERENCE_WITH_HEADING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.icons.IconSetReferenceWithHeading)objectChoice);
                break;
            case GLOBAL_ICON_SET_REFERENCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.math.BigInteger)objectChoice);
                break;
            case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.icons.IconSetReferenceWithHeading)objectChoice);
                break;
            case TOLL_PAYMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            objectChoice = new nds.core.properties.AttributeReason(in);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            objectChoice = in.readUnsignedByte();
            if (!(getConfidence() <= 100))
                throw new zserio.runtime.ConstraintError("Constraint violated at CorePropertyValue.confidence!");
            break;
        case ATTRIBUTE_AGE:
            objectChoice = new nds.core.types.TimeStamp(in);
            break;
        case ATTRIBUTE_SOURCE:
            objectChoice = nds.core.properties.AttributeSourceType.readEnum(in);
            break;
        case ICON_SET_REFERENCE:
            objectChoice = in.readVarUInt();
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            objectChoice = new nds.core.icons.IconSetReferenceWithHeading(in);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            objectChoice = in.readVarUInt();
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            objectChoice = new nds.core.icons.IconSetReferenceWithHeading(in);
            break;
        case TOLL_PAYMENT:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.properties.TollPaymentMethod.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.properties.TollPaymentMethod>(new ZserioElementFactory_tollPaymentMethod()),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).read(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            objectChoice = new nds.core.properties.AttributeReason(zserioContext.getReason(), in);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getConfidence().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            if (!(getConfidence() <= 100))
                throw new zserio.runtime.ConstraintError("Constraint violated at CorePropertyValue.confidence!");
            break;
        case ATTRIBUTE_AGE:
            objectChoice = new nds.core.types.TimeStamp(zserioContext.getAge(), in);
            break;
        case ATTRIBUTE_SOURCE:
            objectChoice = nds.core.properties.AttributeSourceType.readEnum(zserioContext.getSource(), in);
            break;
        case ICON_SET_REFERENCE:
            objectChoice = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getIconSetReference().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            objectChoice = new nds.core.icons.IconSetReferenceWithHeading(zserioContext.getIconSetReferenceWithHeading(), in);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            objectChoice = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getGlobalIconSetReference().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            objectChoice = new nds.core.icons.IconSetReferenceWithHeading(zserioContext.getGlobalIconSetReferenceWithHeading(), in);
            break;
        case TOLL_PAYMENT:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.properties.TollPaymentMethod.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.properties.TollPaymentMethod>(new ZserioElementFactory_tollPaymentMethod()),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ATTRIBUTE_REASON:
            {
                endBitPosition = getReason().initializeOffsets(endBitPosition);
            }
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            {
                endBitPosition += 8;
            }
            break;
        case ATTRIBUTE_AGE:
            {
                endBitPosition = getAge().initializeOffsets(endBitPosition);
            }
            break;
        case ATTRIBUTE_SOURCE:
            {
                endBitPosition += getSource().bitSizeOf(endBitPosition);
            }
            break;
        case ICON_SET_REFERENCE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getIconSetReference());
            }
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            {
                endBitPosition = getIconSetReferenceWithHeading().initializeOffsets(endBitPosition);
            }
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getGlobalIconSetReference());
            }
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            {
                endBitPosition = getGlobalIconSetReferenceWithHeading().initializeOffsets(endBitPosition);
            }
            break;
        case TOLL_PAYMENT:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ATTRIBUTE_REASON:
            {
                endBitPosition = getReason().initializeOffsets(zserioContext.getReason(), endBitPosition);
            }
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            {
                endBitPosition += zserioContext.getConfidence().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getConfidence()));
            }
            break;
        case ATTRIBUTE_AGE:
            {
                endBitPosition = getAge().initializeOffsets(zserioContext.getAge(), endBitPosition);
            }
            break;
        case ATTRIBUTE_SOURCE:
            {
                endBitPosition = getSource().initializeOffsets(zserioContext.getSource(), endBitPosition);
            }
            break;
        case ICON_SET_REFERENCE:
            {
                endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                        new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getIconSetReference()));
            }
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            {
                endBitPosition = getIconSetReferenceWithHeading().initializeOffsets(zserioContext.getIconSetReferenceWithHeading(), endBitPosition);
            }
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            {
                endBitPosition += zserioContext.getGlobalIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                        new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getGlobalIconSetReference()));
            }
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            {
                endBitPosition = getGlobalIconSetReferenceWithHeading().initializeOffsets(zserioContext.getGlobalIconSetReferenceWithHeading(), endBitPosition);
            }
            break;
        case TOLL_PAYMENT:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            getReason().write(out);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            if (!(getConfidence() <= 100))
                throw new zserio.runtime.ConstraintError("Constraint violated at CorePropertyValue.confidence!");
            out.writeUnsignedByte(getConfidence());
            break;
        case ATTRIBUTE_AGE:
            getAge().write(out);
            break;
        case ATTRIBUTE_SOURCE:
            getSource().write(out);
            break;
        case ICON_SET_REFERENCE:
            out.writeVarUInt(getIconSetReference());
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            getIconSetReferenceWithHeading().write(out);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            out.writeVarUInt(getGlobalIconSetReference());
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            getGlobalIconSetReferenceWithHeading().write(out);
            break;
        case TOLL_PAYMENT:
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ATTRIBUTE_REASON:
            getReason().write(zserioContext.getReason(), out);
            break;
        case METRIC_UNIT:
            // empty
            break;
        case IMPERIAL_UNIT:
            // empty
            break;
        case ATTRIBUTE_CONFIDENCE:
            if (!(getConfidence() <= 100))
                throw new zserio.runtime.ConstraintError("Constraint violated at CorePropertyValue.confidence!");
            zserioContext.getConfidence().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getConfidence()));
            break;
        case ATTRIBUTE_AGE:
            getAge().write(zserioContext.getAge(), out);
            break;
        case ATTRIBUTE_SOURCE:
            getSource().write(zserioContext.getSource(), out);
            break;
        case ICON_SET_REFERENCE:
            zserioContext.getIconSetReference().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getIconSetReference()));
            break;
        case ICON_SET_REFERENCE_WITH_HEADING:
            getIconSetReferenceWithHeading().write(zserioContext.getIconSetReferenceWithHeading(), out);
            break;
        case GLOBAL_ICON_SET_REFERENCE:
            zserioContext.getGlobalIconSetReference().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getGlobalIconSetReference()));
            break;
        case GLOBAL_ICON_SET_REFERENCE_WITH_HEADING:
            getGlobalIconSetReferenceWithHeading().write(zserioContext.getGlobalIconSetReferenceWithHeading(), out);
            break;
        case TOLL_PAYMENT:
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CorePropertyValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_reason = 0;
    public static final int CHOICE_confidence = 1;
    public static final int CHOICE_age = 2;
    public static final int CHOICE_source = 3;
    public static final int CHOICE_iconSetReference = 4;
    public static final int CHOICE_iconSetReferenceWithHeading = 5;
    public static final int CHOICE_globalIconSetReference = 6;
    public static final int CHOICE_globalIconSetReferenceWithHeading = 7;
    public static final int CHOICE_tollPaymentMethod = 8;
    public static final int UNDEFINED_CHOICE = -1;

    private static final class ZserioElementFactory_tollPaymentMethod implements zserio.runtime.array.PackableElementFactory<nds.core.properties.TollPaymentMethod>
    {
        @Override
        public nds.core.properties.TollPaymentMethod create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.properties.TollPaymentMethod(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.properties.TollPaymentMethod.ZserioPackingContext();
        }

        @Override
        public nds.core.properties.TollPaymentMethod create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.properties.TollPaymentMethod(context, in);
        }
    }

    private final nds.core.properties.CorePropertyType type_;
    private java.lang.Object objectChoice;
}
