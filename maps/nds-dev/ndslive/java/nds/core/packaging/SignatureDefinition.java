/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.packaging;

public class SignatureDefinition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
            type_ = new zserio.runtime.array.DeltaContext();
            size_ = new zserio.runtime.array.DeltaContext();
            hashType_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getSize()
        {
            return size_;
        }

        public zserio.runtime.array.DeltaContext getHashType()
        {
            return hashType_;
        }

        private zserio.runtime.array.DeltaContext id_;
        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext size_;
        private zserio.runtime.array.DeltaContext hashType_;
    };

    public SignatureDefinition()
    {
    }

    public SignatureDefinition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SignatureDefinition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SignatureDefinition(
            short id_,
            short type_,
            int size_,
            short hashType_,
            java.lang.String name_,
            java.lang.String keyUri_)
    {
        setId(id_);
        setType(type_);
        setSize(size_);
        setHashType(hashType_);
        setName(name_);
        setKeyUri(keyUri_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
        zserioContext.getType().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(type_));
        zserioContext.getSize().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(size_));
        zserioContext.getHashType().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(hashType_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(type_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(size_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(hashType_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(keyUri_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
        endBitPosition += zserioContext.getType().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(type_));
        endBitPosition += zserioContext.getSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(size_));
        endBitPosition += zserioContext.getHashType().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(hashType_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(keyUri_);

        return (int)(endBitPosition - bitPosition);
    }

    public short getId()
    {
        return id_;
    }

    public void setId(short id_)
    {
        this.id_ = id_;
    }

    public short getType()
    {
        return type_;
    }

    public void setType(short type_)
    {
        this.type_ = type_;
    }

    public int getSize()
    {
        return size_;
    }

    public void setSize(int size_)
    {
        this.size_ = size_;
    }

    public short getHashType()
    {
        return hashType_;
    }

    public void setHashType(short hashType_)
    {
        this.hashType_ = hashType_;
    }

    public java.lang.String getName()
    {
        return name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public java.lang.String getKeyUri()
    {
        return keyUri_;
    }

    public void setKeyUri(java.lang.String keyUri_)
    {
        this.keyUri_ = keyUri_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SignatureDefinition)
        {
            final SignatureDefinition that = (SignatureDefinition)obj;

            return
                    id_ == that.id_ &&
                    type_ == that.type_ &&
                    size_ == that.size_ &&
                    hashType_ == that.hashType_ &&
                    ((name_ == null) ? that.name_ == null : name_.equals(that.name_)) &&
                    ((keyUri_ == null) ? that.keyUri_ == null : keyUri_.equals(that.keyUri_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, size_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hashType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, name_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, keyUri_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt16();

        type_ = in.readVarUInt16();

        size_ = in.readVarUInt32();

        hashType_ = in.readVarUInt16();

        name_ = in.readString();

        keyUri_ = in.readString();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        type_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getType().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        size_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getSize().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        hashType_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getHashType().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        name_ = in.readString();

        keyUri_ = in.readString();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(type_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(size_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(hashType_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(keyUri_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));
        endBitPosition += zserioContext.getType().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(type_));
        endBitPosition += zserioContext.getSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(size_));
        endBitPosition += zserioContext.getHashType().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(hashType_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(keyUri_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(id_);

        out.writeVarUInt16(type_);

        out.writeVarUInt32(size_);

        out.writeVarUInt16(hashType_);

        out.writeString(name_);

        out.writeString(keyUri_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(id_));

        zserioContext.getType().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(type_));

        zserioContext.getSize().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(size_));

        zserioContext.getHashType().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(hashType_));

        out.writeString(name_);

        out.writeString(keyUri_);
    }

    private short id_;
    private short type_;
    private int size_;
    private short hashType_;
    private java.lang.String name_;
    private java.lang.String keyUri_;
}
