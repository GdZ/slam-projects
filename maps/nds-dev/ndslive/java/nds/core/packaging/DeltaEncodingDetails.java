/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.packaging;

public class DeltaEncodingDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            deltaEncodingType_ = new zserio.runtime.array.DeltaContext();
            sourceVersion_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getDeltaEncodingType()
        {
            return deltaEncodingType_;
        }

        public zserio.runtime.array.DeltaContext getSourceVersion()
        {
            return sourceVersion_;
        }

        private zserio.runtime.array.DeltaContext deltaEncodingType_;
        private zserio.runtime.array.DeltaContext sourceVersion_;
    };

    public DeltaEncodingDetails()
    {
    }

    public DeltaEncodingDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DeltaEncodingDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DeltaEncodingDetails(
            short deltaEncodingType_,
            java.math.BigInteger sourceVersion_)
    {
        setDeltaEncodingType(deltaEncodingType_);
        setSourceVersion(sourceVersion_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getDeltaEncodingType().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(deltaEncodingType_));
        if (isSourceVersionUsed())
        {
            zserioContext.getSourceVersion().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(sourceVersion_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        if (isSourceVersionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(sourceVersion_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDeltaEncodingType().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(deltaEncodingType_));
        if (isSourceVersionUsed())
        {
            endBitPosition += zserioContext.getSourceVersion().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(sourceVersion_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getDeltaEncodingType()
    {
        return deltaEncodingType_;
    }

    public void setDeltaEncodingType(short deltaEncodingType_)
    {
        this.deltaEncodingType_ = deltaEncodingType_;
    }

    public java.math.BigInteger getSourceVersion()
    {
        return sourceVersion_;
    }

    public void setSourceVersion(java.math.BigInteger sourceVersion_)
    {
        this.sourceVersion_ = sourceVersion_;
    }

    public boolean isSourceVersionUsed()
    {
        return (getDeltaEncodingType() != nds.core.packaging.NO_DELTA.NO_DELTA && getDeltaEncodingType() != nds.core.packaging.LAYER_DELETED.LAYER_DELETED);
    }

    public boolean isSourceVersionSet()
    {
        return (sourceVersion_ != null);
    }

    public void resetSourceVersion()
    {
        this.sourceVersion_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DeltaEncodingDetails)
        {
            final DeltaEncodingDetails that = (DeltaEncodingDetails)obj;

            return
                    deltaEncodingType_ == that.deltaEncodingType_ &&
                    ((!isSourceVersionUsed()) ? !that.isSourceVersionUsed() :
                        ((sourceVersion_ == null) ? that.sourceVersion_ == null : sourceVersion_.equals(that.sourceVersion_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, deltaEncodingType_);
        if (isSourceVersionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, sourceVersion_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        deltaEncodingType_ = in.readUnsignedByte();

        if (getDeltaEncodingType() != nds.core.packaging.NO_DELTA.NO_DELTA && getDeltaEncodingType() != nds.core.packaging.LAYER_DELETED.LAYER_DELETED)
        {
            sourceVersion_ = in.readVarUInt();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        deltaEncodingType_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getDeltaEncodingType().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        if (getDeltaEncodingType() != nds.core.packaging.NO_DELTA.NO_DELTA && getDeltaEncodingType() != nds.core.packaging.LAYER_DELETED.LAYER_DELETED)
        {
            sourceVersion_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getSourceVersion().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        if (isSourceVersionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(sourceVersion_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDeltaEncodingType().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(deltaEncodingType_));
        if (isSourceVersionUsed())
        {
            endBitPosition += zserioContext.getSourceVersion().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(sourceVersion_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(deltaEncodingType_);

        if (isSourceVersionUsed())
        {
            out.writeVarUInt(sourceVersion_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getDeltaEncodingType().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(deltaEncodingType_));

        if (isSourceVersionUsed())
        {
            zserioContext.getSourceVersion().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(sourceVersion_));
        }
    }

    private short deltaEncodingType_;
    private java.math.BigInteger sourceVersion_;
}
