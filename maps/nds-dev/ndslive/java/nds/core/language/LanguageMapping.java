/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.language;

public class LanguageMapping implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            languageCode_ = new zserio.runtime.array.DeltaContext();
            isTransliterationOf_ = new zserio.runtime.array.DeltaContext();
            isDiacriticTransliterationOf_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getLanguageCode()
        {
            return languageCode_;
        }

        public zserio.runtime.array.DeltaContext getIsTransliterationOf()
        {
            return isTransliterationOf_;
        }

        public zserio.runtime.array.DeltaContext getIsDiacriticTransliterationOf()
        {
            return isDiacriticTransliterationOf_;
        }

        private zserio.runtime.array.DeltaContext languageCode_;
        private zserio.runtime.array.DeltaContext isTransliterationOf_;
        private zserio.runtime.array.DeltaContext isDiacriticTransliterationOf_;
    };

    public LanguageMapping()
    {
    }

    public LanguageMapping(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LanguageMapping(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LanguageMapping(
            short languageCode_,
            java.lang.String isoCountryCode_,
            java.lang.String isoLanguageCode_,
            java.lang.String isoScriptCode_,
            short isTransliterationOf_,
            short isDiacriticTransliterationOf_,
            nds.core.language.LanguageName[] languageNames_)
    {
        setLanguageCode(languageCode_);
        setIsoCountryCode(isoCountryCode_);
        setIsoLanguageCode(isoLanguageCode_);
        setIsoScriptCode(isoScriptCode_);
        setIsTransliterationOf(isTransliterationOf_);
        setIsDiacriticTransliterationOf(isDiacriticTransliterationOf_);
        setLanguageNames(languageNames_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguageCode().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
        zserioContext.getIsTransliterationOf().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isTransliterationOf_));
        zserioContext.getIsDiacriticTransliterationOf().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isDiacriticTransliterationOf_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(languageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoLanguageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoScriptCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(isTransliterationOf_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(isDiacriticTransliterationOf_);
        endBitPosition += languageNames_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoLanguageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoScriptCode_);
        endBitPosition += zserioContext.getIsTransliterationOf().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isTransliterationOf_));
        endBitPosition += zserioContext.getIsDiacriticTransliterationOf().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isDiacriticTransliterationOf_));
        endBitPosition += languageNames_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getLanguageCode()
    {
        return languageCode_;
    }

    public void setLanguageCode(short languageCode_)
    {
        this.languageCode_ = languageCode_;
    }

    public java.lang.String getIsoCountryCode()
    {
        return isoCountryCode_;
    }

    public void setIsoCountryCode(java.lang.String isoCountryCode_)
    {
        this.isoCountryCode_ = isoCountryCode_;
    }

    public java.lang.String getIsoLanguageCode()
    {
        return isoLanguageCode_;
    }

    public void setIsoLanguageCode(java.lang.String isoLanguageCode_)
    {
        this.isoLanguageCode_ = isoLanguageCode_;
    }

    public java.lang.String getIsoScriptCode()
    {
        return isoScriptCode_;
    }

    public void setIsoScriptCode(java.lang.String isoScriptCode_)
    {
        this.isoScriptCode_ = isoScriptCode_;
    }

    public short getIsTransliterationOf()
    {
        return isTransliterationOf_;
    }

    public void setIsTransliterationOf(short isTransliterationOf_)
    {
        this.isTransliterationOf_ = isTransliterationOf_;
    }

    public short getIsDiacriticTransliterationOf()
    {
        return isDiacriticTransliterationOf_;
    }

    public void setIsDiacriticTransliterationOf(short isDiacriticTransliterationOf_)
    {
        this.isDiacriticTransliterationOf_ = isDiacriticTransliterationOf_;
    }

    public nds.core.language.LanguageName[] getLanguageNames()
    {
        return (languageNames_ == null) ? null : languageNames_.getRawArray();
    }

    public void setLanguageNames(nds.core.language.LanguageName[] languageNames_)
    {
        this.languageNames_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.language.LanguageName.class, languageNames_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.language.LanguageName>(new ZserioElementFactory_languageNames()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LanguageMapping)
        {
            final LanguageMapping that = (LanguageMapping)obj;

            return
                    languageCode_ == that.languageCode_ &&
                    ((isoCountryCode_ == null) ? that.isoCountryCode_ == null : isoCountryCode_.equals(that.isoCountryCode_)) &&
                    ((isoLanguageCode_ == null) ? that.isoLanguageCode_ == null : isoLanguageCode_.equals(that.isoLanguageCode_)) &&
                    ((isoScriptCode_ == null) ? that.isoScriptCode_ == null : isoScriptCode_.equals(that.isoScriptCode_)) &&
                    isTransliterationOf_ == that.isTransliterationOf_ &&
                    isDiacriticTransliterationOf_ == that.isDiacriticTransliterationOf_ &&
                    ((languageNames_ == null) ? that.languageNames_ == null : languageNames_.equals(that.languageNames_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, languageCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isoCountryCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isoLanguageCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isoScriptCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isTransliterationOf_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isDiacriticTransliterationOf_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, languageNames_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        languageCode_ = in.readVarUInt16();

        isoCountryCode_ = in.readString();

        isoLanguageCode_ = in.readString();

        isoScriptCode_ = in.readString();

        isTransliterationOf_ = in.readVarUInt16();

        isDiacriticTransliterationOf_ = in.readVarUInt16();

        languageNames_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.language.LanguageName.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.language.LanguageName>(new ZserioElementFactory_languageNames()),
                zserio.runtime.array.ArrayType.AUTO);
        languageNames_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        languageCode_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getLanguageCode().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        isoCountryCode_ = in.readString();

        isoLanguageCode_ = in.readString();

        isoScriptCode_ = in.readString();

        isTransliterationOf_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getIsTransliterationOf().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        isDiacriticTransliterationOf_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getIsDiacriticTransliterationOf().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        languageNames_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.language.LanguageName.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.language.LanguageName>(new ZserioElementFactory_languageNames()),
                zserio.runtime.array.ArrayType.AUTO);
        languageNames_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(languageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoLanguageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoScriptCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(isTransliterationOf_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(isDiacriticTransliterationOf_);
        endBitPosition = languageNames_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoLanguageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoScriptCode_);
        endBitPosition += zserioContext.getIsTransliterationOf().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isTransliterationOf_));
        endBitPosition += zserioContext.getIsDiacriticTransliterationOf().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isDiacriticTransliterationOf_));
        endBitPosition = languageNames_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(languageCode_);

        out.writeString(isoCountryCode_);

        out.writeString(isoLanguageCode_);

        out.writeString(isoScriptCode_);

        out.writeVarUInt16(isTransliterationOf_);

        out.writeVarUInt16(isDiacriticTransliterationOf_);

        languageNames_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguageCode().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));

        out.writeString(isoCountryCode_);

        out.writeString(isoLanguageCode_);

        out.writeString(isoScriptCode_);

        zserioContext.getIsTransliterationOf().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isTransliterationOf_));

        zserioContext.getIsDiacriticTransliterationOf().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(isDiacriticTransliterationOf_));

        languageNames_.writePacked(out);
    }

    private static final class ZserioElementFactory_languageNames implements zserio.runtime.array.PackableElementFactory<nds.core.language.LanguageName>
    {
        @Override
        public nds.core.language.LanguageName create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.language.LanguageName(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.language.LanguageName.ZserioPackingContext();
        }

        @Override
        public nds.core.language.LanguageName create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.language.LanguageName(context, in);
        }
    }

    private short languageCode_;
    private java.lang.String isoCountryCode_;
    private java.lang.String isoLanguageCode_;
    private java.lang.String isoScriptCode_;
    private short isTransliterationOf_;
    private short isDiacriticTransliterationOf_;
    private zserio.runtime.array.Array languageNames_;
}
