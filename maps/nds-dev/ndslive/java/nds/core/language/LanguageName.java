/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.language;

public class LanguageName implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            languageCode_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getLanguageCode()
        {
            return languageCode_;
        }

        private zserio.runtime.array.DeltaContext languageCode_;
    };

    public LanguageName()
    {
    }

    public LanguageName(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LanguageName(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LanguageName(
            short languageCode_,
            java.lang.String languageName_)
    {
        setLanguageCode(languageCode_);
        setLanguageName(languageName_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguageCode().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(languageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(languageName_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(languageName_);

        return (int)(endBitPosition - bitPosition);
    }

    public short getLanguageCode()
    {
        return languageCode_;
    }

    public void setLanguageCode(short languageCode_)
    {
        this.languageCode_ = languageCode_;
    }

    public java.lang.String getLanguageName()
    {
        return languageName_;
    }

    public void setLanguageName(java.lang.String languageName_)
    {
        this.languageName_ = languageName_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LanguageName)
        {
            final LanguageName that = (LanguageName)obj;

            return
                    languageCode_ == that.languageCode_ &&
                    ((languageName_ == null) ? that.languageName_ == null : languageName_.equals(that.languageName_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, languageCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, languageName_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        languageCode_ = in.readVarUInt16();

        languageName_ = in.readString();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        languageCode_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getLanguageCode().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        languageName_ = in.readString();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(languageCode_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(languageName_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguageCode().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(languageName_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(languageCode_);

        out.writeString(languageName_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguageCode().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(languageCode_));

        out.writeString(languageName_);
    }

    private short languageCode_;
    private java.lang.String languageName_;
}
