/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.speech;

public class PhoneticPrefix implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            usageType_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getUsageType()
        {
            return usageType_;
        }

        private zserio.runtime.array.DeltaContext usageType_;
    };

    public PhoneticPrefix()
    {
    }

    public PhoneticPrefix(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PhoneticPrefix(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PhoneticPrefix(
            nds.core.speech.PhoneticPrefixUsageType usageType_,
            java.lang.String prefixString_)
    {
        setUsageType(usageType_);
        setPrefixString(prefixString_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        usageType_.initPackingContext(zserioContext.getUsageType());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += usageType_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(prefixString_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += usageType_.bitSizeOf(zserioContext.getUsageType(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(prefixString_);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.speech.PhoneticPrefixUsageType getUsageType()
    {
        return usageType_;
    }

    public void setUsageType(nds.core.speech.PhoneticPrefixUsageType usageType_)
    {
        this.usageType_ = usageType_;
    }

    public java.lang.String getPrefixString()
    {
        return prefixString_;
    }

    public void setPrefixString(java.lang.String prefixString_)
    {
        this.prefixString_ = prefixString_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PhoneticPrefix)
        {
            final PhoneticPrefix that = (PhoneticPrefix)obj;

            return
                    ((usageType_ == null) ? that.usageType_ == null : usageType_.getValue() == that.usageType_.getValue()) &&
                    ((prefixString_ == null) ? that.prefixString_ == null : prefixString_.equals(that.prefixString_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, usageType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, prefixString_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        usageType_ = nds.core.speech.PhoneticPrefixUsageType.readEnum(in);

        prefixString_ = in.readString();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        usageType_ = nds.core.speech.PhoneticPrefixUsageType.readEnum(zserioContext.getUsageType(), in);

        prefixString_ = in.readString();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += usageType_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(prefixString_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = usageType_.initializeOffsets(zserioContext.getUsageType(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(prefixString_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        usageType_.write(out);

        out.writeString(prefixString_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        usageType_.write(zserioContext.getUsageType(), out);

        out.writeString(prefixString_);
    }

    private nds.core.speech.PhoneticPrefixUsageType usageType_;
    private java.lang.String prefixString_;
}
