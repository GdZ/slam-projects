/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.speech;

public class PhoneticTranscription implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            prefix_ = new nds.core.speech.PhoneticPrefix.ZserioPackingContext();
        }

        public nds.core.speech.PhoneticPrefix.ZserioPackingContext getPrefix()
        {
            return prefix_;
        }

        private nds.core.speech.PhoneticPrefix.ZserioPackingContext prefix_;
    };

    public PhoneticTranscription()
    {
    }

    public PhoneticTranscription(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PhoneticTranscription(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PhoneticTranscription(
            nds.core.speech.GrammaticalCase[] grammaticalCase_,
            java.lang.String phoneticTranscriptionString_,
            nds.core.speech.PhoneticPrefix prefix_)
    {
        setGrammaticalCase(grammaticalCase_);
        setPhoneticTranscriptionString(phoneticTranscriptionString_);
        setPrefix(prefix_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isPrefixUsed())
        {
            prefix_.initPackingContext(zserioContext.getPrefix());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGrammaticalCaseUsed())
        {
            endBitPosition += grammaticalCase_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(phoneticTranscriptionString_);
        endBitPosition += 1;
        if (isPrefixUsed())
        {
            endBitPosition += prefix_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGrammaticalCaseUsed())
        {
            endBitPosition += grammaticalCase_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(phoneticTranscriptionString_);
        endBitPosition += 1;
        if (isPrefixUsed())
        {
            endBitPosition += prefix_.bitSizeOf(zserioContext.getPrefix(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.speech.GrammaticalCase[] getGrammaticalCase()
    {
        return (grammaticalCase_ == null) ? null : grammaticalCase_.getRawArray();
    }

    public void setGrammaticalCase(nds.core.speech.GrammaticalCase[] grammaticalCase_)
    {
        if (grammaticalCase_ == null)
        {
            this.grammaticalCase_ = null;
        }
        else
        {
            this.grammaticalCase_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.speech.GrammaticalCase.class, grammaticalCase_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.speech.GrammaticalCase>(new ZserioElementFactory_grammaticalCase()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isGrammaticalCaseUsed()
    {
        return isGrammaticalCaseSet();
    }

    public boolean isGrammaticalCaseSet()
    {
        return (grammaticalCase_ != null);
    }

    public void resetGrammaticalCase()
    {
        this.grammaticalCase_ = null;
    }

    public java.lang.String getPhoneticTranscriptionString()
    {
        return phoneticTranscriptionString_;
    }

    public void setPhoneticTranscriptionString(java.lang.String phoneticTranscriptionString_)
    {
        this.phoneticTranscriptionString_ = phoneticTranscriptionString_;
    }

    public nds.core.speech.PhoneticPrefix getPrefix()
    {
        return prefix_;
    }

    public void setPrefix(nds.core.speech.PhoneticPrefix prefix_)
    {
        this.prefix_ = prefix_;
    }

    public boolean isPrefixUsed()
    {
        return isPrefixSet();
    }

    public boolean isPrefixSet()
    {
        return (prefix_ != null);
    }

    public void resetPrefix()
    {
        this.prefix_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PhoneticTranscription)
        {
            final PhoneticTranscription that = (PhoneticTranscription)obj;

            return
                    ((!isGrammaticalCaseUsed()) ? !that.isGrammaticalCaseUsed() :
                        ((grammaticalCase_ == null) ? that.grammaticalCase_ == null : grammaticalCase_.equals(that.grammaticalCase_))) &&
                    ((phoneticTranscriptionString_ == null) ? that.phoneticTranscriptionString_ == null : phoneticTranscriptionString_.equals(that.phoneticTranscriptionString_)) &&
                    ((!isPrefixUsed()) ? !that.isPrefixUsed() :
                        ((prefix_ == null) ? that.prefix_ == null : prefix_.equals(that.prefix_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        if (isGrammaticalCaseUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, grammaticalCase_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, phoneticTranscriptionString_);
        if (isPrefixUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, prefix_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (in.readBool())
        {
            grammaticalCase_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.speech.GrammaticalCase.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.speech.GrammaticalCase>(new ZserioElementFactory_grammaticalCase()),
                    zserio.runtime.array.ArrayType.AUTO);
            grammaticalCase_.readPacked(in);
        }

        phoneticTranscriptionString_ = in.readString();

        if (in.readBool())
        {
            prefix_ = new nds.core.speech.PhoneticPrefix(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (in.readBool())
        {
            grammaticalCase_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.speech.GrammaticalCase.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.speech.GrammaticalCase>(new ZserioElementFactory_grammaticalCase()),
                    zserio.runtime.array.ArrayType.AUTO);
            grammaticalCase_.readPacked(in);
        }

        phoneticTranscriptionString_ = in.readString();

        if (in.readBool())
        {
            prefix_ = new nds.core.speech.PhoneticPrefix(zserioContext.getPrefix(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGrammaticalCaseUsed())
        {
            endBitPosition = grammaticalCase_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(phoneticTranscriptionString_);
        endBitPosition += 1;
        if (isPrefixUsed())
        {
            endBitPosition = prefix_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGrammaticalCaseUsed())
        {
            endBitPosition = grammaticalCase_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(phoneticTranscriptionString_);
        endBitPosition += 1;
        if (isPrefixUsed())
        {
            endBitPosition = prefix_.initializeOffsets(zserioContext.getPrefix(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isGrammaticalCaseUsed())
        {
            out.writeBool(true);
            grammaticalCase_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        out.writeString(phoneticTranscriptionString_);

        if (isPrefixUsed())
        {
            out.writeBool(true);
            prefix_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isGrammaticalCaseUsed())
        {
            out.writeBool(true);
            grammaticalCase_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        out.writeString(phoneticTranscriptionString_);

        if (isPrefixUsed())
        {
            out.writeBool(true);
            prefix_.write(zserioContext.getPrefix(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_grammaticalCase implements zserio.runtime.array.PackableElementFactory<nds.core.speech.GrammaticalCase>
    {
        @Override
        public nds.core.speech.GrammaticalCase create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.core.speech.GrammaticalCase.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.speech.GrammaticalCase create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.core.speech.GrammaticalCase.readEnum(context, in);
        }
    }

    private zserio.runtime.array.Array grammaticalCase_;
    private java.lang.String phoneticTranscriptionString_;
    private nds.core.speech.PhoneticPrefix prefix_;
}
