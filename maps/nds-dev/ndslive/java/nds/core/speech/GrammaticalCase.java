/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.speech;

public enum GrammaticalCase implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    NO_GRAMMATICAL_CASE((short)0),
    ABESSIVE_CASE((short)1),
    ABLATIVE_CASE((short)2),
    ABSOLUTIVE_CASE((short)3),
    ADESSIVE_CASE((short)4),
    ACCUSATIVE_CASE((short)5),
    ALLATIVE_CASE((short)6),
    CAUSAL_CASE((short)7),
    COMITATIVE_CASE((short)8),
    DATIVE_CASE((short)9),
    DELATIVE_CASE((short)10),
    DELIMITATIVE_CASE((short)11),
    DIRECTIONAL_CASE((short)12),
    DISTRIBUTIVE_TEMPORAL_CASE((short)13),
    ELATIVE_CASE((short)14),
    EQUATIVE_CASE((short)15),
    ERGATIVE_CASE((short)16),
    ESSIVE_CASE((short)17),
    FINAL_CASE((short)18),
    GENITIVE_CASE((short)19),
    ILLATIVE_CASE((short)20),
    INESSIVE_CASE((short)21),
    INSTRUCTIVE_CASE((short)22),
    INSTRUMENTAL_CASE((short)23),
    LOCATIVE_CASE((short)24),
    MODAL_CASE((short)25),
    MULTIPLICATIVE_CASE((short)26),
    NOMINATIVE_CASE((short)27),
    OBLIQUE_CASE((short)28),
    PARTITIVE_CASE((short)29),
    PERLATIVE_CASE((short)30),
    POSSESSIVE_CASE((short)31),
    POSTPOSITIONAL_CASE((short)32),
    PREPOSITIONAL_CASE((short)33),
    PROLATIVE_CASE((short)34),
    SUBLATIVE_CASE((short)35),
    SUPERESSIVE_CASE((short)36),
    TEMPORAL_CASE((short)37),
    TERMINATIVE_CASE((short)38),
    TRANSLATIVE_CASE((short)39),
    VOCATIVE_CASE((short)40);

    private GrammaticalCase(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static GrammaticalCase readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static GrammaticalCase readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static GrammaticalCase toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return NO_GRAMMATICAL_CASE;
            case (short)1:
                return ABESSIVE_CASE;
            case (short)2:
                return ABLATIVE_CASE;
            case (short)3:
                return ABSOLUTIVE_CASE;
            case (short)4:
                return ADESSIVE_CASE;
            case (short)5:
                return ACCUSATIVE_CASE;
            case (short)6:
                return ALLATIVE_CASE;
            case (short)7:
                return CAUSAL_CASE;
            case (short)8:
                return COMITATIVE_CASE;
            case (short)9:
                return DATIVE_CASE;
            case (short)10:
                return DELATIVE_CASE;
            case (short)11:
                return DELIMITATIVE_CASE;
            case (short)12:
                return DIRECTIONAL_CASE;
            case (short)13:
                return DISTRIBUTIVE_TEMPORAL_CASE;
            case (short)14:
                return ELATIVE_CASE;
            case (short)15:
                return EQUATIVE_CASE;
            case (short)16:
                return ERGATIVE_CASE;
            case (short)17:
                return ESSIVE_CASE;
            case (short)18:
                return FINAL_CASE;
            case (short)19:
                return GENITIVE_CASE;
            case (short)20:
                return ILLATIVE_CASE;
            case (short)21:
                return INESSIVE_CASE;
            case (short)22:
                return INSTRUCTIVE_CASE;
            case (short)23:
                return INSTRUMENTAL_CASE;
            case (short)24:
                return LOCATIVE_CASE;
            case (short)25:
                return MODAL_CASE;
            case (short)26:
                return MULTIPLICATIVE_CASE;
            case (short)27:
                return NOMINATIVE_CASE;
            case (short)28:
                return OBLIQUE_CASE;
            case (short)29:
                return PARTITIVE_CASE;
            case (short)30:
                return PERLATIVE_CASE;
            case (short)31:
                return POSSESSIVE_CASE;
            case (short)32:
                return POSTPOSITIONAL_CASE;
            case (short)33:
                return PREPOSITIONAL_CASE;
            case (short)34:
                return PROLATIVE_CASE;
            case (short)35:
                return SUBLATIVE_CASE;
            case (short)36:
                return SUPERESSIVE_CASE;
            case (short)37:
                return TEMPORAL_CASE;
            case (short)38:
                return TERMINATIVE_CASE;
            case (short)39:
                return TRANSLATIVE_CASE;
            case (short)40:
                return VOCATIVE_CASE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration GrammaticalCase: " + value + "!");
        }
    }

    public static GrammaticalCase toEnum(java.lang.String itemName)
    {
        if (itemName.equals("NO_GRAMMATICAL_CASE"))
            return NO_GRAMMATICAL_CASE;
        if (itemName.equals("ABESSIVE_CASE"))
            return ABESSIVE_CASE;
        if (itemName.equals("ABLATIVE_CASE"))
            return ABLATIVE_CASE;
        if (itemName.equals("ABSOLUTIVE_CASE"))
            return ABSOLUTIVE_CASE;
        if (itemName.equals("ADESSIVE_CASE"))
            return ADESSIVE_CASE;
        if (itemName.equals("ACCUSATIVE_CASE"))
            return ACCUSATIVE_CASE;
        if (itemName.equals("ALLATIVE_CASE"))
            return ALLATIVE_CASE;
        if (itemName.equals("CAUSAL_CASE"))
            return CAUSAL_CASE;
        if (itemName.equals("COMITATIVE_CASE"))
            return COMITATIVE_CASE;
        if (itemName.equals("DATIVE_CASE"))
            return DATIVE_CASE;
        if (itemName.equals("DELATIVE_CASE"))
            return DELATIVE_CASE;
        if (itemName.equals("DELIMITATIVE_CASE"))
            return DELIMITATIVE_CASE;
        if (itemName.equals("DIRECTIONAL_CASE"))
            return DIRECTIONAL_CASE;
        if (itemName.equals("DISTRIBUTIVE_TEMPORAL_CASE"))
            return DISTRIBUTIVE_TEMPORAL_CASE;
        if (itemName.equals("ELATIVE_CASE"))
            return ELATIVE_CASE;
        if (itemName.equals("EQUATIVE_CASE"))
            return EQUATIVE_CASE;
        if (itemName.equals("ERGATIVE_CASE"))
            return ERGATIVE_CASE;
        if (itemName.equals("ESSIVE_CASE"))
            return ESSIVE_CASE;
        if (itemName.equals("FINAL_CASE"))
            return FINAL_CASE;
        if (itemName.equals("GENITIVE_CASE"))
            return GENITIVE_CASE;
        if (itemName.equals("ILLATIVE_CASE"))
            return ILLATIVE_CASE;
        if (itemName.equals("INESSIVE_CASE"))
            return INESSIVE_CASE;
        if (itemName.equals("INSTRUCTIVE_CASE"))
            return INSTRUCTIVE_CASE;
        if (itemName.equals("INSTRUMENTAL_CASE"))
            return INSTRUMENTAL_CASE;
        if (itemName.equals("LOCATIVE_CASE"))
            return LOCATIVE_CASE;
        if (itemName.equals("MODAL_CASE"))
            return MODAL_CASE;
        if (itemName.equals("MULTIPLICATIVE_CASE"))
            return MULTIPLICATIVE_CASE;
        if (itemName.equals("NOMINATIVE_CASE"))
            return NOMINATIVE_CASE;
        if (itemName.equals("OBLIQUE_CASE"))
            return OBLIQUE_CASE;
        if (itemName.equals("PARTITIVE_CASE"))
            return PARTITIVE_CASE;
        if (itemName.equals("PERLATIVE_CASE"))
            return PERLATIVE_CASE;
        if (itemName.equals("POSSESSIVE_CASE"))
            return POSSESSIVE_CASE;
        if (itemName.equals("POSTPOSITIONAL_CASE"))
            return POSTPOSITIONAL_CASE;
        if (itemName.equals("PREPOSITIONAL_CASE"))
            return PREPOSITIONAL_CASE;
        if (itemName.equals("PROLATIVE_CASE"))
            return PROLATIVE_CASE;
        if (itemName.equals("SUBLATIVE_CASE"))
            return SUBLATIVE_CASE;
        if (itemName.equals("SUPERESSIVE_CASE"))
            return SUPERESSIVE_CASE;
        if (itemName.equals("TEMPORAL_CASE"))
            return TEMPORAL_CASE;
        if (itemName.equals("TERMINATIVE_CASE"))
            return TERMINATIVE_CASE;
        if (itemName.equals("TRANSLATIVE_CASE"))
            return TRANSLATIVE_CASE;
        if (itemName.equals("VOCATIVE_CASE"))
            return VOCATIVE_CASE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration GrammaticalCase!");
    }

    private short value;
}
