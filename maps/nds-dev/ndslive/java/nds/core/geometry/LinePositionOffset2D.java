/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.geometry;

public class LinePositionOffset2D implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            linePosition_ = new zserio.runtime.array.DeltaContext();
            numBits_ = new zserio.runtime.array.DeltaContext();
            offset_ = new nds.core.geometry.PositionOffset2D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLinePosition()
        {
            return linePosition_;
        }

        public zserio.runtime.array.DeltaContext getNumBits()
        {
            return numBits_;
        }

        public nds.core.geometry.PositionOffset2D.ZserioPackingContext getOffset()
        {
            return offset_;
        }

        private zserio.runtime.array.DeltaContext linePosition_;
        private zserio.runtime.array.DeltaContext numBits_;
        private nds.core.geometry.PositionOffset2D.ZserioPackingContext offset_;
    };

    public LinePositionOffset2D(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public LinePositionOffset2D(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public LinePositionOffset2D(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public LinePositionOffset2D(
            byte shift_,
            int linePosition_,
            byte numBits_,
            nds.core.geometry.PositionOffset2D offset_)
    {
        this(shift_);

        setLinePosition(linePosition_);
        setNumBits(numBits_);
        setOffset(offset_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLinePosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        zserioContext.getNumBits().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
        offset_.initPackingContext(zserioContext.getOffset());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(linePosition_);
        endBitPosition += 5;
        endBitPosition += offset_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLinePosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        endBitPosition += zserioContext.getNumBits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
        endBitPosition += offset_.bitSizeOf(zserioContext.getOffset(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public int getLinePosition()
    {
        return linePosition_;
    }

    public void setLinePosition(int linePosition_)
    {
        this.linePosition_ = linePosition_;
    }

    public byte getNumBits()
    {
        return numBits_;
    }

    public void setNumBits(byte numBits_)
    {
        this.numBits_ = numBits_;
    }

    public nds.core.geometry.PositionOffset2D getOffset()
    {
        return offset_;
    }

    public void setOffset(nds.core.geometry.PositionOffset2D offset_)
    {
        this.offset_ = offset_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LinePositionOffset2D)
        {
            final LinePositionOffset2D that = (LinePositionOffset2D)obj;

            return
                    this.shift_ == that.shift_ &&
                    linePosition_ == that.linePosition_ &&
                    numBits_ == that.numBits_ &&
                    ((offset_ == null) ? that.offset_ == null : offset_.equals(that.offset_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, linePosition_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numBits_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, offset_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        linePosition_ = in.readVarSize();

        numBits_ = (byte)in.readBits(5);

        offset_ = new nds.core.geometry.PositionOffset2D(in, (byte)(getNumBits()), (byte)(getShift()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        linePosition_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLinePosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numBits_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumBits().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        offset_ = new nds.core.geometry.PositionOffset2D(zserioContext.getOffset(), in, (byte)(getNumBits()), (byte)(getShift()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(linePosition_);
        endBitPosition += 5;
        endBitPosition = offset_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLinePosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        endBitPosition += zserioContext.getNumBits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
        endBitPosition = offset_.initializeOffsets(zserioContext.getOffset(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(linePosition_);

        out.writeBits(numBits_, 5);

        // check parameters
        if (offset_.getNumBits() != (byte)(getNumBits()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter numBits for field LinePositionOffset2D.offset: " +
                    offset_.getNumBits() + " != " + (byte)(getNumBits()) + "!");
        }
        if (offset_.getShift() != (byte)(getShift()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field LinePositionOffset2D.offset: " +
                    offset_.getShift() + " != " + (byte)(getShift()) + "!");
        }
        offset_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLinePosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));

        zserioContext.getNumBits().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));

        offset_.write(zserioContext.getOffset(), out);
    }

    private final byte shift_;
    private int linePosition_;
    private byte numBits_;
    private nds.core.geometry.PositionOffset2D offset_;
}
