/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.geometry;

public class IndexBuffer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numEntries_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumEntries()
        {
            return numEntries_;
        }

        private zserio.runtime.array.DeltaContext numEntries_;
    };

    public IndexBuffer(
            int positionBufferSize_)
    {
        this.positionBufferSize_ = positionBufferSize_;
    }

    public IndexBuffer(zserio.runtime.io.BitStreamReader in,
            int positionBufferSize_)
            throws java.io.IOException
    {
        this.positionBufferSize_ = positionBufferSize_;

        read(in);
    }

    public IndexBuffer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            int positionBufferSize_)
            throws java.io.IOException
    {
        this.positionBufferSize_ = positionBufferSize_;

        read(context, in);
    }

    public IndexBuffer(
            int positionBufferSize_,
            int numEntries_,
            nds.core.geometry.IndexBufferEntry[] indices_)
    {
        this(positionBufferSize_);

        setNumEntries(numEntries_);
        setIndices(indices_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumEntries().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition += indices_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition += indices_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getPositionBufferSize()
    {
        return this.positionBufferSize_;
    }

    public int getNumEntries()
    {
        return numEntries_;
    }

    public void setNumEntries(int numEntries_)
    {
        this.numEntries_ = numEntries_;
    }

    public nds.core.geometry.IndexBufferEntry[] getIndices()
    {
        return (indices_ == null) ? null : indices_.getRawArray();
    }

    public void setIndices(nds.core.geometry.IndexBufferEntry[] indices_)
    {
        this.indices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.IndexBufferEntry.class, indices_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.IndexBufferEntry>(new ZserioElementFactory_indices()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IndexBuffer)
        {
            final IndexBuffer that = (IndexBuffer)obj;

            return
                    this.positionBufferSize_ == that.positionBufferSize_ &&
                    numEntries_ == that.numEntries_ &&
                    ((indices_ == null) ? that.indices_ == null : indices_.equals(that.indices_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getPositionBufferSize());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numEntries_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, indices_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numEntries_ = in.readVarSize();

        indices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.IndexBufferEntry.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.IndexBufferEntry>(new ZserioElementFactory_indices()),
                zserio.runtime.array.ArrayType.NORMAL);
        indices_.readPacked(in, (int)(getNumEntries()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numEntries_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumEntries().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        indices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.IndexBufferEntry.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.IndexBufferEntry>(new ZserioElementFactory_indices()),
                zserio.runtime.array.ArrayType.NORMAL);
        indices_.readPacked(in, (int)(getNumEntries()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition = indices_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition = indices_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numEntries_);

        if (indices_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IndexBuffer.indices: " +
                    indices_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        indices_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumEntries().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));

        if (indices_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field IndexBuffer.indices: " +
                    indices_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        indices_.writePacked(out);
    }

    private final class ZserioElementFactory_indices implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.IndexBufferEntry>
    {
        @Override
        public nds.core.geometry.IndexBufferEntry create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.IndexBufferEntry(in, (int)(getPositionBufferSize()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.IndexBufferEntry.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.IndexBufferEntry create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.IndexBufferEntry(context, in, (int)(getPositionBufferSize()));
        }
    }

    private final int positionBufferSize_;
    private int numEntries_;
    private zserio.runtime.array.Array indices_;
}
