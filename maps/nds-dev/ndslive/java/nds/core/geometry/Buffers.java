/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.geometry;

public class Buffers implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            polygons2D_ = new nds.core.geometry.Polygon2DBuffers.ZserioPackingContext();
            polygons3D_ = new nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext();
            meshes3D_ = new nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext();
        }

        public nds.core.geometry.Polygon2DBuffers.ZserioPackingContext getPolygons2D()
        {
            return polygons2D_;
        }

        public nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext getPolygons3D()
        {
            return polygons3D_;
        }

        public nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext getMeshes3D()
        {
            return meshes3D_;
        }

        private nds.core.geometry.Polygon2DBuffers.ZserioPackingContext polygons2D_;
        private nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext polygons3D_;
        private nds.core.geometry.PolyMesh3DBuffers.ZserioPackingContext meshes3D_;
    };

    public Buffers(
            nds.core.geometry.GeometryLayerType type_,
            byte shiftXY_,
            byte shiftZ_,
            int numElements_)
    {
        this.type_ = type_;
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;
    }

    public Buffers(zserio.runtime.io.BitStreamReader in,
            nds.core.geometry.GeometryLayerType type_,
            byte shiftXY_,
            byte shiftZ_,
            int numElements_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;

        read(in);
    }

    public Buffers(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.geometry.GeometryLayerType type_,
            byte shiftXY_,
            byte shiftZ_,
            int numElements_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case POSITION_2D:
            return CHOICE_positions2D;
        case POSITION_3D:
            return CHOICE_positions3D;
        case LINE_2D:
            return CHOICE_lines2D;
        case LINE_3D:
            return CHOICE_lines3D;
        case POLYGON_2D:
            return CHOICE_polygons2D;
        case POLYGON_3D:
            return CHOICE_polygons3D;
        case MESH_3D:
            return CHOICE_meshes3D;
        case SIMPLE_POLYGON_2D:
            return CHOICE_simplePolygons2D;
        case SIMPLE_POLYGON_SET_2D:
            return CHOICE_simplePolygonSets2D;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case POSITION_2D:
            break;
        case POSITION_3D:
            break;
        case LINE_2D:
            break;
        case LINE_3D:
            break;
        case POLYGON_2D:
            getPolygons2D().initPackingContext(zserioContext.getPolygons2D());
            break;
        case POLYGON_3D:
            getPolygons3D().initPackingContext(zserioContext.getPolygons3D());
            break;
        case MESH_3D:
            getMeshes3D().initPackingContext(zserioContext.getMeshes3D());
            break;
        case SIMPLE_POLYGON_2D:
            break;
        case SIMPLE_POLYGON_SET_2D:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case POSITION_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case POSITION_3D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case LINE_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        case LINE_3D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        case POLYGON_2D:
            endBitPosition += getPolygons2D().bitSizeOf(endBitPosition);
            break;
        case POLYGON_3D:
            endBitPosition += getPolygons3D().bitSizeOf(endBitPosition);
            break;
        case MESH_3D:
            endBitPosition += getMeshes3D().bitSizeOf(endBitPosition);
            break;
        case SIMPLE_POLYGON_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        case SIMPLE_POLYGON_SET_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case POSITION_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case POSITION_3D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case LINE_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case LINE_3D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case POLYGON_2D:
            endBitPosition += getPolygons2D().bitSizeOf(zserioContext.getPolygons2D(), endBitPosition);
            break;
        case POLYGON_3D:
            endBitPosition += getPolygons3D().bitSizeOf(zserioContext.getPolygons3D(), endBitPosition);
            break;
        case MESH_3D:
            endBitPosition += getMeshes3D().bitSizeOf(zserioContext.getMeshes3D(), endBitPosition);
            break;
        case SIMPLE_POLYGON_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case SIMPLE_POLYGON_SET_2D:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.geometry.GeometryLayerType getType()
    {
        return this.type_;
    }

    public byte getShiftXY()
    {
        return this.shiftXY_;
    }

    public byte getShiftZ()
    {
        return this.shiftZ_;
    }

    public int getNumElements()
    {
        return this.numElements_;
    }

    public nds.core.geometry.Position2D[] getPositions2D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setPositions2D(nds.core.geometry.Position2D[] positions2D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position2D.class, positions2D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position2D>(new ZserioElementFactory_positions2D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.Position3D[] getPositions3D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setPositions3D(nds.core.geometry.Position3D[] positions3D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class, positions3D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions3D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.Line2D[] getLines2D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setLines2D(nds.core.geometry.Line2D[] lines2D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class, lines2D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_lines2D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.Line3D[] getLines3D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setLines3D(nds.core.geometry.Line3D[] lines3D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line3D.class, lines3D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line3D>(new ZserioElementFactory_lines3D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.Polygon2DBuffers getPolygons2D()
    {
        return (nds.core.geometry.Polygon2DBuffers)objectChoice;
    }

    public void setPolygons2D(nds.core.geometry.Polygon2DBuffers polygons2D_)
    {
        objectChoice = polygons2D_;
    }

    public nds.core.geometry.PolyMesh3DBuffers getPolygons3D()
    {
        return (nds.core.geometry.PolyMesh3DBuffers)objectChoice;
    }

    public void setPolygons3D(nds.core.geometry.PolyMesh3DBuffers polygons3D_)
    {
        objectChoice = polygons3D_;
    }

    public nds.core.geometry.PolyMesh3DBuffers getMeshes3D()
    {
        return (nds.core.geometry.PolyMesh3DBuffers)objectChoice;
    }

    public void setMeshes3D(nds.core.geometry.PolyMesh3DBuffers meshes3D_)
    {
        objectChoice = meshes3D_;
    }

    public nds.core.geometry.Line2D[] getSimplePolygons2D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setSimplePolygons2D(nds.core.geometry.Line2D[] simplePolygons2D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class, simplePolygons2D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_simplePolygons2D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.SimplePolygonSet2D[] getSimplePolygonSets2D()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setSimplePolygonSets2D(nds.core.geometry.SimplePolygonSet2D[] simplePolygonSets2D_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.SimplePolygonSet2D.class, simplePolygonSets2D_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.SimplePolygonSet2D>(new ZserioElementFactory_simplePolygonSets2D()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Buffers)
        {
            final Buffers that = (Buffers)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    this.shiftXY_ == that.shiftXY_ &&
                    this.shiftZ_ == that.shiftZ_ &&
                    this.numElements_ == that.numElements_ &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftXY());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftZ());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getNumElements());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case POSITION_2D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case POSITION_3D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case LINE_2D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case LINE_3D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case POLYGON_2D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.Polygon2DBuffers)objectChoice);
                break;
            case POLYGON_3D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.PolyMesh3DBuffers)objectChoice);
                break;
            case MESH_3D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.PolyMesh3DBuffers)objectChoice);
                break;
            case SIMPLE_POLYGON_2D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case SIMPLE_POLYGON_SET_2D:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case POSITION_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position2D>(new ZserioElementFactory_positions2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case POSITION_3D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions3D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case LINE_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_lines2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).read(in, (int)(getNumElements()));
            break;
        case LINE_3D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line3D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line3D>(new ZserioElementFactory_lines3D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).read(in, (int)(getNumElements()));
            break;
        case POLYGON_2D:
            objectChoice = new nds.core.geometry.Polygon2DBuffers(in, (byte)(getShiftXY()), (int)(getNumElements()));
            break;
        case POLYGON_3D:
            objectChoice = new nds.core.geometry.PolyMesh3DBuffers(in, (byte)(getShiftXY()), (byte)(getShiftZ()), (int)(getNumElements()), nds.core.geometry.PolyMesh3DType.POLYGON);
            break;
        case MESH_3D:
            objectChoice = new nds.core.geometry.PolyMesh3DBuffers(in, (byte)(getShiftXY()), (byte)(getShiftZ()), (int)(getNumElements()), nds.core.geometry.PolyMesh3DType.MESH);
            break;
        case SIMPLE_POLYGON_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_simplePolygons2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).read(in, (int)(getNumElements()));
            break;
        case SIMPLE_POLYGON_SET_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.SimplePolygonSet2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.SimplePolygonSet2D>(new ZserioElementFactory_simplePolygonSets2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).read(in, (int)(getNumElements()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case POSITION_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position2D>(new ZserioElementFactory_positions2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case POSITION_3D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions3D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case LINE_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_lines2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case LINE_3D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line3D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line3D>(new ZserioElementFactory_lines3D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case POLYGON_2D:
            objectChoice = new nds.core.geometry.Polygon2DBuffers(zserioContext.getPolygons2D(), in, (byte)(getShiftXY()), (int)(getNumElements()));
            break;
        case POLYGON_3D:
            objectChoice = new nds.core.geometry.PolyMesh3DBuffers(zserioContext.getPolygons3D(), in, (byte)(getShiftXY()), (byte)(getShiftZ()), (int)(getNumElements()), nds.core.geometry.PolyMesh3DType.POLYGON);
            break;
        case MESH_3D:
            objectChoice = new nds.core.geometry.PolyMesh3DBuffers(zserioContext.getMeshes3D(), in, (byte)(getShiftXY()), (byte)(getShiftZ()), (int)(getNumElements()), nds.core.geometry.PolyMesh3DType.MESH);
            break;
        case SIMPLE_POLYGON_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_simplePolygons2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        case SIMPLE_POLYGON_SET_2D:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.SimplePolygonSet2D.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.SimplePolygonSet2D>(new ZserioElementFactory_simplePolygonSets2D()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in, (int)(getNumElements()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case POSITION_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case POSITION_3D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case LINE_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        case LINE_3D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        case POLYGON_2D:
            {
                endBitPosition = getPolygons2D().initializeOffsets(endBitPosition);
            }
            break;
        case POLYGON_3D:
            {
                endBitPosition = getPolygons3D().initializeOffsets(endBitPosition);
            }
            break;
        case MESH_3D:
            {
                endBitPosition = getMeshes3D().initializeOffsets(endBitPosition);
            }
            break;
        case SIMPLE_POLYGON_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        case SIMPLE_POLYGON_SET_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case POSITION_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case POSITION_3D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case LINE_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case LINE_3D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case POLYGON_2D:
            {
                endBitPosition = getPolygons2D().initializeOffsets(zserioContext.getPolygons2D(), endBitPosition);
            }
            break;
        case POLYGON_3D:
            {
                endBitPosition = getPolygons3D().initializeOffsets(zserioContext.getPolygons3D(), endBitPosition);
            }
            break;
        case MESH_3D:
            {
                endBitPosition = getMeshes3D().initializeOffsets(zserioContext.getMeshes3D(), endBitPosition);
            }
            break;
        case SIMPLE_POLYGON_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case SIMPLE_POLYGON_SET_2D:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case POSITION_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.positions2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case POSITION_3D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.positions3D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case LINE_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.lines2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        case LINE_3D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.lines3D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        case POLYGON_2D:
            // check parameters
            if (getPolygons2D().getShift() != (byte)(getShiftXY()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field Buffers.polygons2D: " +
                        getPolygons2D().getShift() + " != " + (byte)(getShiftXY()) + "!");
            }
            if (getPolygons2D().getNumElements() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter numElements for field Buffers.polygons2D: " +
                        getPolygons2D().getNumElements() + " != " + (int)(getNumElements()) + "!");
            }
            getPolygons2D().write(out);
            break;
        case POLYGON_3D:
            // check parameters
            if (getPolygons3D().getShiftXY() != (byte)(getShiftXY()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field Buffers.polygons3D: " +
                        getPolygons3D().getShiftXY() + " != " + (byte)(getShiftXY()) + "!");
            }
            if (getPolygons3D().getShiftZ() != (byte)(getShiftZ()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field Buffers.polygons3D: " +
                        getPolygons3D().getShiftZ() + " != " + (byte)(getShiftZ()) + "!");
            }
            if (getPolygons3D().getNumElements() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter numElements for field Buffers.polygons3D: " +
                        getPolygons3D().getNumElements() + " != " + (int)(getNumElements()) + "!");
            }
            if (getPolygons3D().getType() != (nds.core.geometry.PolyMesh3DType.POLYGON))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field Buffers.polygons3D!");
            }
            getPolygons3D().write(out);
            break;
        case MESH_3D:
            // check parameters
            if (getMeshes3D().getShiftXY() != (byte)(getShiftXY()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field Buffers.meshes3D: " +
                        getMeshes3D().getShiftXY() + " != " + (byte)(getShiftXY()) + "!");
            }
            if (getMeshes3D().getShiftZ() != (byte)(getShiftZ()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field Buffers.meshes3D: " +
                        getMeshes3D().getShiftZ() + " != " + (byte)(getShiftZ()) + "!");
            }
            if (getMeshes3D().getNumElements() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter numElements for field Buffers.meshes3D: " +
                        getMeshes3D().getNumElements() + " != " + (int)(getNumElements()) + "!");
            }
            if (getMeshes3D().getType() != (nds.core.geometry.PolyMesh3DType.MESH))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field Buffers.meshes3D!");
            }
            getMeshes3D().write(out);
            break;
        case SIMPLE_POLYGON_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.simplePolygons2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        case SIMPLE_POLYGON_SET_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.simplePolygonSets2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case POSITION_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.positions2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case POSITION_3D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.positions3D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case LINE_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.lines2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case LINE_3D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.lines3D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case POLYGON_2D:
            getPolygons2D().write(zserioContext.getPolygons2D(), out);
            break;
        case POLYGON_3D:
            getPolygons3D().write(zserioContext.getPolygons3D(), out);
            break;
        case MESH_3D:
            getMeshes3D().write(zserioContext.getMeshes3D(), out);
            break;
        case SIMPLE_POLYGON_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.simplePolygons2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case SIMPLE_POLYGON_SET_2D:
            if (((zserio.runtime.array.Array)objectChoice).size() != (int)(getNumElements()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Buffers.simplePolygonSets2D: " +
                        ((zserio.runtime.array.Array)objectChoice).size() + " != " + (int)(getNumElements()) + "!");
            }
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice Buffers: " + getType() + "!");
        }
    }

    public static final int CHOICE_positions2D = 0;
    public static final int CHOICE_positions3D = 1;
    public static final int CHOICE_lines2D = 2;
    public static final int CHOICE_lines3D = 3;
    public static final int CHOICE_polygons2D = 4;
    public static final int CHOICE_polygons3D = 5;
    public static final int CHOICE_meshes3D = 6;
    public static final int CHOICE_simplePolygons2D = 7;
    public static final int CHOICE_simplePolygonSets2D = 8;
    public static final int UNDEFINED_CHOICE = -1;

    private final class ZserioElementFactory_positions2D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Position2D>
    {
        @Override
        public nds.core.geometry.Position2D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Position2D(in, (byte)(getShiftXY()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Position2D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Position2D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Position2D(context, in, (byte)(getShiftXY()));
        }
    }

    private final class ZserioElementFactory_positions3D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Position3D>
    {
        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Position3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(context, in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }
    }

    private final class ZserioElementFactory_lines2D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Line2D>
    {
        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(in, (byte)(getShiftXY()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Line2D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(context, in, (byte)(getShiftXY()));
        }
    }

    private final class ZserioElementFactory_lines3D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Line3D>
    {
        @Override
        public nds.core.geometry.Line3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Line3D(in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Line3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Line3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Line3D(context, in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }
    }

    private final class ZserioElementFactory_simplePolygons2D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Line2D>
    {
        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(in, (byte)(getShiftXY()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Line2D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(context, in, (byte)(getShiftXY()));
        }
    }

    private final class ZserioElementFactory_simplePolygonSets2D implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.SimplePolygonSet2D>
    {
        @Override
        public nds.core.geometry.SimplePolygonSet2D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.SimplePolygonSet2D(in, (byte)(getShiftXY()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.SimplePolygonSet2D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.SimplePolygonSet2D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.SimplePolygonSet2D(context, in, (byte)(getShiftXY()));
        }
    }

    private final nds.core.geometry.GeometryLayerType type_;
    private final byte shiftXY_;
    private final byte shiftZ_;
    private final int numElements_;
    private java.lang.Object objectChoice;
}
