/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.geometry;

public class LinePositionOffset3D implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            linePosition_ = new zserio.runtime.array.DeltaContext();
            numBitsXY_ = new zserio.runtime.array.DeltaContext();
            numBitsZ_ = new zserio.runtime.array.DeltaContext();
            offset_ = new nds.core.geometry.PositionOffset3D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLinePosition()
        {
            return linePosition_;
        }

        public zserio.runtime.array.DeltaContext getNumBitsXY()
        {
            return numBitsXY_;
        }

        public zserio.runtime.array.DeltaContext getNumBitsZ()
        {
            return numBitsZ_;
        }

        public nds.core.geometry.PositionOffset3D.ZserioPackingContext getOffset()
        {
            return offset_;
        }

        private zserio.runtime.array.DeltaContext linePosition_;
        private zserio.runtime.array.DeltaContext numBitsXY_;
        private zserio.runtime.array.DeltaContext numBitsZ_;
        private nds.core.geometry.PositionOffset3D.ZserioPackingContext offset_;
    };

    public LinePositionOffset3D(
            byte shiftXY_,
            byte shiftZ_)
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
    }

    public LinePositionOffset3D(zserio.runtime.io.BitStreamReader in,
            byte shiftXY_,
            byte shiftZ_)
            throws java.io.IOException
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;

        read(in);
    }

    public LinePositionOffset3D(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shiftXY_,
            byte shiftZ_)
            throws java.io.IOException
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;

        read(context, in);
    }

    public LinePositionOffset3D(
            byte shiftXY_,
            byte shiftZ_,
            int linePosition_,
            byte numBitsXY_,
            byte numBitsZ_,
            nds.core.geometry.PositionOffset3D offset_)
    {
        this(shiftXY_, shiftZ_);

        setLinePosition(linePosition_);
        setNumBitsXY(numBitsXY_);
        setNumBitsZ(numBitsZ_);
        setOffset(offset_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLinePosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        zserioContext.getNumBitsXY().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsXY_));
        zserioContext.getNumBitsZ().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsZ_));
        offset_.initPackingContext(zserioContext.getOffset());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(linePosition_);
        endBitPosition += 5;
        endBitPosition += 5;
        endBitPosition += offset_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLinePosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        endBitPosition += zserioContext.getNumBitsXY().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsXY_));
        endBitPosition += zserioContext.getNumBitsZ().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsZ_));
        endBitPosition += offset_.bitSizeOf(zserioContext.getOffset(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShiftXY()
    {
        return this.shiftXY_;
    }

    public byte getShiftZ()
    {
        return this.shiftZ_;
    }

    public int getLinePosition()
    {
        return linePosition_;
    }

    public void setLinePosition(int linePosition_)
    {
        this.linePosition_ = linePosition_;
    }

    public byte getNumBitsXY()
    {
        return numBitsXY_;
    }

    public void setNumBitsXY(byte numBitsXY_)
    {
        this.numBitsXY_ = numBitsXY_;
    }

    public byte getNumBitsZ()
    {
        return numBitsZ_;
    }

    public void setNumBitsZ(byte numBitsZ_)
    {
        this.numBitsZ_ = numBitsZ_;
    }

    public nds.core.geometry.PositionOffset3D getOffset()
    {
        return offset_;
    }

    public void setOffset(nds.core.geometry.PositionOffset3D offset_)
    {
        this.offset_ = offset_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LinePositionOffset3D)
        {
            final LinePositionOffset3D that = (LinePositionOffset3D)obj;

            return
                    this.shiftXY_ == that.shiftXY_ &&
                    this.shiftZ_ == that.shiftZ_ &&
                    linePosition_ == that.linePosition_ &&
                    numBitsXY_ == that.numBitsXY_ &&
                    numBitsZ_ == that.numBitsZ_ &&
                    ((offset_ == null) ? that.offset_ == null : offset_.equals(that.offset_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftXY());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftZ());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, linePosition_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numBitsXY_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numBitsZ_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, offset_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        linePosition_ = in.readVarSize();

        numBitsXY_ = (byte)in.readBits(5);

        numBitsZ_ = (byte)in.readBits(5);

        offset_ = new nds.core.geometry.PositionOffset3D(in, (byte)(getNumBitsXY()), (byte)(getNumBitsZ()), (byte)(getShiftXY()), (byte)(getShiftZ()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        linePosition_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLinePosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numBitsXY_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumBitsXY().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        numBitsZ_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumBitsZ().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        offset_ = new nds.core.geometry.PositionOffset3D(zserioContext.getOffset(), in, (byte)(getNumBitsXY()), (byte)(getNumBitsZ()), (byte)(getShiftXY()), (byte)(getShiftZ()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(linePosition_);
        endBitPosition += 5;
        endBitPosition += 5;
        endBitPosition = offset_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLinePosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));
        endBitPosition += zserioContext.getNumBitsXY().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsXY_));
        endBitPosition += zserioContext.getNumBitsZ().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsZ_));
        endBitPosition = offset_.initializeOffsets(zserioContext.getOffset(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(linePosition_);

        out.writeBits(numBitsXY_, 5);

        out.writeBits(numBitsZ_, 5);

        // check parameters
        if (offset_.getNumBitsXY() != (byte)(getNumBitsXY()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter numBitsXY for field LinePositionOffset3D.offset: " +
                    offset_.getNumBitsXY() + " != " + (byte)(getNumBitsXY()) + "!");
        }
        if (offset_.getNumBitsZ() != (byte)(getNumBitsZ()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter numBitsZ for field LinePositionOffset3D.offset: " +
                    offset_.getNumBitsZ() + " != " + (byte)(getNumBitsZ()) + "!");
        }
        if (offset_.getShiftXY() != (byte)(getShiftXY()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field LinePositionOffset3D.offset: " +
                    offset_.getShiftXY() + " != " + (byte)(getShiftXY()) + "!");
        }
        if (offset_.getShiftZ() != (byte)(getShiftZ()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field LinePositionOffset3D.offset: " +
                    offset_.getShiftZ() + " != " + (byte)(getShiftZ()) + "!");
        }
        offset_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLinePosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(linePosition_));

        zserioContext.getNumBitsXY().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsXY_));

        zserioContext.getNumBitsZ().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBitsZ_));

        offset_.write(zserioContext.getOffset(), out);
    }

    private final byte shiftXY_;
    private final byte shiftZ_;
    private int linePosition_;
    private byte numBitsXY_;
    private byte numBitsZ_;
    private nds.core.geometry.PositionOffset3D offset_;
}
