/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.geometry;

public class PolyMesh3DBuffers implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numPositions_ = new zserio.runtime.array.DeltaContext();
            indexBuffer_ = new nds.core.geometry.IndexBuffer.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getNumPositions()
        {
            return numPositions_;
        }

        public nds.core.geometry.IndexBuffer.ZserioPackingContext getIndexBuffer()
        {
            return indexBuffer_;
        }

        private zserio.runtime.array.DeltaContext numPositions_;
        private nds.core.geometry.IndexBuffer.ZserioPackingContext indexBuffer_;
    };

    public PolyMesh3DBuffers(
            byte shiftXY_,
            byte shiftZ_,
            int numElements_,
            nds.core.geometry.PolyMesh3DType type_)
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;
        this.type_ = type_;
    }

    public PolyMesh3DBuffers(zserio.runtime.io.BitStreamReader in,
            byte shiftXY_,
            byte shiftZ_,
            int numElements_,
            nds.core.geometry.PolyMesh3DType type_)
            throws java.io.IOException
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;
        this.type_ = type_;

        read(in);
    }

    public PolyMesh3DBuffers(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shiftXY_,
            byte shiftZ_,
            int numElements_,
            nds.core.geometry.PolyMesh3DType type_)
            throws java.io.IOException
    {
        this.shiftXY_ = shiftXY_;
        this.shiftZ_ = shiftZ_;
        this.numElements_ = numElements_;
        this.type_ = type_;

        read(context, in);
    }

    public PolyMesh3DBuffers(
            byte shiftXY_,
            byte shiftZ_,
            int numElements_,
            nds.core.geometry.PolyMesh3DType type_,
            int numPositions_,
            nds.core.geometry.Position3D[] positions_,
            nds.core.geometry.IndexBuffer indexBuffer_,
            nds.core.geometry.PolyMesh3D[] polymeshes_)
    {
        this(shiftXY_, shiftZ_, numElements_, type_);

        setNumPositions(numPositions_);
        setPositions(positions_);
        setIndexBuffer(indexBuffer_);
        setPolymeshes(polymeshes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPositions().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        indexBuffer_.initPackingContext(zserioContext.getIndexBuffer());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPositions_);
        endBitPosition += positions_.bitSizeOfPacked(endBitPosition);
        endBitPosition += indexBuffer_.bitSizeOf(endBitPosition);
        endBitPosition += polymeshes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPositions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        endBitPosition += positions_.bitSizeOfPacked(endBitPosition);
        endBitPosition += indexBuffer_.bitSizeOf(zserioContext.getIndexBuffer(), endBitPosition);
        endBitPosition += polymeshes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShiftXY()
    {
        return this.shiftXY_;
    }

    public byte getShiftZ()
    {
        return this.shiftZ_;
    }

    public int getNumElements()
    {
        return this.numElements_;
    }

    public nds.core.geometry.PolyMesh3DType getType()
    {
        return this.type_;
    }

    public int getNumPositions()
    {
        return numPositions_;
    }

    public void setNumPositions(int numPositions_)
    {
        this.numPositions_ = numPositions_;
    }

    public nds.core.geometry.Position3D[] getPositions()
    {
        return (positions_ == null) ? null : positions_.getRawArray();
    }

    public void setPositions(nds.core.geometry.Position3D[] positions_)
    {
        this.positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class, positions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.geometry.IndexBuffer getIndexBuffer()
    {
        return indexBuffer_;
    }

    public void setIndexBuffer(nds.core.geometry.IndexBuffer indexBuffer_)
    {
        this.indexBuffer_ = indexBuffer_;
    }

    public nds.core.geometry.PolyMesh3D[] getPolymeshes()
    {
        return (polymeshes_ == null) ? null : polymeshes_.getRawArray();
    }

    public void setPolymeshes(nds.core.geometry.PolyMesh3D[] polymeshes_)
    {
        this.polymeshes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.PolyMesh3D.class, polymeshes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.PolyMesh3D>(new ZserioElementFactory_polymeshes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PolyMesh3DBuffers)
        {
            final PolyMesh3DBuffers that = (PolyMesh3DBuffers)obj;

            return
                    this.shiftXY_ == that.shiftXY_ &&
                    this.shiftZ_ == that.shiftZ_ &&
                    this.numElements_ == that.numElements_ &&
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    numPositions_ == that.numPositions_ &&
                    ((positions_ == null) ? that.positions_ == null : positions_.equals(that.positions_)) &&
                    ((indexBuffer_ == null) ? that.indexBuffer_ == null : indexBuffer_.equals(that.indexBuffer_)) &&
                    ((polymeshes_ == null) ? that.polymeshes_ == null : polymeshes_.equals(that.polymeshes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftXY());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShiftZ());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getNumElements());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numPositions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, positions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, indexBuffer_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, polymeshes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numPositions_ = in.readVarSize();

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.readPacked(in, (int)(getNumPositions()));

        indexBuffer_ = new nds.core.geometry.IndexBuffer(in, (int)(getNumPositions()));

        polymeshes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.PolyMesh3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.PolyMesh3D>(new ZserioElementFactory_polymeshes()),
                zserio.runtime.array.ArrayType.NORMAL);
        polymeshes_.readPacked(in, (int)(getNumElements()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numPositions_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumPositions().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.readPacked(in, (int)(getNumPositions()));

        indexBuffer_ = new nds.core.geometry.IndexBuffer(zserioContext.getIndexBuffer(), in, (int)(getNumPositions()));

        polymeshes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.PolyMesh3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.PolyMesh3D>(new ZserioElementFactory_polymeshes()),
                zserio.runtime.array.ArrayType.NORMAL);
        polymeshes_.readPacked(in, (int)(getNumElements()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPositions_);
        endBitPosition = positions_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = indexBuffer_.initializeOffsets(endBitPosition);
        endBitPosition = polymeshes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPositions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        endBitPosition = positions_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = indexBuffer_.initializeOffsets(zserioContext.getIndexBuffer(), endBitPosition);
        endBitPosition = polymeshes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numPositions_);

        if (positions_.size() != (int)(getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field PolyMesh3DBuffers.positions: " +
                    positions_.size() + " != " + (int)(getNumPositions()) + "!");
        }
        positions_.writePacked(out);

        // check parameters
        if (indexBuffer_.getPositionBufferSize() != (int)(getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter positionBufferSize for field PolyMesh3DBuffers.indexBuffer: " +
                    indexBuffer_.getPositionBufferSize() + " != " + (int)(getNumPositions()) + "!");
        }
        indexBuffer_.write(out);

        if (polymeshes_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field PolyMesh3DBuffers.polymeshes: " +
                    polymeshes_.size() + " != " + (int)(getNumElements()) + "!");
        }
        polymeshes_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPositions().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));

        if (positions_.size() != (int)(getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field PolyMesh3DBuffers.positions: " +
                    positions_.size() + " != " + (int)(getNumPositions()) + "!");
        }
        positions_.writePacked(out);

        indexBuffer_.write(zserioContext.getIndexBuffer(), out);

        if (polymeshes_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field PolyMesh3DBuffers.polymeshes: " +
                    polymeshes_.size() + " != " + (int)(getNumElements()) + "!");
        }
        polymeshes_.writePacked(out);
    }

    private final class ZserioElementFactory_positions implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Position3D>
    {
        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Position3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(context, in, (byte)(getShiftXY()), (byte)(getShiftZ()));
        }
    }

    private final class ZserioElementFactory_polymeshes implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.PolyMesh3D>
    {
        @Override
        public nds.core.geometry.PolyMesh3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.PolyMesh3D(in, getIndexBuffer(), getType());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.PolyMesh3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.PolyMesh3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.PolyMesh3D(context, in, getIndexBuffer(), getType());
        }
    }

    private final byte shiftXY_;
    private final byte shiftZ_;
    private final int numElements_;
    private final nds.core.geometry.PolyMesh3DType type_;
    private int numPositions_;
    private zserio.runtime.array.Array positions_;
    private nds.core.geometry.IndexBuffer indexBuffer_;
    private zserio.runtime.array.Array polymeshes_;
}
