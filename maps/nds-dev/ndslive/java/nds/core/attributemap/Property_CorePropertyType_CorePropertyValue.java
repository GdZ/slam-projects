/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.attributemap;

public class Property_CorePropertyType_CorePropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            propertyTypeCode_ = new zserio.runtime.array.DeltaContext();
            propertyValue_ = new nds.core.properties.CorePropertyValue.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getPropertyTypeCode()
        {
            return propertyTypeCode_;
        }

        public nds.core.properties.CorePropertyValue.ZserioPackingContext getPropertyValue()
        {
            return propertyValue_;
        }

        private zserio.runtime.array.DeltaContext propertyTypeCode_;
        private nds.core.properties.CorePropertyValue.ZserioPackingContext propertyValue_;
    };

    public Property_CorePropertyType_CorePropertyValue()
    {
    }

    public Property_CorePropertyType_CorePropertyValue(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Property_CorePropertyType_CorePropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Property_CorePropertyType_CorePropertyValue(
            nds.core.properties.CorePropertyType propertyTypeCode_,
            nds.core.properties.CorePropertyValue propertyValue_)
    {
        setPropertyTypeCode(propertyTypeCode_);
        setPropertyValue(propertyValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        propertyTypeCode_.initPackingContext(zserioContext.getPropertyTypeCode());
        propertyValue_.initPackingContext(zserioContext.getPropertyValue());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += propertyTypeCode_.bitSizeOf(endBitPosition);
        endBitPosition += propertyValue_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += propertyTypeCode_.bitSizeOf(zserioContext.getPropertyTypeCode(), endBitPosition);
        endBitPosition += propertyValue_.bitSizeOf(zserioContext.getPropertyValue(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.properties.CorePropertyType getPropertyTypeCode()
    {
        return propertyTypeCode_;
    }

    public void setPropertyTypeCode(nds.core.properties.CorePropertyType propertyTypeCode_)
    {
        this.propertyTypeCode_ = propertyTypeCode_;
    }

    public nds.core.properties.CorePropertyValue getPropertyValue()
    {
        return propertyValue_;
    }

    public void setPropertyValue(nds.core.properties.CorePropertyValue propertyValue_)
    {
        this.propertyValue_ = propertyValue_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Property_CorePropertyType_CorePropertyValue)
        {
            final Property_CorePropertyType_CorePropertyValue that = (Property_CorePropertyType_CorePropertyValue)obj;

            return
                    ((propertyTypeCode_ == null) ? that.propertyTypeCode_ == null : propertyTypeCode_.getValue() == that.propertyTypeCode_.getValue()) &&
                    ((propertyValue_ == null) ? that.propertyValue_ == null : propertyValue_.equals(that.propertyValue_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, propertyTypeCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, propertyValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        propertyTypeCode_ = nds.core.properties.CorePropertyType.readEnum(in);

        propertyValue_ = new nds.core.properties.CorePropertyValue(in, getPropertyTypeCode());
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        propertyTypeCode_ = nds.core.properties.CorePropertyType.readEnum(zserioContext.getPropertyTypeCode(), in);

        propertyValue_ = new nds.core.properties.CorePropertyValue(zserioContext.getPropertyValue(), in, getPropertyTypeCode());
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += propertyTypeCode_.bitSizeOf(endBitPosition);
        endBitPosition = propertyValue_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = propertyTypeCode_.initializeOffsets(zserioContext.getPropertyTypeCode(), endBitPosition);
        endBitPosition = propertyValue_.initializeOffsets(zserioContext.getPropertyValue(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        propertyTypeCode_.write(out);

        // check parameters
        if (propertyValue_.getType() != (getPropertyTypeCode()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field Property_CorePropertyType_CorePropertyValue.propertyValue!");
        }
        propertyValue_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        propertyTypeCode_.write(zserioContext.getPropertyTypeCode(), out);

        propertyValue_.write(zserioContext.getPropertyValue(), out);
    }

    private nds.core.properties.CorePropertyType propertyTypeCode_;
    private nds.core.properties.CorePropertyValue propertyValue_;
}
