/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.attributemap;

public class ConditionList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numConditions_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumConditions()
        {
            return numConditions_;
        }

        private zserio.runtime.array.DeltaContext numConditions_;
    };

    public ConditionList()
    {
    }

    public ConditionList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ConditionList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ConditionList(
            short numConditions_,
            nds.core.attributemap.Condition[] conditionList_)
    {
        setNumConditions(numConditions_);
        setConditionList(conditionList_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumConditions().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numConditions_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += conditionList_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumConditions().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numConditions_));
        endBitPosition += conditionList_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumConditions()
    {
        return numConditions_;
    }

    public void setNumConditions(short numConditions_)
    {
        this.numConditions_ = numConditions_;
    }

    public nds.core.attributemap.Condition[] getConditionList()
    {
        return (conditionList_ == null) ? null : conditionList_.getRawArray();
    }

    public void setConditionList(nds.core.attributemap.Condition[] conditionList_)
    {
        this.conditionList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.attributemap.Condition.class, conditionList_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.attributemap.Condition>(new ZserioElementFactory_conditionList()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ConditionList)
        {
            final ConditionList that = (ConditionList)obj;

            return
                    numConditions_ == that.numConditions_ &&
                    ((conditionList_ == null) ? that.conditionList_ == null : conditionList_.equals(that.conditionList_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numConditions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, conditionList_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numConditions_ = in.readUnsignedByte();

        conditionList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.attributemap.Condition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.attributemap.Condition>(new ZserioElementFactory_conditionList()),
                zserio.runtime.array.ArrayType.NORMAL);
        conditionList_.readPacked(in, (int)(getNumConditions()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numConditions_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumConditions().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        conditionList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.attributemap.Condition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.attributemap.Condition>(new ZserioElementFactory_conditionList()),
                zserio.runtime.array.ArrayType.NORMAL);
        conditionList_.readPacked(in, (int)(getNumConditions()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = conditionList_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumConditions().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numConditions_));
        endBitPosition = conditionList_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numConditions_);

        if (conditionList_.size() != (int)(getNumConditions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ConditionList.conditionList: " +
                    conditionList_.size() + " != " + (int)(getNumConditions()) + "!");
        }
        conditionList_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumConditions().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numConditions_));

        if (conditionList_.size() != (int)(getNumConditions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ConditionList.conditionList: " +
                    conditionList_.size() + " != " + (int)(getNumConditions()) + "!");
        }
        conditionList_.writePacked(out);
    }

    private static final class ZserioElementFactory_conditionList implements zserio.runtime.array.PackableElementFactory<nds.core.attributemap.Condition>
    {
        @Override
        public nds.core.attributemap.Condition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.attributemap.Condition(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.attributemap.Condition.ZserioPackingContext();
        }

        @Override
        public nds.core.attributemap.Condition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.attributemap.Condition(context, in);
        }
    }

    private short numConditions_;
    private zserio.runtime.array.Array conditionList_;
}
