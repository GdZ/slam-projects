/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.attributemap;

public class Condition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            conditionTypeCode_ = new zserio.runtime.array.DeltaContext();
            conditionValue_ = new nds.core.conditions.ConditionValue.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getConditionTypeCode()
        {
            return conditionTypeCode_;
        }

        public nds.core.conditions.ConditionValue.ZserioPackingContext getConditionValue()
        {
            return conditionValue_;
        }

        private zserio.runtime.array.DeltaContext conditionTypeCode_;
        private nds.core.conditions.ConditionValue.ZserioPackingContext conditionValue_;
    };

    public Condition()
    {
    }

    public Condition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Condition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Condition(
            nds.core.conditions.ConditionTypeCode conditionTypeCode_,
            nds.core.conditions.ConditionValue conditionValue_)
    {
        setConditionTypeCode(conditionTypeCode_);
        setConditionValue(conditionValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        conditionTypeCode_.initPackingContext(zserioContext.getConditionTypeCode());
        conditionValue_.initPackingContext(zserioContext.getConditionValue());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += conditionTypeCode_.bitSizeOf(endBitPosition);
        endBitPosition += conditionValue_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += conditionTypeCode_.bitSizeOf(zserioContext.getConditionTypeCode(), endBitPosition);
        endBitPosition += conditionValue_.bitSizeOf(zserioContext.getConditionValue(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.ConditionTypeCode getConditionTypeCode()
    {
        return conditionTypeCode_;
    }

    public void setConditionTypeCode(nds.core.conditions.ConditionTypeCode conditionTypeCode_)
    {
        this.conditionTypeCode_ = conditionTypeCode_;
    }

    public nds.core.conditions.ConditionValue getConditionValue()
    {
        return conditionValue_;
    }

    public void setConditionValue(nds.core.conditions.ConditionValue conditionValue_)
    {
        this.conditionValue_ = conditionValue_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Condition)
        {
            final Condition that = (Condition)obj;

            return
                    ((conditionTypeCode_ == null) ? that.conditionTypeCode_ == null : conditionTypeCode_.getValue() == that.conditionTypeCode_.getValue()) &&
                    ((conditionValue_ == null) ? that.conditionValue_ == null : conditionValue_.equals(that.conditionValue_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, conditionTypeCode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, conditionValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        conditionTypeCode_ = nds.core.conditions.ConditionTypeCode.readEnum(in);

        conditionValue_ = new nds.core.conditions.ConditionValue(in, getConditionTypeCode());
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        conditionTypeCode_ = nds.core.conditions.ConditionTypeCode.readEnum(zserioContext.getConditionTypeCode(), in);

        conditionValue_ = new nds.core.conditions.ConditionValue(zserioContext.getConditionValue(), in, getConditionTypeCode());
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += conditionTypeCode_.bitSizeOf(endBitPosition);
        endBitPosition = conditionValue_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = conditionTypeCode_.initializeOffsets(zserioContext.getConditionTypeCode(), endBitPosition);
        endBitPosition = conditionValue_.initializeOffsets(zserioContext.getConditionValue(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        conditionTypeCode_.write(out);

        // check parameters
        if (conditionValue_.getCode() != (getConditionTypeCode()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter code for field Condition.conditionValue!");
        }
        conditionValue_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        conditionTypeCode_.write(zserioContext.getConditionTypeCode(), out);

        conditionValue_.write(zserioContext.getConditionValue(), out);
    }

    private nds.core.conditions.ConditionTypeCode conditionTypeCode_;
    private nds.core.conditions.ConditionValue conditionValue_;
}
