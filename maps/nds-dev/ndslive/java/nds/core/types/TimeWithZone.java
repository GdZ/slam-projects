/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public class TimeWithZone implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            seconds_ = new zserio.runtime.array.DeltaContext();
            utcOffset_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getSeconds()
        {
            return seconds_;
        }

        public zserio.runtime.array.DeltaContext getUtcOffset()
        {
            return utcOffset_;
        }

        private zserio.runtime.array.DeltaContext seconds_;
        private zserio.runtime.array.DeltaContext utcOffset_;
    };

    public TimeWithZone()
    {
    }

    public TimeWithZone(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TimeWithZone(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TimeWithZone(
            java.math.BigInteger seconds_,
            byte utcOffset_)
    {
        setSeconds(seconds_);
        setUtcOffset(utcOffset_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getSeconds().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(seconds_));
        zserioContext.getUtcOffset().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(seconds_);
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getSeconds().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(seconds_));
        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getSeconds()
    {
        return seconds_;
    }

    public void setSeconds(java.math.BigInteger seconds_)
    {
        this.seconds_ = seconds_;
    }

    public byte getUtcOffset()
    {
        return utcOffset_;
    }

    public void setUtcOffset(byte utcOffset_)
    {
        this.utcOffset_ = utcOffset_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TimeWithZone)
        {
            final TimeWithZone that = (TimeWithZone)obj;

            return
                    ((seconds_ == null) ? that.seconds_ == null : seconds_.equals(that.seconds_)) &&
                    utcOffset_ == that.utcOffset_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, seconds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, utcOffset_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        seconds_ = in.readVarUInt();

        utcOffset_ = in.readByte();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        seconds_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getSeconds().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        utcOffset_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getUtcOffset().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(seconds_);
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getSeconds().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(seconds_));
        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(seconds_);

        out.writeByte(utcOffset_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getSeconds().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(seconds_));

        zserioContext.getUtcOffset().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
    }

    private java.math.BigInteger seconds_;
    private byte utcOffset_;
}
