/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public enum TrafficEnforcementCameraType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    FIXED_SPEED((short)0),
    MOBILE_SPEED((short)1),
    REDLIGHT((short)2),
    TOLLROAD((short)3),
    PECCANCY((short)4),
    SPECIAL_LANE((short)5),
    FIXED_SPEED_AND_RED_LIGHT((short)6),
    BUS_LANE((short)7),
    FAKE((short)8),
    PARKING_VIOLATION((short)9),
    TRAFFIC_ENFORCEMENT_ZONE_ENTRY((short)10),
    TRAFFIC_ENFORCEMENT_ZONE_EXIT((short)11),
    MARKING_VIOLATION((short)12),
    TRAFFIC_INFORMATION_COLLECTION((short)13),
    BUS_LANE_AND_FIXED_SPEED((short)14),
    SHOULDER_LANE((short)15),
    MERGING_TRAFFIC((short)16),
    RAMP_METERING((short)17),
    NON_MOTORIZED_VEHICLE((short)18),
    YIELD_TO_PEDESTRIANS((short)19),
    ILLEGAL_LANE_OCCUPATION((short)20),
    PHONE_USAGE((short)21),
    SEAT_BELT((short)22),
    HORN_USAGE((short)23),
    ILLEGAL_LAMP_USAGE((short)24),
    OTHER((short)31);

    private TrafficEnforcementCameraType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static TrafficEnforcementCameraType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static TrafficEnforcementCameraType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static TrafficEnforcementCameraType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return FIXED_SPEED;
            case (short)1:
                return MOBILE_SPEED;
            case (short)2:
                return REDLIGHT;
            case (short)3:
                return TOLLROAD;
            case (short)4:
                return PECCANCY;
            case (short)5:
                return SPECIAL_LANE;
            case (short)6:
                return FIXED_SPEED_AND_RED_LIGHT;
            case (short)7:
                return BUS_LANE;
            case (short)8:
                return FAKE;
            case (short)9:
                return PARKING_VIOLATION;
            case (short)10:
                return TRAFFIC_ENFORCEMENT_ZONE_ENTRY;
            case (short)11:
                return TRAFFIC_ENFORCEMENT_ZONE_EXIT;
            case (short)12:
                return MARKING_VIOLATION;
            case (short)13:
                return TRAFFIC_INFORMATION_COLLECTION;
            case (short)14:
                return BUS_LANE_AND_FIXED_SPEED;
            case (short)15:
                return SHOULDER_LANE;
            case (short)16:
                return MERGING_TRAFFIC;
            case (short)17:
                return RAMP_METERING;
            case (short)18:
                return NON_MOTORIZED_VEHICLE;
            case (short)19:
                return YIELD_TO_PEDESTRIANS;
            case (short)20:
                return ILLEGAL_LANE_OCCUPATION;
            case (short)21:
                return PHONE_USAGE;
            case (short)22:
                return SEAT_BELT;
            case (short)23:
                return HORN_USAGE;
            case (short)24:
                return ILLEGAL_LAMP_USAGE;
            case (short)31:
                return OTHER;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration TrafficEnforcementCameraType: " + value + "!");
        }
    }

    public static TrafficEnforcementCameraType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("FIXED_SPEED"))
            return FIXED_SPEED;
        if (itemName.equals("MOBILE_SPEED"))
            return MOBILE_SPEED;
        if (itemName.equals("REDLIGHT"))
            return REDLIGHT;
        if (itemName.equals("TOLLROAD"))
            return TOLLROAD;
        if (itemName.equals("PECCANCY"))
            return PECCANCY;
        if (itemName.equals("SPECIAL_LANE"))
            return SPECIAL_LANE;
        if (itemName.equals("FIXED_SPEED_AND_RED_LIGHT"))
            return FIXED_SPEED_AND_RED_LIGHT;
        if (itemName.equals("BUS_LANE"))
            return BUS_LANE;
        if (itemName.equals("FAKE"))
            return FAKE;
        if (itemName.equals("PARKING_VIOLATION"))
            return PARKING_VIOLATION;
        if (itemName.equals("TRAFFIC_ENFORCEMENT_ZONE_ENTRY"))
            return TRAFFIC_ENFORCEMENT_ZONE_ENTRY;
        if (itemName.equals("TRAFFIC_ENFORCEMENT_ZONE_EXIT"))
            return TRAFFIC_ENFORCEMENT_ZONE_EXIT;
        if (itemName.equals("MARKING_VIOLATION"))
            return MARKING_VIOLATION;
        if (itemName.equals("TRAFFIC_INFORMATION_COLLECTION"))
            return TRAFFIC_INFORMATION_COLLECTION;
        if (itemName.equals("BUS_LANE_AND_FIXED_SPEED"))
            return BUS_LANE_AND_FIXED_SPEED;
        if (itemName.equals("SHOULDER_LANE"))
            return SHOULDER_LANE;
        if (itemName.equals("MERGING_TRAFFIC"))
            return MERGING_TRAFFIC;
        if (itemName.equals("RAMP_METERING"))
            return RAMP_METERING;
        if (itemName.equals("NON_MOTORIZED_VEHICLE"))
            return NON_MOTORIZED_VEHICLE;
        if (itemName.equals("YIELD_TO_PEDESTRIANS"))
            return YIELD_TO_PEDESTRIANS;
        if (itemName.equals("ILLEGAL_LANE_OCCUPATION"))
            return ILLEGAL_LANE_OCCUPATION;
        if (itemName.equals("PHONE_USAGE"))
            return PHONE_USAGE;
        if (itemName.equals("SEAT_BELT"))
            return SEAT_BELT;
        if (itemName.equals("HORN_USAGE"))
            return HORN_USAGE;
        if (itemName.equals("ILLEGAL_LAMP_USAGE"))
            return ILLEGAL_LAMP_USAGE;
        if (itemName.equals("OTHER"))
            return OTHER;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration TrafficEnforcementCameraType!");
    }

    private short value;
}
