/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public enum LaneFunctionalType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    NORMAL_LANE((short)0),
    EXIT_LANE((short)1),
    ENTRY_LANE((short)2),
    ENTRY_AND_EXIT_LANE((short)3),
    TURNING_LANE((short)4),
    PARKING_LANE((short)5),
    TRUCK_PARKING_LANE((short)6),
    WAITING_LANE((short)7),
    ANY((short)8),
    U_TURN_LANE((short)9);

    private LaneFunctionalType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static LaneFunctionalType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static LaneFunctionalType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static LaneFunctionalType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return NORMAL_LANE;
            case (short)1:
                return EXIT_LANE;
            case (short)2:
                return ENTRY_LANE;
            case (short)3:
                return ENTRY_AND_EXIT_LANE;
            case (short)4:
                return TURNING_LANE;
            case (short)5:
                return PARKING_LANE;
            case (short)6:
                return TRUCK_PARKING_LANE;
            case (short)7:
                return WAITING_LANE;
            case (short)8:
                return ANY;
            case (short)9:
                return U_TURN_LANE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration LaneFunctionalType: " + value + "!");
        }
    }

    public static LaneFunctionalType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("NORMAL_LANE"))
            return NORMAL_LANE;
        if (itemName.equals("EXIT_LANE"))
            return EXIT_LANE;
        if (itemName.equals("ENTRY_LANE"))
            return ENTRY_LANE;
        if (itemName.equals("ENTRY_AND_EXIT_LANE"))
            return ENTRY_AND_EXIT_LANE;
        if (itemName.equals("TURNING_LANE"))
            return TURNING_LANE;
        if (itemName.equals("PARKING_LANE"))
            return PARKING_LANE;
        if (itemName.equals("TRUCK_PARKING_LANE"))
            return TRUCK_PARKING_LANE;
        if (itemName.equals("WAITING_LANE"))
            return WAITING_LANE;
        if (itemName.equals("ANY"))
            return ANY;
        if (itemName.equals("U_TURN_LANE"))
            return U_TURN_LANE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration LaneFunctionalType!");
    }

    private short value;
}
