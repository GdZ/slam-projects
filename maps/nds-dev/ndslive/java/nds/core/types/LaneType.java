/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public class LaneType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            functionalLaneType_ = new zserio.runtime.array.DeltaContext();
            accessLaneType_ = new zserio.runtime.array.DeltaContext();
            roadType_ = new nds.core.types.RoadType.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getFunctionalLaneType()
        {
            return functionalLaneType_;
        }

        public zserio.runtime.array.DeltaContext getAccessLaneType()
        {
            return accessLaneType_;
        }

        public nds.core.types.RoadType.ZserioPackingContext getRoadType()
        {
            return roadType_;
        }

        private zserio.runtime.array.DeltaContext functionalLaneType_;
        private zserio.runtime.array.DeltaContext accessLaneType_;
        private nds.core.types.RoadType.ZserioPackingContext roadType_;
    };

    public LaneType()
    {
    }

    public LaneType(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneType(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneType(
            nds.core.types.LaneFunctionalType functionalLaneType_,
            nds.core.types.LaneAccessType accessLaneType_,
            nds.core.types.RoadType roadType_)
    {
        setFunctionalLaneType(functionalLaneType_);
        setAccessLaneType(accessLaneType_);
        setRoadType(roadType_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        functionalLaneType_.initPackingContext(zserioContext.getFunctionalLaneType());
        accessLaneType_.initPackingContext(zserioContext.getAccessLaneType());
        roadType_.initPackingContext(zserioContext.getRoadType());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += functionalLaneType_.bitSizeOf(endBitPosition);
        endBitPosition += accessLaneType_.bitSizeOf(endBitPosition);
        endBitPosition += roadType_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += functionalLaneType_.bitSizeOf(zserioContext.getFunctionalLaneType(), endBitPosition);
        endBitPosition += accessLaneType_.bitSizeOf(zserioContext.getAccessLaneType(), endBitPosition);
        endBitPosition += roadType_.bitSizeOf(zserioContext.getRoadType(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.LaneFunctionalType getFunctionalLaneType()
    {
        return functionalLaneType_;
    }

    public void setFunctionalLaneType(nds.core.types.LaneFunctionalType functionalLaneType_)
    {
        this.functionalLaneType_ = functionalLaneType_;
    }

    public nds.core.types.LaneAccessType getAccessLaneType()
    {
        return accessLaneType_;
    }

    public void setAccessLaneType(nds.core.types.LaneAccessType accessLaneType_)
    {
        this.accessLaneType_ = accessLaneType_;
    }

    public nds.core.types.RoadType getRoadType()
    {
        return roadType_;
    }

    public void setRoadType(nds.core.types.RoadType roadType_)
    {
        this.roadType_ = roadType_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneType)
        {
            final LaneType that = (LaneType)obj;

            return
                    ((functionalLaneType_ == null) ? that.functionalLaneType_ == null : functionalLaneType_.getValue() == that.functionalLaneType_.getValue()) &&
                    ((accessLaneType_ == null) ? that.accessLaneType_ == null : accessLaneType_.equals(that.accessLaneType_)) &&
                    ((roadType_ == null) ? that.roadType_ == null : roadType_.equals(that.roadType_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, functionalLaneType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, accessLaneType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadType_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        functionalLaneType_ = nds.core.types.LaneFunctionalType.readEnum(in);

        accessLaneType_ = new nds.core.types.LaneAccessType(in);

        roadType_ = new nds.core.types.RoadType(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        functionalLaneType_ = nds.core.types.LaneFunctionalType.readEnum(zserioContext.getFunctionalLaneType(), in);

        accessLaneType_ = new nds.core.types.LaneAccessType(zserioContext.getAccessLaneType(), in);

        roadType_ = new nds.core.types.RoadType(zserioContext.getRoadType(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += functionalLaneType_.bitSizeOf(endBitPosition);
        endBitPosition += accessLaneType_.bitSizeOf(endBitPosition);
        endBitPosition = roadType_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = functionalLaneType_.initializeOffsets(zserioContext.getFunctionalLaneType(), endBitPosition);
        endBitPosition = accessLaneType_.initializeOffsets(zserioContext.getAccessLaneType(), endBitPosition);
        endBitPosition = roadType_.initializeOffsets(zserioContext.getRoadType(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        functionalLaneType_.write(out);

        accessLaneType_.write(out);

        roadType_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        functionalLaneType_.write(zserioContext.getFunctionalLaneType(), out);

        accessLaneType_.write(zserioContext.getAccessLaneType(), out);

        roadType_.write(zserioContext.getRoadType(), out);
    }

    private nds.core.types.LaneFunctionalType functionalLaneType_;
    private nds.core.types.LaneAccessType accessLaneType_;
    private nds.core.types.RoadType roadType_;
}
