/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public enum RoadForm implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    ANY((short)0),
    NORMAL((short)1),
    DUAL_CARRIAGEWAY((short)2),
    SLIP_ROAD((short)3),
    RAMP((short)4),
    INTERCHANGE((short)5),
    ROUNDABOUT((short)6),
    ROUNDABOUT_INTERIOR((short)7),
    SQUARE((short)8),
    PEDESTRIAN_WAY((short)9),
    SPECIAL_TRAFFIC_FIGURE((short)10),
    PARALLEL_ROAD((short)11),
    SERVICE_ROAD((short)12),
    MINI_ROUNDABOUT((short)13);

    private RoadForm(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RoadForm readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static RoadForm readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static RoadForm toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return ANY;
            case (short)1:
                return NORMAL;
            case (short)2:
                return DUAL_CARRIAGEWAY;
            case (short)3:
                return SLIP_ROAD;
            case (short)4:
                return RAMP;
            case (short)5:
                return INTERCHANGE;
            case (short)6:
                return ROUNDABOUT;
            case (short)7:
                return ROUNDABOUT_INTERIOR;
            case (short)8:
                return SQUARE;
            case (short)9:
                return PEDESTRIAN_WAY;
            case (short)10:
                return SPECIAL_TRAFFIC_FIGURE;
            case (short)11:
                return PARALLEL_ROAD;
            case (short)12:
                return SERVICE_ROAD;
            case (short)13:
                return MINI_ROUNDABOUT;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RoadForm: " + value + "!");
        }
    }

    public static RoadForm toEnum(java.lang.String itemName)
    {
        if (itemName.equals("ANY"))
            return ANY;
        if (itemName.equals("NORMAL"))
            return NORMAL;
        if (itemName.equals("DUAL_CARRIAGEWAY"))
            return DUAL_CARRIAGEWAY;
        if (itemName.equals("SLIP_ROAD"))
            return SLIP_ROAD;
        if (itemName.equals("RAMP"))
            return RAMP;
        if (itemName.equals("INTERCHANGE"))
            return INTERCHANGE;
        if (itemName.equals("ROUNDABOUT"))
            return ROUNDABOUT;
        if (itemName.equals("ROUNDABOUT_INTERIOR"))
            return ROUNDABOUT_INTERIOR;
        if (itemName.equals("SQUARE"))
            return SQUARE;
        if (itemName.equals("PEDESTRIAN_WAY"))
            return PEDESTRIAN_WAY;
        if (itemName.equals("SPECIAL_TRAFFIC_FIGURE"))
            return SPECIAL_TRAFFIC_FIGURE;
        if (itemName.equals("PARALLEL_ROAD"))
            return PARALLEL_ROAD;
        if (itemName.equals("SERVICE_ROAD"))
            return SERVICE_ROAD;
        if (itemName.equals("MINI_ROUNDABOUT"))
            return MINI_ROUNDABOUT;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RoadForm!");
    }

    private short value;
}
