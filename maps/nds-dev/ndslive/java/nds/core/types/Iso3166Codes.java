/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public class Iso3166Codes implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public Iso3166Codes()
    {
    }

    public Iso3166Codes(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Iso3166Codes(
            java.lang.String isoCountryCode_,
            java.lang.String isoSubCountryCode_)
    {
        setIsoCountryCode(isoCountryCode_);
        setIsoSubCountryCode(isoSubCountryCode_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += 1;
        if (isIsoSubCountryCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoSubCountryCode_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.String getIsoCountryCode()
    {
        return isoCountryCode_;
    }

    public void setIsoCountryCode(java.lang.String isoCountryCode_)
    {
        this.isoCountryCode_ = isoCountryCode_;
    }

    public java.lang.String getIsoSubCountryCode()
    {
        return isoSubCountryCode_;
    }

    public void setIsoSubCountryCode(java.lang.String isoSubCountryCode_)
    {
        this.isoSubCountryCode_ = isoSubCountryCode_;
    }

    public boolean isIsoSubCountryCodeUsed()
    {
        return isIsoSubCountryCodeSet();
    }

    public boolean isIsoSubCountryCodeSet()
    {
        return (isoSubCountryCode_ != null);
    }

    public void resetIsoSubCountryCode()
    {
        this.isoSubCountryCode_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Iso3166Codes)
        {
            final Iso3166Codes that = (Iso3166Codes)obj;

            return
                    ((isoCountryCode_ == null) ? that.isoCountryCode_ == null : isoCountryCode_.equals(that.isoCountryCode_)) &&
                    ((!isIsoSubCountryCodeUsed()) ? !that.isIsoSubCountryCodeUsed() :
                        ((isoSubCountryCode_ == null) ? that.isoSubCountryCode_ == null : isoSubCountryCode_.equals(that.isoSubCountryCode_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isoCountryCode_);
        if (isIsoSubCountryCodeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, isoSubCountryCode_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        isoCountryCode_ = in.readString();

        if (in.readBool())
        {
            isoSubCountryCode_ = in.readString();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoCountryCode_);
        endBitPosition += 1;
        if (isIsoSubCountryCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(isoSubCountryCode_);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeString(isoCountryCode_);

        if (isIsoSubCountryCodeUsed())
        {
            out.writeBool(true);
            out.writeString(isoSubCountryCode_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.lang.String isoCountryCode_;
    private java.lang.String isoSubCountryCode_;
}
