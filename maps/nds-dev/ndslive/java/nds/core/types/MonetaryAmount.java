/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public class MonetaryAmount implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            amount_ = new zserio.runtime.array.DeltaContext();
            currency_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getAmount()
        {
            return amount_;
        }

        public zserio.runtime.array.DeltaContext getCurrency()
        {
            return currency_;
        }

        private zserio.runtime.array.DeltaContext amount_;
        private zserio.runtime.array.DeltaContext currency_;
    };

    public MonetaryAmount()
    {
    }

    public MonetaryAmount(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MonetaryAmount(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MonetaryAmount(
            long amount_,
            nds.core.types.Currency currency_)
    {
        setAmount(amount_);
        setCurrency(currency_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getAmount().init(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.LongArrayElement(amount_));
        currency_.initPackingContext(zserioContext.getCurrency());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt(amount_);
        endBitPosition += currency_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getAmount().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.LongArrayElement(amount_));
        endBitPosition += currency_.bitSizeOf(zserioContext.getCurrency(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public long getAmount()
    {
        return amount_;
    }

    public void setAmount(long amount_)
    {
        this.amount_ = amount_;
    }

    public nds.core.types.Currency getCurrency()
    {
        return currency_;
    }

    public void setCurrency(nds.core.types.Currency currency_)
    {
        this.currency_ = currency_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MonetaryAmount)
        {
            final MonetaryAmount that = (MonetaryAmount)obj;

            return
                    amount_ == that.amount_ &&
                    ((currency_ == null) ? that.currency_ == null : currency_.getValue() == that.currency_.getValue());
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, amount_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, currency_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        amount_ = in.readVarInt();

        currency_ = nds.core.types.Currency.readEnum(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        amount_ = ((zserio.runtime.array.ArrayElement.LongArrayElement)
                zserioContext.getAmount().read(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(), in)).get();

        currency_ = nds.core.types.Currency.readEnum(zserioContext.getCurrency(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt(amount_);
        endBitPosition += currency_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getAmount().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.LongArrayElement(amount_));
        endBitPosition = currency_.initializeOffsets(zserioContext.getCurrency(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarInt(amount_);

        currency_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getAmount().write(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.LongArrayElement(amount_));

        currency_.write(zserioContext.getCurrency(), out);
    }

    private long amount_;
    private nds.core.types.Currency currency_;
}
