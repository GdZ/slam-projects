/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public enum RoadCharacter implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    URBAN((short)0),
    SERVICE_AREA((short)1),
    PARKING((short)2),
    COVERED((short)3),
    MOTORWAY((short)4),
    EXPRESSWAY((short)5),
    FERRY((short)6),
    TUNNEL((short)7),
    BRIDGE((short)8),
    MULTI_DIGITIZED((short)9),
    COMPLEX_INTERSECTION((short)10),
    IS_ELEVATED_ROAD((short)11),
    OVERPASS((short)12),
    UNDERPASS((short)13),
    RACE_TRACK((short)14),
    INSIDE_CITY_LIMITS((short)15),
    PEDESTRIAN_ZONE((short)16),
    CONTROLLED_ACCESS((short)17),
    PHYSICALLY_SEPARATED((short)18),
    TRACKS_ON_ROAD((short)19),
    BICYCLE_PATH((short)20),
    BUS_ROAD((short)21),
    HORSE_WAY((short)22),
    TAXI_ROAD((short)23),
    EMERGENCY_ROAD((short)24),
    TRUCK_ESCAPE_RAMP((short)25),
    EXPRESS_ROAD((short)26),
    STATION_PLAZA((short)27),
    HAS_SHOULDER_LANE((short)28),
    TOLL_ROAD((short)29),
    MAIN_ROAD((short)30),
    U_TURN_ROAD((short)31);

    private RoadCharacter(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RoadCharacter readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static RoadCharacter readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static RoadCharacter toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return URBAN;
            case (short)1:
                return SERVICE_AREA;
            case (short)2:
                return PARKING;
            case (short)3:
                return COVERED;
            case (short)4:
                return MOTORWAY;
            case (short)5:
                return EXPRESSWAY;
            case (short)6:
                return FERRY;
            case (short)7:
                return TUNNEL;
            case (short)8:
                return BRIDGE;
            case (short)9:
                return MULTI_DIGITIZED;
            case (short)10:
                return COMPLEX_INTERSECTION;
            case (short)11:
                return IS_ELEVATED_ROAD;
            case (short)12:
                return OVERPASS;
            case (short)13:
                return UNDERPASS;
            case (short)14:
                return RACE_TRACK;
            case (short)15:
                return INSIDE_CITY_LIMITS;
            case (short)16:
                return PEDESTRIAN_ZONE;
            case (short)17:
                return CONTROLLED_ACCESS;
            case (short)18:
                return PHYSICALLY_SEPARATED;
            case (short)19:
                return TRACKS_ON_ROAD;
            case (short)20:
                return BICYCLE_PATH;
            case (short)21:
                return BUS_ROAD;
            case (short)22:
                return HORSE_WAY;
            case (short)23:
                return TAXI_ROAD;
            case (short)24:
                return EMERGENCY_ROAD;
            case (short)25:
                return TRUCK_ESCAPE_RAMP;
            case (short)26:
                return EXPRESS_ROAD;
            case (short)27:
                return STATION_PLAZA;
            case (short)28:
                return HAS_SHOULDER_LANE;
            case (short)29:
                return TOLL_ROAD;
            case (short)30:
                return MAIN_ROAD;
            case (short)31:
                return U_TURN_ROAD;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RoadCharacter: " + value + "!");
        }
    }

    public static RoadCharacter toEnum(java.lang.String itemName)
    {
        if (itemName.equals("URBAN"))
            return URBAN;
        if (itemName.equals("SERVICE_AREA"))
            return SERVICE_AREA;
        if (itemName.equals("PARKING"))
            return PARKING;
        if (itemName.equals("COVERED"))
            return COVERED;
        if (itemName.equals("MOTORWAY"))
            return MOTORWAY;
        if (itemName.equals("EXPRESSWAY"))
            return EXPRESSWAY;
        if (itemName.equals("FERRY"))
            return FERRY;
        if (itemName.equals("TUNNEL"))
            return TUNNEL;
        if (itemName.equals("BRIDGE"))
            return BRIDGE;
        if (itemName.equals("MULTI_DIGITIZED"))
            return MULTI_DIGITIZED;
        if (itemName.equals("COMPLEX_INTERSECTION"))
            return COMPLEX_INTERSECTION;
        if (itemName.equals("IS_ELEVATED_ROAD"))
            return IS_ELEVATED_ROAD;
        if (itemName.equals("OVERPASS"))
            return OVERPASS;
        if (itemName.equals("UNDERPASS"))
            return UNDERPASS;
        if (itemName.equals("RACE_TRACK"))
            return RACE_TRACK;
        if (itemName.equals("INSIDE_CITY_LIMITS"))
            return INSIDE_CITY_LIMITS;
        if (itemName.equals("PEDESTRIAN_ZONE"))
            return PEDESTRIAN_ZONE;
        if (itemName.equals("CONTROLLED_ACCESS"))
            return CONTROLLED_ACCESS;
        if (itemName.equals("PHYSICALLY_SEPARATED"))
            return PHYSICALLY_SEPARATED;
        if (itemName.equals("TRACKS_ON_ROAD"))
            return TRACKS_ON_ROAD;
        if (itemName.equals("BICYCLE_PATH"))
            return BICYCLE_PATH;
        if (itemName.equals("BUS_ROAD"))
            return BUS_ROAD;
        if (itemName.equals("HORSE_WAY"))
            return HORSE_WAY;
        if (itemName.equals("TAXI_ROAD"))
            return TAXI_ROAD;
        if (itemName.equals("EMERGENCY_ROAD"))
            return EMERGENCY_ROAD;
        if (itemName.equals("TRUCK_ESCAPE_RAMP"))
            return TRUCK_ESCAPE_RAMP;
        if (itemName.equals("EXPRESS_ROAD"))
            return EXPRESS_ROAD;
        if (itemName.equals("STATION_PLAZA"))
            return STATION_PLAZA;
        if (itemName.equals("HAS_SHOULDER_LANE"))
            return HAS_SHOULDER_LANE;
        if (itemName.equals("TOLL_ROAD"))
            return TOLL_ROAD;
        if (itemName.equals("MAIN_ROAD"))
            return MAIN_ROAD;
        if (itemName.equals("U_TURN_ROAD"))
            return U_TURN_ROAD;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RoadCharacter!");
    }

    private short value;
}
