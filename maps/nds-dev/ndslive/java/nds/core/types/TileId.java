/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.core.types;

public class TileId implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        private zserio.runtime.array.DeltaContext id_;
    };

    public TileId()
    {
    }

    public TileId(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TileId(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TileId(
            int id_)
    {
        setId(id_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 32;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));

        return (int)(endBitPosition - bitPosition);
    }

    public int getId()
    {
        return id_;
    }

    public void setId(int id_)
    {
        this.id_ = id_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TileId)
        {
            final TileId that = (TileId)obj;

            return
                    id_ == that.id_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readInt();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 32;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeInt(id_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
    }

    private int id_;
}
