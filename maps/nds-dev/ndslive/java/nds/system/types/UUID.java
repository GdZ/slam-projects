/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.system.types;

public class UUID implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public UUID()
    {
    }

    public UUID(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public UUID(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public UUID(
            short[] uuid_)
    {
        setUuid(uuid_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += uuid_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += uuid_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short[] getUuid()
    {
        return (uuid_ == null) ? null : uuid_.getRawArray();
    }

    public void setUuid(short[] uuid_)
    {
        this.uuid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(uuid_),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof UUID)
        {
            final UUID that = (UUID)obj;

            return
                    ((uuid_ == null) ? that.uuid_ == null : uuid_.equals(that.uuid_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, uuid_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        uuid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        uuid_.read(in, (int)(16));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        uuid_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                zserio.runtime.array.ArrayType.NORMAL);
        uuid_.readPacked(in, (int)(16));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = uuid_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = uuid_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (uuid_.size() != (int)(16))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field UUID.uuid: " +
                    uuid_.size() + " != " + (int)(16) + "!");
        }
        uuid_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        if (uuid_.size() != (int)(16))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field UUID.uuid: " +
                    uuid_.size() + " != " + (int)(16) + "!");
        }
        uuid_.writePacked(out);
    }

    private zserio.runtime.array.Array uuid_;
}
