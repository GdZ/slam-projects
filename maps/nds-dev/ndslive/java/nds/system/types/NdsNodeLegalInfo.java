/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.system.types;

public class NdsNodeLegalInfo implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            nodeId_ = new nds.system.types.NdsNodeToken.ZserioPackingContext();
        }

        public nds.system.types.NdsNodeToken.ZserioPackingContext getNodeId()
        {
            return nodeId_;
        }

        private nds.system.types.NdsNodeToken.ZserioPackingContext nodeId_;
    };

    public NdsNodeLegalInfo()
    {
    }

    public NdsNodeLegalInfo(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public NdsNodeLegalInfo(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public NdsNodeLegalInfo(
            nds.system.types.NdsNodeToken nodeId_,
            java.lang.String providerName_,
            java.lang.String contentName_,
            java.lang.String contentVersion_,
            java.lang.String contentTimestamp_,
            java.lang.String copyright_,
            java.lang.String licenses_)
    {
        setNodeId(nodeId_);
        setProviderName(providerName_);
        setContentName(contentName_);
        setContentVersion(contentVersion_);
        setContentTimestamp(contentTimestamp_);
        setCopyright(copyright_);
        setLicenses(licenses_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        nodeId_.initPackingContext(zserioContext.getNodeId());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += nodeId_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentTimestamp_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(copyright_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licenses_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += nodeId_.bitSizeOf(zserioContext.getNodeId(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentTimestamp_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(copyright_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licenses_);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.system.types.NdsNodeToken getNodeId()
    {
        return nodeId_;
    }

    public void setNodeId(nds.system.types.NdsNodeToken nodeId_)
    {
        this.nodeId_ = nodeId_;
    }

    public java.lang.String getProviderName()
    {
        return providerName_;
    }

    public void setProviderName(java.lang.String providerName_)
    {
        this.providerName_ = providerName_;
    }

    public java.lang.String getContentName()
    {
        return contentName_;
    }

    public void setContentName(java.lang.String contentName_)
    {
        this.contentName_ = contentName_;
    }

    public java.lang.String getContentVersion()
    {
        return contentVersion_;
    }

    public void setContentVersion(java.lang.String contentVersion_)
    {
        this.contentVersion_ = contentVersion_;
    }

    public java.lang.String getContentTimestamp()
    {
        return contentTimestamp_;
    }

    public void setContentTimestamp(java.lang.String contentTimestamp_)
    {
        this.contentTimestamp_ = contentTimestamp_;
    }

    public java.lang.String getCopyright()
    {
        return copyright_;
    }

    public void setCopyright(java.lang.String copyright_)
    {
        this.copyright_ = copyright_;
    }

    public java.lang.String getLicenses()
    {
        return licenses_;
    }

    public void setLicenses(java.lang.String licenses_)
    {
        this.licenses_ = licenses_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof NdsNodeLegalInfo)
        {
            final NdsNodeLegalInfo that = (NdsNodeLegalInfo)obj;

            return
                    ((nodeId_ == null) ? that.nodeId_ == null : nodeId_.equals(that.nodeId_)) &&
                    ((providerName_ == null) ? that.providerName_ == null : providerName_.equals(that.providerName_)) &&
                    ((contentName_ == null) ? that.contentName_ == null : contentName_.equals(that.contentName_)) &&
                    ((contentVersion_ == null) ? that.contentVersion_ == null : contentVersion_.equals(that.contentVersion_)) &&
                    ((contentTimestamp_ == null) ? that.contentTimestamp_ == null : contentTimestamp_.equals(that.contentTimestamp_)) &&
                    ((copyright_ == null) ? that.copyright_ == null : copyright_.equals(that.copyright_)) &&
                    ((licenses_ == null) ? that.licenses_ == null : licenses_.equals(that.licenses_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nodeId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, providerName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, contentName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, contentVersion_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, contentTimestamp_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, copyright_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, licenses_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        nodeId_ = new nds.system.types.NdsNodeToken(in);

        providerName_ = in.readString();

        contentName_ = in.readString();

        contentVersion_ = in.readString();

        contentTimestamp_ = in.readString();

        copyright_ = in.readString();

        licenses_ = in.readString();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        nodeId_ = new nds.system.types.NdsNodeToken(zserioContext.getNodeId(), in);

        providerName_ = in.readString();

        contentName_ = in.readString();

        contentVersion_ = in.readString();

        contentTimestamp_ = in.readString();

        copyright_ = in.readString();

        licenses_ = in.readString();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = nodeId_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentTimestamp_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(copyright_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licenses_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = nodeId_.initializeOffsets(zserioContext.getNodeId(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(contentTimestamp_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(copyright_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licenses_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        nodeId_.write(out);

        out.writeString(providerName_);

        out.writeString(contentName_);

        out.writeString(contentVersion_);

        out.writeString(contentTimestamp_);

        out.writeString(copyright_);

        out.writeString(licenses_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        nodeId_.write(zserioContext.getNodeId(), out);

        out.writeString(providerName_);

        out.writeString(contentName_);

        out.writeString(contentVersion_);

        out.writeString(contentTimestamp_);

        out.writeString(copyright_);

        out.writeString(licenses_);
    }

    private nds.system.types.NdsNodeToken nodeId_;
    private java.lang.String providerName_;
    private java.lang.String contentName_;
    private java.lang.String contentVersion_;
    private java.lang.String contentTimestamp_;
    private java.lang.String copyright_;
    private java.lang.String licenses_;
}
