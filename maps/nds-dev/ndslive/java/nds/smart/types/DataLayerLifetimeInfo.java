/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.types;

public class DataLayerLifetimeInfo implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            versionId_ = new zserio.runtime.array.DeltaContext();
            dynamicDataLifetimeInfo_ = new nds.smart.types.DynamicDataLifetimeInfo.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getVersionId()
        {
            return versionId_;
        }

        public nds.smart.types.DynamicDataLifetimeInfo.ZserioPackingContext getDynamicDataLifetimeInfo()
        {
            return dynamicDataLifetimeInfo_;
        }

        private zserio.runtime.array.DeltaContext versionId_;
        private nds.smart.types.DynamicDataLifetimeInfo.ZserioPackingContext dynamicDataLifetimeInfo_;
    };

    public DataLayerLifetimeInfo(
            nds.smart.types.DataLayerLifetimeType lifetime_)
    {
        this.lifetime_ = lifetime_;
    }

    public DataLayerLifetimeInfo(zserio.runtime.io.BitStreamReader in,
            nds.smart.types.DataLayerLifetimeType lifetime_)
            throws java.io.IOException
    {
        this.lifetime_ = lifetime_;

        read(in);
    }

    public DataLayerLifetimeInfo(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.smart.types.DataLayerLifetimeType lifetime_)
            throws java.io.IOException
    {
        this.lifetime_ = lifetime_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getLifetime())
        {
        case STATIC:
            return CHOICE_versionId;
        case DYNAMIC:
            return CHOICE_dynamicDataLifetimeInfo;
        case LIVE:
            return UNDEFINED_CHOICE;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getLifetime())
        {
        case STATIC:
            zserioContext.getVersionId().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getVersionId()));
            break;
        case DYNAMIC:
            getDynamicDataLifetimeInfo().initPackingContext(zserioContext.getDynamicDataLifetimeInfo());
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getLifetime())
        {
        case STATIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getVersionId());
            break;
        case DYNAMIC:
            endBitPosition += getDynamicDataLifetimeInfo().bitSizeOf(endBitPosition);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getLifetime())
        {
        case STATIC:
            endBitPosition += zserioContext.getVersionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getVersionId()));
            break;
        case DYNAMIC:
            endBitPosition += getDynamicDataLifetimeInfo().bitSizeOf(zserioContext.getDynamicDataLifetimeInfo(), endBitPosition);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.smart.types.DataLayerLifetimeType getLifetime()
    {
        return this.lifetime_;
    }

    public java.math.BigInteger getVersionId()
    {
        return (java.math.BigInteger)objectChoice;
    }

    public void setVersionId(java.math.BigInteger versionId_)
    {
        objectChoice = versionId_;
    }

    public nds.smart.types.DynamicDataLifetimeInfo getDynamicDataLifetimeInfo()
    {
        return (nds.smart.types.DynamicDataLifetimeInfo)objectChoice;
    }

    public void setDynamicDataLifetimeInfo(nds.smart.types.DynamicDataLifetimeInfo dynamicDataLifetimeInfo_)
    {
        objectChoice = dynamicDataLifetimeInfo_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DataLayerLifetimeInfo)
        {
            final DataLayerLifetimeInfo that = (DataLayerLifetimeInfo)obj;

            return
                    ((this.lifetime_ == null) ? that.lifetime_ == null : this.lifetime_.getValue() == that.lifetime_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getLifetime());
        if (objectChoice != null)
        {
            switch (getLifetime())
            {
            case STATIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.math.BigInteger)objectChoice);
                break;
            case DYNAMIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.smart.types.DynamicDataLifetimeInfo)objectChoice);
                break;
            case LIVE:
                // empty
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getLifetime())
        {
        case STATIC:
            objectChoice = in.readVarUInt();
            break;
        case DYNAMIC:
            objectChoice = new nds.smart.types.DynamicDataLifetimeInfo(in);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getLifetime())
        {
        case STATIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getVersionId().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
            break;
        case DYNAMIC:
            objectChoice = new nds.smart.types.DynamicDataLifetimeInfo(zserioContext.getDynamicDataLifetimeInfo(), in);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getLifetime())
        {
        case STATIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getVersionId());
            }
            break;
        case DYNAMIC:
            {
                endBitPosition = getDynamicDataLifetimeInfo().initializeOffsets(endBitPosition);
            }
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getLifetime())
        {
        case STATIC:
            {
                endBitPosition += zserioContext.getVersionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                        new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getVersionId()));
            }
            break;
        case DYNAMIC:
            {
                endBitPosition = getDynamicDataLifetimeInfo().initializeOffsets(zserioContext.getDynamicDataLifetimeInfo(), endBitPosition);
            }
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getLifetime())
        {
        case STATIC:
            out.writeVarUInt(getVersionId());
            break;
        case DYNAMIC:
            getDynamicDataLifetimeInfo().write(out);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getLifetime())
        {
        case STATIC:
            zserioContext.getVersionId().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getVersionId()));
            break;
        case DYNAMIC:
            getDynamicDataLifetimeInfo().write(zserioContext.getDynamicDataLifetimeInfo(), out);
            break;
        case LIVE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DataLayerLifetimeInfo: " + getLifetime() + "!");
        }
    }

    public static final int CHOICE_versionId = 0;
    public static final int CHOICE_dynamicDataLifetimeInfo = 1;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.smart.types.DataLayerLifetimeType lifetime_;
    private java.lang.Object objectChoice;
}
