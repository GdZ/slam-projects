/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.types;

public class SmartLayerHeader implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numDataLayers_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumDataLayers()
        {
            return numDataLayers_;
        }

        private zserio.runtime.array.DeltaContext numDataLayers_;
    };

    public SmartLayerHeader()
    {
    }

    public SmartLayerHeader(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerHeader(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerHeader(
            short numDataLayers_,
            short[] availableLayers_,
            nds.smart.types.DataLayerLifetime[] layerLifetime_,
            nds.core.packaging.PackagingDetails[] packagingDetails_)
    {
        setNumDataLayers(numDataLayers_);
        setAvailableLayers(availableLayers_);
        setLayerLifetime(layerLifetime_);
        setPackagingDetails(packagingDetails_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDataLayers().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition += availableLayers_.bitSizeOf(endBitPosition);
        endBitPosition += layerLifetime_.bitSizeOf(endBitPosition);
        endBitPosition += packagingDetails_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition += availableLayers_.bitSizeOfPacked(endBitPosition);
        endBitPosition += layerLifetime_.bitSizeOfPacked(endBitPosition);
        endBitPosition += packagingDetails_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumDataLayers()
    {
        return numDataLayers_;
    }

    public void setNumDataLayers(short numDataLayers_)
    {
        this.numDataLayers_ = numDataLayers_;
    }

    public short[] getAvailableLayers()
    {
        return (availableLayers_ == null) ? null : availableLayers_.getRawArray();
    }

    public void setAvailableLayers(short[] availableLayers_)
    {
        this.availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(availableLayers_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.smart.types.DataLayerLifetime[] getLayerLifetime()
    {
        return (layerLifetime_ == null) ? null : layerLifetime_.getRawArray();
    }

    public void setLayerLifetime(nds.smart.types.DataLayerLifetime[] layerLifetime_)
    {
        this.layerLifetime_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayerLifetime.class, layerLifetime_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.DataLayerLifetime>(new ZserioElementFactory_layerLifetime()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.packaging.PackagingDetails[] getPackagingDetails()
    {
        return (packagingDetails_ == null) ? null : packagingDetails_.getRawArray();
    }

    public void setPackagingDetails(nds.core.packaging.PackagingDetails[] packagingDetails_)
    {
        this.packagingDetails_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.packaging.PackagingDetails.class, packagingDetails_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.packaging.PackagingDetails>(new ZserioElementFactory_packagingDetails()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerHeader)
        {
            final SmartLayerHeader that = (SmartLayerHeader)obj;

            return
                    numDataLayers_ == that.numDataLayers_ &&
                    ((availableLayers_ == null) ? that.availableLayers_ == null : availableLayers_.equals(that.availableLayers_)) &&
                    ((layerLifetime_ == null) ? that.layerLifetime_ == null : layerLifetime_.equals(that.layerLifetime_)) &&
                    ((packagingDetails_ == null) ? that.packagingDetails_ == null : packagingDetails_.equals(that.packagingDetails_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDataLayers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableLayers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, layerLifetime_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, packagingDetails_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numDataLayers_ = in.readVarUInt16();

        availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        availableLayers_.read(in, (int)(getNumDataLayers()));

        layerLifetime_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayerLifetime.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.DataLayerLifetime>(new ZserioElementFactory_layerLifetime()),
                zserio.runtime.array.ArrayType.NORMAL);
        layerLifetime_.read(in, (int)(getNumDataLayers()));

        packagingDetails_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.packaging.PackagingDetails.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.packaging.PackagingDetails>(new ZserioElementFactory_packagingDetails()),
                zserio.runtime.array.ArrayType.NORMAL);
        packagingDetails_.read(in, (int)(getNumDataLayers()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numDataLayers_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumDataLayers().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        availableLayers_.readPacked(in, (int)(getNumDataLayers()));

        layerLifetime_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayerLifetime.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.DataLayerLifetime>(new ZserioElementFactory_layerLifetime()),
                zserio.runtime.array.ArrayType.NORMAL);
        layerLifetime_.readPacked(in, (int)(getNumDataLayers()));

        packagingDetails_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.packaging.PackagingDetails.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.packaging.PackagingDetails>(new ZserioElementFactory_packagingDetails()),
                zserio.runtime.array.ArrayType.NORMAL);
        packagingDetails_.readPacked(in, (int)(getNumDataLayers()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition = availableLayers_.initializeOffsets(endBitPosition);
        endBitPosition = layerLifetime_.initializeOffsets(endBitPosition);
        endBitPosition = packagingDetails_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition = availableLayers_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = layerLifetime_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = packagingDetails_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numDataLayers_);

        if (availableLayers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.availableLayers: " +
                    availableLayers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        availableLayers_.write(out);

        if (layerLifetime_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.layerLifetime: " +
                    layerLifetime_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        layerLifetime_.write(out);

        if (packagingDetails_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.packagingDetails: " +
                    packagingDetails_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        packagingDetails_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDataLayers().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));

        if (availableLayers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.availableLayers: " +
                    availableLayers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        availableLayers_.writePacked(out);

        if (layerLifetime_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.layerLifetime: " +
                    layerLifetime_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        layerLifetime_.writePacked(out);

        if (packagingDetails_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerHeader.packagingDetails: " +
                    packagingDetails_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        packagingDetails_.writePacked(out);
    }

    private static final class ZserioElementFactory_layerLifetime implements zserio.runtime.array.PackableElementFactory<nds.smart.types.DataLayerLifetime>
    {
        @Override
        public nds.smart.types.DataLayerLifetime create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.types.DataLayerLifetime(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.types.DataLayerLifetime.ZserioPackingContext();
        }

        @Override
        public nds.smart.types.DataLayerLifetime create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.types.DataLayerLifetime(context, in);
        }
    }

    private static final class ZserioElementFactory_packagingDetails implements zserio.runtime.array.PackableElementFactory<nds.core.packaging.PackagingDetails>
    {
        @Override
        public nds.core.packaging.PackagingDetails create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.packaging.PackagingDetails(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.packaging.PackagingDetails.ZserioPackingContext();
        }

        @Override
        public nds.core.packaging.PackagingDetails create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.packaging.PackagingDetails(context, in);
        }
    }

    private short numDataLayers_;
    private zserio.runtime.array.Array availableLayers_;
    private zserio.runtime.array.Array layerLifetime_;
    private zserio.runtime.array.Array packagingDetails_;
}
