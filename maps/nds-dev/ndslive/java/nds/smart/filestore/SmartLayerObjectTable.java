/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.filestore;

public class SmartLayerObjectTable
{
    public SmartLayerObjectTable(java.sql.Connection connection, java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = null;
        this.tableName = tableName;
    }

    public SmartLayerObjectTable(java.sql.Connection connection, java.lang.String attachedDbName,
            java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = attachedDbName;
        this.tableName = tableName;
    }

    public void createTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = getCreateTableQuery();
        executeUpdate(sqlQuery.toString());
    }

    public void deleteTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("DROP TABLE ");
        appendTableNameToQuery(sqlQuery);
        executeUpdate(sqlQuery.toString());
    }

    public java.util.List<SmartLayerObjectTableRow> read()
            throws java.sql.SQLException, java.io.IOException
    {
        return read("");
    }

    public java.util.List<SmartLayerObjectTableRow> read(
            java.lang.String condition) throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("SELECT " +
                "objectId, " +
                "objectClass, " +
                "smartLayer, " +
                "header" +
                " FROM ");
        appendTableNameToQuery(sqlQuery);
        if (!condition.isEmpty())
        {
            sqlQuery.append(" WHERE ");
            sqlQuery.append(condition);
        }

        // read rows
        final java.util.List<SmartLayerObjectTableRow> rows = new java.util.ArrayList<SmartLayerObjectTableRow>();
        try (
            final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString());
            final java.sql.ResultSet resultSet = statement.executeQuery();
        )
        {
            while (resultSet.next())
            {
                final SmartLayerObjectTableRow row = readRow(resultSet);
                rows.add(row);
            }
        }

        return rows;
    }

    public void write(java.util.List<SmartLayerObjectTableRow> rows)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("INSERT INTO ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" (" +
                "objectId, " +
                "objectClass, " +
                "smartLayer, " +
                "header" +
                ") VALUES (?, ?, ?, ?)");

        // write rows
        final boolean wasTransactionStarted = startTransaction();
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            for (SmartLayerObjectTableRow row : rows)
            {
                writeRow(row, statement);
                statement.addBatch();
            }
            statement.executeBatch();
        }

        endTransaction(wasTransactionStarted);
    }

    public void update(SmartLayerObjectTableRow row, java.lang.String whereCondition)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("UPDATE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" SET" +
                " objectId=?," +
                " objectClass=?," +
                " smartLayer=?," +
                " header=?" +
                " WHERE ");
        sqlQuery.append(whereCondition);

        // update row
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            writeRow(row, statement);
            statement.executeUpdate();
        }
    }

    private void appendTableNameToQuery(java.lang.StringBuilder sqlQuery)
    {
        if (attachedDbName != null)
        {
            sqlQuery.append(attachedDbName);
            sqlQuery.append('.');
        }
        sqlQuery.append(tableName);
    }

    private void executeUpdate(java.lang.String sql) throws java.sql.SQLException
    {
        try (final java.sql.Statement statement = connection.createStatement())
        {
            statement.executeUpdate(sql);
        }
    }

    private boolean startTransaction() throws java.sql.SQLException
    {
        boolean wasTransactionStarted = false;
        if (connection.getAutoCommit())
        {
            connection.setAutoCommit(false);
            wasTransactionStarted = true;
        }

        return wasTransactionStarted;
    }

    private void endTransaction(boolean wasTransactionStarted) throws java.sql.SQLException
    {
        if (wasTransactionStarted)
        {
            connection.commit();
            connection.setAutoCommit(true);
        }
    }

    private java.lang.StringBuilder getCreateTableQuery() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("CREATE TABLE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(
                "(" +
                "objectId INTEGER" + " " + "NOT NULL" + "," +
                "objectClass INTEGER" + " " + "NOT NULL" + "," +
                "smartLayer BLOB" + " " + "NOT NULL" + "," +
                "header BLOB" + " " + "NULL" +
                ", " +
                "primary key (objectId, objectClass)" +
                ")");

        return sqlQuery;
    }

    private static SmartLayerObjectTableRow readRow(
            java.sql.ResultSet resultSet) throws java.sql.SQLException, java.io.IOException
    {
        final SmartLayerObjectTableRow row = new SmartLayerObjectTableRow();

        // field objectId
        final long valueObjectId = resultSet.getLong(1);
        if (!resultSet.wasNull())
        {
            row.setObjectId(java.math.BigInteger.valueOf(valueObjectId));
        }

        // field objectClass
        final int valueObjectClass = resultSet.getInt(2);
        if (!resultSet.wasNull())
        {
            row.setObjectClass(valueObjectClass);
        }

        // field smartLayer
        final byte[] valueSmartLayer = resultSet.getBytes(3);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueSmartLayer);
            final nds.smart.object.SmartLayerObject blob =
                    new nds.smart.object.SmartLayerObject(reader);
            row.setSmartLayer(blob);
        }

        // field header
        final byte[] valueHeader = resultSet.getBytes(4);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueHeader);
            final nds.smart.types.SmartLayerHeader blob =
                    new nds.smart.types.SmartLayerHeader(reader);
            row.setHeader(blob);
        }

        return row;
    }

    private static void writeRow(SmartLayerObjectTableRow row, java.sql.PreparedStatement statement)
            throws java.sql.SQLException
    {
        // field objectId
        if (row.isNullObjectId())
        {
            statement.setNull(1, java.sql.Types.INTEGER);
        }
        else
        {
            final long bigIntValue = row.getObjectId().longValue();
            statement.setLong(1, bigIntValue);
        }

        // field objectClass
        if (row.isNullObjectClass())
        {
            statement.setNull(2, java.sql.Types.INTEGER);
        }
        else
        {
            final int value = row.getObjectClass();
            statement.setInt(2, value);
        }

        // field smartLayer
        if (row.isNullSmartLayer())
        {
            statement.setNull(3, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getSmartLayer());
            statement.setBytes(3, blobData);
        }

        // field header
        if (row.isNullHeader())
        {
            statement.setNull(4, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getHeader());
            statement.setBytes(4, blobData);
        }
    }

    private final java.sql.Connection connection;
    private final java.lang.String attachedDbName;
    private final java.lang.String tableName;
}
