/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.filestore;

public class SmartLayerMetadataTable
{
    public SmartLayerMetadataTable(java.sql.Connection connection, java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = null;
        this.tableName = tableName;
    }

    public SmartLayerMetadataTable(java.sql.Connection connection, java.lang.String attachedDbName,
            java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = attachedDbName;
        this.tableName = tableName;
    }

    public void createTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = getCreateTableQuery();
        executeUpdate(sqlQuery.toString());
    }

    public void deleteTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("DROP TABLE ");
        appendTableNameToQuery(sqlQuery);
        executeUpdate(sqlQuery.toString());
    }

    public java.util.List<SmartLayerMetadataTableRow> read()
            throws java.sql.SQLException, java.io.IOException
    {
        return read("");
    }

    public java.util.List<SmartLayerMetadataTableRow> read(
            java.lang.String condition) throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("SELECT " +
                "id, " +
                "registryMetadata, " +
                "moduleDefinition, " +
                "definition, " +
                "nodeSystemReference, " +
                "nodeLegalInfo" +
                " FROM ");
        appendTableNameToQuery(sqlQuery);
        if (!condition.isEmpty())
        {
            sqlQuery.append(" WHERE ");
            sqlQuery.append(condition);
        }

        // read rows
        final java.util.List<SmartLayerMetadataTableRow> rows = new java.util.ArrayList<SmartLayerMetadataTableRow>();
        try (
            final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString());
            final java.sql.ResultSet resultSet = statement.executeQuery();
        )
        {
            while (resultSet.next())
            {
                final SmartLayerMetadataTableRow row = readRow(resultSet);
                rows.add(row);
            }
        }

        return rows;
    }

    public void write(java.util.List<SmartLayerMetadataTableRow> rows)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("INSERT INTO ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" (" +
                "id, " +
                "registryMetadata, " +
                "moduleDefinition, " +
                "definition, " +
                "nodeSystemReference, " +
                "nodeLegalInfo" +
                ") VALUES (?, ?, ?, ?, ?, ?)");

        // write rows
        final boolean wasTransactionStarted = startTransaction();
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            for (SmartLayerMetadataTableRow row : rows)
            {
                writeRow(row, statement);
                statement.addBatch();
            }
            statement.executeBatch();
        }

        endTransaction(wasTransactionStarted);
    }

    public void update(SmartLayerMetadataTableRow row, java.lang.String whereCondition)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("UPDATE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" SET" +
                " id=?," +
                " registryMetadata=?," +
                " moduleDefinition=?," +
                " definition=?," +
                " nodeSystemReference=?," +
                " nodeLegalInfo=?" +
                " WHERE ");
        sqlQuery.append(whereCondition);

        // update row
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            writeRow(row, statement);
            statement.executeUpdate();
        }
    }

    private void appendTableNameToQuery(java.lang.StringBuilder sqlQuery)
    {
        if (attachedDbName != null)
        {
            sqlQuery.append(attachedDbName);
            sqlQuery.append('.');
        }
        sqlQuery.append(tableName);
    }

    private void executeUpdate(java.lang.String sql) throws java.sql.SQLException
    {
        try (final java.sql.Statement statement = connection.createStatement())
        {
            statement.executeUpdate(sql);
        }
    }

    private boolean startTransaction() throws java.sql.SQLException
    {
        boolean wasTransactionStarted = false;
        if (connection.getAutoCommit())
        {
            connection.setAutoCommit(false);
            wasTransactionStarted = true;
        }

        return wasTransactionStarted;
    }

    private void endTransaction(boolean wasTransactionStarted) throws java.sql.SQLException
    {
        if (wasTransactionStarted)
        {
            connection.commit();
            connection.setAutoCommit(true);
        }
    }

    private java.lang.StringBuilder getCreateTableQuery() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("CREATE TABLE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(
                "(" +
                "id INTEGER" + " " + "PRIMARY KEY DEFAULT 0 NOT NULL" + "," +
                "registryMetadata BLOB" + "," +
                "moduleDefinition BLOB" + "," +
                "definition BLOB" + "," +
                "nodeSystemReference BLOB" + "," +
                "nodeLegalInfo BLOB" +
                ", " +
                ("check(id == 0)") +
                ")");

        return sqlQuery;
    }

    private static SmartLayerMetadataTableRow readRow(
            java.sql.ResultSet resultSet) throws java.sql.SQLException, java.io.IOException
    {
        final SmartLayerMetadataTableRow row = new SmartLayerMetadataTableRow();

        // field id
        final short valueId = resultSet.getShort(1);
        if (!resultSet.wasNull())
        {
            row.setId(valueId);
        }

        // field registryMetadata
        final byte[] valueRegistryMetadata = resultSet.getBytes(2);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueRegistryMetadata);
            final nds.smart.metadata.SmartLayerRegistryMetadata blob =
                    new nds.smart.metadata.SmartLayerRegistryMetadata(reader);
            row.setRegistryMetadata(blob);
        }

        // field moduleDefinition
        final byte[] valueModuleDefinition = resultSet.getBytes(3);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueModuleDefinition);
            final nds.system.types.ModuleDefinition blob =
                    new nds.system.types.ModuleDefinition(reader);
            row.setModuleDefinition(blob);
        }

        // field definition
        final byte[] valueDefinition = resultSet.getBytes(4);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueDefinition);
            final nds.smart.metadata.SmartLayerDefinition blob =
                    new nds.smart.metadata.SmartLayerDefinition(reader);
            row.setDefinition(blob);
        }

        // field nodeSystemReference
        final byte[] valueNodeSystemReference = resultSet.getBytes(5);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueNodeSystemReference);
            final nds.system.types.NdsSystemToken blob =
                    new nds.system.types.NdsSystemToken(reader);
            row.setNodeSystemReference(blob);
        }

        // field nodeLegalInfo
        final byte[] valueNodeLegalInfo = resultSet.getBytes(6);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueNodeLegalInfo);
            final nds.system.types.NdsNodeLegalInfo blob =
                    new nds.system.types.NdsNodeLegalInfo(reader);
            row.setNodeLegalInfo(blob);
        }

        return row;
    }

    private static void writeRow(SmartLayerMetadataTableRow row, java.sql.PreparedStatement statement)
            throws java.sql.SQLException
    {
        // field id
        if (row.isNullId())
        {
            statement.setNull(1, java.sql.Types.INTEGER);
        }
        else
        {
            final short value = row.getId();
            statement.setShort(1, value);
        }

        // field registryMetadata
        if (row.isNullRegistryMetadata())
        {
            statement.setNull(2, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getRegistryMetadata());
            statement.setBytes(2, blobData);
        }

        // field moduleDefinition
        if (row.isNullModuleDefinition())
        {
            statement.setNull(3, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getModuleDefinition());
            statement.setBytes(3, blobData);
        }

        // field definition
        if (row.isNullDefinition())
        {
            statement.setNull(4, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getDefinition());
            statement.setBytes(4, blobData);
        }

        // field nodeSystemReference
        if (row.isNullNodeSystemReference())
        {
            statement.setNull(5, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getNodeSystemReference());
            statement.setBytes(5, blobData);
        }

        // field nodeLegalInfo
        if (row.isNullNodeLegalInfo())
        {
            statement.setNull(6, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getNodeLegalInfo());
            statement.setBytes(6, blobData);
        }
    }

    private final java.sql.Connection connection;
    private final java.lang.String attachedDbName;
    private final java.lang.String tableName;
}
