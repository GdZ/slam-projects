/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.path;

public class SmartLayerPath implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            header_ = new nds.smart.types.SmartLayerHeader.ZserioPackingContext();
            numSegments_ = new zserio.runtime.array.DeltaContext();
            pathLocation_ = new nds.smart.path.SmartLayerPathLocation.ZserioPackingContext();
        }

        public nds.smart.types.SmartLayerHeader.ZserioPackingContext getHeader()
        {
            return header_;
        }

        public zserio.runtime.array.DeltaContext getNumSegments()
        {
            return numSegments_;
        }

        public nds.smart.path.SmartLayerPathLocation.ZserioPackingContext getPathLocation()
        {
            return pathLocation_;
        }

        private nds.smart.types.SmartLayerHeader.ZserioPackingContext header_;
        private zserio.runtime.array.DeltaContext numSegments_;
        private nds.smart.path.SmartLayerPathLocation.ZserioPackingContext pathLocation_;
    };

    public SmartLayerPath()
    {
    }

    public SmartLayerPath(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerPath(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerPath(
            nds.smart.types.SmartLayerHeader header_,
            int numSegments_,
            boolean exactMatch_,
            nds.smart.path.SmartLayerPathLocation pathLocation_,
            nds.smart.path.SmartLayerPathSegment[] segments_)
    {
        setHeader(header_);
        setNumSegments(numSegments_);
        setExactMatch(exactMatch_);
        setPathLocation(pathLocation_);
        setSegments(segments_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.initPackingContext(zserioContext.getHeader());
        zserioContext.getNumSegments().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numSegments_));
        if (isPathLocationUsed())
        {
            pathLocation_.initPackingContext(zserioContext.getPathLocation());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numSegments_);
        endBitPosition += 1;
        if (isPathLocationUsed())
        {
            endBitPosition += pathLocation_.bitSizeOf(endBitPosition);
        }
        endBitPosition += segments_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(zserioContext.getHeader(), endBitPosition);
        endBitPosition += zserioContext.getNumSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numSegments_));
        endBitPosition += 1;
        if (isPathLocationUsed())
        {
            endBitPosition += pathLocation_.bitSizeOf(zserioContext.getPathLocation(), endBitPosition);
        }
        endBitPosition += segments_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.smart.types.SmartLayerHeader getHeader()
    {
        return header_;
    }

    public void setHeader(nds.smart.types.SmartLayerHeader header_)
    {
        this.header_ = header_;
    }

    public int getNumSegments()
    {
        return numSegments_;
    }

    public void setNumSegments(int numSegments_)
    {
        this.numSegments_ = numSegments_;
    }

    public boolean getExactMatch()
    {
        return exactMatch_;
    }

    public void setExactMatch(boolean exactMatch_)
    {
        this.exactMatch_ = exactMatch_;
    }

    public nds.smart.path.SmartLayerPathLocation getPathLocation()
    {
        return pathLocation_;
    }

    public void setPathLocation(nds.smart.path.SmartLayerPathLocation pathLocation_)
    {
        this.pathLocation_ = pathLocation_;
    }

    public boolean isPathLocationUsed()
    {
        return (!(getExactMatch() && getNumSegments() == 1));
    }

    public boolean isPathLocationSet()
    {
        return (pathLocation_ != null);
    }

    public void resetPathLocation()
    {
        this.pathLocation_ = null;
    }

    public nds.smart.path.SmartLayerPathSegment[] getSegments()
    {
        return (segments_ == null) ? null : segments_.getRawArray();
    }

    public void setSegments(nds.smart.path.SmartLayerPathSegment[] segments_)
    {
        this.segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.path.SmartLayerPathSegment.class, segments_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.path.SmartLayerPathSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerPath)
        {
            final SmartLayerPath that = (SmartLayerPath)obj;

            return
                    ((header_ == null) ? that.header_ == null : header_.equals(that.header_)) &&
                    numSegments_ == that.numSegments_ &&
                    exactMatch_ == that.exactMatch_ &&
                    ((!isPathLocationUsed()) ? !that.isPathLocationUsed() :
                        ((pathLocation_ == null) ? that.pathLocation_ == null : pathLocation_.equals(that.pathLocation_))) &&
                    ((segments_ == null) ? that.segments_ == null : segments_.equals(that.segments_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSegments_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, exactMatch_);
        if (isPathLocationUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, pathLocation_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, segments_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        header_ = new nds.smart.types.SmartLayerHeader(in);

        numSegments_ = in.readVarSize();

        exactMatch_ = in.readBool();

        if (!(getExactMatch() && getNumSegments() == 1))
        {
            pathLocation_ = new nds.smart.path.SmartLayerPathLocation(in, (int)(getNumSegments()));
        }

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.path.SmartLayerPathSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.path.SmartLayerPathSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.read(in, (int)(getNumSegments()));

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_ = new nds.smart.types.SmartLayerHeader(zserioContext.getHeader(), in);

        numSegments_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumSegments().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        exactMatch_ = in.readBool();

        if (!(getExactMatch() && getNumSegments() == 1))
        {
            pathLocation_ = new nds.smart.path.SmartLayerPathLocation(zserioContext.getPathLocation(), in, (int)(getNumSegments()));
        }

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.path.SmartLayerPathSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.path.SmartLayerPathSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.readPacked(in, (int)(getNumSegments()));

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numSegments_);
        endBitPosition += 1;
        if (isPathLocationUsed())
        {
            endBitPosition = pathLocation_.initializeOffsets(endBitPosition);
        }
        endBitPosition = segments_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(zserioContext.getHeader(), endBitPosition);
        endBitPosition += zserioContext.getNumSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numSegments_));
        endBitPosition += 1;
        if (isPathLocationUsed())
        {
            endBitPosition = pathLocation_.initializeOffsets(zserioContext.getPathLocation(), endBitPosition);
        }
        endBitPosition = segments_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        header_.write(out);

        out.writeVarSize(numSegments_);

        out.writeBool(exactMatch_);

        if (isPathLocationUsed())
        {
            // check parameters
            if (pathLocation_.getNumSegments() != (int)(getNumSegments()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter numSegments for field SmartLayerPath.pathLocation: " +
                        pathLocation_.getNumSegments() + " != " + (int)(getNumSegments()) + "!");
            }
            pathLocation_.write(out);
        }

        if (segments_.size() != (int)(getNumSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerPath.segments: " +
                    segments_.size() + " != " + (int)(getNumSegments()) + "!");
        }
        segments_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        header_.write(zserioContext.getHeader(), out);

        zserioContext.getNumSegments().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numSegments_));

        out.writeBool(exactMatch_);

        if (isPathLocationUsed())
        {
            pathLocation_.write(zserioContext.getPathLocation(), out);
        }

        if (segments_.size() != (int)(getNumSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerPath.segments: " +
                    segments_.size() + " != " + (int)(getNumSegments()) + "!");
        }
        segments_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getNumSegments() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at SmartLayerPath.numSegments!");
    }

    private final class ZserioElementFactory_segments implements zserio.runtime.array.PackableElementFactory<nds.smart.path.SmartLayerPathSegment>
    {
        @Override
        public nds.smart.path.SmartLayerPathSegment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.path.SmartLayerPathSegment(in, getHeader());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.path.SmartLayerPathSegment.ZserioPackingContext();
        }

        @Override
        public nds.smart.path.SmartLayerPathSegment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.path.SmartLayerPathSegment(context, in, getHeader());
        }
    }

    private nds.smart.types.SmartLayerHeader header_;
    private int numSegments_;
    private boolean exactMatch_;
    private nds.smart.path.SmartLayerPathLocation pathLocation_;
    private zserio.runtime.array.Array segments_;
}
