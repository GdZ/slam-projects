/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.path;

public class SmartLayerPosePathRequest implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public SmartLayerPosePathRequest()
    {
    }

    public SmartLayerPosePathRequest(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerPosePathRequest(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerPosePathRequest(
            nds.core.vehicle.TimedRawPose[] poses_)
    {
        setPoses(poses_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += poses_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += poses_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.vehicle.TimedRawPose[] getPoses()
    {
        return (poses_ == null) ? null : poses_.getRawArray();
    }

    public void setPoses(nds.core.vehicle.TimedRawPose[] poses_)
    {
        this.poses_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.TimedRawPose.class, poses_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.TimedRawPose>(new ZserioElementFactory_poses()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerPosePathRequest)
        {
            final SmartLayerPosePathRequest that = (SmartLayerPosePathRequest)obj;

            return
                    ((poses_ == null) ? that.poses_ == null : poses_.equals(that.poses_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, poses_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        poses_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.TimedRawPose.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.TimedRawPose>(new ZserioElementFactory_poses()),
                zserio.runtime.array.ArrayType.AUTO);
        poses_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        poses_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.TimedRawPose.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.TimedRawPose>(new ZserioElementFactory_poses()),
                zserio.runtime.array.ArrayType.AUTO);
        poses_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = poses_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = poses_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        poses_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        poses_.writePacked(out);
    }

    private static final class ZserioElementFactory_poses implements zserio.runtime.array.PackableElementFactory<nds.core.vehicle.TimedRawPose>
    {
        @Override
        public nds.core.vehicle.TimedRawPose create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.vehicle.TimedRawPose(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.vehicle.TimedRawPose.ZserioPackingContext();
        }

        @Override
        public nds.core.vehicle.TimedRawPose create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.vehicle.TimedRawPose(context, in);
        }
    }

    private zserio.runtime.array.Array poses_;
}
