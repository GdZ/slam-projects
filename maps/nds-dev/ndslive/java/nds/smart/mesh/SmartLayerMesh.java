/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.mesh;

public class SmartLayerMesh implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            meshId_ = new nds.system.types.UUID.ZserioPackingContext();
            numTiles_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.system.types.UUID.ZserioPackingContext getMeshId()
        {
            return meshId_;
        }

        public zserio.runtime.array.DeltaContext getNumTiles()
        {
            return numTiles_;
        }

        private nds.system.types.UUID.ZserioPackingContext meshId_;
        private zserio.runtime.array.DeltaContext numTiles_;
    };

    public SmartLayerMesh()
    {
    }

    public SmartLayerMesh(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerMesh(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerMesh(
            nds.system.types.UUID meshId_,
            int numTiles_,
            nds.smart.tile.SmartLayerTile[] tileList_)
    {
        setMeshId(meshId_);
        setNumTiles(numTiles_);
        setTileList(tileList_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        meshId_.initPackingContext(zserioContext.getMeshId());
        zserioContext.getNumTiles().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += meshId_.bitSizeOf(endBitPosition);
        endBitPosition += 16;
        endBitPosition += tileList_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += meshId_.bitSizeOf(zserioContext.getMeshId(), endBitPosition);
        endBitPosition += zserioContext.getNumTiles().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
        endBitPosition += tileList_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.system.types.UUID getMeshId()
    {
        return meshId_;
    }

    public void setMeshId(nds.system.types.UUID meshId_)
    {
        this.meshId_ = meshId_;
    }

    public int getNumTiles()
    {
        return numTiles_;
    }

    public void setNumTiles(int numTiles_)
    {
        this.numTiles_ = numTiles_;
    }

    public nds.smart.tile.SmartLayerTile[] getTileList()
    {
        return (tileList_ == null) ? null : tileList_.getRawArray();
    }

    public void setTileList(nds.smart.tile.SmartLayerTile[] tileList_)
    {
        this.tileList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SmartLayerTile.class, tileList_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SmartLayerTile>(new ZserioElementFactory_tileList()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerMesh)
        {
            final SmartLayerMesh that = (SmartLayerMesh)obj;

            return
                    ((meshId_ == null) ? that.meshId_ == null : meshId_.equals(that.meshId_)) &&
                    numTiles_ == that.numTiles_ &&
                    ((tileList_ == null) ? that.tileList_ == null : tileList_.equals(that.tileList_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, meshId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numTiles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, tileList_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        meshId_ = new nds.system.types.UUID(in);

        numTiles_ = in.readUnsignedShort();

        tileList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SmartLayerTile.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SmartLayerTile>(new ZserioElementFactory_tileList()),
                zserio.runtime.array.ArrayType.NORMAL);
        tileList_.read(in, (int)(getNumTiles()));

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        meshId_ = new nds.system.types.UUID(zserioContext.getMeshId(), in);

        numTiles_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumTiles().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();

        tileList_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SmartLayerTile.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SmartLayerTile>(new ZserioElementFactory_tileList()),
                zserio.runtime.array.ArrayType.NORMAL);
        tileList_.readPacked(in, (int)(getNumTiles()));

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = meshId_.initializeOffsets(endBitPosition);
        endBitPosition += 16;
        endBitPosition = tileList_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = meshId_.initializeOffsets(zserioContext.getMeshId(), endBitPosition);
        endBitPosition += zserioContext.getNumTiles().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
        endBitPosition = tileList_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        meshId_.write(out);

        out.writeUnsignedShort(numTiles_);

        if (tileList_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerMesh.tileList: " +
                    tileList_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        tileList_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        meshId_.write(zserioContext.getMeshId(), out);

        zserioContext.getNumTiles().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));

        if (tileList_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerMesh.tileList: " +
                    tileList_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        tileList_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getNumTiles() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at SmartLayerMesh.numTiles!");
    }

    private static final class ZserioElementFactory_tileList implements zserio.runtime.array.PackableElementFactory<nds.smart.tile.SmartLayerTile>
    {
        @Override
        public nds.smart.tile.SmartLayerTile create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.tile.SmartLayerTile(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.tile.SmartLayerTile.ZserioPackingContext();
        }

        @Override
        public nds.smart.tile.SmartLayerTile create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.tile.SmartLayerTile(context, in);
        }
    }

    private nds.system.types.UUID meshId_;
    private int numTiles_;
    private zserio.runtime.array.Array tileList_;
}
