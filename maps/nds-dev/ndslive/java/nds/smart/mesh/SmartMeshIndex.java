/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.mesh;

public class SmartMeshIndex implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numEntries_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumEntries()
        {
            return numEntries_;
        }

        private zserio.runtime.array.DeltaContext numEntries_;
    };

    public SmartMeshIndex()
    {
    }

    public SmartMeshIndex(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartMeshIndex(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartMeshIndex(
            boolean hasHeaders_,
            boolean hasMeshSizes_,
            int numEntries_,
            int[] tileIds_,
            nds.system.types.UUID[] meshIds_,
            nds.smart.types.SmartLayerHeader[] header_,
            int[] meshSize_)
    {
        setHasHeaders(hasHeaders_);
        setHasMeshSizes(hasMeshSizes_);
        setNumEntries(numEntries_);
        setTileIds(tileIds_);
        setMeshIds(meshIds_);
        setHeader(header_);
        setMeshSize(meshSize_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumEntries().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition += tileIds_.bitSizeOf(endBitPosition);
        endBitPosition += meshIds_.bitSizeOf(endBitPosition);
        if (isHeaderUsed())
        {
            endBitPosition += header_.bitSizeOf(endBitPosition);
        }
        if (isMeshSizeUsed())
        {
            endBitPosition += meshSize_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition += tileIds_.bitSizeOfPacked(endBitPosition);
        endBitPosition += meshIds_.bitSizeOfPacked(endBitPosition);
        if (isHeaderUsed())
        {
            endBitPosition += header_.bitSizeOfPacked(endBitPosition);
        }
        if (isMeshSizeUsed())
        {
            endBitPosition += meshSize_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasHeaders()
    {
        return hasHeaders_;
    }

    public void setHasHeaders(boolean hasHeaders_)
    {
        this.hasHeaders_ = hasHeaders_;
    }

    public boolean getHasMeshSizes()
    {
        return hasMeshSizes_;
    }

    public void setHasMeshSizes(boolean hasMeshSizes_)
    {
        this.hasMeshSizes_ = hasMeshSizes_;
    }

    public int getNumEntries()
    {
        return numEntries_;
    }

    public void setNumEntries(int numEntries_)
    {
        this.numEntries_ = numEntries_;
    }

    public int[] getTileIds()
    {
        return (tileIds_ == null) ? null : tileIds_.getRawArray();
    }

    public void setTileIds(int[] tileIds_)
    {
        this.tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(tileIds_),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.system.types.UUID[] getMeshIds()
    {
        return (meshIds_ == null) ? null : meshIds_.getRawArray();
    }

    public void setMeshIds(nds.system.types.UUID[] meshIds_)
    {
        this.meshIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.system.types.UUID.class, meshIds_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.system.types.UUID>(new ZserioElementFactory_meshIds()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.smart.types.SmartLayerHeader[] getHeader()
    {
        return (header_ == null) ? null : header_.getRawArray();
    }

    public void setHeader(nds.smart.types.SmartLayerHeader[] header_)
    {
        if (header_ == null)
        {
            this.header_ = null;
        }
        else
        {
            this.header_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class, header_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_header()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isHeaderUsed()
    {
        return (getHasHeaders());
    }

    public boolean isHeaderSet()
    {
        return (header_ != null);
    }

    public void resetHeader()
    {
        this.header_ = null;
    }

    public int[] getMeshSize()
    {
        return (meshSize_ == null) ? null : meshSize_.getRawArray();
    }

    public void setMeshSize(int[] meshSize_)
    {
        if (meshSize_ == null)
        {
            this.meshSize_ = null;
        }
        else
        {
            this.meshSize_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.IntRawArray(meshSize_),
                    new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isMeshSizeUsed()
    {
        return (getHasMeshSizes());
    }

    public boolean isMeshSizeSet()
    {
        return (meshSize_ != null);
    }

    public void resetMeshSize()
    {
        this.meshSize_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartMeshIndex)
        {
            final SmartMeshIndex that = (SmartMeshIndex)obj;

            return
                    hasHeaders_ == that.hasHeaders_ &&
                    hasMeshSizes_ == that.hasMeshSizes_ &&
                    numEntries_ == that.numEntries_ &&
                    ((tileIds_ == null) ? that.tileIds_ == null : tileIds_.equals(that.tileIds_)) &&
                    ((meshIds_ == null) ? that.meshIds_ == null : meshIds_.equals(that.meshIds_)) &&
                    ((!isHeaderUsed()) ? !that.isHeaderUsed() :
                        ((header_ == null) ? that.header_ == null : header_.equals(that.header_))) &&
                    ((!isMeshSizeUsed()) ? !that.isMeshSizeUsed() :
                        ((meshSize_ == null) ? that.meshSize_ == null : meshSize_.equals(that.meshSize_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasHeaders_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasMeshSizes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numEntries_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, tileIds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, meshIds_);
        if (isHeaderUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        if (isMeshSizeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, meshSize_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasHeaders_ = in.readBool();

        hasMeshSizes_ = in.readBool();

        in.alignTo(8);
        numEntries_ = in.readVarSize();

        tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
        tileIds_.read(in, (int)(getNumEntries()));

        meshIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.system.types.UUID.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.system.types.UUID>(new ZserioElementFactory_meshIds()),
                zserio.runtime.array.ArrayType.NORMAL);
        meshIds_.read(in, (int)(getNumEntries()));

        if (getHasHeaders())
        {
            header_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_header()),
                    zserio.runtime.array.ArrayType.NORMAL);
            header_.read(in, (int)(getNumEntries()));
        }

        if (getHasMeshSizes())
        {
            meshSize_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.IntRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            meshSize_.read(in, (int)(getNumEntries()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        hasHeaders_ = in.readBool();

        hasMeshSizes_ = in.readBool();

        in.alignTo(8);
        numEntries_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumEntries().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
        tileIds_.readPacked(in, (int)(getNumEntries()));

        meshIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.system.types.UUID.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.system.types.UUID>(new ZserioElementFactory_meshIds()),
                zserio.runtime.array.ArrayType.NORMAL);
        meshIds_.readPacked(in, (int)(getNumEntries()));

        if (getHasHeaders())
        {
            header_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_header()),
                    zserio.runtime.array.ArrayType.NORMAL);
            header_.readPacked(in, (int)(getNumEntries()));
        }

        if (getHasMeshSizes())
        {
            meshSize_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.IntRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            meshSize_.readPacked(in, (int)(getNumEntries()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition = tileIds_.initializeOffsets(endBitPosition);
        endBitPosition = meshIds_.initializeOffsets(endBitPosition);
        if (isHeaderUsed())
        {
            endBitPosition = header_.initializeOffsets(endBitPosition);
        }
        if (isMeshSizeUsed())
        {
            endBitPosition = meshSize_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition = tileIds_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = meshIds_.initializeOffsetsPacked(endBitPosition);
        if (isHeaderUsed())
        {
            endBitPosition = header_.initializeOffsetsPacked(endBitPosition);
        }
        if (isMeshSizeUsed())
        {
            endBitPosition = meshSize_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasHeaders_);

        out.writeBool(hasMeshSizes_);

        out.alignTo(8);
        out.writeVarSize(numEntries_);

        if (tileIds_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.tileIds: " +
                    tileIds_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        tileIds_.write(out);

        if (meshIds_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.meshIds: " +
                    meshIds_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        meshIds_.write(out);

        if (isHeaderUsed())
        {
            if (header_.size() != (int)(getNumEntries()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.header: " +
                        header_.size() + " != " + (int)(getNumEntries()) + "!");
            }
            header_.write(out);
        }

        if (isMeshSizeUsed())
        {
            if (meshSize_.size() != (int)(getNumEntries()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.meshSize: " +
                        meshSize_.size() + " != " + (int)(getNumEntries()) + "!");
            }
            meshSize_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(hasHeaders_);

        out.writeBool(hasMeshSizes_);

        out.alignTo(8);
        zserioContext.getNumEntries().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));

        if (tileIds_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.tileIds: " +
                    tileIds_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        tileIds_.writePacked(out);

        if (meshIds_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.meshIds: " +
                    meshIds_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        meshIds_.writePacked(out);

        if (isHeaderUsed())
        {
            if (header_.size() != (int)(getNumEntries()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.header: " +
                        header_.size() + " != " + (int)(getNumEntries()) + "!");
            }
            header_.writePacked(out);
        }

        if (isMeshSizeUsed())
        {
            if (meshSize_.size() != (int)(getNumEntries()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartMeshIndex.meshSize: " +
                        meshSize_.size() + " != " + (int)(getNumEntries()) + "!");
            }
            meshSize_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_meshIds implements zserio.runtime.array.PackableElementFactory<nds.system.types.UUID>
    {
        @Override
        public nds.system.types.UUID create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.system.types.UUID(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.system.types.UUID.ZserioPackingContext();
        }

        @Override
        public nds.system.types.UUID create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.system.types.UUID(context, in);
        }
    }

    private static final class ZserioElementFactory_header implements zserio.runtime.array.PackableElementFactory<nds.smart.types.SmartLayerHeader>
    {
        @Override
        public nds.smart.types.SmartLayerHeader create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.types.SmartLayerHeader(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.types.SmartLayerHeader.ZserioPackingContext();
        }

        @Override
        public nds.smart.types.SmartLayerHeader create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.types.SmartLayerHeader(context, in);
        }
    }

    private boolean hasHeaders_;
    private boolean hasMeshSizes_;
    private int numEntries_;
    private zserio.runtime.array.Array tileIds_;
    private zserio.runtime.array.Array meshIds_;
    private zserio.runtime.array.Array header_;
    private zserio.runtime.array.Array meshSize_;
}
