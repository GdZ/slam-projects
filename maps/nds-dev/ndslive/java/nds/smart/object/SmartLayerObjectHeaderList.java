/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.object;

public class SmartLayerObjectHeaderList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numObjects_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumObjects()
        {
            return numObjects_;
        }

        private zserio.runtime.array.DeltaContext numObjects_;
    };

    public SmartLayerObjectHeaderList()
    {
    }

    public SmartLayerObjectHeaderList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerObjectHeaderList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerObjectHeaderList(
            int numObjects_,
            nds.smart.object.SmartLayerObjectReference[] references_,
            nds.smart.types.SmartLayerHeader[] headers_)
    {
        setNumObjects(numObjects_);
        setReferences(references_);
        setHeaders(headers_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumObjects().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numObjects_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numObjects_);
        endBitPosition += references_.bitSizeOf(endBitPosition);
        endBitPosition += headers_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumObjects().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numObjects_));
        endBitPosition += references_.bitSizeOfPacked(endBitPosition);
        endBitPosition += headers_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumObjects()
    {
        return numObjects_;
    }

    public void setNumObjects(int numObjects_)
    {
        this.numObjects_ = numObjects_;
    }

    public nds.smart.object.SmartLayerObjectReference[] getReferences()
    {
        return (references_ == null) ? null : references_.getRawArray();
    }

    public void setReferences(nds.smart.object.SmartLayerObjectReference[] references_)
    {
        this.references_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.object.SmartLayerObjectReference.class, references_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.object.SmartLayerObjectReference>(new ZserioElementFactory_references()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.smart.types.SmartLayerHeader[] getHeaders()
    {
        return (headers_ == null) ? null : headers_.getRawArray();
    }

    public void setHeaders(nds.smart.types.SmartLayerHeader[] headers_)
    {
        this.headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class, headers_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerObjectHeaderList)
        {
            final SmartLayerObjectHeaderList that = (SmartLayerObjectHeaderList)obj;

            return
                    numObjects_ == that.numObjects_ &&
                    ((references_ == null) ? that.references_ == null : references_.equals(that.references_)) &&
                    ((headers_ == null) ? that.headers_ == null : headers_.equals(that.headers_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numObjects_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, references_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, headers_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numObjects_ = in.readVarSize();

        references_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.object.SmartLayerObjectReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.object.SmartLayerObjectReference>(new ZserioElementFactory_references()),
                zserio.runtime.array.ArrayType.NORMAL);
        references_.read(in, (int)(getNumObjects()));

        headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
        headers_.read(in, (int)(getNumObjects()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numObjects_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumObjects().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        references_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.object.SmartLayerObjectReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.object.SmartLayerObjectReference>(new ZserioElementFactory_references()),
                zserio.runtime.array.ArrayType.NORMAL);
        references_.readPacked(in, (int)(getNumObjects()));

        headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.SmartLayerHeader.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.types.SmartLayerHeader>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
        headers_.readPacked(in, (int)(getNumObjects()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numObjects_);
        endBitPosition = references_.initializeOffsets(endBitPosition);
        endBitPosition = headers_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumObjects().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numObjects_));
        endBitPosition = references_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = headers_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numObjects_);

        if (references_.size() != (int)(getNumObjects()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerObjectHeaderList.references: " +
                    references_.size() + " != " + (int)(getNumObjects()) + "!");
        }
        references_.write(out);

        if (headers_.size() != (int)(getNumObjects()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerObjectHeaderList.headers: " +
                    headers_.size() + " != " + (int)(getNumObjects()) + "!");
        }
        headers_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumObjects().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numObjects_));

        if (references_.size() != (int)(getNumObjects()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerObjectHeaderList.references: " +
                    references_.size() + " != " + (int)(getNumObjects()) + "!");
        }
        references_.writePacked(out);

        if (headers_.size() != (int)(getNumObjects()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SmartLayerObjectHeaderList.headers: " +
                    headers_.size() + " != " + (int)(getNumObjects()) + "!");
        }
        headers_.writePacked(out);
    }

    private static final class ZserioElementFactory_references implements zserio.runtime.array.PackableElementFactory<nds.smart.object.SmartLayerObjectReference>
    {
        @Override
        public nds.smart.object.SmartLayerObjectReference create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.object.SmartLayerObjectReference(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.object.SmartLayerObjectReference.ZserioPackingContext();
        }

        @Override
        public nds.smart.object.SmartLayerObjectReference create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.object.SmartLayerObjectReference(context, in);
        }
    }

    private static final class ZserioElementFactory_headers implements zserio.runtime.array.PackableElementFactory<nds.smart.types.SmartLayerHeader>
    {
        @Override
        public nds.smart.types.SmartLayerHeader create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.types.SmartLayerHeader(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.types.SmartLayerHeader.ZserioPackingContext();
        }

        @Override
        public nds.smart.types.SmartLayerHeader create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.types.SmartLayerHeader(context, in);
        }
    }

    private int numObjects_;
    private zserio.runtime.array.Array references_;
    private zserio.runtime.array.Array headers_;
}
