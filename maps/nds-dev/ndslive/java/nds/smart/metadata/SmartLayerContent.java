/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.metadata;

public class SmartLayerContent implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            vehicleTypes_ = new nds.core.vehicle.VehicleTypeInformation.ZserioPackingContext();
            vehicleClass_ = new nds.core.vehicle.VehicleClassSpecification.ZserioPackingContext();
        }

        public nds.core.vehicle.VehicleTypeInformation.ZserioPackingContext getVehicleTypes()
        {
            return vehicleTypes_;
        }

        public nds.core.vehicle.VehicleClassSpecification.ZserioPackingContext getVehicleClass()
        {
            return vehicleClass_;
        }

        private nds.core.vehicle.VehicleTypeInformation.ZserioPackingContext vehicleTypes_;
        private nds.core.vehicle.VehicleClassSpecification.ZserioPackingContext vehicleClass_;
    };

    public SmartLayerContent()
    {
    }

    public SmartLayerContent(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SmartLayerContent(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SmartLayerContent(
            nds.core.types.RoadType[] coveredRoadTypes_,
            nds.core.vehicle.VehicleTypeInformation vehicleTypes_,
            nds.core.vehicle.VehicleClassSpecification vehicleClass_)
    {
        setCoveredRoadTypes(coveredRoadTypes_);
        setVehicleTypes(vehicleTypes_);
        setVehicleClass(vehicleClass_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        vehicleTypes_.initPackingContext(zserioContext.getVehicleTypes());
        if (isVehicleClassUsed())
        {
            vehicleClass_.initPackingContext(zserioContext.getVehicleClass());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += coveredRoadTypes_.bitSizeOf(endBitPosition);
        endBitPosition += vehicleTypes_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isVehicleClassUsed())
        {
            endBitPosition += vehicleClass_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += coveredRoadTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += vehicleTypes_.bitSizeOf(zserioContext.getVehicleTypes(), endBitPosition);
        endBitPosition += 1;
        if (isVehicleClassUsed())
        {
            endBitPosition += vehicleClass_.bitSizeOf(zserioContext.getVehicleClass(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.RoadType[] getCoveredRoadTypes()
    {
        return (coveredRoadTypes_ == null) ? null : coveredRoadTypes_.getRawArray();
    }

    public void setCoveredRoadTypes(nds.core.types.RoadType[] coveredRoadTypes_)
    {
        this.coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class, coveredRoadTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.core.vehicle.VehicleTypeInformation getVehicleTypes()
    {
        return vehicleTypes_;
    }

    public void setVehicleTypes(nds.core.vehicle.VehicleTypeInformation vehicleTypes_)
    {
        this.vehicleTypes_ = vehicleTypes_;
    }

    public nds.core.vehicle.VehicleClassSpecification getVehicleClass()
    {
        return vehicleClass_;
    }

    public void setVehicleClass(nds.core.vehicle.VehicleClassSpecification vehicleClass_)
    {
        this.vehicleClass_ = vehicleClass_;
    }

    public boolean isVehicleClassUsed()
    {
        return isVehicleClassSet();
    }

    public boolean isVehicleClassSet()
    {
        return (vehicleClass_ != null);
    }

    public void resetVehicleClass()
    {
        this.vehicleClass_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SmartLayerContent)
        {
            final SmartLayerContent that = (SmartLayerContent)obj;

            return
                    ((coveredRoadTypes_ == null) ? that.coveredRoadTypes_ == null : coveredRoadTypes_.equals(that.coveredRoadTypes_)) &&
                    ((vehicleTypes_ == null) ? that.vehicleTypes_ == null : vehicleTypes_.equals(that.vehicleTypes_)) &&
                    ((!isVehicleClassUsed()) ? !that.isVehicleClassUsed() :
                        ((vehicleClass_ == null) ? that.vehicleClass_ == null : vehicleClass_.equals(that.vehicleClass_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coveredRoadTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleTypes_);
        if (isVehicleClassUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleClass_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.read(in);

        vehicleTypes_ = new nds.core.vehicle.VehicleTypeInformation(in);

        if (in.readBool())
        {
            vehicleClass_ = new nds.core.vehicle.VehicleClassSpecification(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.readPacked(in);

        vehicleTypes_ = new nds.core.vehicle.VehicleTypeInformation(zserioContext.getVehicleTypes(), in);

        if (in.readBool())
        {
            vehicleClass_ = new nds.core.vehicle.VehicleClassSpecification(zserioContext.getVehicleClass(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = coveredRoadTypes_.initializeOffsets(endBitPosition);
        endBitPosition = vehicleTypes_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isVehicleClassUsed())
        {
            endBitPosition = vehicleClass_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = coveredRoadTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = vehicleTypes_.initializeOffsets(zserioContext.getVehicleTypes(), endBitPosition);
        endBitPosition += 1;
        if (isVehicleClassUsed())
        {
            endBitPosition = vehicleClass_.initializeOffsets(zserioContext.getVehicleClass(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        coveredRoadTypes_.write(out);

        vehicleTypes_.write(out);

        if (isVehicleClassUsed())
        {
            out.writeBool(true);
            vehicleClass_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        coveredRoadTypes_.writePacked(out);

        vehicleTypes_.write(zserioContext.getVehicleTypes(), out);

        if (isVehicleClassUsed())
        {
            out.writeBool(true);
            vehicleClass_.write(zserioContext.getVehicleClass(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_coveredRoadTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.RoadType>
    {
        @Override
        public nds.core.types.RoadType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.RoadType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.RoadType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.RoadType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.RoadType(context, in);
        }
    }

    private zserio.runtime.array.Array coveredRoadTypes_;
    private nds.core.vehicle.VehicleTypeInformation vehicleTypes_;
    private nds.core.vehicle.VehicleClassSpecification vehicleClass_;
}
