/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.stats;

public class ClientStatsTopic implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            requestNumSent_ = new zserio.runtime.array.DeltaContext();
            requestPayloadBytes_ = new zserio.runtime.array.DeltaContext();
            responseNumReceived_ = new zserio.runtime.array.DeltaContext();
            responsePayloadBytes_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getRequestNumSent()
        {
            return requestNumSent_;
        }

        public zserio.runtime.array.DeltaContext getRequestPayloadBytes()
        {
            return requestPayloadBytes_;
        }

        public zserio.runtime.array.DeltaContext getResponseNumReceived()
        {
            return responseNumReceived_;
        }

        public zserio.runtime.array.DeltaContext getResponsePayloadBytes()
        {
            return responsePayloadBytes_;
        }

        private zserio.runtime.array.DeltaContext requestNumSent_;
        private zserio.runtime.array.DeltaContext requestPayloadBytes_;
        private zserio.runtime.array.DeltaContext responseNumReceived_;
        private zserio.runtime.array.DeltaContext responsePayloadBytes_;
    };

    public ClientStatsTopic()
    {
    }

    public ClientStatsTopic(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ClientStatsTopic(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ClientStatsTopic(
            java.math.BigInteger requestNumSent_,
            java.math.BigInteger requestPayloadBytes_,
            java.lang.Float avgResponseTimeServer_,
            java.math.BigInteger responseNumReceived_,
            java.math.BigInteger responsePayloadBytes_,
            java.lang.Float responseAvgPayloadBytes_)
    {
        setRequestNumSent(requestNumSent_);
        setRequestPayloadBytes(requestPayloadBytes_);
        setAvgResponseTimeServer(avgResponseTimeServer_);
        setResponseNumReceived(responseNumReceived_);
        setResponsePayloadBytes(responsePayloadBytes_);
        setResponseAvgPayloadBytes(responseAvgPayloadBytes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isRequestNumSentUsed())
        {
            zserioContext.getRequestNumSent().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestNumSent_));
        }
        if (isRequestPayloadBytesUsed())
        {
            zserioContext.getRequestPayloadBytes().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestPayloadBytes_));
        }
        if (isResponseNumReceivedUsed())
        {
            zserioContext.getResponseNumReceived().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responseNumReceived_));
        }
        if (isResponsePayloadBytesUsed())
        {
            zserioContext.getResponsePayloadBytes().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responsePayloadBytes_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRequestNumSentUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(requestNumSent_);
        }
        endBitPosition += 1;
        if (isRequestPayloadBytesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(requestPayloadBytes_);
        }
        endBitPosition += 1;
        if (isAvgResponseTimeServerUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition += 1;
        if (isResponseNumReceivedUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(responseNumReceived_);
        }
        endBitPosition += 1;
        if (isResponsePayloadBytesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(responsePayloadBytes_);
        }
        endBitPosition += 1;
        if (isResponseAvgPayloadBytesUsed())
        {
            endBitPosition += 32;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRequestNumSentUsed())
        {
            endBitPosition += zserioContext.getRequestNumSent().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestNumSent_));
        }
        endBitPosition += 1;
        if (isRequestPayloadBytesUsed())
        {
            endBitPosition += zserioContext.getRequestPayloadBytes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestPayloadBytes_));
        }
        endBitPosition += 1;
        if (isAvgResponseTimeServerUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition += 1;
        if (isResponseNumReceivedUsed())
        {
            endBitPosition += zserioContext.getResponseNumReceived().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responseNumReceived_));
        }
        endBitPosition += 1;
        if (isResponsePayloadBytesUsed())
        {
            endBitPosition += zserioContext.getResponsePayloadBytes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responsePayloadBytes_));
        }
        endBitPosition += 1;
        if (isResponseAvgPayloadBytesUsed())
        {
            endBitPosition += 32;
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getRequestNumSent()
    {
        return requestNumSent_;
    }

    public void setRequestNumSent(java.math.BigInteger requestNumSent_)
    {
        this.requestNumSent_ = requestNumSent_;
    }

    public boolean isRequestNumSentUsed()
    {
        return isRequestNumSentSet();
    }

    public boolean isRequestNumSentSet()
    {
        return (requestNumSent_ != null);
    }

    public void resetRequestNumSent()
    {
        this.requestNumSent_ = null;
    }

    public java.math.BigInteger getRequestPayloadBytes()
    {
        return requestPayloadBytes_;
    }

    public void setRequestPayloadBytes(java.math.BigInteger requestPayloadBytes_)
    {
        this.requestPayloadBytes_ = requestPayloadBytes_;
    }

    public boolean isRequestPayloadBytesUsed()
    {
        return isRequestPayloadBytesSet();
    }

    public boolean isRequestPayloadBytesSet()
    {
        return (requestPayloadBytes_ != null);
    }

    public void resetRequestPayloadBytes()
    {
        this.requestPayloadBytes_ = null;
    }

    public java.lang.Float getAvgResponseTimeServer()
    {
        return avgResponseTimeServer_;
    }

    public void setAvgResponseTimeServer(java.lang.Float avgResponseTimeServer_)
    {
        this.avgResponseTimeServer_ = avgResponseTimeServer_;
    }

    public boolean isAvgResponseTimeServerUsed()
    {
        return isAvgResponseTimeServerSet();
    }

    public boolean isAvgResponseTimeServerSet()
    {
        return (avgResponseTimeServer_ != null);
    }

    public void resetAvgResponseTimeServer()
    {
        this.avgResponseTimeServer_ = null;
    }

    public java.math.BigInteger getResponseNumReceived()
    {
        return responseNumReceived_;
    }

    public void setResponseNumReceived(java.math.BigInteger responseNumReceived_)
    {
        this.responseNumReceived_ = responseNumReceived_;
    }

    public boolean isResponseNumReceivedUsed()
    {
        return isResponseNumReceivedSet();
    }

    public boolean isResponseNumReceivedSet()
    {
        return (responseNumReceived_ != null);
    }

    public void resetResponseNumReceived()
    {
        this.responseNumReceived_ = null;
    }

    public java.math.BigInteger getResponsePayloadBytes()
    {
        return responsePayloadBytes_;
    }

    public void setResponsePayloadBytes(java.math.BigInteger responsePayloadBytes_)
    {
        this.responsePayloadBytes_ = responsePayloadBytes_;
    }

    public boolean isResponsePayloadBytesUsed()
    {
        return isResponsePayloadBytesSet();
    }

    public boolean isResponsePayloadBytesSet()
    {
        return (responsePayloadBytes_ != null);
    }

    public void resetResponsePayloadBytes()
    {
        this.responsePayloadBytes_ = null;
    }

    public java.lang.Float getResponseAvgPayloadBytes()
    {
        return responseAvgPayloadBytes_;
    }

    public void setResponseAvgPayloadBytes(java.lang.Float responseAvgPayloadBytes_)
    {
        this.responseAvgPayloadBytes_ = responseAvgPayloadBytes_;
    }

    public boolean isResponseAvgPayloadBytesUsed()
    {
        return isResponseAvgPayloadBytesSet();
    }

    public boolean isResponseAvgPayloadBytesSet()
    {
        return (responseAvgPayloadBytes_ != null);
    }

    public void resetResponseAvgPayloadBytes()
    {
        this.responseAvgPayloadBytes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ClientStatsTopic)
        {
            final ClientStatsTopic that = (ClientStatsTopic)obj;

            return
                    ((!isRequestNumSentUsed()) ? !that.isRequestNumSentUsed() :
                        ((requestNumSent_ == null) ? that.requestNumSent_ == null : requestNumSent_.equals(that.requestNumSent_))) &&
                    ((!isRequestPayloadBytesUsed()) ? !that.isRequestPayloadBytesUsed() :
                        ((requestPayloadBytes_ == null) ? that.requestPayloadBytes_ == null : requestPayloadBytes_.equals(that.requestPayloadBytes_))) &&
                    ((!isAvgResponseTimeServerUsed()) ? !that.isAvgResponseTimeServerUsed() :
                        ((avgResponseTimeServer_ == null) ? that.avgResponseTimeServer_ == null : avgResponseTimeServer_.equals(that.avgResponseTimeServer_))) &&
                    ((!isResponseNumReceivedUsed()) ? !that.isResponseNumReceivedUsed() :
                        ((responseNumReceived_ == null) ? that.responseNumReceived_ == null : responseNumReceived_.equals(that.responseNumReceived_))) &&
                    ((!isResponsePayloadBytesUsed()) ? !that.isResponsePayloadBytesUsed() :
                        ((responsePayloadBytes_ == null) ? that.responsePayloadBytes_ == null : responsePayloadBytes_.equals(that.responsePayloadBytes_))) &&
                    ((!isResponseAvgPayloadBytesUsed()) ? !that.isResponseAvgPayloadBytesUsed() :
                        ((responseAvgPayloadBytes_ == null) ? that.responseAvgPayloadBytes_ == null : responseAvgPayloadBytes_.equals(that.responseAvgPayloadBytes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        if (isRequestNumSentUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, requestNumSent_);
        if (isRequestPayloadBytesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, requestPayloadBytes_);
        if (isAvgResponseTimeServerUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, avgResponseTimeServer_);
        if (isResponseNumReceivedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, responseNumReceived_);
        if (isResponsePayloadBytesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, responsePayloadBytes_);
        if (isResponseAvgPayloadBytesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, responseAvgPayloadBytes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (in.readBool())
        {
            requestNumSent_ = in.readVarUInt();
        }

        if (in.readBool())
        {
            requestPayloadBytes_ = in.readVarUInt();
        }

        if (in.readBool())
        {
            avgResponseTimeServer_ = in.readFloat32();
        }

        if (in.readBool())
        {
            responseNumReceived_ = in.readVarUInt();
        }

        if (in.readBool())
        {
            responsePayloadBytes_ = in.readVarUInt();
        }

        if (in.readBool())
        {
            responseAvgPayloadBytes_ = in.readFloat32();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (in.readBool())
        {
            requestNumSent_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getRequestNumSent().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            requestPayloadBytes_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getRequestPayloadBytes().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            avgResponseTimeServer_ = in.readFloat32();
        }

        if (in.readBool())
        {
            responseNumReceived_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getResponseNumReceived().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            responsePayloadBytes_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getResponsePayloadBytes().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            responseAvgPayloadBytes_ = in.readFloat32();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRequestNumSentUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(requestNumSent_);
        }
        endBitPosition += 1;
        if (isRequestPayloadBytesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(requestPayloadBytes_);
        }
        endBitPosition += 1;
        if (isAvgResponseTimeServerUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition += 1;
        if (isResponseNumReceivedUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(responseNumReceived_);
        }
        endBitPosition += 1;
        if (isResponsePayloadBytesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(responsePayloadBytes_);
        }
        endBitPosition += 1;
        if (isResponseAvgPayloadBytesUsed())
        {
            endBitPosition += 32;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRequestNumSentUsed())
        {
            endBitPosition += zserioContext.getRequestNumSent().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestNumSent_));
        }
        endBitPosition += 1;
        if (isRequestPayloadBytesUsed())
        {
            endBitPosition += zserioContext.getRequestPayloadBytes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestPayloadBytes_));
        }
        endBitPosition += 1;
        if (isAvgResponseTimeServerUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition += 1;
        if (isResponseNumReceivedUsed())
        {
            endBitPosition += zserioContext.getResponseNumReceived().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responseNumReceived_));
        }
        endBitPosition += 1;
        if (isResponsePayloadBytesUsed())
        {
            endBitPosition += zserioContext.getResponsePayloadBytes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responsePayloadBytes_));
        }
        endBitPosition += 1;
        if (isResponseAvgPayloadBytesUsed())
        {
            endBitPosition += 32;
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isRequestNumSentUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(requestNumSent_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRequestPayloadBytesUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(requestPayloadBytes_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isAvgResponseTimeServerUsed())
        {
            out.writeBool(true);
            out.writeFloat32(avgResponseTimeServer_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponseNumReceivedUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(responseNumReceived_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponsePayloadBytesUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(responsePayloadBytes_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponseAvgPayloadBytesUsed())
        {
            out.writeBool(true);
            out.writeFloat32(responseAvgPayloadBytes_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isRequestNumSentUsed())
        {
            out.writeBool(true);
            zserioContext.getRequestNumSent().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestNumSent_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isRequestPayloadBytesUsed())
        {
            out.writeBool(true);
            zserioContext.getRequestPayloadBytes().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(requestPayloadBytes_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isAvgResponseTimeServerUsed())
        {
            out.writeBool(true);
            out.writeFloat32(avgResponseTimeServer_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponseNumReceivedUsed())
        {
            out.writeBool(true);
            zserioContext.getResponseNumReceived().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responseNumReceived_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponsePayloadBytesUsed())
        {
            out.writeBool(true);
            zserioContext.getResponsePayloadBytes().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(responsePayloadBytes_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isResponseAvgPayloadBytesUsed())
        {
            out.writeBool(true);
            out.writeFloat32(responseAvgPayloadBytes_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.math.BigInteger requestNumSent_;
    private java.math.BigInteger requestPayloadBytes_;
    private java.lang.Float avgResponseTimeServer_;
    private java.math.BigInteger responseNumReceived_;
    private java.math.BigInteger responsePayloadBytes_;
    private java.lang.Float responseAvgPayloadBytes_;
}
