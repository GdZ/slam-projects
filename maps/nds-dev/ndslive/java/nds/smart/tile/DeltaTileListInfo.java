/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.tile;

public class DeltaTileListInfo implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numTiles_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumTiles()
        {
            return numTiles_;
        }

        private zserio.runtime.array.DeltaContext numTiles_;
    };

    public DeltaTileListInfo()
    {
    }

    public DeltaTileListInfo(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DeltaTileListInfo(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DeltaTileListInfo(
            int numTiles_,
            int[] tileIds_,
            nds.smart.tile.SourceLayerInfo[] headers_)
    {
        setNumTiles(numTiles_);
        setTileIds(tileIds_);
        setHeaders(headers_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumTiles().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTiles_);
        endBitPosition += tileIds_.bitSizeOf(endBitPosition);
        endBitPosition += headers_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumTiles().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
        endBitPosition += tileIds_.bitSizeOfPacked(endBitPosition);
        endBitPosition += headers_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumTiles()
    {
        return numTiles_;
    }

    public void setNumTiles(int numTiles_)
    {
        this.numTiles_ = numTiles_;
    }

    public int[] getTileIds()
    {
        return (tileIds_ == null) ? null : tileIds_.getRawArray();
    }

    public void setTileIds(int[] tileIds_)
    {
        this.tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(tileIds_),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.smart.tile.SourceLayerInfo[] getHeaders()
    {
        return (headers_ == null) ? null : headers_.getRawArray();
    }

    public void setHeaders(nds.smart.tile.SourceLayerInfo[] headers_)
    {
        this.headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SourceLayerInfo.class, headers_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SourceLayerInfo>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DeltaTileListInfo)
        {
            final DeltaTileListInfo that = (DeltaTileListInfo)obj;

            return
                    numTiles_ == that.numTiles_ &&
                    ((tileIds_ == null) ? that.tileIds_ == null : tileIds_.equals(that.tileIds_)) &&
                    ((headers_ == null) ? that.headers_ == null : headers_.equals(that.headers_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numTiles_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, tileIds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, headers_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numTiles_ = in.readVarSize();

        tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
        tileIds_.read(in, (int)(getNumTiles()));

        headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SourceLayerInfo.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SourceLayerInfo>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
        headers_.read(in, (int)(getNumTiles()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numTiles_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumTiles().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        tileIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                zserio.runtime.array.ArrayType.NORMAL);
        tileIds_.readPacked(in, (int)(getNumTiles()));

        headers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.tile.SourceLayerInfo.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.smart.tile.SourceLayerInfo>(new ZserioElementFactory_headers()),
                zserio.runtime.array.ArrayType.NORMAL);
        headers_.readPacked(in, (int)(getNumTiles()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTiles_);
        endBitPosition = tileIds_.initializeOffsets(endBitPosition);
        endBitPosition = headers_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumTiles().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));
        endBitPosition = tileIds_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = headers_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numTiles_);

        if (tileIds_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DeltaTileListInfo.tileIds: " +
                    tileIds_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        tileIds_.write(out);

        if (headers_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DeltaTileListInfo.headers: " +
                    headers_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        headers_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumTiles().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numTiles_));

        if (tileIds_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DeltaTileListInfo.tileIds: " +
                    tileIds_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        tileIds_.writePacked(out);

        if (headers_.size() != (int)(getNumTiles()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DeltaTileListInfo.headers: " +
                    headers_.size() + " != " + (int)(getNumTiles()) + "!");
        }
        headers_.writePacked(out);
    }

    private static final class ZserioElementFactory_headers implements zserio.runtime.array.PackableElementFactory<nds.smart.tile.SourceLayerInfo>
    {
        @Override
        public nds.smart.tile.SourceLayerInfo create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.tile.SourceLayerInfo(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.smart.tile.SourceLayerInfo.ZserioPackingContext();
        }

        @Override
        public nds.smart.tile.SourceLayerInfo create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.smart.tile.SourceLayerInfo(context, in);
        }
    }

    private int numTiles_;
    private zserio.runtime.array.Array tileIds_;
    private zserio.runtime.array.Array headers_;
}
