/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.tile;

public class SourceLayerInfo implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numDataLayers_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumDataLayers()
        {
            return numDataLayers_;
        }

        private zserio.runtime.array.DeltaContext numDataLayers_;
    };

    public SourceLayerInfo()
    {
    }

    public SourceLayerInfo(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SourceLayerInfo(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SourceLayerInfo(
            short numDataLayers_,
            short[] availableLayers_,
            java.math.BigInteger[] versionId_)
    {
        setNumDataLayers(numDataLayers_);
        setAvailableLayers(availableLayers_);
        setVersionId(versionId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDataLayers().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition += availableLayers_.bitSizeOf(endBitPosition);
        endBitPosition += versionId_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition += availableLayers_.bitSizeOfPacked(endBitPosition);
        endBitPosition += versionId_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumDataLayers()
    {
        return numDataLayers_;
    }

    public void setNumDataLayers(short numDataLayers_)
    {
        this.numDataLayers_ = numDataLayers_;
    }

    public short[] getAvailableLayers()
    {
        return (availableLayers_ == null) ? null : availableLayers_.getRawArray();
    }

    public void setAvailableLayers(short[] availableLayers_)
    {
        this.availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(availableLayers_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public java.math.BigInteger[] getVersionId()
    {
        return (versionId_ == null) ? null : versionId_.getRawArray();
    }

    public void setVersionId(java.math.BigInteger[] versionId_)
    {
        this.versionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(versionId_),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SourceLayerInfo)
        {
            final SourceLayerInfo that = (SourceLayerInfo)obj;

            return
                    numDataLayers_ == that.numDataLayers_ &&
                    ((availableLayers_ == null) ? that.availableLayers_ == null : availableLayers_.equals(that.availableLayers_)) &&
                    ((versionId_ == null) ? that.versionId_ == null : versionId_.equals(that.versionId_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDataLayers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableLayers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, versionId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numDataLayers_ = in.readVarUInt16();

        availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        availableLayers_.read(in, (int)(getNumDataLayers()));

        versionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        versionId_.read(in, (int)(getNumDataLayers()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numDataLayers_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumDataLayers().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        availableLayers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        availableLayers_.readPacked(in, (int)(getNumDataLayers()));

        versionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        versionId_.readPacked(in, (int)(getNumDataLayers()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition = availableLayers_.initializeOffsets(endBitPosition);
        endBitPosition = versionId_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition = availableLayers_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = versionId_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numDataLayers_);

        if (availableLayers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SourceLayerInfo.availableLayers: " +
                    availableLayers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        availableLayers_.write(out);

        if (versionId_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SourceLayerInfo.versionId: " +
                    versionId_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        versionId_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDataLayers().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));

        if (availableLayers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SourceLayerInfo.availableLayers: " +
                    availableLayers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        availableLayers_.writePacked(out);

        if (versionId_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SourceLayerInfo.versionId: " +
                    versionId_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        versionId_.writePacked(out);
    }

    private short numDataLayers_;
    private zserio.runtime.array.Array availableLayers_;
    private zserio.runtime.array.Array versionId_;
}
