/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.smart.tile;

public class MultiDataLayerTileResponse implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new nds.core.types.TileId.ZserioPackingContext();
            numDataLayers_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.types.TileId.ZserioPackingContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getNumDataLayers()
        {
            return numDataLayers_;
        }

        private nds.core.types.TileId.ZserioPackingContext id_;
        private zserio.runtime.array.DeltaContext numDataLayers_;
    };

    public MultiDataLayerTileResponse()
    {
    }

    public MultiDataLayerTileResponse(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MultiDataLayerTileResponse(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MultiDataLayerTileResponse(
            nds.core.types.TileId id_,
            short numDataLayers_,
            nds.smart.types.DataLayer[] layers_)
    {
        setId(id_);
        setNumDataLayers(numDataLayers_);
        setLayers(layers_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.initPackingContext(zserioContext.getId());
        zserioContext.getNumDataLayers().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition += layers_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(zserioContext.getId(), endBitPosition);
        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition += layers_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.TileId getId()
    {
        return id_;
    }

    public void setId(nds.core.types.TileId id_)
    {
        this.id_ = id_;
    }

    public short getNumDataLayers()
    {
        return numDataLayers_;
    }

    public void setNumDataLayers(short numDataLayers_)
    {
        this.numDataLayers_ = numDataLayers_;
    }

    public nds.smart.types.DataLayer[] getLayers()
    {
        return (layers_ == null) ? null : layers_.getRawArray();
    }

    public void setLayers(nds.smart.types.DataLayer[] layers_)
    {
        this.layers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayer.class, layers_),
                new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.smart.types.DataLayer>(new ZserioElementFactory_layers()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MultiDataLayerTileResponse)
        {
            final MultiDataLayerTileResponse that = (MultiDataLayerTileResponse)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    numDataLayers_ == that.numDataLayers_ &&
                    ((layers_ == null) ? that.layers_ == null : layers_.equals(that.layers_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDataLayers_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, layers_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = new nds.core.types.TileId(in);

        numDataLayers_ = in.readVarUInt16();

        layers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayer.class),
                new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.smart.types.DataLayer>(new ZserioElementFactory_layers()),
                zserio.runtime.array.ArrayType.NORMAL);
        layers_.read(in, (int)(getNumDataLayers()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = new nds.core.types.TileId(zserioContext.getId(), in);

        numDataLayers_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumDataLayers().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        layers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.smart.types.DataLayer.class),
                new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.smart.types.DataLayer>(new ZserioElementFactory_layers()),
                zserio.runtime.array.ArrayType.NORMAL);
        layers_.read(in, (int)(getNumDataLayers()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numDataLayers_);
        endBitPosition = layers_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(zserioContext.getId(), endBitPosition);
        endBitPosition += zserioContext.getNumDataLayers().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));
        endBitPosition = layers_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        id_.write(out);

        out.writeVarUInt16(numDataLayers_);

        if (layers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field MultiDataLayerTileResponse.layers: " +
                    layers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        layers_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.write(zserioContext.getId(), out);

        zserioContext.getNumDataLayers().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numDataLayers_));

        if (layers_.size() != (int)(getNumDataLayers()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field MultiDataLayerTileResponse.layers: " +
                    layers_.size() + " != " + (int)(getNumDataLayers()) + "!");
        }
        layers_.write(out);
    }

    private static final class ZserioElementFactory_layers implements zserio.runtime.array.ElementFactory<nds.smart.types.DataLayer>
    {
        @Override
        public nds.smart.types.DataLayer create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.smart.types.DataLayer(in);
        }
    }

    private nds.core.types.TileId id_;
    private short numDataLayers_;
    private zserio.runtime.array.Array layers_;
}
