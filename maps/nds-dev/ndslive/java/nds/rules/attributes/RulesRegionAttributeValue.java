/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.attributes;

public class RulesRegionAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            bloodAlcoholContentLimit_ = new zserio.runtime.array.DeltaContext();
            adminSpeedLimitKmh_ = new zserio.runtime.array.DeltaContext();
            adminSpeedLimitMph_ = new zserio.runtime.array.DeltaContext();
            adminMinimumSpeedKmh_ = new zserio.runtime.array.DeltaContext();
            adminMinimumSpeedMph_ = new zserio.runtime.array.DeltaContext();
            adminAdvisorySpeedLimitKmh_ = new zserio.runtime.array.DeltaContext();
            adminAdvisorySpeedLimitMph_ = new zserio.runtime.array.DeltaContext();
            regionCurrencies_ = new nds.core.types.Currencies.ZserioPackingContext();
            regionDrivingRules_ = new nds.rules.types.RegionDrivingRules.ZserioPackingContext();
            winterSeason_ = new nds.core.conditions.DateRangeOfYear.ZserioPackingContext();
            systemOfMeasurement_ = new zserio.runtime.array.DeltaContext();
            timeZone_ = new nds.rules.types.TimeZone.ZserioPackingContext();
            officialLanguages_ = new nds.rules.types.OfficialLanguages.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getBloodAlcoholContentLimit()
        {
            return bloodAlcoholContentLimit_;
        }

        public zserio.runtime.array.DeltaContext getAdminSpeedLimitKmh()
        {
            return adminSpeedLimitKmh_;
        }

        public zserio.runtime.array.DeltaContext getAdminSpeedLimitMph()
        {
            return adminSpeedLimitMph_;
        }

        public zserio.runtime.array.DeltaContext getAdminMinimumSpeedKmh()
        {
            return adminMinimumSpeedKmh_;
        }

        public zserio.runtime.array.DeltaContext getAdminMinimumSpeedMph()
        {
            return adminMinimumSpeedMph_;
        }

        public zserio.runtime.array.DeltaContext getAdminAdvisorySpeedLimitKmh()
        {
            return adminAdvisorySpeedLimitKmh_;
        }

        public zserio.runtime.array.DeltaContext getAdminAdvisorySpeedLimitMph()
        {
            return adminAdvisorySpeedLimitMph_;
        }

        public nds.core.types.Currencies.ZserioPackingContext getRegionCurrencies()
        {
            return regionCurrencies_;
        }

        public nds.rules.types.RegionDrivingRules.ZserioPackingContext getRegionDrivingRules()
        {
            return regionDrivingRules_;
        }

        public nds.core.conditions.DateRangeOfYear.ZserioPackingContext getWinterSeason()
        {
            return winterSeason_;
        }

        public zserio.runtime.array.DeltaContext getSystemOfMeasurement()
        {
            return systemOfMeasurement_;
        }

        public nds.rules.types.TimeZone.ZserioPackingContext getTimeZone()
        {
            return timeZone_;
        }

        public nds.rules.types.OfficialLanguages.ZserioPackingContext getOfficialLanguages()
        {
            return officialLanguages_;
        }

        private zserio.runtime.array.DeltaContext bloodAlcoholContentLimit_;
        private zserio.runtime.array.DeltaContext adminSpeedLimitKmh_;
        private zserio.runtime.array.DeltaContext adminSpeedLimitMph_;
        private zserio.runtime.array.DeltaContext adminMinimumSpeedKmh_;
        private zserio.runtime.array.DeltaContext adminMinimumSpeedMph_;
        private zserio.runtime.array.DeltaContext adminAdvisorySpeedLimitKmh_;
        private zserio.runtime.array.DeltaContext adminAdvisorySpeedLimitMph_;
        private nds.core.types.Currencies.ZserioPackingContext regionCurrencies_;
        private nds.rules.types.RegionDrivingRules.ZserioPackingContext regionDrivingRules_;
        private nds.core.conditions.DateRangeOfYear.ZserioPackingContext winterSeason_;
        private zserio.runtime.array.DeltaContext systemOfMeasurement_;
        private nds.rules.types.TimeZone.ZserioPackingContext timeZone_;
        private nds.rules.types.OfficialLanguages.ZserioPackingContext officialLanguages_;
    };

    public RulesRegionAttributeValue(
            nds.rules.attributes.RulesRegionAttributeType type_)
    {
        this.type_ = type_;
    }

    public RulesRegionAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.rules.attributes.RulesRegionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RulesRegionAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.rules.attributes.RulesRegionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            return CHOICE_bloodAlcoholContentLimit;
        case WARNING_TRIANGLE_REQUIRED:
            return CHOICE_warningTriangleRequired;
        case FIRST_AID_KIT_REQUIRED:
            return CHOICE_firstAidKitRequired;
        case SAFETY_VESTS_REQUIRED:
            return CHOICE_safetyVestsRequired;
        case BREATHALIZER_REQUIRED:
            return CHOICE_breathalizerRequired;
        case TURN_ON_RED_ALLOWED:
            return CHOICE_turnOnRedAllowed;
        case DAYTIME_RUNNING_LIGHT:
            return CHOICE_daytimeRunningLight;
        case ADMIN_SPEED_LIMIT_METRIC:
            return CHOICE_adminSpeedLimitKmh;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            return CHOICE_adminSpeedLimitMph;
        case ADMIN_MINIMUM_SPEED_METRIC:
            return CHOICE_adminMinimumSpeedKmh;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            return CHOICE_adminMinimumSpeedMph;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            return CHOICE_adminAdvisorySpeedLimitKmh;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            return CHOICE_adminAdvisorySpeedLimitMph;
        case TOLL_VIGNETTE_INFO:
            return CHOICE_tollVignetteInfo;
        case REGION_CURRENCIES:
            return CHOICE_regionCurrencies;
        case REGION_DRIVING_RULES:
            return CHOICE_regionDrivingRules;
        case LIGHT_CONDITIONS:
            return CHOICE_vehicleLightConditions;
        case REQUIRES_TOLL_REGISTRATION:
            return CHOICE_requiresTollRegistration;
        case WINTER_SEASON:
            return CHOICE_winterSeason;
        case WINTER_TIRES_REQUIRED:
            return CHOICE_winterTiresRequired;
        case FIRE_EXTINGUISHER_REQUIRED:
            return CHOICE_fireExtinguisherRequired;
        case TOW_ROPE_REQUIRED:
            return CHOICE_towRopeRequired;
        case ISO_DETAILS:
            return CHOICE_IsoDetails;
        case RIGHT_HAND_TRAFFIC:
            return CHOICE_rightHandTraffic;
        case SYSTEM_OF_MEASUREMENT:
            return CHOICE_systemOfMeasurement;
        case PROHIBITED_PASSAGE:
            return CHOICE_prohibitedPassage;
        case TIME_ZONE:
            return CHOICE_timeZone;
        case OFFICIAL_LANGUAGES:
            return CHOICE_officialLanguages;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            zserioContext.getBloodAlcoholContentLimit().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBloodAlcoholContentLimit()));
            break;
        case WARNING_TRIANGLE_REQUIRED:
            break;
        case FIRST_AID_KIT_REQUIRED:
            break;
        case SAFETY_VESTS_REQUIRED:
            break;
        case BREATHALIZER_REQUIRED:
            break;
        case TURN_ON_RED_ALLOWED:
            break;
        case DAYTIME_RUNNING_LIGHT:
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            zserioContext.getAdminSpeedLimitKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitKmh()));
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdminSpeedLimitMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitMph()));
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            zserioContext.getAdminMinimumSpeedKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedKmh()));
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            zserioContext.getAdminMinimumSpeedMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedMph()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            zserioContext.getAdminAdvisorySpeedLimitKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitKmh()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdminAdvisorySpeedLimitMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitMph()));
            break;
        case TOLL_VIGNETTE_INFO:
            break;
        case REGION_CURRENCIES:
            getRegionCurrencies().initPackingContext(zserioContext.getRegionCurrencies());
            break;
        case REGION_DRIVING_RULES:
            getRegionDrivingRules().initPackingContext(zserioContext.getRegionDrivingRules());
            break;
        case LIGHT_CONDITIONS:
            break;
        case REQUIRES_TOLL_REGISTRATION:
            break;
        case WINTER_SEASON:
            getWinterSeason().initPackingContext(zserioContext.getWinterSeason());
            break;
        case WINTER_TIRES_REQUIRED:
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            break;
        case TOW_ROPE_REQUIRED:
            break;
        case ISO_DETAILS:
            break;
        case RIGHT_HAND_TRAFFIC:
            break;
        case SYSTEM_OF_MEASUREMENT:
            getSystemOfMeasurement().initPackingContext(zserioContext.getSystemOfMeasurement());
            break;
        case PROHIBITED_PASSAGE:
            break;
        case TIME_ZONE:
            getTimeZone().initPackingContext(zserioContext.getTimeZone());
            break;
        case OFFICIAL_LANGUAGES:
            getOfficialLanguages().initPackingContext(zserioContext.getOfficialLanguages());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            endBitPosition += 8;
            break;
        case WARNING_TRIANGLE_REQUIRED:
            endBitPosition += getWarningTriangleRequired().bitSizeOf(endBitPosition);
            break;
        case FIRST_AID_KIT_REQUIRED:
            endBitPosition += getFirstAidKitRequired().bitSizeOf(endBitPosition);
            break;
        case SAFETY_VESTS_REQUIRED:
            endBitPosition += getSafetyVestsRequired().bitSizeOf(endBitPosition);
            break;
        case BREATHALIZER_REQUIRED:
            endBitPosition += getBreathalizerRequired().bitSizeOf(endBitPosition);
            break;
        case TURN_ON_RED_ALLOWED:
            endBitPosition += 1;
            break;
        case DAYTIME_RUNNING_LIGHT:
            endBitPosition += 1;
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            endBitPosition += 8;
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            endBitPosition += 8;
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            endBitPosition += 8;
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            endBitPosition += 8;
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            endBitPosition += 8;
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            endBitPosition += 8;
            break;
        case TOLL_VIGNETTE_INFO:
            endBitPosition += getTollVignetteInfo().bitSizeOf(endBitPosition);
            break;
        case REGION_CURRENCIES:
            endBitPosition += getRegionCurrencies().bitSizeOf(endBitPosition);
            break;
        case REGION_DRIVING_RULES:
            endBitPosition += getRegionDrivingRules().bitSizeOf(endBitPosition);
            break;
        case LIGHT_CONDITIONS:
            endBitPosition += getVehicleLightConditions().bitSizeOf(endBitPosition);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            endBitPosition += getRequiresTollRegistration().bitSizeOf(endBitPosition);
            break;
        case WINTER_SEASON:
            endBitPosition += getWinterSeason().bitSizeOf(endBitPosition);
            break;
        case WINTER_TIRES_REQUIRED:
            endBitPosition += getWinterTiresRequired().bitSizeOf(endBitPosition);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            endBitPosition += getFireExtinguisherRequired().bitSizeOf(endBitPosition);
            break;
        case TOW_ROPE_REQUIRED:
            endBitPosition += getTowRopeRequired().bitSizeOf(endBitPosition);
            break;
        case ISO_DETAILS:
            endBitPosition += getIsoDetails().bitSizeOf(endBitPosition);
            break;
        case RIGHT_HAND_TRAFFIC:
            endBitPosition += 1;
            break;
        case SYSTEM_OF_MEASUREMENT:
            endBitPosition += getSystemOfMeasurement().bitSizeOf(endBitPosition);
            break;
        case PROHIBITED_PASSAGE:
            endBitPosition += getProhibitedPassage().bitSizeOf(endBitPosition);
            break;
        case TIME_ZONE:
            endBitPosition += getTimeZone().bitSizeOf(endBitPosition);
            break;
        case OFFICIAL_LANGUAGES:
            endBitPosition += getOfficialLanguages().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            endBitPosition += zserioContext.getBloodAlcoholContentLimit().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBloodAlcoholContentLimit()));
            break;
        case WARNING_TRIANGLE_REQUIRED:
            endBitPosition += getWarningTriangleRequired().bitSizeOf(endBitPosition);
            break;
        case FIRST_AID_KIT_REQUIRED:
            endBitPosition += getFirstAidKitRequired().bitSizeOf(endBitPosition);
            break;
        case SAFETY_VESTS_REQUIRED:
            endBitPosition += getSafetyVestsRequired().bitSizeOf(endBitPosition);
            break;
        case BREATHALIZER_REQUIRED:
            endBitPosition += getBreathalizerRequired().bitSizeOf(endBitPosition);
            break;
        case TURN_ON_RED_ALLOWED:
            endBitPosition += 1;
            break;
        case DAYTIME_RUNNING_LIGHT:
            endBitPosition += 1;
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            endBitPosition += zserioContext.getAdminSpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitKmh()));
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            endBitPosition += zserioContext.getAdminSpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitMph()));
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            endBitPosition += zserioContext.getAdminMinimumSpeedKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedKmh()));
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            endBitPosition += zserioContext.getAdminMinimumSpeedMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedMph()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            endBitPosition += zserioContext.getAdminAdvisorySpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitKmh()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            endBitPosition += zserioContext.getAdminAdvisorySpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitMph()));
            break;
        case TOLL_VIGNETTE_INFO:
            endBitPosition += getTollVignetteInfo().bitSizeOf(endBitPosition);
            break;
        case REGION_CURRENCIES:
            endBitPosition += getRegionCurrencies().bitSizeOf(zserioContext.getRegionCurrencies(), endBitPosition);
            break;
        case REGION_DRIVING_RULES:
            endBitPosition += getRegionDrivingRules().bitSizeOf(zserioContext.getRegionDrivingRules(), endBitPosition);
            break;
        case LIGHT_CONDITIONS:
            endBitPosition += getVehicleLightConditions().bitSizeOf(endBitPosition);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            endBitPosition += getRequiresTollRegistration().bitSizeOf(endBitPosition);
            break;
        case WINTER_SEASON:
            endBitPosition += getWinterSeason().bitSizeOf(zserioContext.getWinterSeason(), endBitPosition);
            break;
        case WINTER_TIRES_REQUIRED:
            endBitPosition += getWinterTiresRequired().bitSizeOf(endBitPosition);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            endBitPosition += getFireExtinguisherRequired().bitSizeOf(endBitPosition);
            break;
        case TOW_ROPE_REQUIRED:
            endBitPosition += getTowRopeRequired().bitSizeOf(endBitPosition);
            break;
        case ISO_DETAILS:
            endBitPosition += getIsoDetails().bitSizeOf(endBitPosition);
            break;
        case RIGHT_HAND_TRAFFIC:
            endBitPosition += 1;
            break;
        case SYSTEM_OF_MEASUREMENT:
            endBitPosition += getSystemOfMeasurement().bitSizeOf(zserioContext.getSystemOfMeasurement(), endBitPosition);
            break;
        case PROHIBITED_PASSAGE:
            endBitPosition += getProhibitedPassage().bitSizeOf(endBitPosition);
            break;
        case TIME_ZONE:
            endBitPosition += getTimeZone().bitSizeOf(zserioContext.getTimeZone(), endBitPosition);
            break;
        case OFFICIAL_LANGUAGES:
            endBitPosition += getOfficialLanguages().bitSizeOf(zserioContext.getOfficialLanguages(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.attributes.RulesRegionAttributeType getType()
    {
        return this.type_;
    }

    public short getBloodAlcoholContentLimit()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setBloodAlcoholContentLimit(short bloodAlcoholContentLimit_)
    {
        objectChoice = bloodAlcoholContentLimit_;
    }

    public nds.core.types.Flag getWarningTriangleRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setWarningTriangleRequired(nds.core.types.Flag warningTriangleRequired_)
    {
        objectChoice = warningTriangleRequired_;
    }

    public nds.core.types.Flag getFirstAidKitRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setFirstAidKitRequired(nds.core.types.Flag firstAidKitRequired_)
    {
        objectChoice = firstAidKitRequired_;
    }

    public nds.core.types.Flag getSafetyVestsRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setSafetyVestsRequired(nds.core.types.Flag safetyVestsRequired_)
    {
        objectChoice = safetyVestsRequired_;
    }

    public nds.core.types.Flag getBreathalizerRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setBreathalizerRequired(nds.core.types.Flag breathalizerRequired_)
    {
        objectChoice = breathalizerRequired_;
    }

    public boolean getTurnOnRedAllowed()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setTurnOnRedAllowed(boolean turnOnRedAllowed_)
    {
        objectChoice = turnOnRedAllowed_;
    }

    public boolean getDaytimeRunningLight()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setDaytimeRunningLight(boolean daytimeRunningLight_)
    {
        objectChoice = daytimeRunningLight_;
    }

    public short getAdminSpeedLimitKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminSpeedLimitKmh(short adminSpeedLimitKmh_)
    {
        objectChoice = adminSpeedLimitKmh_;
    }

    public short getAdminSpeedLimitMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminSpeedLimitMph(short adminSpeedLimitMph_)
    {
        objectChoice = adminSpeedLimitMph_;
    }

    public short getAdminMinimumSpeedKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminMinimumSpeedKmh(short adminMinimumSpeedKmh_)
    {
        objectChoice = adminMinimumSpeedKmh_;
    }

    public short getAdminMinimumSpeedMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminMinimumSpeedMph(short adminMinimumSpeedMph_)
    {
        objectChoice = adminMinimumSpeedMph_;
    }

    public short getAdminAdvisorySpeedLimitKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminAdvisorySpeedLimitKmh(short adminAdvisorySpeedLimitKmh_)
    {
        objectChoice = adminAdvisorySpeedLimitKmh_;
    }

    public short getAdminAdvisorySpeedLimitMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdminAdvisorySpeedLimitMph(short adminAdvisorySpeedLimitMph_)
    {
        objectChoice = adminAdvisorySpeedLimitMph_;
    }

    public nds.core.types.Flag getTollVignetteInfo()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setTollVignetteInfo(nds.core.types.Flag tollVignetteInfo_)
    {
        objectChoice = tollVignetteInfo_;
    }

    public nds.core.types.Currencies getRegionCurrencies()
    {
        return (nds.core.types.Currencies)objectChoice;
    }

    public void setRegionCurrencies(nds.core.types.Currencies regionCurrencies_)
    {
        objectChoice = regionCurrencies_;
    }

    public nds.rules.types.RegionDrivingRules getRegionDrivingRules()
    {
        return (nds.rules.types.RegionDrivingRules)objectChoice;
    }

    public void setRegionDrivingRules(nds.rules.types.RegionDrivingRules regionDrivingRules_)
    {
        objectChoice = regionDrivingRules_;
    }

    public nds.rules.types.VehicleLightConditions getVehicleLightConditions()
    {
        return (nds.rules.types.VehicleLightConditions)objectChoice;
    }

    public void setVehicleLightConditions(nds.rules.types.VehicleLightConditions vehicleLightConditions_)
    {
        objectChoice = vehicleLightConditions_;
    }

    public nds.core.types.Flag getRequiresTollRegistration()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setRequiresTollRegistration(nds.core.types.Flag requiresTollRegistration_)
    {
        objectChoice = requiresTollRegistration_;
    }

    public nds.core.conditions.DateRangeOfYear getWinterSeason()
    {
        return (nds.core.conditions.DateRangeOfYear)objectChoice;
    }

    public void setWinterSeason(nds.core.conditions.DateRangeOfYear winterSeason_)
    {
        objectChoice = winterSeason_;
    }

    public nds.core.types.Flag getWinterTiresRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setWinterTiresRequired(nds.core.types.Flag winterTiresRequired_)
    {
        objectChoice = winterTiresRequired_;
    }

    public nds.core.types.Flag getFireExtinguisherRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setFireExtinguisherRequired(nds.core.types.Flag fireExtinguisherRequired_)
    {
        objectChoice = fireExtinguisherRequired_;
    }

    public nds.core.types.Flag getTowRopeRequired()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setTowRopeRequired(nds.core.types.Flag towRopeRequired_)
    {
        objectChoice = towRopeRequired_;
    }

    public nds.core.types.Iso3166Codes getIsoDetails()
    {
        return (nds.core.types.Iso3166Codes)objectChoice;
    }

    public void setIsoDetails(nds.core.types.Iso3166Codes IsoDetails_)
    {
        objectChoice = IsoDetails_;
    }

    public boolean getRightHandTraffic()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setRightHandTraffic(boolean rightHandTraffic_)
    {
        objectChoice = rightHandTraffic_;
    }

    public nds.rules.types.SystemOfMeasurement getSystemOfMeasurement()
    {
        return (nds.rules.types.SystemOfMeasurement)objectChoice;
    }

    public void setSystemOfMeasurement(nds.rules.types.SystemOfMeasurement systemOfMeasurement_)
    {
        objectChoice = systemOfMeasurement_;
    }

    public nds.core.types.Flag getProhibitedPassage()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setProhibitedPassage(nds.core.types.Flag prohibitedPassage_)
    {
        objectChoice = prohibitedPassage_;
    }

    public nds.rules.types.TimeZone getTimeZone()
    {
        return (nds.rules.types.TimeZone)objectChoice;
    }

    public void setTimeZone(nds.rules.types.TimeZone timeZone_)
    {
        objectChoice = timeZone_;
    }

    public nds.rules.types.OfficialLanguages getOfficialLanguages()
    {
        return (nds.rules.types.OfficialLanguages)objectChoice;
    }

    public void setOfficialLanguages(nds.rules.types.OfficialLanguages officialLanguages_)
    {
        objectChoice = officialLanguages_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RulesRegionAttributeValue)
        {
            final RulesRegionAttributeValue that = (RulesRegionAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case BLOOD_ALCOHOL_CONTENT_LIMIT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case WARNING_TRIANGLE_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case FIRST_AID_KIT_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case SAFETY_VESTS_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case BREATHALIZER_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case TURN_ON_RED_ALLOWED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case DAYTIME_RUNNING_LIGHT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case ADMIN_SPEED_LIMIT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADMIN_SPEED_LIMIT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADMIN_MINIMUM_SPEED_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADMIN_MINIMUM_SPEED_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case TOLL_VIGNETTE_INFO:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case REGION_CURRENCIES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Currencies)objectChoice);
                break;
            case REGION_DRIVING_RULES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.RegionDrivingRules)objectChoice);
                break;
            case LIGHT_CONDITIONS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.VehicleLightConditions)objectChoice);
                break;
            case REQUIRES_TOLL_REGISTRATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case WINTER_SEASON:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.conditions.DateRangeOfYear)objectChoice);
                break;
            case WINTER_TIRES_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case FIRE_EXTINGUISHER_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case TOW_ROPE_REQUIRED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ISO_DETAILS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Iso3166Codes)objectChoice);
                break;
            case RIGHT_HAND_TRAFFIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case SYSTEM_OF_MEASUREMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.SystemOfMeasurement)objectChoice);
                break;
            case PROHIBITED_PASSAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case TIME_ZONE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TimeZone)objectChoice);
                break;
            case OFFICIAL_LANGUAGES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.OfficialLanguages)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            objectChoice = in.readUnsignedByte();
            break;
        case WARNING_TRIANGLE_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FIRST_AID_KIT_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SAFETY_VESTS_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case BREATHALIZER_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TURN_ON_RED_ALLOWED:
            objectChoice = in.readBool();
            break;
        case DAYTIME_RUNNING_LIGHT:
            objectChoice = in.readBool();
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case TOLL_VIGNETTE_INFO:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case REGION_CURRENCIES:
            objectChoice = new nds.core.types.Currencies(in);
            break;
        case REGION_DRIVING_RULES:
            objectChoice = new nds.rules.types.RegionDrivingRules(in);
            break;
        case LIGHT_CONDITIONS:
            objectChoice = new nds.rules.types.VehicleLightConditions(in);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case WINTER_SEASON:
            objectChoice = new nds.core.conditions.DateRangeOfYear(in);
            break;
        case WINTER_TIRES_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TOW_ROPE_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ISO_DETAILS:
            objectChoice = new nds.core.types.Iso3166Codes(in);
            break;
        case RIGHT_HAND_TRAFFIC:
            objectChoice = in.readBool();
            break;
        case SYSTEM_OF_MEASUREMENT:
            objectChoice = nds.rules.types.SystemOfMeasurement.readEnum(in);
            break;
        case PROHIBITED_PASSAGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TIME_ZONE:
            objectChoice = new nds.rules.types.TimeZone(in);
            break;
        case OFFICIAL_LANGUAGES:
            objectChoice = new nds.rules.types.OfficialLanguages(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getBloodAlcoholContentLimit().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case WARNING_TRIANGLE_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FIRST_AID_KIT_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SAFETY_VESTS_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case BREATHALIZER_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TURN_ON_RED_ALLOWED:
            objectChoice = in.readBool();
            break;
        case DAYTIME_RUNNING_LIGHT:
            objectChoice = in.readBool();
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminSpeedLimitKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminSpeedLimitMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminMinimumSpeedKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminMinimumSpeedMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminAdvisorySpeedLimitKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdminAdvisorySpeedLimitMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case TOLL_VIGNETTE_INFO:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case REGION_CURRENCIES:
            objectChoice = new nds.core.types.Currencies(zserioContext.getRegionCurrencies(), in);
            break;
        case REGION_DRIVING_RULES:
            objectChoice = new nds.rules.types.RegionDrivingRules(zserioContext.getRegionDrivingRules(), in);
            break;
        case LIGHT_CONDITIONS:
            objectChoice = new nds.rules.types.VehicleLightConditions(in);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case WINTER_SEASON:
            objectChoice = new nds.core.conditions.DateRangeOfYear(zserioContext.getWinterSeason(), in);
            break;
        case WINTER_TIRES_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TOW_ROPE_REQUIRED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ISO_DETAILS:
            objectChoice = new nds.core.types.Iso3166Codes(in);
            break;
        case RIGHT_HAND_TRAFFIC:
            objectChoice = in.readBool();
            break;
        case SYSTEM_OF_MEASUREMENT:
            objectChoice = nds.rules.types.SystemOfMeasurement.readEnum(zserioContext.getSystemOfMeasurement(), in);
            break;
        case PROHIBITED_PASSAGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TIME_ZONE:
            objectChoice = new nds.rules.types.TimeZone(zserioContext.getTimeZone(), in);
            break;
        case OFFICIAL_LANGUAGES:
            objectChoice = new nds.rules.types.OfficialLanguages(zserioContext.getOfficialLanguages(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            {
                endBitPosition += 8;
            }
            break;
        case WARNING_TRIANGLE_REQUIRED:
            {
                endBitPosition = getWarningTriangleRequired().initializeOffsets(endBitPosition);
            }
            break;
        case FIRST_AID_KIT_REQUIRED:
            {
                endBitPosition = getFirstAidKitRequired().initializeOffsets(endBitPosition);
            }
            break;
        case SAFETY_VESTS_REQUIRED:
            {
                endBitPosition = getSafetyVestsRequired().initializeOffsets(endBitPosition);
            }
            break;
        case BREATHALIZER_REQUIRED:
            {
                endBitPosition = getBreathalizerRequired().initializeOffsets(endBitPosition);
            }
            break;
        case TURN_ON_RED_ALLOWED:
            {
                endBitPosition += 1;
            }
            break;
        case DAYTIME_RUNNING_LIGHT:
            {
                endBitPosition += 1;
            }
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case TOLL_VIGNETTE_INFO:
            {
                endBitPosition = getTollVignetteInfo().initializeOffsets(endBitPosition);
            }
            break;
        case REGION_CURRENCIES:
            {
                endBitPosition = getRegionCurrencies().initializeOffsets(endBitPosition);
            }
            break;
        case REGION_DRIVING_RULES:
            {
                endBitPosition = getRegionDrivingRules().initializeOffsets(endBitPosition);
            }
            break;
        case LIGHT_CONDITIONS:
            {
                endBitPosition = getVehicleLightConditions().initializeOffsets(endBitPosition);
            }
            break;
        case REQUIRES_TOLL_REGISTRATION:
            {
                endBitPosition = getRequiresTollRegistration().initializeOffsets(endBitPosition);
            }
            break;
        case WINTER_SEASON:
            {
                endBitPosition = getWinterSeason().initializeOffsets(endBitPosition);
            }
            break;
        case WINTER_TIRES_REQUIRED:
            {
                endBitPosition = getWinterTiresRequired().initializeOffsets(endBitPosition);
            }
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            {
                endBitPosition = getFireExtinguisherRequired().initializeOffsets(endBitPosition);
            }
            break;
        case TOW_ROPE_REQUIRED:
            {
                endBitPosition = getTowRopeRequired().initializeOffsets(endBitPosition);
            }
            break;
        case ISO_DETAILS:
            {
                endBitPosition = getIsoDetails().initializeOffsets(endBitPosition);
            }
            break;
        case RIGHT_HAND_TRAFFIC:
            {
                endBitPosition += 1;
            }
            break;
        case SYSTEM_OF_MEASUREMENT:
            {
                endBitPosition += getSystemOfMeasurement().bitSizeOf(endBitPosition);
            }
            break;
        case PROHIBITED_PASSAGE:
            {
                endBitPosition = getProhibitedPassage().initializeOffsets(endBitPosition);
            }
            break;
        case TIME_ZONE:
            {
                endBitPosition = getTimeZone().initializeOffsets(endBitPosition);
            }
            break;
        case OFFICIAL_LANGUAGES:
            {
                endBitPosition = getOfficialLanguages().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            {
                endBitPosition += zserioContext.getBloodAlcoholContentLimit().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getBloodAlcoholContentLimit()));
            }
            break;
        case WARNING_TRIANGLE_REQUIRED:
            {
                endBitPosition = getWarningTriangleRequired().initializeOffsets(endBitPosition);
            }
            break;
        case FIRST_AID_KIT_REQUIRED:
            {
                endBitPosition = getFirstAidKitRequired().initializeOffsets(endBitPosition);
            }
            break;
        case SAFETY_VESTS_REQUIRED:
            {
                endBitPosition = getSafetyVestsRequired().initializeOffsets(endBitPosition);
            }
            break;
        case BREATHALIZER_REQUIRED:
            {
                endBitPosition = getBreathalizerRequired().initializeOffsets(endBitPosition);
            }
            break;
        case TURN_ON_RED_ALLOWED:
            {
                endBitPosition += 1;
            }
            break;
        case DAYTIME_RUNNING_LIGHT:
            {
                endBitPosition += 1;
            }
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            {
                endBitPosition += zserioContext.getAdminSpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitKmh()));
            }
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += zserioContext.getAdminSpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitMph()));
            }
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            {
                endBitPosition += zserioContext.getAdminMinimumSpeedKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedKmh()));
            }
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            {
                endBitPosition += zserioContext.getAdminMinimumSpeedMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedMph()));
            }
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            {
                endBitPosition += zserioContext.getAdminAdvisorySpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitKmh()));
            }
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += zserioContext.getAdminAdvisorySpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitMph()));
            }
            break;
        case TOLL_VIGNETTE_INFO:
            {
                endBitPosition = getTollVignetteInfo().initializeOffsets(endBitPosition);
            }
            break;
        case REGION_CURRENCIES:
            {
                endBitPosition = getRegionCurrencies().initializeOffsets(zserioContext.getRegionCurrencies(), endBitPosition);
            }
            break;
        case REGION_DRIVING_RULES:
            {
                endBitPosition = getRegionDrivingRules().initializeOffsets(zserioContext.getRegionDrivingRules(), endBitPosition);
            }
            break;
        case LIGHT_CONDITIONS:
            {
                endBitPosition = getVehicleLightConditions().initializeOffsets(endBitPosition);
            }
            break;
        case REQUIRES_TOLL_REGISTRATION:
            {
                endBitPosition = getRequiresTollRegistration().initializeOffsets(endBitPosition);
            }
            break;
        case WINTER_SEASON:
            {
                endBitPosition = getWinterSeason().initializeOffsets(zserioContext.getWinterSeason(), endBitPosition);
            }
            break;
        case WINTER_TIRES_REQUIRED:
            {
                endBitPosition = getWinterTiresRequired().initializeOffsets(endBitPosition);
            }
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            {
                endBitPosition = getFireExtinguisherRequired().initializeOffsets(endBitPosition);
            }
            break;
        case TOW_ROPE_REQUIRED:
            {
                endBitPosition = getTowRopeRequired().initializeOffsets(endBitPosition);
            }
            break;
        case ISO_DETAILS:
            {
                endBitPosition = getIsoDetails().initializeOffsets(endBitPosition);
            }
            break;
        case RIGHT_HAND_TRAFFIC:
            {
                endBitPosition += 1;
            }
            break;
        case SYSTEM_OF_MEASUREMENT:
            {
                endBitPosition = getSystemOfMeasurement().initializeOffsets(zserioContext.getSystemOfMeasurement(), endBitPosition);
            }
            break;
        case PROHIBITED_PASSAGE:
            {
                endBitPosition = getProhibitedPassage().initializeOffsets(endBitPosition);
            }
            break;
        case TIME_ZONE:
            {
                endBitPosition = getTimeZone().initializeOffsets(zserioContext.getTimeZone(), endBitPosition);
            }
            break;
        case OFFICIAL_LANGUAGES:
            {
                endBitPosition = getOfficialLanguages().initializeOffsets(zserioContext.getOfficialLanguages(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            out.writeUnsignedByte(getBloodAlcoholContentLimit());
            break;
        case WARNING_TRIANGLE_REQUIRED:
            getWarningTriangleRequired().write(out);
            break;
        case FIRST_AID_KIT_REQUIRED:
            getFirstAidKitRequired().write(out);
            break;
        case SAFETY_VESTS_REQUIRED:
            getSafetyVestsRequired().write(out);
            break;
        case BREATHALIZER_REQUIRED:
            getBreathalizerRequired().write(out);
            break;
        case TURN_ON_RED_ALLOWED:
            out.writeBool(getTurnOnRedAllowed());
            break;
        case DAYTIME_RUNNING_LIGHT:
            out.writeBool(getDaytimeRunningLight());
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            out.writeUnsignedByte(getAdminSpeedLimitKmh());
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            out.writeUnsignedByte(getAdminSpeedLimitMph());
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            out.writeUnsignedByte(getAdminMinimumSpeedKmh());
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            out.writeUnsignedByte(getAdminMinimumSpeedMph());
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            out.writeUnsignedByte(getAdminAdvisorySpeedLimitKmh());
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            out.writeUnsignedByte(getAdminAdvisorySpeedLimitMph());
            break;
        case TOLL_VIGNETTE_INFO:
            getTollVignetteInfo().write(out);
            break;
        case REGION_CURRENCIES:
            getRegionCurrencies().write(out);
            break;
        case REGION_DRIVING_RULES:
            getRegionDrivingRules().write(out);
            break;
        case LIGHT_CONDITIONS:
            getVehicleLightConditions().write(out);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            getRequiresTollRegistration().write(out);
            break;
        case WINTER_SEASON:
            getWinterSeason().write(out);
            break;
        case WINTER_TIRES_REQUIRED:
            getWinterTiresRequired().write(out);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            getFireExtinguisherRequired().write(out);
            break;
        case TOW_ROPE_REQUIRED:
            getTowRopeRequired().write(out);
            break;
        case ISO_DETAILS:
            getIsoDetails().write(out);
            break;
        case RIGHT_HAND_TRAFFIC:
            out.writeBool(getRightHandTraffic());
            break;
        case SYSTEM_OF_MEASUREMENT:
            getSystemOfMeasurement().write(out);
            break;
        case PROHIBITED_PASSAGE:
            getProhibitedPassage().write(out);
            break;
        case TIME_ZONE:
            getTimeZone().write(out);
            break;
        case OFFICIAL_LANGUAGES:
            getOfficialLanguages().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case BLOOD_ALCOHOL_CONTENT_LIMIT:
            zserioContext.getBloodAlcoholContentLimit().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBloodAlcoholContentLimit()));
            break;
        case WARNING_TRIANGLE_REQUIRED:
            getWarningTriangleRequired().write(out);
            break;
        case FIRST_AID_KIT_REQUIRED:
            getFirstAidKitRequired().write(out);
            break;
        case SAFETY_VESTS_REQUIRED:
            getSafetyVestsRequired().write(out);
            break;
        case BREATHALIZER_REQUIRED:
            getBreathalizerRequired().write(out);
            break;
        case TURN_ON_RED_ALLOWED:
            out.writeBool(getTurnOnRedAllowed());
            break;
        case DAYTIME_RUNNING_LIGHT:
            out.writeBool(getDaytimeRunningLight());
            break;
        case ADMIN_SPEED_LIMIT_METRIC:
            zserioContext.getAdminSpeedLimitKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitKmh()));
            break;
        case ADMIN_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdminSpeedLimitMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminSpeedLimitMph()));
            break;
        case ADMIN_MINIMUM_SPEED_METRIC:
            zserioContext.getAdminMinimumSpeedKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedKmh()));
            break;
        case ADMIN_MINIMUM_SPEED_IMPERIAL:
            zserioContext.getAdminMinimumSpeedMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminMinimumSpeedMph()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_METRIC:
            zserioContext.getAdminAdvisorySpeedLimitKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitKmh()));
            break;
        case ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdminAdvisorySpeedLimitMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdminAdvisorySpeedLimitMph()));
            break;
        case TOLL_VIGNETTE_INFO:
            getTollVignetteInfo().write(out);
            break;
        case REGION_CURRENCIES:
            getRegionCurrencies().write(zserioContext.getRegionCurrencies(), out);
            break;
        case REGION_DRIVING_RULES:
            getRegionDrivingRules().write(zserioContext.getRegionDrivingRules(), out);
            break;
        case LIGHT_CONDITIONS:
            getVehicleLightConditions().write(out);
            break;
        case REQUIRES_TOLL_REGISTRATION:
            getRequiresTollRegistration().write(out);
            break;
        case WINTER_SEASON:
            getWinterSeason().write(zserioContext.getWinterSeason(), out);
            break;
        case WINTER_TIRES_REQUIRED:
            getWinterTiresRequired().write(out);
            break;
        case FIRE_EXTINGUISHER_REQUIRED:
            getFireExtinguisherRequired().write(out);
            break;
        case TOW_ROPE_REQUIRED:
            getTowRopeRequired().write(out);
            break;
        case ISO_DETAILS:
            getIsoDetails().write(out);
            break;
        case RIGHT_HAND_TRAFFIC:
            out.writeBool(getRightHandTraffic());
            break;
        case SYSTEM_OF_MEASUREMENT:
            getSystemOfMeasurement().write(zserioContext.getSystemOfMeasurement(), out);
            break;
        case PROHIBITED_PASSAGE:
            getProhibitedPassage().write(out);
            break;
        case TIME_ZONE:
            getTimeZone().write(zserioContext.getTimeZone(), out);
            break;
        case OFFICIAL_LANGUAGES:
            getOfficialLanguages().write(zserioContext.getOfficialLanguages(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesRegionAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_bloodAlcoholContentLimit = 0;
    public static final int CHOICE_warningTriangleRequired = 1;
    public static final int CHOICE_firstAidKitRequired = 2;
    public static final int CHOICE_safetyVestsRequired = 3;
    public static final int CHOICE_breathalizerRequired = 4;
    public static final int CHOICE_turnOnRedAllowed = 5;
    public static final int CHOICE_daytimeRunningLight = 6;
    public static final int CHOICE_adminSpeedLimitKmh = 7;
    public static final int CHOICE_adminSpeedLimitMph = 8;
    public static final int CHOICE_adminMinimumSpeedKmh = 9;
    public static final int CHOICE_adminMinimumSpeedMph = 10;
    public static final int CHOICE_adminAdvisorySpeedLimitKmh = 11;
    public static final int CHOICE_adminAdvisorySpeedLimitMph = 12;
    public static final int CHOICE_tollVignetteInfo = 13;
    public static final int CHOICE_regionCurrencies = 14;
    public static final int CHOICE_regionDrivingRules = 15;
    public static final int CHOICE_vehicleLightConditions = 16;
    public static final int CHOICE_requiresTollRegistration = 17;
    public static final int CHOICE_winterSeason = 18;
    public static final int CHOICE_winterTiresRequired = 19;
    public static final int CHOICE_fireExtinguisherRequired = 20;
    public static final int CHOICE_towRopeRequired = 21;
    public static final int CHOICE_IsoDetails = 22;
    public static final int CHOICE_rightHandTraffic = 23;
    public static final int CHOICE_systemOfMeasurement = 24;
    public static final int CHOICE_prohibitedPassage = 25;
    public static final int CHOICE_timeZone = 26;
    public static final int CHOICE_officialLanguages = 27;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.rules.attributes.RulesRegionAttributeType type_;
    private java.lang.Object objectChoice;
}
