/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.attributes;

public class RulesLaneRangeAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            speedLimitKmh_ = new zserio.runtime.array.DeltaContext();
            speedLimitMph_ = new zserio.runtime.array.DeltaContext();
            minimumSpeedKmh_ = new zserio.runtime.array.DeltaContext();
            minimumSpeedMph_ = new zserio.runtime.array.DeltaContext();
            advisorySpeedLimitKmh_ = new zserio.runtime.array.DeltaContext();
            advisorySpeedLimitMph_ = new zserio.runtime.array.DeltaContext();
            trafficEnforcementZone_ = new nds.rules.types.TrafficEnforcementZone.ZserioPackingContext();
            trafficZone_ = new zserio.runtime.array.DeltaContext();
            automatedDrivingClearance_ = new zserio.runtime.array.DeltaContext();
            laneRightOfWayRegulation_ = new nds.rules.types.LaneRightOfWayRegulation.ZserioPackingContext();
            laneTrafficPriority_ = new nds.rules.types.LaneTrafficPriority.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getSpeedLimitKmh()
        {
            return speedLimitKmh_;
        }

        public zserio.runtime.array.DeltaContext getSpeedLimitMph()
        {
            return speedLimitMph_;
        }

        public zserio.runtime.array.DeltaContext getMinimumSpeedKmh()
        {
            return minimumSpeedKmh_;
        }

        public zserio.runtime.array.DeltaContext getMinimumSpeedMph()
        {
            return minimumSpeedMph_;
        }

        public zserio.runtime.array.DeltaContext getAdvisorySpeedLimitKmh()
        {
            return advisorySpeedLimitKmh_;
        }

        public zserio.runtime.array.DeltaContext getAdvisorySpeedLimitMph()
        {
            return advisorySpeedLimitMph_;
        }

        public nds.rules.types.TrafficEnforcementZone.ZserioPackingContext getTrafficEnforcementZone()
        {
            return trafficEnforcementZone_;
        }

        public zserio.runtime.array.DeltaContext getTrafficZone()
        {
            return trafficZone_;
        }

        public zserio.runtime.array.DeltaContext getAutomatedDrivingClearance()
        {
            return automatedDrivingClearance_;
        }

        public nds.rules.types.LaneRightOfWayRegulation.ZserioPackingContext getLaneRightOfWayRegulation()
        {
            return laneRightOfWayRegulation_;
        }

        public nds.rules.types.LaneTrafficPriority.ZserioPackingContext getLaneTrafficPriority()
        {
            return laneTrafficPriority_;
        }

        private zserio.runtime.array.DeltaContext speedLimitKmh_;
        private zserio.runtime.array.DeltaContext speedLimitMph_;
        private zserio.runtime.array.DeltaContext minimumSpeedKmh_;
        private zserio.runtime.array.DeltaContext minimumSpeedMph_;
        private zserio.runtime.array.DeltaContext advisorySpeedLimitKmh_;
        private zserio.runtime.array.DeltaContext advisorySpeedLimitMph_;
        private nds.rules.types.TrafficEnforcementZone.ZserioPackingContext trafficEnforcementZone_;
        private zserio.runtime.array.DeltaContext trafficZone_;
        private zserio.runtime.array.DeltaContext automatedDrivingClearance_;
        private nds.rules.types.LaneRightOfWayRegulation.ZserioPackingContext laneRightOfWayRegulation_;
        private nds.rules.types.LaneTrafficPriority.ZserioPackingContext laneTrafficPriority_;
    };

    public RulesLaneRangeAttributeValue(
            nds.rules.attributes.RulesLaneRangeAttributeType type_)
    {
        this.type_ = type_;
    }

    public RulesLaneRangeAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.rules.attributes.RulesLaneRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RulesLaneRangeAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.rules.attributes.RulesLaneRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            return CHOICE_prohibitedPassage;
        case OVERTAKING_PROHIBITION:
            return CHOICE_overtakingProhibition;
        case SPEED_LIMIT_METRIC:
            return CHOICE_speedLimitKmh;
        case SPEED_LIMIT_IMPERIAL:
            return CHOICE_speedLimitMph;
        case MINIMUM_SPEED_METRIC:
            return CHOICE_minimumSpeedKmh;
        case MINIMUM_SPEED_IMPERIAL:
            return CHOICE_minimumSpeedMph;
        case ADVISORY_SPEED_LIMIT_METRIC:
            return CHOICE_advisorySpeedLimitKmh;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            return CHOICE_advisorySpeedLimitMph;
        case TRAFFIC_ENFORCEMENT_ZONE:
            return CHOICE_trafficEnforcementZone;
        case TRAFFIC_ZONE:
            return CHOICE_trafficZone;
        case SEASONAL_CLOSED:
            return CHOICE_seasonalClosed;
        case DONT_STOP_ZONE:
            return CHOICE_dontStopZone;
        case PROHIBITED_PARKING:
            return CHOICE_prohibitedParking;
        case PROHIBITED_STOPPING:
            return CHOICE_prohibitedStopping;
        case AUTOMATED_DRIVING_CLEARANCE:
            return CHOICE_automatedDrivingClearance;
        case ROADWORKS:
            return CHOICE_roadworks;
        case LANE_RIGHT_OF_WAY_REGULATION:
            return CHOICE_laneRightOfWayRegulation;
        case LANE_TRAFFIC_PRIORITY:
            return CHOICE_laneTrafficPriority;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            break;
        case OVERTAKING_PROHIBITION:
            break;
        case SPEED_LIMIT_METRIC:
            zserioContext.getSpeedLimitKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitKmh()));
            break;
        case SPEED_LIMIT_IMPERIAL:
            zserioContext.getSpeedLimitMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitMph()));
            break;
        case MINIMUM_SPEED_METRIC:
            zserioContext.getMinimumSpeedKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedKmh()));
            break;
        case MINIMUM_SPEED_IMPERIAL:
            zserioContext.getMinimumSpeedMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedMph()));
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            zserioContext.getAdvisorySpeedLimitKmh().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitKmh()));
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdvisorySpeedLimitMph().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitMph()));
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZone().initPackingContext(zserioContext.getTrafficEnforcementZone());
            break;
        case TRAFFIC_ZONE:
            getTrafficZone().initPackingContext(zserioContext.getTrafficZone());
            break;
        case SEASONAL_CLOSED:
            break;
        case DONT_STOP_ZONE:
            break;
        case PROHIBITED_PARKING:
            break;
        case PROHIBITED_STOPPING:
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            getAutomatedDrivingClearance().initPackingContext(zserioContext.getAutomatedDrivingClearance());
            break;
        case ROADWORKS:
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            getLaneRightOfWayRegulation().initPackingContext(zserioContext.getLaneRightOfWayRegulation());
            break;
        case LANE_TRAFFIC_PRIORITY:
            getLaneTrafficPriority().initPackingContext(zserioContext.getLaneTrafficPriority());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            endBitPosition += getProhibitedPassage().bitSizeOf(endBitPosition);
            break;
        case OVERTAKING_PROHIBITION:
            endBitPosition += getOvertakingProhibition().bitSizeOf(endBitPosition);
            break;
        case SPEED_LIMIT_METRIC:
            endBitPosition += 8;
            break;
        case SPEED_LIMIT_IMPERIAL:
            endBitPosition += 8;
            break;
        case MINIMUM_SPEED_METRIC:
            endBitPosition += 8;
            break;
        case MINIMUM_SPEED_IMPERIAL:
            endBitPosition += 8;
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            endBitPosition += 8;
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            endBitPosition += 8;
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            endBitPosition += getTrafficEnforcementZone().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_ZONE:
            endBitPosition += getTrafficZone().bitSizeOf(endBitPosition);
            break;
        case SEASONAL_CLOSED:
            endBitPosition += getSeasonalClosed().bitSizeOf(endBitPosition);
            break;
        case DONT_STOP_ZONE:
            endBitPosition += getDontStopZone().bitSizeOf(endBitPosition);
            break;
        case PROHIBITED_PARKING:
            endBitPosition += getProhibitedParking().bitSizeOf(endBitPosition);
            break;
        case PROHIBITED_STOPPING:
            endBitPosition += getProhibitedStopping().bitSizeOf(endBitPosition);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            endBitPosition += getAutomatedDrivingClearance().bitSizeOf(endBitPosition);
            break;
        case ROADWORKS:
            endBitPosition += getRoadworks().bitSizeOf(endBitPosition);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            endBitPosition += getLaneRightOfWayRegulation().bitSizeOf(endBitPosition);
            break;
        case LANE_TRAFFIC_PRIORITY:
            endBitPosition += getLaneTrafficPriority().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            endBitPosition += getProhibitedPassage().bitSizeOf(endBitPosition);
            break;
        case OVERTAKING_PROHIBITION:
            endBitPosition += getOvertakingProhibition().bitSizeOf(endBitPosition);
            break;
        case SPEED_LIMIT_METRIC:
            endBitPosition += zserioContext.getSpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitKmh()));
            break;
        case SPEED_LIMIT_IMPERIAL:
            endBitPosition += zserioContext.getSpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitMph()));
            break;
        case MINIMUM_SPEED_METRIC:
            endBitPosition += zserioContext.getMinimumSpeedKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedKmh()));
            break;
        case MINIMUM_SPEED_IMPERIAL:
            endBitPosition += zserioContext.getMinimumSpeedMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedMph()));
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            endBitPosition += zserioContext.getAdvisorySpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitKmh()));
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            endBitPosition += zserioContext.getAdvisorySpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitMph()));
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            endBitPosition += getTrafficEnforcementZone().bitSizeOf(zserioContext.getTrafficEnforcementZone(), endBitPosition);
            break;
        case TRAFFIC_ZONE:
            endBitPosition += getTrafficZone().bitSizeOf(zserioContext.getTrafficZone(), endBitPosition);
            break;
        case SEASONAL_CLOSED:
            endBitPosition += getSeasonalClosed().bitSizeOf(endBitPosition);
            break;
        case DONT_STOP_ZONE:
            endBitPosition += getDontStopZone().bitSizeOf(endBitPosition);
            break;
        case PROHIBITED_PARKING:
            endBitPosition += getProhibitedParking().bitSizeOf(endBitPosition);
            break;
        case PROHIBITED_STOPPING:
            endBitPosition += getProhibitedStopping().bitSizeOf(endBitPosition);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            endBitPosition += getAutomatedDrivingClearance().bitSizeOf(zserioContext.getAutomatedDrivingClearance(), endBitPosition);
            break;
        case ROADWORKS:
            endBitPosition += getRoadworks().bitSizeOf(endBitPosition);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            endBitPosition += getLaneRightOfWayRegulation().bitSizeOf(zserioContext.getLaneRightOfWayRegulation(), endBitPosition);
            break;
        case LANE_TRAFFIC_PRIORITY:
            endBitPosition += getLaneTrafficPriority().bitSizeOf(zserioContext.getLaneTrafficPriority(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.attributes.RulesLaneRangeAttributeType getType()
    {
        return this.type_;
    }

    public nds.core.types.Flag getProhibitedPassage()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setProhibitedPassage(nds.core.types.Flag prohibitedPassage_)
    {
        objectChoice = prohibitedPassage_;
    }

    public nds.core.types.Flag getOvertakingProhibition()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setOvertakingProhibition(nds.core.types.Flag overtakingProhibition_)
    {
        objectChoice = overtakingProhibition_;
    }

    public short getSpeedLimitKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setSpeedLimitKmh(short speedLimitKmh_)
    {
        objectChoice = speedLimitKmh_;
    }

    public short getSpeedLimitMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setSpeedLimitMph(short speedLimitMph_)
    {
        objectChoice = speedLimitMph_;
    }

    public short getMinimumSpeedKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setMinimumSpeedKmh(short minimumSpeedKmh_)
    {
        objectChoice = minimumSpeedKmh_;
    }

    public short getMinimumSpeedMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setMinimumSpeedMph(short minimumSpeedMph_)
    {
        objectChoice = minimumSpeedMph_;
    }

    public short getAdvisorySpeedLimitKmh()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdvisorySpeedLimitKmh(short advisorySpeedLimitKmh_)
    {
        objectChoice = advisorySpeedLimitKmh_;
    }

    public short getAdvisorySpeedLimitMph()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAdvisorySpeedLimitMph(short advisorySpeedLimitMph_)
    {
        objectChoice = advisorySpeedLimitMph_;
    }

    public nds.rules.types.TrafficEnforcementZone getTrafficEnforcementZone()
    {
        return (nds.rules.types.TrafficEnforcementZone)objectChoice;
    }

    public void setTrafficEnforcementZone(nds.rules.types.TrafficEnforcementZone trafficEnforcementZone_)
    {
        objectChoice = trafficEnforcementZone_;
    }

    public nds.rules.types.TrafficZone getTrafficZone()
    {
        return (nds.rules.types.TrafficZone)objectChoice;
    }

    public void setTrafficZone(nds.rules.types.TrafficZone trafficZone_)
    {
        objectChoice = trafficZone_;
    }

    public nds.core.types.Flag getSeasonalClosed()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setSeasonalClosed(nds.core.types.Flag seasonalClosed_)
    {
        objectChoice = seasonalClosed_;
    }

    public nds.core.types.Flag getDontStopZone()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setDontStopZone(nds.core.types.Flag dontStopZone_)
    {
        objectChoice = dontStopZone_;
    }

    public nds.core.types.Flag getProhibitedParking()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setProhibitedParking(nds.core.types.Flag prohibitedParking_)
    {
        objectChoice = prohibitedParking_;
    }

    public nds.core.types.Flag getProhibitedStopping()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setProhibitedStopping(nds.core.types.Flag prohibitedStopping_)
    {
        objectChoice = prohibitedStopping_;
    }

    public nds.rules.types.AutomatedDrivingClearance getAutomatedDrivingClearance()
    {
        return (nds.rules.types.AutomatedDrivingClearance)objectChoice;
    }

    public void setAutomatedDrivingClearance(nds.rules.types.AutomatedDrivingClearance automatedDrivingClearance_)
    {
        objectChoice = automatedDrivingClearance_;
    }

    public nds.core.types.Flag getRoadworks()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setRoadworks(nds.core.types.Flag roadworks_)
    {
        objectChoice = roadworks_;
    }

    public nds.rules.types.LaneRightOfWayRegulation getLaneRightOfWayRegulation()
    {
        return (nds.rules.types.LaneRightOfWayRegulation)objectChoice;
    }

    public void setLaneRightOfWayRegulation(nds.rules.types.LaneRightOfWayRegulation laneRightOfWayRegulation_)
    {
        objectChoice = laneRightOfWayRegulation_;
    }

    public nds.rules.types.LaneTrafficPriority getLaneTrafficPriority()
    {
        return (nds.rules.types.LaneTrafficPriority)objectChoice;
    }

    public void setLaneTrafficPriority(nds.rules.types.LaneTrafficPriority laneTrafficPriority_)
    {
        objectChoice = laneTrafficPriority_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RulesLaneRangeAttributeValue)
        {
            final RulesLaneRangeAttributeValue that = (RulesLaneRangeAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PROHIBITED_PASSAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case OVERTAKING_PROHIBITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case SPEED_LIMIT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case SPEED_LIMIT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case MINIMUM_SPEED_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case MINIMUM_SPEED_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADVISORY_SPEED_LIMIT_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case ADVISORY_SPEED_LIMIT_IMPERIAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case TRAFFIC_ENFORCEMENT_ZONE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficEnforcementZone)objectChoice);
                break;
            case TRAFFIC_ZONE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficZone)objectChoice);
                break;
            case SEASONAL_CLOSED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case DONT_STOP_ZONE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PROHIBITED_PARKING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PROHIBITED_STOPPING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case AUTOMATED_DRIVING_CLEARANCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.AutomatedDrivingClearance)objectChoice);
                break;
            case ROADWORKS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case LANE_RIGHT_OF_WAY_REGULATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.LaneRightOfWayRegulation)objectChoice);
                break;
            case LANE_TRAFFIC_PRIORITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.LaneTrafficPriority)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case OVERTAKING_PROHIBITION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SPEED_LIMIT_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case SPEED_LIMIT_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case MINIMUM_SPEED_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case MINIMUM_SPEED_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            objectChoice = in.readUnsignedByte();
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            objectChoice = in.readUnsignedByte();
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            objectChoice = new nds.rules.types.TrafficEnforcementZone(in);
            break;
        case TRAFFIC_ZONE:
            objectChoice = nds.rules.types.TrafficZone.readEnum(in);
            break;
        case SEASONAL_CLOSED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case DONT_STOP_ZONE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PROHIBITED_PARKING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PROHIBITED_STOPPING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            objectChoice = nds.rules.types.AutomatedDrivingClearance.readEnum(in);
            break;
        case ROADWORKS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            objectChoice = new nds.rules.types.LaneRightOfWayRegulation(in);
            break;
        case LANE_TRAFFIC_PRIORITY:
            objectChoice = new nds.rules.types.LaneTrafficPriority(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case OVERTAKING_PROHIBITION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SPEED_LIMIT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeedLimitKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case SPEED_LIMIT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeedLimitMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case MINIMUM_SPEED_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getMinimumSpeedKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case MINIMUM_SPEED_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getMinimumSpeedMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdvisorySpeedLimitKmh().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAdvisorySpeedLimitMph().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            objectChoice = new nds.rules.types.TrafficEnforcementZone(zserioContext.getTrafficEnforcementZone(), in);
            break;
        case TRAFFIC_ZONE:
            objectChoice = nds.rules.types.TrafficZone.readEnum(zserioContext.getTrafficZone(), in);
            break;
        case SEASONAL_CLOSED:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case DONT_STOP_ZONE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PROHIBITED_PARKING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PROHIBITED_STOPPING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            objectChoice = nds.rules.types.AutomatedDrivingClearance.readEnum(zserioContext.getAutomatedDrivingClearance(), in);
            break;
        case ROADWORKS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            objectChoice = new nds.rules.types.LaneRightOfWayRegulation(zserioContext.getLaneRightOfWayRegulation(), in);
            break;
        case LANE_TRAFFIC_PRIORITY:
            objectChoice = new nds.rules.types.LaneTrafficPriority(zserioContext.getLaneTrafficPriority(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            {
                endBitPosition = getProhibitedPassage().initializeOffsets(endBitPosition);
            }
            break;
        case OVERTAKING_PROHIBITION:
            {
                endBitPosition = getOvertakingProhibition().initializeOffsets(endBitPosition);
            }
            break;
        case SPEED_LIMIT_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case MINIMUM_SPEED_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case MINIMUM_SPEED_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            {
                endBitPosition += 8;
            }
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += 8;
            }
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            {
                endBitPosition = getTrafficEnforcementZone().initializeOffsets(endBitPosition);
            }
            break;
        case TRAFFIC_ZONE:
            {
                endBitPosition += getTrafficZone().bitSizeOf(endBitPosition);
            }
            break;
        case SEASONAL_CLOSED:
            {
                endBitPosition = getSeasonalClosed().initializeOffsets(endBitPosition);
            }
            break;
        case DONT_STOP_ZONE:
            {
                endBitPosition = getDontStopZone().initializeOffsets(endBitPosition);
            }
            break;
        case PROHIBITED_PARKING:
            {
                endBitPosition = getProhibitedParking().initializeOffsets(endBitPosition);
            }
            break;
        case PROHIBITED_STOPPING:
            {
                endBitPosition = getProhibitedStopping().initializeOffsets(endBitPosition);
            }
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            {
                endBitPosition += getAutomatedDrivingClearance().bitSizeOf(endBitPosition);
            }
            break;
        case ROADWORKS:
            {
                endBitPosition = getRoadworks().initializeOffsets(endBitPosition);
            }
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            {
                endBitPosition = getLaneRightOfWayRegulation().initializeOffsets(endBitPosition);
            }
            break;
        case LANE_TRAFFIC_PRIORITY:
            {
                endBitPosition = getLaneTrafficPriority().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            {
                endBitPosition = getProhibitedPassage().initializeOffsets(endBitPosition);
            }
            break;
        case OVERTAKING_PROHIBITION:
            {
                endBitPosition = getOvertakingProhibition().initializeOffsets(endBitPosition);
            }
            break;
        case SPEED_LIMIT_METRIC:
            {
                endBitPosition += zserioContext.getSpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitKmh()));
            }
            break;
        case SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += zserioContext.getSpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitMph()));
            }
            break;
        case MINIMUM_SPEED_METRIC:
            {
                endBitPosition += zserioContext.getMinimumSpeedKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedKmh()));
            }
            break;
        case MINIMUM_SPEED_IMPERIAL:
            {
                endBitPosition += zserioContext.getMinimumSpeedMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedMph()));
            }
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            {
                endBitPosition += zserioContext.getAdvisorySpeedLimitKmh().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitKmh()));
            }
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            {
                endBitPosition += zserioContext.getAdvisorySpeedLimitMph().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitMph()));
            }
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            {
                endBitPosition = getTrafficEnforcementZone().initializeOffsets(zserioContext.getTrafficEnforcementZone(), endBitPosition);
            }
            break;
        case TRAFFIC_ZONE:
            {
                endBitPosition = getTrafficZone().initializeOffsets(zserioContext.getTrafficZone(), endBitPosition);
            }
            break;
        case SEASONAL_CLOSED:
            {
                endBitPosition = getSeasonalClosed().initializeOffsets(endBitPosition);
            }
            break;
        case DONT_STOP_ZONE:
            {
                endBitPosition = getDontStopZone().initializeOffsets(endBitPosition);
            }
            break;
        case PROHIBITED_PARKING:
            {
                endBitPosition = getProhibitedParking().initializeOffsets(endBitPosition);
            }
            break;
        case PROHIBITED_STOPPING:
            {
                endBitPosition = getProhibitedStopping().initializeOffsets(endBitPosition);
            }
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            {
                endBitPosition = getAutomatedDrivingClearance().initializeOffsets(zserioContext.getAutomatedDrivingClearance(), endBitPosition);
            }
            break;
        case ROADWORKS:
            {
                endBitPosition = getRoadworks().initializeOffsets(endBitPosition);
            }
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            {
                endBitPosition = getLaneRightOfWayRegulation().initializeOffsets(zserioContext.getLaneRightOfWayRegulation(), endBitPosition);
            }
            break;
        case LANE_TRAFFIC_PRIORITY:
            {
                endBitPosition = getLaneTrafficPriority().initializeOffsets(zserioContext.getLaneTrafficPriority(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            getProhibitedPassage().write(out);
            break;
        case OVERTAKING_PROHIBITION:
            getOvertakingProhibition().write(out);
            break;
        case SPEED_LIMIT_METRIC:
            out.writeUnsignedByte(getSpeedLimitKmh());
            break;
        case SPEED_LIMIT_IMPERIAL:
            out.writeUnsignedByte(getSpeedLimitMph());
            break;
        case MINIMUM_SPEED_METRIC:
            out.writeUnsignedByte(getMinimumSpeedKmh());
            break;
        case MINIMUM_SPEED_IMPERIAL:
            out.writeUnsignedByte(getMinimumSpeedMph());
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            out.writeUnsignedByte(getAdvisorySpeedLimitKmh());
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            out.writeUnsignedByte(getAdvisorySpeedLimitMph());
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZone().write(out);
            break;
        case TRAFFIC_ZONE:
            getTrafficZone().write(out);
            break;
        case SEASONAL_CLOSED:
            getSeasonalClosed().write(out);
            break;
        case DONT_STOP_ZONE:
            getDontStopZone().write(out);
            break;
        case PROHIBITED_PARKING:
            getProhibitedParking().write(out);
            break;
        case PROHIBITED_STOPPING:
            getProhibitedStopping().write(out);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            getAutomatedDrivingClearance().write(out);
            break;
        case ROADWORKS:
            getRoadworks().write(out);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            getLaneRightOfWayRegulation().write(out);
            break;
        case LANE_TRAFFIC_PRIORITY:
            getLaneTrafficPriority().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PROHIBITED_PASSAGE:
            getProhibitedPassage().write(out);
            break;
        case OVERTAKING_PROHIBITION:
            getOvertakingProhibition().write(out);
            break;
        case SPEED_LIMIT_METRIC:
            zserioContext.getSpeedLimitKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitKmh()));
            break;
        case SPEED_LIMIT_IMPERIAL:
            zserioContext.getSpeedLimitMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedLimitMph()));
            break;
        case MINIMUM_SPEED_METRIC:
            zserioContext.getMinimumSpeedKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedKmh()));
            break;
        case MINIMUM_SPEED_IMPERIAL:
            zserioContext.getMinimumSpeedMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getMinimumSpeedMph()));
            break;
        case ADVISORY_SPEED_LIMIT_METRIC:
            zserioContext.getAdvisorySpeedLimitKmh().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitKmh()));
            break;
        case ADVISORY_SPEED_LIMIT_IMPERIAL:
            zserioContext.getAdvisorySpeedLimitMph().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAdvisorySpeedLimitMph()));
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZone().write(zserioContext.getTrafficEnforcementZone(), out);
            break;
        case TRAFFIC_ZONE:
            getTrafficZone().write(zserioContext.getTrafficZone(), out);
            break;
        case SEASONAL_CLOSED:
            getSeasonalClosed().write(out);
            break;
        case DONT_STOP_ZONE:
            getDontStopZone().write(out);
            break;
        case PROHIBITED_PARKING:
            getProhibitedParking().write(out);
            break;
        case PROHIBITED_STOPPING:
            getProhibitedStopping().write(out);
            break;
        case AUTOMATED_DRIVING_CLEARANCE:
            getAutomatedDrivingClearance().write(zserioContext.getAutomatedDrivingClearance(), out);
            break;
        case ROADWORKS:
            getRoadworks().write(out);
            break;
        case LANE_RIGHT_OF_WAY_REGULATION:
            getLaneRightOfWayRegulation().write(zserioContext.getLaneRightOfWayRegulation(), out);
            break;
        case LANE_TRAFFIC_PRIORITY:
            getLaneTrafficPriority().write(zserioContext.getLaneTrafficPriority(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_prohibitedPassage = 0;
    public static final int CHOICE_overtakingProhibition = 1;
    public static final int CHOICE_speedLimitKmh = 2;
    public static final int CHOICE_speedLimitMph = 3;
    public static final int CHOICE_minimumSpeedKmh = 4;
    public static final int CHOICE_minimumSpeedMph = 5;
    public static final int CHOICE_advisorySpeedLimitKmh = 6;
    public static final int CHOICE_advisorySpeedLimitMph = 7;
    public static final int CHOICE_trafficEnforcementZone = 8;
    public static final int CHOICE_trafficZone = 9;
    public static final int CHOICE_seasonalClosed = 10;
    public static final int CHOICE_dontStopZone = 11;
    public static final int CHOICE_prohibitedParking = 12;
    public static final int CHOICE_prohibitedStopping = 13;
    public static final int CHOICE_automatedDrivingClearance = 14;
    public static final int CHOICE_roadworks = 15;
    public static final int CHOICE_laneRightOfWayRegulation = 16;
    public static final int CHOICE_laneTrafficPriority = 17;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.rules.attributes.RulesLaneRangeAttributeType type_;
    private java.lang.Object objectChoice;
}
