/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.attributes;

public enum RulesRegionAttributeType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    BLOOD_ALCOHOL_CONTENT_LIMIT((short)0),
    WARNING_TRIANGLE_REQUIRED((short)1),
    FIRST_AID_KIT_REQUIRED((short)2),
    SAFETY_VESTS_REQUIRED((short)3),
    BREATHALIZER_REQUIRED((short)4),
    TURN_ON_RED_ALLOWED((short)5),
    DAYTIME_RUNNING_LIGHT((short)6),
    ADMIN_SPEED_LIMIT_METRIC((short)7),
    ADMIN_SPEED_LIMIT_IMPERIAL((short)8),
    ADMIN_MINIMUM_SPEED_METRIC((short)9),
    ADMIN_MINIMUM_SPEED_IMPERIAL((short)10),
    ADMIN_ADVISORY_SPEED_LIMIT_METRIC((short)11),
    ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL((short)12),
    TOLL_VIGNETTE_INFO((short)13),
    REGION_CURRENCIES((short)14),
    REGION_DRIVING_RULES((short)15),
    LIGHT_CONDITIONS((short)16),
    REQUIRES_TOLL_REGISTRATION((short)17),
    WINTER_SEASON((short)18),
    WINTER_TIRES_REQUIRED((short)19),
    FIRE_EXTINGUISHER_REQUIRED((short)20),
    TOW_ROPE_REQUIRED((short)21),
    ISO_DETAILS((short)22),
    RIGHT_HAND_TRAFFIC((short)23),
    SYSTEM_OF_MEASUREMENT((short)24),
    PROHIBITED_PASSAGE((short)25),
    TIME_ZONE((short)26),
    OFFICIAL_LANGUAGES((short)27);

    private RulesRegionAttributeType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RulesRegionAttributeType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static RulesRegionAttributeType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static RulesRegionAttributeType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return BLOOD_ALCOHOL_CONTENT_LIMIT;
            case (short)1:
                return WARNING_TRIANGLE_REQUIRED;
            case (short)2:
                return FIRST_AID_KIT_REQUIRED;
            case (short)3:
                return SAFETY_VESTS_REQUIRED;
            case (short)4:
                return BREATHALIZER_REQUIRED;
            case (short)5:
                return TURN_ON_RED_ALLOWED;
            case (short)6:
                return DAYTIME_RUNNING_LIGHT;
            case (short)7:
                return ADMIN_SPEED_LIMIT_METRIC;
            case (short)8:
                return ADMIN_SPEED_LIMIT_IMPERIAL;
            case (short)9:
                return ADMIN_MINIMUM_SPEED_METRIC;
            case (short)10:
                return ADMIN_MINIMUM_SPEED_IMPERIAL;
            case (short)11:
                return ADMIN_ADVISORY_SPEED_LIMIT_METRIC;
            case (short)12:
                return ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL;
            case (short)13:
                return TOLL_VIGNETTE_INFO;
            case (short)14:
                return REGION_CURRENCIES;
            case (short)15:
                return REGION_DRIVING_RULES;
            case (short)16:
                return LIGHT_CONDITIONS;
            case (short)17:
                return REQUIRES_TOLL_REGISTRATION;
            case (short)18:
                return WINTER_SEASON;
            case (short)19:
                return WINTER_TIRES_REQUIRED;
            case (short)20:
                return FIRE_EXTINGUISHER_REQUIRED;
            case (short)21:
                return TOW_ROPE_REQUIRED;
            case (short)22:
                return ISO_DETAILS;
            case (short)23:
                return RIGHT_HAND_TRAFFIC;
            case (short)24:
                return SYSTEM_OF_MEASUREMENT;
            case (short)25:
                return PROHIBITED_PASSAGE;
            case (short)26:
                return TIME_ZONE;
            case (short)27:
                return OFFICIAL_LANGUAGES;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RulesRegionAttributeType: " + value + "!");
        }
    }

    public static RulesRegionAttributeType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("BLOOD_ALCOHOL_CONTENT_LIMIT"))
            return BLOOD_ALCOHOL_CONTENT_LIMIT;
        if (itemName.equals("WARNING_TRIANGLE_REQUIRED"))
            return WARNING_TRIANGLE_REQUIRED;
        if (itemName.equals("FIRST_AID_KIT_REQUIRED"))
            return FIRST_AID_KIT_REQUIRED;
        if (itemName.equals("SAFETY_VESTS_REQUIRED"))
            return SAFETY_VESTS_REQUIRED;
        if (itemName.equals("BREATHALIZER_REQUIRED"))
            return BREATHALIZER_REQUIRED;
        if (itemName.equals("TURN_ON_RED_ALLOWED"))
            return TURN_ON_RED_ALLOWED;
        if (itemName.equals("DAYTIME_RUNNING_LIGHT"))
            return DAYTIME_RUNNING_LIGHT;
        if (itemName.equals("ADMIN_SPEED_LIMIT_METRIC"))
            return ADMIN_SPEED_LIMIT_METRIC;
        if (itemName.equals("ADMIN_SPEED_LIMIT_IMPERIAL"))
            return ADMIN_SPEED_LIMIT_IMPERIAL;
        if (itemName.equals("ADMIN_MINIMUM_SPEED_METRIC"))
            return ADMIN_MINIMUM_SPEED_METRIC;
        if (itemName.equals("ADMIN_MINIMUM_SPEED_IMPERIAL"))
            return ADMIN_MINIMUM_SPEED_IMPERIAL;
        if (itemName.equals("ADMIN_ADVISORY_SPEED_LIMIT_METRIC"))
            return ADMIN_ADVISORY_SPEED_LIMIT_METRIC;
        if (itemName.equals("ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL"))
            return ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL;
        if (itemName.equals("TOLL_VIGNETTE_INFO"))
            return TOLL_VIGNETTE_INFO;
        if (itemName.equals("REGION_CURRENCIES"))
            return REGION_CURRENCIES;
        if (itemName.equals("REGION_DRIVING_RULES"))
            return REGION_DRIVING_RULES;
        if (itemName.equals("LIGHT_CONDITIONS"))
            return LIGHT_CONDITIONS;
        if (itemName.equals("REQUIRES_TOLL_REGISTRATION"))
            return REQUIRES_TOLL_REGISTRATION;
        if (itemName.equals("WINTER_SEASON"))
            return WINTER_SEASON;
        if (itemName.equals("WINTER_TIRES_REQUIRED"))
            return WINTER_TIRES_REQUIRED;
        if (itemName.equals("FIRE_EXTINGUISHER_REQUIRED"))
            return FIRE_EXTINGUISHER_REQUIRED;
        if (itemName.equals("TOW_ROPE_REQUIRED"))
            return TOW_ROPE_REQUIRED;
        if (itemName.equals("ISO_DETAILS"))
            return ISO_DETAILS;
        if (itemName.equals("RIGHT_HAND_TRAFFIC"))
            return RIGHT_HAND_TRAFFIC;
        if (itemName.equals("SYSTEM_OF_MEASUREMENT"))
            return SYSTEM_OF_MEASUREMENT;
        if (itemName.equals("PROHIBITED_PASSAGE"))
            return PROHIBITED_PASSAGE;
        if (itemName.equals("TIME_ZONE"))
            return TIME_ZONE;
        if (itemName.equals("OFFICIAL_LANGUAGES"))
            return OFFICIAL_LANGUAGES;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RulesRegionAttributeType!");
    }

    private short value;
}
