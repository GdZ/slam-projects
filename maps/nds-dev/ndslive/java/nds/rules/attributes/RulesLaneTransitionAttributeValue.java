/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.attributes;

public class RulesLaneTransitionAttributeValue implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public RulesLaneTransitionAttributeValue(
            nds.rules.attributes.RulesLaneTransitionAttributeType type_)
    {
        this.type_ = type_;
    }

    public RulesLaneTransitionAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.rules.attributes.RulesLaneTransitionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case TURN_ON_RED_ALLOWED:
            return CHOICE_turnOnRedAllowed;
        case PROHIBITED_TRANSITION:
            return CHOICE_prohibitedTransition;
        case PREFERRED_U_TURN:
            return CHOICE_preferredUTurn;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TURN_ON_RED_ALLOWED:
            endBitPosition += 1;
            break;
        case PROHIBITED_TRANSITION:
            endBitPosition += getProhibitedTransition().bitSizeOf(endBitPosition);
            break;
        case PREFERRED_U_TURN:
            endBitPosition += getPreferredUTurn().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneTransitionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.attributes.RulesLaneTransitionAttributeType getType()
    {
        return this.type_;
    }

    public boolean getTurnOnRedAllowed()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setTurnOnRedAllowed(boolean turnOnRedAllowed_)
    {
        objectChoice = turnOnRedAllowed_;
    }

    public nds.core.types.Flag getProhibitedTransition()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setProhibitedTransition(nds.core.types.Flag prohibitedTransition_)
    {
        objectChoice = prohibitedTransition_;
    }

    public nds.core.types.Flag getPreferredUTurn()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setPreferredUTurn(nds.core.types.Flag preferredUTurn_)
    {
        objectChoice = preferredUTurn_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RulesLaneTransitionAttributeValue)
        {
            final RulesLaneTransitionAttributeValue that = (RulesLaneTransitionAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case TURN_ON_RED_ALLOWED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            case PROHIBITED_TRANSITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PREFERRED_U_TURN:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case TURN_ON_RED_ALLOWED:
            objectChoice = in.readBool();
            break;
        case PROHIBITED_TRANSITION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PREFERRED_U_TURN:
            objectChoice = new nds.core.types.Flag(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TURN_ON_RED_ALLOWED:
            {
                endBitPosition += 1;
            }
            break;
        case PROHIBITED_TRANSITION:
            {
                endBitPosition = getProhibitedTransition().initializeOffsets(endBitPosition);
            }
            break;
        case PREFERRED_U_TURN:
            {
                endBitPosition = getPreferredUTurn().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneTransitionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case TURN_ON_RED_ALLOWED:
            out.writeBool(getTurnOnRedAllowed());
            break;
        case PROHIBITED_TRANSITION:
            getProhibitedTransition().write(out);
            break;
        case PREFERRED_U_TURN:
            getPreferredUTurn().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RulesLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_turnOnRedAllowed = 0;
    public static final int CHOICE_prohibitedTransition = 1;
    public static final int CHOICE_preferredUTurn = 2;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.rules.attributes.RulesLaneTransitionAttributeType type_;
    private java.lang.Object objectChoice;
}
