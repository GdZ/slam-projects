/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.attributes;

public enum RulesDisplayLineRangeAttributeType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    PROHIBITED_PASSAGE((short)0),
    OVERTAKING_PROHIBITION((short)1),
    SPEED_LIMIT_METRIC((short)2),
    SPEED_LIMIT_IMPERIAL((short)3),
    MINIMUM_SPEED_METRIC((short)4),
    MINIMUM_SPEED_IMPERIAL((short)5),
    ADVISORY_SPEED_LIMIT_METRIC((short)6),
    ADVISORY_SPEED_LIMIT_IMPERIAL((short)7),
    TRAFFIC_ENFORCEMENT_ZONE((short)8),
    NON_DEFAULT_DRIVING_SIDE((short)9),
    TRAFFIC_ZONE((short)10),
    ADR_TUNNEL_CATEGORY((short)11),
    LICENSE_PLATE_RESTRICTION((short)12),
    SEASONAL_CLOSED((short)13),
    PROHIBITED_PARKING((short)14),
    PROHIBITED_STOPPING((short)15),
    DONT_STOP_ZONE((short)16),
    AUTOMATED_DRIVING_CLEARANCE((short)17),
    ROADWORKS((short)18);

    private RulesDisplayLineRangeAttributeType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RulesDisplayLineRangeAttributeType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static RulesDisplayLineRangeAttributeType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static RulesDisplayLineRangeAttributeType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return PROHIBITED_PASSAGE;
            case (short)1:
                return OVERTAKING_PROHIBITION;
            case (short)2:
                return SPEED_LIMIT_METRIC;
            case (short)3:
                return SPEED_LIMIT_IMPERIAL;
            case (short)4:
                return MINIMUM_SPEED_METRIC;
            case (short)5:
                return MINIMUM_SPEED_IMPERIAL;
            case (short)6:
                return ADVISORY_SPEED_LIMIT_METRIC;
            case (short)7:
                return ADVISORY_SPEED_LIMIT_IMPERIAL;
            case (short)8:
                return TRAFFIC_ENFORCEMENT_ZONE;
            case (short)9:
                return NON_DEFAULT_DRIVING_SIDE;
            case (short)10:
                return TRAFFIC_ZONE;
            case (short)11:
                return ADR_TUNNEL_CATEGORY;
            case (short)12:
                return LICENSE_PLATE_RESTRICTION;
            case (short)13:
                return SEASONAL_CLOSED;
            case (short)14:
                return PROHIBITED_PARKING;
            case (short)15:
                return PROHIBITED_STOPPING;
            case (short)16:
                return DONT_STOP_ZONE;
            case (short)17:
                return AUTOMATED_DRIVING_CLEARANCE;
            case (short)18:
                return ROADWORKS;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RulesDisplayLineRangeAttributeType: " + value + "!");
        }
    }

    public static RulesDisplayLineRangeAttributeType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("PROHIBITED_PASSAGE"))
            return PROHIBITED_PASSAGE;
        if (itemName.equals("OVERTAKING_PROHIBITION"))
            return OVERTAKING_PROHIBITION;
        if (itemName.equals("SPEED_LIMIT_METRIC"))
            return SPEED_LIMIT_METRIC;
        if (itemName.equals("SPEED_LIMIT_IMPERIAL"))
            return SPEED_LIMIT_IMPERIAL;
        if (itemName.equals("MINIMUM_SPEED_METRIC"))
            return MINIMUM_SPEED_METRIC;
        if (itemName.equals("MINIMUM_SPEED_IMPERIAL"))
            return MINIMUM_SPEED_IMPERIAL;
        if (itemName.equals("ADVISORY_SPEED_LIMIT_METRIC"))
            return ADVISORY_SPEED_LIMIT_METRIC;
        if (itemName.equals("ADVISORY_SPEED_LIMIT_IMPERIAL"))
            return ADVISORY_SPEED_LIMIT_IMPERIAL;
        if (itemName.equals("TRAFFIC_ENFORCEMENT_ZONE"))
            return TRAFFIC_ENFORCEMENT_ZONE;
        if (itemName.equals("NON_DEFAULT_DRIVING_SIDE"))
            return NON_DEFAULT_DRIVING_SIDE;
        if (itemName.equals("TRAFFIC_ZONE"))
            return TRAFFIC_ZONE;
        if (itemName.equals("ADR_TUNNEL_CATEGORY"))
            return ADR_TUNNEL_CATEGORY;
        if (itemName.equals("LICENSE_PLATE_RESTRICTION"))
            return LICENSE_PLATE_RESTRICTION;
        if (itemName.equals("SEASONAL_CLOSED"))
            return SEASONAL_CLOSED;
        if (itemName.equals("PROHIBITED_PARKING"))
            return PROHIBITED_PARKING;
        if (itemName.equals("PROHIBITED_STOPPING"))
            return PROHIBITED_STOPPING;
        if (itemName.equals("DONT_STOP_ZONE"))
            return DONT_STOP_ZONE;
        if (itemName.equals("AUTOMATED_DRIVING_CLEARANCE"))
            return AUTOMATED_DRIVING_CLEARANCE;
        if (itemName.equals("ROADWORKS"))
            return ROADWORKS;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RulesDisplayLineRangeAttributeType!");
    }

    private short value;
}
