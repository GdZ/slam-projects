/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.properties;

public class PropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            supplementaryWarningSign_ = new zserio.runtime.array.DeltaContext();
            variableWarningSignProperties_ = new zserio.runtime.array.DeltaContext();
            roadworksType_ = new zserio.runtime.array.DeltaContext();
            trafficLightLayout_ = new nds.rules.types.TrafficLightLayout.ZserioPackingContext();
            trafficLightFaces_ = new nds.rules.types.TrafficLightFaceList.ZserioPackingContext();
            trafficLightUsageType_ = new zserio.runtime.array.DeltaContext();
            trafficLightTargetGroup_ = new zserio.runtime.array.DeltaContext();
            trafficLightCycle_ = new nds.rules.types.TrafficLightCycle.ZserioPackingContext();
            supplementaryWarningSignText_ = new nds.rules.types.SupplementaryWarningSignText.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getSupplementaryWarningSign()
        {
            return supplementaryWarningSign_;
        }

        public zserio.runtime.array.DeltaContext getVariableWarningSignProperties()
        {
            return variableWarningSignProperties_;
        }

        public zserio.runtime.array.DeltaContext getRoadworksType()
        {
            return roadworksType_;
        }

        public nds.rules.types.TrafficLightLayout.ZserioPackingContext getTrafficLightLayout()
        {
            return trafficLightLayout_;
        }

        public nds.rules.types.TrafficLightFaceList.ZserioPackingContext getTrafficLightFaces()
        {
            return trafficLightFaces_;
        }

        public zserio.runtime.array.DeltaContext getTrafficLightUsageType()
        {
            return trafficLightUsageType_;
        }

        public zserio.runtime.array.DeltaContext getTrafficLightTargetGroup()
        {
            return trafficLightTargetGroup_;
        }

        public nds.rules.types.TrafficLightCycle.ZserioPackingContext getTrafficLightCycle()
        {
            return trafficLightCycle_;
        }

        public nds.rules.types.SupplementaryWarningSignText.ZserioPackingContext getSupplementaryWarningSignText()
        {
            return supplementaryWarningSignText_;
        }

        private zserio.runtime.array.DeltaContext supplementaryWarningSign_;
        private zserio.runtime.array.DeltaContext variableWarningSignProperties_;
        private zserio.runtime.array.DeltaContext roadworksType_;
        private nds.rules.types.TrafficLightLayout.ZserioPackingContext trafficLightLayout_;
        private nds.rules.types.TrafficLightFaceList.ZserioPackingContext trafficLightFaces_;
        private zserio.runtime.array.DeltaContext trafficLightUsageType_;
        private zserio.runtime.array.DeltaContext trafficLightTargetGroup_;
        private nds.rules.types.TrafficLightCycle.ZserioPackingContext trafficLightCycle_;
        private nds.rules.types.SupplementaryWarningSignText.ZserioPackingContext supplementaryWarningSignText_;
    };

    public PropertyValue(
            nds.rules.properties.PropertyType type_)
    {
        this.type_ = type_;
    }

    public PropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.rules.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.rules.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case CORE:
            return UNDEFINED_CHOICE;
        case SUPPLEMENTARY_WARNING_SIGN:
            return CHOICE_supplementaryWarningSign;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            return CHOICE_variableWarningSignProperties;
        case ROADWORKS_TYPE:
            return CHOICE_roadworksType;
        case TRAFFIC_LIGHTS_LAYOUT:
            return CHOICE_trafficLightLayout;
        case TRAFFIC_LIGHTS_FACES:
            return CHOICE_trafficLightFaces;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            return CHOICE_trafficLightUsageType;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            return CHOICE_trafficLightTargetGroup;
        case TRAFFIC_LIGHTS_CYCLE:
            return CHOICE_trafficLightCycle;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            return CHOICE_supplementaryWarningSignText;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            getSupplementaryWarningSign().initPackingContext(zserioContext.getSupplementaryWarningSign());
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            getVariableWarningSignProperties().initPackingContext(zserioContext.getVariableWarningSignProperties());
            break;
        case ROADWORKS_TYPE:
            getRoadworksType().initPackingContext(zserioContext.getRoadworksType());
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            getTrafficLightLayout().initPackingContext(zserioContext.getTrafficLightLayout());
            break;
        case TRAFFIC_LIGHTS_FACES:
            getTrafficLightFaces().initPackingContext(zserioContext.getTrafficLightFaces());
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            getTrafficLightUsageType().initPackingContext(zserioContext.getTrafficLightUsageType());
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            getTrafficLightTargetGroup().initPackingContext(zserioContext.getTrafficLightTargetGroup());
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            getTrafficLightCycle().initPackingContext(zserioContext.getTrafficLightCycle());
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            getSupplementaryWarningSignText().initPackingContext(zserioContext.getSupplementaryWarningSignText());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            endBitPosition += getSupplementaryWarningSign().bitSizeOf(endBitPosition);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            endBitPosition += getVariableWarningSignProperties().bitSizeOf(endBitPosition);
            break;
        case ROADWORKS_TYPE:
            endBitPosition += getRoadworksType().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            endBitPosition += getTrafficLightLayout().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_LIGHTS_FACES:
            endBitPosition += getTrafficLightFaces().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            endBitPosition += getTrafficLightUsageType().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            endBitPosition += getTrafficLightTargetGroup().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            endBitPosition += getTrafficLightCycle().bitSizeOf(endBitPosition);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            endBitPosition += getSupplementaryWarningSignText().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            endBitPosition += getSupplementaryWarningSign().bitSizeOf(zserioContext.getSupplementaryWarningSign(), endBitPosition);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            endBitPosition += getVariableWarningSignProperties().bitSizeOf(zserioContext.getVariableWarningSignProperties(), endBitPosition);
            break;
        case ROADWORKS_TYPE:
            endBitPosition += getRoadworksType().bitSizeOf(zserioContext.getRoadworksType(), endBitPosition);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            endBitPosition += getTrafficLightLayout().bitSizeOf(zserioContext.getTrafficLightLayout(), endBitPosition);
            break;
        case TRAFFIC_LIGHTS_FACES:
            endBitPosition += getTrafficLightFaces().bitSizeOf(zserioContext.getTrafficLightFaces(), endBitPosition);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            endBitPosition += getTrafficLightUsageType().bitSizeOf(zserioContext.getTrafficLightUsageType(), endBitPosition);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            endBitPosition += getTrafficLightTargetGroup().bitSizeOf(zserioContext.getTrafficLightTargetGroup(), endBitPosition);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            endBitPosition += getTrafficLightCycle().bitSizeOf(zserioContext.getTrafficLightCycle(), endBitPosition);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            endBitPosition += getSupplementaryWarningSignText().bitSizeOf(zserioContext.getSupplementaryWarningSignText(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.properties.PropertyType getType()
    {
        return this.type_;
    }

    public nds.signs.warning.SupplementaryWarningSign getSupplementaryWarningSign()
    {
        return (nds.signs.warning.SupplementaryWarningSign)objectChoice;
    }

    public void setSupplementaryWarningSign(nds.signs.warning.SupplementaryWarningSign supplementaryWarningSign_)
    {
        objectChoice = supplementaryWarningSign_;
    }

    public nds.signs.warning.VariableWarningSignProperties getVariableWarningSignProperties()
    {
        return (nds.signs.warning.VariableWarningSignProperties)objectChoice;
    }

    public void setVariableWarningSignProperties(nds.signs.warning.VariableWarningSignProperties variableWarningSignProperties_)
    {
        objectChoice = variableWarningSignProperties_;
    }

    public nds.rules.types.RoadworksType getRoadworksType()
    {
        return (nds.rules.types.RoadworksType)objectChoice;
    }

    public void setRoadworksType(nds.rules.types.RoadworksType roadworksType_)
    {
        objectChoice = roadworksType_;
    }

    public nds.rules.types.TrafficLightLayout getTrafficLightLayout()
    {
        return (nds.rules.types.TrafficLightLayout)objectChoice;
    }

    public void setTrafficLightLayout(nds.rules.types.TrafficLightLayout trafficLightLayout_)
    {
        objectChoice = trafficLightLayout_;
    }

    public nds.rules.types.TrafficLightFaceList getTrafficLightFaces()
    {
        return (nds.rules.types.TrafficLightFaceList)objectChoice;
    }

    public void setTrafficLightFaces(nds.rules.types.TrafficLightFaceList trafficLightFaces_)
    {
        objectChoice = trafficLightFaces_;
    }

    public nds.rules.types.TrafficLightUsageType getTrafficLightUsageType()
    {
        return (nds.rules.types.TrafficLightUsageType)objectChoice;
    }

    public void setTrafficLightUsageType(nds.rules.types.TrafficLightUsageType trafficLightUsageType_)
    {
        objectChoice = trafficLightUsageType_;
    }

    public nds.rules.types.TrafficLightTargetGroup getTrafficLightTargetGroup()
    {
        return (nds.rules.types.TrafficLightTargetGroup)objectChoice;
    }

    public void setTrafficLightTargetGroup(nds.rules.types.TrafficLightTargetGroup trafficLightTargetGroup_)
    {
        objectChoice = trafficLightTargetGroup_;
    }

    public nds.rules.types.TrafficLightCycle getTrafficLightCycle()
    {
        return (nds.rules.types.TrafficLightCycle)objectChoice;
    }

    public void setTrafficLightCycle(nds.rules.types.TrafficLightCycle trafficLightCycle_)
    {
        objectChoice = trafficLightCycle_;
    }

    public nds.rules.types.SupplementaryWarningSignText getSupplementaryWarningSignText()
    {
        return (nds.rules.types.SupplementaryWarningSignText)objectChoice;
    }

    public void setSupplementaryWarningSignText(nds.rules.types.SupplementaryWarningSignText supplementaryWarningSignText_)
    {
        objectChoice = supplementaryWarningSignText_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PropertyValue)
        {
            final PropertyValue that = (PropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case CORE:
                // empty
                break;
            case SUPPLEMENTARY_WARNING_SIGN:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.signs.warning.SupplementaryWarningSign)objectChoice);
                break;
            case VARIABLE_WARNING_SIGN_PROPERTIES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.signs.warning.VariableWarningSignProperties)objectChoice);
                break;
            case ROADWORKS_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.RoadworksType)objectChoice);
                break;
            case TRAFFIC_LIGHTS_LAYOUT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficLightLayout)objectChoice);
                break;
            case TRAFFIC_LIGHTS_FACES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficLightFaceList)objectChoice);
                break;
            case TRAFFIC_LIGHTS_USAGE_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficLightUsageType)objectChoice);
                break;
            case TRAFFIC_LIGHTS_TARGET_GROUP:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficLightTargetGroup)objectChoice);
                break;
            case TRAFFIC_LIGHTS_CYCLE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.TrafficLightCycle)objectChoice);
                break;
            case SUPPLEMENTARY_WARNING_SIGN_TEXT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.rules.types.SupplementaryWarningSignText)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            objectChoice = nds.signs.warning.SupplementaryWarningSign.readEnum(in);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            objectChoice = nds.signs.warning.VariableWarningSignProperties.readEnum(in);
            break;
        case ROADWORKS_TYPE:
            objectChoice = nds.rules.types.RoadworksType.readEnum(in);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            objectChoice = new nds.rules.types.TrafficLightLayout(in);
            break;
        case TRAFFIC_LIGHTS_FACES:
            objectChoice = new nds.rules.types.TrafficLightFaceList(in);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            objectChoice = nds.rules.types.TrafficLightUsageType.readEnum(in);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            objectChoice = new nds.rules.types.TrafficLightTargetGroup(in);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            objectChoice = new nds.rules.types.TrafficLightCycle(in);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            objectChoice = new nds.rules.types.SupplementaryWarningSignText(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            objectChoice = nds.signs.warning.SupplementaryWarningSign.readEnum(zserioContext.getSupplementaryWarningSign(), in);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            objectChoice = nds.signs.warning.VariableWarningSignProperties.readEnum(zserioContext.getVariableWarningSignProperties(), in);
            break;
        case ROADWORKS_TYPE:
            objectChoice = nds.rules.types.RoadworksType.readEnum(zserioContext.getRoadworksType(), in);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            objectChoice = new nds.rules.types.TrafficLightLayout(zserioContext.getTrafficLightLayout(), in);
            break;
        case TRAFFIC_LIGHTS_FACES:
            objectChoice = new nds.rules.types.TrafficLightFaceList(zserioContext.getTrafficLightFaces(), in);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            objectChoice = nds.rules.types.TrafficLightUsageType.readEnum(zserioContext.getTrafficLightUsageType(), in);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            objectChoice = new nds.rules.types.TrafficLightTargetGroup(zserioContext.getTrafficLightTargetGroup(), in);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            objectChoice = new nds.rules.types.TrafficLightCycle(zserioContext.getTrafficLightCycle(), in);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            objectChoice = new nds.rules.types.SupplementaryWarningSignText(zserioContext.getSupplementaryWarningSignText(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            {
                endBitPosition += getSupplementaryWarningSign().bitSizeOf(endBitPosition);
            }
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            {
                endBitPosition += getVariableWarningSignProperties().bitSizeOf(endBitPosition);
            }
            break;
        case ROADWORKS_TYPE:
            {
                endBitPosition += getRoadworksType().bitSizeOf(endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            {
                endBitPosition = getTrafficLightLayout().initializeOffsets(endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_FACES:
            {
                endBitPosition = getTrafficLightFaces().initializeOffsets(endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            {
                endBitPosition += getTrafficLightUsageType().bitSizeOf(endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            {
                endBitPosition += getTrafficLightTargetGroup().bitSizeOf(endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            {
                endBitPosition = getTrafficLightCycle().initializeOffsets(endBitPosition);
            }
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            {
                endBitPosition = getSupplementaryWarningSignText().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            {
                endBitPosition = getSupplementaryWarningSign().initializeOffsets(zserioContext.getSupplementaryWarningSign(), endBitPosition);
            }
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            {
                endBitPosition = getVariableWarningSignProperties().initializeOffsets(zserioContext.getVariableWarningSignProperties(), endBitPosition);
            }
            break;
        case ROADWORKS_TYPE:
            {
                endBitPosition = getRoadworksType().initializeOffsets(zserioContext.getRoadworksType(), endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            {
                endBitPosition = getTrafficLightLayout().initializeOffsets(zserioContext.getTrafficLightLayout(), endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_FACES:
            {
                endBitPosition = getTrafficLightFaces().initializeOffsets(zserioContext.getTrafficLightFaces(), endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            {
                endBitPosition = getTrafficLightUsageType().initializeOffsets(zserioContext.getTrafficLightUsageType(), endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            {
                endBitPosition = getTrafficLightTargetGroup().initializeOffsets(zserioContext.getTrafficLightTargetGroup(), endBitPosition);
            }
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            {
                endBitPosition = getTrafficLightCycle().initializeOffsets(zserioContext.getTrafficLightCycle(), endBitPosition);
            }
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            {
                endBitPosition = getSupplementaryWarningSignText().initializeOffsets(zserioContext.getSupplementaryWarningSignText(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            getSupplementaryWarningSign().write(out);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            getVariableWarningSignProperties().write(out);
            break;
        case ROADWORKS_TYPE:
            getRoadworksType().write(out);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            getTrafficLightLayout().write(out);
            break;
        case TRAFFIC_LIGHTS_FACES:
            getTrafficLightFaces().write(out);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            getTrafficLightUsageType().write(out);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            getTrafficLightTargetGroup().write(out);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            getTrafficLightCycle().write(out);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            getSupplementaryWarningSignText().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case SUPPLEMENTARY_WARNING_SIGN:
            getSupplementaryWarningSign().write(zserioContext.getSupplementaryWarningSign(), out);
            break;
        case VARIABLE_WARNING_SIGN_PROPERTIES:
            getVariableWarningSignProperties().write(zserioContext.getVariableWarningSignProperties(), out);
            break;
        case ROADWORKS_TYPE:
            getRoadworksType().write(zserioContext.getRoadworksType(), out);
            break;
        case TRAFFIC_LIGHTS_LAYOUT:
            getTrafficLightLayout().write(zserioContext.getTrafficLightLayout(), out);
            break;
        case TRAFFIC_LIGHTS_FACES:
            getTrafficLightFaces().write(zserioContext.getTrafficLightFaces(), out);
            break;
        case TRAFFIC_LIGHTS_USAGE_TYPE:
            getTrafficLightUsageType().write(zserioContext.getTrafficLightUsageType(), out);
            break;
        case TRAFFIC_LIGHTS_TARGET_GROUP:
            getTrafficLightTargetGroup().write(zserioContext.getTrafficLightTargetGroup(), out);
            break;
        case TRAFFIC_LIGHTS_CYCLE:
            getTrafficLightCycle().write(zserioContext.getTrafficLightCycle(), out);
            break;
        case SUPPLEMENTARY_WARNING_SIGN_TEXT:
            getSupplementaryWarningSignText().write(zserioContext.getSupplementaryWarningSignText(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_supplementaryWarningSign = 0;
    public static final int CHOICE_variableWarningSignProperties = 1;
    public static final int CHOICE_roadworksType = 2;
    public static final int CHOICE_trafficLightLayout = 3;
    public static final int CHOICE_trafficLightFaces = 4;
    public static final int CHOICE_trafficLightUsageType = 5;
    public static final int CHOICE_trafficLightTargetGroup = 6;
    public static final int CHOICE_trafficLightCycle = 7;
    public static final int CHOICE_supplementaryWarningSignText = 8;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.rules.properties.PropertyType type_;
    private java.lang.Object objectChoice;
}
