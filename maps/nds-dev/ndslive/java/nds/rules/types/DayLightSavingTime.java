/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class DayLightSavingTime implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            utcOffset_ = new zserio.runtime.array.DeltaContext();
            startTimeOfDay_ = new nds.core.conditions.TimeOfDay.ZserioPackingContext();
            startWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth.ZserioPackingContext();
            startMonthOfYear_ = new zserio.runtime.array.DeltaContext();
            endTimeOfDay_ = new nds.core.conditions.TimeOfDay.ZserioPackingContext();
            endWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth.ZserioPackingContext();
            endMonthOfYear_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getUtcOffset()
        {
            return utcOffset_;
        }

        public nds.core.conditions.TimeOfDay.ZserioPackingContext getStartTimeOfDay()
        {
            return startTimeOfDay_;
        }

        public nds.core.conditions.WeekdayInMonth.ZserioPackingContext getStartWeekdayInMonth()
        {
            return startWeekdayInMonth_;
        }

        public zserio.runtime.array.DeltaContext getStartMonthOfYear()
        {
            return startMonthOfYear_;
        }

        public nds.core.conditions.TimeOfDay.ZserioPackingContext getEndTimeOfDay()
        {
            return endTimeOfDay_;
        }

        public nds.core.conditions.WeekdayInMonth.ZserioPackingContext getEndWeekdayInMonth()
        {
            return endWeekdayInMonth_;
        }

        public zserio.runtime.array.DeltaContext getEndMonthOfYear()
        {
            return endMonthOfYear_;
        }

        private zserio.runtime.array.DeltaContext utcOffset_;
        private nds.core.conditions.TimeOfDay.ZserioPackingContext startTimeOfDay_;
        private nds.core.conditions.WeekdayInMonth.ZserioPackingContext startWeekdayInMonth_;
        private zserio.runtime.array.DeltaContext startMonthOfYear_;
        private nds.core.conditions.TimeOfDay.ZserioPackingContext endTimeOfDay_;
        private nds.core.conditions.WeekdayInMonth.ZserioPackingContext endWeekdayInMonth_;
        private zserio.runtime.array.DeltaContext endMonthOfYear_;
    };

    public DayLightSavingTime()
    {
    }

    public DayLightSavingTime(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DayLightSavingTime(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DayLightSavingTime(
            byte utcOffset_,
            nds.rules.types.TimeZoneName[] names_,
            nds.rules.types.TimeZoneName[] abbreviationNames_,
            nds.core.conditions.TimeOfDay startTimeOfDay_,
            nds.core.conditions.WeekdayInMonth startWeekdayInMonth_,
            byte startMonthOfYear_,
            nds.core.conditions.TimeOfDay endTimeOfDay_,
            nds.core.conditions.WeekdayInMonth endWeekdayInMonth_,
            byte endMonthOfYear_)
    {
        setUtcOffset(utcOffset_);
        setNames(names_);
        setAbbreviationNames(abbreviationNames_);
        setStartTimeOfDay(startTimeOfDay_);
        setStartWeekdayInMonth(startWeekdayInMonth_);
        setStartMonthOfYear(startMonthOfYear_);
        setEndTimeOfDay(endTimeOfDay_);
        setEndWeekdayInMonth(endWeekdayInMonth_);
        setEndMonthOfYear(endMonthOfYear_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getUtcOffset().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        startTimeOfDay_.initPackingContext(zserioContext.getStartTimeOfDay());
        startWeekdayInMonth_.initPackingContext(zserioContext.getStartWeekdayInMonth());
        zserioContext.getStartMonthOfYear().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(startMonthOfYear_));
        endTimeOfDay_.initPackingContext(zserioContext.getEndTimeOfDay());
        endWeekdayInMonth_.initPackingContext(zserioContext.getEndWeekdayInMonth());
        zserioContext.getEndMonthOfYear().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(endMonthOfYear_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += 1;
        if (isNamesUsed())
        {
            endBitPosition += names_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isAbbreviationNamesUsed())
        {
            endBitPosition += abbreviationNames_.bitSizeOf(endBitPosition);
        }
        endBitPosition += startTimeOfDay_.bitSizeOf(endBitPosition);
        endBitPosition += startWeekdayInMonth_.bitSizeOf(endBitPosition);
        endBitPosition += 4;
        endBitPosition += endTimeOfDay_.bitSizeOf(endBitPosition);
        endBitPosition += endWeekdayInMonth_.bitSizeOf(endBitPosition);
        endBitPosition += 4;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        endBitPosition += 1;
        if (isNamesUsed())
        {
            endBitPosition += names_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isAbbreviationNamesUsed())
        {
            endBitPosition += abbreviationNames_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += startTimeOfDay_.bitSizeOf(zserioContext.getStartTimeOfDay(), endBitPosition);
        endBitPosition += startWeekdayInMonth_.bitSizeOf(zserioContext.getStartWeekdayInMonth(), endBitPosition);
        endBitPosition += zserioContext.getStartMonthOfYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(startMonthOfYear_));
        endBitPosition += endTimeOfDay_.bitSizeOf(zserioContext.getEndTimeOfDay(), endBitPosition);
        endBitPosition += endWeekdayInMonth_.bitSizeOf(zserioContext.getEndWeekdayInMonth(), endBitPosition);
        endBitPosition += zserioContext.getEndMonthOfYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(endMonthOfYear_));

        return (int)(endBitPosition - bitPosition);
    }

    public byte getUtcOffset()
    {
        return utcOffset_;
    }

    public void setUtcOffset(byte utcOffset_)
    {
        this.utcOffset_ = utcOffset_;
    }

    public nds.rules.types.TimeZoneName[] getNames()
    {
        return (names_ == null) ? null : names_.getRawArray();
    }

    public void setNames(nds.rules.types.TimeZoneName[] names_)
    {
        if (names_ == null)
        {
            this.names_ = null;
        }
        else
        {
            this.names_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class, names_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_names()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isNamesUsed()
    {
        return isNamesSet();
    }

    public boolean isNamesSet()
    {
        return (names_ != null);
    }

    public void resetNames()
    {
        this.names_ = null;
    }

    public nds.rules.types.TimeZoneName[] getAbbreviationNames()
    {
        return (abbreviationNames_ == null) ? null : abbreviationNames_.getRawArray();
    }

    public void setAbbreviationNames(nds.rules.types.TimeZoneName[] abbreviationNames_)
    {
        if (abbreviationNames_ == null)
        {
            this.abbreviationNames_ = null;
        }
        else
        {
            this.abbreviationNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class, abbreviationNames_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_abbreviationNames()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAbbreviationNamesUsed()
    {
        return isAbbreviationNamesSet();
    }

    public boolean isAbbreviationNamesSet()
    {
        return (abbreviationNames_ != null);
    }

    public void resetAbbreviationNames()
    {
        this.abbreviationNames_ = null;
    }

    public nds.core.conditions.TimeOfDay getStartTimeOfDay()
    {
        return startTimeOfDay_;
    }

    public void setStartTimeOfDay(nds.core.conditions.TimeOfDay startTimeOfDay_)
    {
        this.startTimeOfDay_ = startTimeOfDay_;
    }

    public nds.core.conditions.WeekdayInMonth getStartWeekdayInMonth()
    {
        return startWeekdayInMonth_;
    }

    public void setStartWeekdayInMonth(nds.core.conditions.WeekdayInMonth startWeekdayInMonth_)
    {
        this.startWeekdayInMonth_ = startWeekdayInMonth_;
    }

    public byte getStartMonthOfYear()
    {
        return startMonthOfYear_;
    }

    public void setStartMonthOfYear(byte startMonthOfYear_)
    {
        this.startMonthOfYear_ = startMonthOfYear_;
    }

    public nds.core.conditions.TimeOfDay getEndTimeOfDay()
    {
        return endTimeOfDay_;
    }

    public void setEndTimeOfDay(nds.core.conditions.TimeOfDay endTimeOfDay_)
    {
        this.endTimeOfDay_ = endTimeOfDay_;
    }

    public nds.core.conditions.WeekdayInMonth getEndWeekdayInMonth()
    {
        return endWeekdayInMonth_;
    }

    public void setEndWeekdayInMonth(nds.core.conditions.WeekdayInMonth endWeekdayInMonth_)
    {
        this.endWeekdayInMonth_ = endWeekdayInMonth_;
    }

    public byte getEndMonthOfYear()
    {
        return endMonthOfYear_;
    }

    public void setEndMonthOfYear(byte endMonthOfYear_)
    {
        this.endMonthOfYear_ = endMonthOfYear_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DayLightSavingTime)
        {
            final DayLightSavingTime that = (DayLightSavingTime)obj;

            return
                    utcOffset_ == that.utcOffset_ &&
                    ((!isNamesUsed()) ? !that.isNamesUsed() :
                        ((names_ == null) ? that.names_ == null : names_.equals(that.names_))) &&
                    ((!isAbbreviationNamesUsed()) ? !that.isAbbreviationNamesUsed() :
                        ((abbreviationNames_ == null) ? that.abbreviationNames_ == null : abbreviationNames_.equals(that.abbreviationNames_))) &&
                    ((startTimeOfDay_ == null) ? that.startTimeOfDay_ == null : startTimeOfDay_.equals(that.startTimeOfDay_)) &&
                    ((startWeekdayInMonth_ == null) ? that.startWeekdayInMonth_ == null : startWeekdayInMonth_.equals(that.startWeekdayInMonth_)) &&
                    startMonthOfYear_ == that.startMonthOfYear_ &&
                    ((endTimeOfDay_ == null) ? that.endTimeOfDay_ == null : endTimeOfDay_.equals(that.endTimeOfDay_)) &&
                    ((endWeekdayInMonth_ == null) ? that.endWeekdayInMonth_ == null : endWeekdayInMonth_.equals(that.endWeekdayInMonth_)) &&
                    endMonthOfYear_ == that.endMonthOfYear_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, utcOffset_);
        if (isNamesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, names_);
        if (isAbbreviationNamesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, abbreviationNames_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startTimeOfDay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startWeekdayInMonth_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startMonthOfYear_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endTimeOfDay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endWeekdayInMonth_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endMonthOfYear_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        utcOffset_ = in.readByte();

        if (in.readBool())
        {
            names_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_names()),
                    zserio.runtime.array.ArrayType.AUTO);
            names_.read(in);
        }

        if (in.readBool())
        {
            abbreviationNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_abbreviationNames()),
                    zserio.runtime.array.ArrayType.AUTO);
            abbreviationNames_.read(in);
        }

        startTimeOfDay_ = new nds.core.conditions.TimeOfDay(in);

        startWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth(in);

        startMonthOfYear_ = (byte)in.readBits(4);

        endTimeOfDay_ = new nds.core.conditions.TimeOfDay(in);

        endWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth(in);

        endMonthOfYear_ = (byte)in.readBits(4);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        utcOffset_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getUtcOffset().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();

        if (in.readBool())
        {
            names_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_names()),
                    zserio.runtime.array.ArrayType.AUTO);
            names_.readPacked(in);
        }

        if (in.readBool())
        {
            abbreviationNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_abbreviationNames()),
                    zserio.runtime.array.ArrayType.AUTO);
            abbreviationNames_.readPacked(in);
        }

        startTimeOfDay_ = new nds.core.conditions.TimeOfDay(zserioContext.getStartTimeOfDay(), in);

        startWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth(zserioContext.getStartWeekdayInMonth(), in);

        startMonthOfYear_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getStartMonthOfYear().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();

        endTimeOfDay_ = new nds.core.conditions.TimeOfDay(zserioContext.getEndTimeOfDay(), in);

        endWeekdayInMonth_ = new nds.core.conditions.WeekdayInMonth(zserioContext.getEndWeekdayInMonth(), in);

        endMonthOfYear_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getEndMonthOfYear().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += 1;
        if (isNamesUsed())
        {
            endBitPosition = names_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isAbbreviationNamesUsed())
        {
            endBitPosition = abbreviationNames_.initializeOffsets(endBitPosition);
        }
        endBitPosition = startTimeOfDay_.initializeOffsets(endBitPosition);
        endBitPosition = startWeekdayInMonth_.initializeOffsets(endBitPosition);
        endBitPosition += 4;
        endBitPosition = endTimeOfDay_.initializeOffsets(endBitPosition);
        endBitPosition = endWeekdayInMonth_.initializeOffsets(endBitPosition);
        endBitPosition += 4;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        endBitPosition += 1;
        if (isNamesUsed())
        {
            endBitPosition = names_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isAbbreviationNamesUsed())
        {
            endBitPosition = abbreviationNames_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = startTimeOfDay_.initializeOffsets(zserioContext.getStartTimeOfDay(), endBitPosition);
        endBitPosition = startWeekdayInMonth_.initializeOffsets(zserioContext.getStartWeekdayInMonth(), endBitPosition);
        endBitPosition += zserioContext.getStartMonthOfYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(startMonthOfYear_));
        endBitPosition = endTimeOfDay_.initializeOffsets(zserioContext.getEndTimeOfDay(), endBitPosition);
        endBitPosition = endWeekdayInMonth_.initializeOffsets(zserioContext.getEndWeekdayInMonth(), endBitPosition);
        endBitPosition += zserioContext.getEndMonthOfYear().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(endMonthOfYear_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeByte(utcOffset_);

        if (isNamesUsed())
        {
            out.writeBool(true);
            names_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isAbbreviationNamesUsed())
        {
            out.writeBool(true);
            abbreviationNames_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        startTimeOfDay_.write(out);

        startWeekdayInMonth_.write(out);

        out.writeBits(startMonthOfYear_, 4);

        endTimeOfDay_.write(out);

        endWeekdayInMonth_.write(out);

        out.writeBits(endMonthOfYear_, 4);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getUtcOffset().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));

        if (isNamesUsed())
        {
            out.writeBool(true);
            names_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isAbbreviationNamesUsed())
        {
            out.writeBool(true);
            abbreviationNames_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        startTimeOfDay_.write(zserioContext.getStartTimeOfDay(), out);

        startWeekdayInMonth_.write(zserioContext.getStartWeekdayInMonth(), out);

        zserioContext.getStartMonthOfYear().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(startMonthOfYear_));

        endTimeOfDay_.write(zserioContext.getEndTimeOfDay(), out);

        endWeekdayInMonth_.write(zserioContext.getEndWeekdayInMonth(), out);

        zserioContext.getEndMonthOfYear().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(endMonthOfYear_));
    }

    private static final class ZserioElementFactory_names implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TimeZoneName>
    {
        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TimeZoneName.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(context, in);
        }
    }

    private static final class ZserioElementFactory_abbreviationNames implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TimeZoneName>
    {
        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TimeZoneName.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(context, in);
        }
    }

    private byte utcOffset_;
    private zserio.runtime.array.Array names_;
    private zserio.runtime.array.Array abbreviationNames_;
    private nds.core.conditions.TimeOfDay startTimeOfDay_;
    private nds.core.conditions.WeekdayInMonth startWeekdayInMonth_;
    private byte startMonthOfYear_;
    private nds.core.conditions.TimeOfDay endTimeOfDay_;
    private nds.core.conditions.WeekdayInMonth endWeekdayInMonth_;
    private byte endMonthOfYear_;
}
