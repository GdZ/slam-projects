/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class RegionValidity implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            roads_ = new nds.core.types.RoadTypeSet.ZserioPackingContext();
        }

        public nds.core.types.RoadTypeSet.ZserioPackingContext getRoads()
        {
            return roads_;
        }

        private nds.core.types.RoadTypeSet.ZserioPackingContext roads_;
    };

    public RegionValidity(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public RegionValidity(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public RegionValidity(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public RegionValidity(
            byte shift_,
            nds.core.types.RoadTypeSet roads_,
            nds.rules.types.RegionValidityAttribute[] attributes_)
    {
        this(shift_);

        setRoads(roads_);
        setAttributes(attributes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        roads_.initPackingContext(zserioContext.getRoads());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += roads_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isAttributesUsed())
        {
            endBitPosition += attributes_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += roads_.bitSizeOf(zserioContext.getRoads(), endBitPosition);
        endBitPosition += 1;
        if (isAttributesUsed())
        {
            endBitPosition += attributes_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.core.types.RoadTypeSet getRoads()
    {
        return roads_;
    }

    public void setRoads(nds.core.types.RoadTypeSet roads_)
    {
        this.roads_ = roads_;
    }

    public nds.rules.types.RegionValidityAttribute[] getAttributes()
    {
        return (attributes_ == null) ? null : attributes_.getRawArray();
    }

    public void setAttributes(nds.rules.types.RegionValidityAttribute[] attributes_)
    {
        if (attributes_ == null)
        {
            this.attributes_ = null;
        }
        else
        {
            this.attributes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.RegionValidityAttribute.class, attributes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.RegionValidityAttribute>(new ZserioElementFactory_attributes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAttributesUsed()
    {
        return isAttributesSet();
    }

    public boolean isAttributesSet()
    {
        return (attributes_ != null);
    }

    public void resetAttributes()
    {
        this.attributes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RegionValidity)
        {
            final RegionValidity that = (RegionValidity)obj;

            return
                    this.shift_ == that.shift_ &&
                    ((roads_ == null) ? that.roads_ == null : roads_.equals(that.roads_)) &&
                    ((!isAttributesUsed()) ? !that.isAttributesUsed() :
                        ((attributes_ == null) ? that.attributes_ == null : attributes_.equals(that.attributes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roads_);
        if (isAttributesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, attributes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        roads_ = new nds.core.types.RoadTypeSet(in);

        if (in.readBool())
        {
            attributes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.RegionValidityAttribute.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.RegionValidityAttribute>(new ZserioElementFactory_attributes()),
                    zserio.runtime.array.ArrayType.AUTO);
            attributes_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        roads_ = new nds.core.types.RoadTypeSet(zserioContext.getRoads(), in);

        if (in.readBool())
        {
            attributes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.RegionValidityAttribute.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.RegionValidityAttribute>(new ZserioElementFactory_attributes()),
                    zserio.runtime.array.ArrayType.AUTO);
            attributes_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = roads_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isAttributesUsed())
        {
            endBitPosition = attributes_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = roads_.initializeOffsets(zserioContext.getRoads(), endBitPosition);
        endBitPosition += 1;
        if (isAttributesUsed())
        {
            endBitPosition = attributes_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        roads_.write(out);

        if (isAttributesUsed())
        {
            out.writeBool(true);
            attributes_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        roads_.write(zserioContext.getRoads(), out);

        if (isAttributesUsed())
        {
            out.writeBool(true);
            attributes_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_attributes implements zserio.runtime.array.PackableElementFactory<nds.rules.types.RegionValidityAttribute>
    {
        @Override
        public nds.rules.types.RegionValidityAttribute create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.RegionValidityAttribute(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.RegionValidityAttribute.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.RegionValidityAttribute create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.RegionValidityAttribute(context, in);
        }
    }

    private final byte shift_;
    private nds.core.types.RoadTypeSet roads_;
    private zserio.runtime.array.Array attributes_;
}
