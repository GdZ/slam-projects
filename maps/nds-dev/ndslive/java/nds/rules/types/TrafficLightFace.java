/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightFace implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            face_ = new nds.core.geometry.BoundingPolygon3D.ZserioPackingContext();
        }

        public nds.core.geometry.BoundingPolygon3D.ZserioPackingContext getFace()
        {
            return face_;
        }

        private nds.core.geometry.BoundingPolygon3D.ZserioPackingContext face_;
    };

    public TrafficLightFace(
            boolean hasLensPositions_)
    {
        this.hasLensPositions_ = hasLensPositions_;
    }

    public TrafficLightFace(zserio.runtime.io.BitStreamReader in,
            boolean hasLensPositions_)
            throws java.io.IOException
    {
        this.hasLensPositions_ = hasLensPositions_;

        read(in);
    }

    public TrafficLightFace(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            boolean hasLensPositions_)
            throws java.io.IOException
    {
        this.hasLensPositions_ = hasLensPositions_;

        read(context, in);
    }

    public TrafficLightFace(
            boolean hasLensPositions_,
            nds.core.geometry.BoundingPolygon3D face_,
            nds.core.geometry.Position3D[] lensPositions_)
    {
        this(hasLensPositions_);

        setFace(face_);
        setLensPositions(lensPositions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        face_.initPackingContext(zserioContext.getFace());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += face_.bitSizeOf(endBitPosition);
        endBitPosition += lensPositions_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += face_.bitSizeOf(zserioContext.getFace(), endBitPosition);
        endBitPosition += lensPositions_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasLensPositions()
    {
        return this.hasLensPositions_;
    }

    public nds.core.geometry.BoundingPolygon3D getFace()
    {
        return face_;
    }

    public void setFace(nds.core.geometry.BoundingPolygon3D face_)
    {
        this.face_ = face_;
    }

    public nds.core.geometry.Position3D[] getLensPositions()
    {
        return (lensPositions_ == null) ? null : lensPositions_.getRawArray();
    }

    public void setLensPositions(nds.core.geometry.Position3D[] lensPositions_)
    {
        this.lensPositions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class, lensPositions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_lensPositions()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightFace)
        {
            final TrafficLightFace that = (TrafficLightFace)obj;

            return
                    this.hasLensPositions_ == that.hasLensPositions_ &&
                    ((face_ == null) ? that.face_ == null : face_.equals(that.face_)) &&
                    ((lensPositions_ == null) ? that.lensPositions_ == null : lensPositions_.equals(that.lensPositions_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasLensPositions());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, face_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, lensPositions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        face_ = new nds.core.geometry.BoundingPolygon3D(in, (byte)(0), (byte)(0));

        lensPositions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_lensPositions()),
                zserio.runtime.array.ArrayType.AUTO);
        lensPositions_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        face_ = new nds.core.geometry.BoundingPolygon3D(zserioContext.getFace(), in, (byte)(0), (byte)(0));

        lensPositions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_lensPositions()),
                zserio.runtime.array.ArrayType.AUTO);
        lensPositions_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = face_.initializeOffsets(endBitPosition);
        endBitPosition = lensPositions_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = face_.initializeOffsets(zserioContext.getFace(), endBitPosition);
        endBitPosition = lensPositions_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (face_.getXyShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter xyShift for field TrafficLightFace.face: " +
                    face_.getXyShift() + " != " + (byte)(0) + "!");
        }
        if (face_.getZShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter zShift for field TrafficLightFace.face: " +
                    face_.getZShift() + " != " + (byte)(0) + "!");
        }
        face_.write(out);

        lensPositions_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        face_.write(zserioContext.getFace(), out);

        lensPositions_.writePacked(out);
    }

    private static final class ZserioElementFactory_lensPositions implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Position3D>
    {
        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(in, (byte)(0), (byte)(0));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Position3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(context, in, (byte)(0), (byte)(0));
        }
    }

    private final boolean hasLensPositions_;
    private nds.core.geometry.BoundingPolygon3D face_;
    private zserio.runtime.array.Array lensPositions_;
}
