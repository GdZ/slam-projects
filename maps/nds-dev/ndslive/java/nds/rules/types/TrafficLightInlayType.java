/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public enum TrafficLightInlayType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    UNKNOWN((short)0),
    NONE((short)1),
    ARROW_UP((short)2),
    ARROW_DOWN((short)3),
    ARROW_LEFT((short)4),
    ARROW_UP_LEFT((short)5),
    ARROW_DOWN_LEFT((short)6),
    ARROW_RIGHT((short)7),
    ARROW_UP_RIGHT((short)8),
    ARROW_DOWN_RIGHT((short)9),
    ARROW_U_TURN((short)10),
    ARROW_LEFT_RIGHT((short)11),
    ARROW_STRAIGHT_LEFT((short)12),
    ARROW_STRAIGHT_RIGHT((short)13),
    ARROW_STRAIGHT_LEFT_RIGHT((short)14),
    PEDESTRIAN((short)15),
    BICYCLE((short)16),
    PEDESTRIAN_BICYCLE((short)17),
    HAND((short)18),
    TRAM((short)19),
    BUS((short)20),
    COUNTDOWN((short)21),
    BAR_HORIZONTAL((short)22),
    BAR_STRAIGHT((short)23),
    BAR_LEFT((short)24),
    BAR_RIGHT((short)25),
    BAR_DOUBLE_STRAIGHT((short)26),
    TRIANGLE((short)27),
    CIRCLE((short)28),
    PLUS((short)29),
    CROSS((short)30),
    CIRCLE_RING((short)31),
    CIRCLE_MATRIX((short)32),
    LETTER((short)33),
    TEXT((short)34),
    NUMBERS((short)35),
    OTHER((short)36);

    private TrafficLightInlayType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static TrafficLightInlayType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static TrafficLightInlayType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static TrafficLightInlayType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return UNKNOWN;
            case (short)1:
                return NONE;
            case (short)2:
                return ARROW_UP;
            case (short)3:
                return ARROW_DOWN;
            case (short)4:
                return ARROW_LEFT;
            case (short)5:
                return ARROW_UP_LEFT;
            case (short)6:
                return ARROW_DOWN_LEFT;
            case (short)7:
                return ARROW_RIGHT;
            case (short)8:
                return ARROW_UP_RIGHT;
            case (short)9:
                return ARROW_DOWN_RIGHT;
            case (short)10:
                return ARROW_U_TURN;
            case (short)11:
                return ARROW_LEFT_RIGHT;
            case (short)12:
                return ARROW_STRAIGHT_LEFT;
            case (short)13:
                return ARROW_STRAIGHT_RIGHT;
            case (short)14:
                return ARROW_STRAIGHT_LEFT_RIGHT;
            case (short)15:
                return PEDESTRIAN;
            case (short)16:
                return BICYCLE;
            case (short)17:
                return PEDESTRIAN_BICYCLE;
            case (short)18:
                return HAND;
            case (short)19:
                return TRAM;
            case (short)20:
                return BUS;
            case (short)21:
                return COUNTDOWN;
            case (short)22:
                return BAR_HORIZONTAL;
            case (short)23:
                return BAR_STRAIGHT;
            case (short)24:
                return BAR_LEFT;
            case (short)25:
                return BAR_RIGHT;
            case (short)26:
                return BAR_DOUBLE_STRAIGHT;
            case (short)27:
                return TRIANGLE;
            case (short)28:
                return CIRCLE;
            case (short)29:
                return PLUS;
            case (short)30:
                return CROSS;
            case (short)31:
                return CIRCLE_RING;
            case (short)32:
                return CIRCLE_MATRIX;
            case (short)33:
                return LETTER;
            case (short)34:
                return TEXT;
            case (short)35:
                return NUMBERS;
            case (short)36:
                return OTHER;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration TrafficLightInlayType: " + value + "!");
        }
    }

    public static TrafficLightInlayType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("UNKNOWN"))
            return UNKNOWN;
        if (itemName.equals("NONE"))
            return NONE;
        if (itemName.equals("ARROW_UP"))
            return ARROW_UP;
        if (itemName.equals("ARROW_DOWN"))
            return ARROW_DOWN;
        if (itemName.equals("ARROW_LEFT"))
            return ARROW_LEFT;
        if (itemName.equals("ARROW_UP_LEFT"))
            return ARROW_UP_LEFT;
        if (itemName.equals("ARROW_DOWN_LEFT"))
            return ARROW_DOWN_LEFT;
        if (itemName.equals("ARROW_RIGHT"))
            return ARROW_RIGHT;
        if (itemName.equals("ARROW_UP_RIGHT"))
            return ARROW_UP_RIGHT;
        if (itemName.equals("ARROW_DOWN_RIGHT"))
            return ARROW_DOWN_RIGHT;
        if (itemName.equals("ARROW_U_TURN"))
            return ARROW_U_TURN;
        if (itemName.equals("ARROW_LEFT_RIGHT"))
            return ARROW_LEFT_RIGHT;
        if (itemName.equals("ARROW_STRAIGHT_LEFT"))
            return ARROW_STRAIGHT_LEFT;
        if (itemName.equals("ARROW_STRAIGHT_RIGHT"))
            return ARROW_STRAIGHT_RIGHT;
        if (itemName.equals("ARROW_STRAIGHT_LEFT_RIGHT"))
            return ARROW_STRAIGHT_LEFT_RIGHT;
        if (itemName.equals("PEDESTRIAN"))
            return PEDESTRIAN;
        if (itemName.equals("BICYCLE"))
            return BICYCLE;
        if (itemName.equals("PEDESTRIAN_BICYCLE"))
            return PEDESTRIAN_BICYCLE;
        if (itemName.equals("HAND"))
            return HAND;
        if (itemName.equals("TRAM"))
            return TRAM;
        if (itemName.equals("BUS"))
            return BUS;
        if (itemName.equals("COUNTDOWN"))
            return COUNTDOWN;
        if (itemName.equals("BAR_HORIZONTAL"))
            return BAR_HORIZONTAL;
        if (itemName.equals("BAR_STRAIGHT"))
            return BAR_STRAIGHT;
        if (itemName.equals("BAR_LEFT"))
            return BAR_LEFT;
        if (itemName.equals("BAR_RIGHT"))
            return BAR_RIGHT;
        if (itemName.equals("BAR_DOUBLE_STRAIGHT"))
            return BAR_DOUBLE_STRAIGHT;
        if (itemName.equals("TRIANGLE"))
            return TRIANGLE;
        if (itemName.equals("CIRCLE"))
            return CIRCLE;
        if (itemName.equals("PLUS"))
            return PLUS;
        if (itemName.equals("CROSS"))
            return CROSS;
        if (itemName.equals("CIRCLE_RING"))
            return CIRCLE_RING;
        if (itemName.equals("CIRCLE_MATRIX"))
            return CIRCLE_MATRIX;
        if (itemName.equals("LETTER"))
            return LETTER;
        if (itemName.equals("TEXT"))
            return TEXT;
        if (itemName.equals("NUMBERS"))
            return NUMBERS;
        if (itemName.equals("OTHER"))
            return OTHER;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration TrafficLightInlayType!");
    }

    private short value;
}
