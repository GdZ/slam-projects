/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class SolidLineCrossingRules implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public SolidLineCrossingRules()
    {
    }

    public SolidLineCrossingRules(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SolidLineCrossingRules(
            boolean duringEmergencies_,
            boolean enterShoulderLane_,
            boolean enterBusLane_,
            boolean overtakeSlowTraffic_,
            boolean enterPremisesOrSideRoads_,
            boolean avoidObstacles_)
    {
        setDuringEmergencies(duringEmergencies_);
        setEnterShoulderLane(enterShoulderLane_);
        setEnterBusLane(enterBusLane_);
        setOvertakeSlowTraffic(overtakeSlowTraffic_);
        setEnterPremisesOrSideRoads(enterPremisesOrSideRoads_);
        setAvoidObstacles(avoidObstacles_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getDuringEmergencies()
    {
        return duringEmergencies_;
    }

    public void setDuringEmergencies(boolean duringEmergencies_)
    {
        this.duringEmergencies_ = duringEmergencies_;
    }

    public boolean getEnterShoulderLane()
    {
        return enterShoulderLane_;
    }

    public void setEnterShoulderLane(boolean enterShoulderLane_)
    {
        this.enterShoulderLane_ = enterShoulderLane_;
    }

    public boolean getEnterBusLane()
    {
        return enterBusLane_;
    }

    public void setEnterBusLane(boolean enterBusLane_)
    {
        this.enterBusLane_ = enterBusLane_;
    }

    public boolean getOvertakeSlowTraffic()
    {
        return overtakeSlowTraffic_;
    }

    public void setOvertakeSlowTraffic(boolean overtakeSlowTraffic_)
    {
        this.overtakeSlowTraffic_ = overtakeSlowTraffic_;
    }

    public boolean getEnterPremisesOrSideRoads()
    {
        return enterPremisesOrSideRoads_;
    }

    public void setEnterPremisesOrSideRoads(boolean enterPremisesOrSideRoads_)
    {
        this.enterPremisesOrSideRoads_ = enterPremisesOrSideRoads_;
    }

    public boolean getAvoidObstacles()
    {
        return avoidObstacles_;
    }

    public void setAvoidObstacles(boolean avoidObstacles_)
    {
        this.avoidObstacles_ = avoidObstacles_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SolidLineCrossingRules)
        {
            final SolidLineCrossingRules that = (SolidLineCrossingRules)obj;

            return
                    duringEmergencies_ == that.duringEmergencies_ &&
                    enterShoulderLane_ == that.enterShoulderLane_ &&
                    enterBusLane_ == that.enterBusLane_ &&
                    overtakeSlowTraffic_ == that.overtakeSlowTraffic_ &&
                    enterPremisesOrSideRoads_ == that.enterPremisesOrSideRoads_ &&
                    avoidObstacles_ == that.avoidObstacles_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, duringEmergencies_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, enterShoulderLane_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, enterBusLane_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, overtakeSlowTraffic_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, enterPremisesOrSideRoads_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, avoidObstacles_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        duringEmergencies_ = in.readBool();

        enterShoulderLane_ = in.readBool();

        enterBusLane_ = in.readBool();

        overtakeSlowTraffic_ = in.readBool();

        enterPremisesOrSideRoads_ = in.readBool();

        avoidObstacles_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(duringEmergencies_);

        out.writeBool(enterShoulderLane_);

        out.writeBool(enterBusLane_);

        out.writeBool(overtakeSlowTraffic_);

        out.writeBool(enterPremisesOrSideRoads_);

        out.writeBool(avoidObstacles_);
    }

    private boolean duringEmergencies_;
    private boolean enterShoulderLane_;
    private boolean enterBusLane_;
    private boolean overtakeSlowTraffic_;
    private boolean enterPremisesOrSideRoads_;
    private boolean avoidObstacles_;
}
