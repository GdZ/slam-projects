/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightLensDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            color_ = new zserio.runtime.array.DeltaContext();
            inlayType_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getColor()
        {
            return color_;
        }

        public zserio.runtime.array.DeltaContext getInlayType()
        {
            return inlayType_;
        }

        private zserio.runtime.array.DeltaContext color_;
        private zserio.runtime.array.DeltaContext inlayType_;
    };

    public TrafficLightLensDetails()
    {
    }

    public TrafficLightLensDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficLightLensDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficLightLensDetails(
            nds.rules.types.TrafficLightLensColor color_,
            boolean isInverted_,
            nds.rules.types.TrafficLightInlayType inlayType_)
    {
        setColor(color_);
        setIsInverted(isInverted_);
        setInlayType(inlayType_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        color_.initPackingContext(zserioContext.getColor());
        inlayType_.initPackingContext(zserioContext.getInlayType());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += color_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += inlayType_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += color_.bitSizeOf(zserioContext.getColor(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += inlayType_.bitSizeOf(zserioContext.getInlayType(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.types.TrafficLightLensColor getColor()
    {
        return color_;
    }

    public void setColor(nds.rules.types.TrafficLightLensColor color_)
    {
        this.color_ = color_;
    }

    public boolean getIsInverted()
    {
        return isInverted_;
    }

    public void setIsInverted(boolean isInverted_)
    {
        this.isInverted_ = isInverted_;
    }

    public nds.rules.types.TrafficLightInlayType getInlayType()
    {
        return inlayType_;
    }

    public void setInlayType(nds.rules.types.TrafficLightInlayType inlayType_)
    {
        this.inlayType_ = inlayType_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightLensDetails)
        {
            final TrafficLightLensDetails that = (TrafficLightLensDetails)obj;

            return
                    ((color_ == null) ? that.color_ == null : color_.getValue() == that.color_.getValue()) &&
                    isInverted_ == that.isInverted_ &&
                    ((inlayType_ == null) ? that.inlayType_ == null : inlayType_.getValue() == that.inlayType_.getValue());
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, color_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isInverted_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, inlayType_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        color_ = nds.rules.types.TrafficLightLensColor.readEnum(in);

        isInverted_ = in.readBool();

        inlayType_ = nds.rules.types.TrafficLightInlayType.readEnum(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        color_ = nds.rules.types.TrafficLightLensColor.readEnum(zserioContext.getColor(), in);

        isInverted_ = in.readBool();

        inlayType_ = nds.rules.types.TrafficLightInlayType.readEnum(zserioContext.getInlayType(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += color_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += inlayType_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = color_.initializeOffsets(zserioContext.getColor(), endBitPosition);
        endBitPosition += 1;
        endBitPosition = inlayType_.initializeOffsets(zserioContext.getInlayType(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        color_.write(out);

        out.writeBool(isInverted_);

        inlayType_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        color_.write(zserioContext.getColor(), out);

        out.writeBool(isInverted_);

        inlayType_.write(zserioContext.getInlayType(), out);
    }

    private nds.rules.types.TrafficLightLensColor color_;
    private boolean isInverted_;
    private nds.rules.types.TrafficLightInlayType inlayType_;
}
