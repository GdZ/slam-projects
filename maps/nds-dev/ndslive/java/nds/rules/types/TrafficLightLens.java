/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightLens implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            group_ = new zserio.runtime.array.DeltaContext();
            lensType_ = new zserio.runtime.array.DeltaContext();
            lensDetails_ = new nds.rules.types.TrafficLightLensDetails.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getGroup()
        {
            return group_;
        }

        public zserio.runtime.array.DeltaContext getLensType()
        {
            return lensType_;
        }

        public nds.rules.types.TrafficLightLensDetails.ZserioPackingContext getLensDetails()
        {
            return lensDetails_;
        }

        private zserio.runtime.array.DeltaContext group_;
        private zserio.runtime.array.DeltaContext lensType_;
        private nds.rules.types.TrafficLightLensDetails.ZserioPackingContext lensDetails_;
    };

    public TrafficLightLens()
    {
    }

    public TrafficLightLens(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficLightLens(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficLightLens(
            boolean groupedLens_,
            java.lang.Byte group_,
            nds.rules.types.TrafficLightLensType lensType_,
            nds.rules.types.TrafficLightLensDetails lensDetails_,
            nds.rules.types.TrafficLightLensDetails[] lensDetailList_)
    {
        setGroupedLens(groupedLens_);
        setGroup(group_);
        setLensType(lensType_);
        setLensDetails(lensDetails_);
        setLensDetailList(lensDetailList_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isGroupUsed())
        {
            zserioContext.getGroup().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(group_));
        }
        lensType_.initPackingContext(zserioContext.getLensType());
        if (isLensDetailsUsed())
        {
            lensDetails_.initPackingContext(zserioContext.getLensDetails());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGroupUsed())
        {
            endBitPosition += 4;
        }
        endBitPosition += lensType_.bitSizeOf(endBitPosition);
        if (isLensDetailsUsed())
        {
            endBitPosition += lensDetails_.bitSizeOf(endBitPosition);
        }
        if (isLensDetailListUsed())
        {
            endBitPosition += lensDetailList_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGroupUsed())
        {
            endBitPosition += zserioContext.getGroup().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(group_));
        }
        endBitPosition += lensType_.bitSizeOf(zserioContext.getLensType(), endBitPosition);
        if (isLensDetailsUsed())
        {
            endBitPosition += lensDetails_.bitSizeOf(zserioContext.getLensDetails(), endBitPosition);
        }
        if (isLensDetailListUsed())
        {
            endBitPosition += lensDetailList_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getGroupedLens()
    {
        return groupedLens_;
    }

    public void setGroupedLens(boolean groupedLens_)
    {
        this.groupedLens_ = groupedLens_;
    }

    public java.lang.Byte getGroup()
    {
        return group_;
    }

    public void setGroup(java.lang.Byte group_)
    {
        this.group_ = group_;
    }

    public boolean isGroupUsed()
    {
        return (getGroupedLens());
    }

    public boolean isGroupSet()
    {
        return (group_ != null);
    }

    public void resetGroup()
    {
        this.group_ = null;
    }

    public nds.rules.types.TrafficLightLensType getLensType()
    {
        return lensType_;
    }

    public void setLensType(nds.rules.types.TrafficLightLensType lensType_)
    {
        this.lensType_ = lensType_;
    }

    public nds.rules.types.TrafficLightLensDetails getLensDetails()
    {
        return lensDetails_;
    }

    public void setLensDetails(nds.rules.types.TrafficLightLensDetails lensDetails_)
    {
        this.lensDetails_ = lensDetails_;
    }

    public boolean isLensDetailsUsed()
    {
        return (getLensType() != nds.rules.types.TrafficLightLensType.MIXED);
    }

    public boolean isLensDetailsSet()
    {
        return (lensDetails_ != null);
    }

    public void resetLensDetails()
    {
        this.lensDetails_ = null;
    }

    public nds.rules.types.TrafficLightLensDetails[] getLensDetailList()
    {
        return (lensDetailList_ == null) ? null : lensDetailList_.getRawArray();
    }

    public void setLensDetailList(nds.rules.types.TrafficLightLensDetails[] lensDetailList_)
    {
        if (lensDetailList_ == null)
        {
            this.lensDetailList_ = null;
        }
        else
        {
            this.lensDetailList_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLensDetails.class, lensDetailList_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLensDetails>(new ZserioElementFactory_lensDetailList()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isLensDetailListUsed()
    {
        return (getLensType() == nds.rules.types.TrafficLightLensType.MIXED);
    }

    public boolean isLensDetailListSet()
    {
        return (lensDetailList_ != null);
    }

    public void resetLensDetailList()
    {
        this.lensDetailList_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightLens)
        {
            final TrafficLightLens that = (TrafficLightLens)obj;

            return
                    groupedLens_ == that.groupedLens_ &&
                    ((!isGroupUsed()) ? !that.isGroupUsed() :
                        ((group_ == null) ? that.group_ == null : group_.equals(that.group_))) &&
                    ((lensType_ == null) ? that.lensType_ == null : lensType_.getValue() == that.lensType_.getValue()) &&
                    ((!isLensDetailsUsed()) ? !that.isLensDetailsUsed() :
                        ((lensDetails_ == null) ? that.lensDetails_ == null : lensDetails_.equals(that.lensDetails_))) &&
                    ((!isLensDetailListUsed()) ? !that.isLensDetailListUsed() :
                        ((lensDetailList_ == null) ? that.lensDetailList_ == null : lensDetailList_.equals(that.lensDetailList_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, groupedLens_);
        if (isGroupUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, group_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, lensType_);
        if (isLensDetailsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lensDetails_);
        if (isLensDetailListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lensDetailList_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        groupedLens_ = in.readBool();

        if (getGroupedLens())
        {
            group_ = (byte)in.readBits(4);
        }

        lensType_ = nds.rules.types.TrafficLightLensType.readEnum(in);

        if (getLensType() != nds.rules.types.TrafficLightLensType.MIXED)
        {
            lensDetails_ = new nds.rules.types.TrafficLightLensDetails(in);
        }

        if (getLensType() == nds.rules.types.TrafficLightLensType.MIXED)
        {
            lensDetailList_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLensDetails.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLensDetails>(new ZserioElementFactory_lensDetailList()),
                    zserio.runtime.array.ArrayType.AUTO);
            lensDetailList_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        groupedLens_ = in.readBool();

        if (getGroupedLens())
        {
            group_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getGroup().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();
        }

        lensType_ = nds.rules.types.TrafficLightLensType.readEnum(zserioContext.getLensType(), in);

        if (getLensType() != nds.rules.types.TrafficLightLensType.MIXED)
        {
            lensDetails_ = new nds.rules.types.TrafficLightLensDetails(zserioContext.getLensDetails(), in);
        }

        if (getLensType() == nds.rules.types.TrafficLightLensType.MIXED)
        {
            lensDetailList_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLensDetails.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLensDetails>(new ZserioElementFactory_lensDetailList()),
                    zserio.runtime.array.ArrayType.AUTO);
            lensDetailList_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGroupUsed())
        {
            endBitPosition += 4;
        }
        endBitPosition += lensType_.bitSizeOf(endBitPosition);
        if (isLensDetailsUsed())
        {
            endBitPosition = lensDetails_.initializeOffsets(endBitPosition);
        }
        if (isLensDetailListUsed())
        {
            endBitPosition = lensDetailList_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isGroupUsed())
        {
            endBitPosition += zserioContext.getGroup().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(group_));
        }
        endBitPosition = lensType_.initializeOffsets(zserioContext.getLensType(), endBitPosition);
        if (isLensDetailsUsed())
        {
            endBitPosition = lensDetails_.initializeOffsets(zserioContext.getLensDetails(), endBitPosition);
        }
        if (isLensDetailListUsed())
        {
            endBitPosition = lensDetailList_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(groupedLens_);

        if (isGroupUsed())
        {
            out.writeBits(group_, 4);
        }

        lensType_.write(out);

        if (isLensDetailsUsed())
        {
            lensDetails_.write(out);
        }

        if (isLensDetailListUsed())
        {
            lensDetailList_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(groupedLens_);

        if (isGroupUsed())
        {
            zserioContext.getGroup().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(group_));
        }

        lensType_.write(zserioContext.getLensType(), out);

        if (isLensDetailsUsed())
        {
            lensDetails_.write(zserioContext.getLensDetails(), out);
        }

        if (isLensDetailListUsed())
        {
            lensDetailList_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_lensDetailList implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TrafficLightLensDetails>
    {
        @Override
        public nds.rules.types.TrafficLightLensDetails create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightLensDetails(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TrafficLightLensDetails.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TrafficLightLensDetails create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightLensDetails(context, in);
        }
    }

    private boolean groupedLens_;
    private java.lang.Byte group_;
    private nds.rules.types.TrafficLightLensType lensType_;
    private nds.rules.types.TrafficLightLensDetails lensDetails_;
    private zserio.runtime.array.Array lensDetailList_;
}
