/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightLayout implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            constructionType_ = new zserio.runtime.array.DeltaContext();
            numLenses_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getConstructionType()
        {
            return constructionType_;
        }

        public zserio.runtime.array.DeltaContext getNumLenses()
        {
            return numLenses_;
        }

        private zserio.runtime.array.DeltaContext constructionType_;
        private zserio.runtime.array.DeltaContext numLenses_;
    };

    public TrafficLightLayout()
    {
    }

    public TrafficLightLayout(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficLightLayout(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficLightLayout(
            nds.rules.types.TrafficLightConstructionType constructionType_,
            byte numLenses_,
            nds.rules.types.TrafficLightLens[] lensValue_)
    {
        setConstructionType(constructionType_);
        setNumLenses(numLenses_);
        setLensValue(lensValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        constructionType_.initPackingContext(zserioContext.getConstructionType());
        zserioContext.getNumLenses().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += constructionType_.bitSizeOf(endBitPosition);
        endBitPosition += 4;
        endBitPosition += lensValue_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += constructionType_.bitSizeOf(zserioContext.getConstructionType(), endBitPosition);
        endBitPosition += zserioContext.getNumLenses().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
        endBitPosition += lensValue_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.types.TrafficLightConstructionType getConstructionType()
    {
        return constructionType_;
    }

    public void setConstructionType(nds.rules.types.TrafficLightConstructionType constructionType_)
    {
        this.constructionType_ = constructionType_;
    }

    public byte getNumLenses()
    {
        return numLenses_;
    }

    public void setNumLenses(byte numLenses_)
    {
        this.numLenses_ = numLenses_;
    }

    public nds.rules.types.TrafficLightLens[] getLensValue()
    {
        return (lensValue_ == null) ? null : lensValue_.getRawArray();
    }

    public void setLensValue(nds.rules.types.TrafficLightLens[] lensValue_)
    {
        this.lensValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLens.class, lensValue_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLens>(new ZserioElementFactory_lensValue()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightLayout)
        {
            final TrafficLightLayout that = (TrafficLightLayout)obj;

            return
                    ((constructionType_ == null) ? that.constructionType_ == null : constructionType_.getValue() == that.constructionType_.getValue()) &&
                    numLenses_ == that.numLenses_ &&
                    ((lensValue_ == null) ? that.lensValue_ == null : lensValue_.equals(that.lensValue_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, constructionType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLenses_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, lensValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        constructionType_ = nds.rules.types.TrafficLightConstructionType.readEnum(in);

        numLenses_ = (byte)in.readBits(4);

        lensValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLens.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLens>(new ZserioElementFactory_lensValue()),
                zserio.runtime.array.ArrayType.NORMAL);
        lensValue_.read(in, (int)(getNumLenses()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        constructionType_ = nds.rules.types.TrafficLightConstructionType.readEnum(zserioContext.getConstructionType(), in);

        numLenses_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumLenses().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();

        lensValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightLens.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightLens>(new ZserioElementFactory_lensValue()),
                zserio.runtime.array.ArrayType.NORMAL);
        lensValue_.readPacked(in, (int)(getNumLenses()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += constructionType_.bitSizeOf(endBitPosition);
        endBitPosition += 4;
        endBitPosition = lensValue_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = constructionType_.initializeOffsets(zserioContext.getConstructionType(), endBitPosition);
        endBitPosition += zserioContext.getNumLenses().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
        endBitPosition = lensValue_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        constructionType_.write(out);

        out.writeBits(numLenses_, 4);

        if (lensValue_.size() != (int)(getNumLenses()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TrafficLightLayout.lensValue: " +
                    lensValue_.size() + " != " + (int)(getNumLenses()) + "!");
        }
        lensValue_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        constructionType_.write(zserioContext.getConstructionType(), out);

        zserioContext.getNumLenses().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));

        if (lensValue_.size() != (int)(getNumLenses()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TrafficLightLayout.lensValue: " +
                    lensValue_.size() + " != " + (int)(getNumLenses()) + "!");
        }
        lensValue_.writePacked(out);
    }

    private static final class ZserioElementFactory_lensValue implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TrafficLightLens>
    {
        @Override
        public nds.rules.types.TrafficLightLens create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightLens(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TrafficLightLens.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TrafficLightLens create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightLens(context, in);
        }
    }

    private nds.rules.types.TrafficLightConstructionType constructionType_;
    private byte numLenses_;
    private zserio.runtime.array.Array lensValue_;
}
