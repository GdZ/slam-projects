/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TimeZone implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public TimeZone()
    {
    }

    public TimeZone(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TimeZone(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TimeZone(
            java.lang.String olsonId_,
            nds.rules.types.TimeZoneConfiguration[] timeZoneConfigurations_)
    {
        setOlsonId(olsonId_);
        setTimeZoneConfigurations(timeZoneConfigurations_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isOlsonIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(olsonId_);
        }
        endBitPosition += timeZoneConfigurations_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isOlsonIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(olsonId_);
        }
        endBitPosition += timeZoneConfigurations_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.String getOlsonId()
    {
        return olsonId_;
    }

    public void setOlsonId(java.lang.String olsonId_)
    {
        this.olsonId_ = olsonId_;
    }

    public boolean isOlsonIdUsed()
    {
        return isOlsonIdSet();
    }

    public boolean isOlsonIdSet()
    {
        return (olsonId_ != null);
    }

    public void resetOlsonId()
    {
        this.olsonId_ = null;
    }

    public nds.rules.types.TimeZoneConfiguration[] getTimeZoneConfigurations()
    {
        return (timeZoneConfigurations_ == null) ? null : timeZoneConfigurations_.getRawArray();
    }

    public void setTimeZoneConfigurations(nds.rules.types.TimeZoneConfiguration[] timeZoneConfigurations_)
    {
        this.timeZoneConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneConfiguration.class, timeZoneConfigurations_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneConfiguration>(new ZserioElementFactory_timeZoneConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TimeZone)
        {
            final TimeZone that = (TimeZone)obj;

            return
                    ((!isOlsonIdUsed()) ? !that.isOlsonIdUsed() :
                        ((olsonId_ == null) ? that.olsonId_ == null : olsonId_.equals(that.olsonId_))) &&
                    ((timeZoneConfigurations_ == null) ? that.timeZoneConfigurations_ == null : timeZoneConfigurations_.equals(that.timeZoneConfigurations_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        if (isOlsonIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, olsonId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, timeZoneConfigurations_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (in.readBool())
        {
            olsonId_ = in.readString();
        }

        timeZoneConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneConfiguration.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneConfiguration>(new ZserioElementFactory_timeZoneConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
        timeZoneConfigurations_.read(in);

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (in.readBool())
        {
            olsonId_ = in.readString();
        }

        timeZoneConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneConfiguration.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneConfiguration>(new ZserioElementFactory_timeZoneConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
        timeZoneConfigurations_.readPacked(in);

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isOlsonIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(olsonId_);
        }
        endBitPosition = timeZoneConfigurations_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isOlsonIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(olsonId_);
        }
        endBitPosition = timeZoneConfigurations_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        if (isOlsonIdUsed())
        {
            out.writeBool(true);
            out.writeString(olsonId_);
        }
        else
        {
            out.writeBool(false);
        }

        timeZoneConfigurations_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        checkConstraints();

        if (isOlsonIdUsed())
        {
            out.writeBool(true);
            out.writeString(olsonId_);
        }
        else
        {
            out.writeBool(false);
        }

        timeZoneConfigurations_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getTimeZoneConfigurations().length >= 1))
            throw new zserio.runtime.ConstraintError("Constraint violated at TimeZone.timeZoneConfigurations!");
    }

    private static final class ZserioElementFactory_timeZoneConfigurations implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TimeZoneConfiguration>
    {
        @Override
        public nds.rules.types.TimeZoneConfiguration create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneConfiguration(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TimeZoneConfiguration.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TimeZoneConfiguration create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneConfiguration(context, in);
        }
    }

    private java.lang.String olsonId_;
    private zserio.runtime.array.Array timeZoneConfigurations_;
}
