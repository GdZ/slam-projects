/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public enum RegionValidityType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    NUM_LANES((short)0),
    MIN_LANES((short)1),
    PAVED((short)2),
    TRAFFIC_ZONE((short)3),
    PRIORITY_ROAD_CLASS((short)4),
    BEGINNER((short)5),
    NO_MARKINGS((short)6),
    ROAD_MINIMUM_WIDTH((short)7),
    ROAD_MAXIMUM_WIDTH((short)8),
    HAS_STREET_LIGHTS((short)9),
    SHARED_ROAD_SURFACE_WITH_PEDESTRIANS((short)10),
    IN_BUSINESS_DISTRICT((short)11);

    private RegionValidityType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RegionValidityType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static RegionValidityType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static RegionValidityType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return NUM_LANES;
            case (short)1:
                return MIN_LANES;
            case (short)2:
                return PAVED;
            case (short)3:
                return TRAFFIC_ZONE;
            case (short)4:
                return PRIORITY_ROAD_CLASS;
            case (short)5:
                return BEGINNER;
            case (short)6:
                return NO_MARKINGS;
            case (short)7:
                return ROAD_MINIMUM_WIDTH;
            case (short)8:
                return ROAD_MAXIMUM_WIDTH;
            case (short)9:
                return HAS_STREET_LIGHTS;
            case (short)10:
                return SHARED_ROAD_SURFACE_WITH_PEDESTRIANS;
            case (short)11:
                return IN_BUSINESS_DISTRICT;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RegionValidityType: " + value + "!");
        }
    }

    public static RegionValidityType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("NUM_LANES"))
            return NUM_LANES;
        if (itemName.equals("MIN_LANES"))
            return MIN_LANES;
        if (itemName.equals("PAVED"))
            return PAVED;
        if (itemName.equals("TRAFFIC_ZONE"))
            return TRAFFIC_ZONE;
        if (itemName.equals("PRIORITY_ROAD_CLASS"))
            return PRIORITY_ROAD_CLASS;
        if (itemName.equals("BEGINNER"))
            return BEGINNER;
        if (itemName.equals("NO_MARKINGS"))
            return NO_MARKINGS;
        if (itemName.equals("ROAD_MINIMUM_WIDTH"))
            return ROAD_MINIMUM_WIDTH;
        if (itemName.equals("ROAD_MAXIMUM_WIDTH"))
            return ROAD_MAXIMUM_WIDTH;
        if (itemName.equals("HAS_STREET_LIGHTS"))
            return HAS_STREET_LIGHTS;
        if (itemName.equals("SHARED_ROAD_SURFACE_WITH_PEDESTRIANS"))
            return SHARED_ROAD_SURFACE_WITH_PEDESTRIANS;
        if (itemName.equals("IN_BUSINESS_DISTRICT"))
            return IN_BUSINESS_DISTRICT;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RegionValidityType!");
    }

    private short value;
}
