/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class LicensePlateRestrictionRule implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            firstDigitRuleType_ = new zserio.runtime.array.DeltaContext();
            numFirstSpecialDigits_ = new zserio.runtime.array.DeltaContext();
            lastDigitRuleType_ = new zserio.runtime.array.DeltaContext();
            numLastSpecialDigits_ = new zserio.runtime.array.DeltaContext();
            numSpecificPlates_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getFirstDigitRuleType()
        {
            return firstDigitRuleType_;
        }

        public zserio.runtime.array.DeltaContext getNumFirstSpecialDigits()
        {
            return numFirstSpecialDigits_;
        }

        public zserio.runtime.array.DeltaContext getLastDigitRuleType()
        {
            return lastDigitRuleType_;
        }

        public zserio.runtime.array.DeltaContext getNumLastSpecialDigits()
        {
            return numLastSpecialDigits_;
        }

        public zserio.runtime.array.DeltaContext getNumSpecificPlates()
        {
            return numSpecificPlates_;
        }

        private zserio.runtime.array.DeltaContext firstDigitRuleType_;
        private zserio.runtime.array.DeltaContext numFirstSpecialDigits_;
        private zserio.runtime.array.DeltaContext lastDigitRuleType_;
        private zserio.runtime.array.DeltaContext numLastSpecialDigits_;
        private zserio.runtime.array.DeltaContext numSpecificPlates_;
    };

    public LicensePlateRestrictionRule()
    {
    }

    public LicensePlateRestrictionRule(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LicensePlateRestrictionRule(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LicensePlateRestrictionRule(
            boolean noPermitPaper_,
            boolean isSpecificPlates_,
            boolean isFirstDigitRule_,
            boolean isLastDigitRule_,
            nds.rules.types.LicensePlateDigitRuleType firstDigitRuleType_,
            java.lang.Short numFirstSpecialDigits_,
            java.lang.String[] firstSpecialDigit_,
            nds.rules.types.LicensePlateDigitRuleType lastDigitRuleType_,
            java.lang.Short numLastSpecialDigits_,
            java.lang.String[] lastSpecialDigit_,
            java.lang.Short numSpecificPlates_,
            java.lang.String[] specificPlates_)
    {
        setNoPermitPaper(noPermitPaper_);
        setIsSpecificPlates(isSpecificPlates_);
        setIsFirstDigitRule(isFirstDigitRule_);
        setIsLastDigitRule(isLastDigitRule_);
        setFirstDigitRuleType(firstDigitRuleType_);
        setNumFirstSpecialDigits(numFirstSpecialDigits_);
        setFirstSpecialDigit(firstSpecialDigit_);
        setLastDigitRuleType(lastDigitRuleType_);
        setNumLastSpecialDigits(numLastSpecialDigits_);
        setLastSpecialDigit(lastSpecialDigit_);
        setNumSpecificPlates(numSpecificPlates_);
        setSpecificPlates(specificPlates_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isFirstDigitRuleTypeUsed())
        {
            firstDigitRuleType_.initPackingContext(zserioContext.getFirstDigitRuleType());
        }
        if (isNumFirstSpecialDigitsUsed())
        {
            zserioContext.getNumFirstSpecialDigits().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numFirstSpecialDigits_));
        }
        if (isLastDigitRuleTypeUsed())
        {
            lastDigitRuleType_.initPackingContext(zserioContext.getLastDigitRuleType());
        }
        if (isNumLastSpecialDigitsUsed())
        {
            zserioContext.getNumLastSpecialDigits().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLastSpecialDigits_));
        }
        if (isNumSpecificPlatesUsed())
        {
            zserioContext.getNumSpecificPlates().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSpecificPlates_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isFirstDigitRuleTypeUsed())
        {
            endBitPosition += firstDigitRuleType_.bitSizeOf(endBitPosition);
        }
        if (isNumFirstSpecialDigitsUsed())
        {
            endBitPosition += 8;
        }
        if (isFirstSpecialDigitUsed())
        {
            endBitPosition += firstSpecialDigit_.bitSizeOf(endBitPosition);
        }
        if (isLastDigitRuleTypeUsed())
        {
            endBitPosition += lastDigitRuleType_.bitSizeOf(endBitPosition);
        }
        if (isNumLastSpecialDigitsUsed())
        {
            endBitPosition += 8;
        }
        if (isLastSpecialDigitUsed())
        {
            endBitPosition += lastSpecialDigit_.bitSizeOf(endBitPosition);
        }
        if (isNumSpecificPlatesUsed())
        {
            endBitPosition += 8;
        }
        if (isSpecificPlatesUsed())
        {
            endBitPosition += specificPlates_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isFirstDigitRuleTypeUsed())
        {
            endBitPosition += firstDigitRuleType_.bitSizeOf(zserioContext.getFirstDigitRuleType(), endBitPosition);
        }
        if (isNumFirstSpecialDigitsUsed())
        {
            endBitPosition += zserioContext.getNumFirstSpecialDigits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numFirstSpecialDigits_));
        }
        if (isFirstSpecialDigitUsed())
        {
            endBitPosition += firstSpecialDigit_.bitSizeOf(endBitPosition);
        }
        if (isLastDigitRuleTypeUsed())
        {
            endBitPosition += lastDigitRuleType_.bitSizeOf(zserioContext.getLastDigitRuleType(), endBitPosition);
        }
        if (isNumLastSpecialDigitsUsed())
        {
            endBitPosition += zserioContext.getNumLastSpecialDigits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLastSpecialDigits_));
        }
        if (isLastSpecialDigitUsed())
        {
            endBitPosition += lastSpecialDigit_.bitSizeOf(endBitPosition);
        }
        if (isNumSpecificPlatesUsed())
        {
            endBitPosition += zserioContext.getNumSpecificPlates().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSpecificPlates_));
        }
        if (isSpecificPlatesUsed())
        {
            endBitPosition += specificPlates_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getNoPermitPaper()
    {
        return noPermitPaper_;
    }

    public void setNoPermitPaper(boolean noPermitPaper_)
    {
        this.noPermitPaper_ = noPermitPaper_;
    }

    public boolean getIsSpecificPlates()
    {
        return isSpecificPlates_;
    }

    public void setIsSpecificPlates(boolean isSpecificPlates_)
    {
        this.isSpecificPlates_ = isSpecificPlates_;
    }

    public boolean getIsFirstDigitRule()
    {
        return isFirstDigitRule_;
    }

    public void setIsFirstDigitRule(boolean isFirstDigitRule_)
    {
        this.isFirstDigitRule_ = isFirstDigitRule_;
    }

    public boolean getIsLastDigitRule()
    {
        return isLastDigitRule_;
    }

    public void setIsLastDigitRule(boolean isLastDigitRule_)
    {
        this.isLastDigitRule_ = isLastDigitRule_;
    }

    public nds.rules.types.LicensePlateDigitRuleType getFirstDigitRuleType()
    {
        return firstDigitRuleType_;
    }

    public void setFirstDigitRuleType(nds.rules.types.LicensePlateDigitRuleType firstDigitRuleType_)
    {
        this.firstDigitRuleType_ = firstDigitRuleType_;
    }

    public boolean isFirstDigitRuleTypeUsed()
    {
        return (getIsFirstDigitRule() == true);
    }

    public boolean isFirstDigitRuleTypeSet()
    {
        return (firstDigitRuleType_ != null);
    }

    public void resetFirstDigitRuleType()
    {
        this.firstDigitRuleType_ = null;
    }

    public java.lang.Short getNumFirstSpecialDigits()
    {
        return numFirstSpecialDigits_;
    }

    public void setNumFirstSpecialDigits(java.lang.Short numFirstSpecialDigits_)
    {
        this.numFirstSpecialDigits_ = numFirstSpecialDigits_;
    }

    public boolean isNumFirstSpecialDigitsUsed()
    {
        return (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT);
    }

    public boolean isNumFirstSpecialDigitsSet()
    {
        return (numFirstSpecialDigits_ != null);
    }

    public void resetNumFirstSpecialDigits()
    {
        this.numFirstSpecialDigits_ = null;
    }

    public java.lang.String[] getFirstSpecialDigit()
    {
        return (firstSpecialDigit_ == null) ? null : firstSpecialDigit_.getRawArray();
    }

    public void setFirstSpecialDigit(java.lang.String[] firstSpecialDigit_)
    {
        if (firstSpecialDigit_ == null)
        {
            this.firstSpecialDigit_ = null;
        }
        else
        {
            this.firstSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(firstSpecialDigit_),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isFirstSpecialDigitUsed()
    {
        return (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT);
    }

    public boolean isFirstSpecialDigitSet()
    {
        return (firstSpecialDigit_ != null);
    }

    public void resetFirstSpecialDigit()
    {
        this.firstSpecialDigit_ = null;
    }

    public nds.rules.types.LicensePlateDigitRuleType getLastDigitRuleType()
    {
        return lastDigitRuleType_;
    }

    public void setLastDigitRuleType(nds.rules.types.LicensePlateDigitRuleType lastDigitRuleType_)
    {
        this.lastDigitRuleType_ = lastDigitRuleType_;
    }

    public boolean isLastDigitRuleTypeUsed()
    {
        return (getIsLastDigitRule() == true);
    }

    public boolean isLastDigitRuleTypeSet()
    {
        return (lastDigitRuleType_ != null);
    }

    public void resetLastDigitRuleType()
    {
        this.lastDigitRuleType_ = null;
    }

    public java.lang.Short getNumLastSpecialDigits()
    {
        return numLastSpecialDigits_;
    }

    public void setNumLastSpecialDigits(java.lang.Short numLastSpecialDigits_)
    {
        this.numLastSpecialDigits_ = numLastSpecialDigits_;
    }

    public boolean isNumLastSpecialDigitsUsed()
    {
        return (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT);
    }

    public boolean isNumLastSpecialDigitsSet()
    {
        return (numLastSpecialDigits_ != null);
    }

    public void resetNumLastSpecialDigits()
    {
        this.numLastSpecialDigits_ = null;
    }

    public java.lang.String[] getLastSpecialDigit()
    {
        return (lastSpecialDigit_ == null) ? null : lastSpecialDigit_.getRawArray();
    }

    public void setLastSpecialDigit(java.lang.String[] lastSpecialDigit_)
    {
        if (lastSpecialDigit_ == null)
        {
            this.lastSpecialDigit_ = null;
        }
        else
        {
            this.lastSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(lastSpecialDigit_),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isLastSpecialDigitUsed()
    {
        return (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT);
    }

    public boolean isLastSpecialDigitSet()
    {
        return (lastSpecialDigit_ != null);
    }

    public void resetLastSpecialDigit()
    {
        this.lastSpecialDigit_ = null;
    }

    public java.lang.Short getNumSpecificPlates()
    {
        return numSpecificPlates_;
    }

    public void setNumSpecificPlates(java.lang.Short numSpecificPlates_)
    {
        this.numSpecificPlates_ = numSpecificPlates_;
    }

    public boolean isNumSpecificPlatesUsed()
    {
        return (getIsSpecificPlates() == true);
    }

    public boolean isNumSpecificPlatesSet()
    {
        return (numSpecificPlates_ != null);
    }

    public void resetNumSpecificPlates()
    {
        this.numSpecificPlates_ = null;
    }

    public java.lang.String[] getSpecificPlates()
    {
        return (specificPlates_ == null) ? null : specificPlates_.getRawArray();
    }

    public void setSpecificPlates(java.lang.String[] specificPlates_)
    {
        if (specificPlates_ == null)
        {
            this.specificPlates_ = null;
        }
        else
        {
            this.specificPlates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(specificPlates_),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isSpecificPlatesUsed()
    {
        return (getIsSpecificPlates() == true);
    }

    public boolean isSpecificPlatesSet()
    {
        return (specificPlates_ != null);
    }

    public void resetSpecificPlates()
    {
        this.specificPlates_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LicensePlateRestrictionRule)
        {
            final LicensePlateRestrictionRule that = (LicensePlateRestrictionRule)obj;

            return
                    noPermitPaper_ == that.noPermitPaper_ &&
                    isSpecificPlates_ == that.isSpecificPlates_ &&
                    isFirstDigitRule_ == that.isFirstDigitRule_ &&
                    isLastDigitRule_ == that.isLastDigitRule_ &&
                    ((!isFirstDigitRuleTypeUsed()) ? !that.isFirstDigitRuleTypeUsed() :
                        ((firstDigitRuleType_ == null) ? that.firstDigitRuleType_ == null : firstDigitRuleType_.getValue() == that.firstDigitRuleType_.getValue())) &&
                    ((!isNumFirstSpecialDigitsUsed()) ? !that.isNumFirstSpecialDigitsUsed() :
                        ((numFirstSpecialDigits_ == null) ? that.numFirstSpecialDigits_ == null : numFirstSpecialDigits_.equals(that.numFirstSpecialDigits_))) &&
                    ((!isFirstSpecialDigitUsed()) ? !that.isFirstSpecialDigitUsed() :
                        ((firstSpecialDigit_ == null) ? that.firstSpecialDigit_ == null : firstSpecialDigit_.equals(that.firstSpecialDigit_))) &&
                    ((!isLastDigitRuleTypeUsed()) ? !that.isLastDigitRuleTypeUsed() :
                        ((lastDigitRuleType_ == null) ? that.lastDigitRuleType_ == null : lastDigitRuleType_.getValue() == that.lastDigitRuleType_.getValue())) &&
                    ((!isNumLastSpecialDigitsUsed()) ? !that.isNumLastSpecialDigitsUsed() :
                        ((numLastSpecialDigits_ == null) ? that.numLastSpecialDigits_ == null : numLastSpecialDigits_.equals(that.numLastSpecialDigits_))) &&
                    ((!isLastSpecialDigitUsed()) ? !that.isLastSpecialDigitUsed() :
                        ((lastSpecialDigit_ == null) ? that.lastSpecialDigit_ == null : lastSpecialDigit_.equals(that.lastSpecialDigit_))) &&
                    ((!isNumSpecificPlatesUsed()) ? !that.isNumSpecificPlatesUsed() :
                        ((numSpecificPlates_ == null) ? that.numSpecificPlates_ == null : numSpecificPlates_.equals(that.numSpecificPlates_))) &&
                    ((!isSpecificPlatesUsed()) ? !that.isSpecificPlatesUsed() :
                        ((specificPlates_ == null) ? that.specificPlates_ == null : specificPlates_.equals(that.specificPlates_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, noPermitPaper_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isSpecificPlates_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isFirstDigitRule_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isLastDigitRule_);
        if (isFirstDigitRuleTypeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, firstDigitRuleType_);
        if (isNumFirstSpecialDigitsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numFirstSpecialDigits_);
        if (isFirstSpecialDigitUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, firstSpecialDigit_);
        if (isLastDigitRuleTypeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lastDigitRuleType_);
        if (isNumLastSpecialDigitsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLastSpecialDigits_);
        if (isLastSpecialDigitUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lastSpecialDigit_);
        if (isNumSpecificPlatesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSpecificPlates_);
        if (isSpecificPlatesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, specificPlates_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        noPermitPaper_ = in.readBool();

        isSpecificPlates_ = in.readBool();

        isFirstDigitRule_ = in.readBool();

        isLastDigitRule_ = in.readBool();

        if (getIsFirstDigitRule() == true)
        {
            firstDigitRuleType_ = nds.rules.types.LicensePlateDigitRuleType.readEnum(in);
        }

        if (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            numFirstSpecialDigits_ = in.readUnsignedByte();
        }

        if (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            firstSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            firstSpecialDigit_.read(in, (int)(getNumFirstSpecialDigits()));
        }

        if (getIsLastDigitRule() == true)
        {
            lastDigitRuleType_ = nds.rules.types.LicensePlateDigitRuleType.readEnum(in);
        }

        if (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            numLastSpecialDigits_ = in.readUnsignedByte();
        }

        if (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            lastSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            lastSpecialDigit_.read(in, (int)(getNumLastSpecialDigits()));
        }

        if (getIsSpecificPlates() == true)
        {
            numSpecificPlates_ = in.readUnsignedByte();
        }

        if (getIsSpecificPlates() == true)
        {
            specificPlates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            specificPlates_.read(in, (int)(getNumSpecificPlates()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        noPermitPaper_ = in.readBool();

        isSpecificPlates_ = in.readBool();

        isFirstDigitRule_ = in.readBool();

        isLastDigitRule_ = in.readBool();

        if (getIsFirstDigitRule() == true)
        {
            firstDigitRuleType_ = nds.rules.types.LicensePlateDigitRuleType.readEnum(zserioContext.getFirstDigitRuleType(), in);
        }

        if (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            numFirstSpecialDigits_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumFirstSpecialDigits().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (getIsFirstDigitRule() == true && getFirstDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            firstSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            firstSpecialDigit_.read(in, (int)(getNumFirstSpecialDigits()));
        }

        if (getIsLastDigitRule() == true)
        {
            lastDigitRuleType_ = nds.rules.types.LicensePlateDigitRuleType.readEnum(zserioContext.getLastDigitRuleType(), in);
        }

        if (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            numLastSpecialDigits_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumLastSpecialDigits().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (getIsLastDigitRule() == true && getLastDigitRuleType() == nds.rules.types.LicensePlateDigitRuleType.SPECIAL_DIGIT)
        {
            lastSpecialDigit_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            lastSpecialDigit_.read(in, (int)(getNumLastSpecialDigits()));
        }

        if (getIsSpecificPlates() == true)
        {
            numSpecificPlates_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumSpecificPlates().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (getIsSpecificPlates() == true)
        {
            specificPlates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.StringRawArray(),
                    new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            specificPlates_.read(in, (int)(getNumSpecificPlates()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isFirstDigitRuleTypeUsed())
        {
            endBitPosition += firstDigitRuleType_.bitSizeOf(endBitPosition);
        }
        if (isNumFirstSpecialDigitsUsed())
        {
            endBitPosition += 8;
        }
        if (isFirstSpecialDigitUsed())
        {
            endBitPosition = firstSpecialDigit_.initializeOffsets(endBitPosition);
        }
        if (isLastDigitRuleTypeUsed())
        {
            endBitPosition += lastDigitRuleType_.bitSizeOf(endBitPosition);
        }
        if (isNumLastSpecialDigitsUsed())
        {
            endBitPosition += 8;
        }
        if (isLastSpecialDigitUsed())
        {
            endBitPosition = lastSpecialDigit_.initializeOffsets(endBitPosition);
        }
        if (isNumSpecificPlatesUsed())
        {
            endBitPosition += 8;
        }
        if (isSpecificPlatesUsed())
        {
            endBitPosition = specificPlates_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isFirstDigitRuleTypeUsed())
        {
            endBitPosition = firstDigitRuleType_.initializeOffsets(zserioContext.getFirstDigitRuleType(), endBitPosition);
        }
        if (isNumFirstSpecialDigitsUsed())
        {
            endBitPosition += zserioContext.getNumFirstSpecialDigits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numFirstSpecialDigits_));
        }
        if (isFirstSpecialDigitUsed())
        {
            endBitPosition = firstSpecialDigit_.initializeOffsets(endBitPosition);
        }
        if (isLastDigitRuleTypeUsed())
        {
            endBitPosition = lastDigitRuleType_.initializeOffsets(zserioContext.getLastDigitRuleType(), endBitPosition);
        }
        if (isNumLastSpecialDigitsUsed())
        {
            endBitPosition += zserioContext.getNumLastSpecialDigits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLastSpecialDigits_));
        }
        if (isLastSpecialDigitUsed())
        {
            endBitPosition = lastSpecialDigit_.initializeOffsets(endBitPosition);
        }
        if (isNumSpecificPlatesUsed())
        {
            endBitPosition += zserioContext.getNumSpecificPlates().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSpecificPlates_));
        }
        if (isSpecificPlatesUsed())
        {
            endBitPosition = specificPlates_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(noPermitPaper_);

        out.writeBool(isSpecificPlates_);

        out.writeBool(isFirstDigitRule_);

        out.writeBool(isLastDigitRule_);

        if (isFirstDigitRuleTypeUsed())
        {
            firstDigitRuleType_.write(out);
        }

        if (isNumFirstSpecialDigitsUsed())
        {
            out.writeUnsignedByte(numFirstSpecialDigits_);
        }

        if (isFirstSpecialDigitUsed())
        {
            if (firstSpecialDigit_.size() != (int)(getNumFirstSpecialDigits()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.firstSpecialDigit: " +
                        firstSpecialDigit_.size() + " != " + (int)(getNumFirstSpecialDigits()) + "!");
            }
            firstSpecialDigit_.write(out);
        }

        if (isLastDigitRuleTypeUsed())
        {
            lastDigitRuleType_.write(out);
        }

        if (isNumLastSpecialDigitsUsed())
        {
            out.writeUnsignedByte(numLastSpecialDigits_);
        }

        if (isLastSpecialDigitUsed())
        {
            if (lastSpecialDigit_.size() != (int)(getNumLastSpecialDigits()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.lastSpecialDigit: " +
                        lastSpecialDigit_.size() + " != " + (int)(getNumLastSpecialDigits()) + "!");
            }
            lastSpecialDigit_.write(out);
        }

        if (isNumSpecificPlatesUsed())
        {
            out.writeUnsignedByte(numSpecificPlates_);
        }

        if (isSpecificPlatesUsed())
        {
            if (specificPlates_.size() != (int)(getNumSpecificPlates()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.specificPlates: " +
                        specificPlates_.size() + " != " + (int)(getNumSpecificPlates()) + "!");
            }
            specificPlates_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(noPermitPaper_);

        out.writeBool(isSpecificPlates_);

        out.writeBool(isFirstDigitRule_);

        out.writeBool(isLastDigitRule_);

        if (isFirstDigitRuleTypeUsed())
        {
            firstDigitRuleType_.write(zserioContext.getFirstDigitRuleType(), out);
        }

        if (isNumFirstSpecialDigitsUsed())
        {
            zserioContext.getNumFirstSpecialDigits().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numFirstSpecialDigits_));
        }

        if (isFirstSpecialDigitUsed())
        {
            if (firstSpecialDigit_.size() != (int)(getNumFirstSpecialDigits()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.firstSpecialDigit: " +
                        firstSpecialDigit_.size() + " != " + (int)(getNumFirstSpecialDigits()) + "!");
            }
            firstSpecialDigit_.write(out);
        }

        if (isLastDigitRuleTypeUsed())
        {
            lastDigitRuleType_.write(zserioContext.getLastDigitRuleType(), out);
        }

        if (isNumLastSpecialDigitsUsed())
        {
            zserioContext.getNumLastSpecialDigits().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLastSpecialDigits_));
        }

        if (isLastSpecialDigitUsed())
        {
            if (lastSpecialDigit_.size() != (int)(getNumLastSpecialDigits()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.lastSpecialDigit: " +
                        lastSpecialDigit_.size() + " != " + (int)(getNumLastSpecialDigits()) + "!");
            }
            lastSpecialDigit_.write(out);
        }

        if (isNumSpecificPlatesUsed())
        {
            zserioContext.getNumSpecificPlates().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSpecificPlates_));
        }

        if (isSpecificPlatesUsed())
        {
            if (specificPlates_.size() != (int)(getNumSpecificPlates()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LicensePlateRestrictionRule.specificPlates: " +
                        specificPlates_.size() + " != " + (int)(getNumSpecificPlates()) + "!");
            }
            specificPlates_.write(out);
        }
    }

    private boolean noPermitPaper_;
    private boolean isSpecificPlates_;
    private boolean isFirstDigitRule_;
    private boolean isLastDigitRule_;
    private nds.rules.types.LicensePlateDigitRuleType firstDigitRuleType_;
    private java.lang.Short numFirstSpecialDigits_;
    private zserio.runtime.array.Array firstSpecialDigit_;
    private nds.rules.types.LicensePlateDigitRuleType lastDigitRuleType_;
    private java.lang.Short numLastSpecialDigits_;
    private zserio.runtime.array.Array lastSpecialDigit_;
    private java.lang.Short numSpecificPlates_;
    private zserio.runtime.array.Array specificPlates_;
}
