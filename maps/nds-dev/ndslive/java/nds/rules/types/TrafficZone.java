/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public enum TrafficZone implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    OTHER((short)0),
    ENVIRONMENT_ZONE((short)1),
    TOLL_ZONE((short)2),
    LIVING_STREET((short)3),
    SPEED_LIMIT_ZONE((short)4),
    SCHOOL_ZONE((short)5),
    LOW_EMISSION_ZONE((short)6),
    CONGESTION_ZONE((short)7),
    AUTONOMOUS_DRIVING_ZONE((short)8),
    NON_AUTONOMOUS_DRIVING_ZONE((short)9),
    RESIDENTIAL_AREA((short)10),
    GATED_AREA((short)11),
    CYCLIST_ROAD((short)12),
    RESTRICTED_PARKING_ZONE((short)13),
    NO_STOPPING_ZONE((short)14),
    NO_BOUNDARY_MARKINGS_ZONE((short)15);

    private TrafficZone(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static TrafficZone readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static TrafficZone readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static TrafficZone toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return OTHER;
            case (short)1:
                return ENVIRONMENT_ZONE;
            case (short)2:
                return TOLL_ZONE;
            case (short)3:
                return LIVING_STREET;
            case (short)4:
                return SPEED_LIMIT_ZONE;
            case (short)5:
                return SCHOOL_ZONE;
            case (short)6:
                return LOW_EMISSION_ZONE;
            case (short)7:
                return CONGESTION_ZONE;
            case (short)8:
                return AUTONOMOUS_DRIVING_ZONE;
            case (short)9:
                return NON_AUTONOMOUS_DRIVING_ZONE;
            case (short)10:
                return RESIDENTIAL_AREA;
            case (short)11:
                return GATED_AREA;
            case (short)12:
                return CYCLIST_ROAD;
            case (short)13:
                return RESTRICTED_PARKING_ZONE;
            case (short)14:
                return NO_STOPPING_ZONE;
            case (short)15:
                return NO_BOUNDARY_MARKINGS_ZONE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration TrafficZone: " + value + "!");
        }
    }

    public static TrafficZone toEnum(java.lang.String itemName)
    {
        if (itemName.equals("OTHER"))
            return OTHER;
        if (itemName.equals("ENVIRONMENT_ZONE"))
            return ENVIRONMENT_ZONE;
        if (itemName.equals("TOLL_ZONE"))
            return TOLL_ZONE;
        if (itemName.equals("LIVING_STREET"))
            return LIVING_STREET;
        if (itemName.equals("SPEED_LIMIT_ZONE"))
            return SPEED_LIMIT_ZONE;
        if (itemName.equals("SCHOOL_ZONE"))
            return SCHOOL_ZONE;
        if (itemName.equals("LOW_EMISSION_ZONE"))
            return LOW_EMISSION_ZONE;
        if (itemName.equals("CONGESTION_ZONE"))
            return CONGESTION_ZONE;
        if (itemName.equals("AUTONOMOUS_DRIVING_ZONE"))
            return AUTONOMOUS_DRIVING_ZONE;
        if (itemName.equals("NON_AUTONOMOUS_DRIVING_ZONE"))
            return NON_AUTONOMOUS_DRIVING_ZONE;
        if (itemName.equals("RESIDENTIAL_AREA"))
            return RESIDENTIAL_AREA;
        if (itemName.equals("GATED_AREA"))
            return GATED_AREA;
        if (itemName.equals("CYCLIST_ROAD"))
            return CYCLIST_ROAD;
        if (itemName.equals("RESTRICTED_PARKING_ZONE"))
            return RESTRICTED_PARKING_ZONE;
        if (itemName.equals("NO_STOPPING_ZONE"))
            return NO_STOPPING_ZONE;
        if (itemName.equals("NO_BOUNDARY_MARKINGS_ZONE"))
            return NO_BOUNDARY_MARKINGS_ZONE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration TrafficZone!");
    }

    private short value;
}
