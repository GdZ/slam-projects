/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class DrivingRulesContent implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public DrivingRulesContent()
    {
        this((int)0);
    }

    public DrivingRulesContent(int value)
    {
        if (value < 0 || value > 536870911)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'DrivingRulesContent' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public DrivingRulesContent(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt32();
    }

    public DrivingRulesContent(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof DrivingRulesContent))
            return false;

        final DrivingRulesContent otherDrivingRulesContent = (DrivingRulesContent)other;
        return value == otherDrivingRulesContent.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(DrivingRulesContent.Values.STAY_CURBSIDE).equals(DrivingRulesContent.Values.STAY_CURBSIDE))
            builder.append(builder.length() == 0 ? "STAY_CURBSIDE" : " | STAY_CURBSIDE");
        if (this.and(DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR).equals(DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR))
            builder.append(builder.length() == 0 ? "TEMPORARY_LANE_MARKING_COLOR" : " | TEMPORARY_LANE_MARKING_COLOR");
        if (this.and(DrivingRulesContent.Values.CURBSIDE_PASSING).equals(DrivingRulesContent.Values.CURBSIDE_PASSING))
            builder.append(builder.length() == 0 ? "CURBSIDE_PASSING" : " | CURBSIDE_PASSING");
        if (this.and(DrivingRulesContent.Values.EMERGENCY_RULES).equals(DrivingRulesContent.Values.EMERGENCY_RULES))
            builder.append(builder.length() == 0 ? "EMERGENCY_RULES" : " | EMERGENCY_RULES");
        if (this.and(DrivingRulesContent.Values.YIELD_RULES).equals(DrivingRulesContent.Values.YIELD_RULES))
            builder.append(builder.length() == 0 ? "YIELD_RULES" : " | YIELD_RULES");
        if (this.and(DrivingRulesContent.Values.SOLID_LINE_RULES).equals(DrivingRulesContent.Values.SOLID_LINE_RULES))
            builder.append(builder.length() == 0 ? "SOLID_LINE_RULES" : " | SOLID_LINE_RULES");
        if (this.and(DrivingRulesContent.Values.ROADSIDE_PARKING_RULES).equals(DrivingRulesContent.Values.ROADSIDE_PARKING_RULES))
            builder.append(builder.length() == 0 ? "ROADSIDE_PARKING_RULES" : " | ROADSIDE_PARKING_RULES");
        if (this.and(DrivingRulesContent.Values.LANE_MERGE_RULES).equals(DrivingRulesContent.Values.LANE_MERGE_RULES))
            builder.append(builder.length() == 0 ? "LANE_MERGE_RULES" : " | LANE_MERGE_RULES");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public DrivingRulesContent or(DrivingRulesContent other)
    {
        return new DrivingRulesContent((int)(value | other.value));
    }

    public DrivingRulesContent and(DrivingRulesContent other)
    {
        return new DrivingRulesContent((int)(value & other.value));
    }

    public DrivingRulesContent xor(DrivingRulesContent other)
    {
        return new DrivingRulesContent((int)(value ^ other.value));
    }

    public DrivingRulesContent not()
    {
        return new DrivingRulesContent((int)(~value & 536870911));
    }

    public static final class Values
    {
        public static final DrivingRulesContent STAY_CURBSIDE = new DrivingRulesContent(1);
        public static final DrivingRulesContent TEMPORARY_LANE_MARKING_COLOR = new DrivingRulesContent(2);
        public static final DrivingRulesContent CURBSIDE_PASSING = new DrivingRulesContent(4);
        public static final DrivingRulesContent EMERGENCY_RULES = new DrivingRulesContent(8);
        public static final DrivingRulesContent YIELD_RULES = new DrivingRulesContent(16);
        public static final DrivingRulesContent SOLID_LINE_RULES = new DrivingRulesContent(32);
        public static final DrivingRulesContent ROADSIDE_PARKING_RULES = new DrivingRulesContent(64);
        public static final DrivingRulesContent LANE_MERGE_RULES = new DrivingRulesContent(128);
    }

    private int value;
}
