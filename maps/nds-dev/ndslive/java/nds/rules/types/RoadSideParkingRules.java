/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class RoadSideParkingRules implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public RoadSideParkingRules()
    {
    }

    public RoadSideParkingRules(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadSideParkingRules(
            boolean bothSidesOfOneWay_,
            boolean oppositeDirection_)
    {
        setBothSidesOfOneWay(bothSidesOfOneWay_);
        setOppositeDirection(oppositeDirection_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getBothSidesOfOneWay()
    {
        return bothSidesOfOneWay_;
    }

    public void setBothSidesOfOneWay(boolean bothSidesOfOneWay_)
    {
        this.bothSidesOfOneWay_ = bothSidesOfOneWay_;
    }

    public boolean getOppositeDirection()
    {
        return oppositeDirection_;
    }

    public void setOppositeDirection(boolean oppositeDirection_)
    {
        this.oppositeDirection_ = oppositeDirection_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadSideParkingRules)
        {
            final RoadSideParkingRules that = (RoadSideParkingRules)obj;

            return
                    bothSidesOfOneWay_ == that.bothSidesOfOneWay_ &&
                    oppositeDirection_ == that.oppositeDirection_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, bothSidesOfOneWay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, oppositeDirection_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        bothSidesOfOneWay_ = in.readBool();

        oppositeDirection_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(bothSidesOfOneWay_);

        out.writeBool(oppositeDirection_);
    }

    private boolean bothSidesOfOneWay_;
    private boolean oppositeDirection_;
}
