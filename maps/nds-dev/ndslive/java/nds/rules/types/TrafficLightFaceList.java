/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightFaceList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public TrafficLightFaceList()
    {
    }

    public TrafficLightFaceList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficLightFaceList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficLightFaceList(
            boolean hasLensPositions_,
            nds.rules.types.TrafficLightFace[] faces_)
    {
        setHasLensPositions(hasLensPositions_);
        setFaces(faces_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += faces_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += faces_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasLensPositions()
    {
        return hasLensPositions_;
    }

    public void setHasLensPositions(boolean hasLensPositions_)
    {
        this.hasLensPositions_ = hasLensPositions_;
    }

    public nds.rules.types.TrafficLightFace[] getFaces()
    {
        return (faces_ == null) ? null : faces_.getRawArray();
    }

    public void setFaces(nds.rules.types.TrafficLightFace[] faces_)
    {
        this.faces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightFace.class, faces_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightFace>(new ZserioElementFactory_faces()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightFaceList)
        {
            final TrafficLightFaceList that = (TrafficLightFaceList)obj;

            return
                    hasLensPositions_ == that.hasLensPositions_ &&
                    ((faces_ == null) ? that.faces_ == null : faces_.equals(that.faces_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasLensPositions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, faces_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasLensPositions_ = in.readBool();

        faces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightFace.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightFace>(new ZserioElementFactory_faces()),
                zserio.runtime.array.ArrayType.AUTO);
        faces_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasLensPositions_ = in.readBool();

        faces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightFace.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightFace>(new ZserioElementFactory_faces()),
                zserio.runtime.array.ArrayType.AUTO);
        faces_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition = faces_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition = faces_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasLensPositions_);

        faces_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        out.writeBool(hasLensPositions_);

        faces_.writePacked(out);
    }

    private final class ZserioElementFactory_faces implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TrafficLightFace>
    {
        @Override
        public nds.rules.types.TrafficLightFace create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightFace(in, (boolean)(getHasLensPositions()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TrafficLightFace.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TrafficLightFace create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightFace(context, in, (boolean)(getHasLensPositions()));
        }
    }

    private boolean hasLensPositions_;
    private zserio.runtime.array.Array faces_;
}
