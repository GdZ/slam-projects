/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TrafficLightCycle implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numLenses_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumLenses()
        {
            return numLenses_;
        }

        private zserio.runtime.array.DeltaContext numLenses_;
    };

    public TrafficLightCycle()
    {
    }

    public TrafficLightCycle(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficLightCycle(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficLightCycle(
            byte numLenses_,
            nds.rules.types.TrafficLightPhase[] phases_)
    {
        setNumLenses(numLenses_);
        setPhases(phases_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLenses().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 4;
        endBitPosition += phases_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLenses().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
        endBitPosition += phases_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getNumLenses()
    {
        return numLenses_;
    }

    public void setNumLenses(byte numLenses_)
    {
        this.numLenses_ = numLenses_;
    }

    public nds.rules.types.TrafficLightPhase[] getPhases()
    {
        return (phases_ == null) ? null : phases_.getRawArray();
    }

    public void setPhases(nds.rules.types.TrafficLightPhase[] phases_)
    {
        this.phases_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightPhase.class, phases_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightPhase>(new ZserioElementFactory_phases()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficLightCycle)
        {
            final TrafficLightCycle that = (TrafficLightCycle)obj;

            return
                    numLenses_ == that.numLenses_ &&
                    ((phases_ == null) ? that.phases_ == null : phases_.equals(that.phases_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLenses_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, phases_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numLenses_ = (byte)in.readBits(4);

        phases_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightPhase.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightPhase>(new ZserioElementFactory_phases()),
                zserio.runtime.array.ArrayType.AUTO);
        phases_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numLenses_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumLenses().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();

        phases_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TrafficLightPhase.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TrafficLightPhase>(new ZserioElementFactory_phases()),
                zserio.runtime.array.ArrayType.AUTO);
        phases_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 4;
        endBitPosition = phases_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLenses().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));
        endBitPosition = phases_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBits(numLenses_, 4);

        phases_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLenses().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numLenses_));

        phases_.writePacked(out);
    }

    private final class ZserioElementFactory_phases implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TrafficLightPhase>
    {
        @Override
        public nds.rules.types.TrafficLightPhase create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightPhase(in, (byte)(getNumLenses()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TrafficLightPhase.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TrafficLightPhase create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TrafficLightPhase(context, in, (byte)(getNumLenses()));
        }
    }

    private byte numLenses_;
    private zserio.runtime.array.Array phases_;
}
