/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class LicensePlateRestriction implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            licensePlateRestrictionType_ = new zserio.runtime.array.DeltaContext();
            licensePlateRestrictionRule_ = new nds.rules.types.LicensePlateRestrictionRule.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLicensePlateRestrictionType()
        {
            return licensePlateRestrictionType_;
        }

        public nds.rules.types.LicensePlateRestrictionRule.ZserioPackingContext getLicensePlateRestrictionRule()
        {
            return licensePlateRestrictionRule_;
        }

        private zserio.runtime.array.DeltaContext licensePlateRestrictionType_;
        private nds.rules.types.LicensePlateRestrictionRule.ZserioPackingContext licensePlateRestrictionRule_;
    };

    public LicensePlateRestriction()
    {
    }

    public LicensePlateRestriction(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LicensePlateRestriction(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LicensePlateRestriction(
            nds.rules.types.LicensePlateRestrictionType licensePlateRestrictionType_,
            nds.rules.types.LicensePlateRestrictionRule licensePlateRestrictionRule_,
            java.lang.String licensePlateRestrictionDescription_)
    {
        setLicensePlateRestrictionType(licensePlateRestrictionType_);
        setLicensePlateRestrictionRule(licensePlateRestrictionRule_);
        setLicensePlateRestrictionDescription(licensePlateRestrictionDescription_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        licensePlateRestrictionType_.initPackingContext(zserioContext.getLicensePlateRestrictionType());
        licensePlateRestrictionRule_.initPackingContext(zserioContext.getLicensePlateRestrictionRule());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += licensePlateRestrictionType_.bitSizeOf(endBitPosition);
        endBitPosition += licensePlateRestrictionRule_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licensePlateRestrictionDescription_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += licensePlateRestrictionType_.bitSizeOf(zserioContext.getLicensePlateRestrictionType(), endBitPosition);
        endBitPosition += licensePlateRestrictionRule_.bitSizeOf(zserioContext.getLicensePlateRestrictionRule(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licensePlateRestrictionDescription_);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.types.LicensePlateRestrictionType getLicensePlateRestrictionType()
    {
        return licensePlateRestrictionType_;
    }

    public void setLicensePlateRestrictionType(nds.rules.types.LicensePlateRestrictionType licensePlateRestrictionType_)
    {
        this.licensePlateRestrictionType_ = licensePlateRestrictionType_;
    }

    public nds.rules.types.LicensePlateRestrictionRule getLicensePlateRestrictionRule()
    {
        return licensePlateRestrictionRule_;
    }

    public void setLicensePlateRestrictionRule(nds.rules.types.LicensePlateRestrictionRule licensePlateRestrictionRule_)
    {
        this.licensePlateRestrictionRule_ = licensePlateRestrictionRule_;
    }

    public java.lang.String getLicensePlateRestrictionDescription()
    {
        return licensePlateRestrictionDescription_;
    }

    public void setLicensePlateRestrictionDescription(java.lang.String licensePlateRestrictionDescription_)
    {
        this.licensePlateRestrictionDescription_ = licensePlateRestrictionDescription_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LicensePlateRestriction)
        {
            final LicensePlateRestriction that = (LicensePlateRestriction)obj;

            return
                    ((licensePlateRestrictionType_ == null) ? that.licensePlateRestrictionType_ == null : licensePlateRestrictionType_.getValue() == that.licensePlateRestrictionType_.getValue()) &&
                    ((licensePlateRestrictionRule_ == null) ? that.licensePlateRestrictionRule_ == null : licensePlateRestrictionRule_.equals(that.licensePlateRestrictionRule_)) &&
                    ((licensePlateRestrictionDescription_ == null) ? that.licensePlateRestrictionDescription_ == null : licensePlateRestrictionDescription_.equals(that.licensePlateRestrictionDescription_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, licensePlateRestrictionType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, licensePlateRestrictionRule_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, licensePlateRestrictionDescription_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        licensePlateRestrictionType_ = nds.rules.types.LicensePlateRestrictionType.readEnum(in);

        licensePlateRestrictionRule_ = new nds.rules.types.LicensePlateRestrictionRule(in);

        licensePlateRestrictionDescription_ = in.readString();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        licensePlateRestrictionType_ = nds.rules.types.LicensePlateRestrictionType.readEnum(zserioContext.getLicensePlateRestrictionType(), in);

        licensePlateRestrictionRule_ = new nds.rules.types.LicensePlateRestrictionRule(zserioContext.getLicensePlateRestrictionRule(), in);

        licensePlateRestrictionDescription_ = in.readString();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += licensePlateRestrictionType_.bitSizeOf(endBitPosition);
        endBitPosition = licensePlateRestrictionRule_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licensePlateRestrictionDescription_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = licensePlateRestrictionType_.initializeOffsets(zserioContext.getLicensePlateRestrictionType(), endBitPosition);
        endBitPosition = licensePlateRestrictionRule_.initializeOffsets(zserioContext.getLicensePlateRestrictionRule(), endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(licensePlateRestrictionDescription_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        licensePlateRestrictionType_.write(out);

        licensePlateRestrictionRule_.write(out);

        out.writeString(licensePlateRestrictionDescription_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        licensePlateRestrictionType_.write(zserioContext.getLicensePlateRestrictionType(), out);

        licensePlateRestrictionRule_.write(zserioContext.getLicensePlateRestrictionRule(), out);

        out.writeString(licensePlateRestrictionDescription_);
    }

    private nds.rules.types.LicensePlateRestrictionType licensePlateRestrictionType_;
    private nds.rules.types.LicensePlateRestrictionRule licensePlateRestrictionRule_;
    private java.lang.String licensePlateRestrictionDescription_;
}
