/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class TimeZoneConfiguration implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            validFromDate_ = new nds.core.conditions.DayOfYear.ZserioPackingContext();
            utcOffset_ = new zserio.runtime.array.DeltaContext();
            dayLightSavingTime_ = new nds.rules.types.DayLightSavingTime.ZserioPackingContext();
        }

        public nds.core.conditions.DayOfYear.ZserioPackingContext getValidFromDate()
        {
            return validFromDate_;
        }

        public zserio.runtime.array.DeltaContext getUtcOffset()
        {
            return utcOffset_;
        }

        public nds.rules.types.DayLightSavingTime.ZserioPackingContext getDayLightSavingTime()
        {
            return dayLightSavingTime_;
        }

        private nds.core.conditions.DayOfYear.ZserioPackingContext validFromDate_;
        private zserio.runtime.array.DeltaContext utcOffset_;
        private nds.rules.types.DayLightSavingTime.ZserioPackingContext dayLightSavingTime_;
    };

    public TimeZoneConfiguration()
    {
    }

    public TimeZoneConfiguration(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TimeZoneConfiguration(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TimeZoneConfiguration(
            nds.core.conditions.DayOfYear validFromDate_,
            byte utcOffset_,
            nds.rules.types.TimeZoneName[] timeZoneNames_,
            nds.rules.types.TimeZoneName[] timeZoneAbbreviations_,
            nds.rules.types.DayLightSavingTime dayLightSavingTime_)
    {
        setValidFromDate(validFromDate_);
        setUtcOffset(utcOffset_);
        setTimeZoneNames(timeZoneNames_);
        setTimeZoneAbbreviations(timeZoneAbbreviations_);
        setDayLightSavingTime(dayLightSavingTime_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        validFromDate_.initPackingContext(zserioContext.getValidFromDate());
        zserioContext.getUtcOffset().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        if (isDayLightSavingTimeUsed())
        {
            dayLightSavingTime_.initPackingContext(zserioContext.getDayLightSavingTime());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += validFromDate_.bitSizeOf(endBitPosition);
        endBitPosition += 8;
        endBitPosition += 1;
        if (isTimeZoneNamesUsed())
        {
            endBitPosition += timeZoneNames_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isTimeZoneAbbreviationsUsed())
        {
            endBitPosition += timeZoneAbbreviations_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isDayLightSavingTimeUsed())
        {
            endBitPosition += dayLightSavingTime_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += validFromDate_.bitSizeOf(zserioContext.getValidFromDate(), endBitPosition);
        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        endBitPosition += 1;
        if (isTimeZoneNamesUsed())
        {
            endBitPosition += timeZoneNames_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isTimeZoneAbbreviationsUsed())
        {
            endBitPosition += timeZoneAbbreviations_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isDayLightSavingTimeUsed())
        {
            endBitPosition += dayLightSavingTime_.bitSizeOf(zserioContext.getDayLightSavingTime(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.conditions.DayOfYear getValidFromDate()
    {
        return validFromDate_;
    }

    public void setValidFromDate(nds.core.conditions.DayOfYear validFromDate_)
    {
        this.validFromDate_ = validFromDate_;
    }

    public byte getUtcOffset()
    {
        return utcOffset_;
    }

    public void setUtcOffset(byte utcOffset_)
    {
        this.utcOffset_ = utcOffset_;
    }

    public nds.rules.types.TimeZoneName[] getTimeZoneNames()
    {
        return (timeZoneNames_ == null) ? null : timeZoneNames_.getRawArray();
    }

    public void setTimeZoneNames(nds.rules.types.TimeZoneName[] timeZoneNames_)
    {
        if (timeZoneNames_ == null)
        {
            this.timeZoneNames_ = null;
        }
        else
        {
            this.timeZoneNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class, timeZoneNames_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneNames()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isTimeZoneNamesUsed()
    {
        return isTimeZoneNamesSet();
    }

    public boolean isTimeZoneNamesSet()
    {
        return (timeZoneNames_ != null);
    }

    public void resetTimeZoneNames()
    {
        this.timeZoneNames_ = null;
    }

    public nds.rules.types.TimeZoneName[] getTimeZoneAbbreviations()
    {
        return (timeZoneAbbreviations_ == null) ? null : timeZoneAbbreviations_.getRawArray();
    }

    public void setTimeZoneAbbreviations(nds.rules.types.TimeZoneName[] timeZoneAbbreviations_)
    {
        if (timeZoneAbbreviations_ == null)
        {
            this.timeZoneAbbreviations_ = null;
        }
        else
        {
            this.timeZoneAbbreviations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class, timeZoneAbbreviations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneAbbreviations()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isTimeZoneAbbreviationsUsed()
    {
        return isTimeZoneAbbreviationsSet();
    }

    public boolean isTimeZoneAbbreviationsSet()
    {
        return (timeZoneAbbreviations_ != null);
    }

    public void resetTimeZoneAbbreviations()
    {
        this.timeZoneAbbreviations_ = null;
    }

    public nds.rules.types.DayLightSavingTime getDayLightSavingTime()
    {
        return dayLightSavingTime_;
    }

    public void setDayLightSavingTime(nds.rules.types.DayLightSavingTime dayLightSavingTime_)
    {
        this.dayLightSavingTime_ = dayLightSavingTime_;
    }

    public boolean isDayLightSavingTimeUsed()
    {
        return isDayLightSavingTimeSet();
    }

    public boolean isDayLightSavingTimeSet()
    {
        return (dayLightSavingTime_ != null);
    }

    public void resetDayLightSavingTime()
    {
        this.dayLightSavingTime_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TimeZoneConfiguration)
        {
            final TimeZoneConfiguration that = (TimeZoneConfiguration)obj;

            return
                    ((validFromDate_ == null) ? that.validFromDate_ == null : validFromDate_.equals(that.validFromDate_)) &&
                    utcOffset_ == that.utcOffset_ &&
                    ((!isTimeZoneNamesUsed()) ? !that.isTimeZoneNamesUsed() :
                        ((timeZoneNames_ == null) ? that.timeZoneNames_ == null : timeZoneNames_.equals(that.timeZoneNames_))) &&
                    ((!isTimeZoneAbbreviationsUsed()) ? !that.isTimeZoneAbbreviationsUsed() :
                        ((timeZoneAbbreviations_ == null) ? that.timeZoneAbbreviations_ == null : timeZoneAbbreviations_.equals(that.timeZoneAbbreviations_))) &&
                    ((!isDayLightSavingTimeUsed()) ? !that.isDayLightSavingTimeUsed() :
                        ((dayLightSavingTime_ == null) ? that.dayLightSavingTime_ == null : dayLightSavingTime_.equals(that.dayLightSavingTime_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, validFromDate_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, utcOffset_);
        if (isTimeZoneNamesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, timeZoneNames_);
        if (isTimeZoneAbbreviationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, timeZoneAbbreviations_);
        if (isDayLightSavingTimeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, dayLightSavingTime_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        validFromDate_ = new nds.core.conditions.DayOfYear(in);

        utcOffset_ = in.readByte();

        if (in.readBool())
        {
            timeZoneNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneNames()),
                    zserio.runtime.array.ArrayType.AUTO);
            timeZoneNames_.read(in);
        }

        if (in.readBool())
        {
            timeZoneAbbreviations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneAbbreviations()),
                    zserio.runtime.array.ArrayType.AUTO);
            timeZoneAbbreviations_.read(in);
        }

        if (in.readBool())
        {
            dayLightSavingTime_ = new nds.rules.types.DayLightSavingTime(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        validFromDate_ = new nds.core.conditions.DayOfYear(zserioContext.getValidFromDate(), in);

        utcOffset_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getUtcOffset().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();

        if (in.readBool())
        {
            timeZoneNames_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneNames()),
                    zserio.runtime.array.ArrayType.AUTO);
            timeZoneNames_.readPacked(in);
        }

        if (in.readBool())
        {
            timeZoneAbbreviations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.types.TimeZoneName.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.types.TimeZoneName>(new ZserioElementFactory_timeZoneAbbreviations()),
                    zserio.runtime.array.ArrayType.AUTO);
            timeZoneAbbreviations_.readPacked(in);
        }

        if (in.readBool())
        {
            dayLightSavingTime_ = new nds.rules.types.DayLightSavingTime(zserioContext.getDayLightSavingTime(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = validFromDate_.initializeOffsets(endBitPosition);
        endBitPosition += 8;
        endBitPosition += 1;
        if (isTimeZoneNamesUsed())
        {
            endBitPosition = timeZoneNames_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isTimeZoneAbbreviationsUsed())
        {
            endBitPosition = timeZoneAbbreviations_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isDayLightSavingTimeUsed())
        {
            endBitPosition = dayLightSavingTime_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = validFromDate_.initializeOffsets(zserioContext.getValidFromDate(), endBitPosition);
        endBitPosition += zserioContext.getUtcOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));
        endBitPosition += 1;
        if (isTimeZoneNamesUsed())
        {
            endBitPosition = timeZoneNames_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isTimeZoneAbbreviationsUsed())
        {
            endBitPosition = timeZoneAbbreviations_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isDayLightSavingTimeUsed())
        {
            endBitPosition = dayLightSavingTime_.initializeOffsets(zserioContext.getDayLightSavingTime(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        validFromDate_.write(out);

        out.writeByte(utcOffset_);

        if (isTimeZoneNamesUsed())
        {
            out.writeBool(true);
            timeZoneNames_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTimeZoneAbbreviationsUsed())
        {
            out.writeBool(true);
            timeZoneAbbreviations_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDayLightSavingTimeUsed())
        {
            out.writeBool(true);
            dayLightSavingTime_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        validFromDate_.write(zserioContext.getValidFromDate(), out);

        zserioContext.getUtcOffset().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(utcOffset_));

        if (isTimeZoneNamesUsed())
        {
            out.writeBool(true);
            timeZoneNames_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTimeZoneAbbreviationsUsed())
        {
            out.writeBool(true);
            timeZoneAbbreviations_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDayLightSavingTimeUsed())
        {
            out.writeBool(true);
            dayLightSavingTime_.write(zserioContext.getDayLightSavingTime(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_timeZoneNames implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TimeZoneName>
    {
        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TimeZoneName.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(context, in);
        }
    }

    private static final class ZserioElementFactory_timeZoneAbbreviations implements zserio.runtime.array.PackableElementFactory<nds.rules.types.TimeZoneName>
    {
        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.types.TimeZoneName.ZserioPackingContext();
        }

        @Override
        public nds.rules.types.TimeZoneName create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.types.TimeZoneName(context, in);
        }
    }

    private nds.core.conditions.DayOfYear validFromDate_;
    private byte utcOffset_;
    private zserio.runtime.array.Array timeZoneNames_;
    private zserio.runtime.array.Array timeZoneAbbreviations_;
    private nds.rules.types.DayLightSavingTime dayLightSavingTime_;
}
