/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.types;

public class RegionDrivingRules implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            temporaryLaneMarkingColor_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public zserio.runtime.array.DeltaContext getTemporaryLaneMarkingColor()
        {
            return temporaryLaneMarkingColor_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private zserio.runtime.array.DeltaContext temporaryLaneMarkingColor_;
    };

    public RegionDrivingRules()
    {
    }

    public RegionDrivingRules(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RegionDrivingRules(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RegionDrivingRules(
            nds.rules.types.DrivingRulesContent content_,
            java.lang.Boolean stayCurbside_,
            nds.lane.reference.types.MarkingColor temporaryLaneMarkingColor_,
            java.lang.Boolean curbsidePassingAllowed_,
            nds.rules.types.EmergencyRules emergencyRules_,
            java.lang.Boolean yieldOncoming_,
            java.lang.Boolean yieldCurbSide_,
            java.lang.Boolean alwaysAllowed_,
            nds.rules.types.SolidLineCrossingRules solidLineCrossingRules_,
            nds.rules.types.RoadSideParkingRules roadSideParkingRules_,
            nds.rules.types.LaneMergeRules laneMergeRules_)
    {
        setContent(content_);
        setStayCurbside(stayCurbside_);
        setTemporaryLaneMarkingColor(temporaryLaneMarkingColor_);
        setCurbsidePassingAllowed(curbsidePassingAllowed_);
        setEmergencyRules(emergencyRules_);
        setYieldOncoming(yieldOncoming_);
        setYieldCurbSide(yieldCurbSide_);
        setAlwaysAllowed(alwaysAllowed_);
        setSolidLineCrossingRules(solidLineCrossingRules_);
        setRoadSideParkingRules(roadSideParkingRules_);
        setLaneMergeRules(laneMergeRules_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isTemporaryLaneMarkingColorUsed())
        {
            temporaryLaneMarkingColor_.initPackingContext(zserioContext.getTemporaryLaneMarkingColor());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isStayCurbsideUsed())
        {
            endBitPosition += 1;
        }
        if (isTemporaryLaneMarkingColorUsed())
        {
            endBitPosition += temporaryLaneMarkingColor_.bitSizeOf(endBitPosition);
        }
        if (isCurbsidePassingAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isEmergencyRulesUsed())
        {
            endBitPosition += emergencyRules_.bitSizeOf(endBitPosition);
        }
        if (isYieldOncomingUsed())
        {
            endBitPosition += 1;
        }
        if (isYieldCurbSideUsed())
        {
            endBitPosition += 1;
        }
        if (isAlwaysAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isSolidLineCrossingRulesUsed())
        {
            endBitPosition += solidLineCrossingRules_.bitSizeOf(endBitPosition);
        }
        if (isRoadSideParkingRulesUsed())
        {
            endBitPosition += roadSideParkingRules_.bitSizeOf(endBitPosition);
        }
        if (isLaneMergeRulesUsed())
        {
            endBitPosition += laneMergeRules_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isStayCurbsideUsed())
        {
            endBitPosition += 1;
        }
        if (isTemporaryLaneMarkingColorUsed())
        {
            endBitPosition += temporaryLaneMarkingColor_.bitSizeOf(zserioContext.getTemporaryLaneMarkingColor(), endBitPosition);
        }
        if (isCurbsidePassingAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isEmergencyRulesUsed())
        {
            endBitPosition += emergencyRules_.bitSizeOf(endBitPosition);
        }
        if (isYieldOncomingUsed())
        {
            endBitPosition += 1;
        }
        if (isYieldCurbSideUsed())
        {
            endBitPosition += 1;
        }
        if (isAlwaysAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isSolidLineCrossingRulesUsed())
        {
            endBitPosition += solidLineCrossingRules_.bitSizeOf(endBitPosition);
        }
        if (isRoadSideParkingRulesUsed())
        {
            endBitPosition += roadSideParkingRules_.bitSizeOf(endBitPosition);
        }
        if (isLaneMergeRulesUsed())
        {
            endBitPosition += laneMergeRules_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.types.DrivingRulesContent getContent()
    {
        return content_;
    }

    public void setContent(nds.rules.types.DrivingRulesContent content_)
    {
        this.content_ = content_;
    }

    public java.lang.Boolean getStayCurbside()
    {
        return stayCurbside_;
    }

    public void setStayCurbside(java.lang.Boolean stayCurbside_)
    {
        this.stayCurbside_ = stayCurbside_;
    }

    public boolean isStayCurbsideUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE)).equals(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE));
    }

    public boolean isStayCurbsideSet()
    {
        return (stayCurbside_ != null);
    }

    public void resetStayCurbside()
    {
        this.stayCurbside_ = null;
    }

    public nds.lane.reference.types.MarkingColor getTemporaryLaneMarkingColor()
    {
        return temporaryLaneMarkingColor_;
    }

    public void setTemporaryLaneMarkingColor(nds.lane.reference.types.MarkingColor temporaryLaneMarkingColor_)
    {
        this.temporaryLaneMarkingColor_ = temporaryLaneMarkingColor_;
    }

    public boolean isTemporaryLaneMarkingColorUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR)).equals(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR));
    }

    public boolean isTemporaryLaneMarkingColorSet()
    {
        return (temporaryLaneMarkingColor_ != null);
    }

    public void resetTemporaryLaneMarkingColor()
    {
        this.temporaryLaneMarkingColor_ = null;
    }

    public java.lang.Boolean getCurbsidePassingAllowed()
    {
        return curbsidePassingAllowed_;
    }

    public void setCurbsidePassingAllowed(java.lang.Boolean curbsidePassingAllowed_)
    {
        this.curbsidePassingAllowed_ = curbsidePassingAllowed_;
    }

    public boolean isCurbsidePassingAllowedUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING)).equals(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING));
    }

    public boolean isCurbsidePassingAllowedSet()
    {
        return (curbsidePassingAllowed_ != null);
    }

    public void resetCurbsidePassingAllowed()
    {
        this.curbsidePassingAllowed_ = null;
    }

    public nds.rules.types.EmergencyRules getEmergencyRules()
    {
        return emergencyRules_;
    }

    public void setEmergencyRules(nds.rules.types.EmergencyRules emergencyRules_)
    {
        this.emergencyRules_ = emergencyRules_;
    }

    public boolean isEmergencyRulesUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES));
    }

    public boolean isEmergencyRulesSet()
    {
        return (emergencyRules_ != null);
    }

    public void resetEmergencyRules()
    {
        this.emergencyRules_ = null;
    }

    public java.lang.Boolean getYieldOncoming()
    {
        return yieldOncoming_;
    }

    public void setYieldOncoming(java.lang.Boolean yieldOncoming_)
    {
        this.yieldOncoming_ = yieldOncoming_;
    }

    public boolean isYieldOncomingUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES));
    }

    public boolean isYieldOncomingSet()
    {
        return (yieldOncoming_ != null);
    }

    public void resetYieldOncoming()
    {
        this.yieldOncoming_ = null;
    }

    public java.lang.Boolean getYieldCurbSide()
    {
        return yieldCurbSide_;
    }

    public void setYieldCurbSide(java.lang.Boolean yieldCurbSide_)
    {
        this.yieldCurbSide_ = yieldCurbSide_;
    }

    public boolean isYieldCurbSideUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES));
    }

    public boolean isYieldCurbSideSet()
    {
        return (yieldCurbSide_ != null);
    }

    public void resetYieldCurbSide()
    {
        this.yieldCurbSide_ = null;
    }

    public java.lang.Boolean getAlwaysAllowed()
    {
        return alwaysAllowed_;
    }

    public void setAlwaysAllowed(java.lang.Boolean alwaysAllowed_)
    {
        this.alwaysAllowed_ = alwaysAllowed_;
    }

    public boolean isAlwaysAllowedUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES));
    }

    public boolean isAlwaysAllowedSet()
    {
        return (alwaysAllowed_ != null);
    }

    public void resetAlwaysAllowed()
    {
        this.alwaysAllowed_ = null;
    }

    public nds.rules.types.SolidLineCrossingRules getSolidLineCrossingRules()
    {
        return solidLineCrossingRules_;
    }

    public void setSolidLineCrossingRules(nds.rules.types.SolidLineCrossingRules solidLineCrossingRules_)
    {
        this.solidLineCrossingRules_ = solidLineCrossingRules_;
    }

    public boolean isSolidLineCrossingRulesUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES) && !getAlwaysAllowed());
    }

    public boolean isSolidLineCrossingRulesSet()
    {
        return (solidLineCrossingRules_ != null);
    }

    public void resetSolidLineCrossingRules()
    {
        this.solidLineCrossingRules_ = null;
    }

    public nds.rules.types.RoadSideParkingRules getRoadSideParkingRules()
    {
        return roadSideParkingRules_;
    }

    public void setRoadSideParkingRules(nds.rules.types.RoadSideParkingRules roadSideParkingRules_)
    {
        this.roadSideParkingRules_ = roadSideParkingRules_;
    }

    public boolean isRoadSideParkingRulesUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES));
    }

    public boolean isRoadSideParkingRulesSet()
    {
        return (roadSideParkingRules_ != null);
    }

    public void resetRoadSideParkingRules()
    {
        this.roadSideParkingRules_ = null;
    }

    public nds.rules.types.LaneMergeRules getLaneMergeRules()
    {
        return laneMergeRules_;
    }

    public void setLaneMergeRules(nds.rules.types.LaneMergeRules laneMergeRules_)
    {
        this.laneMergeRules_ = laneMergeRules_;
    }

    public boolean isLaneMergeRulesUsed()
    {
        return ((getContent().and(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES));
    }

    public boolean isLaneMergeRulesSet()
    {
        return (laneMergeRules_ != null);
    }

    public void resetLaneMergeRules()
    {
        this.laneMergeRules_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RegionDrivingRules)
        {
            final RegionDrivingRules that = (RegionDrivingRules)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isStayCurbsideUsed()) ? !that.isStayCurbsideUsed() :
                        ((stayCurbside_ == null) ? that.stayCurbside_ == null : stayCurbside_.equals(that.stayCurbside_))) &&
                    ((!isTemporaryLaneMarkingColorUsed()) ? !that.isTemporaryLaneMarkingColorUsed() :
                        ((temporaryLaneMarkingColor_ == null) ? that.temporaryLaneMarkingColor_ == null : temporaryLaneMarkingColor_.getValue() == that.temporaryLaneMarkingColor_.getValue())) &&
                    ((!isCurbsidePassingAllowedUsed()) ? !that.isCurbsidePassingAllowedUsed() :
                        ((curbsidePassingAllowed_ == null) ? that.curbsidePassingAllowed_ == null : curbsidePassingAllowed_.equals(that.curbsidePassingAllowed_))) &&
                    ((!isEmergencyRulesUsed()) ? !that.isEmergencyRulesUsed() :
                        ((emergencyRules_ == null) ? that.emergencyRules_ == null : emergencyRules_.equals(that.emergencyRules_))) &&
                    ((!isYieldOncomingUsed()) ? !that.isYieldOncomingUsed() :
                        ((yieldOncoming_ == null) ? that.yieldOncoming_ == null : yieldOncoming_.equals(that.yieldOncoming_))) &&
                    ((!isYieldCurbSideUsed()) ? !that.isYieldCurbSideUsed() :
                        ((yieldCurbSide_ == null) ? that.yieldCurbSide_ == null : yieldCurbSide_.equals(that.yieldCurbSide_))) &&
                    ((!isAlwaysAllowedUsed()) ? !that.isAlwaysAllowedUsed() :
                        ((alwaysAllowed_ == null) ? that.alwaysAllowed_ == null : alwaysAllowed_.equals(that.alwaysAllowed_))) &&
                    ((!isSolidLineCrossingRulesUsed()) ? !that.isSolidLineCrossingRulesUsed() :
                        ((solidLineCrossingRules_ == null) ? that.solidLineCrossingRules_ == null : solidLineCrossingRules_.equals(that.solidLineCrossingRules_))) &&
                    ((!isRoadSideParkingRulesUsed()) ? !that.isRoadSideParkingRulesUsed() :
                        ((roadSideParkingRules_ == null) ? that.roadSideParkingRules_ == null : roadSideParkingRules_.equals(that.roadSideParkingRules_))) &&
                    ((!isLaneMergeRulesUsed()) ? !that.isLaneMergeRulesUsed() :
                        ((laneMergeRules_ == null) ? that.laneMergeRules_ == null : laneMergeRules_.equals(that.laneMergeRules_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isStayCurbsideUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, stayCurbside_);
        if (isTemporaryLaneMarkingColorUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, temporaryLaneMarkingColor_);
        if (isCurbsidePassingAllowedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, curbsidePassingAllowed_);
        if (isEmergencyRulesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, emergencyRules_);
        if (isYieldOncomingUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, yieldOncoming_);
        if (isYieldCurbSideUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, yieldCurbSide_);
        if (isAlwaysAllowedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, alwaysAllowed_);
        if (isSolidLineCrossingRulesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, solidLineCrossingRules_);
        if (isRoadSideParkingRulesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadSideParkingRules_);
        if (isLaneMergeRulesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneMergeRules_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.rules.types.DrivingRulesContent(in);

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE)).equals(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE))
        {
            stayCurbside_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR)).equals(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR))
        {
            temporaryLaneMarkingColor_ = nds.lane.reference.types.MarkingColor.readEnum(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING)).equals(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING))
        {
            curbsidePassingAllowed_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES))
        {
            emergencyRules_ = new nds.rules.types.EmergencyRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES))
        {
            yieldOncoming_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES))
        {
            yieldCurbSide_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES))
        {
            alwaysAllowed_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES) && !getAlwaysAllowed())
        {
            solidLineCrossingRules_ = new nds.rules.types.SolidLineCrossingRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES))
        {
            roadSideParkingRules_ = new nds.rules.types.RoadSideParkingRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES))
        {
            laneMergeRules_ = new nds.rules.types.LaneMergeRules(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.rules.types.DrivingRulesContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE)).equals(nds.rules.types.DrivingRulesContent.Values.STAY_CURBSIDE))
        {
            stayCurbside_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR)).equals(nds.rules.types.DrivingRulesContent.Values.TEMPORARY_LANE_MARKING_COLOR))
        {
            temporaryLaneMarkingColor_ = nds.lane.reference.types.MarkingColor.readEnum(zserioContext.getTemporaryLaneMarkingColor(), in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING)).equals(nds.rules.types.DrivingRulesContent.Values.CURBSIDE_PASSING))
        {
            curbsidePassingAllowed_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.EMERGENCY_RULES))
        {
            emergencyRules_ = new nds.rules.types.EmergencyRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES))
        {
            yieldOncoming_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.YIELD_RULES))
        {
            yieldCurbSide_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES))
        {
            alwaysAllowed_ = in.readBool();
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.SOLID_LINE_RULES) && !getAlwaysAllowed())
        {
            solidLineCrossingRules_ = new nds.rules.types.SolidLineCrossingRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.ROADSIDE_PARKING_RULES))
        {
            roadSideParkingRules_ = new nds.rules.types.RoadSideParkingRules(in);
        }

        if ((getContent().and(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES)).equals(nds.rules.types.DrivingRulesContent.Values.LANE_MERGE_RULES))
        {
            laneMergeRules_ = new nds.rules.types.LaneMergeRules(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isStayCurbsideUsed())
        {
            endBitPosition += 1;
        }
        if (isTemporaryLaneMarkingColorUsed())
        {
            endBitPosition += temporaryLaneMarkingColor_.bitSizeOf(endBitPosition);
        }
        if (isCurbsidePassingAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isEmergencyRulesUsed())
        {
            endBitPosition = emergencyRules_.initializeOffsets(endBitPosition);
        }
        if (isYieldOncomingUsed())
        {
            endBitPosition += 1;
        }
        if (isYieldCurbSideUsed())
        {
            endBitPosition += 1;
        }
        if (isAlwaysAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isSolidLineCrossingRulesUsed())
        {
            endBitPosition = solidLineCrossingRules_.initializeOffsets(endBitPosition);
        }
        if (isRoadSideParkingRulesUsed())
        {
            endBitPosition = roadSideParkingRules_.initializeOffsets(endBitPosition);
        }
        if (isLaneMergeRulesUsed())
        {
            endBitPosition = laneMergeRules_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isStayCurbsideUsed())
        {
            endBitPosition += 1;
        }
        if (isTemporaryLaneMarkingColorUsed())
        {
            endBitPosition = temporaryLaneMarkingColor_.initializeOffsets(zserioContext.getTemporaryLaneMarkingColor(), endBitPosition);
        }
        if (isCurbsidePassingAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isEmergencyRulesUsed())
        {
            endBitPosition = emergencyRules_.initializeOffsets(endBitPosition);
        }
        if (isYieldOncomingUsed())
        {
            endBitPosition += 1;
        }
        if (isYieldCurbSideUsed())
        {
            endBitPosition += 1;
        }
        if (isAlwaysAllowedUsed())
        {
            endBitPosition += 1;
        }
        if (isSolidLineCrossingRulesUsed())
        {
            endBitPosition = solidLineCrossingRules_.initializeOffsets(endBitPosition);
        }
        if (isRoadSideParkingRulesUsed())
        {
            endBitPosition = roadSideParkingRules_.initializeOffsets(endBitPosition);
        }
        if (isLaneMergeRulesUsed())
        {
            endBitPosition = laneMergeRules_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isStayCurbsideUsed())
        {
            out.writeBool(stayCurbside_);
        }

        if (isTemporaryLaneMarkingColorUsed())
        {
            temporaryLaneMarkingColor_.write(out);
        }

        if (isCurbsidePassingAllowedUsed())
        {
            out.writeBool(curbsidePassingAllowed_);
        }

        if (isEmergencyRulesUsed())
        {
            emergencyRules_.write(out);
        }

        if (isYieldOncomingUsed())
        {
            out.writeBool(yieldOncoming_);
        }

        if (isYieldCurbSideUsed())
        {
            out.writeBool(yieldCurbSide_);
        }

        if (isAlwaysAllowedUsed())
        {
            out.writeBool(alwaysAllowed_);
        }

        if (isSolidLineCrossingRulesUsed())
        {
            solidLineCrossingRules_.write(out);
        }

        if (isRoadSideParkingRulesUsed())
        {
            roadSideParkingRules_.write(out);
        }

        if (isLaneMergeRulesUsed())
        {
            laneMergeRules_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isStayCurbsideUsed())
        {
            out.writeBool(stayCurbside_);
        }

        if (isTemporaryLaneMarkingColorUsed())
        {
            temporaryLaneMarkingColor_.write(zserioContext.getTemporaryLaneMarkingColor(), out);
        }

        if (isCurbsidePassingAllowedUsed())
        {
            out.writeBool(curbsidePassingAllowed_);
        }

        if (isEmergencyRulesUsed())
        {
            emergencyRules_.write(out);
        }

        if (isYieldOncomingUsed())
        {
            out.writeBool(yieldOncoming_);
        }

        if (isYieldCurbSideUsed())
        {
            out.writeBool(yieldCurbSide_);
        }

        if (isAlwaysAllowedUsed())
        {
            out.writeBool(alwaysAllowed_);
        }

        if (isSolidLineCrossingRulesUsed())
        {
            solidLineCrossingRules_.write(out);
        }

        if (isRoadSideParkingRulesUsed())
        {
            roadSideParkingRules_.write(out);
        }

        if (isLaneMergeRulesUsed())
        {
            laneMergeRules_.write(out);
        }
    }

    private nds.rules.types.DrivingRulesContent content_;
    private java.lang.Boolean stayCurbside_;
    private nds.lane.reference.types.MarkingColor temporaryLaneMarkingColor_;
    private java.lang.Boolean curbsidePassingAllowed_;
    private nds.rules.types.EmergencyRules emergencyRules_;
    private java.lang.Boolean yieldOncoming_;
    private java.lang.Boolean yieldCurbSide_;
    private java.lang.Boolean alwaysAllowed_;
    private nds.rules.types.SolidLineCrossingRules solidLineCrossingRules_;
    private nds.rules.types.RoadSideParkingRules roadSideParkingRules_;
    private nds.rules.types.LaneMergeRules laneMergeRules_;
}
