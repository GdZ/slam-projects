/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.layer;

public class RegionRulesLayerLanes implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numRegions_ = new zserio.runtime.array.DeltaContext();
            content_ = new zserio.runtime.array.DeltaContext();
            regionRulesAttributeMaps_ = new nds.rules.instantiations.RulesRegionAttributeMapList.ZserioPackingContext();
            regionRulesAttributeSets_ = new nds.rules.instantiations.RulesRegionAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getNumRegions()
        {
            return numRegions_;
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.rules.instantiations.RulesRegionAttributeMapList.ZserioPackingContext getRegionRulesAttributeMaps()
        {
            return regionRulesAttributeMaps_;
        }

        public nds.rules.instantiations.RulesRegionAttributeSetList.ZserioPackingContext getRegionRulesAttributeSets()
        {
            return regionRulesAttributeSets_;
        }

        private zserio.runtime.array.DeltaContext numRegions_;
        private zserio.runtime.array.DeltaContext content_;
        private nds.rules.instantiations.RulesRegionAttributeMapList.ZserioPackingContext regionRulesAttributeMaps_;
        private nds.rules.instantiations.RulesRegionAttributeSetList.ZserioPackingContext regionRulesAttributeSets_;
    };

    public RegionRulesLayerLanes()
    {
    }

    public RegionRulesLayerLanes(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RegionRulesLayerLanes(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RegionRulesLayerLanes(
            short numRegions_,
            int[] regionId_,
            nds.rules.metadata.RegionRulesLayerContent content_,
            nds.rules.instantiations.RulesRegionAttributeMapList regionRulesAttributeMaps_,
            nds.rules.instantiations.RulesRegionAttributeSetList regionRulesAttributeSets_,
            java.lang.Boolean hasFeatureRelations_,
            nds.rules.layer.RegionLaneGroupRelationList[] featureRelations_)
    {
        setNumRegions(numRegions_);
        setRegionId(regionId_);
        setContent(content_);
        setRegionRulesAttributeMaps(regionRulesAttributeMaps_);
        setRegionRulesAttributeSets(regionRulesAttributeSets_);
        setHasFeatureRelations(hasFeatureRelations_);
        setFeatureRelations(featureRelations_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumRegions().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRegions_));
        content_.initPackingContext(zserioContext.getContent());
        if (isRegionRulesAttributeMapsUsed())
        {
            regionRulesAttributeMaps_.initPackingContext(zserioContext.getRegionRulesAttributeMaps());
        }
        if (isRegionRulesAttributeSetsUsed())
        {
            regionRulesAttributeSets_.initPackingContext(zserioContext.getRegionRulesAttributeSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numRegions_);
        endBitPosition += regionId_.bitSizeOf(endBitPosition);
        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRegionRulesAttributeMapsUsed())
        {
            endBitPosition += regionRulesAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isRegionRulesAttributeSetsUsed())
        {
            endBitPosition += regionRulesAttributeSets_.bitSizeOf(endBitPosition);
        }
        if (isHasFeatureRelationsUsed())
        {
            endBitPosition += 1;
        }
        if (isFeatureRelationsUsed())
        {
            endBitPosition += featureRelations_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumRegions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRegions_));
        endBitPosition += regionId_.bitSizeOfPacked(endBitPosition);
        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isRegionRulesAttributeMapsUsed())
        {
            endBitPosition += regionRulesAttributeMaps_.bitSizeOf(zserioContext.getRegionRulesAttributeMaps(), endBitPosition);
        }
        if (isRegionRulesAttributeSetsUsed())
        {
            endBitPosition += regionRulesAttributeSets_.bitSizeOf(zserioContext.getRegionRulesAttributeSets(), endBitPosition);
        }
        if (isHasFeatureRelationsUsed())
        {
            endBitPosition += 1;
        }
        if (isFeatureRelationsUsed())
        {
            endBitPosition += featureRelations_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumRegions()
    {
        return numRegions_;
    }

    public void setNumRegions(short numRegions_)
    {
        this.numRegions_ = numRegions_;
    }

    public int[] getRegionId()
    {
        return (regionId_ == null) ? null : regionId_.getRawArray();
    }

    public void setRegionId(int[] regionId_)
    {
        this.regionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(regionId_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.rules.metadata.RegionRulesLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.rules.metadata.RegionRulesLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.rules.instantiations.RulesRegionAttributeMapList getRegionRulesAttributeMaps()
    {
        return regionRulesAttributeMaps_;
    }

    public void setRegionRulesAttributeMaps(nds.rules.instantiations.RulesRegionAttributeMapList regionRulesAttributeMaps_)
    {
        this.regionRulesAttributeMaps_ = regionRulesAttributeMaps_;
    }

    public boolean isRegionRulesAttributeMapsUsed()
    {
        return ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS));
    }

    public boolean isRegionRulesAttributeMapsSet()
    {
        return (regionRulesAttributeMaps_ != null);
    }

    public void resetRegionRulesAttributeMaps()
    {
        this.regionRulesAttributeMaps_ = null;
    }

    public nds.rules.instantiations.RulesRegionAttributeSetList getRegionRulesAttributeSets()
    {
        return regionRulesAttributeSets_;
    }

    public void setRegionRulesAttributeSets(nds.rules.instantiations.RulesRegionAttributeSetList regionRulesAttributeSets_)
    {
        this.regionRulesAttributeSets_ = regionRulesAttributeSets_;
    }

    public boolean isRegionRulesAttributeSetsUsed()
    {
        return ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS));
    }

    public boolean isRegionRulesAttributeSetsSet()
    {
        return (regionRulesAttributeSets_ != null);
    }

    public void resetRegionRulesAttributeSets()
    {
        this.regionRulesAttributeSets_ = null;
    }

    public java.lang.Boolean getHasFeatureRelations()
    {
        return hasFeatureRelations_;
    }

    public void setHasFeatureRelations(java.lang.Boolean hasFeatureRelations_)
    {
        this.hasFeatureRelations_ = hasFeatureRelations_;
    }

    public boolean isHasFeatureRelationsUsed()
    {
        return (getNumRegions() > 1);
    }

    public boolean isHasFeatureRelationsSet()
    {
        return (hasFeatureRelations_ != null);
    }

    public void resetHasFeatureRelations()
    {
        this.hasFeatureRelations_ = null;
    }

    public nds.rules.layer.RegionLaneGroupRelationList[] getFeatureRelations()
    {
        return (featureRelations_ == null) ? null : featureRelations_.getRawArray();
    }

    public void setFeatureRelations(nds.rules.layer.RegionLaneGroupRelationList[] featureRelations_)
    {
        if (featureRelations_ == null)
        {
            this.featureRelations_ = null;
        }
        else
        {
            this.featureRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.layer.RegionLaneGroupRelationList.class, featureRelations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.layer.RegionLaneGroupRelationList>(new ZserioElementFactory_featureRelations()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isFeatureRelationsUsed()
    {
        return (getNumRegions() > 1 && getHasFeatureRelations());
    }

    public boolean isFeatureRelationsSet()
    {
        return (featureRelations_ != null);
    }

    public void resetFeatureRelations()
    {
        this.featureRelations_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RegionRulesLayerLanes)
        {
            final RegionRulesLayerLanes that = (RegionRulesLayerLanes)obj;

            return
                    numRegions_ == that.numRegions_ &&
                    ((regionId_ == null) ? that.regionId_ == null : regionId_.equals(that.regionId_)) &&
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isRegionRulesAttributeMapsUsed()) ? !that.isRegionRulesAttributeMapsUsed() :
                        ((regionRulesAttributeMaps_ == null) ? that.regionRulesAttributeMaps_ == null : regionRulesAttributeMaps_.equals(that.regionRulesAttributeMaps_))) &&
                    ((!isRegionRulesAttributeSetsUsed()) ? !that.isRegionRulesAttributeSetsUsed() :
                        ((regionRulesAttributeSets_ == null) ? that.regionRulesAttributeSets_ == null : regionRulesAttributeSets_.equals(that.regionRulesAttributeSets_))) &&
                    ((!isHasFeatureRelationsUsed()) ? !that.isHasFeatureRelationsUsed() :
                        ((hasFeatureRelations_ == null) ? that.hasFeatureRelations_ == null : hasFeatureRelations_.equals(that.hasFeatureRelations_))) &&
                    ((!isFeatureRelationsUsed()) ? !that.isFeatureRelationsUsed() :
                        ((featureRelations_ == null) ? that.featureRelations_ == null : featureRelations_.equals(that.featureRelations_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRegions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, regionId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isRegionRulesAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, regionRulesAttributeMaps_);
        if (isRegionRulesAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, regionRulesAttributeSets_);
        if (isHasFeatureRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasFeatureRelations_);
        if (isFeatureRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, featureRelations_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numRegions_ = in.readVarUInt16();

        regionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        regionId_.read(in, (int)(getNumRegions()));

        content_ = new nds.rules.metadata.RegionRulesLayerContent(in);

        if ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS))
        {
            regionRulesAttributeMaps_ = new nds.rules.instantiations.RulesRegionAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS))
        {
            regionRulesAttributeSets_ = new nds.rules.instantiations.RulesRegionAttributeSetList(in, (byte)(0));
        }

        if (getNumRegions() > 1)
        {
            hasFeatureRelations_ = in.readBool();
        }

        if (getNumRegions() > 1 && getHasFeatureRelations())
        {
            featureRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.layer.RegionLaneGroupRelationList.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.layer.RegionLaneGroupRelationList>(new ZserioElementFactory_featureRelations()),
                    zserio.runtime.array.ArrayType.NORMAL);
            featureRelations_.read(in, (int)(getNumRegions()));
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numRegions_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumRegions().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        regionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        regionId_.readPacked(in, (int)(getNumRegions()));

        content_ = new nds.rules.metadata.RegionRulesLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_MAPS))
        {
            regionRulesAttributeMaps_ = new nds.rules.instantiations.RulesRegionAttributeMapList(zserioContext.getRegionRulesAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS)).equals(nds.rules.metadata.RegionRulesLayerContent.Values.REGION_SETS))
        {
            regionRulesAttributeSets_ = new nds.rules.instantiations.RulesRegionAttributeSetList(zserioContext.getRegionRulesAttributeSets(), in, (byte)(0));
        }

        if (getNumRegions() > 1)
        {
            hasFeatureRelations_ = in.readBool();
        }

        if (getNumRegions() > 1 && getHasFeatureRelations())
        {
            featureRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.rules.layer.RegionLaneGroupRelationList.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.rules.layer.RegionLaneGroupRelationList>(new ZserioElementFactory_featureRelations()),
                    zserio.runtime.array.ArrayType.NORMAL);
            featureRelations_.readPacked(in, (int)(getNumRegions()));
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numRegions_);
        endBitPosition = regionId_.initializeOffsets(endBitPosition);
        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRegionRulesAttributeMapsUsed())
        {
            endBitPosition = regionRulesAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isRegionRulesAttributeSetsUsed())
        {
            endBitPosition = regionRulesAttributeSets_.initializeOffsets(endBitPosition);
        }
        if (isHasFeatureRelationsUsed())
        {
            endBitPosition += 1;
        }
        if (isFeatureRelationsUsed())
        {
            endBitPosition = featureRelations_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumRegions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRegions_));
        endBitPosition = regionId_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isRegionRulesAttributeMapsUsed())
        {
            endBitPosition = regionRulesAttributeMaps_.initializeOffsets(zserioContext.getRegionRulesAttributeMaps(), endBitPosition);
        }
        if (isRegionRulesAttributeSetsUsed())
        {
            endBitPosition = regionRulesAttributeSets_.initializeOffsets(zserioContext.getRegionRulesAttributeSets(), endBitPosition);
        }
        if (isHasFeatureRelationsUsed())
        {
            endBitPosition += 1;
        }
        if (isFeatureRelationsUsed())
        {
            endBitPosition = featureRelations_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt16(numRegions_);

        if (regionId_.size() != (int)(getNumRegions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRulesLayerLanes.regionId: " +
                    regionId_.size() + " != " + (int)(getNumRegions()) + "!");
        }
        regionId_.write(out);

        content_.write(out);

        if (isRegionRulesAttributeMapsUsed())
        {
            // check parameters
            if (regionRulesAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeMaps: " +
                        regionRulesAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            regionRulesAttributeMaps_.write(out);
        }

        if (isRegionRulesAttributeSetsUsed())
        {
            // check parameters
            if (regionRulesAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeSets: " +
                        regionRulesAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            regionRulesAttributeSets_.write(out);
        }

        if (isHasFeatureRelationsUsed())
        {
            out.writeBool(hasFeatureRelations_);
        }

        if (isFeatureRelationsUsed())
        {
            if (featureRelations_.size() != (int)(getNumRegions()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRulesLayerLanes.featureRelations: " +
                        featureRelations_.size() + " != " + (int)(getNumRegions()) + "!");
            }
            featureRelations_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getNumRegions().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRegions_));

        if (regionId_.size() != (int)(getNumRegions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRulesLayerLanes.regionId: " +
                    regionId_.size() + " != " + (int)(getNumRegions()) + "!");
        }
        regionId_.writePacked(out);

        content_.write(zserioContext.getContent(), out);

        if (isRegionRulesAttributeMapsUsed())
        {
            regionRulesAttributeMaps_.write(zserioContext.getRegionRulesAttributeMaps(), out);
        }

        if (isRegionRulesAttributeSetsUsed())
        {
            regionRulesAttributeSets_.write(zserioContext.getRegionRulesAttributeSets(), out);
        }

        if (isHasFeatureRelationsUsed())
        {
            out.writeBool(hasFeatureRelations_);
        }

        if (isFeatureRelationsUsed())
        {
            if (featureRelations_.size() != (int)(getNumRegions()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRulesLayerLanes.featureRelations: " +
                        featureRelations_.size() + " != " + (int)(getNumRegions()) + "!");
            }
            featureRelations_.writePacked(out);
        }
    }

    private void checkConstraints()
    {
        if (!(getNumRegions() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at RegionRulesLayerLanes.numRegions!");
    }

    private static final class ZserioElementFactory_featureRelations implements zserio.runtime.array.PackableElementFactory<nds.rules.layer.RegionLaneGroupRelationList>
    {
        @Override
        public nds.rules.layer.RegionLaneGroupRelationList create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.rules.layer.RegionLaneGroupRelationList(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.rules.layer.RegionLaneGroupRelationList.ZserioPackingContext();
        }

        @Override
        public nds.rules.layer.RegionLaneGroupRelationList create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.rules.layer.RegionLaneGroupRelationList(context, in);
        }
    }

    private short numRegions_;
    private zserio.runtime.array.Array regionId_;
    private nds.rules.metadata.RegionRulesLayerContent content_;
    private nds.rules.instantiations.RulesRegionAttributeMapList regionRulesAttributeMaps_;
    private nds.rules.instantiations.RulesRegionAttributeSetList regionRulesAttributeSets_;
    private java.lang.Boolean hasFeatureRelations_;
    private zserio.runtime.array.Array featureRelations_;
}
