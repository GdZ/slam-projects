/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.layer;

public class RegionRoadRelationList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            shift_ = new zserio.runtime.array.DeltaContext();
            numRelations_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getShift()
        {
            return shift_;
        }

        public zserio.runtime.array.DeltaContext getNumRelations()
        {
            return numRelations_;
        }

        private zserio.runtime.array.DeltaContext shift_;
        private zserio.runtime.array.DeltaContext numRelations_;
    };

    public RegionRoadRelationList()
    {
    }

    public RegionRoadRelationList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RegionRoadRelationList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RegionRoadRelationList(
            byte shift_,
            int numRelations_,
            nds.road.reference.types.RoadReference[] roadIds_,
            nds.road.reference.types.RoadRangeValidity[] roadRangeValidity_)
    {
        setShift(shift_);
        setNumRelations(numRelations_);
        setRoadIds(roadIds_);
        setRoadRangeValidity(roadRangeValidity_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getShift().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        zserioContext.getNumRelations().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRelations_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRelations_);
        endBitPosition += roadIds_.bitSizeOf(endBitPosition);
        endBitPosition += roadRangeValidity_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition += zserioContext.getNumRelations().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRelations_));
        endBitPosition += roadIds_.bitSizeOfPacked(endBitPosition);
        endBitPosition += roadRangeValidity_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return shift_;
    }

    public void setShift(byte shift_)
    {
        this.shift_ = shift_;
    }

    public int getNumRelations()
    {
        return numRelations_;
    }

    public void setNumRelations(int numRelations_)
    {
        this.numRelations_ = numRelations_;
    }

    public nds.road.reference.types.RoadReference[] getRoadIds()
    {
        return (roadIds_ == null) ? null : roadIds_.getRawArray();
    }

    public void setRoadIds(nds.road.reference.types.RoadReference[] roadIds_)
    {
        this.roadIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadReference.class, roadIds_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadReference>(new ZserioElementFactory_roadIds()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.road.reference.types.RoadRangeValidity[] getRoadRangeValidity()
    {
        return (roadRangeValidity_ == null) ? null : roadRangeValidity_.getRawArray();
    }

    public void setRoadRangeValidity(nds.road.reference.types.RoadRangeValidity[] roadRangeValidity_)
    {
        this.roadRangeValidity_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadRangeValidity.class, roadRangeValidity_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadRangeValidity>(new ZserioElementFactory_roadRangeValidity()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RegionRoadRelationList)
        {
            final RegionRoadRelationList that = (RegionRoadRelationList)obj;

            return
                    shift_ == that.shift_ &&
                    numRelations_ == that.numRelations_ &&
                    ((roadIds_ == null) ? that.roadIds_ == null : roadIds_.equals(that.roadIds_)) &&
                    ((roadRangeValidity_ == null) ? that.roadRangeValidity_ == null : roadRangeValidity_.equals(that.roadRangeValidity_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, shift_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRelations_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadIds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadRangeValidity_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        shift_ = (byte)in.readBits(5);

        numRelations_ = in.readVarSize();

        roadIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadReference>(new ZserioElementFactory_roadIds()),
                zserio.runtime.array.ArrayType.NORMAL);
        roadIds_.read(in, (int)(getNumRelations()));

        roadRangeValidity_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadRangeValidity.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadRangeValidity>(new ZserioElementFactory_roadRangeValidity()),
                zserio.runtime.array.ArrayType.NORMAL);
        roadRangeValidity_.read(in, (int)(getNumRelations()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        shift_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getShift().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        numRelations_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumRelations().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        roadIds_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadReference>(new ZserioElementFactory_roadIds()),
                zserio.runtime.array.ArrayType.NORMAL);
        roadIds_.readPacked(in, (int)(getNumRelations()));

        roadRangeValidity_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.RoadRangeValidity.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.RoadRangeValidity>(new ZserioElementFactory_roadRangeValidity()),
                zserio.runtime.array.ArrayType.NORMAL);
        roadRangeValidity_.readPacked(in, (int)(getNumRelations()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRelations_);
        endBitPosition = roadIds_.initializeOffsets(endBitPosition);
        endBitPosition = roadRangeValidity_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition += zserioContext.getNumRelations().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRelations_));
        endBitPosition = roadIds_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = roadRangeValidity_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBits(shift_, 5);

        out.writeVarSize(numRelations_);

        if (roadIds_.size() != (int)(getNumRelations()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRoadRelationList.roadIds: " +
                    roadIds_.size() + " != " + (int)(getNumRelations()) + "!");
        }
        roadIds_.write(out);

        if (roadRangeValidity_.size() != (int)(getNumRelations()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRoadRelationList.roadRangeValidity: " +
                    roadRangeValidity_.size() + " != " + (int)(getNumRelations()) + "!");
        }
        roadRangeValidity_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getShift().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));

        zserioContext.getNumRelations().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRelations_));

        if (roadIds_.size() != (int)(getNumRelations()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRoadRelationList.roadIds: " +
                    roadIds_.size() + " != " + (int)(getNumRelations()) + "!");
        }
        roadIds_.writePacked(out);

        if (roadRangeValidity_.size() != (int)(getNumRelations()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field RegionRoadRelationList.roadRangeValidity: " +
                    roadRangeValidity_.size() + " != " + (int)(getNumRelations()) + "!");
        }
        roadRangeValidity_.writePacked(out);
    }

    private static final class ZserioElementFactory_roadIds implements zserio.runtime.array.PackableElementFactory<nds.road.reference.types.RoadReference>
    {
        @Override
        public nds.road.reference.types.RoadReference create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.reference.types.RoadReference(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.reference.types.RoadReference.ZserioPackingContext();
        }

        @Override
        public nds.road.reference.types.RoadReference create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.reference.types.RoadReference(context, in);
        }
    }

    private final class ZserioElementFactory_roadRangeValidity implements zserio.runtime.array.PackableElementFactory<nds.road.reference.types.RoadRangeValidity>
    {
        @Override
        public nds.road.reference.types.RoadRangeValidity create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.reference.types.RoadRangeValidity(in, (byte)(getShift()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.reference.types.RoadRangeValidity.ZserioPackingContext();
        }

        @Override
        public nds.road.reference.types.RoadRangeValidity create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.reference.types.RoadRangeValidity(context, in, (byte)(getShift()));
        }
    }

    private byte shift_;
    private int numRelations_;
    private zserio.runtime.array.Array roadIds_;
    private zserio.runtime.array.Array roadRangeValidity_;
}
