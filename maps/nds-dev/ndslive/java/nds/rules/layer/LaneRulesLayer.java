/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.rules.layer;

public class LaneRulesLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            laneRangeAttributeMaps_ = new nds.rules.instantiations.RulesLaneRangeAttributeMapList.ZserioPackingContext();
            lanePositionAttributeMaps_ = new nds.rules.instantiations.RulesLanePositionAttributeMapList.ZserioPackingContext();
            laneTransitionAttributeMaps_ = new nds.rules.instantiations.RulesLaneTransitionAttributeMapList.ZserioPackingContext();
            laneRangeAttributeSets_ = new nds.rules.instantiations.RulesLaneRangeAttributeSetList.ZserioPackingContext();
            lanePositionAttributeSets_ = new nds.rules.instantiations.RulesLanePositionAttributeSetList.ZserioPackingContext();
            laneTransitionAttributeSets_ = new nds.rules.instantiations.RulesLaneTransitionAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.rules.instantiations.RulesLaneRangeAttributeMapList.ZserioPackingContext getLaneRangeAttributeMaps()
        {
            return laneRangeAttributeMaps_;
        }

        public nds.rules.instantiations.RulesLanePositionAttributeMapList.ZserioPackingContext getLanePositionAttributeMaps()
        {
            return lanePositionAttributeMaps_;
        }

        public nds.rules.instantiations.RulesLaneTransitionAttributeMapList.ZserioPackingContext getLaneTransitionAttributeMaps()
        {
            return laneTransitionAttributeMaps_;
        }

        public nds.rules.instantiations.RulesLaneRangeAttributeSetList.ZserioPackingContext getLaneRangeAttributeSets()
        {
            return laneRangeAttributeSets_;
        }

        public nds.rules.instantiations.RulesLanePositionAttributeSetList.ZserioPackingContext getLanePositionAttributeSets()
        {
            return lanePositionAttributeSets_;
        }

        public nds.rules.instantiations.RulesLaneTransitionAttributeSetList.ZserioPackingContext getLaneTransitionAttributeSets()
        {
            return laneTransitionAttributeSets_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.rules.instantiations.RulesLaneRangeAttributeMapList.ZserioPackingContext laneRangeAttributeMaps_;
        private nds.rules.instantiations.RulesLanePositionAttributeMapList.ZserioPackingContext lanePositionAttributeMaps_;
        private nds.rules.instantiations.RulesLaneTransitionAttributeMapList.ZserioPackingContext laneTransitionAttributeMaps_;
        private nds.rules.instantiations.RulesLaneRangeAttributeSetList.ZserioPackingContext laneRangeAttributeSets_;
        private nds.rules.instantiations.RulesLanePositionAttributeSetList.ZserioPackingContext lanePositionAttributeSets_;
        private nds.rules.instantiations.RulesLaneTransitionAttributeSetList.ZserioPackingContext laneTransitionAttributeSets_;
    };

    public LaneRulesLayer()
    {
    }

    public LaneRulesLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneRulesLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneRulesLayer(
            nds.rules.metadata.LaneRulesLayerContent content_,
            nds.rules.instantiations.RulesLaneRangeAttributeMapList laneRangeAttributeMaps_,
            nds.rules.instantiations.RulesLanePositionAttributeMapList lanePositionAttributeMaps_,
            nds.rules.instantiations.RulesLaneTransitionAttributeMapList laneTransitionAttributeMaps_,
            nds.rules.instantiations.RulesLaneRangeAttributeSetList laneRangeAttributeSets_,
            nds.rules.instantiations.RulesLanePositionAttributeSetList lanePositionAttributeSets_,
            nds.rules.instantiations.RulesLaneTransitionAttributeSetList laneTransitionAttributeSets_)
    {
        setContent(content_);
        setLaneRangeAttributeMaps(laneRangeAttributeMaps_);
        setLanePositionAttributeMaps(lanePositionAttributeMaps_);
        setLaneTransitionAttributeMaps(laneTransitionAttributeMaps_);
        setLaneRangeAttributeSets(laneRangeAttributeSets_);
        setLanePositionAttributeSets(lanePositionAttributeSets_);
        setLaneTransitionAttributeSets(laneTransitionAttributeSets_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isLaneRangeAttributeMapsUsed())
        {
            laneRangeAttributeMaps_.initPackingContext(zserioContext.getLaneRangeAttributeMaps());
        }
        if (isLanePositionAttributeMapsUsed())
        {
            lanePositionAttributeMaps_.initPackingContext(zserioContext.getLanePositionAttributeMaps());
        }
        if (isLaneTransitionAttributeMapsUsed())
        {
            laneTransitionAttributeMaps_.initPackingContext(zserioContext.getLaneTransitionAttributeMaps());
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            laneRangeAttributeSets_.initPackingContext(zserioContext.getLaneRangeAttributeSets());
        }
        if (isLanePositionAttributeSetsUsed())
        {
            lanePositionAttributeSets_.initPackingContext(zserioContext.getLanePositionAttributeSets());
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            laneTransitionAttributeSets_.initPackingContext(zserioContext.getLaneTransitionAttributeSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition += laneRangeAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isLanePositionAttributeMapsUsed())
        {
            endBitPosition += lanePositionAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition += laneTransitionAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition += laneRangeAttributeSets_.bitSizeOf(endBitPosition);
        }
        if (isLanePositionAttributeSetsUsed())
        {
            endBitPosition += lanePositionAttributeSets_.bitSizeOf(endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition += laneTransitionAttributeSets_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition += laneRangeAttributeMaps_.bitSizeOf(zserioContext.getLaneRangeAttributeMaps(), endBitPosition);
        }
        if (isLanePositionAttributeMapsUsed())
        {
            endBitPosition += lanePositionAttributeMaps_.bitSizeOf(zserioContext.getLanePositionAttributeMaps(), endBitPosition);
        }
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition += laneTransitionAttributeMaps_.bitSizeOf(zserioContext.getLaneTransitionAttributeMaps(), endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition += laneRangeAttributeSets_.bitSizeOf(zserioContext.getLaneRangeAttributeSets(), endBitPosition);
        }
        if (isLanePositionAttributeSetsUsed())
        {
            endBitPosition += lanePositionAttributeSets_.bitSizeOf(zserioContext.getLanePositionAttributeSets(), endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition += laneTransitionAttributeSets_.bitSizeOf(zserioContext.getLaneTransitionAttributeSets(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.rules.metadata.LaneRulesLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.rules.metadata.LaneRulesLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.rules.instantiations.RulesLaneRangeAttributeMapList getLaneRangeAttributeMaps()
    {
        return laneRangeAttributeMaps_;
    }

    public void setLaneRangeAttributeMaps(nds.rules.instantiations.RulesLaneRangeAttributeMapList laneRangeAttributeMaps_)
    {
        this.laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
    }

    public boolean isLaneRangeAttributeMapsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS));
    }

    public boolean isLaneRangeAttributeMapsSet()
    {
        return (laneRangeAttributeMaps_ != null);
    }

    public void resetLaneRangeAttributeMaps()
    {
        this.laneRangeAttributeMaps_ = null;
    }

    public nds.rules.instantiations.RulesLanePositionAttributeMapList getLanePositionAttributeMaps()
    {
        return lanePositionAttributeMaps_;
    }

    public void setLanePositionAttributeMaps(nds.rules.instantiations.RulesLanePositionAttributeMapList lanePositionAttributeMaps_)
    {
        this.lanePositionAttributeMaps_ = lanePositionAttributeMaps_;
    }

    public boolean isLanePositionAttributeMapsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS));
    }

    public boolean isLanePositionAttributeMapsSet()
    {
        return (lanePositionAttributeMaps_ != null);
    }

    public void resetLanePositionAttributeMaps()
    {
        this.lanePositionAttributeMaps_ = null;
    }

    public nds.rules.instantiations.RulesLaneTransitionAttributeMapList getLaneTransitionAttributeMaps()
    {
        return laneTransitionAttributeMaps_;
    }

    public void setLaneTransitionAttributeMaps(nds.rules.instantiations.RulesLaneTransitionAttributeMapList laneTransitionAttributeMaps_)
    {
        this.laneTransitionAttributeMaps_ = laneTransitionAttributeMaps_;
    }

    public boolean isLaneTransitionAttributeMapsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS));
    }

    public boolean isLaneTransitionAttributeMapsSet()
    {
        return (laneTransitionAttributeMaps_ != null);
    }

    public void resetLaneTransitionAttributeMaps()
    {
        this.laneTransitionAttributeMaps_ = null;
    }

    public nds.rules.instantiations.RulesLaneRangeAttributeSetList getLaneRangeAttributeSets()
    {
        return laneRangeAttributeSets_;
    }

    public void setLaneRangeAttributeSets(nds.rules.instantiations.RulesLaneRangeAttributeSetList laneRangeAttributeSets_)
    {
        this.laneRangeAttributeSets_ = laneRangeAttributeSets_;
    }

    public boolean isLaneRangeAttributeSetsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS));
    }

    public boolean isLaneRangeAttributeSetsSet()
    {
        return (laneRangeAttributeSets_ != null);
    }

    public void resetLaneRangeAttributeSets()
    {
        this.laneRangeAttributeSets_ = null;
    }

    public nds.rules.instantiations.RulesLanePositionAttributeSetList getLanePositionAttributeSets()
    {
        return lanePositionAttributeSets_;
    }

    public void setLanePositionAttributeSets(nds.rules.instantiations.RulesLanePositionAttributeSetList lanePositionAttributeSets_)
    {
        this.lanePositionAttributeSets_ = lanePositionAttributeSets_;
    }

    public boolean isLanePositionAttributeSetsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS));
    }

    public boolean isLanePositionAttributeSetsSet()
    {
        return (lanePositionAttributeSets_ != null);
    }

    public void resetLanePositionAttributeSets()
    {
        this.lanePositionAttributeSets_ = null;
    }

    public nds.rules.instantiations.RulesLaneTransitionAttributeSetList getLaneTransitionAttributeSets()
    {
        return laneTransitionAttributeSets_;
    }

    public void setLaneTransitionAttributeSets(nds.rules.instantiations.RulesLaneTransitionAttributeSetList laneTransitionAttributeSets_)
    {
        this.laneTransitionAttributeSets_ = laneTransitionAttributeSets_;
    }

    public boolean isLaneTransitionAttributeSetsUsed()
    {
        return ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS));
    }

    public boolean isLaneTransitionAttributeSetsSet()
    {
        return (laneTransitionAttributeSets_ != null);
    }

    public void resetLaneTransitionAttributeSets()
    {
        this.laneTransitionAttributeSets_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneRulesLayer)
        {
            final LaneRulesLayer that = (LaneRulesLayer)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isLaneRangeAttributeMapsUsed()) ? !that.isLaneRangeAttributeMapsUsed() :
                        ((laneRangeAttributeMaps_ == null) ? that.laneRangeAttributeMaps_ == null : laneRangeAttributeMaps_.equals(that.laneRangeAttributeMaps_))) &&
                    ((!isLanePositionAttributeMapsUsed()) ? !that.isLanePositionAttributeMapsUsed() :
                        ((lanePositionAttributeMaps_ == null) ? that.lanePositionAttributeMaps_ == null : lanePositionAttributeMaps_.equals(that.lanePositionAttributeMaps_))) &&
                    ((!isLaneTransitionAttributeMapsUsed()) ? !that.isLaneTransitionAttributeMapsUsed() :
                        ((laneTransitionAttributeMaps_ == null) ? that.laneTransitionAttributeMaps_ == null : laneTransitionAttributeMaps_.equals(that.laneTransitionAttributeMaps_))) &&
                    ((!isLaneRangeAttributeSetsUsed()) ? !that.isLaneRangeAttributeSetsUsed() :
                        ((laneRangeAttributeSets_ == null) ? that.laneRangeAttributeSets_ == null : laneRangeAttributeSets_.equals(that.laneRangeAttributeSets_))) &&
                    ((!isLanePositionAttributeSetsUsed()) ? !that.isLanePositionAttributeSetsUsed() :
                        ((lanePositionAttributeSets_ == null) ? that.lanePositionAttributeSets_ == null : lanePositionAttributeSets_.equals(that.lanePositionAttributeSets_))) &&
                    ((!isLaneTransitionAttributeSetsUsed()) ? !that.isLaneTransitionAttributeSetsUsed() :
                        ((laneTransitionAttributeSets_ == null) ? that.laneTransitionAttributeSets_ == null : laneTransitionAttributeSets_.equals(that.laneTransitionAttributeSets_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isLaneRangeAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRangeAttributeMaps_);
        if (isLanePositionAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanePositionAttributeMaps_);
        if (isLaneTransitionAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneTransitionAttributeMaps_);
        if (isLaneRangeAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRangeAttributeSets_);
        if (isLanePositionAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanePositionAttributeSets_);
        if (isLaneTransitionAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneTransitionAttributeSets_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.rules.metadata.LaneRulesLayerContent(in);

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS))
        {
            laneRangeAttributeMaps_ = new nds.rules.instantiations.RulesLaneRangeAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS))
        {
            lanePositionAttributeMaps_ = new nds.rules.instantiations.RulesLanePositionAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            laneTransitionAttributeMaps_ = new nds.rules.instantiations.RulesLaneTransitionAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeSets_ = new nds.rules.instantiations.RulesLaneRangeAttributeSetList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS))
        {
            lanePositionAttributeSets_ = new nds.rules.instantiations.RulesLanePositionAttributeSetList(in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS))
        {
            laneTransitionAttributeSets_ = new nds.rules.instantiations.RulesLaneTransitionAttributeSetList(in, (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.rules.metadata.LaneRulesLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_MAPS))
        {
            laneRangeAttributeMaps_ = new nds.rules.instantiations.RulesLaneRangeAttributeMapList(zserioContext.getLaneRangeAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_MAPS))
        {
            lanePositionAttributeMaps_ = new nds.rules.instantiations.RulesLanePositionAttributeMapList(zserioContext.getLanePositionAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            laneTransitionAttributeMaps_ = new nds.rules.instantiations.RulesLaneTransitionAttributeMapList(zserioContext.getLaneTransitionAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeSets_ = new nds.rules.instantiations.RulesLaneRangeAttributeSetList(zserioContext.getLaneRangeAttributeSets(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_POSITION_SETS))
        {
            lanePositionAttributeSets_ = new nds.rules.instantiations.RulesLanePositionAttributeSetList(zserioContext.getLanePositionAttributeSets(), in, (byte)(0));
        }

        if ((getContent().and(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.rules.metadata.LaneRulesLayerContent.Values.LANE_TRANSITION_SETS))
        {
            laneTransitionAttributeSets_ = new nds.rules.instantiations.RulesLaneTransitionAttributeSetList(zserioContext.getLaneTransitionAttributeSets(), in, (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition = laneRangeAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isLanePositionAttributeMapsUsed())
        {
            endBitPosition = lanePositionAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition = laneTransitionAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition = laneRangeAttributeSets_.initializeOffsets(endBitPosition);
        }
        if (isLanePositionAttributeSetsUsed())
        {
            endBitPosition = lanePositionAttributeSets_.initializeOffsets(endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition = laneTransitionAttributeSets_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition = laneRangeAttributeMaps_.initializeOffsets(zserioContext.getLaneRangeAttributeMaps(), endBitPosition);
        }
        if (isLanePositionAttributeMapsUsed())
        {
            endBitPosition = lanePositionAttributeMaps_.initializeOffsets(zserioContext.getLanePositionAttributeMaps(), endBitPosition);
        }
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition = laneTransitionAttributeMaps_.initializeOffsets(zserioContext.getLaneTransitionAttributeMaps(), endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition = laneRangeAttributeSets_.initializeOffsets(zserioContext.getLaneRangeAttributeSets(), endBitPosition);
        }
        if (isLanePositionAttributeSetsUsed())
        {
            endBitPosition = lanePositionAttributeSets_.initializeOffsets(zserioContext.getLanePositionAttributeSets(), endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition = laneTransitionAttributeSets_.initializeOffsets(zserioContext.getLaneTransitionAttributeSets(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isLaneRangeAttributeMapsUsed())
        {
            // check parameters
            if (laneRangeAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeMaps: " +
                        laneRangeAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneRangeAttributeMaps_.write(out);
        }

        if (isLanePositionAttributeMapsUsed())
        {
            // check parameters
            if (lanePositionAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeMaps: " +
                        lanePositionAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            lanePositionAttributeMaps_.write(out);
        }

        if (isLaneTransitionAttributeMapsUsed())
        {
            // check parameters
            if (laneTransitionAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeMaps: " +
                        laneTransitionAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneTransitionAttributeMaps_.write(out);
        }

        if (isLaneRangeAttributeSetsUsed())
        {
            // check parameters
            if (laneRangeAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeSets: " +
                        laneRangeAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneRangeAttributeSets_.write(out);
        }

        if (isLanePositionAttributeSetsUsed())
        {
            // check parameters
            if (lanePositionAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeSets: " +
                        lanePositionAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            lanePositionAttributeSets_.write(out);
        }

        if (isLaneTransitionAttributeSetsUsed())
        {
            // check parameters
            if (laneTransitionAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeSets: " +
                        laneTransitionAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneTransitionAttributeSets_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isLaneRangeAttributeMapsUsed())
        {
            laneRangeAttributeMaps_.write(zserioContext.getLaneRangeAttributeMaps(), out);
        }

        if (isLanePositionAttributeMapsUsed())
        {
            lanePositionAttributeMaps_.write(zserioContext.getLanePositionAttributeMaps(), out);
        }

        if (isLaneTransitionAttributeMapsUsed())
        {
            laneTransitionAttributeMaps_.write(zserioContext.getLaneTransitionAttributeMaps(), out);
        }

        if (isLaneRangeAttributeSetsUsed())
        {
            laneRangeAttributeSets_.write(zserioContext.getLaneRangeAttributeSets(), out);
        }

        if (isLanePositionAttributeSetsUsed())
        {
            lanePositionAttributeSets_.write(zserioContext.getLanePositionAttributeSets(), out);
        }

        if (isLaneTransitionAttributeSetsUsed())
        {
            laneTransitionAttributeSets_.write(zserioContext.getLaneTransitionAttributeSets(), out);
        }
    }

    private nds.rules.metadata.LaneRulesLayerContent content_;
    private nds.rules.instantiations.RulesLaneRangeAttributeMapList laneRangeAttributeMaps_;
    private nds.rules.instantiations.RulesLanePositionAttributeMapList lanePositionAttributeMaps_;
    private nds.rules.instantiations.RulesLaneTransitionAttributeMapList laneTransitionAttributeMaps_;
    private nds.rules.instantiations.RulesLaneRangeAttributeSetList laneRangeAttributeSets_;
    private nds.rules.instantiations.RulesLanePositionAttributeSetList lanePositionAttributeSets_;
    private nds.rules.instantiations.RulesLaneTransitionAttributeSetList laneTransitionAttributeSets_;
}
