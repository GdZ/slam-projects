/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.node;

public class NodeList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numNodes_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumNodes()
        {
            return numNodes_;
        }

        private zserio.runtime.array.DeltaContext numNodes_;
    };

    public NodeList()
    {
    }

    public NodeList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public NodeList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public NodeList(
            java.math.BigInteger numNodes_,
            nds.registry.node.NodeInformation[] nodes_)
    {
        setNumNodes(numNodes_);
        setNodes(nodes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumNodes().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(numNodes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(numNodes_);
        endBitPosition += nodes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumNodes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(numNodes_));
        endBitPosition += nodes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getNumNodes()
    {
        return numNodes_;
    }

    public void setNumNodes(java.math.BigInteger numNodes_)
    {
        this.numNodes_ = numNodes_;
    }

    public nds.registry.node.NodeInformation[] getNodes()
    {
        return (nodes_ == null) ? null : nodes_.getRawArray();
    }

    public void setNodes(nds.registry.node.NodeInformation[] nodes_)
    {
        this.nodes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.registry.node.NodeInformation.class, nodes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.registry.node.NodeInformation>(new ZserioElementFactory_nodes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof NodeList)
        {
            final NodeList that = (NodeList)obj;

            return
                    ((numNodes_ == null) ? that.numNodes_ == null : numNodes_.equals(that.numNodes_)) &&
                    ((nodes_ == null) ? that.nodes_ == null : nodes_.equals(that.nodes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numNodes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nodes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numNodes_ = in.readVarUInt();

        nodes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.registry.node.NodeInformation.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.registry.node.NodeInformation>(new ZserioElementFactory_nodes()),
                zserio.runtime.array.ArrayType.NORMAL);
        nodes_.read(in, (int)((getNumNodes()).longValue()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numNodes_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getNumNodes().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        nodes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.registry.node.NodeInformation.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.registry.node.NodeInformation>(new ZserioElementFactory_nodes()),
                zserio.runtime.array.ArrayType.NORMAL);
        nodes_.readPacked(in, (int)((getNumNodes()).longValue()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(numNodes_);
        endBitPosition = nodes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumNodes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(numNodes_));
        endBitPosition = nodes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(numNodes_);

        if (nodes_.size() != (int)((getNumNodes()).longValue()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field NodeList.nodes: " +
                    nodes_.size() + " != " + (int)((getNumNodes()).longValue()) + "!");
        }
        nodes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumNodes().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(numNodes_));

        if (nodes_.size() != (int)((getNumNodes()).longValue()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field NodeList.nodes: " +
                    nodes_.size() + " != " + (int)((getNumNodes()).longValue()) + "!");
        }
        nodes_.writePacked(out);
    }

    private static final class ZserioElementFactory_nodes implements zserio.runtime.array.PackableElementFactory<nds.registry.node.NodeInformation>
    {
        @Override
        public nds.registry.node.NodeInformation create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.registry.node.NodeInformation(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.registry.node.NodeInformation.ZserioPackingContext();
        }

        @Override
        public nds.registry.node.NodeInformation create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.registry.node.NodeInformation(context, in);
        }
    }

    private java.math.BigInteger numNodes_;
    private zserio.runtime.array.Array nodes_;
}
