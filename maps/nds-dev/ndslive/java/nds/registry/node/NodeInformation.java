/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.node;

public class NodeInformation implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            systemId_ = new nds.system.types.NdsSystemToken.ZserioPackingContext();
            nodeToken_ = new nds.system.types.NdsNodeToken.ZserioPackingContext();
            legalInfo_ = new nds.system.types.NdsNodeLegalInfo.ZserioPackingContext();
            type_ = new zserio.runtime.array.DeltaContext();
            connectionCosts_ = new zserio.runtime.array.DeltaContext();
            spatialCoverage_ = new nds.core.geometry.SpatialExtent.ZserioPackingContext();
            protocolType_ = new zserio.runtime.array.DeltaContext();
            port_ = new zserio.runtime.array.DeltaContext();
            serviceInformation_ = new nds.registry.node.ServiceInformation.ZserioPackingContext();
        }

        public nds.system.types.NdsSystemToken.ZserioPackingContext getSystemId()
        {
            return systemId_;
        }

        public nds.system.types.NdsNodeToken.ZserioPackingContext getNodeToken()
        {
            return nodeToken_;
        }

        public nds.system.types.NdsNodeLegalInfo.ZserioPackingContext getLegalInfo()
        {
            return legalInfo_;
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getConnectionCosts()
        {
            return connectionCosts_;
        }

        public nds.core.geometry.SpatialExtent.ZserioPackingContext getSpatialCoverage()
        {
            return spatialCoverage_;
        }

        public zserio.runtime.array.DeltaContext getProtocolType()
        {
            return protocolType_;
        }

        public zserio.runtime.array.DeltaContext getPort()
        {
            return port_;
        }

        public nds.registry.node.ServiceInformation.ZserioPackingContext getServiceInformation()
        {
            return serviceInformation_;
        }

        private nds.system.types.NdsSystemToken.ZserioPackingContext systemId_;
        private nds.system.types.NdsNodeToken.ZserioPackingContext nodeToken_;
        private nds.system.types.NdsNodeLegalInfo.ZserioPackingContext legalInfo_;
        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext connectionCosts_;
        private nds.core.geometry.SpatialExtent.ZserioPackingContext spatialCoverage_;
        private zserio.runtime.array.DeltaContext protocolType_;
        private zserio.runtime.array.DeltaContext port_;
        private nds.registry.node.ServiceInformation.ZserioPackingContext serviceInformation_;
    };

    public NodeInformation()
    {
    }

    public NodeInformation(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public NodeInformation(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public NodeInformation(
            nds.system.types.NdsSystemToken systemId_,
            nds.system.types.NdsNodeToken nodeToken_,
            nds.system.types.NdsNodeLegalInfo legalInfo_,
            nds.registry.node.NodeType type_,
            int connectionCosts_,
            nds.core.geometry.SpatialExtent spatialCoverage_,
            short protocolType_,
            java.lang.String protocolDetailsUri_,
            java.lang.String nodeName_,
            java.lang.String hostName_,
            int port_,
            nds.registry.node.ServiceInformation serviceInformation_,
            nds.system.types.ModuleDefinition registryDefinition_)
    {
        setSystemId(systemId_);
        setNodeToken(nodeToken_);
        setLegalInfo(legalInfo_);
        setType(type_);
        setConnectionCosts(connectionCosts_);
        setSpatialCoverage(spatialCoverage_);
        setProtocolType(protocolType_);
        setProtocolDetailsUri(protocolDetailsUri_);
        setNodeName(nodeName_);
        setHostName(hostName_);
        setPort(port_);
        setServiceInformation(serviceInformation_);
        setRegistryDefinition(registryDefinition_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        systemId_.initPackingContext(zserioContext.getSystemId());
        nodeToken_.initPackingContext(zserioContext.getNodeToken());
        legalInfo_.initPackingContext(zserioContext.getLegalInfo());
        type_.initPackingContext(zserioContext.getType());
        zserioContext.getConnectionCosts().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(connectionCosts_));
        spatialCoverage_.initPackingContext(zserioContext.getSpatialCoverage());
        zserioContext.getProtocolType().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(protocolType_));
        zserioContext.getPort().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(port_));
        if (isServiceInformationUsed())
        {
            serviceInformation_.initPackingContext(zserioContext.getServiceInformation());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += systemId_.bitSizeOf(endBitPosition);
        endBitPosition += nodeToken_.bitSizeOf(endBitPosition);
        endBitPosition += legalInfo_.bitSizeOf(endBitPosition);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 16;
        endBitPosition += spatialCoverage_.bitSizeOf(endBitPosition);
        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(protocolDetailsUri_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(nodeName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(hostName_);
        endBitPosition += 16;
        if (isServiceInformationUsed())
        {
            endBitPosition += serviceInformation_.bitSizeOf(endBitPosition);
        }
        if (isRegistryDefinitionUsed())
        {
            endBitPosition += registryDefinition_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += systemId_.bitSizeOf(zserioContext.getSystemId(), endBitPosition);
        endBitPosition += nodeToken_.bitSizeOf(zserioContext.getNodeToken(), endBitPosition);
        endBitPosition += legalInfo_.bitSizeOf(zserioContext.getLegalInfo(), endBitPosition);
        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += zserioContext.getConnectionCosts().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(connectionCosts_));
        endBitPosition += spatialCoverage_.bitSizeOf(zserioContext.getSpatialCoverage(), endBitPosition);
        endBitPosition += zserioContext.getProtocolType().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(protocolType_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(protocolDetailsUri_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(nodeName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(hostName_);
        endBitPosition += zserioContext.getPort().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(port_));
        if (isServiceInformationUsed())
        {
            endBitPosition += serviceInformation_.bitSizeOf(zserioContext.getServiceInformation(), endBitPosition);
        }
        if (isRegistryDefinitionUsed())
        {
            endBitPosition += registryDefinition_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.system.types.NdsSystemToken getSystemId()
    {
        return systemId_;
    }

    public void setSystemId(nds.system.types.NdsSystemToken systemId_)
    {
        this.systemId_ = systemId_;
    }

    public nds.system.types.NdsNodeToken getNodeToken()
    {
        return nodeToken_;
    }

    public void setNodeToken(nds.system.types.NdsNodeToken nodeToken_)
    {
        this.nodeToken_ = nodeToken_;
    }

    public nds.system.types.NdsNodeLegalInfo getLegalInfo()
    {
        return legalInfo_;
    }

    public void setLegalInfo(nds.system.types.NdsNodeLegalInfo legalInfo_)
    {
        this.legalInfo_ = legalInfo_;
    }

    public nds.registry.node.NodeType getType()
    {
        return type_;
    }

    public void setType(nds.registry.node.NodeType type_)
    {
        this.type_ = type_;
    }

    public int getConnectionCosts()
    {
        return connectionCosts_;
    }

    public void setConnectionCosts(int connectionCosts_)
    {
        this.connectionCosts_ = connectionCosts_;
    }

    public nds.core.geometry.SpatialExtent getSpatialCoverage()
    {
        return spatialCoverage_;
    }

    public void setSpatialCoverage(nds.core.geometry.SpatialExtent spatialCoverage_)
    {
        this.spatialCoverage_ = spatialCoverage_;
    }

    public short getProtocolType()
    {
        return protocolType_;
    }

    public void setProtocolType(short protocolType_)
    {
        this.protocolType_ = protocolType_;
    }

    public java.lang.String getProtocolDetailsUri()
    {
        return protocolDetailsUri_;
    }

    public void setProtocolDetailsUri(java.lang.String protocolDetailsUri_)
    {
        this.protocolDetailsUri_ = protocolDetailsUri_;
    }

    public java.lang.String getNodeName()
    {
        return nodeName_;
    }

    public void setNodeName(java.lang.String nodeName_)
    {
        this.nodeName_ = nodeName_;
    }

    public java.lang.String getHostName()
    {
        return hostName_;
    }

    public void setHostName(java.lang.String hostName_)
    {
        this.hostName_ = hostName_;
    }

    public int getPort()
    {
        return port_;
    }

    public void setPort(int port_)
    {
        this.port_ = port_;
    }

    public nds.registry.node.ServiceInformation getServiceInformation()
    {
        return serviceInformation_;
    }

    public void setServiceInformation(nds.registry.node.ServiceInformation serviceInformation_)
    {
        this.serviceInformation_ = serviceInformation_;
    }

    public boolean isServiceInformationUsed()
    {
        return (getType() == nds.registry.node.NodeType.SERVICE);
    }

    public boolean isServiceInformationSet()
    {
        return (serviceInformation_ != null);
    }

    public void resetServiceInformation()
    {
        this.serviceInformation_ = null;
    }

    public nds.system.types.ModuleDefinition getRegistryDefinition()
    {
        return registryDefinition_;
    }

    public void setRegistryDefinition(nds.system.types.ModuleDefinition registryDefinition_)
    {
        this.registryDefinition_ = registryDefinition_;
    }

    public boolean isRegistryDefinitionUsed()
    {
        return (getType() == nds.registry.node.NodeType.REGISTRY);
    }

    public boolean isRegistryDefinitionSet()
    {
        return (registryDefinition_ != null);
    }

    public void resetRegistryDefinition()
    {
        this.registryDefinition_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof NodeInformation)
        {
            final NodeInformation that = (NodeInformation)obj;

            return
                    ((systemId_ == null) ? that.systemId_ == null : systemId_.equals(that.systemId_)) &&
                    ((nodeToken_ == null) ? that.nodeToken_ == null : nodeToken_.equals(that.nodeToken_)) &&
                    ((legalInfo_ == null) ? that.legalInfo_ == null : legalInfo_.equals(that.legalInfo_)) &&
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    connectionCosts_ == that.connectionCosts_ &&
                    ((spatialCoverage_ == null) ? that.spatialCoverage_ == null : spatialCoverage_.equals(that.spatialCoverage_)) &&
                    protocolType_ == that.protocolType_ &&
                    ((protocolDetailsUri_ == null) ? that.protocolDetailsUri_ == null : protocolDetailsUri_.equals(that.protocolDetailsUri_)) &&
                    ((nodeName_ == null) ? that.nodeName_ == null : nodeName_.equals(that.nodeName_)) &&
                    ((hostName_ == null) ? that.hostName_ == null : hostName_.equals(that.hostName_)) &&
                    port_ == that.port_ &&
                    ((!isServiceInformationUsed()) ? !that.isServiceInformationUsed() :
                        ((serviceInformation_ == null) ? that.serviceInformation_ == null : serviceInformation_.equals(that.serviceInformation_))) &&
                    ((!isRegistryDefinitionUsed()) ? !that.isRegistryDefinitionUsed() :
                        ((registryDefinition_ == null) ? that.registryDefinition_ == null : registryDefinition_.equals(that.registryDefinition_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, systemId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nodeToken_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, legalInfo_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectionCosts_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, spatialCoverage_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, protocolType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, protocolDetailsUri_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nodeName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hostName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, port_);
        if (isServiceInformationUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, serviceInformation_);
        if (isRegistryDefinitionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, registryDefinition_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        systemId_ = new nds.system.types.NdsSystemToken(in);

        nodeToken_ = new nds.system.types.NdsNodeToken(in);

        legalInfo_ = new nds.system.types.NdsNodeLegalInfo(in);

        type_ = nds.registry.node.NodeType.readEnum(in);

        connectionCosts_ = in.readUnsignedShort();

        spatialCoverage_ = new nds.core.geometry.SpatialExtent(in);

        protocolType_ = in.readUnsignedByte();

        protocolDetailsUri_ = in.readString();

        nodeName_ = in.readString();

        hostName_ = in.readString();

        port_ = in.readUnsignedShort();

        if (getType() == nds.registry.node.NodeType.SERVICE)
        {
            serviceInformation_ = new nds.registry.node.ServiceInformation(in);
        }

        if (getType() == nds.registry.node.NodeType.REGISTRY)
        {
            registryDefinition_ = new nds.system.types.ModuleDefinition(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        systemId_ = new nds.system.types.NdsSystemToken(zserioContext.getSystemId(), in);

        nodeToken_ = new nds.system.types.NdsNodeToken(zserioContext.getNodeToken(), in);

        legalInfo_ = new nds.system.types.NdsNodeLegalInfo(zserioContext.getLegalInfo(), in);

        type_ = nds.registry.node.NodeType.readEnum(zserioContext.getType(), in);

        connectionCosts_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getConnectionCosts().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();

        spatialCoverage_ = new nds.core.geometry.SpatialExtent(zserioContext.getSpatialCoverage(), in);

        protocolType_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getProtocolType().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        protocolDetailsUri_ = in.readString();

        nodeName_ = in.readString();

        hostName_ = in.readString();

        port_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getPort().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();

        if (getType() == nds.registry.node.NodeType.SERVICE)
        {
            serviceInformation_ = new nds.registry.node.ServiceInformation(zserioContext.getServiceInformation(), in);
        }

        if (getType() == nds.registry.node.NodeType.REGISTRY)
        {
            registryDefinition_ = new nds.system.types.ModuleDefinition(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = systemId_.initializeOffsets(endBitPosition);
        endBitPosition = nodeToken_.initializeOffsets(endBitPosition);
        endBitPosition = legalInfo_.initializeOffsets(endBitPosition);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 16;
        endBitPosition = spatialCoverage_.initializeOffsets(endBitPosition);
        endBitPosition += 8;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(protocolDetailsUri_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(nodeName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(hostName_);
        endBitPosition += 16;
        if (isServiceInformationUsed())
        {
            endBitPosition = serviceInformation_.initializeOffsets(endBitPosition);
        }
        if (isRegistryDefinitionUsed())
        {
            endBitPosition = registryDefinition_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = systemId_.initializeOffsets(zserioContext.getSystemId(), endBitPosition);
        endBitPosition = nodeToken_.initializeOffsets(zserioContext.getNodeToken(), endBitPosition);
        endBitPosition = legalInfo_.initializeOffsets(zserioContext.getLegalInfo(), endBitPosition);
        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition += zserioContext.getConnectionCosts().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(connectionCosts_));
        endBitPosition = spatialCoverage_.initializeOffsets(zserioContext.getSpatialCoverage(), endBitPosition);
        endBitPosition += zserioContext.getProtocolType().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(protocolType_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(protocolDetailsUri_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(nodeName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(hostName_);
        endBitPosition += zserioContext.getPort().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                new zserio.runtime.array.ArrayElement.IntArrayElement(port_));
        if (isServiceInformationUsed())
        {
            endBitPosition = serviceInformation_.initializeOffsets(zserioContext.getServiceInformation(), endBitPosition);
        }
        if (isRegistryDefinitionUsed())
        {
            endBitPosition = registryDefinition_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        systemId_.write(out);

        nodeToken_.write(out);

        legalInfo_.write(out);

        type_.write(out);

        out.writeUnsignedShort(connectionCosts_);

        spatialCoverage_.write(out);

        out.writeUnsignedByte(protocolType_);

        out.writeString(protocolDetailsUri_);

        out.writeString(nodeName_);

        out.writeString(hostName_);

        out.writeUnsignedShort(port_);

        if (isServiceInformationUsed())
        {
            serviceInformation_.write(out);
        }

        if (isRegistryDefinitionUsed())
        {
            registryDefinition_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        systemId_.write(zserioContext.getSystemId(), out);

        nodeToken_.write(zserioContext.getNodeToken(), out);

        legalInfo_.write(zserioContext.getLegalInfo(), out);

        type_.write(zserioContext.getType(), out);

        zserioContext.getConnectionCosts().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(connectionCosts_));

        spatialCoverage_.write(zserioContext.getSpatialCoverage(), out);

        zserioContext.getProtocolType().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(protocolType_));

        out.writeString(protocolDetailsUri_);

        out.writeString(nodeName_);

        out.writeString(hostName_);

        zserioContext.getPort().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(port_));

        if (isServiceInformationUsed())
        {
            serviceInformation_.write(zserioContext.getServiceInformation(), out);
        }

        if (isRegistryDefinitionUsed())
        {
            registryDefinition_.write(out);
        }
    }

    private nds.system.types.NdsSystemToken systemId_;
    private nds.system.types.NdsNodeToken nodeToken_;
    private nds.system.types.NdsNodeLegalInfo legalInfo_;
    private nds.registry.node.NodeType type_;
    private int connectionCosts_;
    private nds.core.geometry.SpatialExtent spatialCoverage_;
    private short protocolType_;
    private java.lang.String protocolDetailsUri_;
    private java.lang.String nodeName_;
    private java.lang.String hostName_;
    private int port_;
    private nds.registry.node.ServiceInformation serviceInformation_;
    private nds.system.types.ModuleDefinition registryDefinition_;
}
