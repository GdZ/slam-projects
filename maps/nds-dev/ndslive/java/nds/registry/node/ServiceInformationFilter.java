/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.node;

public class ServiceInformationFilter implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            minServicePriority_ = new zserio.runtime.array.DeltaContext();
            maxServicePriority_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getMinServicePriority()
        {
            return minServicePriority_;
        }

        public zserio.runtime.array.DeltaContext getMaxServicePriority()
        {
            return maxServicePriority_;
        }

        private zserio.runtime.array.DeltaContext minServicePriority_;
        private zserio.runtime.array.DeltaContext maxServicePriority_;
    };

    public ServiceInformationFilter()
    {
    }

    public ServiceInformationFilter(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ServiceInformationFilter(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ServiceInformationFilter(
            nds.system.types.ModuleDefinition moduleDefinition_,
            java.lang.String moduleService_,
            short minServicePriority_,
            short maxServicePriority_)
    {
        setModuleDefinition(moduleDefinition_);
        setModuleService(moduleService_);
        setMinServicePriority(minServicePriority_);
        setMaxServicePriority(maxServicePriority_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getMinServicePriority().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(minServicePriority_));
        zserioContext.getMaxServicePriority().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(maxServicePriority_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += moduleDefinition_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleService_);
        endBitPosition += 8;
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += moduleDefinition_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleService_);
        endBitPosition += zserioContext.getMinServicePriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(minServicePriority_));
        endBitPosition += zserioContext.getMaxServicePriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(maxServicePriority_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.system.types.ModuleDefinition getModuleDefinition()
    {
        return moduleDefinition_;
    }

    public void setModuleDefinition(nds.system.types.ModuleDefinition moduleDefinition_)
    {
        this.moduleDefinition_ = moduleDefinition_;
    }

    public java.lang.String getModuleService()
    {
        return moduleService_;
    }

    public void setModuleService(java.lang.String moduleService_)
    {
        this.moduleService_ = moduleService_;
    }

    public short getMinServicePriority()
    {
        return minServicePriority_;
    }

    public void setMinServicePriority(short minServicePriority_)
    {
        this.minServicePriority_ = minServicePriority_;
    }

    public short getMaxServicePriority()
    {
        return maxServicePriority_;
    }

    public void setMaxServicePriority(short maxServicePriority_)
    {
        this.maxServicePriority_ = maxServicePriority_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ServiceInformationFilter)
        {
            final ServiceInformationFilter that = (ServiceInformationFilter)obj;

            return
                    ((moduleDefinition_ == null) ? that.moduleDefinition_ == null : moduleDefinition_.equals(that.moduleDefinition_)) &&
                    ((moduleService_ == null) ? that.moduleService_ == null : moduleService_.equals(that.moduleService_)) &&
                    minServicePriority_ == that.minServicePriority_ &&
                    maxServicePriority_ == that.maxServicePriority_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, moduleDefinition_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, moduleService_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, minServicePriority_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxServicePriority_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        moduleDefinition_ = new nds.system.types.ModuleDefinition(in);

        moduleService_ = in.readString();

        minServicePriority_ = in.readUnsignedByte();

        maxServicePriority_ = in.readUnsignedByte();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        moduleDefinition_ = new nds.system.types.ModuleDefinition(in);

        moduleService_ = in.readString();

        minServicePriority_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getMinServicePriority().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        maxServicePriority_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getMaxServicePriority().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = moduleDefinition_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleService_);
        endBitPosition += 8;
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = moduleDefinition_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleService_);
        endBitPosition += zserioContext.getMinServicePriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(minServicePriority_));
        endBitPosition += zserioContext.getMaxServicePriority().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(maxServicePriority_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        moduleDefinition_.write(out);

        out.writeString(moduleService_);

        out.writeUnsignedByte(minServicePriority_);

        out.writeUnsignedByte(maxServicePriority_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        moduleDefinition_.write(out);

        out.writeString(moduleService_);

        zserioContext.getMinServicePriority().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(minServicePriority_));

        zserioContext.getMaxServicePriority().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(maxServicePriority_));
    }

    private nds.system.types.ModuleDefinition moduleDefinition_;
    private java.lang.String moduleService_;
    private short minServicePriority_;
    private short maxServicePriority_;
}
