/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.services;

public final class NdsRegistry
{
    public static abstract class NdsRegistryService implements zserio.runtime.service.ServiceInterface
    {
        public NdsRegistryService()
        {
            methodMap = new java.util.HashMap<java.lang.String, Method>();
            methodMap.put(getRegistryModuleDefinition_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return getRegistryModuleDefinitionMethod(requestData, context);
                    }
                }
            );
            methodMap.put(getRegistryServiceCapabilities_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return getRegistryServiceCapabilitiesMethod(requestData, context);
                    }
                }
            );
            methodMap.put(getAllNodesAllSystems_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return getAllNodesAllSystemsMethod(requestData, context);
                    }
                }
            );
            methodMap.put(getAllNodes_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return getAllNodesMethod(requestData, context);
                    }
                }
            );
            methodMap.put(searchNodes_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return searchNodesMethod(requestData, context);
                    }
                }
            );
            methodMap.put(registerNode_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return registerNodeMethod(requestData, context);
                    }
                }
            );
            methodMap.put(unregisterNode_METHOD_NAME,
                new Method()
                {
                    @Override
                    public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                            byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
                    {
                        return unregisterNodeMethod(requestData, context);
                    }
                }
            );
        }

        @Override
        public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> callMethod(
                java.lang.String methodName, byte[] requestData, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final Method method = methodMap.get(methodName);
            if (method == null)
            {
                throw new zserio.runtime.service.ServiceException(
                        "nds.registry.services.NdsRegistry: Method '" + methodName + "' does not exist!");
            }
            return method.invoke(requestData, context);
        }

        public static java.lang.String serviceFullName()
        {
            return SERVICE_FULL_NAME;
        }

        public static java.lang.String[] methodNames()
        {
            return new java.lang.String[]
            {
                getRegistryModuleDefinition_METHOD_NAME,
                getRegistryServiceCapabilities_METHOD_NAME,
                getAllNodesAllSystems_METHOD_NAME,
                getAllNodes_METHOD_NAME,
                searchNodes_METHOD_NAME,
                registerNode_METHOD_NAME,
                unregisterNode_METHOD_NAME
            };
        }

        protected abstract nds.system.types.ModuleDefinition getRegistryModuleDefinitionImpl(
                nds.core.types.Empty request, java.lang.Object context);

        protected abstract nds.registry.services.RegistryServiceCapabilitiesResponse getRegistryServiceCapabilitiesImpl(
                nds.core.types.Empty request, java.lang.Object context);

        protected abstract nds.registry.node.NodeList getAllNodesAllSystemsImpl(
                nds.core.types.Empty request, java.lang.Object context);

        protected abstract nds.registry.node.NodeList getAllNodesImpl(
                nds.system.types.NdsSystemToken request, java.lang.Object context);

        protected abstract nds.registry.node.NodeList searchNodesImpl(
                nds.registry.node.NodeSearchFilter request, java.lang.Object context);

        protected abstract nds.core.types.Empty registerNodeImpl(
                nds.registry.node.NodeInformation request, java.lang.Object context);

        protected abstract nds.core.types.Empty unregisterNodeImpl(
                nds.system.types.NdsNodeToken request, java.lang.Object context);

        private zserio.runtime.service.ObjectServiceData<nds.system.types.ModuleDefinition> getRegistryModuleDefinitionMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.core.types.Empty request =
                        new nds.core.types.Empty(reader);
                final nds.system.types.ModuleDefinition response = getRegistryModuleDefinitionImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.registry.services.RegistryServiceCapabilitiesResponse> getRegistryServiceCapabilitiesMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.core.types.Empty request =
                        new nds.core.types.Empty(reader);
                final nds.registry.services.RegistryServiceCapabilitiesResponse response = getRegistryServiceCapabilitiesImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.registry.node.NodeList> getAllNodesAllSystemsMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.core.types.Empty request =
                        new nds.core.types.Empty(reader);
                final nds.registry.node.NodeList response = getAllNodesAllSystemsImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.registry.node.NodeList> getAllNodesMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.system.types.NdsSystemToken request =
                        new nds.system.types.NdsSystemToken(reader);
                final nds.registry.node.NodeList response = getAllNodesImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.registry.node.NodeList> searchNodesMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.registry.node.NodeSearchFilter request =
                        new nds.registry.node.NodeSearchFilter(reader);
                final nds.registry.node.NodeList response = searchNodesImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.core.types.Empty> registerNodeMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.registry.node.NodeInformation request =
                        new nds.registry.node.NodeInformation(reader);
                final nds.core.types.Empty response = registerNodeImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private zserio.runtime.service.ObjectServiceData<nds.core.types.Empty> unregisterNodeMethod(
                byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError
        {
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(requestData);
                final nds.system.types.NdsNodeToken request =
                        new nds.system.types.NdsNodeToken(reader);
                final nds.core.types.Empty response = unregisterNodeImpl(request, context);

                return new zserio.runtime.service.ObjectServiceData<>(response);
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        private interface Method
        {
            public zserio.runtime.service.ServiceData<? extends zserio.runtime.io.Writer> invoke(
                    byte[] requestData, java.lang.Object context) throws zserio.runtime.ZserioError;
        }

        private static final java.lang.String SERVICE_FULL_NAME = "nds.registry.services.NdsRegistry";

        private final java.util.Map<java.lang.String, Method> methodMap;
    }

    public static final class NdsRegistryClient
    {
        public NdsRegistryClient(zserio.runtime.service.ServiceClientInterface serviceClient)
        {
            this.serviceClient = serviceClient;
        }

        public nds.system.types.ModuleDefinition getRegistryModuleDefinitionMethod(
                nds.core.types.Empty request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(getRegistryModuleDefinition_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.system.types.ModuleDefinition response =
                        new nds.system.types.ModuleDefinition(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.system.types.ModuleDefinition getRegistryModuleDefinitionMethod(
                nds.core.types.Empty request) throws zserio.runtime.ZserioError
        {
            return getRegistryModuleDefinitionMethod(request, null);
        }

        public nds.registry.services.RegistryServiceCapabilitiesResponse getRegistryServiceCapabilitiesMethod(
                nds.core.types.Empty request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(getRegistryServiceCapabilities_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.registry.services.RegistryServiceCapabilitiesResponse response =
                        new nds.registry.services.RegistryServiceCapabilitiesResponse(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.registry.services.RegistryServiceCapabilitiesResponse getRegistryServiceCapabilitiesMethod(
                nds.core.types.Empty request) throws zserio.runtime.ZserioError
        {
            return getRegistryServiceCapabilitiesMethod(request, null);
        }

        public nds.registry.node.NodeList getAllNodesAllSystemsMethod(
                nds.core.types.Empty request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(getAllNodesAllSystems_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.registry.node.NodeList response =
                        new nds.registry.node.NodeList(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.registry.node.NodeList getAllNodesAllSystemsMethod(
                nds.core.types.Empty request) throws zserio.runtime.ZserioError
        {
            return getAllNodesAllSystemsMethod(request, null);
        }

        public nds.registry.node.NodeList getAllNodesMethod(
                nds.system.types.NdsSystemToken request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(getAllNodes_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.registry.node.NodeList response =
                        new nds.registry.node.NodeList(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.registry.node.NodeList getAllNodesMethod(
                nds.system.types.NdsSystemToken request) throws zserio.runtime.ZserioError
        {
            return getAllNodesMethod(request, null);
        }

        public nds.registry.node.NodeList searchNodesMethod(
                nds.registry.node.NodeSearchFilter request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(searchNodes_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.registry.node.NodeList response =
                        new nds.registry.node.NodeList(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.registry.node.NodeList searchNodesMethod(
                nds.registry.node.NodeSearchFilter request) throws zserio.runtime.ZserioError
        {
            return searchNodesMethod(request, null);
        }

        public nds.core.types.Empty registerNodeMethod(
                nds.registry.node.NodeInformation request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(registerNode_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.core.types.Empty response =
                        new nds.core.types.Empty(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.core.types.Empty registerNodeMethod(
                nds.registry.node.NodeInformation request) throws zserio.runtime.ZserioError
        {
            return registerNodeMethod(request, null);
        }

        public nds.core.types.Empty unregisterNodeMethod(
                nds.system.types.NdsNodeToken request, java.lang.Object context)
                throws zserio.runtime.ZserioError
        {
            final byte[] responseData = serviceClient.callMethod(unregisterNode_METHOD_NAME,
                    new zserio.runtime.service.ObjectServiceData<>(request), context);
            try
            {
                final zserio.runtime.io.ByteArrayBitStreamReader reader =
                        new zserio.runtime.io.ByteArrayBitStreamReader(responseData);
                final nds.core.types.Empty response =
                        new nds.core.types.Empty(reader);
                return response;
            }
            catch (java.io.IOException exception)
            {
                throw new zserio.runtime.ZserioError("NdsRegistry: " + exception, exception);
            }
        }

        public nds.core.types.Empty unregisterNodeMethod(
                nds.system.types.NdsNodeToken request) throws zserio.runtime.ZserioError
        {
            return unregisterNodeMethod(request, null);
        }

        private final zserio.runtime.service.ServiceClientInterface serviceClient;
    }

    public static final String getRegistryModuleDefinition_METHOD_NAME = "getRegistryModuleDefinition";
    public static final String getRegistryServiceCapabilities_METHOD_NAME = "getRegistryServiceCapabilities";
    public static final String getAllNodesAllSystems_METHOD_NAME = "getAllNodesAllSystems";
    public static final String getAllNodes_METHOD_NAME = "getAllNodes";
    public static final String searchNodes_METHOD_NAME = "searchNodes";
    public static final String registerNode_METHOD_NAME = "registerNode";
    public static final String unregisterNode_METHOD_NAME = "unregisterNode";
}
