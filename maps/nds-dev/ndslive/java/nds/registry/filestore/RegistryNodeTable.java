/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.filestore;

public class RegistryNodeTable
{
    public RegistryNodeTable(java.sql.Connection connection, java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = null;
        this.tableName = tableName;
    }

    public RegistryNodeTable(java.sql.Connection connection, java.lang.String attachedDbName,
            java.lang.String tableName)
    {
        this.connection = connection;
        this.attachedDbName = attachedDbName;
        this.tableName = tableName;
    }

    public void createTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = getCreateTableQuery();
        executeUpdate(sqlQuery.toString());
    }

    public void deleteTable() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("DROP TABLE ");
        appendTableNameToQuery(sqlQuery);
        executeUpdate(sqlQuery.toString());
    }

    public java.util.List<RegistryNodeTableRow> read()
            throws java.sql.SQLException, java.io.IOException
    {
        return read("");
    }

    public java.util.List<RegistryNodeTableRow> read(
            java.lang.String condition) throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("SELECT " +
                "systemId, " +
                "nodeToken, " +
                "legalInfo, " +
                "type, " +
                "connectionCosts, " +
                "spatialCoverage, " +
                "protocolType, " +
                "protocolDetailsUri, " +
                "nodeName, " +
                "hostName, " +
                "port, " +
                "serviceInformation, " +
                "registryDefinition" +
                " FROM ");
        appendTableNameToQuery(sqlQuery);
        if (!condition.isEmpty())
        {
            sqlQuery.append(" WHERE ");
            sqlQuery.append(condition);
        }

        // read rows
        final java.util.List<RegistryNodeTableRow> rows = new java.util.ArrayList<RegistryNodeTableRow>();
        try (
            final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString());
            final java.sql.ResultSet resultSet = statement.executeQuery();
        )
        {
            while (resultSet.next())
            {
                final RegistryNodeTableRow row = readRow(resultSet);
                rows.add(row);
            }
        }

        return rows;
    }

    public void write(java.util.List<RegistryNodeTableRow> rows)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("INSERT INTO ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" (" +
                "systemId, " +
                "nodeToken, " +
                "legalInfo, " +
                "type, " +
                "connectionCosts, " +
                "spatialCoverage, " +
                "protocolType, " +
                "protocolDetailsUri, " +
                "nodeName, " +
                "hostName, " +
                "port, " +
                "serviceInformation, " +
                "registryDefinition" +
                ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        // write rows
        final boolean wasTransactionStarted = startTransaction();
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            for (RegistryNodeTableRow row : rows)
            {
                writeRow(row, statement);
                statement.addBatch();
            }
            statement.executeBatch();
        }

        endTransaction(wasTransactionStarted);
    }

    public void update(RegistryNodeTableRow row, java.lang.String whereCondition)
            throws java.sql.SQLException, java.io.IOException
    {
        // assemble sql query
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("UPDATE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(" SET" +
                " systemId=?," +
                " nodeToken=?," +
                " legalInfo=?," +
                " type=?," +
                " connectionCosts=?," +
                " spatialCoverage=?," +
                " protocolType=?," +
                " protocolDetailsUri=?," +
                " nodeName=?," +
                " hostName=?," +
                " port=?," +
                " serviceInformation=?," +
                " registryDefinition=?" +
                " WHERE ");
        sqlQuery.append(whereCondition);

        // update row
        try (final java.sql.PreparedStatement statement = connection.prepareStatement(sqlQuery.toString()))
        {
            writeRow(row, statement);
            statement.executeUpdate();
        }
    }

    private void appendTableNameToQuery(java.lang.StringBuilder sqlQuery)
    {
        if (attachedDbName != null)
        {
            sqlQuery.append(attachedDbName);
            sqlQuery.append('.');
        }
        sqlQuery.append(tableName);
    }

    private void executeUpdate(java.lang.String sql) throws java.sql.SQLException
    {
        try (final java.sql.Statement statement = connection.createStatement())
        {
            statement.executeUpdate(sql);
        }
    }

    private boolean startTransaction() throws java.sql.SQLException
    {
        boolean wasTransactionStarted = false;
        if (connection.getAutoCommit())
        {
            connection.setAutoCommit(false);
            wasTransactionStarted = true;
        }

        return wasTransactionStarted;
    }

    private void endTransaction(boolean wasTransactionStarted) throws java.sql.SQLException
    {
        if (wasTransactionStarted)
        {
            connection.commit();
            connection.setAutoCommit(true);
        }
    }

    private java.lang.StringBuilder getCreateTableQuery() throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("CREATE TABLE ");
        appendTableNameToQuery(sqlQuery);
        sqlQuery.append(
                "(" +
                "systemId BLOB" + " " + "NOT NULL" + "," +
                "nodeToken BLOB" + " " + "NOT NULL" + "," +
                "legalInfo BLOB" + " " + "NOT NULL" + "," +
                "type INTEGER" + " " + "NOT NULL" + "," +
                "connectionCosts INTEGER" + " " + "NOT NULL" + "," +
                "spatialCoverage BLOB" + " " + "NOT NULL" + "," +
                "protocolType INTEGER" + " " + "NOT NULL" + "," +
                "protocolDetailsUri TEXT" + " " + "NOT NULL" + "," +
                "nodeName TEXT" + " " + "NOT NULL" + "," +
                "hostName TEXT" + " " + "NOT NULL" + "," +
                "port INTEGER" + " " + "NOT NULL" + "," +
                "serviceInformation BLOB" + " " + "NULL" + "," +
                "registryDefinition BLOB" + " " + "NULL" +
                ", " +
                "primary key (systemId, nodeToken)" +
                ")");

        return sqlQuery;
    }

    private static RegistryNodeTableRow readRow(
            java.sql.ResultSet resultSet) throws java.sql.SQLException, java.io.IOException
    {
        final RegistryNodeTableRow row = new RegistryNodeTableRow();

        // field systemId
        final byte[] valueSystemId = resultSet.getBytes(1);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueSystemId);
            final nds.system.types.NdsSystemToken blob =
                    new nds.system.types.NdsSystemToken(reader);
            row.setSystemId(blob);
        }

        // field nodeToken
        final byte[] valueNodeToken = resultSet.getBytes(2);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueNodeToken);
            final nds.system.types.NdsNodeToken blob =
                    new nds.system.types.NdsNodeToken(reader);
            row.setNodeToken(blob);
        }

        // field legalInfo
        final byte[] valueLegalInfo = resultSet.getBytes(3);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueLegalInfo);
            final nds.system.types.NdsNodeLegalInfo blob =
                    new nds.system.types.NdsNodeLegalInfo(reader);
            row.setLegalInfo(blob);
        }

        // field type
        final short valueType = resultSet.getShort(4);
        if (!resultSet.wasNull())
        {
            row.setType(nds.registry.node.NodeType.toEnum(valueType));
        }

        // field connectionCosts
        final int valueConnectionCosts = resultSet.getInt(5);
        if (!resultSet.wasNull())
        {
            row.setConnectionCosts(valueConnectionCosts);
        }

        // field spatialCoverage
        final byte[] valueSpatialCoverage = resultSet.getBytes(6);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueSpatialCoverage);
            final nds.core.geometry.SpatialExtent blob =
                    new nds.core.geometry.SpatialExtent(reader);
            row.setSpatialCoverage(blob);
        }

        // field protocolType
        final short valueProtocolType = resultSet.getShort(7);
        if (!resultSet.wasNull())
        {
            row.setProtocolType(valueProtocolType);
        }

        // field protocolDetailsUri
        final java.lang.String valueProtocolDetailsUri = resultSet.getString(8);
        if (!resultSet.wasNull())
        {
            row.setProtocolDetailsUri(valueProtocolDetailsUri);
        }

        // field nodeName
        final java.lang.String valueNodeName = resultSet.getString(9);
        if (!resultSet.wasNull())
        {
            row.setNodeName(valueNodeName);
        }

        // field hostName
        final java.lang.String valueHostName = resultSet.getString(10);
        if (!resultSet.wasNull())
        {
            row.setHostName(valueHostName);
        }

        // field port
        final int valuePort = resultSet.getInt(11);
        if (!resultSet.wasNull())
        {
            row.setPort(valuePort);
        }

        // field serviceInformation
        final byte[] valueServiceInformation = resultSet.getBytes(12);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueServiceInformation);
            final nds.registry.node.ServiceInformation blob =
                    new nds.registry.node.ServiceInformation(reader);
            row.setServiceInformation(blob);
        }

        // field registryDefinition
        final byte[] valueRegistryDefinition = resultSet.getBytes(13);
        if (!resultSet.wasNull())
        {
            final zserio.runtime.io.ByteArrayBitStreamReader reader =
                    new zserio.runtime.io.ByteArrayBitStreamReader(valueRegistryDefinition);
            final nds.system.types.ModuleDefinition blob =
                    new nds.system.types.ModuleDefinition(reader);
            row.setRegistryDefinition(blob);
        }

        return row;
    }

    private static void writeRow(RegistryNodeTableRow row, java.sql.PreparedStatement statement)
            throws java.sql.SQLException
    {
        // field systemId
        if (row.isNullSystemId())
        {
            statement.setNull(1, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getSystemId());
            statement.setBytes(1, blobData);
        }

        // field nodeToken
        if (row.isNullNodeToken())
        {
            statement.setNull(2, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getNodeToken());
            statement.setBytes(2, blobData);
        }

        // field legalInfo
        if (row.isNullLegalInfo())
        {
            statement.setNull(3, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getLegalInfo());
            statement.setBytes(3, blobData);
        }

        // field type
        if (row.isNullType())
        {
            statement.setNull(4, java.sql.Types.INTEGER);
        }
        else
        {
            final short underlyingValue =
                    row.getType().getValue();
            statement.setShort(4, underlyingValue);
        }

        // field connectionCosts
        if (row.isNullConnectionCosts())
        {
            statement.setNull(5, java.sql.Types.INTEGER);
        }
        else
        {
            final int value = row.getConnectionCosts();
            statement.setInt(5, value);
        }

        // field spatialCoverage
        if (row.isNullSpatialCoverage())
        {
            statement.setNull(6, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getSpatialCoverage());
            statement.setBytes(6, blobData);
        }

        // field protocolType
        if (row.isNullProtocolType())
        {
            statement.setNull(7, java.sql.Types.INTEGER);
        }
        else
        {
            final short value = row.getProtocolType();
            statement.setShort(7, value);
        }

        // field protocolDetailsUri
        if (row.isNullProtocolDetailsUri())
        {
            statement.setNull(8, java.sql.Types.VARCHAR);
        }
        else
        {
            final java.lang.String value = row.getProtocolDetailsUri();
            statement.setString(8, value);
        }

        // field nodeName
        if (row.isNullNodeName())
        {
            statement.setNull(9, java.sql.Types.VARCHAR);
        }
        else
        {
            final java.lang.String value = row.getNodeName();
            statement.setString(9, value);
        }

        // field hostName
        if (row.isNullHostName())
        {
            statement.setNull(10, java.sql.Types.VARCHAR);
        }
        else
        {
            final java.lang.String value = row.getHostName();
            statement.setString(10, value);
        }

        // field port
        if (row.isNullPort())
        {
            statement.setNull(11, java.sql.Types.INTEGER);
        }
        else
        {
            final int value = row.getPort();
            statement.setInt(11, value);
        }

        // field serviceInformation
        if (row.isNullServiceInformation())
        {
            statement.setNull(12, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getServiceInformation());
            statement.setBytes(12, blobData);
        }

        // field registryDefinition
        if (row.isNullRegistryDefinition())
        {
            statement.setNull(13, java.sql.Types.BLOB);
        }
        else
        {
            final byte[] blobData = zserio.runtime.io.SerializeUtil.serializeToBytes(row.getRegistryDefinition());
            statement.setBytes(13, blobData);
        }
    }

    private final java.sql.Connection connection;
    private final java.lang.String attachedDbName;
    private final java.lang.String tableName;
}
