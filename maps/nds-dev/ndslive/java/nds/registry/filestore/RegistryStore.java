/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.registry.filestore;

public class RegistryStore implements zserio.runtime.SqlDatabase
{
    public RegistryStore(java.lang.String fileName) throws java.sql.SQLException
    {
        this(fileName, new java.util.HashMap<java.lang.String, java.lang.String>());
    }

    public RegistryStore(java.lang.String fileName,
            java.util.Map<java.lang.String, java.lang.String> tableToDbFileNameRelocationMap)
            throws java.sql.SQLException
    {
        final java.util.Properties connectionProps = new java.util.Properties();
        connectionProps.setProperty("flags", "CREATE");
        final java.lang.String uriPath = "jdbc:sqlite:" + new java.io.File(fileName).toString();

        connection = java.sql.DriverManager.getConnection(uriPath, connectionProps);
        isExternal = false;
        attachedDbList = new java.util.ArrayList<java.lang.String>();

        final java.util.Map<java.lang.String, java.lang.String> tableToAttachedDbNameRelocationMap =
                new java.util.HashMap<java.lang.String, java.lang.String>();
        final java.util.Map<java.lang.String, java.lang.String> dbFileNameToAttachedDbNameMap =
                new java.util.HashMap<java.lang.String, java.lang.String>();
        for (java.util.Map.Entry<java.lang.String, java.lang.String> entry :
                tableToDbFileNameRelocationMap.entrySet())
        {
            final java.lang.String relocatedTableName = entry.getKey();
            final java.lang.String dbFileName = entry.getValue();

            java.lang.String attachedDbName = dbFileNameToAttachedDbNameMap.get(dbFileName);
            if (attachedDbName == null)
            {
                attachedDbName = "RegistryStore" + "_" + relocatedTableName;
                attachDatabase(dbFileName, attachedDbName);
                dbFileNameToAttachedDbNameMap.put(dbFileName, attachedDbName);
            }

            tableToAttachedDbNameRelocationMap.put(relocatedTableName, attachedDbName);
        }

        initTables(tableToAttachedDbNameRelocationMap);
    }

    public RegistryStore(java.sql.Connection externalConnection)
    {
        this(externalConnection, new java.util.HashMap<java.lang.String, java.lang.String>());
    }

    public RegistryStore(java.sql.Connection externalConnection,
            java.util.Map<java.lang.String, java.lang.String> tableToAttachedDbNameRelocationMap)
    {
        connection = externalConnection;
        isExternal = true;
        attachedDbList = null;

        initTables(tableToAttachedDbNameRelocationMap);
    }

    @Override
    public void close() throws java.sql.SQLException
    {
        if (!isExternal)
        {
            try
            {
                detachDatabases();
            }
            finally
            {
                connection.close();
            }
        }
    }

    @Override
    public java.sql.Connection connection()
    {
        return connection;
    }

    public nds.registry.filestore.RegistryNodeTable getNodeTable()
    {
        return this.nodeTable_;
    }

    @Override
    public void createSchema() throws java.sql.SQLException
    {
        final boolean wasTransactionStarted = startTransaction();

        this.nodeTable_.createTable();

        endTransaction(wasTransactionStarted);
    }

    @Override
    public void createSchema(java.util.Set<java.lang.String> withoutRowIdTableNamesBlackList)
            throws java.sql.SQLException
    {
        createSchema();
    }

    @Override
    public void deleteSchema() throws java.sql.SQLException
    {
        final boolean wasTransactionStarted = startTransaction();

        this.nodeTable_.deleteTable();

        endTransaction(wasTransactionStarted);
    }

    public static java.lang.String databaseName()
    {
        return DATABASE_NAME;
    }

    public static java.lang.String[] tableNames()
    {
        return new java.lang.String[]
        {
            nodeTable_TABLE_NAME
        };
    }

    private void initTables(java.util.Map<java.lang.String, java.lang.String> tableToAttachedDbNameRelocationMap)
    {
        this.nodeTable_ = new nds.registry.filestore.RegistryNodeTable(connection,
                tableToAttachedDbNameRelocationMap.get(nodeTable_TABLE_NAME),
                nodeTable_TABLE_NAME);
    }

    private void executeUpdate(java.lang.String sql) throws java.sql.SQLException
    {
        try (final java.sql.Statement statement = connection.createStatement())
        {
            statement.executeUpdate(sql);
        }
    }

    private void attachDatabase(java.lang.String dbFileName, java.lang.String attachedDbName)
            throws java.sql.SQLException
    {
        final java.lang.StringBuilder sqlQuery = new java.lang.StringBuilder("ATTACH DATABASE '");
        sqlQuery.append(new java.io.File(dbFileName).toString());
        sqlQuery.append("' AS ");
        sqlQuery.append(attachedDbName);
        executeUpdate(sqlQuery.toString());

        attachedDbList.add(attachedDbName);
    }

    private void detachDatabases() throws java.sql.SQLException
    {
        for (java.lang.String attachedDbName : attachedDbList)
        {
            final java.lang.String sqlQuery = "DETACH DATABASE " + attachedDbName;
            executeUpdate(sqlQuery);
        }
    }

    private boolean startTransaction() throws java.sql.SQLException
    {
        boolean wasTransactionStarted = false;
        if (connection.getAutoCommit())
        {
            connection.setAutoCommit(false);
            wasTransactionStarted = true;
        }

        return wasTransactionStarted;
    }

    private void endTransaction(boolean wasTransactionStarted) throws java.sql.SQLException
    {
        if (wasTransactionStarted)
        {
            connection.commit();
            connection.setAutoCommit(true);
        }
    }

    private static final java.lang.String DATABASE_NAME = "RegistryStore";
    private static final java.lang.String nodeTable_TABLE_NAME = "nodeTable";

    private final java.sql.Connection connection;
    private final boolean isExternal;
    private final java.util.List<java.lang.String> attachedDbList;

    private nds.registry.filestore.RegistryNodeTable nodeTable_;
}
