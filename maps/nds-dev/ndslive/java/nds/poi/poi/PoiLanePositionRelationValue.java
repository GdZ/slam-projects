/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.poi;

public class PoiLanePositionRelationValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            poiEntrance_ = new zserio.runtime.array.DeltaContext();
            poiExit_ = new zserio.runtime.array.DeltaContext();
            poiEntranceAndExit_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getPoiEntrance()
        {
            return poiEntrance_;
        }

        public zserio.runtime.array.DeltaContext getPoiExit()
        {
            return poiExit_;
        }

        public zserio.runtime.array.DeltaContext getPoiEntranceAndExit()
        {
            return poiEntranceAndExit_;
        }

        private zserio.runtime.array.DeltaContext poiEntrance_;
        private zserio.runtime.array.DeltaContext poiExit_;
        private zserio.runtime.array.DeltaContext poiEntranceAndExit_;
    };

    public PoiLanePositionRelationValue(
            nds.poi.poi.PoiLanePositionRelationType type_)
    {
        this.type_ = type_;
    }

    public PoiLanePositionRelationValue(zserio.runtime.io.BitStreamReader in,
            nds.poi.poi.PoiLanePositionRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PoiLanePositionRelationValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.poi.poi.PoiLanePositionRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case ENTRY:
            return CHOICE_poiEntrance;
        case EXIT:
            return CHOICE_poiExit;
        case ENTRY_AND_EXIT:
            return CHOICE_poiEntranceAndExit;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ENTRY:
            zserioContext.getPoiEntrance().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntrance()));
            break;
        case EXIT:
            zserioContext.getPoiExit().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiExit()));
            break;
        case ENTRY_AND_EXIT:
            zserioContext.getPoiEntranceAndExit().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntranceAndExit()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ENTRY:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiEntrance());
            break;
        case EXIT:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiExit());
            break;
        case ENTRY_AND_EXIT:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiEntranceAndExit());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ENTRY:
            endBitPosition += zserioContext.getPoiEntrance().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntrance()));
            break;
        case EXIT:
            endBitPosition += zserioContext.getPoiExit().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiExit()));
            break;
        case ENTRY_AND_EXIT:
            endBitPosition += zserioContext.getPoiEntranceAndExit().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntranceAndExit()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.poi.PoiLanePositionRelationType getType()
    {
        return this.type_;
    }

    public int getPoiEntrance()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setPoiEntrance(int poiEntrance_)
    {
        objectChoice = poiEntrance_;
    }

    public int getPoiExit()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setPoiExit(int poiExit_)
    {
        objectChoice = poiExit_;
    }

    public int getPoiEntranceAndExit()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setPoiEntranceAndExit(int poiEntranceAndExit_)
    {
        objectChoice = poiEntranceAndExit_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoiLanePositionRelationValue)
        {
            final PoiLanePositionRelationValue that = (PoiLanePositionRelationValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case ENTRY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case EXIT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case ENTRY_AND_EXIT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case ENTRY:
            objectChoice = in.readVarUInt32();
            break;
        case EXIT:
            objectChoice = in.readVarUInt32();
            break;
        case ENTRY_AND_EXIT:
            objectChoice = in.readVarUInt32();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ENTRY:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getPoiEntrance().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case EXIT:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getPoiExit().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case ENTRY_AND_EXIT:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getPoiEntranceAndExit().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ENTRY:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiEntrance());
            }
            break;
        case EXIT:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiExit());
            }
            break;
        case ENTRY_AND_EXIT:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getPoiEntranceAndExit());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ENTRY:
            {
                endBitPosition += zserioContext.getPoiEntrance().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntrance()));
            }
            break;
        case EXIT:
            {
                endBitPosition += zserioContext.getPoiExit().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiExit()));
            }
            break;
        case ENTRY_AND_EXIT:
            {
                endBitPosition += zserioContext.getPoiEntranceAndExit().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntranceAndExit()));
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case ENTRY:
            out.writeVarUInt32(getPoiEntrance());
            break;
        case EXIT:
            out.writeVarUInt32(getPoiExit());
            break;
        case ENTRY_AND_EXIT:
            out.writeVarUInt32(getPoiEntranceAndExit());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ENTRY:
            zserioContext.getPoiEntrance().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntrance()));
            break;
        case EXIT:
            zserioContext.getPoiExit().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiExit()));
            break;
        case ENTRY_AND_EXIT:
            zserioContext.getPoiEntranceAndExit().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getPoiEntranceAndExit()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiLanePositionRelationValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_poiEntrance = 0;
    public static final int CHOICE_poiExit = 1;
    public static final int CHOICE_poiEntranceAndExit = 2;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.poi.poi.PoiLanePositionRelationType type_;
    private java.lang.Object objectChoice;
}
