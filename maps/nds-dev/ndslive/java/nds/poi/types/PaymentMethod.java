/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class PaymentMethod implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            iconSetReference_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getIconSetReference()
        {
            return iconSetReference_;
        }

        private zserio.runtime.array.DeltaContext iconSetReference_;
    };

    public PaymentMethod()
    {
    }

    public PaymentMethod(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PaymentMethod(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PaymentMethod(
            java.lang.String name_,
            java.math.BigInteger iconSetReference_)
    {
        setName(name_);
        setIconSetReference(iconSetReference_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isIconSetReferenceUsed())
        {
            zserioContext.getIconSetReference().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isIconSetReferenceUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetReference_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isIconSetReferenceUsed())
        {
            endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.String getName()
    {
        return name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public java.math.BigInteger getIconSetReference()
    {
        return iconSetReference_;
    }

    public void setIconSetReference(java.math.BigInteger iconSetReference_)
    {
        this.iconSetReference_ = iconSetReference_;
    }

    public boolean isIconSetReferenceUsed()
    {
        return isIconSetReferenceSet();
    }

    public boolean isIconSetReferenceSet()
    {
        return (iconSetReference_ != null);
    }

    public void resetIconSetReference()
    {
        this.iconSetReference_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PaymentMethod)
        {
            final PaymentMethod that = (PaymentMethod)obj;

            return
                    ((name_ == null) ? that.name_ == null : name_.equals(that.name_)) &&
                    ((!isIconSetReferenceUsed()) ? !that.isIconSetReferenceUsed() :
                        ((iconSetReference_ == null) ? that.iconSetReference_ == null : iconSetReference_.equals(that.iconSetReference_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, name_);
        if (isIconSetReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconSetReference_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        name_ = in.readString();

        if (in.readBool())
        {
            iconSetReference_ = in.readVarUInt();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        name_ = in.readString();

        if (in.readBool())
        {
            iconSetReference_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getIconSetReference().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isIconSetReferenceUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(iconSetReference_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isIconSetReferenceUsed())
        {
            endBitPosition += zserioContext.getIconSetReference().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeString(name_);

        if (isIconSetReferenceUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(iconSetReference_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeString(name_);

        if (isIconSetReferenceUsed())
        {
            out.writeBool(true);
            zserioContext.getIconSetReference().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(iconSetReference_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.lang.String name_;
    private java.math.BigInteger iconSetReference_;
}
