/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class EvChargingAvailability implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numConnectors_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumConnectors()
        {
            return numConnectors_;
        }

        private zserio.runtime.array.DeltaContext numConnectors_;
    };

    public EvChargingAvailability()
    {
    }

    public EvChargingAvailability(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public EvChargingAvailability(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public EvChargingAvailability(
            int numConnectors_,
            nds.poi.types.EvConnectorType[] connectorType_,
            short[] chargersAvailable_,
            short[] chargersOccupied_,
            short[] chargersReserved_,
            short[] chargersOutOfService_)
    {
        setNumConnectors(numConnectors_);
        setConnectorType(connectorType_);
        setChargersAvailable(chargersAvailable_);
        setChargersOccupied(chargersOccupied_);
        setChargersReserved(chargersReserved_);
        setChargersOutOfService(chargersOutOfService_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumConnectors().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numConnectors_);
        endBitPosition += connectorType_.bitSizeOf(endBitPosition);
        endBitPosition += chargersAvailable_.bitSizeOf(endBitPosition);
        endBitPosition += chargersOccupied_.bitSizeOf(endBitPosition);
        endBitPosition += chargersReserved_.bitSizeOf(endBitPosition);
        endBitPosition += chargersOutOfService_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumConnectors().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
        endBitPosition += connectorType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += chargersAvailable_.bitSizeOfPacked(endBitPosition);
        endBitPosition += chargersOccupied_.bitSizeOfPacked(endBitPosition);
        endBitPosition += chargersReserved_.bitSizeOfPacked(endBitPosition);
        endBitPosition += chargersOutOfService_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumConnectors()
    {
        return numConnectors_;
    }

    public void setNumConnectors(int numConnectors_)
    {
        this.numConnectors_ = numConnectors_;
    }

    public nds.poi.types.EvConnectorType[] getConnectorType()
    {
        return (connectorType_ == null) ? null : connectorType_.getRawArray();
    }

    public void setConnectorType(nds.poi.types.EvConnectorType[] connectorType_)
    {
        this.connectorType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.types.EvConnectorType.class, connectorType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnectorType>(new ZserioElementFactory_connectorType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getChargersAvailable()
    {
        return (chargersAvailable_ == null) ? null : chargersAvailable_.getRawArray();
    }

    public void setChargersAvailable(short[] chargersAvailable_)
    {
        this.chargersAvailable_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(chargersAvailable_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getChargersOccupied()
    {
        return (chargersOccupied_ == null) ? null : chargersOccupied_.getRawArray();
    }

    public void setChargersOccupied(short[] chargersOccupied_)
    {
        this.chargersOccupied_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(chargersOccupied_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getChargersReserved()
    {
        return (chargersReserved_ == null) ? null : chargersReserved_.getRawArray();
    }

    public void setChargersReserved(short[] chargersReserved_)
    {
        this.chargersReserved_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(chargersReserved_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getChargersOutOfService()
    {
        return (chargersOutOfService_ == null) ? null : chargersOutOfService_.getRawArray();
    }

    public void setChargersOutOfService(short[] chargersOutOfService_)
    {
        this.chargersOutOfService_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(chargersOutOfService_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof EvChargingAvailability)
        {
            final EvChargingAvailability that = (EvChargingAvailability)obj;

            return
                    numConnectors_ == that.numConnectors_ &&
                    ((connectorType_ == null) ? that.connectorType_ == null : connectorType_.equals(that.connectorType_)) &&
                    ((chargersAvailable_ == null) ? that.chargersAvailable_ == null : chargersAvailable_.equals(that.chargersAvailable_)) &&
                    ((chargersOccupied_ == null) ? that.chargersOccupied_ == null : chargersOccupied_.equals(that.chargersOccupied_)) &&
                    ((chargersReserved_ == null) ? that.chargersReserved_ == null : chargersReserved_.equals(that.chargersReserved_)) &&
                    ((chargersOutOfService_ == null) ? that.chargersOutOfService_ == null : chargersOutOfService_.equals(that.chargersOutOfService_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numConnectors_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectorType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chargersAvailable_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chargersOccupied_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chargersReserved_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chargersOutOfService_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numConnectors_ = in.readVarSize();

        connectorType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.types.EvConnectorType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnectorType>(new ZserioElementFactory_connectorType()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectorType_.read(in, (int)(getNumConnectors()));

        chargersAvailable_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersAvailable_.read(in, (int)(getNumConnectors()));

        chargersOccupied_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersOccupied_.read(in, (int)(getNumConnectors()));

        chargersReserved_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersReserved_.read(in, (int)(getNumConnectors()));

        chargersOutOfService_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersOutOfService_.read(in, (int)(getNumConnectors()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numConnectors_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumConnectors().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        connectorType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.types.EvConnectorType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnectorType>(new ZserioElementFactory_connectorType()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectorType_.readPacked(in, (int)(getNumConnectors()));

        chargersAvailable_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersAvailable_.readPacked(in, (int)(getNumConnectors()));

        chargersOccupied_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersOccupied_.readPacked(in, (int)(getNumConnectors()));

        chargersReserved_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersReserved_.readPacked(in, (int)(getNumConnectors()));

        chargersOutOfService_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargersOutOfService_.readPacked(in, (int)(getNumConnectors()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numConnectors_);
        endBitPosition = connectorType_.initializeOffsets(endBitPosition);
        endBitPosition = chargersAvailable_.initializeOffsets(endBitPosition);
        endBitPosition = chargersOccupied_.initializeOffsets(endBitPosition);
        endBitPosition = chargersReserved_.initializeOffsets(endBitPosition);
        endBitPosition = chargersOutOfService_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumConnectors().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
        endBitPosition = connectorType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = chargersAvailable_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = chargersOccupied_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = chargersReserved_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = chargersOutOfService_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numConnectors_);

        if (connectorType_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.connectorType: " +
                    connectorType_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        connectorType_.write(out);

        if (chargersAvailable_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersAvailable: " +
                    chargersAvailable_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersAvailable_.write(out);

        if (chargersOccupied_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersOccupied: " +
                    chargersOccupied_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersOccupied_.write(out);

        if (chargersReserved_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersReserved: " +
                    chargersReserved_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersReserved_.write(out);

        if (chargersOutOfService_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersOutOfService: " +
                    chargersOutOfService_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersOutOfService_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumConnectors().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));

        if (connectorType_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.connectorType: " +
                    connectorType_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        connectorType_.writePacked(out);

        if (chargersAvailable_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersAvailable: " +
                    chargersAvailable_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersAvailable_.writePacked(out);

        if (chargersOccupied_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersOccupied: " +
                    chargersOccupied_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersOccupied_.writePacked(out);

        if (chargersReserved_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersReserved: " +
                    chargersReserved_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersReserved_.writePacked(out);

        if (chargersOutOfService_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingAvailability.chargersOutOfService: " +
                    chargersOutOfService_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargersOutOfService_.writePacked(out);
    }

    private static final class ZserioElementFactory_connectorType implements zserio.runtime.array.PackableElementFactory<nds.poi.types.EvConnectorType>
    {
        @Override
        public nds.poi.types.EvConnectorType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.poi.types.EvConnectorType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.poi.types.EvConnectorType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.poi.types.EvConnectorType.readEnum(context, in);
        }
    }

    private int numConnectors_;
    private zserio.runtime.array.Array connectorType_;
    private zserio.runtime.array.Array chargersAvailable_;
    private zserio.runtime.array.Array chargersOccupied_;
    private zserio.runtime.array.Array chargersReserved_;
    private zserio.runtime.array.Array chargersOutOfService_;
}
