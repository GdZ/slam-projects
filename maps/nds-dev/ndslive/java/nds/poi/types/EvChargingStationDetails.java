/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class EvChargingStationDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            totalPower_ = new zserio.runtime.array.DeltaContext();
            numConnectors_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getTotalPower()
        {
            return totalPower_;
        }

        public zserio.runtime.array.DeltaContext getNumConnectors()
        {
            return numConnectors_;
        }

        private zserio.runtime.array.DeltaContext totalPower_;
        private zserio.runtime.array.DeltaContext numConnectors_;
    };

    public EvChargingStationDetails()
    {
    }

    public EvChargingStationDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public EvChargingStationDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public EvChargingStationDetails(
            int totalPower_,
            int numConnectors_,
            nds.poi.types.EvConnector[] connectors_,
            short[] chargers_)
    {
        setTotalPower(totalPower_);
        setNumConnectors(numConnectors_);
        setConnectors(connectors_);
        setChargers(chargers_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTotalPower().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(totalPower_));
        zserioContext.getNumConnectors().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(totalPower_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numConnectors_);
        endBitPosition += connectors_.bitSizeOf(endBitPosition);
        endBitPosition += chargers_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTotalPower().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(totalPower_));
        endBitPosition += zserioContext.getNumConnectors().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
        endBitPosition += connectors_.bitSizeOfPacked(endBitPosition);
        endBitPosition += chargers_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getTotalPower()
    {
        return totalPower_;
    }

    public void setTotalPower(int totalPower_)
    {
        this.totalPower_ = totalPower_;
    }

    public int getNumConnectors()
    {
        return numConnectors_;
    }

    public void setNumConnectors(int numConnectors_)
    {
        this.numConnectors_ = numConnectors_;
    }

    public nds.poi.types.EvConnector[] getConnectors()
    {
        return (connectors_ == null) ? null : connectors_.getRawArray();
    }

    public void setConnectors(nds.poi.types.EvConnector[] connectors_)
    {
        this.connectors_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.types.EvConnector.class, connectors_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnector>(new ZserioElementFactory_connectors()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getChargers()
    {
        return (chargers_ == null) ? null : chargers_.getRawArray();
    }

    public void setChargers(short[] chargers_)
    {
        this.chargers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(chargers_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof EvChargingStationDetails)
        {
            final EvChargingStationDetails that = (EvChargingStationDetails)obj;

            return
                    totalPower_ == that.totalPower_ &&
                    numConnectors_ == that.numConnectors_ &&
                    ((connectors_ == null) ? that.connectors_ == null : connectors_.equals(that.connectors_)) &&
                    ((chargers_ == null) ? that.chargers_ == null : chargers_.equals(that.chargers_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, totalPower_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numConnectors_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectors_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chargers_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        totalPower_ = in.readVarUInt32();

        numConnectors_ = in.readVarSize();

        connectors_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.types.EvConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnector>(new ZserioElementFactory_connectors()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectors_.read(in, (int)(getNumConnectors()));

        chargers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargers_.read(in, (int)(getNumConnectors()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        totalPower_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getTotalPower().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        numConnectors_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumConnectors().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        connectors_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.types.EvConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.types.EvConnector>(new ZserioElementFactory_connectors()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectors_.readPacked(in, (int)(getNumConnectors()));

        chargers_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        chargers_.readPacked(in, (int)(getNumConnectors()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(totalPower_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numConnectors_);
        endBitPosition = connectors_.initializeOffsets(endBitPosition);
        endBitPosition = chargers_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTotalPower().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(totalPower_));
        endBitPosition += zserioContext.getNumConnectors().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));
        endBitPosition = connectors_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = chargers_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(totalPower_);

        out.writeVarSize(numConnectors_);

        if (connectors_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingStationDetails.connectors: " +
                    connectors_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        connectors_.write(out);

        if (chargers_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingStationDetails.chargers: " +
                    chargers_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargers_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTotalPower().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(totalPower_));

        zserioContext.getNumConnectors().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numConnectors_));

        if (connectors_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingStationDetails.connectors: " +
                    connectors_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        connectors_.writePacked(out);

        if (chargers_.size() != (int)(getNumConnectors()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field EvChargingStationDetails.chargers: " +
                    chargers_.size() + " != " + (int)(getNumConnectors()) + "!");
        }
        chargers_.writePacked(out);
    }

    private static final class ZserioElementFactory_connectors implements zserio.runtime.array.PackableElementFactory<nds.poi.types.EvConnector>
    {
        @Override
        public nds.poi.types.EvConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.poi.types.EvConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.poi.types.EvConnector.ZserioPackingContext();
        }

        @Override
        public nds.poi.types.EvConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.poi.types.EvConnector(context, in);
        }
    }

    private int totalPower_;
    private int numConnectors_;
    private zserio.runtime.array.Array connectors_;
    private zserio.runtime.array.Array chargers_;
}
