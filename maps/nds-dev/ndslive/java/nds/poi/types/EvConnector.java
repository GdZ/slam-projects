/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class EvConnector implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            current_ = new zserio.runtime.array.DeltaContext();
            maxPower_ = new zserio.runtime.array.DeltaContext();
            voltage_ = new zserio.runtime.array.DeltaContext();
            ampere_ = new zserio.runtime.array.DeltaContext();
            commStandard_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getCurrent()
        {
            return current_;
        }

        public zserio.runtime.array.DeltaContext getMaxPower()
        {
            return maxPower_;
        }

        public zserio.runtime.array.DeltaContext getVoltage()
        {
            return voltage_;
        }

        public zserio.runtime.array.DeltaContext getAmpere()
        {
            return ampere_;
        }

        public zserio.runtime.array.DeltaContext getCommStandard()
        {
            return commStandard_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext current_;
        private zserio.runtime.array.DeltaContext maxPower_;
        private zserio.runtime.array.DeltaContext voltage_;
        private zserio.runtime.array.DeltaContext ampere_;
        private zserio.runtime.array.DeltaContext commStandard_;
    };

    public EvConnector()
    {
    }

    public EvConnector(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public EvConnector(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public EvConnector(
            nds.poi.types.EvConnectorType type_,
            nds.core.types.ElectricCurrent current_,
            int maxPower_,
            java.lang.Short voltage_,
            java.lang.Short ampere_,
            nds.poi.types.EvCommunicationStandard commStandard_)
    {
        setType(type_);
        setCurrent(current_);
        setMaxPower(maxPower_);
        setVoltage(voltage_);
        setAmpere(ampere_);
        setCommStandard(commStandard_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        current_.initPackingContext(zserioContext.getCurrent());
        zserioContext.getMaxPower().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxPower_));
        if (isVoltageUsed())
        {
            zserioContext.getVoltage().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(voltage_));
        }
        if (isAmpereUsed())
        {
            zserioContext.getAmpere().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ampere_));
        }
        if (isCommStandardUsed())
        {
            commStandard_.initPackingContext(zserioContext.getCommStandard());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += current_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxPower_);
        endBitPosition += 1;
        if (isVoltageUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(voltage_);
        }
        endBitPosition += 1;
        if (isAmpereUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(ampere_);
        }
        endBitPosition += 1;
        if (isCommStandardUsed())
        {
            endBitPosition += commStandard_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += current_.bitSizeOf(zserioContext.getCurrent(), endBitPosition);
        endBitPosition += zserioContext.getMaxPower().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxPower_));
        endBitPosition += 1;
        if (isVoltageUsed())
        {
            endBitPosition += zserioContext.getVoltage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(voltage_));
        }
        endBitPosition += 1;
        if (isAmpereUsed())
        {
            endBitPosition += zserioContext.getAmpere().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ampere_));
        }
        endBitPosition += 1;
        if (isCommStandardUsed())
        {
            endBitPosition += commStandard_.bitSizeOf(zserioContext.getCommStandard(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.types.EvConnectorType getType()
    {
        return type_;
    }

    public void setType(nds.poi.types.EvConnectorType type_)
    {
        this.type_ = type_;
    }

    public nds.core.types.ElectricCurrent getCurrent()
    {
        return current_;
    }

    public void setCurrent(nds.core.types.ElectricCurrent current_)
    {
        this.current_ = current_;
    }

    public int getMaxPower()
    {
        return maxPower_;
    }

    public void setMaxPower(int maxPower_)
    {
        this.maxPower_ = maxPower_;
    }

    public java.lang.Short getVoltage()
    {
        return voltage_;
    }

    public void setVoltage(java.lang.Short voltage_)
    {
        this.voltage_ = voltage_;
    }

    public boolean isVoltageUsed()
    {
        return isVoltageSet();
    }

    public boolean isVoltageSet()
    {
        return (voltage_ != null);
    }

    public void resetVoltage()
    {
        this.voltage_ = null;
    }

    public java.lang.Short getAmpere()
    {
        return ampere_;
    }

    public void setAmpere(java.lang.Short ampere_)
    {
        this.ampere_ = ampere_;
    }

    public boolean isAmpereUsed()
    {
        return isAmpereSet();
    }

    public boolean isAmpereSet()
    {
        return (ampere_ != null);
    }

    public void resetAmpere()
    {
        this.ampere_ = null;
    }

    public nds.poi.types.EvCommunicationStandard getCommStandard()
    {
        return commStandard_;
    }

    public void setCommStandard(nds.poi.types.EvCommunicationStandard commStandard_)
    {
        this.commStandard_ = commStandard_;
    }

    public boolean isCommStandardUsed()
    {
        return isCommStandardSet();
    }

    public boolean isCommStandardSet()
    {
        return (commStandard_ != null);
    }

    public void resetCommStandard()
    {
        this.commStandard_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof EvConnector)
        {
            final EvConnector that = (EvConnector)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((current_ == null) ? that.current_ == null : current_.getValue() == that.current_.getValue()) &&
                    maxPower_ == that.maxPower_ &&
                    ((!isVoltageUsed()) ? !that.isVoltageUsed() :
                        ((voltage_ == null) ? that.voltage_ == null : voltage_.equals(that.voltage_))) &&
                    ((!isAmpereUsed()) ? !that.isAmpereUsed() :
                        ((ampere_ == null) ? that.ampere_ == null : ampere_.equals(that.ampere_))) &&
                    ((!isCommStandardUsed()) ? !that.isCommStandardUsed() :
                        ((commStandard_ == null) ? that.commStandard_ == null : commStandard_.getValue() == that.commStandard_.getValue()));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, current_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxPower_);
        if (isVoltageUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, voltage_);
        if (isAmpereUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, ampere_);
        if (isCommStandardUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, commStandard_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.poi.types.EvConnectorType.readEnum(in);

        current_ = nds.core.types.ElectricCurrent.readEnum(in);

        maxPower_ = in.readVarUInt32();

        if (in.readBool())
        {
            voltage_ = in.readVarUInt16();
        }

        if (in.readBool())
        {
            ampere_ = in.readVarUInt16();
        }

        if (in.readBool())
        {
            commStandard_ = nds.poi.types.EvCommunicationStandard.readEnum(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.poi.types.EvConnectorType.readEnum(zserioContext.getType(), in);

        current_ = nds.core.types.ElectricCurrent.readEnum(zserioContext.getCurrent(), in);

        maxPower_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getMaxPower().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (in.readBool())
        {
            voltage_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getVoltage().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            ampere_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAmpere().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            commStandard_ = nds.poi.types.EvCommunicationStandard.readEnum(zserioContext.getCommStandard(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += current_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxPower_);
        endBitPosition += 1;
        if (isVoltageUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(voltage_);
        }
        endBitPosition += 1;
        if (isAmpereUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(ampere_);
        }
        endBitPosition += 1;
        if (isCommStandardUsed())
        {
            endBitPosition += commStandard_.bitSizeOf(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = current_.initializeOffsets(zserioContext.getCurrent(), endBitPosition);
        endBitPosition += zserioContext.getMaxPower().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxPower_));
        endBitPosition += 1;
        if (isVoltageUsed())
        {
            endBitPosition += zserioContext.getVoltage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(voltage_));
        }
        endBitPosition += 1;
        if (isAmpereUsed())
        {
            endBitPosition += zserioContext.getAmpere().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ampere_));
        }
        endBitPosition += 1;
        if (isCommStandardUsed())
        {
            endBitPosition = commStandard_.initializeOffsets(zserioContext.getCommStandard(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        current_.write(out);

        out.writeVarUInt32(maxPower_);

        if (isVoltageUsed())
        {
            out.writeBool(true);
            out.writeVarUInt16(voltage_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isAmpereUsed())
        {
            out.writeBool(true);
            out.writeVarUInt16(ampere_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isCommStandardUsed())
        {
            out.writeBool(true);
            commStandard_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        current_.write(zserioContext.getCurrent(), out);

        zserioContext.getMaxPower().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(maxPower_));

        if (isVoltageUsed())
        {
            out.writeBool(true);
            zserioContext.getVoltage().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(voltage_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isAmpereUsed())
        {
            out.writeBool(true);
            zserioContext.getAmpere().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ampere_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isCommStandardUsed())
        {
            out.writeBool(true);
            commStandard_.write(zserioContext.getCommStandard(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.poi.types.EvConnectorType type_;
    private nds.core.types.ElectricCurrent current_;
    private int maxPower_;
    private java.lang.Short voltage_;
    private java.lang.Short ampere_;
    private nds.poi.types.EvCommunicationStandard commStandard_;
}
