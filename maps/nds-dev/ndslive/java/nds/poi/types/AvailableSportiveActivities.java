/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class AvailableSportiveActivities implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numSports_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumSports()
        {
            return numSports_;
        }

        private zserio.runtime.array.DeltaContext numSports_;
    };

    public AvailableSportiveActivities()
    {
    }

    public AvailableSportiveActivities(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public AvailableSportiveActivities(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public AvailableSportiveActivities(
            short numSports_,
            java.lang.String[] sports_)
    {
        setNumSports(numSports_);
        setSports(sports_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumSports().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSports_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += sports_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSports().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSports_));
        endBitPosition += sports_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumSports()
    {
        return numSports_;
    }

    public void setNumSports(short numSports_)
    {
        this.numSports_ = numSports_;
    }

    public java.lang.String[] getSports()
    {
        return (sports_ == null) ? null : sports_.getRawArray();
    }

    public void setSports(java.lang.String[] sports_)
    {
        this.sports_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.StringRawArray(sports_),
                new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AvailableSportiveActivities)
        {
            final AvailableSportiveActivities that = (AvailableSportiveActivities)obj;

            return
                    numSports_ == that.numSports_ &&
                    ((sports_ == null) ? that.sports_ == null : sports_.equals(that.sports_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSports_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, sports_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numSports_ = in.readUnsignedByte();

        sports_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.StringRawArray(),
                new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        sports_.read(in, (int)(getNumSports()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numSports_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumSports().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        sports_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.StringRawArray(),
                new zserio.runtime.array.ArrayTraits.StringArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        sports_.read(in, (int)(getNumSports()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = sports_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSports().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSports_));
        endBitPosition = sports_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numSports_);

        if (sports_.size() != (int)(getNumSports()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AvailableSportiveActivities.sports: " +
                    sports_.size() + " != " + (int)(getNumSports()) + "!");
        }
        sports_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumSports().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSports_));

        if (sports_.size() != (int)(getNumSports()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AvailableSportiveActivities.sports: " +
                    sports_.size() + " != " + (int)(getNumSports()) + "!");
        }
        sports_.write(out);
    }

    private short numSports_;
    private zserio.runtime.array.Array sports_;
}
