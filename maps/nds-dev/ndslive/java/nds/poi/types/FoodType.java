/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class FoodType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            cuisine_ = new zserio.runtime.array.DeltaContext();
            dietAvailability_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getCuisine()
        {
            return cuisine_;
        }

        public zserio.runtime.array.DeltaContext getDietAvailability()
        {
            return dietAvailability_;
        }

        private zserio.runtime.array.DeltaContext cuisine_;
        private zserio.runtime.array.DeltaContext dietAvailability_;
    };

    public FoodType()
    {
    }

    public FoodType(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public FoodType(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public FoodType(
            nds.poi.types.Cuisine cuisine_,
            java.lang.String customCuisine_,
            boolean hasDietAvailability_,
            nds.poi.types.DietAvailability dietAvailability_)
    {
        setCuisine(cuisine_);
        setCustomCuisine(customCuisine_);
        setHasDietAvailability(hasDietAvailability_);
        setDietAvailability(dietAvailability_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        cuisine_.initPackingContext(zserioContext.getCuisine());
        dietAvailability_.initPackingContext(zserioContext.getDietAvailability());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += cuisine_.bitSizeOf(endBitPosition);
        if (isCustomCuisineUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(customCuisine_);
        }
        endBitPosition += 1;
        endBitPosition += dietAvailability_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += cuisine_.bitSizeOf(zserioContext.getCuisine(), endBitPosition);
        if (isCustomCuisineUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(customCuisine_);
        }
        endBitPosition += 1;
        endBitPosition += dietAvailability_.bitSizeOf(zserioContext.getDietAvailability(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.types.Cuisine getCuisine()
    {
        return cuisine_;
    }

    public void setCuisine(nds.poi.types.Cuisine cuisine_)
    {
        this.cuisine_ = cuisine_;
    }

    public java.lang.String getCustomCuisine()
    {
        return customCuisine_;
    }

    public void setCustomCuisine(java.lang.String customCuisine_)
    {
        this.customCuisine_ = customCuisine_;
    }

    public boolean isCustomCuisineUsed()
    {
        return (getCuisine() == nds.poi.types.Cuisine.CUSTOM);
    }

    public boolean isCustomCuisineSet()
    {
        return (customCuisine_ != null);
    }

    public void resetCustomCuisine()
    {
        this.customCuisine_ = null;
    }

    public boolean getHasDietAvailability()
    {
        return hasDietAvailability_;
    }

    public void setHasDietAvailability(boolean hasDietAvailability_)
    {
        this.hasDietAvailability_ = hasDietAvailability_;
    }

    public nds.poi.types.DietAvailability getDietAvailability()
    {
        return dietAvailability_;
    }

    public void setDietAvailability(nds.poi.types.DietAvailability dietAvailability_)
    {
        this.dietAvailability_ = dietAvailability_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof FoodType)
        {
            final FoodType that = (FoodType)obj;

            return
                    ((cuisine_ == null) ? that.cuisine_ == null : cuisine_.getValue() == that.cuisine_.getValue()) &&
                    ((!isCustomCuisineUsed()) ? !that.isCustomCuisineUsed() :
                        ((customCuisine_ == null) ? that.customCuisine_ == null : customCuisine_.equals(that.customCuisine_))) &&
                    hasDietAvailability_ == that.hasDietAvailability_ &&
                    ((dietAvailability_ == null) ? that.dietAvailability_ == null : dietAvailability_.equals(that.dietAvailability_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, cuisine_);
        if (isCustomCuisineUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, customCuisine_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasDietAvailability_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, dietAvailability_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        cuisine_ = nds.poi.types.Cuisine.readEnum(in);

        if (getCuisine() == nds.poi.types.Cuisine.CUSTOM)
        {
            customCuisine_ = in.readString();
        }

        hasDietAvailability_ = in.readBool();

        dietAvailability_ = new nds.poi.types.DietAvailability(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        cuisine_ = nds.poi.types.Cuisine.readEnum(zserioContext.getCuisine(), in);

        if (getCuisine() == nds.poi.types.Cuisine.CUSTOM)
        {
            customCuisine_ = in.readString();
        }

        hasDietAvailability_ = in.readBool();

        dietAvailability_ = new nds.poi.types.DietAvailability(zserioContext.getDietAvailability(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += cuisine_.bitSizeOf(endBitPosition);
        if (isCustomCuisineUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(customCuisine_);
        }
        endBitPosition += 1;
        endBitPosition += dietAvailability_.bitSizeOf(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = cuisine_.initializeOffsets(zserioContext.getCuisine(), endBitPosition);
        if (isCustomCuisineUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(customCuisine_);
        }
        endBitPosition += 1;
        endBitPosition = dietAvailability_.initializeOffsets(zserioContext.getDietAvailability(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        cuisine_.write(out);

        if (isCustomCuisineUsed())
        {
            out.writeString(customCuisine_);
        }

        out.writeBool(hasDietAvailability_);

        dietAvailability_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        cuisine_.write(zserioContext.getCuisine(), out);

        if (isCustomCuisineUsed())
        {
            out.writeString(customCuisine_);
        }

        out.writeBool(hasDietAvailability_);

        dietAvailability_.write(zserioContext.getDietAvailability(), out);
    }

    private nds.poi.types.Cuisine cuisine_;
    private java.lang.String customCuisine_;
    private boolean hasDietAvailability_;
    private nds.poi.types.DietAvailability dietAvailability_;
}
