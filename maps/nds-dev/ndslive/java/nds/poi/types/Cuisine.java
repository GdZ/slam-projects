/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public enum Cuisine implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    OTHER((short)0),
    CUSTOM((short)1),
    AFGHAN((short)2),
    AFRICAN((short)3),
    AMERICAN((short)4),
    ARAB((short)5),
    ARGENTINIAN((short)6),
    ASIAN((short)7),
    AUSTRALIAN((short)8),
    BAIANA((short)9),
    BALKAN((short)10),
    BASQUE((short)11),
    BELARUSIAN((short)12),
    BOLIVIAN((short)13),
    BRAZILIAN((short)14),
    CANTONESE((short)15),
    CARIBBEAN((short)16),
    CHINESE((short)17),
    CROATIAN((short)18),
    CZECH((short)19),
    DANISH((short)20),
    FILIPINO((short)21),
    FRENCH((short)22),
    GAUCHO((short)23),
    GEORGIAN((short)24),
    GERMAN((short)25),
    GREEK((short)26),
    HAWAIIAN((short)27),
    HUNGARIAN((short)28),
    INDIAN((short)29),
    INDONESIAN((short)30),
    INTERNATIONAL((short)31),
    IRANIAN((short)32),
    ITALIAN((short)33),
    JAPANESE((short)34),
    JEWISH((short)35),
    KOREAN((short)36),
    LATIN_AMERICAN((short)37),
    LEBANESE((short)38),
    MALAYSIAN((short)39),
    MALAGASY((short)40),
    MEDITERRANEAN((short)41),
    MEXICAN((short)42),
    PAKISTANI((short)43),
    PERUVIAN((short)44),
    POLISH((short)45),
    PORTUGUESE((short)46),
    REGIONAL((short)47),
    RUSSIAN((short)48),
    SCOTTISH((short)49),
    SPANISH((short)50),
    THAI((short)51),
    TURKISH((short)52),
    VIETNAMESE((short)53),
    WESTERN((short)54);

    private Cuisine(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static Cuisine readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static Cuisine readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static Cuisine toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return OTHER;
            case (short)1:
                return CUSTOM;
            case (short)2:
                return AFGHAN;
            case (short)3:
                return AFRICAN;
            case (short)4:
                return AMERICAN;
            case (short)5:
                return ARAB;
            case (short)6:
                return ARGENTINIAN;
            case (short)7:
                return ASIAN;
            case (short)8:
                return AUSTRALIAN;
            case (short)9:
                return BAIANA;
            case (short)10:
                return BALKAN;
            case (short)11:
                return BASQUE;
            case (short)12:
                return BELARUSIAN;
            case (short)13:
                return BOLIVIAN;
            case (short)14:
                return BRAZILIAN;
            case (short)15:
                return CANTONESE;
            case (short)16:
                return CARIBBEAN;
            case (short)17:
                return CHINESE;
            case (short)18:
                return CROATIAN;
            case (short)19:
                return CZECH;
            case (short)20:
                return DANISH;
            case (short)21:
                return FILIPINO;
            case (short)22:
                return FRENCH;
            case (short)23:
                return GAUCHO;
            case (short)24:
                return GEORGIAN;
            case (short)25:
                return GERMAN;
            case (short)26:
                return GREEK;
            case (short)27:
                return HAWAIIAN;
            case (short)28:
                return HUNGARIAN;
            case (short)29:
                return INDIAN;
            case (short)30:
                return INDONESIAN;
            case (short)31:
                return INTERNATIONAL;
            case (short)32:
                return IRANIAN;
            case (short)33:
                return ITALIAN;
            case (short)34:
                return JAPANESE;
            case (short)35:
                return JEWISH;
            case (short)36:
                return KOREAN;
            case (short)37:
                return LATIN_AMERICAN;
            case (short)38:
                return LEBANESE;
            case (short)39:
                return MALAYSIAN;
            case (short)40:
                return MALAGASY;
            case (short)41:
                return MEDITERRANEAN;
            case (short)42:
                return MEXICAN;
            case (short)43:
                return PAKISTANI;
            case (short)44:
                return PERUVIAN;
            case (short)45:
                return POLISH;
            case (short)46:
                return PORTUGUESE;
            case (short)47:
                return REGIONAL;
            case (short)48:
                return RUSSIAN;
            case (short)49:
                return SCOTTISH;
            case (short)50:
                return SPANISH;
            case (short)51:
                return THAI;
            case (short)52:
                return TURKISH;
            case (short)53:
                return VIETNAMESE;
            case (short)54:
                return WESTERN;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration Cuisine: " + value + "!");
        }
    }

    public static Cuisine toEnum(java.lang.String itemName)
    {
        if (itemName.equals("OTHER"))
            return OTHER;
        if (itemName.equals("CUSTOM"))
            return CUSTOM;
        if (itemName.equals("AFGHAN"))
            return AFGHAN;
        if (itemName.equals("AFRICAN"))
            return AFRICAN;
        if (itemName.equals("AMERICAN"))
            return AMERICAN;
        if (itemName.equals("ARAB"))
            return ARAB;
        if (itemName.equals("ARGENTINIAN"))
            return ARGENTINIAN;
        if (itemName.equals("ASIAN"))
            return ASIAN;
        if (itemName.equals("AUSTRALIAN"))
            return AUSTRALIAN;
        if (itemName.equals("BAIANA"))
            return BAIANA;
        if (itemName.equals("BALKAN"))
            return BALKAN;
        if (itemName.equals("BASQUE"))
            return BASQUE;
        if (itemName.equals("BELARUSIAN"))
            return BELARUSIAN;
        if (itemName.equals("BOLIVIAN"))
            return BOLIVIAN;
        if (itemName.equals("BRAZILIAN"))
            return BRAZILIAN;
        if (itemName.equals("CANTONESE"))
            return CANTONESE;
        if (itemName.equals("CARIBBEAN"))
            return CARIBBEAN;
        if (itemName.equals("CHINESE"))
            return CHINESE;
        if (itemName.equals("CROATIAN"))
            return CROATIAN;
        if (itemName.equals("CZECH"))
            return CZECH;
        if (itemName.equals("DANISH"))
            return DANISH;
        if (itemName.equals("FILIPINO"))
            return FILIPINO;
        if (itemName.equals("FRENCH"))
            return FRENCH;
        if (itemName.equals("GAUCHO"))
            return GAUCHO;
        if (itemName.equals("GEORGIAN"))
            return GEORGIAN;
        if (itemName.equals("GERMAN"))
            return GERMAN;
        if (itemName.equals("GREEK"))
            return GREEK;
        if (itemName.equals("HAWAIIAN"))
            return HAWAIIAN;
        if (itemName.equals("HUNGARIAN"))
            return HUNGARIAN;
        if (itemName.equals("INDIAN"))
            return INDIAN;
        if (itemName.equals("INDONESIAN"))
            return INDONESIAN;
        if (itemName.equals("INTERNATIONAL"))
            return INTERNATIONAL;
        if (itemName.equals("IRANIAN"))
            return IRANIAN;
        if (itemName.equals("ITALIAN"))
            return ITALIAN;
        if (itemName.equals("JAPANESE"))
            return JAPANESE;
        if (itemName.equals("JEWISH"))
            return JEWISH;
        if (itemName.equals("KOREAN"))
            return KOREAN;
        if (itemName.equals("LATIN_AMERICAN"))
            return LATIN_AMERICAN;
        if (itemName.equals("LEBANESE"))
            return LEBANESE;
        if (itemName.equals("MALAYSIAN"))
            return MALAYSIAN;
        if (itemName.equals("MALAGASY"))
            return MALAGASY;
        if (itemName.equals("MEDITERRANEAN"))
            return MEDITERRANEAN;
        if (itemName.equals("MEXICAN"))
            return MEXICAN;
        if (itemName.equals("PAKISTANI"))
            return PAKISTANI;
        if (itemName.equals("PERUVIAN"))
            return PERUVIAN;
        if (itemName.equals("POLISH"))
            return POLISH;
        if (itemName.equals("PORTUGUESE"))
            return PORTUGUESE;
        if (itemName.equals("REGIONAL"))
            return REGIONAL;
        if (itemName.equals("RUSSIAN"))
            return RUSSIAN;
        if (itemName.equals("SCOTTISH"))
            return SCOTTISH;
        if (itemName.equals("SPANISH"))
            return SPANISH;
        if (itemName.equals("THAI"))
            return THAI;
        if (itemName.equals("TURKISH"))
            return TURKISH;
        if (itemName.equals("VIETNAMESE"))
            return VIETNAMESE;
        if (itemName.equals("WESTERN"))
            return WESTERN;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration Cuisine!");
    }

    private short value;
}
