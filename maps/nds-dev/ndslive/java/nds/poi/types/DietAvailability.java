/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.types;

public class DietAvailability implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public DietAvailability()
    {
        this((int)0);
    }

    public DietAvailability(int value)
    {
        if (value < 0 || value > 536870911)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'DietAvailability' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public DietAvailability(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt32();
    }

    public DietAvailability(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof DietAvailability))
            return false;

        final DietAvailability otherDietAvailability = (DietAvailability)other;
        return value == otherDietAvailability.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(DietAvailability.Values.PESCETARIAN).equals(DietAvailability.Values.PESCETARIAN))
            builder.append(builder.length() == 0 ? "PESCETARIAN" : " | PESCETARIAN");
        if (this.and(DietAvailability.Values.VEGETARIAN).equals(DietAvailability.Values.VEGETARIAN))
            builder.append(builder.length() == 0 ? "VEGETARIAN" : " | VEGETARIAN");
        if (this.and(DietAvailability.Values.LACTO_VEGETARIAN).equals(DietAvailability.Values.LACTO_VEGETARIAN))
            builder.append(builder.length() == 0 ? "LACTO_VEGETARIAN" : " | LACTO_VEGETARIAN");
        if (this.and(DietAvailability.Values.OVO_VEGETARIAN).equals(DietAvailability.Values.OVO_VEGETARIAN))
            builder.append(builder.length() == 0 ? "OVO_VEGETARIAN" : " | OVO_VEGETARIAN");
        if (this.and(DietAvailability.Values.VEGAN).equals(DietAvailability.Values.VEGAN))
            builder.append(builder.length() == 0 ? "VEGAN" : " | VEGAN");
        if (this.and(DietAvailability.Values.FRUITARIAN).equals(DietAvailability.Values.FRUITARIAN))
            builder.append(builder.length() == 0 ? "FRUITARIAN" : " | FRUITARIAN");
        if (this.and(DietAvailability.Values.RAW).equals(DietAvailability.Values.RAW))
            builder.append(builder.length() == 0 ? "RAW" : " | RAW");
        if (this.and(DietAvailability.Values.GLUTEN_FREE).equals(DietAvailability.Values.GLUTEN_FREE))
            builder.append(builder.length() == 0 ? "GLUTEN_FREE" : " | GLUTEN_FREE");
        if (this.and(DietAvailability.Values.DAIRY_FREE).equals(DietAvailability.Values.DAIRY_FREE))
            builder.append(builder.length() == 0 ? "DAIRY_FREE" : " | DAIRY_FREE");
        if (this.and(DietAvailability.Values.LACTOSE_FREE).equals(DietAvailability.Values.LACTOSE_FREE))
            builder.append(builder.length() == 0 ? "LACTOSE_FREE" : " | LACTOSE_FREE");
        if (this.and(DietAvailability.Values.DIABETES).equals(DietAvailability.Values.DIABETES))
            builder.append(builder.length() == 0 ? "DIABETES" : " | DIABETES");
        if (this.and(DietAvailability.Values.HALAL).equals(DietAvailability.Values.HALAL))
            builder.append(builder.length() == 0 ? "HALAL" : " | HALAL");
        if (this.and(DietAvailability.Values.KOSHER).equals(DietAvailability.Values.KOSHER))
            builder.append(builder.length() == 0 ? "KOSHER" : " | KOSHER");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public DietAvailability or(DietAvailability other)
    {
        return new DietAvailability((int)(value | other.value));
    }

    public DietAvailability and(DietAvailability other)
    {
        return new DietAvailability((int)(value & other.value));
    }

    public DietAvailability xor(DietAvailability other)
    {
        return new DietAvailability((int)(value ^ other.value));
    }

    public DietAvailability not()
    {
        return new DietAvailability((int)(~value & 536870911));
    }

    public static final class Values
    {
        public static final DietAvailability PESCETARIAN = new DietAvailability(1);
        public static final DietAvailability VEGETARIAN = new DietAvailability(2);
        public static final DietAvailability LACTO_VEGETARIAN = new DietAvailability(4);
        public static final DietAvailability OVO_VEGETARIAN = new DietAvailability(8);
        public static final DietAvailability VEGAN = new DietAvailability(16);
        public static final DietAvailability FRUITARIAN = new DietAvailability(32);
        public static final DietAvailability RAW = new DietAvailability(64);
        public static final DietAvailability GLUTEN_FREE = new DietAvailability(128);
        public static final DietAvailability DAIRY_FREE = new DietAvailability(256);
        public static final DietAvailability LACTOSE_FREE = new DietAvailability(512);
        public static final DietAvailability DIABETES = new DietAvailability(1024);
        public static final DietAvailability HALAL = new DietAvailability(2048);
        public static final DietAvailability KOSHER = new DietAvailability(4096);
    }

    private int value;
}
