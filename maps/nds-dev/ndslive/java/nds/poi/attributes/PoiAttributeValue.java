/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.attributes;

public class PoiAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            acceptedPaymentMethods_ = new nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext();
            accessPointType_ = new zserio.runtime.array.DeltaContext();
            evChargingStationDetails_ = new nds.poi.types.EvChargingStationDetails.ZserioPackingContext();
            acceptedChargingPayment_ = new nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext();
            evChargingAvailability_ = new nds.poi.types.EvChargingAvailability.ZserioPackingContext();
            stars_ = new zserio.runtime.array.DeltaContext();
            fuelType_ = new zserio.runtime.array.DeltaContext();
            logicalAccessPointType_ = new zserio.runtime.array.DeltaContext();
            airportEntranceType_ = new zserio.runtime.array.DeltaContext();
            foodType_ = new nds.poi.types.FoodType.ZserioPackingContext();
            parkingFacilitiesSizeClass_ = new zserio.runtime.array.DeltaContext();
            parkingFacilitiesSize_ = new zserio.runtime.array.DeltaContext();
            numFreeParkingSpots_ = new zserio.runtime.array.DeltaContext();
            restAreaServiceAvailability_ = new zserio.runtime.array.DeltaContext();
            accessibilityAids_ = new zserio.runtime.array.DeltaContext();
            departureArrivalService_ = new zserio.runtime.array.DeltaContext();
            priceRange_ = new zserio.runtime.array.DeltaContext();
            availableSportiveActivities_ = new nds.poi.types.AvailableSportiveActivities.ZserioPackingContext();
            floorNumber_ = new zserio.runtime.array.DeltaContext();
            numberOfRoomsEnSuite_ = new zserio.runtime.array.DeltaContext();
            placeOfWorshipType_ = new zserio.runtime.array.DeltaContext();
            serviceFee_ = new nds.core.types.MonetaryAmount.ZserioPackingContext();
            carDealerType_ = new zserio.runtime.array.DeltaContext();
            airportServiceAvailability_ = new zserio.runtime.array.DeltaContext();
            transitType_ = new zserio.runtime.array.DeltaContext();
            accessPointDetails_ = new nds.poi.types.AccessPointDetails.ZserioPackingContext();
            adBlueAvailability_ = new zserio.runtime.array.DeltaContext();
            hydrogenPressureAvailability_ = new zserio.runtime.array.DeltaContext();
            radius_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext getAcceptedPaymentMethods()
        {
            return acceptedPaymentMethods_;
        }

        public zserio.runtime.array.DeltaContext getAccessPointType()
        {
            return accessPointType_;
        }

        public nds.poi.types.EvChargingStationDetails.ZserioPackingContext getEvChargingStationDetails()
        {
            return evChargingStationDetails_;
        }

        public nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext getAcceptedChargingPayment()
        {
            return acceptedChargingPayment_;
        }

        public nds.poi.types.EvChargingAvailability.ZserioPackingContext getEvChargingAvailability()
        {
            return evChargingAvailability_;
        }

        public zserio.runtime.array.DeltaContext getStars()
        {
            return stars_;
        }

        public zserio.runtime.array.DeltaContext getFuelType()
        {
            return fuelType_;
        }

        public zserio.runtime.array.DeltaContext getLogicalAccessPointType()
        {
            return logicalAccessPointType_;
        }

        public zserio.runtime.array.DeltaContext getAirportEntranceType()
        {
            return airportEntranceType_;
        }

        public nds.poi.types.FoodType.ZserioPackingContext getFoodType()
        {
            return foodType_;
        }

        public zserio.runtime.array.DeltaContext getParkingFacilitiesSizeClass()
        {
            return parkingFacilitiesSizeClass_;
        }

        public zserio.runtime.array.DeltaContext getParkingFacilitiesSize()
        {
            return parkingFacilitiesSize_;
        }

        public zserio.runtime.array.DeltaContext getNumFreeParkingSpots()
        {
            return numFreeParkingSpots_;
        }

        public zserio.runtime.array.DeltaContext getRestAreaServiceAvailability()
        {
            return restAreaServiceAvailability_;
        }

        public zserio.runtime.array.DeltaContext getAccessibilityAids()
        {
            return accessibilityAids_;
        }

        public zserio.runtime.array.DeltaContext getDepartureArrivalService()
        {
            return departureArrivalService_;
        }

        public zserio.runtime.array.DeltaContext getPriceRange()
        {
            return priceRange_;
        }

        public nds.poi.types.AvailableSportiveActivities.ZserioPackingContext getAvailableSportiveActivities()
        {
            return availableSportiveActivities_;
        }

        public zserio.runtime.array.DeltaContext getFloorNumber()
        {
            return floorNumber_;
        }

        public zserio.runtime.array.DeltaContext getNumberOfRoomsEnSuite()
        {
            return numberOfRoomsEnSuite_;
        }

        public zserio.runtime.array.DeltaContext getPlaceOfWorshipType()
        {
            return placeOfWorshipType_;
        }

        public nds.core.types.MonetaryAmount.ZserioPackingContext getServiceFee()
        {
            return serviceFee_;
        }

        public zserio.runtime.array.DeltaContext getCarDealerType()
        {
            return carDealerType_;
        }

        public zserio.runtime.array.DeltaContext getAirportServiceAvailability()
        {
            return airportServiceAvailability_;
        }

        public zserio.runtime.array.DeltaContext getTransitType()
        {
            return transitType_;
        }

        public nds.poi.types.AccessPointDetails.ZserioPackingContext getAccessPointDetails()
        {
            return accessPointDetails_;
        }

        public zserio.runtime.array.DeltaContext getAdBlueAvailability()
        {
            return adBlueAvailability_;
        }

        public zserio.runtime.array.DeltaContext getHydrogenPressureAvailability()
        {
            return hydrogenPressureAvailability_;
        }

        public zserio.runtime.array.DeltaContext getRadius()
        {
            return radius_;
        }

        private nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext acceptedPaymentMethods_;
        private zserio.runtime.array.DeltaContext accessPointType_;
        private nds.poi.types.EvChargingStationDetails.ZserioPackingContext evChargingStationDetails_;
        private nds.poi.types.AcceptedPaymentMethods.ZserioPackingContext acceptedChargingPayment_;
        private nds.poi.types.EvChargingAvailability.ZserioPackingContext evChargingAvailability_;
        private zserio.runtime.array.DeltaContext stars_;
        private zserio.runtime.array.DeltaContext fuelType_;
        private zserio.runtime.array.DeltaContext logicalAccessPointType_;
        private zserio.runtime.array.DeltaContext airportEntranceType_;
        private nds.poi.types.FoodType.ZserioPackingContext foodType_;
        private zserio.runtime.array.DeltaContext parkingFacilitiesSizeClass_;
        private zserio.runtime.array.DeltaContext parkingFacilitiesSize_;
        private zserio.runtime.array.DeltaContext numFreeParkingSpots_;
        private zserio.runtime.array.DeltaContext restAreaServiceAvailability_;
        private zserio.runtime.array.DeltaContext accessibilityAids_;
        private zserio.runtime.array.DeltaContext departureArrivalService_;
        private zserio.runtime.array.DeltaContext priceRange_;
        private nds.poi.types.AvailableSportiveActivities.ZserioPackingContext availableSportiveActivities_;
        private zserio.runtime.array.DeltaContext floorNumber_;
        private zserio.runtime.array.DeltaContext numberOfRoomsEnSuite_;
        private zserio.runtime.array.DeltaContext placeOfWorshipType_;
        private nds.core.types.MonetaryAmount.ZserioPackingContext serviceFee_;
        private zserio.runtime.array.DeltaContext carDealerType_;
        private zserio.runtime.array.DeltaContext airportServiceAvailability_;
        private zserio.runtime.array.DeltaContext transitType_;
        private nds.poi.types.AccessPointDetails.ZserioPackingContext accessPointDetails_;
        private zserio.runtime.array.DeltaContext adBlueAvailability_;
        private zserio.runtime.array.DeltaContext hydrogenPressureAvailability_;
        private zserio.runtime.array.DeltaContext radius_;
    };

    public PoiAttributeValue(
            nds.poi.attributes.PoiAttributeType type_)
    {
        this.type_ = type_;
    }

    public PoiAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.poi.attributes.PoiAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PoiAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.poi.attributes.PoiAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case OPEN_24_HRS:
            return CHOICE_open24Hrs;
        case ACCEPTED_PAYMENT_METHODS:
            return CHOICE_acceptedPaymentMethods;
        case ACCESS_POINT_TYPE:
            return CHOICE_accessPointType;
        case AIRPORT_CODE:
            return CHOICE_airportCode;
        case BRAND_NAME:
            return CHOICE_brandName;
        case EV_CHARGING_DETAILS:
            return CHOICE_evChargingStationDetails;
        case EV_CHARGING_PAYMENT_METHODS:
            return CHOICE_acceptedChargingPayment;
        case EV_ENERGY_PROVIDER:
            return CHOICE_evEnergyProvider;
        case EV_FREE_CHARGING:
            return CHOICE_evFreeCharging;
        case EV_FREE_PARKING:
            return CHOICE_evFreeParking;
        case EV_CHARGING_AVAILABILITY:
            return CHOICE_evChargingAvailability;
        case OPENING_HRS:
            return CHOICE_openingHrs;
        case EMAIL:
            return CHOICE_email;
        case PHONE_NUMBER:
            return CHOICE_phoneNumber;
        case STAR_RATING:
            return CHOICE_stars;
        case FUEL_TYPE:
            return CHOICE_fuelType;
        case LOGICAL_ACCESS_POINT_TYPE:
            return CHOICE_logicalAccessPointType;
        case WEBSITE:
            return CHOICE_website;
        case IN_VICINITY:
            return CHOICE_InVicinity;
        case AIRPORT_ENTRANCE_TYPE:
            return CHOICE_airportEntranceType;
        case FOOD_TYPE:
            return CHOICE_foodType;
        case MULTIMEDIA:
            return CHOICE_multimediaResourceReference;
        case PRIVATE_ACCESS:
            return CHOICE_privateAccess;
        case NATIONAL_IMPORTANCE:
            return CHOICE_nationalImportance;
        case PARKING_FACILITIES_SIZE_CLASS:
            return CHOICE_parkingFacilitiesSizeClass;
        case PARKING_FACILITIES_SIZE:
            return CHOICE_parkingFacilitiesSize;
        case NUM_FREE_PARKING_SPOTS:
            return CHOICE_numFreeParkingSpots;
        case REST_AREA_SERVICE_AVAILABILITY:
            return CHOICE_restAreaServiceAvailability;
        case ACCESSIBILITY_AIDS:
            return CHOICE_accessibilityAids;
        case RESTAURANT_FACILITIES_AVAILABLE:
            return CHOICE_restaurantFacilitiesAvailable;
        case DEPARTURE_ARRIVAL_SERVICE:
            return CHOICE_departureArrivalService;
        case PRICE_RANGE:
            return CHOICE_priceRange;
        case SHORT_DESCRIPTION:
            return CHOICE_shortDescription;
        case LONG_DESCRIPTION:
            return CHOICE_poiLongDescription;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            return CHOICE_availableSportiveActivities;
        case FLOOR_NUMBER:
            return CHOICE_floorNumber;
        case NUMBER_OF_ROOMS_EN_SUITE:
            return CHOICE_numberOfRoomsEnSuite;
        case PLACE_OF_WORSHIP_TYPE:
            return CHOICE_placeOfWorshipType;
        case SERVICE_FEE:
            return CHOICE_serviceFee;
        case CAR_DEALER_TYPE:
            return CHOICE_carDealerType;
        case MAJOR_IMPORTANCE:
            return CHOICE_majorImportance;
        case AIRPORT_SERVICE_AVAILABILITY:
            return CHOICE_airportServiceAvailability;
        case AIRPORT_MILITARY:
            return CHOICE_airportMilitary;
        case TRANSIT_TYPE:
            return CHOICE_transitType;
        case ACCESS_POINT_DETAILS:
            return CHOICE_accessPointDetails;
        case PARK_AND_RIDE_FACILITY:
            return CHOICE_parkAndRideFacility;
        case ADBLUE_AVAILABILITY:
            return CHOICE_adBlueAvailability;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            return CHOICE_hydrogenPressureAvailability;
        case AVAILABILITY_URL:
            return CHOICE_url;
        case RELEVANCE_RADIUS:
            return CHOICE_radius;
        case GLOBAL_SOURCE_ID:
            return CHOICE_globalSourceId;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case OPEN_24_HRS:
            break;
        case ACCEPTED_PAYMENT_METHODS:
            getAcceptedPaymentMethods().initPackingContext(zserioContext.getAcceptedPaymentMethods());
            break;
        case ACCESS_POINT_TYPE:
            getAccessPointType().initPackingContext(zserioContext.getAccessPointType());
            break;
        case AIRPORT_CODE:
            break;
        case BRAND_NAME:
            break;
        case EV_CHARGING_DETAILS:
            getEvChargingStationDetails().initPackingContext(zserioContext.getEvChargingStationDetails());
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            getAcceptedChargingPayment().initPackingContext(zserioContext.getAcceptedChargingPayment());
            break;
        case EV_ENERGY_PROVIDER:
            break;
        case EV_FREE_CHARGING:
            break;
        case EV_FREE_PARKING:
            break;
        case EV_CHARGING_AVAILABILITY:
            getEvChargingAvailability().initPackingContext(zserioContext.getEvChargingAvailability());
            break;
        case OPENING_HRS:
            break;
        case EMAIL:
            break;
        case PHONE_NUMBER:
            break;
        case STAR_RATING:
            getStars().initPackingContext(zserioContext.getStars());
            break;
        case FUEL_TYPE:
            getFuelType().initPackingContext(zserioContext.getFuelType());
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            getLogicalAccessPointType().initPackingContext(zserioContext.getLogicalAccessPointType());
            break;
        case WEBSITE:
            break;
        case IN_VICINITY:
            break;
        case AIRPORT_ENTRANCE_TYPE:
            getAirportEntranceType().initPackingContext(zserioContext.getAirportEntranceType());
            break;
        case FOOD_TYPE:
            getFoodType().initPackingContext(zserioContext.getFoodType());
            break;
        case MULTIMEDIA:
            break;
        case PRIVATE_ACCESS:
            break;
        case NATIONAL_IMPORTANCE:
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            getParkingFacilitiesSizeClass().initPackingContext(zserioContext.getParkingFacilitiesSizeClass());
            break;
        case PARKING_FACILITIES_SIZE:
            zserioContext.getParkingFacilitiesSize().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getParkingFacilitiesSize()));
            break;
        case NUM_FREE_PARKING_SPOTS:
            zserioContext.getNumFreeParkingSpots().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumFreeParkingSpots()));
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            getRestAreaServiceAvailability().initPackingContext(zserioContext.getRestAreaServiceAvailability());
            break;
        case ACCESSIBILITY_AIDS:
            getAccessibilityAids().initPackingContext(zserioContext.getAccessibilityAids());
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            getDepartureArrivalService().initPackingContext(zserioContext.getDepartureArrivalService());
            break;
        case PRICE_RANGE:
            getPriceRange().initPackingContext(zserioContext.getPriceRange());
            break;
        case SHORT_DESCRIPTION:
            break;
        case LONG_DESCRIPTION:
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            getAvailableSportiveActivities().initPackingContext(zserioContext.getAvailableSportiveActivities());
            break;
        case FLOOR_NUMBER:
            zserioContext.getFloorNumber().init(new zserio.runtime.array.ArrayTraits.VarInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getFloorNumber()));
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            zserioContext.getNumberOfRoomsEnSuite().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumberOfRoomsEnSuite()));
            break;
        case PLACE_OF_WORSHIP_TYPE:
            getPlaceOfWorshipType().initPackingContext(zserioContext.getPlaceOfWorshipType());
            break;
        case SERVICE_FEE:
            getServiceFee().initPackingContext(zserioContext.getServiceFee());
            break;
        case CAR_DEALER_TYPE:
            getCarDealerType().initPackingContext(zserioContext.getCarDealerType());
            break;
        case MAJOR_IMPORTANCE:
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            getAirportServiceAvailability().initPackingContext(zserioContext.getAirportServiceAvailability());
            break;
        case AIRPORT_MILITARY:
            break;
        case TRANSIT_TYPE:
            getTransitType().initPackingContext(zserioContext.getTransitType());
            break;
        case ACCESS_POINT_DETAILS:
            getAccessPointDetails().initPackingContext(zserioContext.getAccessPointDetails());
            break;
        case PARK_AND_RIDE_FACILITY:
            break;
        case ADBLUE_AVAILABILITY:
            getAdBlueAvailability().initPackingContext(zserioContext.getAdBlueAvailability());
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            getHydrogenPressureAvailability().initPackingContext(zserioContext.getHydrogenPressureAvailability());
            break;
        case AVAILABILITY_URL:
            break;
        case RELEVANCE_RADIUS:
            zserioContext.getRadius().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRadius()));
            break;
        case GLOBAL_SOURCE_ID:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case OPEN_24_HRS:
            endBitPosition += getOpen24Hrs().bitSizeOf(endBitPosition);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            endBitPosition += getAcceptedPaymentMethods().bitSizeOf(endBitPosition);
            break;
        case ACCESS_POINT_TYPE:
            endBitPosition += getAccessPointType().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_CODE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAirportCode());
            break;
        case BRAND_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBrandName());
            break;
        case EV_CHARGING_DETAILS:
            endBitPosition += getEvChargingStationDetails().bitSizeOf(endBitPosition);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            endBitPosition += getAcceptedChargingPayment().bitSizeOf(endBitPosition);
            break;
        case EV_ENERGY_PROVIDER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEvEnergyProvider());
            break;
        case EV_FREE_CHARGING:
            endBitPosition += getEvFreeCharging().bitSizeOf(endBitPosition);
            break;
        case EV_FREE_PARKING:
            endBitPosition += getEvFreeParking().bitSizeOf(endBitPosition);
            break;
        case EV_CHARGING_AVAILABILITY:
            endBitPosition += getEvChargingAvailability().bitSizeOf(endBitPosition);
            break;
        case OPENING_HRS:
            endBitPosition += getOpeningHrs().bitSizeOf(endBitPosition);
            break;
        case EMAIL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEmail());
            break;
        case PHONE_NUMBER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPhoneNumber());
            break;
        case STAR_RATING:
            endBitPosition += getStars().bitSizeOf(endBitPosition);
            break;
        case FUEL_TYPE:
            endBitPosition += getFuelType().bitSizeOf(endBitPosition);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            endBitPosition += getLogicalAccessPointType().bitSizeOf(endBitPosition);
            break;
        case WEBSITE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWebsite());
            break;
        case IN_VICINITY:
            endBitPosition += getInVicinity().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            endBitPosition += getAirportEntranceType().bitSizeOf(endBitPosition);
            break;
        case FOOD_TYPE:
            endBitPosition += getFoodType().bitSizeOf(endBitPosition);
            break;
        case MULTIMEDIA:
            endBitPosition += getMultimediaResourceReference().bitSizeOf(endBitPosition);
            break;
        case PRIVATE_ACCESS:
            endBitPosition += getPrivateAccess().bitSizeOf(endBitPosition);
            break;
        case NATIONAL_IMPORTANCE:
            endBitPosition += getNationalImportance().bitSizeOf(endBitPosition);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            endBitPosition += getParkingFacilitiesSizeClass().bitSizeOf(endBitPosition);
            break;
        case PARKING_FACILITIES_SIZE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getParkingFacilitiesSize());
            break;
        case NUM_FREE_PARKING_SPOTS:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumFreeParkingSpots());
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            endBitPosition += getRestAreaServiceAvailability().bitSizeOf(endBitPosition);
            break;
        case ACCESSIBILITY_AIDS:
            endBitPosition += getAccessibilityAids().bitSizeOf(endBitPosition);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            endBitPosition += getRestaurantFacilitiesAvailable().bitSizeOf(endBitPosition);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            endBitPosition += getDepartureArrivalService().bitSizeOf(endBitPosition);
            break;
        case PRICE_RANGE:
            endBitPosition += getPriceRange().bitSizeOf(endBitPosition);
            break;
        case SHORT_DESCRIPTION:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getShortDescription());
            break;
        case LONG_DESCRIPTION:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPoiLongDescription());
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            endBitPosition += getAvailableSportiveActivities().bitSizeOf(endBitPosition);
            break;
        case FLOOR_NUMBER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt16(getFloorNumber());
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumberOfRoomsEnSuite());
            break;
        case PLACE_OF_WORSHIP_TYPE:
            endBitPosition += getPlaceOfWorshipType().bitSizeOf(endBitPosition);
            break;
        case SERVICE_FEE:
            endBitPosition += getServiceFee().bitSizeOf(endBitPosition);
            break;
        case CAR_DEALER_TYPE:
            endBitPosition += getCarDealerType().bitSizeOf(endBitPosition);
            break;
        case MAJOR_IMPORTANCE:
            endBitPosition += getMajorImportance().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            endBitPosition += getAirportServiceAvailability().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_MILITARY:
            endBitPosition += getAirportMilitary().bitSizeOf(endBitPosition);
            break;
        case TRANSIT_TYPE:
            endBitPosition += getTransitType().bitSizeOf(endBitPosition);
            break;
        case ACCESS_POINT_DETAILS:
            endBitPosition += getAccessPointDetails().bitSizeOf(endBitPosition);
            break;
        case PARK_AND_RIDE_FACILITY:
            endBitPosition += getParkAndRideFacility().bitSizeOf(endBitPosition);
            break;
        case ADBLUE_AVAILABILITY:
            endBitPosition += getAdBlueAvailability().bitSizeOf(endBitPosition);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            endBitPosition += getHydrogenPressureAvailability().bitSizeOf(endBitPosition);
            break;
        case AVAILABILITY_URL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUrl());
            break;
        case RELEVANCE_RADIUS:
            endBitPosition += 8;
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case OPEN_24_HRS:
            endBitPosition += getOpen24Hrs().bitSizeOf(endBitPosition);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            endBitPosition += getAcceptedPaymentMethods().bitSizeOf(zserioContext.getAcceptedPaymentMethods(), endBitPosition);
            break;
        case ACCESS_POINT_TYPE:
            endBitPosition += getAccessPointType().bitSizeOf(zserioContext.getAccessPointType(), endBitPosition);
            break;
        case AIRPORT_CODE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAirportCode());
            break;
        case BRAND_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBrandName());
            break;
        case EV_CHARGING_DETAILS:
            endBitPosition += getEvChargingStationDetails().bitSizeOf(zserioContext.getEvChargingStationDetails(), endBitPosition);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            endBitPosition += getAcceptedChargingPayment().bitSizeOf(zserioContext.getAcceptedChargingPayment(), endBitPosition);
            break;
        case EV_ENERGY_PROVIDER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEvEnergyProvider());
            break;
        case EV_FREE_CHARGING:
            endBitPosition += getEvFreeCharging().bitSizeOf(endBitPosition);
            break;
        case EV_FREE_PARKING:
            endBitPosition += getEvFreeParking().bitSizeOf(endBitPosition);
            break;
        case EV_CHARGING_AVAILABILITY:
            endBitPosition += getEvChargingAvailability().bitSizeOf(zserioContext.getEvChargingAvailability(), endBitPosition);
            break;
        case OPENING_HRS:
            endBitPosition += getOpeningHrs().bitSizeOf(endBitPosition);
            break;
        case EMAIL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEmail());
            break;
        case PHONE_NUMBER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPhoneNumber());
            break;
        case STAR_RATING:
            endBitPosition += getStars().bitSizeOf(zserioContext.getStars(), endBitPosition);
            break;
        case FUEL_TYPE:
            endBitPosition += getFuelType().bitSizeOf(zserioContext.getFuelType(), endBitPosition);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            endBitPosition += getLogicalAccessPointType().bitSizeOf(zserioContext.getLogicalAccessPointType(), endBitPosition);
            break;
        case WEBSITE:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWebsite());
            break;
        case IN_VICINITY:
            endBitPosition += getInVicinity().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            endBitPosition += getAirportEntranceType().bitSizeOf(zserioContext.getAirportEntranceType(), endBitPosition);
            break;
        case FOOD_TYPE:
            endBitPosition += getFoodType().bitSizeOf(zserioContext.getFoodType(), endBitPosition);
            break;
        case MULTIMEDIA:
            endBitPosition += getMultimediaResourceReference().bitSizeOf(endBitPosition);
            break;
        case PRIVATE_ACCESS:
            endBitPosition += getPrivateAccess().bitSizeOf(endBitPosition);
            break;
        case NATIONAL_IMPORTANCE:
            endBitPosition += getNationalImportance().bitSizeOf(endBitPosition);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            endBitPosition += getParkingFacilitiesSizeClass().bitSizeOf(zserioContext.getParkingFacilitiesSizeClass(), endBitPosition);
            break;
        case PARKING_FACILITIES_SIZE:
            endBitPosition += zserioContext.getParkingFacilitiesSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getParkingFacilitiesSize()));
            break;
        case NUM_FREE_PARKING_SPOTS:
            endBitPosition += zserioContext.getNumFreeParkingSpots().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumFreeParkingSpots()));
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            endBitPosition += getRestAreaServiceAvailability().bitSizeOf(zserioContext.getRestAreaServiceAvailability(), endBitPosition);
            break;
        case ACCESSIBILITY_AIDS:
            endBitPosition += getAccessibilityAids().bitSizeOf(zserioContext.getAccessibilityAids(), endBitPosition);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            endBitPosition += getRestaurantFacilitiesAvailable().bitSizeOf(endBitPosition);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            endBitPosition += getDepartureArrivalService().bitSizeOf(zserioContext.getDepartureArrivalService(), endBitPosition);
            break;
        case PRICE_RANGE:
            endBitPosition += getPriceRange().bitSizeOf(zserioContext.getPriceRange(), endBitPosition);
            break;
        case SHORT_DESCRIPTION:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getShortDescription());
            break;
        case LONG_DESCRIPTION:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPoiLongDescription());
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            endBitPosition += getAvailableSportiveActivities().bitSizeOf(zserioContext.getAvailableSportiveActivities(), endBitPosition);
            break;
        case FLOOR_NUMBER:
            endBitPosition += zserioContext.getFloorNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getFloorNumber()));
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            endBitPosition += zserioContext.getNumberOfRoomsEnSuite().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumberOfRoomsEnSuite()));
            break;
        case PLACE_OF_WORSHIP_TYPE:
            endBitPosition += getPlaceOfWorshipType().bitSizeOf(zserioContext.getPlaceOfWorshipType(), endBitPosition);
            break;
        case SERVICE_FEE:
            endBitPosition += getServiceFee().bitSizeOf(zserioContext.getServiceFee(), endBitPosition);
            break;
        case CAR_DEALER_TYPE:
            endBitPosition += getCarDealerType().bitSizeOf(zserioContext.getCarDealerType(), endBitPosition);
            break;
        case MAJOR_IMPORTANCE:
            endBitPosition += getMajorImportance().bitSizeOf(endBitPosition);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            endBitPosition += getAirportServiceAvailability().bitSizeOf(zserioContext.getAirportServiceAvailability(), endBitPosition);
            break;
        case AIRPORT_MILITARY:
            endBitPosition += getAirportMilitary().bitSizeOf(endBitPosition);
            break;
        case TRANSIT_TYPE:
            endBitPosition += getTransitType().bitSizeOf(zserioContext.getTransitType(), endBitPosition);
            break;
        case ACCESS_POINT_DETAILS:
            endBitPosition += getAccessPointDetails().bitSizeOf(zserioContext.getAccessPointDetails(), endBitPosition);
            break;
        case PARK_AND_RIDE_FACILITY:
            endBitPosition += getParkAndRideFacility().bitSizeOf(endBitPosition);
            break;
        case ADBLUE_AVAILABILITY:
            endBitPosition += getAdBlueAvailability().bitSizeOf(zserioContext.getAdBlueAvailability(), endBitPosition);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            endBitPosition += getHydrogenPressureAvailability().bitSizeOf(zserioContext.getHydrogenPressureAvailability(), endBitPosition);
            break;
        case AVAILABILITY_URL:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUrl());
            break;
        case RELEVANCE_RADIUS:
            endBitPosition += zserioContext.getRadius().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRadius()));
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.attributes.PoiAttributeType getType()
    {
        return this.type_;
    }

    public nds.core.types.Flag getOpen24Hrs()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setOpen24Hrs(nds.core.types.Flag open24Hrs_)
    {
        objectChoice = open24Hrs_;
    }

    public nds.poi.types.AcceptedPaymentMethods getAcceptedPaymentMethods()
    {
        return (nds.poi.types.AcceptedPaymentMethods)objectChoice;
    }

    public void setAcceptedPaymentMethods(nds.poi.types.AcceptedPaymentMethods acceptedPaymentMethods_)
    {
        objectChoice = acceptedPaymentMethods_;
    }

    public nds.poi.types.AccessPointType getAccessPointType()
    {
        return (nds.poi.types.AccessPointType)objectChoice;
    }

    public void setAccessPointType(nds.poi.types.AccessPointType accessPointType_)
    {
        objectChoice = accessPointType_;
    }

    public java.lang.String getAirportCode()
    {
        return (java.lang.String)objectChoice;
    }

    public void setAirportCode(java.lang.String airportCode_)
    {
        objectChoice = airportCode_;
    }

    public java.lang.String getBrandName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setBrandName(java.lang.String brandName_)
    {
        objectChoice = brandName_;
    }

    public nds.poi.types.EvChargingStationDetails getEvChargingStationDetails()
    {
        return (nds.poi.types.EvChargingStationDetails)objectChoice;
    }

    public void setEvChargingStationDetails(nds.poi.types.EvChargingStationDetails evChargingStationDetails_)
    {
        objectChoice = evChargingStationDetails_;
    }

    public nds.poi.types.AcceptedPaymentMethods getAcceptedChargingPayment()
    {
        return (nds.poi.types.AcceptedPaymentMethods)objectChoice;
    }

    public void setAcceptedChargingPayment(nds.poi.types.AcceptedPaymentMethods acceptedChargingPayment_)
    {
        objectChoice = acceptedChargingPayment_;
    }

    public java.lang.String getEvEnergyProvider()
    {
        return (java.lang.String)objectChoice;
    }

    public void setEvEnergyProvider(java.lang.String evEnergyProvider_)
    {
        objectChoice = evEnergyProvider_;
    }

    public nds.core.types.Flag getEvFreeCharging()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setEvFreeCharging(nds.core.types.Flag evFreeCharging_)
    {
        objectChoice = evFreeCharging_;
    }

    public nds.core.types.Flag getEvFreeParking()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setEvFreeParking(nds.core.types.Flag evFreeParking_)
    {
        objectChoice = evFreeParking_;
    }

    public nds.poi.types.EvChargingAvailability getEvChargingAvailability()
    {
        return (nds.poi.types.EvChargingAvailability)objectChoice;
    }

    public void setEvChargingAvailability(nds.poi.types.EvChargingAvailability evChargingAvailability_)
    {
        objectChoice = evChargingAvailability_;
    }

    public nds.core.types.Flag getOpeningHrs()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setOpeningHrs(nds.core.types.Flag openingHrs_)
    {
        objectChoice = openingHrs_;
    }

    public java.lang.String getEmail()
    {
        return (java.lang.String)objectChoice;
    }

    public void setEmail(java.lang.String email_)
    {
        objectChoice = email_;
    }

    public java.lang.String getPhoneNumber()
    {
        return (java.lang.String)objectChoice;
    }

    public void setPhoneNumber(java.lang.String phoneNumber_)
    {
        objectChoice = phoneNumber_;
    }

    public nds.poi.types.StarRating getStars()
    {
        return (nds.poi.types.StarRating)objectChoice;
    }

    public void setStars(nds.poi.types.StarRating stars_)
    {
        objectChoice = stars_;
    }

    public nds.core.vehicle.EnergyType getFuelType()
    {
        return (nds.core.vehicle.EnergyType)objectChoice;
    }

    public void setFuelType(nds.core.vehicle.EnergyType fuelType_)
    {
        objectChoice = fuelType_;
    }

    public nds.poi.types.LogicalAccessPointType getLogicalAccessPointType()
    {
        return (nds.poi.types.LogicalAccessPointType)objectChoice;
    }

    public void setLogicalAccessPointType(nds.poi.types.LogicalAccessPointType logicalAccessPointType_)
    {
        objectChoice = logicalAccessPointType_;
    }

    public java.lang.String getWebsite()
    {
        return (java.lang.String)objectChoice;
    }

    public void setWebsite(java.lang.String website_)
    {
        objectChoice = website_;
    }

    public nds.core.types.Flag getInVicinity()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setInVicinity(nds.core.types.Flag InVicinity_)
    {
        objectChoice = InVicinity_;
    }

    public nds.poi.types.AirportEntranceType getAirportEntranceType()
    {
        return (nds.poi.types.AirportEntranceType)objectChoice;
    }

    public void setAirportEntranceType(nds.poi.types.AirportEntranceType airportEntranceType_)
    {
        objectChoice = airportEntranceType_;
    }

    public nds.poi.types.FoodType getFoodType()
    {
        return (nds.poi.types.FoodType)objectChoice;
    }

    public void setFoodType(nds.poi.types.FoodType foodType_)
    {
        objectChoice = foodType_;
    }

    public nds.poi.types.MultimediaResourceReference getMultimediaResourceReference()
    {
        return (nds.poi.types.MultimediaResourceReference)objectChoice;
    }

    public void setMultimediaResourceReference(nds.poi.types.MultimediaResourceReference multimediaResourceReference_)
    {
        objectChoice = multimediaResourceReference_;
    }

    public nds.core.types.Flag getPrivateAccess()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setPrivateAccess(nds.core.types.Flag privateAccess_)
    {
        objectChoice = privateAccess_;
    }

    public nds.core.types.Flag getNationalImportance()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setNationalImportance(nds.core.types.Flag nationalImportance_)
    {
        objectChoice = nationalImportance_;
    }

    public nds.poi.types.ParkingFacilitiesSizeClass getParkingFacilitiesSizeClass()
    {
        return (nds.poi.types.ParkingFacilitiesSizeClass)objectChoice;
    }

    public void setParkingFacilitiesSizeClass(nds.poi.types.ParkingFacilitiesSizeClass parkingFacilitiesSizeClass_)
    {
        objectChoice = parkingFacilitiesSizeClass_;
    }

    public short getParkingFacilitiesSize()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setParkingFacilitiesSize(short parkingFacilitiesSize_)
    {
        objectChoice = parkingFacilitiesSize_;
    }

    public short getNumFreeParkingSpots()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumFreeParkingSpots(short numFreeParkingSpots_)
    {
        objectChoice = numFreeParkingSpots_;
    }

    public nds.poi.types.RestAreaServiceAvailability getRestAreaServiceAvailability()
    {
        return (nds.poi.types.RestAreaServiceAvailability)objectChoice;
    }

    public void setRestAreaServiceAvailability(nds.poi.types.RestAreaServiceAvailability restAreaServiceAvailability_)
    {
        objectChoice = restAreaServiceAvailability_;
    }

    public nds.poi.types.AccessibilityAids getAccessibilityAids()
    {
        return (nds.poi.types.AccessibilityAids)objectChoice;
    }

    public void setAccessibilityAids(nds.poi.types.AccessibilityAids accessibilityAids_)
    {
        objectChoice = accessibilityAids_;
    }

    public nds.core.types.Flag getRestaurantFacilitiesAvailable()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setRestaurantFacilitiesAvailable(nds.core.types.Flag restaurantFacilitiesAvailable_)
    {
        objectChoice = restaurantFacilitiesAvailable_;
    }

    public nds.poi.types.DepartureArrivalService getDepartureArrivalService()
    {
        return (nds.poi.types.DepartureArrivalService)objectChoice;
    }

    public void setDepartureArrivalService(nds.poi.types.DepartureArrivalService departureArrivalService_)
    {
        objectChoice = departureArrivalService_;
    }

    public nds.poi.types.PriceRange getPriceRange()
    {
        return (nds.poi.types.PriceRange)objectChoice;
    }

    public void setPriceRange(nds.poi.types.PriceRange priceRange_)
    {
        objectChoice = priceRange_;
    }

    public java.lang.String getShortDescription()
    {
        return (java.lang.String)objectChoice;
    }

    public void setShortDescription(java.lang.String shortDescription_)
    {
        objectChoice = shortDescription_;
    }

    public java.lang.String getPoiLongDescription()
    {
        return (java.lang.String)objectChoice;
    }

    public void setPoiLongDescription(java.lang.String poiLongDescription_)
    {
        objectChoice = poiLongDescription_;
    }

    public nds.poi.types.AvailableSportiveActivities getAvailableSportiveActivities()
    {
        return (nds.poi.types.AvailableSportiveActivities)objectChoice;
    }

    public void setAvailableSportiveActivities(nds.poi.types.AvailableSportiveActivities availableSportiveActivities_)
    {
        objectChoice = availableSportiveActivities_;
    }

    public short getFloorNumber()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setFloorNumber(short floorNumber_)
    {
        objectChoice = floorNumber_;
    }

    public short getNumberOfRoomsEnSuite()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumberOfRoomsEnSuite(short numberOfRoomsEnSuite_)
    {
        objectChoice = numberOfRoomsEnSuite_;
    }

    public nds.poi.types.PlaceOfWorshipType getPlaceOfWorshipType()
    {
        return (nds.poi.types.PlaceOfWorshipType)objectChoice;
    }

    public void setPlaceOfWorshipType(nds.poi.types.PlaceOfWorshipType placeOfWorshipType_)
    {
        objectChoice = placeOfWorshipType_;
    }

    public nds.core.types.MonetaryAmount getServiceFee()
    {
        return (nds.core.types.MonetaryAmount)objectChoice;
    }

    public void setServiceFee(nds.core.types.MonetaryAmount serviceFee_)
    {
        objectChoice = serviceFee_;
    }

    public nds.poi.types.CarDealerType getCarDealerType()
    {
        return (nds.poi.types.CarDealerType)objectChoice;
    }

    public void setCarDealerType(nds.poi.types.CarDealerType carDealerType_)
    {
        objectChoice = carDealerType_;
    }

    public nds.core.types.Flag getMajorImportance()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setMajorImportance(nds.core.types.Flag majorImportance_)
    {
        objectChoice = majorImportance_;
    }

    public nds.poi.types.AirportServiceAvailability getAirportServiceAvailability()
    {
        return (nds.poi.types.AirportServiceAvailability)objectChoice;
    }

    public void setAirportServiceAvailability(nds.poi.types.AirportServiceAvailability airportServiceAvailability_)
    {
        objectChoice = airportServiceAvailability_;
    }

    public nds.core.types.Flag getAirportMilitary()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setAirportMilitary(nds.core.types.Flag airportMilitary_)
    {
        objectChoice = airportMilitary_;
    }

    public nds.poi.types.TransitType getTransitType()
    {
        return (nds.poi.types.TransitType)objectChoice;
    }

    public void setTransitType(nds.poi.types.TransitType transitType_)
    {
        objectChoice = transitType_;
    }

    public nds.poi.types.AccessPointDetails getAccessPointDetails()
    {
        return (nds.poi.types.AccessPointDetails)objectChoice;
    }

    public void setAccessPointDetails(nds.poi.types.AccessPointDetails accessPointDetails_)
    {
        objectChoice = accessPointDetails_;
    }

    public nds.core.types.Flag getParkAndRideFacility()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setParkAndRideFacility(nds.core.types.Flag parkAndRideFacility_)
    {
        objectChoice = parkAndRideFacility_;
    }

    public nds.poi.types.AdBlueAvailability getAdBlueAvailability()
    {
        return (nds.poi.types.AdBlueAvailability)objectChoice;
    }

    public void setAdBlueAvailability(nds.poi.types.AdBlueAvailability adBlueAvailability_)
    {
        objectChoice = adBlueAvailability_;
    }

    public nds.poi.types.HydrogenPressureAvailability getHydrogenPressureAvailability()
    {
        return (nds.poi.types.HydrogenPressureAvailability)objectChoice;
    }

    public void setHydrogenPressureAvailability(nds.poi.types.HydrogenPressureAvailability hydrogenPressureAvailability_)
    {
        objectChoice = hydrogenPressureAvailability_;
    }

    public java.lang.String getUrl()
    {
        return (java.lang.String)objectChoice;
    }

    public void setUrl(java.lang.String url_)
    {
        objectChoice = url_;
    }

    public short getRadius()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setRadius(short radius_)
    {
        objectChoice = radius_;
    }

    public java.lang.String getGlobalSourceId()
    {
        return (java.lang.String)objectChoice;
    }

    public void setGlobalSourceId(java.lang.String globalSourceId_)
    {
        objectChoice = globalSourceId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoiAttributeValue)
        {
            final PoiAttributeValue that = (PoiAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case OPEN_24_HRS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ACCEPTED_PAYMENT_METHODS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AcceptedPaymentMethods)objectChoice);
                break;
            case ACCESS_POINT_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AccessPointType)objectChoice);
                break;
            case AIRPORT_CODE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case BRAND_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case EV_CHARGING_DETAILS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.EvChargingStationDetails)objectChoice);
                break;
            case EV_CHARGING_PAYMENT_METHODS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AcceptedPaymentMethods)objectChoice);
                break;
            case EV_ENERGY_PROVIDER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case EV_FREE_CHARGING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case EV_FREE_PARKING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case EV_CHARGING_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.EvChargingAvailability)objectChoice);
                break;
            case OPENING_HRS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case EMAIL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case PHONE_NUMBER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case STAR_RATING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.StarRating)objectChoice);
                break;
            case FUEL_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.vehicle.EnergyType)objectChoice);
                break;
            case LOGICAL_ACCESS_POINT_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.LogicalAccessPointType)objectChoice);
                break;
            case WEBSITE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case IN_VICINITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case AIRPORT_ENTRANCE_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AirportEntranceType)objectChoice);
                break;
            case FOOD_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.FoodType)objectChoice);
                break;
            case MULTIMEDIA:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.MultimediaResourceReference)objectChoice);
                break;
            case PRIVATE_ACCESS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case NATIONAL_IMPORTANCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PARKING_FACILITIES_SIZE_CLASS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.ParkingFacilitiesSizeClass)objectChoice);
                break;
            case PARKING_FACILITIES_SIZE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_FREE_PARKING_SPOTS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case REST_AREA_SERVICE_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.RestAreaServiceAvailability)objectChoice);
                break;
            case ACCESSIBILITY_AIDS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AccessibilityAids)objectChoice);
                break;
            case RESTAURANT_FACILITIES_AVAILABLE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case DEPARTURE_ARRIVAL_SERVICE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.DepartureArrivalService)objectChoice);
                break;
            case PRICE_RANGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.PriceRange)objectChoice);
                break;
            case SHORT_DESCRIPTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case LONG_DESCRIPTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case AVAILABLE_SPORTIVE_ACTIVITIES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AvailableSportiveActivities)objectChoice);
                break;
            case FLOOR_NUMBER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUMBER_OF_ROOMS_EN_SUITE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case PLACE_OF_WORSHIP_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.PlaceOfWorshipType)objectChoice);
                break;
            case SERVICE_FEE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.MonetaryAmount)objectChoice);
                break;
            case CAR_DEALER_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.CarDealerType)objectChoice);
                break;
            case MAJOR_IMPORTANCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case AIRPORT_SERVICE_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AirportServiceAvailability)objectChoice);
                break;
            case AIRPORT_MILITARY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case TRANSIT_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.TransitType)objectChoice);
                break;
            case ACCESS_POINT_DETAILS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AccessPointDetails)objectChoice);
                break;
            case PARK_AND_RIDE_FACILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ADBLUE_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.AdBlueAvailability)objectChoice);
                break;
            case HYDROGEN_PRESSURE_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.poi.types.HydrogenPressureAvailability)objectChoice);
                break;
            case AVAILABILITY_URL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case RELEVANCE_RADIUS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case GLOBAL_SOURCE_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case OPEN_24_HRS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            objectChoice = new nds.poi.types.AcceptedPaymentMethods(in);
            break;
        case ACCESS_POINT_TYPE:
            objectChoice = nds.poi.types.AccessPointType.readEnum(in);
            break;
        case AIRPORT_CODE:
            objectChoice = in.readString();
            break;
        case BRAND_NAME:
            objectChoice = in.readString();
            break;
        case EV_CHARGING_DETAILS:
            objectChoice = new nds.poi.types.EvChargingStationDetails(in);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            objectChoice = new nds.poi.types.AcceptedPaymentMethods(in);
            break;
        case EV_ENERGY_PROVIDER:
            objectChoice = in.readString();
            break;
        case EV_FREE_CHARGING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EV_FREE_PARKING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EV_CHARGING_AVAILABILITY:
            objectChoice = new nds.poi.types.EvChargingAvailability(in);
            break;
        case OPENING_HRS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EMAIL:
            objectChoice = in.readString();
            break;
        case PHONE_NUMBER:
            objectChoice = in.readString();
            break;
        case STAR_RATING:
            objectChoice = nds.poi.types.StarRating.readEnum(in);
            break;
        case FUEL_TYPE:
            objectChoice = new nds.core.vehicle.EnergyType(in);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            objectChoice = nds.poi.types.LogicalAccessPointType.readEnum(in);
            break;
        case WEBSITE:
            objectChoice = in.readString();
            break;
        case IN_VICINITY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            objectChoice = nds.poi.types.AirportEntranceType.readEnum(in);
            break;
        case FOOD_TYPE:
            objectChoice = new nds.poi.types.FoodType(in);
            break;
        case MULTIMEDIA:
            objectChoice = new nds.poi.types.MultimediaResourceReference(in);
            break;
        case PRIVATE_ACCESS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case NATIONAL_IMPORTANCE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            objectChoice = nds.poi.types.ParkingFacilitiesSizeClass.readEnum(in);
            break;
        case PARKING_FACILITIES_SIZE:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_FREE_PARKING_SPOTS:
            objectChoice = in.readVarUInt16();
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            objectChoice = new nds.poi.types.RestAreaServiceAvailability(in);
            break;
        case ACCESSIBILITY_AIDS:
            objectChoice = new nds.poi.types.AccessibilityAids(in);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            objectChoice = nds.poi.types.DepartureArrivalService.readEnum(in);
            break;
        case PRICE_RANGE:
            objectChoice = nds.poi.types.PriceRange.readEnum(in);
            break;
        case SHORT_DESCRIPTION:
            objectChoice = in.readString();
            break;
        case LONG_DESCRIPTION:
            objectChoice = in.readString();
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            objectChoice = new nds.poi.types.AvailableSportiveActivities(in);
            break;
        case FLOOR_NUMBER:
            objectChoice = in.readVarInt16();
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            objectChoice = in.readVarUInt16();
            break;
        case PLACE_OF_WORSHIP_TYPE:
            objectChoice = nds.poi.types.PlaceOfWorshipType.readEnum(in);
            break;
        case SERVICE_FEE:
            objectChoice = new nds.core.types.MonetaryAmount(in);
            break;
        case CAR_DEALER_TYPE:
            objectChoice = nds.poi.types.CarDealerType.readEnum(in);
            break;
        case MAJOR_IMPORTANCE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            objectChoice = new nds.poi.types.AirportServiceAvailability(in);
            break;
        case AIRPORT_MILITARY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TRANSIT_TYPE:
            objectChoice = nds.poi.types.TransitType.readEnum(in);
            break;
        case ACCESS_POINT_DETAILS:
            objectChoice = new nds.poi.types.AccessPointDetails(in);
            break;
        case PARK_AND_RIDE_FACILITY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADBLUE_AVAILABILITY:
            objectChoice = new nds.poi.types.AdBlueAvailability(in);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            objectChoice = nds.poi.types.HydrogenPressureAvailability.readEnum(in);
            break;
        case AVAILABILITY_URL:
            objectChoice = in.readString();
            break;
        case RELEVANCE_RADIUS:
            objectChoice = in.readUnsignedByte();
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case OPEN_24_HRS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            objectChoice = new nds.poi.types.AcceptedPaymentMethods(zserioContext.getAcceptedPaymentMethods(), in);
            break;
        case ACCESS_POINT_TYPE:
            objectChoice = nds.poi.types.AccessPointType.readEnum(zserioContext.getAccessPointType(), in);
            break;
        case AIRPORT_CODE:
            objectChoice = in.readString();
            break;
        case BRAND_NAME:
            objectChoice = in.readString();
            break;
        case EV_CHARGING_DETAILS:
            objectChoice = new nds.poi.types.EvChargingStationDetails(zserioContext.getEvChargingStationDetails(), in);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            objectChoice = new nds.poi.types.AcceptedPaymentMethods(zserioContext.getAcceptedChargingPayment(), in);
            break;
        case EV_ENERGY_PROVIDER:
            objectChoice = in.readString();
            break;
        case EV_FREE_CHARGING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EV_FREE_PARKING:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EV_CHARGING_AVAILABILITY:
            objectChoice = new nds.poi.types.EvChargingAvailability(zserioContext.getEvChargingAvailability(), in);
            break;
        case OPENING_HRS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case EMAIL:
            objectChoice = in.readString();
            break;
        case PHONE_NUMBER:
            objectChoice = in.readString();
            break;
        case STAR_RATING:
            objectChoice = nds.poi.types.StarRating.readEnum(zserioContext.getStars(), in);
            break;
        case FUEL_TYPE:
            objectChoice = new nds.core.vehicle.EnergyType(zserioContext.getFuelType(), in);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            objectChoice = nds.poi.types.LogicalAccessPointType.readEnum(zserioContext.getLogicalAccessPointType(), in);
            break;
        case WEBSITE:
            objectChoice = in.readString();
            break;
        case IN_VICINITY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            objectChoice = nds.poi.types.AirportEntranceType.readEnum(zserioContext.getAirportEntranceType(), in);
            break;
        case FOOD_TYPE:
            objectChoice = new nds.poi.types.FoodType(zserioContext.getFoodType(), in);
            break;
        case MULTIMEDIA:
            objectChoice = new nds.poi.types.MultimediaResourceReference(in);
            break;
        case PRIVATE_ACCESS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case NATIONAL_IMPORTANCE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            objectChoice = nds.poi.types.ParkingFacilitiesSizeClass.readEnum(zserioContext.getParkingFacilitiesSizeClass(), in);
            break;
        case PARKING_FACILITIES_SIZE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getParkingFacilitiesSize().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_FREE_PARKING_SPOTS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumFreeParkingSpots().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            objectChoice = new nds.poi.types.RestAreaServiceAvailability(zserioContext.getRestAreaServiceAvailability(), in);
            break;
        case ACCESSIBILITY_AIDS:
            objectChoice = new nds.poi.types.AccessibilityAids(zserioContext.getAccessibilityAids(), in);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            objectChoice = nds.poi.types.DepartureArrivalService.readEnum(zserioContext.getDepartureArrivalService(), in);
            break;
        case PRICE_RANGE:
            objectChoice = nds.poi.types.PriceRange.readEnum(zserioContext.getPriceRange(), in);
            break;
        case SHORT_DESCRIPTION:
            objectChoice = in.readString();
            break;
        case LONG_DESCRIPTION:
            objectChoice = in.readString();
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            objectChoice = new nds.poi.types.AvailableSportiveActivities(zserioContext.getAvailableSportiveActivities(), in);
            break;
        case FLOOR_NUMBER:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getFloorNumber().read(new zserio.runtime.array.ArrayTraits.VarInt16ArrayTraits(), in)).get();
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumberOfRoomsEnSuite().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case PLACE_OF_WORSHIP_TYPE:
            objectChoice = nds.poi.types.PlaceOfWorshipType.readEnum(zserioContext.getPlaceOfWorshipType(), in);
            break;
        case SERVICE_FEE:
            objectChoice = new nds.core.types.MonetaryAmount(zserioContext.getServiceFee(), in);
            break;
        case CAR_DEALER_TYPE:
            objectChoice = nds.poi.types.CarDealerType.readEnum(zserioContext.getCarDealerType(), in);
            break;
        case MAJOR_IMPORTANCE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            objectChoice = new nds.poi.types.AirportServiceAvailability(zserioContext.getAirportServiceAvailability(), in);
            break;
        case AIRPORT_MILITARY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case TRANSIT_TYPE:
            objectChoice = nds.poi.types.TransitType.readEnum(zserioContext.getTransitType(), in);
            break;
        case ACCESS_POINT_DETAILS:
            objectChoice = new nds.poi.types.AccessPointDetails(zserioContext.getAccessPointDetails(), in);
            break;
        case PARK_AND_RIDE_FACILITY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ADBLUE_AVAILABILITY:
            objectChoice = new nds.poi.types.AdBlueAvailability(zserioContext.getAdBlueAvailability(), in);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            objectChoice = nds.poi.types.HydrogenPressureAvailability.readEnum(zserioContext.getHydrogenPressureAvailability(), in);
            break;
        case AVAILABILITY_URL:
            objectChoice = in.readString();
            break;
        case RELEVANCE_RADIUS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getRadius().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case OPEN_24_HRS:
            {
                endBitPosition = getOpen24Hrs().initializeOffsets(endBitPosition);
            }
            break;
        case ACCEPTED_PAYMENT_METHODS:
            {
                endBitPosition = getAcceptedPaymentMethods().initializeOffsets(endBitPosition);
            }
            break;
        case ACCESS_POINT_TYPE:
            {
                endBitPosition += getAccessPointType().bitSizeOf(endBitPosition);
            }
            break;
        case AIRPORT_CODE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAirportCode());
            }
            break;
        case BRAND_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBrandName());
            }
            break;
        case EV_CHARGING_DETAILS:
            {
                endBitPosition = getEvChargingStationDetails().initializeOffsets(endBitPosition);
            }
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            {
                endBitPosition = getAcceptedChargingPayment().initializeOffsets(endBitPosition);
            }
            break;
        case EV_ENERGY_PROVIDER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEvEnergyProvider());
            }
            break;
        case EV_FREE_CHARGING:
            {
                endBitPosition = getEvFreeCharging().initializeOffsets(endBitPosition);
            }
            break;
        case EV_FREE_PARKING:
            {
                endBitPosition = getEvFreeParking().initializeOffsets(endBitPosition);
            }
            break;
        case EV_CHARGING_AVAILABILITY:
            {
                endBitPosition = getEvChargingAvailability().initializeOffsets(endBitPosition);
            }
            break;
        case OPENING_HRS:
            {
                endBitPosition = getOpeningHrs().initializeOffsets(endBitPosition);
            }
            break;
        case EMAIL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEmail());
            }
            break;
        case PHONE_NUMBER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPhoneNumber());
            }
            break;
        case STAR_RATING:
            {
                endBitPosition += getStars().bitSizeOf(endBitPosition);
            }
            break;
        case FUEL_TYPE:
            {
                endBitPosition += getFuelType().bitSizeOf(endBitPosition);
            }
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            {
                endBitPosition += getLogicalAccessPointType().bitSizeOf(endBitPosition);
            }
            break;
        case WEBSITE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWebsite());
            }
            break;
        case IN_VICINITY:
            {
                endBitPosition = getInVicinity().initializeOffsets(endBitPosition);
            }
            break;
        case AIRPORT_ENTRANCE_TYPE:
            {
                endBitPosition += getAirportEntranceType().bitSizeOf(endBitPosition);
            }
            break;
        case FOOD_TYPE:
            {
                endBitPosition = getFoodType().initializeOffsets(endBitPosition);
            }
            break;
        case MULTIMEDIA:
            {
                endBitPosition = getMultimediaResourceReference().initializeOffsets(endBitPosition);
            }
            break;
        case PRIVATE_ACCESS:
            {
                endBitPosition = getPrivateAccess().initializeOffsets(endBitPosition);
            }
            break;
        case NATIONAL_IMPORTANCE:
            {
                endBitPosition = getNationalImportance().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            {
                endBitPosition += getParkingFacilitiesSizeClass().bitSizeOf(endBitPosition);
            }
            break;
        case PARKING_FACILITIES_SIZE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getParkingFacilitiesSize());
            }
            break;
        case NUM_FREE_PARKING_SPOTS:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumFreeParkingSpots());
            }
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            {
                endBitPosition += getRestAreaServiceAvailability().bitSizeOf(endBitPosition);
            }
            break;
        case ACCESSIBILITY_AIDS:
            {
                endBitPosition += getAccessibilityAids().bitSizeOf(endBitPosition);
            }
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            {
                endBitPosition = getRestaurantFacilitiesAvailable().initializeOffsets(endBitPosition);
            }
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            {
                endBitPosition += getDepartureArrivalService().bitSizeOf(endBitPosition);
            }
            break;
        case PRICE_RANGE:
            {
                endBitPosition += getPriceRange().bitSizeOf(endBitPosition);
            }
            break;
        case SHORT_DESCRIPTION:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getShortDescription());
            }
            break;
        case LONG_DESCRIPTION:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPoiLongDescription());
            }
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            {
                endBitPosition = getAvailableSportiveActivities().initializeOffsets(endBitPosition);
            }
            break;
        case FLOOR_NUMBER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt16(getFloorNumber());
            }
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumberOfRoomsEnSuite());
            }
            break;
        case PLACE_OF_WORSHIP_TYPE:
            {
                endBitPosition += getPlaceOfWorshipType().bitSizeOf(endBitPosition);
            }
            break;
        case SERVICE_FEE:
            {
                endBitPosition = getServiceFee().initializeOffsets(endBitPosition);
            }
            break;
        case CAR_DEALER_TYPE:
            {
                endBitPosition += getCarDealerType().bitSizeOf(endBitPosition);
            }
            break;
        case MAJOR_IMPORTANCE:
            {
                endBitPosition = getMajorImportance().initializeOffsets(endBitPosition);
            }
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            {
                endBitPosition += getAirportServiceAvailability().bitSizeOf(endBitPosition);
            }
            break;
        case AIRPORT_MILITARY:
            {
                endBitPosition = getAirportMilitary().initializeOffsets(endBitPosition);
            }
            break;
        case TRANSIT_TYPE:
            {
                endBitPosition += getTransitType().bitSizeOf(endBitPosition);
            }
            break;
        case ACCESS_POINT_DETAILS:
            {
                endBitPosition = getAccessPointDetails().initializeOffsets(endBitPosition);
            }
            break;
        case PARK_AND_RIDE_FACILITY:
            {
                endBitPosition = getParkAndRideFacility().initializeOffsets(endBitPosition);
            }
            break;
        case ADBLUE_AVAILABILITY:
            {
                endBitPosition += getAdBlueAvailability().bitSizeOf(endBitPosition);
            }
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            {
                endBitPosition += getHydrogenPressureAvailability().bitSizeOf(endBitPosition);
            }
            break;
        case AVAILABILITY_URL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUrl());
            }
            break;
        case RELEVANCE_RADIUS:
            {
                endBitPosition += 8;
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case OPEN_24_HRS:
            {
                endBitPosition = getOpen24Hrs().initializeOffsets(endBitPosition);
            }
            break;
        case ACCEPTED_PAYMENT_METHODS:
            {
                endBitPosition = getAcceptedPaymentMethods().initializeOffsets(zserioContext.getAcceptedPaymentMethods(), endBitPosition);
            }
            break;
        case ACCESS_POINT_TYPE:
            {
                endBitPosition = getAccessPointType().initializeOffsets(zserioContext.getAccessPointType(), endBitPosition);
            }
            break;
        case AIRPORT_CODE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getAirportCode());
            }
            break;
        case BRAND_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getBrandName());
            }
            break;
        case EV_CHARGING_DETAILS:
            {
                endBitPosition = getEvChargingStationDetails().initializeOffsets(zserioContext.getEvChargingStationDetails(), endBitPosition);
            }
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            {
                endBitPosition = getAcceptedChargingPayment().initializeOffsets(zserioContext.getAcceptedChargingPayment(), endBitPosition);
            }
            break;
        case EV_ENERGY_PROVIDER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEvEnergyProvider());
            }
            break;
        case EV_FREE_CHARGING:
            {
                endBitPosition = getEvFreeCharging().initializeOffsets(endBitPosition);
            }
            break;
        case EV_FREE_PARKING:
            {
                endBitPosition = getEvFreeParking().initializeOffsets(endBitPosition);
            }
            break;
        case EV_CHARGING_AVAILABILITY:
            {
                endBitPosition = getEvChargingAvailability().initializeOffsets(zserioContext.getEvChargingAvailability(), endBitPosition);
            }
            break;
        case OPENING_HRS:
            {
                endBitPosition = getOpeningHrs().initializeOffsets(endBitPosition);
            }
            break;
        case EMAIL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getEmail());
            }
            break;
        case PHONE_NUMBER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPhoneNumber());
            }
            break;
        case STAR_RATING:
            {
                endBitPosition = getStars().initializeOffsets(zserioContext.getStars(), endBitPosition);
            }
            break;
        case FUEL_TYPE:
            {
                endBitPosition = getFuelType().initializeOffsets(zserioContext.getFuelType(), endBitPosition);
            }
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            {
                endBitPosition = getLogicalAccessPointType().initializeOffsets(zserioContext.getLogicalAccessPointType(), endBitPosition);
            }
            break;
        case WEBSITE:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getWebsite());
            }
            break;
        case IN_VICINITY:
            {
                endBitPosition = getInVicinity().initializeOffsets(endBitPosition);
            }
            break;
        case AIRPORT_ENTRANCE_TYPE:
            {
                endBitPosition = getAirportEntranceType().initializeOffsets(zserioContext.getAirportEntranceType(), endBitPosition);
            }
            break;
        case FOOD_TYPE:
            {
                endBitPosition = getFoodType().initializeOffsets(zserioContext.getFoodType(), endBitPosition);
            }
            break;
        case MULTIMEDIA:
            {
                endBitPosition = getMultimediaResourceReference().initializeOffsets(endBitPosition);
            }
            break;
        case PRIVATE_ACCESS:
            {
                endBitPosition = getPrivateAccess().initializeOffsets(endBitPosition);
            }
            break;
        case NATIONAL_IMPORTANCE:
            {
                endBitPosition = getNationalImportance().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            {
                endBitPosition = getParkingFacilitiesSizeClass().initializeOffsets(zserioContext.getParkingFacilitiesSizeClass(), endBitPosition);
            }
            break;
        case PARKING_FACILITIES_SIZE:
            {
                endBitPosition += zserioContext.getParkingFacilitiesSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getParkingFacilitiesSize()));
            }
            break;
        case NUM_FREE_PARKING_SPOTS:
            {
                endBitPosition += zserioContext.getNumFreeParkingSpots().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumFreeParkingSpots()));
            }
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            {
                endBitPosition = getRestAreaServiceAvailability().initializeOffsets(zserioContext.getRestAreaServiceAvailability(), endBitPosition);
            }
            break;
        case ACCESSIBILITY_AIDS:
            {
                endBitPosition = getAccessibilityAids().initializeOffsets(zserioContext.getAccessibilityAids(), endBitPosition);
            }
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            {
                endBitPosition = getRestaurantFacilitiesAvailable().initializeOffsets(endBitPosition);
            }
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            {
                endBitPosition = getDepartureArrivalService().initializeOffsets(zserioContext.getDepartureArrivalService(), endBitPosition);
            }
            break;
        case PRICE_RANGE:
            {
                endBitPosition = getPriceRange().initializeOffsets(zserioContext.getPriceRange(), endBitPosition);
            }
            break;
        case SHORT_DESCRIPTION:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getShortDescription());
            }
            break;
        case LONG_DESCRIPTION:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getPoiLongDescription());
            }
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            {
                endBitPosition = getAvailableSportiveActivities().initializeOffsets(zserioContext.getAvailableSportiveActivities(), endBitPosition);
            }
            break;
        case FLOOR_NUMBER:
            {
                endBitPosition += zserioContext.getFloorNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getFloorNumber()));
            }
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            {
                endBitPosition += zserioContext.getNumberOfRoomsEnSuite().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumberOfRoomsEnSuite()));
            }
            break;
        case PLACE_OF_WORSHIP_TYPE:
            {
                endBitPosition = getPlaceOfWorshipType().initializeOffsets(zserioContext.getPlaceOfWorshipType(), endBitPosition);
            }
            break;
        case SERVICE_FEE:
            {
                endBitPosition = getServiceFee().initializeOffsets(zserioContext.getServiceFee(), endBitPosition);
            }
            break;
        case CAR_DEALER_TYPE:
            {
                endBitPosition = getCarDealerType().initializeOffsets(zserioContext.getCarDealerType(), endBitPosition);
            }
            break;
        case MAJOR_IMPORTANCE:
            {
                endBitPosition = getMajorImportance().initializeOffsets(endBitPosition);
            }
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            {
                endBitPosition = getAirportServiceAvailability().initializeOffsets(zserioContext.getAirportServiceAvailability(), endBitPosition);
            }
            break;
        case AIRPORT_MILITARY:
            {
                endBitPosition = getAirportMilitary().initializeOffsets(endBitPosition);
            }
            break;
        case TRANSIT_TYPE:
            {
                endBitPosition = getTransitType().initializeOffsets(zserioContext.getTransitType(), endBitPosition);
            }
            break;
        case ACCESS_POINT_DETAILS:
            {
                endBitPosition = getAccessPointDetails().initializeOffsets(zserioContext.getAccessPointDetails(), endBitPosition);
            }
            break;
        case PARK_AND_RIDE_FACILITY:
            {
                endBitPosition = getParkAndRideFacility().initializeOffsets(endBitPosition);
            }
            break;
        case ADBLUE_AVAILABILITY:
            {
                endBitPosition = getAdBlueAvailability().initializeOffsets(zserioContext.getAdBlueAvailability(), endBitPosition);
            }
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            {
                endBitPosition = getHydrogenPressureAvailability().initializeOffsets(zserioContext.getHydrogenPressureAvailability(), endBitPosition);
            }
            break;
        case AVAILABILITY_URL:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getUrl());
            }
            break;
        case RELEVANCE_RADIUS:
            {
                endBitPosition += zserioContext.getRadius().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getRadius()));
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case OPEN_24_HRS:
            getOpen24Hrs().write(out);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            getAcceptedPaymentMethods().write(out);
            break;
        case ACCESS_POINT_TYPE:
            getAccessPointType().write(out);
            break;
        case AIRPORT_CODE:
            out.writeString(getAirportCode());
            break;
        case BRAND_NAME:
            out.writeString(getBrandName());
            break;
        case EV_CHARGING_DETAILS:
            getEvChargingStationDetails().write(out);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            getAcceptedChargingPayment().write(out);
            break;
        case EV_ENERGY_PROVIDER:
            out.writeString(getEvEnergyProvider());
            break;
        case EV_FREE_CHARGING:
            getEvFreeCharging().write(out);
            break;
        case EV_FREE_PARKING:
            getEvFreeParking().write(out);
            break;
        case EV_CHARGING_AVAILABILITY:
            getEvChargingAvailability().write(out);
            break;
        case OPENING_HRS:
            getOpeningHrs().write(out);
            break;
        case EMAIL:
            out.writeString(getEmail());
            break;
        case PHONE_NUMBER:
            out.writeString(getPhoneNumber());
            break;
        case STAR_RATING:
            getStars().write(out);
            break;
        case FUEL_TYPE:
            getFuelType().write(out);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            getLogicalAccessPointType().write(out);
            break;
        case WEBSITE:
            out.writeString(getWebsite());
            break;
        case IN_VICINITY:
            getInVicinity().write(out);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            getAirportEntranceType().write(out);
            break;
        case FOOD_TYPE:
            getFoodType().write(out);
            break;
        case MULTIMEDIA:
            getMultimediaResourceReference().write(out);
            break;
        case PRIVATE_ACCESS:
            getPrivateAccess().write(out);
            break;
        case NATIONAL_IMPORTANCE:
            getNationalImportance().write(out);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            getParkingFacilitiesSizeClass().write(out);
            break;
        case PARKING_FACILITIES_SIZE:
            out.writeVarUInt16(getParkingFacilitiesSize());
            break;
        case NUM_FREE_PARKING_SPOTS:
            out.writeVarUInt16(getNumFreeParkingSpots());
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            getRestAreaServiceAvailability().write(out);
            break;
        case ACCESSIBILITY_AIDS:
            getAccessibilityAids().write(out);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            getRestaurantFacilitiesAvailable().write(out);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            getDepartureArrivalService().write(out);
            break;
        case PRICE_RANGE:
            getPriceRange().write(out);
            break;
        case SHORT_DESCRIPTION:
            out.writeString(getShortDescription());
            break;
        case LONG_DESCRIPTION:
            out.writeString(getPoiLongDescription());
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            getAvailableSportiveActivities().write(out);
            break;
        case FLOOR_NUMBER:
            out.writeVarInt16(getFloorNumber());
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            out.writeVarUInt16(getNumberOfRoomsEnSuite());
            break;
        case PLACE_OF_WORSHIP_TYPE:
            getPlaceOfWorshipType().write(out);
            break;
        case SERVICE_FEE:
            getServiceFee().write(out);
            break;
        case CAR_DEALER_TYPE:
            getCarDealerType().write(out);
            break;
        case MAJOR_IMPORTANCE:
            getMajorImportance().write(out);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            getAirportServiceAvailability().write(out);
            break;
        case AIRPORT_MILITARY:
            getAirportMilitary().write(out);
            break;
        case TRANSIT_TYPE:
            getTransitType().write(out);
            break;
        case ACCESS_POINT_DETAILS:
            getAccessPointDetails().write(out);
            break;
        case PARK_AND_RIDE_FACILITY:
            getParkAndRideFacility().write(out);
            break;
        case ADBLUE_AVAILABILITY:
            getAdBlueAvailability().write(out);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            getHydrogenPressureAvailability().write(out);
            break;
        case AVAILABILITY_URL:
            out.writeString(getUrl());
            break;
        case RELEVANCE_RADIUS:
            out.writeUnsignedByte(getRadius());
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case OPEN_24_HRS:
            getOpen24Hrs().write(out);
            break;
        case ACCEPTED_PAYMENT_METHODS:
            getAcceptedPaymentMethods().write(zserioContext.getAcceptedPaymentMethods(), out);
            break;
        case ACCESS_POINT_TYPE:
            getAccessPointType().write(zserioContext.getAccessPointType(), out);
            break;
        case AIRPORT_CODE:
            out.writeString(getAirportCode());
            break;
        case BRAND_NAME:
            out.writeString(getBrandName());
            break;
        case EV_CHARGING_DETAILS:
            getEvChargingStationDetails().write(zserioContext.getEvChargingStationDetails(), out);
            break;
        case EV_CHARGING_PAYMENT_METHODS:
            getAcceptedChargingPayment().write(zserioContext.getAcceptedChargingPayment(), out);
            break;
        case EV_ENERGY_PROVIDER:
            out.writeString(getEvEnergyProvider());
            break;
        case EV_FREE_CHARGING:
            getEvFreeCharging().write(out);
            break;
        case EV_FREE_PARKING:
            getEvFreeParking().write(out);
            break;
        case EV_CHARGING_AVAILABILITY:
            getEvChargingAvailability().write(zserioContext.getEvChargingAvailability(), out);
            break;
        case OPENING_HRS:
            getOpeningHrs().write(out);
            break;
        case EMAIL:
            out.writeString(getEmail());
            break;
        case PHONE_NUMBER:
            out.writeString(getPhoneNumber());
            break;
        case STAR_RATING:
            getStars().write(zserioContext.getStars(), out);
            break;
        case FUEL_TYPE:
            getFuelType().write(zserioContext.getFuelType(), out);
            break;
        case LOGICAL_ACCESS_POINT_TYPE:
            getLogicalAccessPointType().write(zserioContext.getLogicalAccessPointType(), out);
            break;
        case WEBSITE:
            out.writeString(getWebsite());
            break;
        case IN_VICINITY:
            getInVicinity().write(out);
            break;
        case AIRPORT_ENTRANCE_TYPE:
            getAirportEntranceType().write(zserioContext.getAirportEntranceType(), out);
            break;
        case FOOD_TYPE:
            getFoodType().write(zserioContext.getFoodType(), out);
            break;
        case MULTIMEDIA:
            getMultimediaResourceReference().write(out);
            break;
        case PRIVATE_ACCESS:
            getPrivateAccess().write(out);
            break;
        case NATIONAL_IMPORTANCE:
            getNationalImportance().write(out);
            break;
        case PARKING_FACILITIES_SIZE_CLASS:
            getParkingFacilitiesSizeClass().write(zserioContext.getParkingFacilitiesSizeClass(), out);
            break;
        case PARKING_FACILITIES_SIZE:
            zserioContext.getParkingFacilitiesSize().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getParkingFacilitiesSize()));
            break;
        case NUM_FREE_PARKING_SPOTS:
            zserioContext.getNumFreeParkingSpots().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumFreeParkingSpots()));
            break;
        case REST_AREA_SERVICE_AVAILABILITY:
            getRestAreaServiceAvailability().write(zserioContext.getRestAreaServiceAvailability(), out);
            break;
        case ACCESSIBILITY_AIDS:
            getAccessibilityAids().write(zserioContext.getAccessibilityAids(), out);
            break;
        case RESTAURANT_FACILITIES_AVAILABLE:
            getRestaurantFacilitiesAvailable().write(out);
            break;
        case DEPARTURE_ARRIVAL_SERVICE:
            getDepartureArrivalService().write(zserioContext.getDepartureArrivalService(), out);
            break;
        case PRICE_RANGE:
            getPriceRange().write(zserioContext.getPriceRange(), out);
            break;
        case SHORT_DESCRIPTION:
            out.writeString(getShortDescription());
            break;
        case LONG_DESCRIPTION:
            out.writeString(getPoiLongDescription());
            break;
        case AVAILABLE_SPORTIVE_ACTIVITIES:
            getAvailableSportiveActivities().write(zserioContext.getAvailableSportiveActivities(), out);
            break;
        case FLOOR_NUMBER:
            zserioContext.getFloorNumber().write(new zserio.runtime.array.ArrayTraits.VarInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getFloorNumber()));
            break;
        case NUMBER_OF_ROOMS_EN_SUITE:
            zserioContext.getNumberOfRoomsEnSuite().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumberOfRoomsEnSuite()));
            break;
        case PLACE_OF_WORSHIP_TYPE:
            getPlaceOfWorshipType().write(zserioContext.getPlaceOfWorshipType(), out);
            break;
        case SERVICE_FEE:
            getServiceFee().write(zserioContext.getServiceFee(), out);
            break;
        case CAR_DEALER_TYPE:
            getCarDealerType().write(zserioContext.getCarDealerType(), out);
            break;
        case MAJOR_IMPORTANCE:
            getMajorImportance().write(out);
            break;
        case AIRPORT_SERVICE_AVAILABILITY:
            getAirportServiceAvailability().write(zserioContext.getAirportServiceAvailability(), out);
            break;
        case AIRPORT_MILITARY:
            getAirportMilitary().write(out);
            break;
        case TRANSIT_TYPE:
            getTransitType().write(zserioContext.getTransitType(), out);
            break;
        case ACCESS_POINT_DETAILS:
            getAccessPointDetails().write(zserioContext.getAccessPointDetails(), out);
            break;
        case PARK_AND_RIDE_FACILITY:
            getParkAndRideFacility().write(out);
            break;
        case ADBLUE_AVAILABILITY:
            getAdBlueAvailability().write(zserioContext.getAdBlueAvailability(), out);
            break;
        case HYDROGEN_PRESSURE_AVAILABILITY:
            getHydrogenPressureAvailability().write(zserioContext.getHydrogenPressureAvailability(), out);
            break;
        case AVAILABILITY_URL:
            out.writeString(getUrl());
            break;
        case RELEVANCE_RADIUS:
            zserioContext.getRadius().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getRadius()));
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PoiAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_open24Hrs = 0;
    public static final int CHOICE_acceptedPaymentMethods = 1;
    public static final int CHOICE_accessPointType = 2;
    public static final int CHOICE_airportCode = 3;
    public static final int CHOICE_brandName = 4;
    public static final int CHOICE_evChargingStationDetails = 5;
    public static final int CHOICE_acceptedChargingPayment = 6;
    public static final int CHOICE_evEnergyProvider = 7;
    public static final int CHOICE_evFreeCharging = 8;
    public static final int CHOICE_evFreeParking = 9;
    public static final int CHOICE_evChargingAvailability = 10;
    public static final int CHOICE_openingHrs = 11;
    public static final int CHOICE_email = 12;
    public static final int CHOICE_phoneNumber = 13;
    public static final int CHOICE_stars = 14;
    public static final int CHOICE_fuelType = 15;
    public static final int CHOICE_logicalAccessPointType = 16;
    public static final int CHOICE_website = 17;
    public static final int CHOICE_InVicinity = 18;
    public static final int CHOICE_airportEntranceType = 19;
    public static final int CHOICE_foodType = 20;
    public static final int CHOICE_multimediaResourceReference = 21;
    public static final int CHOICE_privateAccess = 22;
    public static final int CHOICE_nationalImportance = 23;
    public static final int CHOICE_parkingFacilitiesSizeClass = 24;
    public static final int CHOICE_parkingFacilitiesSize = 25;
    public static final int CHOICE_numFreeParkingSpots = 26;
    public static final int CHOICE_restAreaServiceAvailability = 27;
    public static final int CHOICE_accessibilityAids = 28;
    public static final int CHOICE_restaurantFacilitiesAvailable = 29;
    public static final int CHOICE_departureArrivalService = 30;
    public static final int CHOICE_priceRange = 31;
    public static final int CHOICE_shortDescription = 32;
    public static final int CHOICE_poiLongDescription = 33;
    public static final int CHOICE_availableSportiveActivities = 34;
    public static final int CHOICE_floorNumber = 35;
    public static final int CHOICE_numberOfRoomsEnSuite = 36;
    public static final int CHOICE_placeOfWorshipType = 37;
    public static final int CHOICE_serviceFee = 38;
    public static final int CHOICE_carDealerType = 39;
    public static final int CHOICE_majorImportance = 40;
    public static final int CHOICE_airportServiceAvailability = 41;
    public static final int CHOICE_airportMilitary = 42;
    public static final int CHOICE_transitType = 43;
    public static final int CHOICE_accessPointDetails = 44;
    public static final int CHOICE_parkAndRideFacility = 45;
    public static final int CHOICE_adBlueAvailability = 46;
    public static final int CHOICE_hydrogenPressureAvailability = 47;
    public static final int CHOICE_url = 48;
    public static final int CHOICE_radius = 49;
    public static final int CHOICE_globalSourceId = 50;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.poi.attributes.PoiAttributeType type_;
    private java.lang.Object objectChoice;
}
