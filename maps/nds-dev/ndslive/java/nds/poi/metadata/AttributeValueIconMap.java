/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.metadata;

public class AttributeValueIconMap implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numEntries_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumEntries()
        {
            return numEntries_;
        }

        private zserio.runtime.array.DeltaContext numEntries_;
    };

    public AttributeValueIconMap()
    {
    }

    public AttributeValueIconMap(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public AttributeValueIconMap(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public AttributeValueIconMap(
            int numEntries_,
            nds.poi.attributes.PoiAttributeType[] type_,
            int[] enumValue_,
            java.math.BigInteger[] iconSetReference_)
    {
        setNumEntries(numEntries_);
        setType(type_);
        setEnumValue(enumValue_);
        setIconSetReference(iconSetReference_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumEntries().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += enumValue_.bitSizeOf(endBitPosition);
        endBitPosition += iconSetReference_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition += type_.bitSizeOfPacked(endBitPosition);
        endBitPosition += enumValue_.bitSizeOfPacked(endBitPosition);
        endBitPosition += iconSetReference_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumEntries()
    {
        return numEntries_;
    }

    public void setNumEntries(int numEntries_)
    {
        this.numEntries_ = numEntries_;
    }

    public nds.poi.attributes.PoiAttributeType[] getType()
    {
        return (type_ == null) ? null : type_.getRawArray();
    }

    public void setType(nds.poi.attributes.PoiAttributeType[] type_)
    {
        this.type_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.attributes.PoiAttributeType.class, type_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.attributes.PoiAttributeType>(new ZserioElementFactory_type()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int[] getEnumValue()
    {
        return (enumValue_ == null) ? null : enumValue_.getRawArray();
    }

    public void setEnumValue(int[] enumValue_)
    {
        this.enumValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(enumValue_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public java.math.BigInteger[] getIconSetReference()
    {
        return (iconSetReference_ == null) ? null : iconSetReference_.getRawArray();
    }

    public void setIconSetReference(java.math.BigInteger[] iconSetReference_)
    {
        this.iconSetReference_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(iconSetReference_),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AttributeValueIconMap)
        {
            final AttributeValueIconMap that = (AttributeValueIconMap)obj;

            return
                    numEntries_ == that.numEntries_ &&
                    ((type_ == null) ? that.type_ == null : type_.equals(that.type_)) &&
                    ((enumValue_ == null) ? that.enumValue_ == null : enumValue_.equals(that.enumValue_)) &&
                    ((iconSetReference_ == null) ? that.iconSetReference_ == null : iconSetReference_.equals(that.iconSetReference_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numEntries_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, enumValue_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, iconSetReference_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numEntries_ = in.readVarSize();

        type_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.attributes.PoiAttributeType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.attributes.PoiAttributeType>(new ZserioElementFactory_type()),
                zserio.runtime.array.ArrayType.NORMAL);
        type_.read(in, (int)(getNumEntries()));

        enumValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        enumValue_.read(in, (int)(getNumEntries()));

        iconSetReference_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconSetReference_.read(in, (int)(getNumEntries()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numEntries_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumEntries().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        type_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.poi.attributes.PoiAttributeType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.attributes.PoiAttributeType>(new ZserioElementFactory_type()),
                zserio.runtime.array.ArrayType.NORMAL);
        type_.readPacked(in, (int)(getNumEntries()));

        enumValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        enumValue_.readPacked(in, (int)(getNumEntries()));

        iconSetReference_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        iconSetReference_.readPacked(in, (int)(getNumEntries()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEntries_);
        endBitPosition = type_.initializeOffsets(endBitPosition);
        endBitPosition = enumValue_.initializeOffsets(endBitPosition);
        endBitPosition = iconSetReference_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumEntries().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));
        endBitPosition = type_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = enumValue_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = iconSetReference_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numEntries_);

        if (type_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.type: " +
                    type_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        type_.write(out);

        if (enumValue_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.enumValue: " +
                    enumValue_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        enumValue_.write(out);

        if (iconSetReference_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.iconSetReference: " +
                    iconSetReference_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        iconSetReference_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumEntries().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEntries_));

        if (type_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.type: " +
                    type_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        type_.writePacked(out);

        if (enumValue_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.enumValue: " +
                    enumValue_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        enumValue_.writePacked(out);

        if (iconSetReference_.size() != (int)(getNumEntries()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field AttributeValueIconMap.iconSetReference: " +
                    iconSetReference_.size() + " != " + (int)(getNumEntries()) + "!");
        }
        iconSetReference_.writePacked(out);
    }

    private static final class ZserioElementFactory_type implements zserio.runtime.array.PackableElementFactory<nds.poi.attributes.PoiAttributeType>
    {
        @Override
        public nds.poi.attributes.PoiAttributeType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.poi.attributes.PoiAttributeType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.poi.attributes.PoiAttributeType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.poi.attributes.PoiAttributeType.readEnum(context, in);
        }
    }

    private int numEntries_;
    private zserio.runtime.array.Array type_;
    private zserio.runtime.array.Array enumValue_;
    private zserio.runtime.array.Array iconSetReference_;
}
