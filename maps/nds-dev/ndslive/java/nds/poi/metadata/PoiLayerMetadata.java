/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.metadata;

public class PoiLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            scales_ = new nds.core.types.ScaleRangeList.ZserioPackingContext();
            availableLanguages_ = new nds.core.language.AvailableLanguages.ZserioPackingContext();
        }

        public nds.core.types.ScaleRangeList.ZserioPackingContext getScales()
        {
            return scales_;
        }

        public nds.core.language.AvailableLanguages.ZserioPackingContext getAvailableLanguages()
        {
            return availableLanguages_;
        }

        private nds.core.types.ScaleRangeList.ZserioPackingContext scales_;
        private nds.core.language.AvailableLanguages.ZserioPackingContext availableLanguages_;
    };

    public PoiLayerMetadata()
    {
    }

    public PoiLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoiLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoiLayerMetadata(
            nds.poi.metadata.PoiCategory[] categories_,
            nds.core.types.ScaleRangeList scales_,
            nds.core.language.AvailableLanguages availableLanguages_,
            boolean globalIconSetReferences_)
    {
        setCategories(categories_);
        setScales(scales_);
        setAvailableLanguages(availableLanguages_);
        setGlobalIconSetReferences(globalIconSetReferences_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        scales_.initPackingContext(zserioContext.getScales());
        availableLanguages_.initPackingContext(zserioContext.getAvailableLanguages());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += categories_.bitSizeOf(endBitPosition);
        endBitPosition += scales_.bitSizeOf(endBitPosition);
        endBitPosition += availableLanguages_.bitSizeOf(endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += categories_.bitSizeOfPacked(endBitPosition);
        endBitPosition += scales_.bitSizeOf(zserioContext.getScales(), endBitPosition);
        endBitPosition += availableLanguages_.bitSizeOf(zserioContext.getAvailableLanguages(), endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.metadata.PoiCategory[] getCategories()
    {
        return (categories_ == null) ? null : categories_.getRawArray();
    }

    public void setCategories(nds.poi.metadata.PoiCategory[] categories_)
    {
        this.categories_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.metadata.PoiCategory.class, categories_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.metadata.PoiCategory>(new ZserioElementFactory_categories()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.core.types.ScaleRangeList getScales()
    {
        return scales_;
    }

    public void setScales(nds.core.types.ScaleRangeList scales_)
    {
        this.scales_ = scales_;
    }

    public nds.core.language.AvailableLanguages getAvailableLanguages()
    {
        return availableLanguages_;
    }

    public void setAvailableLanguages(nds.core.language.AvailableLanguages availableLanguages_)
    {
        this.availableLanguages_ = availableLanguages_;
    }

    public boolean getGlobalIconSetReferences()
    {
        return globalIconSetReferences_;
    }

    public void setGlobalIconSetReferences(boolean globalIconSetReferences_)
    {
        this.globalIconSetReferences_ = globalIconSetReferences_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoiLayerMetadata)
        {
            final PoiLayerMetadata that = (PoiLayerMetadata)obj;

            return
                    ((categories_ == null) ? that.categories_ == null : categories_.equals(that.categories_)) &&
                    ((scales_ == null) ? that.scales_ == null : scales_.equals(that.scales_)) &&
                    ((availableLanguages_ == null) ? that.availableLanguages_ == null : availableLanguages_.equals(that.availableLanguages_)) &&
                    globalIconSetReferences_ == that.globalIconSetReferences_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, categories_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, scales_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableLanguages_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, globalIconSetReferences_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        categories_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.metadata.PoiCategory.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.metadata.PoiCategory>(new ZserioElementFactory_categories()),
                zserio.runtime.array.ArrayType.AUTO);
        categories_.read(in);

        scales_ = new nds.core.types.ScaleRangeList(in);

        availableLanguages_ = new nds.core.language.AvailableLanguages(in);

        globalIconSetReferences_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        categories_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.metadata.PoiCategory.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.metadata.PoiCategory>(new ZserioElementFactory_categories()),
                zserio.runtime.array.ArrayType.AUTO);
        categories_.readPacked(in);

        scales_ = new nds.core.types.ScaleRangeList(zserioContext.getScales(), in);

        availableLanguages_ = new nds.core.language.AvailableLanguages(zserioContext.getAvailableLanguages(), in);

        globalIconSetReferences_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = categories_.initializeOffsets(endBitPosition);
        endBitPosition = scales_.initializeOffsets(endBitPosition);
        endBitPosition = availableLanguages_.initializeOffsets(endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = categories_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = scales_.initializeOffsets(zserioContext.getScales(), endBitPosition);
        endBitPosition = availableLanguages_.initializeOffsets(zserioContext.getAvailableLanguages(), endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        categories_.write(out);

        scales_.write(out);

        availableLanguages_.write(out);

        out.writeBool(globalIconSetReferences_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        categories_.writePacked(out);

        scales_.write(zserioContext.getScales(), out);

        availableLanguages_.write(zserioContext.getAvailableLanguages(), out);

        out.writeBool(globalIconSetReferences_);
    }

    private static final class ZserioElementFactory_categories implements zserio.runtime.array.PackableElementFactory<nds.poi.metadata.PoiCategory>
    {
        @Override
        public nds.poi.metadata.PoiCategory create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.poi.metadata.PoiCategory(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.poi.metadata.PoiCategory.ZserioPackingContext();
        }

        @Override
        public nds.poi.metadata.PoiCategory create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.poi.metadata.PoiCategory(context, in);
        }
    }

    private zserio.runtime.array.Array categories_;
    private nds.core.types.ScaleRangeList scales_;
    private nds.core.language.AvailableLanguages availableLanguages_;
    private boolean globalIconSetReferences_;
}
