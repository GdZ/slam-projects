/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.reference.types;

public class PoiReferenceIndirect implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            standardCategory_ = new zserio.runtime.array.DeltaContext();
            position_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            roadLocationPath_ = new nds.core.location.RoadLocationPath.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getStandardCategory()
        {
            return standardCategory_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getPosition()
        {
            return position_;
        }

        public nds.core.location.RoadLocationPath.ZserioPackingContext getRoadLocationPath()
        {
            return roadLocationPath_;
        }

        private zserio.runtime.array.DeltaContext standardCategory_;
        private nds.core.geometry.Position2D.ZserioPackingContext position_;
        private nds.core.location.RoadLocationPath.ZserioPackingContext roadLocationPath_;
    };

    public PoiReferenceIndirect()
    {
    }

    public PoiReferenceIndirect(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoiReferenceIndirect(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoiReferenceIndirect(
            nds.poi.reference.types.PoiStandardCategory standardCategory_,
            nds.core.geometry.Position2D position_,
            nds.core.location.RoadLocationPath roadLocationPath_,
            java.lang.String name_)
    {
        setStandardCategory(standardCategory_);
        setPosition(position_);
        setRoadLocationPath(roadLocationPath_);
        setName(name_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        standardCategory_.initPackingContext(zserioContext.getStandardCategory());
        position_.initPackingContext(zserioContext.getPosition());
        if (isRoadLocationPathUsed())
        {
            roadLocationPath_.initPackingContext(zserioContext.getRoadLocationPath());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += standardCategory_.bitSizeOf(endBitPosition);
        endBitPosition += position_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isRoadLocationPathUsed())
        {
            endBitPosition += roadLocationPath_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += standardCategory_.bitSizeOf(zserioContext.getStandardCategory(), endBitPosition);
        endBitPosition += position_.bitSizeOf(zserioContext.getPosition(), endBitPosition);
        endBitPosition += 1;
        if (isRoadLocationPathUsed())
        {
            endBitPosition += roadLocationPath_.bitSizeOf(zserioContext.getRoadLocationPath(), endBitPosition);
        }
        endBitPosition += 1;
        if (isNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.poi.reference.types.PoiStandardCategory getStandardCategory()
    {
        return standardCategory_;
    }

    public void setStandardCategory(nds.poi.reference.types.PoiStandardCategory standardCategory_)
    {
        this.standardCategory_ = standardCategory_;
    }

    public nds.core.geometry.Position2D getPosition()
    {
        return position_;
    }

    public void setPosition(nds.core.geometry.Position2D position_)
    {
        this.position_ = position_;
    }

    public nds.core.location.RoadLocationPath getRoadLocationPath()
    {
        return roadLocationPath_;
    }

    public void setRoadLocationPath(nds.core.location.RoadLocationPath roadLocationPath_)
    {
        this.roadLocationPath_ = roadLocationPath_;
    }

    public boolean isRoadLocationPathUsed()
    {
        return isRoadLocationPathSet();
    }

    public boolean isRoadLocationPathSet()
    {
        return (roadLocationPath_ != null);
    }

    public void resetRoadLocationPath()
    {
        this.roadLocationPath_ = null;
    }

    public java.lang.String getName()
    {
        return name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public boolean isNameUsed()
    {
        return isNameSet();
    }

    public boolean isNameSet()
    {
        return (name_ != null);
    }

    public void resetName()
    {
        this.name_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoiReferenceIndirect)
        {
            final PoiReferenceIndirect that = (PoiReferenceIndirect)obj;

            return
                    ((standardCategory_ == null) ? that.standardCategory_ == null : standardCategory_.getValue() == that.standardCategory_.getValue()) &&
                    ((position_ == null) ? that.position_ == null : position_.equals(that.position_)) &&
                    ((!isRoadLocationPathUsed()) ? !that.isRoadLocationPathUsed() :
                        ((roadLocationPath_ == null) ? that.roadLocationPath_ == null : roadLocationPath_.equals(that.roadLocationPath_))) &&
                    ((!isNameUsed()) ? !that.isNameUsed() :
                        ((name_ == null) ? that.name_ == null : name_.equals(that.name_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, standardCategory_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);
        if (isRoadLocationPathUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadLocationPath_);
        if (isNameUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, name_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        standardCategory_ = nds.poi.reference.types.PoiStandardCategory.readEnum(in);

        position_ = new nds.core.geometry.Position2D(in, (byte)(0));

        if (in.readBool())
        {
            roadLocationPath_ = new nds.core.location.RoadLocationPath(in);
        }

        if (in.readBool())
        {
            name_ = in.readString();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        standardCategory_ = nds.poi.reference.types.PoiStandardCategory.readEnum(zserioContext.getStandardCategory(), in);

        position_ = new nds.core.geometry.Position2D(zserioContext.getPosition(), in, (byte)(0));

        if (in.readBool())
        {
            roadLocationPath_ = new nds.core.location.RoadLocationPath(zserioContext.getRoadLocationPath(), in);
        }

        if (in.readBool())
        {
            name_ = in.readString();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += standardCategory_.bitSizeOf(endBitPosition);
        endBitPosition = position_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isRoadLocationPathUsed())
        {
            endBitPosition = roadLocationPath_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = standardCategory_.initializeOffsets(zserioContext.getStandardCategory(), endBitPosition);
        endBitPosition = position_.initializeOffsets(zserioContext.getPosition(), endBitPosition);
        endBitPosition += 1;
        if (isRoadLocationPathUsed())
        {
            endBitPosition = roadLocationPath_.initializeOffsets(zserioContext.getRoadLocationPath(), endBitPosition);
        }
        endBitPosition += 1;
        if (isNameUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        standardCategory_.write(out);

        // check parameters
        if (position_.getShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field PoiReferenceIndirect.position: " +
                    position_.getShift() + " != " + (byte)(0) + "!");
        }
        position_.write(out);

        if (isRoadLocationPathUsed())
        {
            out.writeBool(true);
            roadLocationPath_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isNameUsed())
        {
            out.writeBool(true);
            out.writeString(name_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        standardCategory_.write(zserioContext.getStandardCategory(), out);

        position_.write(zserioContext.getPosition(), out);

        if (isRoadLocationPathUsed())
        {
            out.writeBool(true);
            roadLocationPath_.write(zserioContext.getRoadLocationPath(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isNameUsed())
        {
            out.writeBool(true);
            out.writeString(name_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.poi.reference.types.PoiStandardCategory standardCategory_;
    private nds.core.geometry.Position2D position_;
    private nds.core.location.RoadLocationPath roadLocationPath_;
    private java.lang.String name_;
}
