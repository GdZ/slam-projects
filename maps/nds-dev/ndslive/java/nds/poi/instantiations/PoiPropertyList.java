/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.poi.instantiations;

public class PoiPropertyList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numProperties_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumProperties()
        {
            return numProperties_;
        }

        private zserio.runtime.array.DeltaContext numProperties_;
    };

    public PoiPropertyList()
    {
    }

    public PoiPropertyList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoiPropertyList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoiPropertyList(
            short numProperties_,
            nds.poi.instantiations.PoiProperty[] property_)
    {
        setNumProperties(numProperties_);
        setProperty(property_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumProperties().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numProperties_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        if (isPropertyUsed())
        {
            endBitPosition += property_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumProperties().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numProperties_));
        if (isPropertyUsed())
        {
            endBitPosition += property_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumProperties()
    {
        return numProperties_;
    }

    public void setNumProperties(short numProperties_)
    {
        this.numProperties_ = numProperties_;
    }

    public nds.poi.instantiations.PoiProperty[] getProperty()
    {
        return (property_ == null) ? null : property_.getRawArray();
    }

    public void setProperty(nds.poi.instantiations.PoiProperty[] property_)
    {
        if (property_ == null)
        {
            this.property_ = null;
        }
        else
        {
            this.property_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.instantiations.PoiProperty.class, property_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.instantiations.PoiProperty>(new ZserioElementFactory_property()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isPropertyUsed()
    {
        return (getNumProperties() > 0);
    }

    public boolean isPropertySet()
    {
        return (property_ != null);
    }

    public void resetProperty()
    {
        this.property_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoiPropertyList)
        {
            final PoiPropertyList that = (PoiPropertyList)obj;

            return
                    numProperties_ == that.numProperties_ &&
                    ((!isPropertyUsed()) ? !that.isPropertyUsed() :
                        ((property_ == null) ? that.property_ == null : property_.equals(that.property_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numProperties_);
        if (isPropertyUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, property_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numProperties_ = in.readUnsignedByte();

        if (getNumProperties() > 0)
        {
            property_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.instantiations.PoiProperty.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.instantiations.PoiProperty>(new ZserioElementFactory_property()),
                    zserio.runtime.array.ArrayType.NORMAL);
            property_.readPacked(in, (int)(getNumProperties()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numProperties_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumProperties().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        if (getNumProperties() > 0)
        {
            property_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.poi.instantiations.PoiProperty.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.poi.instantiations.PoiProperty>(new ZserioElementFactory_property()),
                    zserio.runtime.array.ArrayType.NORMAL);
            property_.readPacked(in, (int)(getNumProperties()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        if (isPropertyUsed())
        {
            endBitPosition = property_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumProperties().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numProperties_));
        if (isPropertyUsed())
        {
            endBitPosition = property_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numProperties_);

        if (isPropertyUsed())
        {
            if (property_.size() != (int)(getNumProperties()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field PoiPropertyList.property: " +
                        property_.size() + " != " + (int)(getNumProperties()) + "!");
            }
            property_.writePacked(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumProperties().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numProperties_));

        if (isPropertyUsed())
        {
            if (property_.size() != (int)(getNumProperties()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field PoiPropertyList.property: " +
                        property_.size() + " != " + (int)(getNumProperties()) + "!");
            }
            property_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_property implements zserio.runtime.array.PackableElementFactory<nds.poi.instantiations.PoiProperty>
    {
        @Override
        public nds.poi.instantiations.PoiProperty create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.poi.instantiations.PoiProperty(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.poi.instantiations.PoiProperty.ZserioPackingContext();
        }

        @Override
        public nds.poi.instantiations.PoiProperty create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.poi.instantiations.PoiProperty(context, in);
        }
    }

    private short numProperties_;
    private zserio.runtime.array.Array property_;
}
