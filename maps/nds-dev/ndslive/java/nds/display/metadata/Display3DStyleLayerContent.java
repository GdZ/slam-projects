/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class Display3DStyleLayerContent implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public Display3DStyleLayerContent()
    {
    }

    public Display3DStyleLayerContent(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Display3DStyleLayerContent(
            boolean hasTextures_,
            boolean hasColors_)
    {
        setHasTextures(hasTextures_);
        setHasColors(hasColors_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasTextures()
    {
        return hasTextures_;
    }

    public void setHasTextures(boolean hasTextures_)
    {
        this.hasTextures_ = hasTextures_;
    }

    public boolean getHasColors()
    {
        return hasColors_;
    }

    public void setHasColors(boolean hasColors_)
    {
        this.hasColors_ = hasColors_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Display3DStyleLayerContent)
        {
            final Display3DStyleLayerContent that = (Display3DStyleLayerContent)obj;

            return
                    hasTextures_ == that.hasTextures_ &&
                    hasColors_ == that.hasColors_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTextures_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasColors_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasTextures_ = in.readBool();

        hasColors_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasTextures_);

        out.writeBool(hasColors_);
    }

    private boolean hasTextures_;
    private boolean hasColors_;
}
