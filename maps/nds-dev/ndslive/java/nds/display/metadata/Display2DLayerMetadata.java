/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class Display2DLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            defaultDrawingOrders_ = new nds.display.metadata.DrawingOrderMapping.ZserioPackingContext();
            displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.display.metadata.DrawingOrderMapping.ZserioPackingContext getDefaultDrawingOrders()
        {
            return defaultDrawingOrders_;
        }

        public nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext getDisplayScaleTileLevelMapping()
        {
            return displayScaleTileLevelMapping_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.display.metadata.DrawingOrderMapping.ZserioPackingContext defaultDrawingOrders_;
        private nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext displayScaleTileLevelMapping_;
    };

    public Display2DLayerMetadata()
    {
    }

    public Display2DLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Display2DLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Display2DLayerMetadata(
            nds.display.metadata.Display2DContent content_,
            nds.display.types.DisplayPointType[] availableDisplayPointTypes_,
            nds.display.types.DisplayLineType[] availableDisplayLineTypes_,
            nds.display.types.DisplayAreaType[] availableDisplayAreaTypes_,
            nds.display.metadata.DrawingOrderMapping defaultDrawingOrders_,
            nds.display.metadata.DisplayAreaTypeHierarchyRelation[] displayAreaTypeRelations_,
            nds.display.metadata.DisplayLineTypeHierarchyRelation[] displayLineTypeRelations_,
            nds.display.metadata.DisplayPointTypeHierarchyRelation[] displayPointTypeRelations_,
            nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_)
    {
        setContent(content_);
        setAvailableDisplayPointTypes(availableDisplayPointTypes_);
        setAvailableDisplayLineTypes(availableDisplayLineTypes_);
        setAvailableDisplayAreaTypes(availableDisplayAreaTypes_);
        setDefaultDrawingOrders(defaultDrawingOrders_);
        setDisplayAreaTypeRelations(displayAreaTypeRelations_);
        setDisplayLineTypeRelations(displayLineTypeRelations_);
        setDisplayPointTypeRelations(displayPointTypeRelations_);
        setDisplayScaleTileLevelMapping(displayScaleTileLevelMapping_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        defaultDrawingOrders_.initPackingContext(zserioContext.getDefaultDrawingOrders());
        displayScaleTileLevelMapping_.initPackingContext(zserioContext.getDisplayScaleTileLevelMapping());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isAvailableDisplayPointTypesUsed())
        {
            endBitPosition += availableDisplayPointTypes_.bitSizeOf(endBitPosition);
        }
        if (isAvailableDisplayLineTypesUsed())
        {
            endBitPosition += availableDisplayLineTypes_.bitSizeOf(endBitPosition);
        }
        if (isAvailableDisplayAreaTypesUsed())
        {
            endBitPosition += availableDisplayAreaTypes_.bitSizeOf(endBitPosition);
        }
        endBitPosition += defaultDrawingOrders_.bitSizeOf(endBitPosition);
        if (isDisplayAreaTypeRelationsUsed())
        {
            endBitPosition += displayAreaTypeRelations_.bitSizeOf(endBitPosition);
        }
        if (isDisplayLineTypeRelationsUsed())
        {
            endBitPosition += displayLineTypeRelations_.bitSizeOf(endBitPosition);
        }
        if (isDisplayPointTypeRelationsUsed())
        {
            endBitPosition += displayPointTypeRelations_.bitSizeOf(endBitPosition);
        }
        endBitPosition += displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isAvailableDisplayPointTypesUsed())
        {
            endBitPosition += availableDisplayPointTypes_.bitSizeOfPacked(endBitPosition);
        }
        if (isAvailableDisplayLineTypesUsed())
        {
            endBitPosition += availableDisplayLineTypes_.bitSizeOfPacked(endBitPosition);
        }
        if (isAvailableDisplayAreaTypesUsed())
        {
            endBitPosition += availableDisplayAreaTypes_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += defaultDrawingOrders_.bitSizeOf(zserioContext.getDefaultDrawingOrders(), endBitPosition);
        if (isDisplayAreaTypeRelationsUsed())
        {
            endBitPosition += displayAreaTypeRelations_.bitSizeOfPacked(endBitPosition);
        }
        if (isDisplayLineTypeRelationsUsed())
        {
            endBitPosition += displayLineTypeRelations_.bitSizeOfPacked(endBitPosition);
        }
        if (isDisplayPointTypeRelationsUsed())
        {
            endBitPosition += displayPointTypeRelations_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += displayScaleTileLevelMapping_.bitSizeOf(zserioContext.getDisplayScaleTileLevelMapping(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.metadata.Display2DContent getContent()
    {
        return content_;
    }

    public void setContent(nds.display.metadata.Display2DContent content_)
    {
        this.content_ = content_;
    }

    public nds.display.types.DisplayPointType[] getAvailableDisplayPointTypes()
    {
        return (availableDisplayPointTypes_ == null) ? null : availableDisplayPointTypes_.getRawArray();
    }

    public void setAvailableDisplayPointTypes(nds.display.types.DisplayPointType[] availableDisplayPointTypes_)
    {
        if (availableDisplayPointTypes_ == null)
        {
            this.availableDisplayPointTypes_ = null;
        }
        else
        {
            this.availableDisplayPointTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class, availableDisplayPointTypes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_availableDisplayPointTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAvailableDisplayPointTypesUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.POINTS)).equals(nds.display.metadata.Display2DContent.Values.POINTS));
    }

    public boolean isAvailableDisplayPointTypesSet()
    {
        return (availableDisplayPointTypes_ != null);
    }

    public void resetAvailableDisplayPointTypes()
    {
        this.availableDisplayPointTypes_ = null;
    }

    public nds.display.types.DisplayLineType[] getAvailableDisplayLineTypes()
    {
        return (availableDisplayLineTypes_ == null) ? null : availableDisplayLineTypes_.getRawArray();
    }

    public void setAvailableDisplayLineTypes(nds.display.types.DisplayLineType[] availableDisplayLineTypes_)
    {
        if (availableDisplayLineTypes_ == null)
        {
            this.availableDisplayLineTypes_ = null;
        }
        else
        {
            this.availableDisplayLineTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class, availableDisplayLineTypes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_availableDisplayLineTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAvailableDisplayLineTypesUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.LINES)).equals(nds.display.metadata.Display2DContent.Values.LINES));
    }

    public boolean isAvailableDisplayLineTypesSet()
    {
        return (availableDisplayLineTypes_ != null);
    }

    public void resetAvailableDisplayLineTypes()
    {
        this.availableDisplayLineTypes_ = null;
    }

    public nds.display.types.DisplayAreaType[] getAvailableDisplayAreaTypes()
    {
        return (availableDisplayAreaTypes_ == null) ? null : availableDisplayAreaTypes_.getRawArray();
    }

    public void setAvailableDisplayAreaTypes(nds.display.types.DisplayAreaType[] availableDisplayAreaTypes_)
    {
        if (availableDisplayAreaTypes_ == null)
        {
            this.availableDisplayAreaTypes_ = null;
        }
        else
        {
            this.availableDisplayAreaTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class, availableDisplayAreaTypes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_availableDisplayAreaTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAvailableDisplayAreaTypesUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.AREAS)).equals(nds.display.metadata.Display2DContent.Values.AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS));
    }

    public boolean isAvailableDisplayAreaTypesSet()
    {
        return (availableDisplayAreaTypes_ != null);
    }

    public void resetAvailableDisplayAreaTypes()
    {
        this.availableDisplayAreaTypes_ = null;
    }

    public nds.display.metadata.DrawingOrderMapping getDefaultDrawingOrders()
    {
        return defaultDrawingOrders_;
    }

    public void setDefaultDrawingOrders(nds.display.metadata.DrawingOrderMapping defaultDrawingOrders_)
    {
        this.defaultDrawingOrders_ = defaultDrawingOrders_;
    }

    public nds.display.metadata.DisplayAreaTypeHierarchyRelation[] getDisplayAreaTypeRelations()
    {
        return (displayAreaTypeRelations_ == null) ? null : displayAreaTypeRelations_.getRawArray();
    }

    public void setDisplayAreaTypeRelations(nds.display.metadata.DisplayAreaTypeHierarchyRelation[] displayAreaTypeRelations_)
    {
        if (displayAreaTypeRelations_ == null)
        {
            this.displayAreaTypeRelations_ = null;
        }
        else
        {
            this.displayAreaTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayAreaTypeHierarchyRelation.class, displayAreaTypeRelations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayAreaTypeHierarchyRelation>(new ZserioElementFactory_displayAreaTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isDisplayAreaTypeRelationsUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS));
    }

    public boolean isDisplayAreaTypeRelationsSet()
    {
        return (displayAreaTypeRelations_ != null);
    }

    public void resetDisplayAreaTypeRelations()
    {
        this.displayAreaTypeRelations_ = null;
    }

    public nds.display.metadata.DisplayLineTypeHierarchyRelation[] getDisplayLineTypeRelations()
    {
        return (displayLineTypeRelations_ == null) ? null : displayLineTypeRelations_.getRawArray();
    }

    public void setDisplayLineTypeRelations(nds.display.metadata.DisplayLineTypeHierarchyRelation[] displayLineTypeRelations_)
    {
        if (displayLineTypeRelations_ == null)
        {
            this.displayLineTypeRelations_ = null;
        }
        else
        {
            this.displayLineTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayLineTypeHierarchyRelation.class, displayLineTypeRelations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayLineTypeHierarchyRelation>(new ZserioElementFactory_displayLineTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isDisplayLineTypeRelationsUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS));
    }

    public boolean isDisplayLineTypeRelationsSet()
    {
        return (displayLineTypeRelations_ != null);
    }

    public void resetDisplayLineTypeRelations()
    {
        this.displayLineTypeRelations_ = null;
    }

    public nds.display.metadata.DisplayPointTypeHierarchyRelation[] getDisplayPointTypeRelations()
    {
        return (displayPointTypeRelations_ == null) ? null : displayPointTypeRelations_.getRawArray();
    }

    public void setDisplayPointTypeRelations(nds.display.metadata.DisplayPointTypeHierarchyRelation[] displayPointTypeRelations_)
    {
        if (displayPointTypeRelations_ == null)
        {
            this.displayPointTypeRelations_ = null;
        }
        else
        {
            this.displayPointTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayPointTypeHierarchyRelation.class, displayPointTypeRelations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayPointTypeHierarchyRelation>(new ZserioElementFactory_displayPointTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isDisplayPointTypeRelationsUsed()
    {
        return ((getContent().and(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS));
    }

    public boolean isDisplayPointTypeRelationsSet()
    {
        return (displayPointTypeRelations_ != null);
    }

    public void resetDisplayPointTypeRelations()
    {
        this.displayPointTypeRelations_ = null;
    }

    public nds.display.metadata.DisplayScaleTileLevelMapping getDisplayScaleTileLevelMapping()
    {
        return displayScaleTileLevelMapping_;
    }

    public void setDisplayScaleTileLevelMapping(nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_)
    {
        this.displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Display2DLayerMetadata)
        {
            final Display2DLayerMetadata that = (Display2DLayerMetadata)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isAvailableDisplayPointTypesUsed()) ? !that.isAvailableDisplayPointTypesUsed() :
                        ((availableDisplayPointTypes_ == null) ? that.availableDisplayPointTypes_ == null : availableDisplayPointTypes_.equals(that.availableDisplayPointTypes_))) &&
                    ((!isAvailableDisplayLineTypesUsed()) ? !that.isAvailableDisplayLineTypesUsed() :
                        ((availableDisplayLineTypes_ == null) ? that.availableDisplayLineTypes_ == null : availableDisplayLineTypes_.equals(that.availableDisplayLineTypes_))) &&
                    ((!isAvailableDisplayAreaTypesUsed()) ? !that.isAvailableDisplayAreaTypesUsed() :
                        ((availableDisplayAreaTypes_ == null) ? that.availableDisplayAreaTypes_ == null : availableDisplayAreaTypes_.equals(that.availableDisplayAreaTypes_))) &&
                    ((defaultDrawingOrders_ == null) ? that.defaultDrawingOrders_ == null : defaultDrawingOrders_.equals(that.defaultDrawingOrders_)) &&
                    ((!isDisplayAreaTypeRelationsUsed()) ? !that.isDisplayAreaTypeRelationsUsed() :
                        ((displayAreaTypeRelations_ == null) ? that.displayAreaTypeRelations_ == null : displayAreaTypeRelations_.equals(that.displayAreaTypeRelations_))) &&
                    ((!isDisplayLineTypeRelationsUsed()) ? !that.isDisplayLineTypeRelationsUsed() :
                        ((displayLineTypeRelations_ == null) ? that.displayLineTypeRelations_ == null : displayLineTypeRelations_.equals(that.displayLineTypeRelations_))) &&
                    ((!isDisplayPointTypeRelationsUsed()) ? !that.isDisplayPointTypeRelationsUsed() :
                        ((displayPointTypeRelations_ == null) ? that.displayPointTypeRelations_ == null : displayPointTypeRelations_.equals(that.displayPointTypeRelations_))) &&
                    ((displayScaleTileLevelMapping_ == null) ? that.displayScaleTileLevelMapping_ == null : displayScaleTileLevelMapping_.equals(that.displayScaleTileLevelMapping_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isAvailableDisplayPointTypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableDisplayPointTypes_);
        if (isAvailableDisplayLineTypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableDisplayLineTypes_);
        if (isAvailableDisplayAreaTypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableDisplayAreaTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, defaultDrawingOrders_);
        if (isDisplayAreaTypeRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayAreaTypeRelations_);
        if (isDisplayLineTypeRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayLineTypeRelations_);
        if (isDisplayPointTypeRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayPointTypeRelations_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayScaleTileLevelMapping_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.display.metadata.Display2DContent(in);

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.POINTS)).equals(nds.display.metadata.Display2DContent.Values.POINTS))
        {
            availableDisplayPointTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_availableDisplayPointTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayPointTypes_.read(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.LINES)).equals(nds.display.metadata.Display2DContent.Values.LINES))
        {
            availableDisplayLineTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_availableDisplayLineTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayLineTypes_.read(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.AREAS)).equals(nds.display.metadata.Display2DContent.Values.AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS))
        {
            availableDisplayAreaTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_availableDisplayAreaTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayAreaTypes_.read(in);
        }

        defaultDrawingOrders_ = new nds.display.metadata.DrawingOrderMapping(in);

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS))
        {
            displayAreaTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayAreaTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayAreaTypeHierarchyRelation>(new ZserioElementFactory_displayAreaTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayAreaTypeRelations_.read(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS))
        {
            displayLineTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayLineTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayLineTypeHierarchyRelation>(new ZserioElementFactory_displayLineTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayLineTypeRelations_.read(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS))
        {
            displayPointTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayPointTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayPointTypeHierarchyRelation>(new ZserioElementFactory_displayPointTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayPointTypeRelations_.read(in);
        }

        displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.display.metadata.Display2DContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.POINTS)).equals(nds.display.metadata.Display2DContent.Values.POINTS))
        {
            availableDisplayPointTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_availableDisplayPointTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayPointTypes_.readPacked(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.LINES)).equals(nds.display.metadata.Display2DContent.Values.LINES))
        {
            availableDisplayLineTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_availableDisplayLineTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayLineTypes_.readPacked(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.AREAS)).equals(nds.display.metadata.Display2DContent.Values.AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREAS) || (getContent().and(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS)).equals(nds.display.metadata.Display2DContent.Values.SIMPLE_AREA_SETS))
        {
            availableDisplayAreaTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_availableDisplayAreaTypes()),
                    zserio.runtime.array.ArrayType.AUTO);
            availableDisplayAreaTypes_.readPacked(in);
        }

        defaultDrawingOrders_ = new nds.display.metadata.DrawingOrderMapping(zserioContext.getDefaultDrawingOrders(), in);

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.AREA_TYPE_RELATIONS))
        {
            displayAreaTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayAreaTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayAreaTypeHierarchyRelation>(new ZserioElementFactory_displayAreaTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayAreaTypeRelations_.readPacked(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.LINE_TYPE_RELATIONS))
        {
            displayLineTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayLineTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayLineTypeHierarchyRelation>(new ZserioElementFactory_displayLineTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayLineTypeRelations_.readPacked(in);
        }

        if ((getContent().and(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS)).equals(nds.display.metadata.Display2DContent.Values.POINT_TYPE_RELATIONS))
        {
            displayPointTypeRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.metadata.DisplayPointTypeHierarchyRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.metadata.DisplayPointTypeHierarchyRelation>(new ZserioElementFactory_displayPointTypeRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            displayPointTypeRelations_.readPacked(in);
        }

        displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping(zserioContext.getDisplayScaleTileLevelMapping(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isAvailableDisplayPointTypesUsed())
        {
            endBitPosition = availableDisplayPointTypes_.initializeOffsets(endBitPosition);
        }
        if (isAvailableDisplayLineTypesUsed())
        {
            endBitPosition = availableDisplayLineTypes_.initializeOffsets(endBitPosition);
        }
        if (isAvailableDisplayAreaTypesUsed())
        {
            endBitPosition = availableDisplayAreaTypes_.initializeOffsets(endBitPosition);
        }
        endBitPosition = defaultDrawingOrders_.initializeOffsets(endBitPosition);
        if (isDisplayAreaTypeRelationsUsed())
        {
            endBitPosition = displayAreaTypeRelations_.initializeOffsets(endBitPosition);
        }
        if (isDisplayLineTypeRelationsUsed())
        {
            endBitPosition = displayLineTypeRelations_.initializeOffsets(endBitPosition);
        }
        if (isDisplayPointTypeRelationsUsed())
        {
            endBitPosition = displayPointTypeRelations_.initializeOffsets(endBitPosition);
        }
        endBitPosition = displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isAvailableDisplayPointTypesUsed())
        {
            endBitPosition = availableDisplayPointTypes_.initializeOffsetsPacked(endBitPosition);
        }
        if (isAvailableDisplayLineTypesUsed())
        {
            endBitPosition = availableDisplayLineTypes_.initializeOffsetsPacked(endBitPosition);
        }
        if (isAvailableDisplayAreaTypesUsed())
        {
            endBitPosition = availableDisplayAreaTypes_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = defaultDrawingOrders_.initializeOffsets(zserioContext.getDefaultDrawingOrders(), endBitPosition);
        if (isDisplayAreaTypeRelationsUsed())
        {
            endBitPosition = displayAreaTypeRelations_.initializeOffsetsPacked(endBitPosition);
        }
        if (isDisplayLineTypeRelationsUsed())
        {
            endBitPosition = displayLineTypeRelations_.initializeOffsetsPacked(endBitPosition);
        }
        if (isDisplayPointTypeRelationsUsed())
        {
            endBitPosition = displayPointTypeRelations_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = displayScaleTileLevelMapping_.initializeOffsets(zserioContext.getDisplayScaleTileLevelMapping(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isAvailableDisplayPointTypesUsed())
        {
            availableDisplayPointTypes_.write(out);
        }

        if (isAvailableDisplayLineTypesUsed())
        {
            availableDisplayLineTypes_.write(out);
        }

        if (isAvailableDisplayAreaTypesUsed())
        {
            availableDisplayAreaTypes_.write(out);
        }

        defaultDrawingOrders_.write(out);

        if (isDisplayAreaTypeRelationsUsed())
        {
            displayAreaTypeRelations_.write(out);
        }

        if (isDisplayLineTypeRelationsUsed())
        {
            displayLineTypeRelations_.write(out);
        }

        if (isDisplayPointTypeRelationsUsed())
        {
            displayPointTypeRelations_.write(out);
        }

        displayScaleTileLevelMapping_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isAvailableDisplayPointTypesUsed())
        {
            availableDisplayPointTypes_.writePacked(out);
        }

        if (isAvailableDisplayLineTypesUsed())
        {
            availableDisplayLineTypes_.writePacked(out);
        }

        if (isAvailableDisplayAreaTypesUsed())
        {
            availableDisplayAreaTypes_.writePacked(out);
        }

        defaultDrawingOrders_.write(zserioContext.getDefaultDrawingOrders(), out);

        if (isDisplayAreaTypeRelationsUsed())
        {
            displayAreaTypeRelations_.writePacked(out);
        }

        if (isDisplayLineTypeRelationsUsed())
        {
            displayLineTypeRelations_.writePacked(out);
        }

        if (isDisplayPointTypeRelationsUsed())
        {
            displayPointTypeRelations_.writePacked(out);
        }

        displayScaleTileLevelMapping_.write(zserioContext.getDisplayScaleTileLevelMapping(), out);
    }

    private static final class ZserioElementFactory_availableDisplayPointTypes implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayPointType>
    {
        @Override
        public nds.display.types.DisplayPointType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayPointType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayPointType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayPointType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_availableDisplayLineTypes implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayLineType>
    {
        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_availableDisplayAreaTypes implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayAreaType>
    {
        @Override
        public nds.display.types.DisplayAreaType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayAreaType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayAreaType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayAreaType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_displayAreaTypeRelations implements zserio.runtime.array.PackableElementFactory<nds.display.metadata.DisplayAreaTypeHierarchyRelation>
    {
        @Override
        public nds.display.metadata.DisplayAreaTypeHierarchyRelation create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.metadata.DisplayAreaTypeHierarchyRelation(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.metadata.DisplayAreaTypeHierarchyRelation.ZserioPackingContext();
        }

        @Override
        public nds.display.metadata.DisplayAreaTypeHierarchyRelation create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.metadata.DisplayAreaTypeHierarchyRelation(context, in);
        }
    }

    private static final class ZserioElementFactory_displayLineTypeRelations implements zserio.runtime.array.PackableElementFactory<nds.display.metadata.DisplayLineTypeHierarchyRelation>
    {
        @Override
        public nds.display.metadata.DisplayLineTypeHierarchyRelation create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.metadata.DisplayLineTypeHierarchyRelation(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.metadata.DisplayLineTypeHierarchyRelation.ZserioPackingContext();
        }

        @Override
        public nds.display.metadata.DisplayLineTypeHierarchyRelation create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.metadata.DisplayLineTypeHierarchyRelation(context, in);
        }
    }

    private static final class ZserioElementFactory_displayPointTypeRelations implements zserio.runtime.array.PackableElementFactory<nds.display.metadata.DisplayPointTypeHierarchyRelation>
    {
        @Override
        public nds.display.metadata.DisplayPointTypeHierarchyRelation create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.metadata.DisplayPointTypeHierarchyRelation(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.metadata.DisplayPointTypeHierarchyRelation.ZserioPackingContext();
        }

        @Override
        public nds.display.metadata.DisplayPointTypeHierarchyRelation create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.metadata.DisplayPointTypeHierarchyRelation(context, in);
        }
    }

    private nds.display.metadata.Display2DContent content_;
    private zserio.runtime.array.Array availableDisplayPointTypes_;
    private zserio.runtime.array.Array availableDisplayLineTypes_;
    private zserio.runtime.array.Array availableDisplayAreaTypes_;
    private nds.display.metadata.DrawingOrderMapping defaultDrawingOrders_;
    private zserio.runtime.array.Array displayAreaTypeRelations_;
    private zserio.runtime.array.Array displayLineTypeRelations_;
    private zserio.runtime.array.Array displayPointTypeRelations_;
    private nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_;
}
