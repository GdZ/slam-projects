/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class OrthoImageServiceMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            verticalPixResolution_ = new zserio.runtime.array.DeltaContext();
            coordinateProjection_ = new zserio.runtime.array.DeltaContext();
            maximumLatitude_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getVerticalPixResolution()
        {
            return verticalPixResolution_;
        }

        public zserio.runtime.array.DeltaContext getCoordinateProjection()
        {
            return coordinateProjection_;
        }

        public zserio.runtime.array.DeltaContext getMaximumLatitude()
        {
            return maximumLatitude_;
        }

        private zserio.runtime.array.DeltaContext verticalPixResolution_;
        private zserio.runtime.array.DeltaContext coordinateProjection_;
        private zserio.runtime.array.DeltaContext maximumLatitude_;
    };

    public OrthoImageServiceMetadata()
    {
    }

    public OrthoImageServiceMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public OrthoImageServiceMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public OrthoImageServiceMetadata(
            nds.display.types.OrthoImageConfig[] supportedConfigurations_,
            int verticalPixResolution_,
            nds.core.geometry.MapProjectionMethod coordinateProjection_,
            java.lang.Integer maximumLatitude_)
    {
        setSupportedConfigurations(supportedConfigurations_);
        setVerticalPixResolution(verticalPixResolution_);
        setCoordinateProjection(coordinateProjection_);
        setMaximumLatitude(maximumLatitude_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getVerticalPixResolution().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(verticalPixResolution_));
        coordinateProjection_.initPackingContext(zserioContext.getCoordinateProjection());
        if (isMaximumLatitudeUsed())
        {
            zserioContext.getMaximumLatitude().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += supportedConfigurations_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(verticalPixResolution_);
        endBitPosition += coordinateProjection_.bitSizeOf(endBitPosition);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += 32;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += supportedConfigurations_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getVerticalPixResolution().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(verticalPixResolution_));
        endBitPosition += coordinateProjection_.bitSizeOf(zserioContext.getCoordinateProjection(), endBitPosition);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += zserioContext.getMaximumLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.OrthoImageConfig[] getSupportedConfigurations()
    {
        return (supportedConfigurations_ == null) ? null : supportedConfigurations_.getRawArray();
    }

    public void setSupportedConfigurations(nds.display.types.OrthoImageConfig[] supportedConfigurations_)
    {
        this.supportedConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.OrthoImageConfig.class, supportedConfigurations_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.OrthoImageConfig>(new ZserioElementFactory_supportedConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public int getVerticalPixResolution()
    {
        return verticalPixResolution_;
    }

    public void setVerticalPixResolution(int verticalPixResolution_)
    {
        this.verticalPixResolution_ = verticalPixResolution_;
    }

    public nds.core.geometry.MapProjectionMethod getCoordinateProjection()
    {
        return coordinateProjection_;
    }

    public void setCoordinateProjection(nds.core.geometry.MapProjectionMethod coordinateProjection_)
    {
        this.coordinateProjection_ = coordinateProjection_;
    }

    public java.lang.Integer getMaximumLatitude()
    {
        return maximumLatitude_;
    }

    public void setMaximumLatitude(java.lang.Integer maximumLatitude_)
    {
        this.maximumLatitude_ = maximumLatitude_;
    }

    public boolean isMaximumLatitudeUsed()
    {
        return (getCoordinateProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857);
    }

    public boolean isMaximumLatitudeSet()
    {
        return (maximumLatitude_ != null);
    }

    public void resetMaximumLatitude()
    {
        this.maximumLatitude_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof OrthoImageServiceMetadata)
        {
            final OrthoImageServiceMetadata that = (OrthoImageServiceMetadata)obj;

            return
                    ((supportedConfigurations_ == null) ? that.supportedConfigurations_ == null : supportedConfigurations_.equals(that.supportedConfigurations_)) &&
                    verticalPixResolution_ == that.verticalPixResolution_ &&
                    ((coordinateProjection_ == null) ? that.coordinateProjection_ == null : coordinateProjection_.getValue() == that.coordinateProjection_.getValue()) &&
                    ((!isMaximumLatitudeUsed()) ? !that.isMaximumLatitudeUsed() :
                        ((maximumLatitude_ == null) ? that.maximumLatitude_ == null : maximumLatitude_.equals(that.maximumLatitude_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedConfigurations_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, verticalPixResolution_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coordinateProjection_);
        if (isMaximumLatitudeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, maximumLatitude_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        supportedConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.OrthoImageConfig.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.OrthoImageConfig>(new ZserioElementFactory_supportedConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedConfigurations_.read(in);

        verticalPixResolution_ = in.readVarUInt32();

        coordinateProjection_ = nds.core.geometry.MapProjectionMethod.readEnum(in);

        if (getCoordinateProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857)
        {
            maximumLatitude_ = in.readInt();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        supportedConfigurations_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.OrthoImageConfig.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.OrthoImageConfig>(new ZserioElementFactory_supportedConfigurations()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedConfigurations_.readPacked(in);

        verticalPixResolution_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getVerticalPixResolution().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        coordinateProjection_ = nds.core.geometry.MapProjectionMethod.readEnum(zserioContext.getCoordinateProjection(), in);

        if (getCoordinateProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857)
        {
            maximumLatitude_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getMaximumLatitude().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = supportedConfigurations_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(verticalPixResolution_);
        endBitPosition += coordinateProjection_.bitSizeOf(endBitPosition);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += 32;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = supportedConfigurations_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getVerticalPixResolution().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(verticalPixResolution_));
        endBitPosition = coordinateProjection_.initializeOffsets(zserioContext.getCoordinateProjection(), endBitPosition);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += zserioContext.getMaximumLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        supportedConfigurations_.write(out);

        out.writeVarUInt32(verticalPixResolution_);

        coordinateProjection_.write(out);

        if (isMaximumLatitudeUsed())
        {
            out.writeInt(maximumLatitude_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        supportedConfigurations_.writePacked(out);

        zserioContext.getVerticalPixResolution().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(verticalPixResolution_));

        coordinateProjection_.write(zserioContext.getCoordinateProjection(), out);

        if (isMaximumLatitudeUsed())
        {
            zserioContext.getMaximumLatitude().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }
    }

    private static final class ZserioElementFactory_supportedConfigurations implements zserio.runtime.array.PackableElementFactory<nds.display.types.OrthoImageConfig>
    {
        @Override
        public nds.display.types.OrthoImageConfig create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.OrthoImageConfig(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.OrthoImageConfig.ZserioPackingContext();
        }

        @Override
        public nds.display.types.OrthoImageConfig create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.OrthoImageConfig(context, in);
        }
    }

    private zserio.runtime.array.Array supportedConfigurations_;
    private int verticalPixResolution_;
    private nds.core.geometry.MapProjectionMethod coordinateProjection_;
    private java.lang.Integer maximumLatitude_;
}
