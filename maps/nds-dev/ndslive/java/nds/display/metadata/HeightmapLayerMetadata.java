/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class HeightmapLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            mapProjection_ = new zserio.runtime.array.DeltaContext();
            tileBufferSize_ = new zserio.runtime.array.DeltaContext();
            maximumLatitude_ = new zserio.runtime.array.DeltaContext();
            displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getMapProjection()
        {
            return mapProjection_;
        }

        public zserio.runtime.array.DeltaContext getTileBufferSize()
        {
            return tileBufferSize_;
        }

        public zserio.runtime.array.DeltaContext getMaximumLatitude()
        {
            return maximumLatitude_;
        }

        public nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext getDisplayScaleTileLevelMapping()
        {
            return displayScaleTileLevelMapping_;
        }

        private zserio.runtime.array.DeltaContext mapProjection_;
        private zserio.runtime.array.DeltaContext tileBufferSize_;
        private zserio.runtime.array.DeltaContext maximumLatitude_;
        private nds.display.metadata.DisplayScaleTileLevelMapping.ZserioPackingContext displayScaleTileLevelMapping_;
    };

    public HeightmapLayerMetadata()
    {
    }

    public HeightmapLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public HeightmapLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public HeightmapLayerMetadata(
            nds.display.types.TerrainOptimizationType[] availableUsageTypes_,
            nds.core.geometry.MapProjectionMethod mapProjection_,
            short tileBufferSize_,
            java.lang.Integer maximumLatitude_,
            nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_)
    {
        setAvailableUsageTypes(availableUsageTypes_);
        setMapProjection(mapProjection_);
        setTileBufferSize(tileBufferSize_);
        setMaximumLatitude(maximumLatitude_);
        setDisplayScaleTileLevelMapping(displayScaleTileLevelMapping_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        mapProjection_.initPackingContext(zserioContext.getMapProjection());
        zserioContext.getTileBufferSize().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(tileBufferSize_));
        if (isMaximumLatitudeUsed())
        {
            zserioContext.getMaximumLatitude().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }
        displayScaleTileLevelMapping_.initPackingContext(zserioContext.getDisplayScaleTileLevelMapping());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += availableUsageTypes_.bitSizeOf(endBitPosition);
        endBitPosition += mapProjection_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(tileBufferSize_);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition += displayScaleTileLevelMapping_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += availableUsageTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += mapProjection_.bitSizeOf(zserioContext.getMapProjection(), endBitPosition);
        endBitPosition += zserioContext.getTileBufferSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(tileBufferSize_));
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += zserioContext.getMaximumLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }
        endBitPosition += displayScaleTileLevelMapping_.bitSizeOf(zserioContext.getDisplayScaleTileLevelMapping(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.TerrainOptimizationType[] getAvailableUsageTypes()
    {
        return (availableUsageTypes_ == null) ? null : availableUsageTypes_.getRawArray();
    }

    public void setAvailableUsageTypes(nds.display.types.TerrainOptimizationType[] availableUsageTypes_)
    {
        this.availableUsageTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TerrainOptimizationType.class, availableUsageTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TerrainOptimizationType>(new ZserioElementFactory_availableUsageTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.core.geometry.MapProjectionMethod getMapProjection()
    {
        return mapProjection_;
    }

    public void setMapProjection(nds.core.geometry.MapProjectionMethod mapProjection_)
    {
        this.mapProjection_ = mapProjection_;
    }

    public short getTileBufferSize()
    {
        return tileBufferSize_;
    }

    public void setTileBufferSize(short tileBufferSize_)
    {
        this.tileBufferSize_ = tileBufferSize_;
    }

    public java.lang.Integer getMaximumLatitude()
    {
        return maximumLatitude_;
    }

    public void setMaximumLatitude(java.lang.Integer maximumLatitude_)
    {
        this.maximumLatitude_ = maximumLatitude_;
    }

    public boolean isMaximumLatitudeUsed()
    {
        return (getMapProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857);
    }

    public boolean isMaximumLatitudeSet()
    {
        return (maximumLatitude_ != null);
    }

    public void resetMaximumLatitude()
    {
        this.maximumLatitude_ = null;
    }

    public nds.display.metadata.DisplayScaleTileLevelMapping getDisplayScaleTileLevelMapping()
    {
        return displayScaleTileLevelMapping_;
    }

    public void setDisplayScaleTileLevelMapping(nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_)
    {
        this.displayScaleTileLevelMapping_ = displayScaleTileLevelMapping_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof HeightmapLayerMetadata)
        {
            final HeightmapLayerMetadata that = (HeightmapLayerMetadata)obj;

            return
                    ((availableUsageTypes_ == null) ? that.availableUsageTypes_ == null : availableUsageTypes_.equals(that.availableUsageTypes_)) &&
                    ((mapProjection_ == null) ? that.mapProjection_ == null : mapProjection_.getValue() == that.mapProjection_.getValue()) &&
                    tileBufferSize_ == that.tileBufferSize_ &&
                    ((!isMaximumLatitudeUsed()) ? !that.isMaximumLatitudeUsed() :
                        ((maximumLatitude_ == null) ? that.maximumLatitude_ == null : maximumLatitude_.equals(that.maximumLatitude_))) &&
                    ((displayScaleTileLevelMapping_ == null) ? that.displayScaleTileLevelMapping_ == null : displayScaleTileLevelMapping_.equals(that.displayScaleTileLevelMapping_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableUsageTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, mapProjection_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, tileBufferSize_);
        if (isMaximumLatitudeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, maximumLatitude_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayScaleTileLevelMapping_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        availableUsageTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TerrainOptimizationType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TerrainOptimizationType>(new ZserioElementFactory_availableUsageTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        availableUsageTypes_.read(in);

        mapProjection_ = nds.core.geometry.MapProjectionMethod.readEnum(in);

        tileBufferSize_ = in.readVarUInt16();

        if (getMapProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857)
        {
            maximumLatitude_ = in.readInt();
        }

        displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        availableUsageTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TerrainOptimizationType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TerrainOptimizationType>(new ZserioElementFactory_availableUsageTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        availableUsageTypes_.readPacked(in);

        mapProjection_ = nds.core.geometry.MapProjectionMethod.readEnum(zserioContext.getMapProjection(), in);

        tileBufferSize_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getTileBufferSize().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        if (getMapProjection() == nds.core.geometry.MapProjectionMethod.WEB_MERCATOR_EPSG_3857)
        {
            maximumLatitude_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getMaximumLatitude().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), in)).get();
        }

        displayScaleTileLevelMapping_ = new nds.display.metadata.DisplayScaleTileLevelMapping(zserioContext.getDisplayScaleTileLevelMapping(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = availableUsageTypes_.initializeOffsets(endBitPosition);
        endBitPosition += mapProjection_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(tileBufferSize_);
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += 32;
        }
        endBitPosition = displayScaleTileLevelMapping_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = availableUsageTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = mapProjection_.initializeOffsets(zserioContext.getMapProjection(), endBitPosition);
        endBitPosition += zserioContext.getTileBufferSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(tileBufferSize_));
        if (isMaximumLatitudeUsed())
        {
            endBitPosition += zserioContext.getMaximumLatitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }
        endBitPosition = displayScaleTileLevelMapping_.initializeOffsets(zserioContext.getDisplayScaleTileLevelMapping(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        availableUsageTypes_.write(out);

        mapProjection_.write(out);

        out.writeVarUInt16(tileBufferSize_);

        if (isMaximumLatitudeUsed())
        {
            out.writeInt(maximumLatitude_);
        }

        displayScaleTileLevelMapping_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        availableUsageTypes_.writePacked(out);

        mapProjection_.write(zserioContext.getMapProjection(), out);

        zserioContext.getTileBufferSize().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(tileBufferSize_));

        if (isMaximumLatitudeUsed())
        {
            zserioContext.getMaximumLatitude().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldIntArrayTraits((int)(32)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maximumLatitude_));
        }

        displayScaleTileLevelMapping_.write(zserioContext.getDisplayScaleTileLevelMapping(), out);
    }

    private static final class ZserioElementFactory_availableUsageTypes implements zserio.runtime.array.PackableElementFactory<nds.display.types.TerrainOptimizationType>
    {
        @Override
        public nds.display.types.TerrainOptimizationType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TerrainOptimizationType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.TerrainOptimizationType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.TerrainOptimizationType(context, in);
        }
    }

    private zserio.runtime.array.Array availableUsageTypes_;
    private nds.core.geometry.MapProjectionMethod mapProjection_;
    private short tileBufferSize_;
    private java.lang.Integer maximumLatitude_;
    private nds.display.metadata.DisplayScaleTileLevelMapping displayScaleTileLevelMapping_;
}
