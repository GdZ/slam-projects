/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class DisplayLineTypeHierarchyRelation implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            parent_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getParent()
        {
            return parent_;
        }

        private zserio.runtime.array.DeltaContext parent_;
    };

    public DisplayLineTypeHierarchyRelation()
    {
    }

    public DisplayLineTypeHierarchyRelation(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DisplayLineTypeHierarchyRelation(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DisplayLineTypeHierarchyRelation(
            nds.display.types.DisplayLineType parent_,
            nds.display.types.DisplayLineType[] children_)
    {
        setParent(parent_);
        setChildren(children_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        parent_.initPackingContext(zserioContext.getParent());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += parent_.bitSizeOf(endBitPosition);
        endBitPosition += children_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += parent_.bitSizeOf(zserioContext.getParent(), endBitPosition);
        endBitPosition += children_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.DisplayLineType getParent()
    {
        return parent_;
    }

    public void setParent(nds.display.types.DisplayLineType parent_)
    {
        this.parent_ = parent_;
    }

    public nds.display.types.DisplayLineType[] getChildren()
    {
        return (children_ == null) ? null : children_.getRawArray();
    }

    public void setChildren(nds.display.types.DisplayLineType[] children_)
    {
        this.children_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class, children_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_children()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DisplayLineTypeHierarchyRelation)
        {
            final DisplayLineTypeHierarchyRelation that = (DisplayLineTypeHierarchyRelation)obj;

            return
                    ((parent_ == null) ? that.parent_ == null : parent_.getValue() == that.parent_.getValue()) &&
                    ((children_ == null) ? that.children_ == null : children_.equals(that.children_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, parent_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, children_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        parent_ = nds.display.types.DisplayLineType.readEnum(in);

        children_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_children()),
                zserio.runtime.array.ArrayType.AUTO);
        children_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        parent_ = nds.display.types.DisplayLineType.readEnum(zserioContext.getParent(), in);

        children_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_children()),
                zserio.runtime.array.ArrayType.AUTO);
        children_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += parent_.bitSizeOf(endBitPosition);
        endBitPosition = children_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = parent_.initializeOffsets(zserioContext.getParent(), endBitPosition);
        endBitPosition = children_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        parent_.write(out);

        children_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        parent_.write(zserioContext.getParent(), out);

        children_.writePacked(out);
    }

    private static final class ZserioElementFactory_children implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayLineType>
    {
        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(context, in);
        }
    }

    private nds.display.types.DisplayLineType parent_;
    private zserio.runtime.array.Array children_;
}
