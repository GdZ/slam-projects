/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.metadata;

public class DrawingOrderMapping implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numDisplayPointTypes_ = new zserio.runtime.array.DeltaContext();
            numDisplayLineTypes_ = new zserio.runtime.array.DeltaContext();
            numDisplayAreaTypes_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumDisplayPointTypes()
        {
            return numDisplayPointTypes_;
        }

        public zserio.runtime.array.DeltaContext getNumDisplayLineTypes()
        {
            return numDisplayLineTypes_;
        }

        public zserio.runtime.array.DeltaContext getNumDisplayAreaTypes()
        {
            return numDisplayAreaTypes_;
        }

        private zserio.runtime.array.DeltaContext numDisplayPointTypes_;
        private zserio.runtime.array.DeltaContext numDisplayLineTypes_;
        private zserio.runtime.array.DeltaContext numDisplayAreaTypes_;
    };

    public DrawingOrderMapping()
    {
    }

    public DrawingOrderMapping(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DrawingOrderMapping(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DrawingOrderMapping(
            int numDisplayPointTypes_,
            int numDisplayLineTypes_,
            int numDisplayAreaTypes_,
            nds.display.types.DisplayPointType[] displayPointType_,
            short[] displayPointDrawingOrder_,
            nds.display.types.DisplayLineType[] displayLineType_,
            short[] displayLineDrawingOrder_,
            nds.display.types.DisplayAreaType[] displayAreaType_,
            short[] displayAreaDrawingOrder_)
    {
        setNumDisplayPointTypes(numDisplayPointTypes_);
        setNumDisplayLineTypes(numDisplayLineTypes_);
        setNumDisplayAreaTypes(numDisplayAreaTypes_);
        setDisplayPointType(displayPointType_);
        setDisplayPointDrawingOrder(displayPointDrawingOrder_);
        setDisplayLineType(displayLineType_);
        setDisplayLineDrawingOrder(displayLineDrawingOrder_);
        setDisplayAreaType(displayAreaType_);
        setDisplayAreaDrawingOrder(displayAreaDrawingOrder_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDisplayPointTypes().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayPointTypes_));
        zserioContext.getNumDisplayLineTypes().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayLineTypes_));
        zserioContext.getNumDisplayAreaTypes().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayAreaTypes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayPointTypes_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayLineTypes_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayAreaTypes_);
        endBitPosition += displayPointType_.bitSizeOf(endBitPosition);
        endBitPosition += displayPointDrawingOrder_.bitSizeOf(endBitPosition);
        endBitPosition += displayLineType_.bitSizeOf(endBitPosition);
        endBitPosition += displayLineDrawingOrder_.bitSizeOf(endBitPosition);
        endBitPosition += displayAreaType_.bitSizeOf(endBitPosition);
        endBitPosition += displayAreaDrawingOrder_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDisplayPointTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayPointTypes_));
        endBitPosition += zserioContext.getNumDisplayLineTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayLineTypes_));
        endBitPosition += zserioContext.getNumDisplayAreaTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayAreaTypes_));
        endBitPosition += displayPointType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += displayPointDrawingOrder_.bitSizeOfPacked(endBitPosition);
        endBitPosition += displayLineType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += displayLineDrawingOrder_.bitSizeOfPacked(endBitPosition);
        endBitPosition += displayAreaType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += displayAreaDrawingOrder_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumDisplayPointTypes()
    {
        return numDisplayPointTypes_;
    }

    public void setNumDisplayPointTypes(int numDisplayPointTypes_)
    {
        this.numDisplayPointTypes_ = numDisplayPointTypes_;
    }

    public int getNumDisplayLineTypes()
    {
        return numDisplayLineTypes_;
    }

    public void setNumDisplayLineTypes(int numDisplayLineTypes_)
    {
        this.numDisplayLineTypes_ = numDisplayLineTypes_;
    }

    public int getNumDisplayAreaTypes()
    {
        return numDisplayAreaTypes_;
    }

    public void setNumDisplayAreaTypes(int numDisplayAreaTypes_)
    {
        this.numDisplayAreaTypes_ = numDisplayAreaTypes_;
    }

    public nds.display.types.DisplayPointType[] getDisplayPointType()
    {
        return (displayPointType_ == null) ? null : displayPointType_.getRawArray();
    }

    public void setDisplayPointType(nds.display.types.DisplayPointType[] displayPointType_)
    {
        this.displayPointType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class, displayPointType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_displayPointType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getDisplayPointDrawingOrder()
    {
        return (displayPointDrawingOrder_ == null) ? null : displayPointDrawingOrder_.getRawArray();
    }

    public void setDisplayPointDrawingOrder(short[] displayPointDrawingOrder_)
    {
        this.displayPointDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(displayPointDrawingOrder_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.display.types.DisplayLineType[] getDisplayLineType()
    {
        return (displayLineType_ == null) ? null : displayLineType_.getRawArray();
    }

    public void setDisplayLineType(nds.display.types.DisplayLineType[] displayLineType_)
    {
        this.displayLineType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class, displayLineType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_displayLineType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getDisplayLineDrawingOrder()
    {
        return (displayLineDrawingOrder_ == null) ? null : displayLineDrawingOrder_.getRawArray();
    }

    public void setDisplayLineDrawingOrder(short[] displayLineDrawingOrder_)
    {
        this.displayLineDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(displayLineDrawingOrder_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.display.types.DisplayAreaType[] getDisplayAreaType()
    {
        return (displayAreaType_ == null) ? null : displayAreaType_.getRawArray();
    }

    public void setDisplayAreaType(nds.display.types.DisplayAreaType[] displayAreaType_)
    {
        this.displayAreaType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class, displayAreaType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_displayAreaType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public short[] getDisplayAreaDrawingOrder()
    {
        return (displayAreaDrawingOrder_ == null) ? null : displayAreaDrawingOrder_.getRawArray();
    }

    public void setDisplayAreaDrawingOrder(short[] displayAreaDrawingOrder_)
    {
        this.displayAreaDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(displayAreaDrawingOrder_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DrawingOrderMapping)
        {
            final DrawingOrderMapping that = (DrawingOrderMapping)obj;

            return
                    numDisplayPointTypes_ == that.numDisplayPointTypes_ &&
                    numDisplayLineTypes_ == that.numDisplayLineTypes_ &&
                    numDisplayAreaTypes_ == that.numDisplayAreaTypes_ &&
                    ((displayPointType_ == null) ? that.displayPointType_ == null : displayPointType_.equals(that.displayPointType_)) &&
                    ((displayPointDrawingOrder_ == null) ? that.displayPointDrawingOrder_ == null : displayPointDrawingOrder_.equals(that.displayPointDrawingOrder_)) &&
                    ((displayLineType_ == null) ? that.displayLineType_ == null : displayLineType_.equals(that.displayLineType_)) &&
                    ((displayLineDrawingOrder_ == null) ? that.displayLineDrawingOrder_ == null : displayLineDrawingOrder_.equals(that.displayLineDrawingOrder_)) &&
                    ((displayAreaType_ == null) ? that.displayAreaType_ == null : displayAreaType_.equals(that.displayAreaType_)) &&
                    ((displayAreaDrawingOrder_ == null) ? that.displayAreaDrawingOrder_ == null : displayAreaDrawingOrder_.equals(that.displayAreaDrawingOrder_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDisplayPointTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDisplayLineTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numDisplayAreaTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayPointType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayPointDrawingOrder_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayLineType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayLineDrawingOrder_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayAreaType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, displayAreaDrawingOrder_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numDisplayPointTypes_ = in.readVarSize();

        numDisplayLineTypes_ = in.readVarSize();

        numDisplayAreaTypes_ = in.readVarSize();

        displayPointType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_displayPointType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayPointType_.read(in, (int)(getNumDisplayPointTypes()));

        displayPointDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayPointDrawingOrder_.read(in, (int)(getNumDisplayPointTypes()));

        displayLineType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_displayLineType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayLineType_.read(in, (int)(getNumDisplayLineTypes()));

        displayLineDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayLineDrawingOrder_.read(in, (int)(getNumDisplayLineTypes()));

        displayAreaType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_displayAreaType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayAreaType_.read(in, (int)(getNumDisplayAreaTypes()));

        displayAreaDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayAreaDrawingOrder_.read(in, (int)(getNumDisplayAreaTypes()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numDisplayPointTypes_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumDisplayPointTypes().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numDisplayLineTypes_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumDisplayLineTypes().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numDisplayAreaTypes_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumDisplayAreaTypes().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        displayPointType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayPointType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayPointType>(new ZserioElementFactory_displayPointType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayPointType_.readPacked(in, (int)(getNumDisplayPointTypes()));

        displayPointDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayPointDrawingOrder_.readPacked(in, (int)(getNumDisplayPointTypes()));

        displayLineType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayLineType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayLineType>(new ZserioElementFactory_displayLineType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayLineType_.readPacked(in, (int)(getNumDisplayLineTypes()));

        displayLineDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayLineDrawingOrder_.readPacked(in, (int)(getNumDisplayLineTypes()));

        displayAreaType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.display.types.DisplayAreaType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.DisplayAreaType>(new ZserioElementFactory_displayAreaType()),
                zserio.runtime.array.ArrayType.NORMAL);
        displayAreaType_.readPacked(in, (int)(getNumDisplayAreaTypes()));

        displayAreaDrawingOrder_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        displayAreaDrawingOrder_.readPacked(in, (int)(getNumDisplayAreaTypes()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayPointTypes_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayLineTypes_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numDisplayAreaTypes_);
        endBitPosition = displayPointType_.initializeOffsets(endBitPosition);
        endBitPosition = displayPointDrawingOrder_.initializeOffsets(endBitPosition);
        endBitPosition = displayLineType_.initializeOffsets(endBitPosition);
        endBitPosition = displayLineDrawingOrder_.initializeOffsets(endBitPosition);
        endBitPosition = displayAreaType_.initializeOffsets(endBitPosition);
        endBitPosition = displayAreaDrawingOrder_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumDisplayPointTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayPointTypes_));
        endBitPosition += zserioContext.getNumDisplayLineTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayLineTypes_));
        endBitPosition += zserioContext.getNumDisplayAreaTypes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayAreaTypes_));
        endBitPosition = displayPointType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = displayPointDrawingOrder_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = displayLineType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = displayLineDrawingOrder_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = displayAreaType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = displayAreaDrawingOrder_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numDisplayPointTypes_);

        out.writeVarSize(numDisplayLineTypes_);

        out.writeVarSize(numDisplayAreaTypes_);

        if (displayPointType_.size() != (int)(getNumDisplayPointTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayPointType: " +
                    displayPointType_.size() + " != " + (int)(getNumDisplayPointTypes()) + "!");
        }
        displayPointType_.write(out);

        if (displayPointDrawingOrder_.size() != (int)(getNumDisplayPointTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: " +
                    displayPointDrawingOrder_.size() + " != " + (int)(getNumDisplayPointTypes()) + "!");
        }
        displayPointDrawingOrder_.write(out);

        if (displayLineType_.size() != (int)(getNumDisplayLineTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayLineType: " +
                    displayLineType_.size() + " != " + (int)(getNumDisplayLineTypes()) + "!");
        }
        displayLineType_.write(out);

        if (displayLineDrawingOrder_.size() != (int)(getNumDisplayLineTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: " +
                    displayLineDrawingOrder_.size() + " != " + (int)(getNumDisplayLineTypes()) + "!");
        }
        displayLineDrawingOrder_.write(out);

        if (displayAreaType_.size() != (int)(getNumDisplayAreaTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayAreaType: " +
                    displayAreaType_.size() + " != " + (int)(getNumDisplayAreaTypes()) + "!");
        }
        displayAreaType_.write(out);

        if (displayAreaDrawingOrder_.size() != (int)(getNumDisplayAreaTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: " +
                    displayAreaDrawingOrder_.size() + " != " + (int)(getNumDisplayAreaTypes()) + "!");
        }
        displayAreaDrawingOrder_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumDisplayPointTypes().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayPointTypes_));

        zserioContext.getNumDisplayLineTypes().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayLineTypes_));

        zserioContext.getNumDisplayAreaTypes().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numDisplayAreaTypes_));

        if (displayPointType_.size() != (int)(getNumDisplayPointTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayPointType: " +
                    displayPointType_.size() + " != " + (int)(getNumDisplayPointTypes()) + "!");
        }
        displayPointType_.writePacked(out);

        if (displayPointDrawingOrder_.size() != (int)(getNumDisplayPointTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayPointDrawingOrder: " +
                    displayPointDrawingOrder_.size() + " != " + (int)(getNumDisplayPointTypes()) + "!");
        }
        displayPointDrawingOrder_.writePacked(out);

        if (displayLineType_.size() != (int)(getNumDisplayLineTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayLineType: " +
                    displayLineType_.size() + " != " + (int)(getNumDisplayLineTypes()) + "!");
        }
        displayLineType_.writePacked(out);

        if (displayLineDrawingOrder_.size() != (int)(getNumDisplayLineTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayLineDrawingOrder: " +
                    displayLineDrawingOrder_.size() + " != " + (int)(getNumDisplayLineTypes()) + "!");
        }
        displayLineDrawingOrder_.writePacked(out);

        if (displayAreaType_.size() != (int)(getNumDisplayAreaTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayAreaType: " +
                    displayAreaType_.size() + " != " + (int)(getNumDisplayAreaTypes()) + "!");
        }
        displayAreaType_.writePacked(out);

        if (displayAreaDrawingOrder_.size() != (int)(getNumDisplayAreaTypes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field DrawingOrderMapping.displayAreaDrawingOrder: " +
                    displayAreaDrawingOrder_.size() + " != " + (int)(getNumDisplayAreaTypes()) + "!");
        }
        displayAreaDrawingOrder_.writePacked(out);
    }

    private static final class ZserioElementFactory_displayPointType implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayPointType>
    {
        @Override
        public nds.display.types.DisplayPointType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayPointType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayPointType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayPointType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_displayLineType implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayLineType>
    {
        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayLineType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayLineType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_displayAreaType implements zserio.runtime.array.PackableElementFactory<nds.display.types.DisplayAreaType>
    {
        @Override
        public nds.display.types.DisplayAreaType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.display.types.DisplayAreaType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.DisplayAreaType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.display.types.DisplayAreaType.readEnum(context, in);
        }
    }

    private int numDisplayPointTypes_;
    private int numDisplayLineTypes_;
    private int numDisplayAreaTypes_;
    private zserio.runtime.array.Array displayPointType_;
    private zserio.runtime.array.Array displayPointDrawingOrder_;
    private zserio.runtime.array.Array displayLineType_;
    private zserio.runtime.array.Array displayLineDrawingOrder_;
    private zserio.runtime.array.Array displayAreaType_;
    private zserio.runtime.array.Array displayAreaDrawingOrder_;
}
