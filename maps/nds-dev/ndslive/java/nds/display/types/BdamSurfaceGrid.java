/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class BdamSurfaceGrid implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            southWestCorner_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            surfaceGridCellSize_ = new zserio.runtime.array.DeltaContext();
            numRows_ = new zserio.runtime.array.DeltaContext();
            numColumns_ = new zserio.runtime.array.DeltaContext();
            longSideErrorL1_ = new zserio.runtime.array.DeltaContext();
            shortSideErrorL1_ = new zserio.runtime.array.DeltaContext();
            shortSideErrorL2_ = new zserio.runtime.array.DeltaContext();
            vertexGridCellSize_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getSouthWestCorner()
        {
            return southWestCorner_;
        }

        public zserio.runtime.array.DeltaContext getSurfaceGridCellSize()
        {
            return surfaceGridCellSize_;
        }

        public zserio.runtime.array.DeltaContext getNumRows()
        {
            return numRows_;
        }

        public zserio.runtime.array.DeltaContext getNumColumns()
        {
            return numColumns_;
        }

        public zserio.runtime.array.DeltaContext getLongSideErrorL1()
        {
            return longSideErrorL1_;
        }

        public zserio.runtime.array.DeltaContext getShortSideErrorL1()
        {
            return shortSideErrorL1_;
        }

        public zserio.runtime.array.DeltaContext getShortSideErrorL2()
        {
            return shortSideErrorL2_;
        }

        public zserio.runtime.array.DeltaContext getVertexGridCellSize()
        {
            return vertexGridCellSize_;
        }

        private nds.core.geometry.Position2D.ZserioPackingContext southWestCorner_;
        private zserio.runtime.array.DeltaContext surfaceGridCellSize_;
        private zserio.runtime.array.DeltaContext numRows_;
        private zserio.runtime.array.DeltaContext numColumns_;
        private zserio.runtime.array.DeltaContext longSideErrorL1_;
        private zserio.runtime.array.DeltaContext shortSideErrorL1_;
        private zserio.runtime.array.DeltaContext shortSideErrorL2_;
        private zserio.runtime.array.DeltaContext vertexGridCellSize_;
    };

    public BdamSurfaceGrid(
            nds.display.types.BdamLayerHeader header_)
    {
        this.header_ = header_;
    }

    public BdamSurfaceGrid(zserio.runtime.io.BitStreamReader in,
            nds.display.types.BdamLayerHeader header_)
            throws java.io.IOException
    {
        this.header_ = header_;

        read(in);
    }

    public BdamSurfaceGrid(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.display.types.BdamLayerHeader header_)
            throws java.io.IOException
    {
        this.header_ = header_;

        read(context, in);
    }

    public BdamSurfaceGrid(
            nds.display.types.BdamLayerHeader header_,
            nds.core.geometry.Position2D southWestCorner_,
            int surfaceGridCellSize_,
            int numRows_,
            int numColumns_,
            int longSideErrorL1_,
            int shortSideErrorL1_,
            int shortSideErrorL2_,
            int vertexGridCellSize_,
            nds.display.types.BdamSurface[] surfaces_)
    {
        this(header_);

        setSouthWestCorner(southWestCorner_);
        setSurfaceGridCellSize(surfaceGridCellSize_);
        setNumRows(numRows_);
        setNumColumns(numColumns_);
        setLongSideErrorL1(longSideErrorL1_);
        setShortSideErrorL1(shortSideErrorL1_);
        setShortSideErrorL2(shortSideErrorL2_);
        setVertexGridCellSize(vertexGridCellSize_);
        setSurfaces(surfaces_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_.initPackingContext(zserioContext.getSouthWestCorner());
        zserioContext.getSurfaceGridCellSize().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(surfaceGridCellSize_));
        zserioContext.getNumRows().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        zserioContext.getNumColumns().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
        zserioContext.getLongSideErrorL1().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longSideErrorL1_));
        zserioContext.getShortSideErrorL1().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL1_));
        zserioContext.getShortSideErrorL2().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL2_));
        zserioContext.getVertexGridCellSize().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(vertexGridCellSize_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += southWestCorner_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(surfaceGridCellSize_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRows_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numColumns_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(longSideErrorL1_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(shortSideErrorL1_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(shortSideErrorL2_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(vertexGridCellSize_);
        endBitPosition += surfaces_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += southWestCorner_.bitSizeOf(zserioContext.getSouthWestCorner(), endBitPosition);
        endBitPosition += zserioContext.getSurfaceGridCellSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(surfaceGridCellSize_));
        endBitPosition += zserioContext.getNumRows().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        endBitPosition += zserioContext.getNumColumns().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
        endBitPosition += zserioContext.getLongSideErrorL1().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longSideErrorL1_));
        endBitPosition += zserioContext.getShortSideErrorL1().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL1_));
        endBitPosition += zserioContext.getShortSideErrorL2().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL2_));
        endBitPosition += zserioContext.getVertexGridCellSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(vertexGridCellSize_));
        endBitPosition += surfaces_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.BdamLayerHeader getHeader()
    {
        return this.header_;
    }

    public nds.core.geometry.Position2D getSouthWestCorner()
    {
        return southWestCorner_;
    }

    public void setSouthWestCorner(nds.core.geometry.Position2D southWestCorner_)
    {
        this.southWestCorner_ = southWestCorner_;
    }

    public int getSurfaceGridCellSize()
    {
        return surfaceGridCellSize_;
    }

    public void setSurfaceGridCellSize(int surfaceGridCellSize_)
    {
        this.surfaceGridCellSize_ = surfaceGridCellSize_;
    }

    public int getNumRows()
    {
        return numRows_;
    }

    public void setNumRows(int numRows_)
    {
        this.numRows_ = numRows_;
    }

    public int getNumColumns()
    {
        return numColumns_;
    }

    public void setNumColumns(int numColumns_)
    {
        this.numColumns_ = numColumns_;
    }

    public int getLongSideErrorL1()
    {
        return longSideErrorL1_;
    }

    public void setLongSideErrorL1(int longSideErrorL1_)
    {
        this.longSideErrorL1_ = longSideErrorL1_;
    }

    public int getShortSideErrorL1()
    {
        return shortSideErrorL1_;
    }

    public void setShortSideErrorL1(int shortSideErrorL1_)
    {
        this.shortSideErrorL1_ = shortSideErrorL1_;
    }

    public int getShortSideErrorL2()
    {
        return shortSideErrorL2_;
    }

    public void setShortSideErrorL2(int shortSideErrorL2_)
    {
        this.shortSideErrorL2_ = shortSideErrorL2_;
    }

    public int getVertexGridCellSize()
    {
        return vertexGridCellSize_;
    }

    public void setVertexGridCellSize(int vertexGridCellSize_)
    {
        this.vertexGridCellSize_ = vertexGridCellSize_;
    }

    public nds.display.types.BdamSurface[] getSurfaces()
    {
        return (surfaces_ == null) ? null : surfaces_.getRawArray();
    }

    public void setSurfaces(nds.display.types.BdamSurface[] surfaces_)
    {
        this.surfaces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurface.class, surfaces_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurface>(new ZserioElementFactory_surfaces()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BdamSurfaceGrid)
        {
            final BdamSurfaceGrid that = (BdamSurfaceGrid)obj;

            return
                    ((this.header_ == null) ? that.header_ == null : this.header_.equals(that.header_)) &&
                    ((southWestCorner_ == null) ? that.southWestCorner_ == null : southWestCorner_.equals(that.southWestCorner_)) &&
                    surfaceGridCellSize_ == that.surfaceGridCellSize_ &&
                    numRows_ == that.numRows_ &&
                    numColumns_ == that.numColumns_ &&
                    longSideErrorL1_ == that.longSideErrorL1_ &&
                    shortSideErrorL1_ == that.shortSideErrorL1_ &&
                    shortSideErrorL2_ == that.shortSideErrorL2_ &&
                    vertexGridCellSize_ == that.vertexGridCellSize_ &&
                    ((surfaces_ == null) ? that.surfaces_ == null : surfaces_.equals(that.surfaces_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHeader());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, southWestCorner_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, surfaceGridCellSize_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRows_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numColumns_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, longSideErrorL1_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, shortSideErrorL1_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, shortSideErrorL2_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, vertexGridCellSize_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, surfaces_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        southWestCorner_ = new nds.core.geometry.Position2D(in, (byte)(getHeader().getShiftXY()));

        surfaceGridCellSize_ = in.readVarSize();

        numRows_ = in.readVarSize();

        numColumns_ = in.readVarSize();

        longSideErrorL1_ = in.readVarSize();

        shortSideErrorL1_ = in.readVarSize();

        shortSideErrorL2_ = in.readVarSize();

        vertexGridCellSize_ = in.readVarSize();

        surfaces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurface.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurface>(new ZserioElementFactory_surfaces()),
                zserio.runtime.array.ArrayType.NORMAL);
        surfaces_.read(in, (int)(getNumRows() * getNumColumns()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_ = new nds.core.geometry.Position2D(zserioContext.getSouthWestCorner(), in, (byte)(getHeader().getShiftXY()));

        surfaceGridCellSize_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getSurfaceGridCellSize().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numRows_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumRows().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        numColumns_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumColumns().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        longSideErrorL1_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLongSideErrorL1().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        shortSideErrorL1_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getShortSideErrorL1().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        shortSideErrorL2_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getShortSideErrorL2().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        vertexGridCellSize_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getVertexGridCellSize().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        surfaces_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurface.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurface>(new ZserioElementFactory_surfaces()),
                zserio.runtime.array.ArrayType.NORMAL);
        surfaces_.readPacked(in, (int)(getNumRows() * getNumColumns()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = southWestCorner_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(surfaceGridCellSize_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRows_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numColumns_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(longSideErrorL1_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(shortSideErrorL1_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(shortSideErrorL2_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(vertexGridCellSize_);
        endBitPosition = surfaces_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = southWestCorner_.initializeOffsets(zserioContext.getSouthWestCorner(), endBitPosition);
        endBitPosition += zserioContext.getSurfaceGridCellSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(surfaceGridCellSize_));
        endBitPosition += zserioContext.getNumRows().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));
        endBitPosition += zserioContext.getNumColumns().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));
        endBitPosition += zserioContext.getLongSideErrorL1().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(longSideErrorL1_));
        endBitPosition += zserioContext.getShortSideErrorL1().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL1_));
        endBitPosition += zserioContext.getShortSideErrorL2().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL2_));
        endBitPosition += zserioContext.getVertexGridCellSize().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(vertexGridCellSize_));
        endBitPosition = surfaces_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (southWestCorner_.getShift() != (byte)(getHeader().getShiftXY()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field BdamSurfaceGrid.southWestCorner: " +
                    southWestCorner_.getShift() + " != " + (byte)(getHeader().getShiftXY()) + "!");
        }
        southWestCorner_.write(out);

        out.writeVarSize(surfaceGridCellSize_);

        out.writeVarSize(numRows_);

        out.writeVarSize(numColumns_);

        out.writeVarSize(longSideErrorL1_);

        out.writeVarSize(shortSideErrorL1_);

        out.writeVarSize(shortSideErrorL2_);

        out.writeVarSize(vertexGridCellSize_);

        if (surfaces_.size() != (int)(getNumRows() * getNumColumns()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurfaceGrid.surfaces: " +
                    surfaces_.size() + " != " + (int)(getNumRows() * getNumColumns()) + "!");
        }
        surfaces_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        southWestCorner_.write(zserioContext.getSouthWestCorner(), out);

        zserioContext.getSurfaceGridCellSize().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(surfaceGridCellSize_));

        zserioContext.getNumRows().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRows_));

        zserioContext.getNumColumns().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numColumns_));

        zserioContext.getLongSideErrorL1().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(longSideErrorL1_));

        zserioContext.getShortSideErrorL1().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL1_));

        zserioContext.getShortSideErrorL2().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(shortSideErrorL2_));

        zserioContext.getVertexGridCellSize().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(vertexGridCellSize_));

        if (surfaces_.size() != (int)(getNumRows() * getNumColumns()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurfaceGrid.surfaces: " +
                    surfaces_.size() + " != " + (int)(getNumRows() * getNumColumns()) + "!");
        }
        surfaces_.writePacked(out);
    }

    private final class ZserioElementFactory_surfaces implements zserio.runtime.array.PackableElementFactory<nds.display.types.BdamSurface>
    {
        @Override
        public nds.display.types.BdamSurface create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.BdamSurface(in, getHeader(), (int)(getSurfaceGridCellSize()), (int)(getVertexGridCellSize()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.BdamSurface.ZserioPackingContext();
        }

        @Override
        public nds.display.types.BdamSurface create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.BdamSurface(context, in, getHeader(), (int)(getSurfaceGridCellSize()), (int)(getVertexGridCellSize()));
        }
    }

    private final nds.display.types.BdamLayerHeader header_;
    private nds.core.geometry.Position2D southWestCorner_;
    private int surfaceGridCellSize_;
    private int numRows_;
    private int numColumns_;
    private int longSideErrorL1_;
    private int shortSideErrorL1_;
    private int shortSideErrorL2_;
    private int vertexGridCellSize_;
    private zserio.runtime.array.Array surfaces_;
}
