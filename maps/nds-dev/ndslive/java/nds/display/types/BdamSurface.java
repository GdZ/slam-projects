/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class BdamSurface implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public BdamSurface(
            nds.display.types.BdamLayerHeader header_,
            int surfaceCellSize_,
            int vertexCellSize_)
    {
        this.header_ = header_;
        this.surfaceCellSize_ = surfaceCellSize_;
        this.vertexCellSize_ = vertexCellSize_;
    }

    public BdamSurface(zserio.runtime.io.BitStreamReader in,
            nds.display.types.BdamLayerHeader header_,
            int surfaceCellSize_,
            int vertexCellSize_)
            throws java.io.IOException
    {
        this.header_ = header_;
        this.surfaceCellSize_ = surfaceCellSize_;
        this.vertexCellSize_ = vertexCellSize_;

        read(in);
    }

    public BdamSurface(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.display.types.BdamLayerHeader header_,
            int surfaceCellSize_,
            int vertexCellSize_)
            throws java.io.IOException
    {
        this.header_ = header_;
        this.surfaceCellSize_ = surfaceCellSize_;
        this.vertexCellSize_ = vertexCellSize_;

        read(context, in);
    }

    public BdamSurface(
            nds.display.types.BdamLayerHeader header_,
            int surfaceCellSize_,
            int vertexCellSize_,
            boolean hasRegularVertexGrid_,
            nds.display.types.RegularGridVertex[] regularVertexGrid_,
            nds.core.geometry.Position3D[] vertices_,
            nds.display.types.NormalSphere[] normals_,
            nds.display.types.TextureCoords[] textureCoordinates_,
            nds.display.types.BdamSurfaceTin[] surfaceTins_)
    {
        this(header_, surfaceCellSize_, vertexCellSize_);

        setHasRegularVertexGrid(hasRegularVertexGrid_);
        setRegularVertexGrid(regularVertexGrid_);
        setVertices(vertices_);
        setNormals(normals_);
        setTextureCoordinates(textureCoordinates_);
        setSurfaceTins(surfaceTins_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRegularVertexGridUsed())
        {
            endBitPosition += regularVertexGrid_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += vertices_.bitSizeOfPacked(endBitPosition);
        endBitPosition += normals_.bitSizeOfPacked(endBitPosition);
        if (isTextureCoordinatesUsed())
        {
            endBitPosition += textureCoordinates_.bitSizeOf(endBitPosition);
        }
        endBitPosition += surfaceTins_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRegularVertexGridUsed())
        {
            endBitPosition += regularVertexGrid_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += vertices_.bitSizeOfPacked(endBitPosition);
        endBitPosition += normals_.bitSizeOfPacked(endBitPosition);
        if (isTextureCoordinatesUsed())
        {
            endBitPosition += textureCoordinates_.bitSizeOf(endBitPosition);
        }
        endBitPosition += surfaceTins_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.BdamLayerHeader getHeader()
    {
        return this.header_;
    }

    public int getSurfaceCellSize()
    {
        return this.surfaceCellSize_;
    }

    public int getVertexCellSize()
    {
        return this.vertexCellSize_;
    }

    public boolean getHasRegularVertexGrid()
    {
        return hasRegularVertexGrid_;
    }

    public void setHasRegularVertexGrid(boolean hasRegularVertexGrid_)
    {
        this.hasRegularVertexGrid_ = hasRegularVertexGrid_;
    }

    public nds.display.types.RegularGridVertex[] getRegularVertexGrid()
    {
        return (regularVertexGrid_ == null) ? null : regularVertexGrid_.getRawArray();
    }

    public void setRegularVertexGrid(nds.display.types.RegularGridVertex[] regularVertexGrid_)
    {
        if (regularVertexGrid_ == null)
        {
            this.regularVertexGrid_ = null;
        }
        else
        {
            this.regularVertexGrid_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.RegularGridVertex.class, regularVertexGrid_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.RegularGridVertex>(new ZserioElementFactory_regularVertexGrid()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isRegularVertexGridUsed()
    {
        return (getHasRegularVertexGrid() == true);
    }

    public boolean isRegularVertexGridSet()
    {
        return (regularVertexGrid_ != null);
    }

    public void resetRegularVertexGrid()
    {
        this.regularVertexGrid_ = null;
    }

    public nds.core.geometry.Position3D[] getVertices()
    {
        return (vertices_ == null) ? null : vertices_.getRawArray();
    }

    public void setVertices(nds.core.geometry.Position3D[] vertices_)
    {
        this.vertices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class, vertices_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_vertices()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.display.types.NormalSphere[] getNormals()
    {
        return (normals_ == null) ? null : normals_.getRawArray();
    }

    public void setNormals(nds.display.types.NormalSphere[] normals_)
    {
        this.normals_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class, normals_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.display.types.TextureCoords[] getTextureCoordinates()
    {
        return (textureCoordinates_ == null) ? null : textureCoordinates_.getRawArray();
    }

    public void setTextureCoordinates(nds.display.types.TextureCoords[] textureCoordinates_)
    {
        if (textureCoordinates_ == null)
        {
            this.textureCoordinates_ = null;
        }
        else
        {
            this.textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class, textureCoordinates_),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isTextureCoordinatesUsed()
    {
        return (getHeader().getHasTexture() == true);
    }

    public boolean isTextureCoordinatesSet()
    {
        return (textureCoordinates_ != null);
    }

    public void resetTextureCoordinates()
    {
        this.textureCoordinates_ = null;
    }

    public nds.display.types.BdamSurfaceTin[] getSurfaceTins()
    {
        return (surfaceTins_ == null) ? null : surfaceTins_.getRawArray();
    }

    public void setSurfaceTins(nds.display.types.BdamSurfaceTin[] surfaceTins_)
    {
        this.surfaceTins_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceTin.class, surfaceTins_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceTin>(new ZserioElementFactory_surfaceTins()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int funcNumGridVertices()
    {
        return (int)((getHasRegularVertexGrid()) ? ((getSurfaceCellSize() / getVertexCellSize()) * (getSurfaceCellSize() / getVertexCellSize())) : 0);
    }

    public int funcNumVertices()
    {
        return (int)(getVertices().length + funcNumGridVertices());
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BdamSurface)
        {
            final BdamSurface that = (BdamSurface)obj;

            return
                    ((this.header_ == null) ? that.header_ == null : this.header_.equals(that.header_)) &&
                    this.surfaceCellSize_ == that.surfaceCellSize_ &&
                    this.vertexCellSize_ == that.vertexCellSize_ &&
                    hasRegularVertexGrid_ == that.hasRegularVertexGrid_ &&
                    ((!isRegularVertexGridUsed()) ? !that.isRegularVertexGridUsed() :
                        ((regularVertexGrid_ == null) ? that.regularVertexGrid_ == null : regularVertexGrid_.equals(that.regularVertexGrid_))) &&
                    ((vertices_ == null) ? that.vertices_ == null : vertices_.equals(that.vertices_)) &&
                    ((normals_ == null) ? that.normals_ == null : normals_.equals(that.normals_)) &&
                    ((!isTextureCoordinatesUsed()) ? !that.isTextureCoordinatesUsed() :
                        ((textureCoordinates_ == null) ? that.textureCoordinates_ == null : textureCoordinates_.equals(that.textureCoordinates_))) &&
                    ((surfaceTins_ == null) ? that.surfaceTins_ == null : surfaceTins_.equals(that.surfaceTins_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHeader());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getSurfaceCellSize());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getVertexCellSize());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasRegularVertexGrid_);
        if (isRegularVertexGridUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, regularVertexGrid_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, vertices_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, normals_);
        if (isTextureCoordinatesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureCoordinates_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, surfaceTins_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasRegularVertexGrid_ = in.readBool();

        if (getHasRegularVertexGrid() == true)
        {
            regularVertexGrid_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.RegularGridVertex.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.RegularGridVertex>(new ZserioElementFactory_regularVertexGrid()),
                    zserio.runtime.array.ArrayType.NORMAL);
            regularVertexGrid_.readPacked(in, (int)(funcNumGridVertices()));
        }

        vertices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_vertices()),
                zserio.runtime.array.ArrayType.AUTO);
        vertices_.readPacked(in);

        normals_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                zserio.runtime.array.ArrayType.NORMAL);
        normals_.readPacked(in, (int)(getVertices().length));

        if (getHeader().getHasTexture() == true)
        {
            textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordinates_.read(in, (int)(getVertices().length));
        }

        surfaceTins_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceTin.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceTin>(new ZserioElementFactory_surfaceTins()),
                zserio.runtime.array.ArrayType.NORMAL);
        surfaceTins_.read(in, (int)(6));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasRegularVertexGrid_ = in.readBool();

        if (getHasRegularVertexGrid() == true)
        {
            regularVertexGrid_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.RegularGridVertex.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.RegularGridVertex>(new ZserioElementFactory_regularVertexGrid()),
                    zserio.runtime.array.ArrayType.NORMAL);
            regularVertexGrid_.readPacked(in, (int)(funcNumGridVertices()));
        }

        vertices_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Position3D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Position3D>(new ZserioElementFactory_vertices()),
                zserio.runtime.array.ArrayType.AUTO);
        vertices_.readPacked(in);

        normals_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                zserio.runtime.array.ArrayType.NORMAL);
        normals_.readPacked(in, (int)(getVertices().length));

        if (getHeader().getHasTexture() == true)
        {
            textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordinates_.read(in, (int)(getVertices().length));
        }

        surfaceTins_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceTin.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceTin>(new ZserioElementFactory_surfaceTins()),
                zserio.runtime.array.ArrayType.NORMAL);
        surfaceTins_.readPacked(in, (int)(6));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRegularVertexGridUsed())
        {
            endBitPosition = regularVertexGrid_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = vertices_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = normals_.initializeOffsetsPacked(endBitPosition);
        if (isTextureCoordinatesUsed())
        {
            endBitPosition = textureCoordinates_.initializeOffsets(endBitPosition);
        }
        endBitPosition = surfaceTins_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isRegularVertexGridUsed())
        {
            endBitPosition = regularVertexGrid_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = vertices_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = normals_.initializeOffsetsPacked(endBitPosition);
        if (isTextureCoordinatesUsed())
        {
            endBitPosition = textureCoordinates_.initializeOffsets(endBitPosition);
        }
        endBitPosition = surfaceTins_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasRegularVertexGrid_);

        if (isRegularVertexGridUsed())
        {
            if (regularVertexGrid_.size() != (int)(funcNumGridVertices()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.regularVertexGrid: " +
                        regularVertexGrid_.size() + " != " + (int)(funcNumGridVertices()) + "!");
            }
            regularVertexGrid_.writePacked(out);
        }

        vertices_.writePacked(out);

        if (normals_.size() != (int)(getVertices().length))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.normals: " +
                    normals_.size() + " != " + (int)(getVertices().length) + "!");
        }
        normals_.writePacked(out);

        if (isTextureCoordinatesUsed())
        {
            if (textureCoordinates_.size() != (int)(getVertices().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.textureCoordinates: " +
                        textureCoordinates_.size() + " != " + (int)(getVertices().length) + "!");
            }
            textureCoordinates_.write(out);
        }

        if (surfaceTins_.size() != (int)(6))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.surfaceTins: " +
                    surfaceTins_.size() + " != " + (int)(6) + "!");
        }
        surfaceTins_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        out.writeBool(hasRegularVertexGrid_);

        if (isRegularVertexGridUsed())
        {
            if (regularVertexGrid_.size() != (int)(funcNumGridVertices()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.regularVertexGrid: " +
                        regularVertexGrid_.size() + " != " + (int)(funcNumGridVertices()) + "!");
            }
            regularVertexGrid_.writePacked(out);
        }

        vertices_.writePacked(out);

        if (normals_.size() != (int)(getVertices().length))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.normals: " +
                    normals_.size() + " != " + (int)(getVertices().length) + "!");
        }
        normals_.writePacked(out);

        if (isTextureCoordinatesUsed())
        {
            if (textureCoordinates_.size() != (int)(getVertices().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.textureCoordinates: " +
                        textureCoordinates_.size() + " != " + (int)(getVertices().length) + "!");
            }
            textureCoordinates_.write(out);
        }

        if (surfaceTins_.size() != (int)(6))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field BdamSurface.surfaceTins: " +
                    surfaceTins_.size() + " != " + (int)(6) + "!");
        }
        surfaceTins_.writePacked(out);
    }

    private final class ZserioElementFactory_regularVertexGrid implements zserio.runtime.array.PackableElementFactory<nds.display.types.RegularGridVertex>
    {
        @Override
        public nds.display.types.RegularGridVertex create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.RegularGridVertex(in, (byte)(getHeader().getShiftZ()), (boolean)(getHeader().getHasTexture()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.RegularGridVertex.ZserioPackingContext();
        }

        @Override
        public nds.display.types.RegularGridVertex create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.RegularGridVertex(context, in, (byte)(getHeader().getShiftZ()), (boolean)(getHeader().getHasTexture()));
        }
    }

    private final class ZserioElementFactory_vertices implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Position3D>
    {
        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(in, (byte)(getHeader().getShiftXY()), (byte)(getHeader().getShiftZ()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Position3D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Position3D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Position3D(context, in, (byte)(getHeader().getShiftXY()), (byte)(getHeader().getShiftZ()));
        }
    }

    private static final class ZserioElementFactory_normals implements zserio.runtime.array.PackableElementFactory<nds.display.types.NormalSphere>
    {
        @Override
        public nds.display.types.NormalSphere create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.NormalSphere(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.NormalSphere.ZserioPackingContext();
        }

        @Override
        public nds.display.types.NormalSphere create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.NormalSphere(context, in);
        }
    }

    private static final class ZserioElementFactory_textureCoordinates implements zserio.runtime.array.ElementFactory<nds.display.types.TextureCoords>
    {
        @Override
        public nds.display.types.TextureCoords create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureCoords(in);
        }
    }

    private final class ZserioElementFactory_surfaceTins implements zserio.runtime.array.PackableElementFactory<nds.display.types.BdamSurfaceTin>
    {
        @Override
        public nds.display.types.BdamSurfaceTin create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.BdamSurfaceTin(in, (byte)(zserio.runtime.BuiltInOperators.numBits(funcNumVertices())));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.BdamSurfaceTin.ZserioPackingContext();
        }

        @Override
        public nds.display.types.BdamSurfaceTin create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.BdamSurfaceTin(context, in, (byte)(zserio.runtime.BuiltInOperators.numBits(funcNumVertices())));
        }
    }

    private final nds.display.types.BdamLayerHeader header_;
    private final int surfaceCellSize_;
    private final int vertexCellSize_;
    private boolean hasRegularVertexGrid_;
    private zserio.runtime.array.Array regularVertexGrid_;
    private zserio.runtime.array.Array vertices_;
    private zserio.runtime.array.Array normals_;
    private zserio.runtime.array.Array textureCoordinates_;
    private zserio.runtime.array.Array surfaceTins_;
}
