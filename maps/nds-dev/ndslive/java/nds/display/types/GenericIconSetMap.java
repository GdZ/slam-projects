/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class GenericIconSetMap implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numElements_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumElements()
        {
            return numElements_;
        }

        private zserio.runtime.array.DeltaContext numElements_;
    };

    public GenericIconSetMap()
    {
    }

    public GenericIconSetMap(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public GenericIconSetMap(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public GenericIconSetMap(
            java.lang.String moduleName_,
            java.lang.String moduleVersion_,
            int numElements_,
            nds.display.types.GenericIconSetMapElement[] elements_)
    {
        setModuleName(moduleName_);
        setModuleVersion(moduleVersion_);
        setNumElements(numElements_);
        setElements(elements_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumElements().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numElements_);
        endBitPosition += elements_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleVersion_);
        endBitPosition += zserioContext.getNumElements().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
        endBitPosition += elements_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.String getModuleName()
    {
        return moduleName_;
    }

    public void setModuleName(java.lang.String moduleName_)
    {
        this.moduleName_ = moduleName_;
    }

    public java.lang.String getModuleVersion()
    {
        return moduleVersion_;
    }

    public void setModuleVersion(java.lang.String moduleVersion_)
    {
        this.moduleVersion_ = moduleVersion_;
    }

    public int getNumElements()
    {
        return numElements_;
    }

    public void setNumElements(int numElements_)
    {
        this.numElements_ = numElements_;
    }

    public nds.display.types.GenericIconSetMapElement[] getElements()
    {
        return (elements_ == null) ? null : elements_.getRawArray();
    }

    public void setElements(nds.display.types.GenericIconSetMapElement[] elements_)
    {
        this.elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.GenericIconSetMapElement.class, elements_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.GenericIconSetMapElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GenericIconSetMap)
        {
            final GenericIconSetMap that = (GenericIconSetMap)obj;

            return
                    ((moduleName_ == null) ? that.moduleName_ == null : moduleName_.equals(that.moduleName_)) &&
                    ((moduleVersion_ == null) ? that.moduleVersion_ == null : moduleVersion_.equals(that.moduleVersion_)) &&
                    numElements_ == that.numElements_ &&
                    ((elements_ == null) ? that.elements_ == null : elements_.equals(that.elements_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, moduleName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, moduleVersion_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numElements_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, elements_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        moduleName_ = in.readString();

        moduleVersion_ = in.readString();

        numElements_ = in.readVarSize();

        elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.GenericIconSetMapElement.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.GenericIconSetMapElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.NORMAL);
        elements_.readPacked(in, (int)(getNumElements()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        moduleName_ = in.readString();

        moduleVersion_ = in.readString();

        numElements_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumElements().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        elements_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.GenericIconSetMapElement.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.GenericIconSetMapElement>(new ZserioElementFactory_elements()),
                zserio.runtime.array.ArrayType.NORMAL);
        elements_.readPacked(in, (int)(getNumElements()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleVersion_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numElements_);
        endBitPosition = elements_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(moduleVersion_);
        endBitPosition += zserioContext.getNumElements().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));
        endBitPosition = elements_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeString(moduleName_);

        out.writeString(moduleVersion_);

        out.writeVarSize(numElements_);

        if (elements_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field GenericIconSetMap.elements: " +
                    elements_.size() + " != " + (int)(getNumElements()) + "!");
        }
        elements_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeString(moduleName_);

        out.writeString(moduleVersion_);

        zserioContext.getNumElements().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numElements_));

        if (elements_.size() != (int)(getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field GenericIconSetMap.elements: " +
                    elements_.size() + " != " + (int)(getNumElements()) + "!");
        }
        elements_.writePacked(out);
    }

    private static final class ZserioElementFactory_elements implements zserio.runtime.array.PackableElementFactory<nds.display.types.GenericIconSetMapElement>
    {
        @Override
        public nds.display.types.GenericIconSetMapElement create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.GenericIconSetMapElement(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.GenericIconSetMapElement.ZserioPackingContext();
        }

        @Override
        public nds.display.types.GenericIconSetMapElement create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.GenericIconSetMapElement(context, in);
        }
    }

    private java.lang.String moduleName_;
    private java.lang.String moduleVersion_;
    private int numElements_;
    private zserio.runtime.array.Array elements_;
}
