/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class TextureCoords implements zserio.runtime.io.Writer, zserio.runtime.SizeOf
{
    public TextureCoords()
    {
    }

    public TextureCoords(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TextureCoords(
            float u_,
            float v_)
    {
        setU(u_);
        setV(v_);
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 16;

        return (int)(endBitPosition - bitPosition);
    }

    public float getU()
    {
        return u_;
    }

    public void setU(float u_)
    {
        this.u_ = u_;
    }

    public float getV()
    {
        return v_;
    }

    public void setV(float v_)
    {
        this.v_ = v_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TextureCoords)
        {
            final TextureCoords that = (TextureCoords)obj;

            return
                    java.lang.Float.floatToIntBits(u_) == java.lang.Float.floatToIntBits(that.u_) &&
                    java.lang.Float.floatToIntBits(v_) == java.lang.Float.floatToIntBits(that.v_);
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, u_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, v_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        u_ = in.readFloat16();

        v_ = in.readFloat16();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 16;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeFloat16(u_);

        out.writeFloat16(v_);
    }

    private float u_;
    private float v_;
}
