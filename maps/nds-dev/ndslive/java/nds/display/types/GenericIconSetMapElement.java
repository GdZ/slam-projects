/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class GenericIconSetMapElement implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
            targetEnumValue_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getTargetEnumValue()
        {
            return targetEnumValue_;
        }

        private zserio.runtime.array.DeltaContext id_;
        private zserio.runtime.array.DeltaContext targetEnumValue_;
    };

    public GenericIconSetMapElement()
    {
    }

    public GenericIconSetMapElement(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public GenericIconSetMapElement(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public GenericIconSetMapElement(
            java.math.BigInteger id_,
            java.lang.String descriptor_,
            java.lang.Long targetEnumValue_)
    {
        setId(id_);
        setDescriptor(descriptor_);
        setTargetEnumValue(targetEnumValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        if (isTargetEnumValueUsed())
        {
            zserioContext.getTargetEnumValue().init(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.LongArrayElement(targetEnumValue_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(descriptor_);
        endBitPosition += 1;
        if (isTargetEnumValueUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt(targetEnumValue_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(descriptor_);
        endBitPosition += 1;
        if (isTargetEnumValueUsed())
        {
            endBitPosition += zserioContext.getTargetEnumValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.LongArrayElement(targetEnumValue_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getId()
    {
        return id_;
    }

    public void setId(java.math.BigInteger id_)
    {
        this.id_ = id_;
    }

    public java.lang.String getDescriptor()
    {
        return descriptor_;
    }

    public void setDescriptor(java.lang.String descriptor_)
    {
        this.descriptor_ = descriptor_;
    }

    public java.lang.Long getTargetEnumValue()
    {
        return targetEnumValue_;
    }

    public void setTargetEnumValue(java.lang.Long targetEnumValue_)
    {
        this.targetEnumValue_ = targetEnumValue_;
    }

    public boolean isTargetEnumValueUsed()
    {
        return isTargetEnumValueSet();
    }

    public boolean isTargetEnumValueSet()
    {
        return (targetEnumValue_ != null);
    }

    public void resetTargetEnumValue()
    {
        this.targetEnumValue_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GenericIconSetMapElement)
        {
            final GenericIconSetMapElement that = (GenericIconSetMapElement)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    ((descriptor_ == null) ? that.descriptor_ == null : descriptor_.equals(that.descriptor_)) &&
                    ((!isTargetEnumValueUsed()) ? !that.isTargetEnumValueUsed() :
                        ((targetEnumValue_ == null) ? that.targetEnumValue_ == null : targetEnumValue_.equals(that.targetEnumValue_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, descriptor_);
        if (isTargetEnumValueUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, targetEnumValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt();

        descriptor_ = in.readString();

        if (in.readBool())
        {
            targetEnumValue_ = in.readVarInt();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        descriptor_ = in.readString();

        if (in.readBool())
        {
            targetEnumValue_ = ((zserio.runtime.array.ArrayElement.LongArrayElement)
                    zserioContext.getTargetEnumValue().read(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(descriptor_);
        endBitPosition += 1;
        if (isTargetEnumValueUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt(targetEnumValue_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(descriptor_);
        endBitPosition += 1;
        if (isTargetEnumValueUsed())
        {
            endBitPosition += zserioContext.getTargetEnumValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.LongArrayElement(targetEnumValue_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(id_);

        out.writeString(descriptor_);

        if (isTargetEnumValueUsed())
        {
            out.writeBool(true);
            out.writeVarInt(targetEnumValue_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));

        out.writeString(descriptor_);

        if (isTargetEnumValueUsed())
        {
            out.writeBool(true);
            zserioContext.getTargetEnumValue().write(new zserio.runtime.array.ArrayTraits.VarIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.LongArrayElement(targetEnumValue_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.math.BigInteger id_;
    private java.lang.String descriptor_;
    private java.lang.Long targetEnumValue_;
}
