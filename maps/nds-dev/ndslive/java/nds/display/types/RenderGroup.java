/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class RenderGroup implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            colorId_ = new zserio.runtime.array.DeltaContext();
            triangleStrip_ = new nds.display.types.RenderGroupTriangleStrip.ZserioPackingContext();
            triangles_ = new nds.display.types.RenderGroupTriangles.ZserioPackingContext();
            material_ = new nds.display.types.Material.ZserioPackingContext();
            materialAdditional_ = new nds.display.types.Material.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getColorId()
        {
            return colorId_;
        }

        public nds.display.types.RenderGroupTriangleStrip.ZserioPackingContext getTriangleStrip()
        {
            return triangleStrip_;
        }

        public nds.display.types.RenderGroupTriangles.ZserioPackingContext getTriangles()
        {
            return triangles_;
        }

        public nds.display.types.Material.ZserioPackingContext getMaterial()
        {
            return material_;
        }

        public nds.display.types.Material.ZserioPackingContext getMaterialAdditional()
        {
            return materialAdditional_;
        }

        private zserio.runtime.array.DeltaContext colorId_;
        private nds.display.types.RenderGroupTriangleStrip.ZserioPackingContext triangleStrip_;
        private nds.display.types.RenderGroupTriangles.ZserioPackingContext triangles_;
        private nds.display.types.Material.ZserioPackingContext material_;
        private nds.display.types.Material.ZserioPackingContext materialAdditional_;
    };

    public RenderGroup(
            nds.core.geometry.PolyMesh3D mesh_,
            nds.display.types.Mesh3DRenderConfiguration config_)
    {
        this.mesh_ = mesh_;
        this.config_ = config_;
    }

    public RenderGroup(zserio.runtime.io.BitStreamReader in,
            nds.core.geometry.PolyMesh3D mesh_,
            nds.display.types.Mesh3DRenderConfiguration config_)
            throws java.io.IOException
    {
        this.mesh_ = mesh_;
        this.config_ = config_;

        read(in);
    }

    public RenderGroup(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.geometry.PolyMesh3D mesh_,
            nds.display.types.Mesh3DRenderConfiguration config_)
            throws java.io.IOException
    {
        this.mesh_ = mesh_;
        this.config_ = config_;

        read(context, in);
    }

    public RenderGroup(
            nds.core.geometry.PolyMesh3D mesh_,
            nds.display.types.Mesh3DRenderConfiguration config_,
            java.lang.Short colorId_,
            nds.display.types.RenderGroupTriangleStrip triangleStrip_,
            nds.display.types.RenderGroupTriangles triangles_,
            nds.display.types.Material material_,
            nds.display.types.Material materialAdditional_)
    {
        this(mesh_, config_);

        setColorId(colorId_);
        setTriangleStrip(triangleStrip_);
        setTriangles(triangles_);
        setMaterial(material_);
        setMaterialAdditional(materialAdditional_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isColorIdUsed())
        {
            zserioContext.getColorId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        }
        if (isTriangleStripUsed())
        {
            triangleStrip_.initPackingContext(zserioContext.getTriangleStrip());
        }
        if (isTrianglesUsed())
        {
            triangles_.initPackingContext(zserioContext.getTriangles());
        }
        if (isMaterialUsed())
        {
            material_.initPackingContext(zserioContext.getMaterial());
        }
        if (isMaterialAdditionalUsed())
        {
            materialAdditional_.initPackingContext(zserioContext.getMaterialAdditional());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isColorIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(colorId_);
        }
        if (isTriangleStripUsed())
        {
            endBitPosition += triangleStrip_.bitSizeOf(endBitPosition);
        }
        if (isTrianglesUsed())
        {
            endBitPosition += triangles_.bitSizeOf(endBitPosition);
        }
        if (isMaterialUsed())
        {
            endBitPosition += material_.bitSizeOf(endBitPosition);
        }
        if (isMaterialAdditionalUsed())
        {
            endBitPosition += materialAdditional_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isColorIdUsed())
        {
            endBitPosition += zserioContext.getColorId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        }
        if (isTriangleStripUsed())
        {
            endBitPosition += triangleStrip_.bitSizeOf(zserioContext.getTriangleStrip(), endBitPosition);
        }
        if (isTrianglesUsed())
        {
            endBitPosition += triangles_.bitSizeOf(zserioContext.getTriangles(), endBitPosition);
        }
        if (isMaterialUsed())
        {
            endBitPosition += material_.bitSizeOf(zserioContext.getMaterial(), endBitPosition);
        }
        if (isMaterialAdditionalUsed())
        {
            endBitPosition += materialAdditional_.bitSizeOf(zserioContext.getMaterialAdditional(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.geometry.PolyMesh3D getMesh()
    {
        return this.mesh_;
    }

    public nds.display.types.Mesh3DRenderConfiguration getConfig()
    {
        return this.config_;
    }

    public java.lang.Short getColorId()
    {
        return colorId_;
    }

    public void setColorId(java.lang.Short colorId_)
    {
        this.colorId_ = colorId_;
    }

    public boolean isColorIdUsed()
    {
        return (getConfig().funcUsesColorPerRenderGroup());
    }

    public boolean isColorIdSet()
    {
        return (colorId_ != null);
    }

    public void resetColorId()
    {
        this.colorId_ = null;
    }

    public nds.display.types.RenderGroupTriangleStrip getTriangleStrip()
    {
        return triangleStrip_;
    }

    public void setTriangleStrip(nds.display.types.RenderGroupTriangleStrip triangleStrip_)
    {
        this.triangleStrip_ = triangleStrip_;
    }

    public boolean isTriangleStripUsed()
    {
        return (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLE_STRIP);
    }

    public boolean isTriangleStripSet()
    {
        return (triangleStrip_ != null);
    }

    public void resetTriangleStrip()
    {
        this.triangleStrip_ = null;
    }

    public nds.display.types.RenderGroupTriangles getTriangles()
    {
        return triangles_;
    }

    public void setTriangles(nds.display.types.RenderGroupTriangles triangles_)
    {
        this.triangles_ = triangles_;
    }

    public boolean isTrianglesUsed()
    {
        return (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLES);
    }

    public boolean isTrianglesSet()
    {
        return (triangles_ != null);
    }

    public void resetTriangles()
    {
        this.triangles_ = null;
    }

    public nds.display.types.Material getMaterial()
    {
        return material_;
    }

    public void setMaterial(nds.display.types.Material material_)
    {
        this.material_ = material_;
    }

    public boolean isMaterialUsed()
    {
        return (getConfig().getHasTextureCoords() == true);
    }

    public boolean isMaterialSet()
    {
        return (material_ != null);
    }

    public void resetMaterial()
    {
        this.material_ = null;
    }

    public nds.display.types.Material getMaterialAdditional()
    {
        return materialAdditional_;
    }

    public void setMaterialAdditional(nds.display.types.Material materialAdditional_)
    {
        this.materialAdditional_ = materialAdditional_;
    }

    public boolean isMaterialAdditionalUsed()
    {
        return (getConfig().getHasTextureCoordsAdditional() == true);
    }

    public boolean isMaterialAdditionalSet()
    {
        return (materialAdditional_ != null);
    }

    public void resetMaterialAdditional()
    {
        this.materialAdditional_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RenderGroup)
        {
            final RenderGroup that = (RenderGroup)obj;

            return
                    ((this.mesh_ == null) ? that.mesh_ == null : this.mesh_.equals(that.mesh_)) &&
                    ((this.config_ == null) ? that.config_ == null : this.config_.equals(that.config_)) &&
                    ((!isColorIdUsed()) ? !that.isColorIdUsed() :
                        ((colorId_ == null) ? that.colorId_ == null : colorId_.equals(that.colorId_))) &&
                    ((!isTriangleStripUsed()) ? !that.isTriangleStripUsed() :
                        ((triangleStrip_ == null) ? that.triangleStrip_ == null : triangleStrip_.equals(that.triangleStrip_))) &&
                    ((!isTrianglesUsed()) ? !that.isTrianglesUsed() :
                        ((triangles_ == null) ? that.triangles_ == null : triangles_.equals(that.triangles_))) &&
                    ((!isMaterialUsed()) ? !that.isMaterialUsed() :
                        ((material_ == null) ? that.material_ == null : material_.equals(that.material_))) &&
                    ((!isMaterialAdditionalUsed()) ? !that.isMaterialAdditionalUsed() :
                        ((materialAdditional_ == null) ? that.materialAdditional_ == null : materialAdditional_.equals(that.materialAdditional_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getMesh());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getConfig());
        if (isColorIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorId_);
        if (isTriangleStripUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, triangleStrip_);
        if (isTrianglesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, triangles_);
        if (isMaterialUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, material_);
        if (isMaterialAdditionalUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, materialAdditional_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (getConfig().funcUsesColorPerRenderGroup())
        {
            colorId_ = in.readVarUInt16();
        }

        if (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLE_STRIP)
        {
            triangleStrip_ = new nds.display.types.RenderGroupTriangleStrip(in, getMesh(), getConfig());
        }

        if (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLES)
        {
            triangles_ = new nds.display.types.RenderGroupTriangles(in, getMesh(), getConfig());
        }

        if (getConfig().getHasTextureCoords() == true)
        {
            material_ = new nds.display.types.Material(in);
        }

        if (getConfig().getHasTextureCoordsAdditional() == true)
        {
            materialAdditional_ = new nds.display.types.Material(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (getConfig().funcUsesColorPerRenderGroup())
        {
            colorId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getColorId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLE_STRIP)
        {
            triangleStrip_ = new nds.display.types.RenderGroupTriangleStrip(zserioContext.getTriangleStrip(), in, getMesh(), getConfig());
        }

        if (getMesh().getIndexType() == nds.core.geometry.IndexType.TRIANGLES)
        {
            triangles_ = new nds.display.types.RenderGroupTriangles(zserioContext.getTriangles(), in, getMesh(), getConfig());
        }

        if (getConfig().getHasTextureCoords() == true)
        {
            material_ = new nds.display.types.Material(zserioContext.getMaterial(), in);
        }

        if (getConfig().getHasTextureCoordsAdditional() == true)
        {
            materialAdditional_ = new nds.display.types.Material(zserioContext.getMaterialAdditional(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isColorIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(colorId_);
        }
        if (isTriangleStripUsed())
        {
            endBitPosition = triangleStrip_.initializeOffsets(endBitPosition);
        }
        if (isTrianglesUsed())
        {
            endBitPosition = triangles_.initializeOffsets(endBitPosition);
        }
        if (isMaterialUsed())
        {
            endBitPosition = material_.initializeOffsets(endBitPosition);
        }
        if (isMaterialAdditionalUsed())
        {
            endBitPosition = materialAdditional_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isColorIdUsed())
        {
            endBitPosition += zserioContext.getColorId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        }
        if (isTriangleStripUsed())
        {
            endBitPosition = triangleStrip_.initializeOffsets(zserioContext.getTriangleStrip(), endBitPosition);
        }
        if (isTrianglesUsed())
        {
            endBitPosition = triangles_.initializeOffsets(zserioContext.getTriangles(), endBitPosition);
        }
        if (isMaterialUsed())
        {
            endBitPosition = material_.initializeOffsets(zserioContext.getMaterial(), endBitPosition);
        }
        if (isMaterialAdditionalUsed())
        {
            endBitPosition = materialAdditional_.initializeOffsets(zserioContext.getMaterialAdditional(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isColorIdUsed())
        {
            out.writeVarUInt16(colorId_);
        }

        if (isTriangleStripUsed())
        {
            // check parameters
            if (triangleStrip_.getMesh() != (getMesh()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter mesh for field RenderGroup.triangleStrip!");
            }
            if (triangleStrip_.getConfig() != (getConfig()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter config for field RenderGroup.triangleStrip!");
            }
            triangleStrip_.write(out);
        }

        if (isTrianglesUsed())
        {
            // check parameters
            if (triangles_.getMesh() != (getMesh()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter mesh for field RenderGroup.triangles!");
            }
            if (triangles_.getConfig() != (getConfig()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter config for field RenderGroup.triangles!");
            }
            triangles_.write(out);
        }

        if (isMaterialUsed())
        {
            material_.write(out);
        }

        if (isMaterialAdditionalUsed())
        {
            materialAdditional_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isColorIdUsed())
        {
            zserioContext.getColorId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        }

        if (isTriangleStripUsed())
        {
            triangleStrip_.write(zserioContext.getTriangleStrip(), out);
        }

        if (isTrianglesUsed())
        {
            triangles_.write(zserioContext.getTriangles(), out);
        }

        if (isMaterialUsed())
        {
            material_.write(zserioContext.getMaterial(), out);
        }

        if (isMaterialAdditionalUsed())
        {
            materialAdditional_.write(zserioContext.getMaterialAdditional(), out);
        }
    }

    private final nds.core.geometry.PolyMesh3D mesh_;
    private final nds.display.types.Mesh3DRenderConfiguration config_;
    private java.lang.Short colorId_;
    private nds.display.types.RenderGroupTriangleStrip triangleStrip_;
    private nds.display.types.RenderGroupTriangles triangles_;
    private nds.display.types.Material material_;
    private nds.display.types.Material materialAdditional_;
}
