/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class Mesh3DRenderLayerHeader implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            colorModes_ = new zserio.runtime.array.DeltaContext();
            numColorIds_ = new zserio.runtime.array.DeltaContext();
            numNormals_ = new zserio.runtime.array.DeltaContext();
            numTextureCoords_ = new zserio.runtime.array.DeltaContext();
            numTextureCoordsAdditional_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getColorModes()
        {
            return colorModes_;
        }

        public zserio.runtime.array.DeltaContext getNumColorIds()
        {
            return numColorIds_;
        }

        public zserio.runtime.array.DeltaContext getNumNormals()
        {
            return numNormals_;
        }

        public zserio.runtime.array.DeltaContext getNumTextureCoords()
        {
            return numTextureCoords_;
        }

        public zserio.runtime.array.DeltaContext getNumTextureCoordsAdditional()
        {
            return numTextureCoordsAdditional_;
        }

        private zserio.runtime.array.DeltaContext colorModes_;
        private zserio.runtime.array.DeltaContext numColorIds_;
        private zserio.runtime.array.DeltaContext numNormals_;
        private zserio.runtime.array.DeltaContext numTextureCoords_;
        private zserio.runtime.array.DeltaContext numTextureCoordsAdditional_;
    };

    public Mesh3DRenderLayerHeader()
    {
    }

    public Mesh3DRenderLayerHeader(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Mesh3DRenderLayerHeader(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Mesh3DRenderLayerHeader(
            nds.display.types.UsedColorModes colorModes_,
            java.lang.Integer numColorIds_,
            boolean hasNormals_,
            java.lang.Integer numNormals_,
            boolean hasTextureCoords_,
            java.lang.Integer numTextureCoords_,
            boolean hasTextureCoordsAdditional_,
            java.lang.Integer numTextureCoordsAdditional_)
    {
        setColorModes(colorModes_);
        setNumColorIds(numColorIds_);
        setHasNormals(hasNormals_);
        setNumNormals(numNormals_);
        setHasTextureCoords(hasTextureCoords_);
        setNumTextureCoords(numTextureCoords_);
        setHasTextureCoordsAdditional(hasTextureCoordsAdditional_);
        setNumTextureCoordsAdditional(numTextureCoordsAdditional_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorModes_.initPackingContext(zserioContext.getColorModes());
        if (isNumColorIdsUsed())
        {
            zserioContext.getNumColorIds().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numColorIds_));
        }
        if (isNumNormalsUsed())
        {
            zserioContext.getNumNormals().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numNormals_));
        }
        if (isNumTextureCoordsUsed())
        {
            zserioContext.getNumTextureCoords().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoords_));
        }
        if (isNumTextureCoordsAdditionalUsed())
        {
            zserioContext.getNumTextureCoordsAdditional().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoordsAdditional_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += colorModes_.bitSizeOf(endBitPosition);
        if (isNumColorIdsUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += 1;
        if (isNumNormalsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numNormals_);
        }
        endBitPosition += 1;
        if (isNumTextureCoordsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTextureCoords_);
        }
        endBitPosition += 1;
        if (isNumTextureCoordsAdditionalUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTextureCoordsAdditional_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += colorModes_.bitSizeOf(zserioContext.getColorModes(), endBitPosition);
        if (isNumColorIdsUsed())
        {
            endBitPosition += zserioContext.getNumColorIds().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numColorIds_));
        }
        endBitPosition += 1;
        if (isNumNormalsUsed())
        {
            endBitPosition += zserioContext.getNumNormals().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numNormals_));
        }
        endBitPosition += 1;
        if (isNumTextureCoordsUsed())
        {
            endBitPosition += zserioContext.getNumTextureCoords().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoords_));
        }
        endBitPosition += 1;
        if (isNumTextureCoordsAdditionalUsed())
        {
            endBitPosition += zserioContext.getNumTextureCoordsAdditional().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoordsAdditional_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.UsedColorModes getColorModes()
    {
        return colorModes_;
    }

    public void setColorModes(nds.display.types.UsedColorModes colorModes_)
    {
        this.colorModes_ = colorModes_;
    }

    public java.lang.Integer getNumColorIds()
    {
        return numColorIds_;
    }

    public void setNumColorIds(java.lang.Integer numColorIds_)
    {
        this.numColorIds_ = numColorIds_;
    }

    public boolean isNumColorIdsUsed()
    {
        return ((funcHasColorPerVertex() == true));
    }

    public boolean isNumColorIdsSet()
    {
        return (numColorIds_ != null);
    }

    public void resetNumColorIds()
    {
        this.numColorIds_ = null;
    }

    public boolean getHasNormals()
    {
        return hasNormals_;
    }

    public void setHasNormals(boolean hasNormals_)
    {
        this.hasNormals_ = hasNormals_;
    }

    public java.lang.Integer getNumNormals()
    {
        return numNormals_;
    }

    public void setNumNormals(java.lang.Integer numNormals_)
    {
        this.numNormals_ = numNormals_;
    }

    public boolean isNumNormalsUsed()
    {
        return (getHasNormals() == true);
    }

    public boolean isNumNormalsSet()
    {
        return (numNormals_ != null);
    }

    public void resetNumNormals()
    {
        this.numNormals_ = null;
    }

    public boolean getHasTextureCoords()
    {
        return hasTextureCoords_;
    }

    public void setHasTextureCoords(boolean hasTextureCoords_)
    {
        this.hasTextureCoords_ = hasTextureCoords_;
    }

    public java.lang.Integer getNumTextureCoords()
    {
        return numTextureCoords_;
    }

    public void setNumTextureCoords(java.lang.Integer numTextureCoords_)
    {
        this.numTextureCoords_ = numTextureCoords_;
    }

    public boolean isNumTextureCoordsUsed()
    {
        return (getHasTextureCoords());
    }

    public boolean isNumTextureCoordsSet()
    {
        return (numTextureCoords_ != null);
    }

    public void resetNumTextureCoords()
    {
        this.numTextureCoords_ = null;
    }

    public boolean getHasTextureCoordsAdditional()
    {
        return hasTextureCoordsAdditional_;
    }

    public void setHasTextureCoordsAdditional(boolean hasTextureCoordsAdditional_)
    {
        this.hasTextureCoordsAdditional_ = hasTextureCoordsAdditional_;
    }

    public java.lang.Integer getNumTextureCoordsAdditional()
    {
        return numTextureCoordsAdditional_;
    }

    public void setNumTextureCoordsAdditional(java.lang.Integer numTextureCoordsAdditional_)
    {
        this.numTextureCoordsAdditional_ = numTextureCoordsAdditional_;
    }

    public boolean isNumTextureCoordsAdditionalUsed()
    {
        return (getHasTextureCoordsAdditional());
    }

    public boolean isNumTextureCoordsAdditionalSet()
    {
        return (numTextureCoordsAdditional_ != null);
    }

    public void resetNumTextureCoordsAdditional()
    {
        this.numTextureCoordsAdditional_ = null;
    }

    public boolean funcUsesColors()
    {
        return (boolean)(getColorModes().getValue() > 0);
    }

    public boolean funcHasColorPerVertex()
    {
        return (boolean)((getColorModes().and(nds.display.types.UsedColorModes.Values.COLOR_PER_VERTEX)).equals(nds.display.types.UsedColorModes.Values.COLOR_PER_VERTEX));
    }

    public int funcNumOfColorIds()
    {
        return (int)(((getColorModes().and(nds.display.types.UsedColorModes.Values.COLOR_PER_VERTEX)).equals(nds.display.types.UsedColorModes.Values.COLOR_PER_VERTEX)) ? getNumColorIds() : 0);
    }

    public int funcNumOfNormals()
    {
        return (int)((getHasNormals()) ? getNumNormals() : 0);
    }

    public int funcNumOfTextureCoords()
    {
        return (int)((getHasTextureCoords()) ? getNumTextureCoords() : 0);
    }

    public int funcNumOfTextureCoordsAdditional()
    {
        return (int)((getHasTextureCoordsAdditional()) ? getNumTextureCoordsAdditional() : 0);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Mesh3DRenderLayerHeader)
        {
            final Mesh3DRenderLayerHeader that = (Mesh3DRenderLayerHeader)obj;

            return
                    ((colorModes_ == null) ? that.colorModes_ == null : colorModes_.equals(that.colorModes_)) &&
                    ((!isNumColorIdsUsed()) ? !that.isNumColorIdsUsed() :
                        ((numColorIds_ == null) ? that.numColorIds_ == null : numColorIds_.equals(that.numColorIds_))) &&
                    hasNormals_ == that.hasNormals_ &&
                    ((!isNumNormalsUsed()) ? !that.isNumNormalsUsed() :
                        ((numNormals_ == null) ? that.numNormals_ == null : numNormals_.equals(that.numNormals_))) &&
                    hasTextureCoords_ == that.hasTextureCoords_ &&
                    ((!isNumTextureCoordsUsed()) ? !that.isNumTextureCoordsUsed() :
                        ((numTextureCoords_ == null) ? that.numTextureCoords_ == null : numTextureCoords_.equals(that.numTextureCoords_))) &&
                    hasTextureCoordsAdditional_ == that.hasTextureCoordsAdditional_ &&
                    ((!isNumTextureCoordsAdditionalUsed()) ? !that.isNumTextureCoordsAdditionalUsed() :
                        ((numTextureCoordsAdditional_ == null) ? that.numTextureCoordsAdditional_ == null : numTextureCoordsAdditional_.equals(that.numTextureCoordsAdditional_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorModes_);
        if (isNumColorIdsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numColorIds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasNormals_);
        if (isNumNormalsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numNormals_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTextureCoords_);
        if (isNumTextureCoordsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numTextureCoords_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTextureCoordsAdditional_);
        if (isNumTextureCoordsAdditionalUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numTextureCoordsAdditional_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        colorModes_ = new nds.display.types.UsedColorModes(in);

        if ((funcHasColorPerVertex() == true))
        {
            numColorIds_ = in.readUnsignedShort();
        }

        hasNormals_ = in.readBool();

        if (getHasNormals() == true)
        {
            numNormals_ = in.readVarSize();
        }

        hasTextureCoords_ = in.readBool();

        if (getHasTextureCoords())
        {
            numTextureCoords_ = in.readVarSize();
        }

        hasTextureCoordsAdditional_ = in.readBool();

        if (getHasTextureCoordsAdditional())
        {
            numTextureCoordsAdditional_ = in.readVarSize();
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorModes_ = new nds.display.types.UsedColorModes(zserioContext.getColorModes(), in);

        if ((funcHasColorPerVertex() == true))
        {
            numColorIds_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumColorIds().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();
        }

        hasNormals_ = in.readBool();

        if (getHasNormals() == true)
        {
            numNormals_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumNormals().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        hasTextureCoords_ = in.readBool();

        if (getHasTextureCoords())
        {
            numTextureCoords_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumTextureCoords().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        hasTextureCoordsAdditional_ = in.readBool();

        if (getHasTextureCoordsAdditional())
        {
            numTextureCoordsAdditional_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumTextureCoordsAdditional().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += colorModes_.bitSizeOf(endBitPosition);
        if (isNumColorIdsUsed())
        {
            endBitPosition += 16;
        }
        endBitPosition += 1;
        if (isNumNormalsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numNormals_);
        }
        endBitPosition += 1;
        if (isNumTextureCoordsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTextureCoords_);
        }
        endBitPosition += 1;
        if (isNumTextureCoordsAdditionalUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTextureCoordsAdditional_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = colorModes_.initializeOffsets(zserioContext.getColorModes(), endBitPosition);
        if (isNumColorIdsUsed())
        {
            endBitPosition += zserioContext.getNumColorIds().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numColorIds_));
        }
        endBitPosition += 1;
        if (isNumNormalsUsed())
        {
            endBitPosition += zserioContext.getNumNormals().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numNormals_));
        }
        endBitPosition += 1;
        if (isNumTextureCoordsUsed())
        {
            endBitPosition += zserioContext.getNumTextureCoords().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoords_));
        }
        endBitPosition += 1;
        if (isNumTextureCoordsAdditionalUsed())
        {
            endBitPosition += zserioContext.getNumTextureCoordsAdditional().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoordsAdditional_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        colorModes_.write(out);

        if (isNumColorIdsUsed())
        {
            out.writeUnsignedShort(numColorIds_);
        }

        out.writeBool(hasNormals_);

        if (isNumNormalsUsed())
        {
            out.writeVarSize(numNormals_);
        }

        out.writeBool(hasTextureCoords_);

        if (isNumTextureCoordsUsed())
        {
            out.writeVarSize(numTextureCoords_);
        }

        out.writeBool(hasTextureCoordsAdditional_);

        if (isNumTextureCoordsAdditionalUsed())
        {
            out.writeVarSize(numTextureCoordsAdditional_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        colorModes_.write(zserioContext.getColorModes(), out);

        if (isNumColorIdsUsed())
        {
            zserioContext.getNumColorIds().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numColorIds_));
        }

        out.writeBool(hasNormals_);

        if (isNumNormalsUsed())
        {
            zserioContext.getNumNormals().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numNormals_));
        }

        out.writeBool(hasTextureCoords_);

        if (isNumTextureCoordsUsed())
        {
            zserioContext.getNumTextureCoords().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoords_));
        }

        out.writeBool(hasTextureCoordsAdditional_);

        if (isNumTextureCoordsAdditionalUsed())
        {
            zserioContext.getNumTextureCoordsAdditional().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTextureCoordsAdditional_));
        }
    }

    private void checkConstraints()
    {
        if (isNumNormalsUsed() && !(getNumNormals() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Mesh3DRenderLayerHeader.numNormals!");
        if (isNumTextureCoordsUsed() && !(getNumTextureCoords() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Mesh3DRenderLayerHeader.numTextureCoords!");
        if (isNumTextureCoordsAdditionalUsed() && !(getNumTextureCoordsAdditional() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Mesh3DRenderLayerHeader.numTextureCoordsAdditional!");
    }

    private nds.display.types.UsedColorModes colorModes_;
    private java.lang.Integer numColorIds_;
    private boolean hasNormals_;
    private java.lang.Integer numNormals_;
    private boolean hasTextureCoords_;
    private java.lang.Integer numTextureCoords_;
    private boolean hasTextureCoordsAdditional_;
    private java.lang.Integer numTextureCoordsAdditional_;
}
