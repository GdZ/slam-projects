/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class Style3DColor implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            colorId_ = new zserio.runtime.array.DeltaContext();
            colorRgba_ = new nds.core.color.ColorRgba.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getColorId()
        {
            return colorId_;
        }

        public nds.core.color.ColorRgba.ZserioPackingContext getColorRgba()
        {
            return colorRgba_;
        }

        private zserio.runtime.array.DeltaContext colorId_;
        private nds.core.color.ColorRgba.ZserioPackingContext colorRgba_;
    };

    public Style3DColor()
    {
    }

    public Style3DColor(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Style3DColor(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Style3DColor(
            short colorId_,
            nds.core.color.ColorRgba colorRgba_)
    {
        setColorId(colorId_);
        setColorRgba(colorRgba_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getColorId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        colorRgba_.initPackingContext(zserioContext.getColorRgba());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(colorId_);
        endBitPosition += colorRgba_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getColorId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        endBitPosition += colorRgba_.bitSizeOf(zserioContext.getColorRgba(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getColorId()
    {
        return colorId_;
    }

    public void setColorId(short colorId_)
    {
        this.colorId_ = colorId_;
    }

    public nds.core.color.ColorRgba getColorRgba()
    {
        return colorRgba_;
    }

    public void setColorRgba(nds.core.color.ColorRgba colorRgba_)
    {
        this.colorRgba_ = colorRgba_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Style3DColor)
        {
            final Style3DColor that = (Style3DColor)obj;

            return
                    colorId_ == that.colorId_ &&
                    ((colorRgba_ == null) ? that.colorRgba_ == null : colorRgba_.equals(that.colorRgba_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorRgba_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        colorId_ = in.readVarUInt16();

        colorRgba_ = new nds.core.color.ColorRgba(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getColorId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        colorRgba_ = new nds.core.color.ColorRgba(zserioContext.getColorRgba(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(colorId_);
        endBitPosition = colorRgba_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getColorId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));
        endBitPosition = colorRgba_.initializeOffsets(zserioContext.getColorRgba(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(colorId_);

        colorRgba_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getColorId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(colorId_));

        colorRgba_.write(zserioContext.getColorRgba(), out);
    }

    private short colorId_;
    private nds.core.color.ColorRgba colorRgba_;
}
