/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class TextureSectionArray implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numSections_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumSections()
        {
            return numSections_;
        }

        private zserio.runtime.array.DeltaContext numSections_;
    };

    public TextureSectionArray()
    {
    }

    public TextureSectionArray(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TextureSectionArray(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TextureSectionArray(
            short numSections_,
            nds.display.types.TextureSection[] sections_)
    {
        setNumSections(numSections_);
        setSections(sections_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumSections().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSections_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numSections_);
        endBitPosition += sections_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSections().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSections_));
        endBitPosition += sections_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumSections()
    {
        return numSections_;
    }

    public void setNumSections(short numSections_)
    {
        this.numSections_ = numSections_;
    }

    public nds.display.types.TextureSection[] getSections()
    {
        return (sections_ == null) ? null : sections_.getRawArray();
    }

    public void setSections(nds.display.types.TextureSection[] sections_)
    {
        this.sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureSection.class, sections_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TextureSectionArray)
        {
            final TextureSectionArray that = (TextureSectionArray)obj;

            return
                    numSections_ == that.numSections_ &&
                    ((sections_ == null) ? that.sections_ == null : sections_.equals(that.sections_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSections_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, sections_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numSections_ = in.readVarUInt16();

        sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureSection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.NORMAL);
        sections_.read(in, (int)(getNumSections()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numSections_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumSections().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureSection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.NORMAL);
        sections_.readPacked(in, (int)(getNumSections()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numSections_);
        endBitPosition = sections_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSections().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSections_));
        endBitPosition = sections_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numSections_);

        if (sections_.size() != (int)(getNumSections()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TextureSectionArray.sections: " +
                    sections_.size() + " != " + (int)(getNumSections()) + "!");
        }
        sections_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumSections().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSections_));

        if (sections_.size() != (int)(getNumSections()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TextureSectionArray.sections: " +
                    sections_.size() + " != " + (int)(getNumSections()) + "!");
        }
        sections_.writePacked(out);
    }

    private static final class ZserioElementFactory_sections implements zserio.runtime.array.PackableElementFactory<nds.display.types.TextureSection>
    {
        @Override
        public nds.display.types.TextureSection create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureSection(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.TextureSection.ZserioPackingContext();
        }

        @Override
        public nds.display.types.TextureSection create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.TextureSection(context, in);
        }
    }

    private short numSections_;
    private zserio.runtime.array.Array sections_;
}
