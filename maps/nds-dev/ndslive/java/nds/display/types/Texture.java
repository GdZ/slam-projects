/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class Texture implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            textureId_ = new zserio.runtime.array.DeltaContext();
            textureRenderingUsageType_ = new zserio.runtime.array.DeltaContext();
            format_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getTextureId()
        {
            return textureId_;
        }

        public zserio.runtime.array.DeltaContext getTextureRenderingUsageType()
        {
            return textureRenderingUsageType_;
        }

        public zserio.runtime.array.DeltaContext getFormat()
        {
            return format_;
        }

        private zserio.runtime.array.DeltaContext textureId_;
        private zserio.runtime.array.DeltaContext textureRenderingUsageType_;
        private zserio.runtime.array.DeltaContext format_;
    };

    public Texture()
    {
    }

    public Texture(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Texture(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Texture(
            int textureId_,
            nds.display.types.TextureRenderingUsageType textureRenderingUsageType_,
            nds.display.types.TextureFormat format_,
            boolean doubleSided_,
            nds.display.types.TextureConditionUsageType[] textureConditionUsageType_,
            nds.display.types.TextureData[] textureData_)
    {
        setTextureId(textureId_);
        setTextureRenderingUsageType(textureRenderingUsageType_);
        setFormat(format_);
        setDoubleSided(doubleSided_);
        setTextureConditionUsageType(textureConditionUsageType_);
        setTextureData(textureData_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTextureId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(textureId_));
        textureRenderingUsageType_.initPackingContext(zserioContext.getTextureRenderingUsageType());
        format_.initPackingContext(zserioContext.getFormat());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(textureId_);
        endBitPosition += textureRenderingUsageType_.bitSizeOf(endBitPosition);
        endBitPosition += format_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += textureConditionUsageType_.bitSizeOf(endBitPosition);
        endBitPosition += textureData_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTextureId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(textureId_));
        endBitPosition += textureRenderingUsageType_.bitSizeOf(zserioContext.getTextureRenderingUsageType(), endBitPosition);
        endBitPosition += format_.bitSizeOf(zserioContext.getFormat(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += textureConditionUsageType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += textureData_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getTextureId()
    {
        return textureId_;
    }

    public void setTextureId(int textureId_)
    {
        this.textureId_ = textureId_;
    }

    public nds.display.types.TextureRenderingUsageType getTextureRenderingUsageType()
    {
        return textureRenderingUsageType_;
    }

    public void setTextureRenderingUsageType(nds.display.types.TextureRenderingUsageType textureRenderingUsageType_)
    {
        this.textureRenderingUsageType_ = textureRenderingUsageType_;
    }

    public nds.display.types.TextureFormat getFormat()
    {
        return format_;
    }

    public void setFormat(nds.display.types.TextureFormat format_)
    {
        this.format_ = format_;
    }

    public boolean getDoubleSided()
    {
        return doubleSided_;
    }

    public void setDoubleSided(boolean doubleSided_)
    {
        this.doubleSided_ = doubleSided_;
    }

    public nds.display.types.TextureConditionUsageType[] getTextureConditionUsageType()
    {
        return (textureConditionUsageType_ == null) ? null : textureConditionUsageType_.getRawArray();
    }

    public void setTextureConditionUsageType(nds.display.types.TextureConditionUsageType[] textureConditionUsageType_)
    {
        this.textureConditionUsageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureConditionUsageType.class, textureConditionUsageType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureConditionUsageType>(new ZserioElementFactory_textureConditionUsageType()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.display.types.TextureData[] getTextureData()
    {
        return (textureData_ == null) ? null : textureData_.getRawArray();
    }

    public void setTextureData(nds.display.types.TextureData[] textureData_)
    {
        this.textureData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureData.class, textureData_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureData>(new ZserioElementFactory_textureData()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Texture)
        {
            final Texture that = (Texture)obj;

            return
                    textureId_ == that.textureId_ &&
                    ((textureRenderingUsageType_ == null) ? that.textureRenderingUsageType_ == null : textureRenderingUsageType_.getValue() == that.textureRenderingUsageType_.getValue()) &&
                    ((format_ == null) ? that.format_ == null : format_.getValue() == that.format_.getValue()) &&
                    doubleSided_ == that.doubleSided_ &&
                    ((textureConditionUsageType_ == null) ? that.textureConditionUsageType_ == null : textureConditionUsageType_.equals(that.textureConditionUsageType_)) &&
                    ((textureData_ == null) ? that.textureData_ == null : textureData_.equals(that.textureData_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureRenderingUsageType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, format_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, doubleSided_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureConditionUsageType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureData_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        textureId_ = in.readVarUInt32();

        textureRenderingUsageType_ = nds.display.types.TextureRenderingUsageType.readEnum(in);

        format_ = nds.display.types.TextureFormat.readEnum(in);

        doubleSided_ = in.readBool();

        textureConditionUsageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureConditionUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureConditionUsageType>(new ZserioElementFactory_textureConditionUsageType()),
                zserio.runtime.array.ArrayType.AUTO);
        textureConditionUsageType_.read(in);

        textureData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureData.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureData>(new ZserioElementFactory_textureData()),
                zserio.runtime.array.ArrayType.AUTO);
        textureData_.read(in);

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        textureId_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getTextureId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        textureRenderingUsageType_ = nds.display.types.TextureRenderingUsageType.readEnum(zserioContext.getTextureRenderingUsageType(), in);

        format_ = nds.display.types.TextureFormat.readEnum(zserioContext.getFormat(), in);

        doubleSided_ = in.readBool();

        textureConditionUsageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureConditionUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureConditionUsageType>(new ZserioElementFactory_textureConditionUsageType()),
                zserio.runtime.array.ArrayType.AUTO);
        textureConditionUsageType_.readPacked(in);

        textureData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureData.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.TextureData>(new ZserioElementFactory_textureData()),
                zserio.runtime.array.ArrayType.AUTO);
        textureData_.readPacked(in);

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(textureId_);
        endBitPosition += textureRenderingUsageType_.bitSizeOf(endBitPosition);
        endBitPosition += format_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition = textureConditionUsageType_.initializeOffsets(endBitPosition);
        endBitPosition = textureData_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTextureId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(textureId_));
        endBitPosition = textureRenderingUsageType_.initializeOffsets(zserioContext.getTextureRenderingUsageType(), endBitPosition);
        endBitPosition = format_.initializeOffsets(zserioContext.getFormat(), endBitPosition);
        endBitPosition += 1;
        endBitPosition = textureConditionUsageType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = textureData_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt32(textureId_);

        textureRenderingUsageType_.write(out);

        format_.write(out);

        out.writeBool(doubleSided_);

        textureConditionUsageType_.write(out);

        textureData_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getTextureId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(textureId_));

        textureRenderingUsageType_.write(zserioContext.getTextureRenderingUsageType(), out);

        format_.write(zserioContext.getFormat(), out);

        out.writeBool(doubleSided_);

        textureConditionUsageType_.writePacked(out);

        textureData_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getTextureData().length == getTextureConditionUsageType().length))
            throw new zserio.runtime.ConstraintError("Constraint violated at Texture.textureData!");
    }

    private static final class ZserioElementFactory_textureConditionUsageType implements zserio.runtime.array.PackableElementFactory<nds.display.types.TextureConditionUsageType>
    {
        @Override
        public nds.display.types.TextureConditionUsageType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureConditionUsageType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.display.types.TextureConditionUsageType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.TextureConditionUsageType(context, in);
        }
    }

    private static final class ZserioElementFactory_textureData implements zserio.runtime.array.PackableElementFactory<nds.display.types.TextureData>
    {
        @Override
        public nds.display.types.TextureData create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureData(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.TextureData.ZserioPackingContext();
        }

        @Override
        public nds.display.types.TextureData create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.TextureData(context, in);
        }
    }

    private int textureId_;
    private nds.display.types.TextureRenderingUsageType textureRenderingUsageType_;
    private nds.display.types.TextureFormat format_;
    private boolean doubleSided_;
    private zserio.runtime.array.Array textureConditionUsageType_;
    private zserio.runtime.array.Array textureData_;
}
