/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class ClippingEdgeList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            shift_ = new zserio.runtime.array.DeltaContext();
            numEdges_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getShift()
        {
            return shift_;
        }

        public zserio.runtime.array.DeltaContext getNumEdges()
        {
            return numEdges_;
        }

        private zserio.runtime.array.DeltaContext shift_;
        private zserio.runtime.array.DeltaContext numEdges_;
    };

    public ClippingEdgeList()
    {
    }

    public ClippingEdgeList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ClippingEdgeList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ClippingEdgeList(
            byte shift_,
            int numEdges_,
            nds.display.types.ClippingEdge[] edges_)
    {
        setShift(shift_);
        setNumEdges(numEdges_);
        setEdges(edges_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getShift().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        zserioContext.getNumEdges().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEdges_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEdges_);
        endBitPosition += edges_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition += zserioContext.getNumEdges().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEdges_));
        endBitPosition += edges_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return shift_;
    }

    public void setShift(byte shift_)
    {
        this.shift_ = shift_;
    }

    public int getNumEdges()
    {
        return numEdges_;
    }

    public void setNumEdges(int numEdges_)
    {
        this.numEdges_ = numEdges_;
    }

    public nds.display.types.ClippingEdge[] getEdges()
    {
        return (edges_ == null) ? null : edges_.getRawArray();
    }

    public void setEdges(nds.display.types.ClippingEdge[] edges_)
    {
        this.edges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.ClippingEdge.class, edges_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.ClippingEdge>(new ZserioElementFactory_edges()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ClippingEdgeList)
        {
            final ClippingEdgeList that = (ClippingEdgeList)obj;

            return
                    shift_ == that.shift_ &&
                    numEdges_ == that.numEdges_ &&
                    ((edges_ == null) ? that.edges_ == null : edges_.equals(that.edges_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, shift_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numEdges_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, edges_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        shift_ = (byte)in.readBits(5);

        numEdges_ = in.readVarSize();

        edges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.ClippingEdge.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.ClippingEdge>(new ZserioElementFactory_edges()),
                zserio.runtime.array.ArrayType.NORMAL);
        edges_.read(in, (int)(getNumEdges()));

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        shift_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getShift().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        numEdges_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumEdges().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        edges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.ClippingEdge.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.ClippingEdge>(new ZserioElementFactory_edges()),
                zserio.runtime.array.ArrayType.NORMAL);
        edges_.readPacked(in, (int)(getNumEdges()));

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numEdges_);
        endBitPosition = edges_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition += zserioContext.getNumEdges().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEdges_));
        endBitPosition = edges_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeBits(shift_, 5);

        out.writeVarSize(numEdges_);

        if (edges_.size() != (int)(getNumEdges()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ClippingEdgeList.edges: " +
                    edges_.size() + " != " + (int)(getNumEdges()) + "!");
        }
        edges_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getShift().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));

        zserioContext.getNumEdges().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numEdges_));

        if (edges_.size() != (int)(getNumEdges()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ClippingEdgeList.edges: " +
                    edges_.size() + " != " + (int)(getNumEdges()) + "!");
        }
        edges_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getNumEdges() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at ClippingEdgeList.numEdges!");
    }

    private final class ZserioElementFactory_edges implements zserio.runtime.array.PackableElementFactory<nds.display.types.ClippingEdge>
    {
        @Override
        public nds.display.types.ClippingEdge create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.ClippingEdge(in, (byte)(getShift()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.ClippingEdge.ZserioPackingContext();
        }

        @Override
        public nds.display.types.ClippingEdge create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.ClippingEdge(context, in, (byte)(getShift()));
        }
    }

    private byte shift_;
    private int numEdges_;
    private zserio.runtime.array.Array edges_;
}
