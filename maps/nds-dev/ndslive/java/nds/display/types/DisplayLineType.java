/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public enum DisplayLineType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    DISPLAY_LINE((short)0),
    LINE_ROAD((short)1),
    LINE_BLOCK_DETAIL((short)2),
    LINE_BUILDING_DETAIL((short)3),
    LINE_PUBLIC_TRANSPORT((short)4),
    LINE_RAILWAY((short)5),
    LINE_RAILWAY_LONG_DISTANCE((short)6),
    LINE_RAILWAY_REGIONAL((short)7),
    LINE_RAILWAY_LOCAL((short)8),
    LINE_SUBWAY((short)9),
    LINE_TRAM((short)10),
    LINE_MONORAIL((short)11),
    LINE_BUS((short)12),
    LINE_WATER((short)13),
    LINE_CREEK((short)14),
    LINE_DRAIN((short)15),
    LINE_RIVER((short)16),
    LINE_WADI((short)17),
    LINE_CANAL((short)18),
    LINE_BORDER((short)19),
    LINE_BORDER_COUNTRY((short)20),
    LINE_BORDER_SUB_COUNTRY_SET((short)21),
    LINE_BORDER_SUB_COUNTRY((short)22),
    LINE_BORDER_COUNTY((short)23),
    LINE_BORDER_MUNICIPALITY((short)24),
    LINE_BORDER_MUNICIPALITY_SUBDIVISION((short)25),
    LINE_BORDER_NEIGHBORHOOD((short)26),
    LINE_BORDER_CITY_BLOCK((short)27),
    LINE_BORDER_NON_ADMIN((short)28),
    LINE_BORDER_PHONE((short)29),
    LINE_BORDER_POSTAL((short)30),
    LINE_BORDER_POLICE((short)31),
    LINE_BORDER_SCHOOL((short)32),
    LINE_TIME_ZONE((short)33),
    LINE_BORDER_DISPUTED((short)34),
    LINE_BORDER_DISPUTED_COUNTRY((short)35),
    LINE_BORDER_DISPUTED_SUB_COUNTRY((short)36),
    LINE_BORDER_TREATY_LINE((short)37),
    LINE_BORDER_TREATY_LINE_COUNTRY((short)38),
    LINE_BORDER_TREATY_LINE_SUB_COUNTRY((short)39),
    LINE_SEA_BORDER_COUNTRY((short)40),
    LINE_SEA_BORDER_SUB_COUNTRY((short)41),
    LINE_BORDER_SPECIAL_ADMIN_REGION((short)42),
    LINE_SEA_BORDER_SUB_COUNTRY_SET((short)43);

    private DisplayLineType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static DisplayLineType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static DisplayLineType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static DisplayLineType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return DISPLAY_LINE;
            case (short)1:
                return LINE_ROAD;
            case (short)2:
                return LINE_BLOCK_DETAIL;
            case (short)3:
                return LINE_BUILDING_DETAIL;
            case (short)4:
                return LINE_PUBLIC_TRANSPORT;
            case (short)5:
                return LINE_RAILWAY;
            case (short)6:
                return LINE_RAILWAY_LONG_DISTANCE;
            case (short)7:
                return LINE_RAILWAY_REGIONAL;
            case (short)8:
                return LINE_RAILWAY_LOCAL;
            case (short)9:
                return LINE_SUBWAY;
            case (short)10:
                return LINE_TRAM;
            case (short)11:
                return LINE_MONORAIL;
            case (short)12:
                return LINE_BUS;
            case (short)13:
                return LINE_WATER;
            case (short)14:
                return LINE_CREEK;
            case (short)15:
                return LINE_DRAIN;
            case (short)16:
                return LINE_RIVER;
            case (short)17:
                return LINE_WADI;
            case (short)18:
                return LINE_CANAL;
            case (short)19:
                return LINE_BORDER;
            case (short)20:
                return LINE_BORDER_COUNTRY;
            case (short)21:
                return LINE_BORDER_SUB_COUNTRY_SET;
            case (short)22:
                return LINE_BORDER_SUB_COUNTRY;
            case (short)23:
                return LINE_BORDER_COUNTY;
            case (short)24:
                return LINE_BORDER_MUNICIPALITY;
            case (short)25:
                return LINE_BORDER_MUNICIPALITY_SUBDIVISION;
            case (short)26:
                return LINE_BORDER_NEIGHBORHOOD;
            case (short)27:
                return LINE_BORDER_CITY_BLOCK;
            case (short)28:
                return LINE_BORDER_NON_ADMIN;
            case (short)29:
                return LINE_BORDER_PHONE;
            case (short)30:
                return LINE_BORDER_POSTAL;
            case (short)31:
                return LINE_BORDER_POLICE;
            case (short)32:
                return LINE_BORDER_SCHOOL;
            case (short)33:
                return LINE_TIME_ZONE;
            case (short)34:
                return LINE_BORDER_DISPUTED;
            case (short)35:
                return LINE_BORDER_DISPUTED_COUNTRY;
            case (short)36:
                return LINE_BORDER_DISPUTED_SUB_COUNTRY;
            case (short)37:
                return LINE_BORDER_TREATY_LINE;
            case (short)38:
                return LINE_BORDER_TREATY_LINE_COUNTRY;
            case (short)39:
                return LINE_BORDER_TREATY_LINE_SUB_COUNTRY;
            case (short)40:
                return LINE_SEA_BORDER_COUNTRY;
            case (short)41:
                return LINE_SEA_BORDER_SUB_COUNTRY;
            case (short)42:
                return LINE_BORDER_SPECIAL_ADMIN_REGION;
            case (short)43:
                return LINE_SEA_BORDER_SUB_COUNTRY_SET;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration DisplayLineType: " + value + "!");
        }
    }

    public static DisplayLineType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("DISPLAY_LINE"))
            return DISPLAY_LINE;
        if (itemName.equals("LINE_ROAD"))
            return LINE_ROAD;
        if (itemName.equals("LINE_BLOCK_DETAIL"))
            return LINE_BLOCK_DETAIL;
        if (itemName.equals("LINE_BUILDING_DETAIL"))
            return LINE_BUILDING_DETAIL;
        if (itemName.equals("LINE_PUBLIC_TRANSPORT"))
            return LINE_PUBLIC_TRANSPORT;
        if (itemName.equals("LINE_RAILWAY"))
            return LINE_RAILWAY;
        if (itemName.equals("LINE_RAILWAY_LONG_DISTANCE"))
            return LINE_RAILWAY_LONG_DISTANCE;
        if (itemName.equals("LINE_RAILWAY_REGIONAL"))
            return LINE_RAILWAY_REGIONAL;
        if (itemName.equals("LINE_RAILWAY_LOCAL"))
            return LINE_RAILWAY_LOCAL;
        if (itemName.equals("LINE_SUBWAY"))
            return LINE_SUBWAY;
        if (itemName.equals("LINE_TRAM"))
            return LINE_TRAM;
        if (itemName.equals("LINE_MONORAIL"))
            return LINE_MONORAIL;
        if (itemName.equals("LINE_BUS"))
            return LINE_BUS;
        if (itemName.equals("LINE_WATER"))
            return LINE_WATER;
        if (itemName.equals("LINE_CREEK"))
            return LINE_CREEK;
        if (itemName.equals("LINE_DRAIN"))
            return LINE_DRAIN;
        if (itemName.equals("LINE_RIVER"))
            return LINE_RIVER;
        if (itemName.equals("LINE_WADI"))
            return LINE_WADI;
        if (itemName.equals("LINE_CANAL"))
            return LINE_CANAL;
        if (itemName.equals("LINE_BORDER"))
            return LINE_BORDER;
        if (itemName.equals("LINE_BORDER_COUNTRY"))
            return LINE_BORDER_COUNTRY;
        if (itemName.equals("LINE_BORDER_SUB_COUNTRY_SET"))
            return LINE_BORDER_SUB_COUNTRY_SET;
        if (itemName.equals("LINE_BORDER_SUB_COUNTRY"))
            return LINE_BORDER_SUB_COUNTRY;
        if (itemName.equals("LINE_BORDER_COUNTY"))
            return LINE_BORDER_COUNTY;
        if (itemName.equals("LINE_BORDER_MUNICIPALITY"))
            return LINE_BORDER_MUNICIPALITY;
        if (itemName.equals("LINE_BORDER_MUNICIPALITY_SUBDIVISION"))
            return LINE_BORDER_MUNICIPALITY_SUBDIVISION;
        if (itemName.equals("LINE_BORDER_NEIGHBORHOOD"))
            return LINE_BORDER_NEIGHBORHOOD;
        if (itemName.equals("LINE_BORDER_CITY_BLOCK"))
            return LINE_BORDER_CITY_BLOCK;
        if (itemName.equals("LINE_BORDER_NON_ADMIN"))
            return LINE_BORDER_NON_ADMIN;
        if (itemName.equals("LINE_BORDER_PHONE"))
            return LINE_BORDER_PHONE;
        if (itemName.equals("LINE_BORDER_POSTAL"))
            return LINE_BORDER_POSTAL;
        if (itemName.equals("LINE_BORDER_POLICE"))
            return LINE_BORDER_POLICE;
        if (itemName.equals("LINE_BORDER_SCHOOL"))
            return LINE_BORDER_SCHOOL;
        if (itemName.equals("LINE_TIME_ZONE"))
            return LINE_TIME_ZONE;
        if (itemName.equals("LINE_BORDER_DISPUTED"))
            return LINE_BORDER_DISPUTED;
        if (itemName.equals("LINE_BORDER_DISPUTED_COUNTRY"))
            return LINE_BORDER_DISPUTED_COUNTRY;
        if (itemName.equals("LINE_BORDER_DISPUTED_SUB_COUNTRY"))
            return LINE_BORDER_DISPUTED_SUB_COUNTRY;
        if (itemName.equals("LINE_BORDER_TREATY_LINE"))
            return LINE_BORDER_TREATY_LINE;
        if (itemName.equals("LINE_BORDER_TREATY_LINE_COUNTRY"))
            return LINE_BORDER_TREATY_LINE_COUNTRY;
        if (itemName.equals("LINE_BORDER_TREATY_LINE_SUB_COUNTRY"))
            return LINE_BORDER_TREATY_LINE_SUB_COUNTRY;
        if (itemName.equals("LINE_SEA_BORDER_COUNTRY"))
            return LINE_SEA_BORDER_COUNTRY;
        if (itemName.equals("LINE_SEA_BORDER_SUB_COUNTRY"))
            return LINE_SEA_BORDER_SUB_COUNTRY;
        if (itemName.equals("LINE_BORDER_SPECIAL_ADMIN_REGION"))
            return LINE_BORDER_SPECIAL_ADMIN_REGION;
        if (itemName.equals("LINE_SEA_BORDER_SUB_COUNTRY_SET"))
            return LINE_SEA_BORDER_SUB_COUNTRY_SET;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration DisplayLineType!");
    }

    private short value;
}
