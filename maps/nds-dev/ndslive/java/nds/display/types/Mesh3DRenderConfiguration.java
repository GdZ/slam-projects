/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class Mesh3DRenderConfiguration implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            colorMode_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getColorMode()
        {
            return colorMode_;
        }

        private zserio.runtime.array.DeltaContext colorMode_;
    };

    public Mesh3DRenderConfiguration(
            nds.display.types.Mesh3DRenderLayerHeader header_)
    {
        this.header_ = header_;
    }

    public Mesh3DRenderConfiguration(zserio.runtime.io.BitStreamReader in,
            nds.display.types.Mesh3DRenderLayerHeader header_)
            throws java.io.IOException
    {
        this.header_ = header_;

        read(in);
    }

    public Mesh3DRenderConfiguration(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.display.types.Mesh3DRenderLayerHeader header_)
            throws java.io.IOException
    {
        this.header_ = header_;

        read(context, in);
    }

    public Mesh3DRenderConfiguration(
            nds.display.types.Mesh3DRenderLayerHeader header_,
            nds.display.types.ColorMode colorMode_,
            boolean hasTextureCoords_,
            boolean hasTextureCoordsAdditional_,
            boolean hasNormals_)
    {
        this(header_);

        setColorMode(colorMode_);
        setHasTextureCoords(hasTextureCoords_);
        setHasTextureCoordsAdditional(hasTextureCoordsAdditional_);
        setHasNormals(hasNormals_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorMode_.initPackingContext(zserioContext.getColorMode());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += colorMode_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += colorMode_.bitSizeOf(zserioContext.getColorMode(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.Mesh3DRenderLayerHeader getHeader()
    {
        return this.header_;
    }

    public nds.display.types.ColorMode getColorMode()
    {
        return colorMode_;
    }

    public void setColorMode(nds.display.types.ColorMode colorMode_)
    {
        this.colorMode_ = colorMode_;
    }

    public boolean getHasTextureCoords()
    {
        return hasTextureCoords_;
    }

    public void setHasTextureCoords(boolean hasTextureCoords_)
    {
        this.hasTextureCoords_ = hasTextureCoords_;
    }

    public boolean getHasTextureCoordsAdditional()
    {
        return hasTextureCoordsAdditional_;
    }

    public void setHasTextureCoordsAdditional(boolean hasTextureCoordsAdditional_)
    {
        this.hasTextureCoordsAdditional_ = hasTextureCoordsAdditional_;
    }

    public boolean getHasNormals()
    {
        return hasNormals_;
    }

    public void setHasNormals(boolean hasNormals_)
    {
        this.hasNormals_ = hasNormals_;
    }

    public boolean funcUsesColorPerVertex()
    {
        return (boolean)(getHeader().funcUsesColors() && getColorMode() == nds.display.types.ColorMode.COLOR_PER_VERTEX);
    }

    public boolean funcUsesColorPerRenderGroup()
    {
        return (boolean)(getHeader().funcUsesColors() && getColorMode() == nds.display.types.ColorMode.COLOR_PER_RENDER_GROUP);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Mesh3DRenderConfiguration)
        {
            final Mesh3DRenderConfiguration that = (Mesh3DRenderConfiguration)obj;

            return
                    ((this.header_ == null) ? that.header_ == null : this.header_.equals(that.header_)) &&
                    ((colorMode_ == null) ? that.colorMode_ == null : colorMode_.getValue() == that.colorMode_.getValue()) &&
                    hasTextureCoords_ == that.hasTextureCoords_ &&
                    hasTextureCoordsAdditional_ == that.hasTextureCoordsAdditional_ &&
                    hasNormals_ == that.hasNormals_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHeader());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorMode_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTextureCoords_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTextureCoordsAdditional_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasNormals_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        colorMode_ = nds.display.types.ColorMode.readEnum(in);

        hasTextureCoords_ = in.readBool();

        hasTextureCoordsAdditional_ = in.readBool();

        hasNormals_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorMode_ = nds.display.types.ColorMode.readEnum(zserioContext.getColorMode(), in);

        hasTextureCoords_ = in.readBool();

        hasTextureCoordsAdditional_ = in.readBool();

        hasNormals_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += colorMode_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = colorMode_.initializeOffsets(zserioContext.getColorMode(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        colorMode_.write(out);

        out.writeBool(hasTextureCoords_);

        out.writeBool(hasTextureCoordsAdditional_);

        out.writeBool(hasNormals_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        colorMode_.write(zserioContext.getColorMode(), out);

        out.writeBool(hasTextureCoords_);

        out.writeBool(hasTextureCoordsAdditional_);

        out.writeBool(hasNormals_);
    }

    private final nds.display.types.Mesh3DRenderLayerHeader header_;
    private nds.display.types.ColorMode colorMode_;
    private boolean hasTextureCoords_;
    private boolean hasTextureCoordsAdditional_;
    private boolean hasNormals_;
}
