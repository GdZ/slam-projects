/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.types;

public class Material implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new nds.display.types.MaterialContent.ZserioPackingContext();
            ambient_ = new zserio.runtime.array.DeltaContext();
            diffuse_ = new zserio.runtime.array.DeltaContext();
            specular_ = new zserio.runtime.array.DeltaContext();
            shininess_ = new zserio.runtime.array.DeltaContext();
            texture_ = new nds.display.reference.types.TextureReference.ZserioPackingContext();
        }

        public nds.display.types.MaterialContent.ZserioPackingContext getContent()
        {
            return content_;
        }

        public zserio.runtime.array.DeltaContext getAmbient()
        {
            return ambient_;
        }

        public zserio.runtime.array.DeltaContext getDiffuse()
        {
            return diffuse_;
        }

        public zserio.runtime.array.DeltaContext getSpecular()
        {
            return specular_;
        }

        public zserio.runtime.array.DeltaContext getShininess()
        {
            return shininess_;
        }

        public nds.display.reference.types.TextureReference.ZserioPackingContext getTexture()
        {
            return texture_;
        }

        private nds.display.types.MaterialContent.ZserioPackingContext content_;
        private zserio.runtime.array.DeltaContext ambient_;
        private zserio.runtime.array.DeltaContext diffuse_;
        private zserio.runtime.array.DeltaContext specular_;
        private zserio.runtime.array.DeltaContext shininess_;
        private nds.display.reference.types.TextureReference.ZserioPackingContext texture_;
    };

    public Material()
    {
    }

    public Material(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Material(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Material(
            nds.display.types.MaterialContent content_,
            java.lang.Short ambient_,
            java.lang.Short diffuse_,
            java.lang.Short specular_,
            java.lang.Short shininess_,
            nds.display.reference.types.TextureReference texture_)
    {
        setContent(content_);
        setAmbient(ambient_);
        setDiffuse(diffuse_);
        setSpecular(specular_);
        setShininess(shininess_);
        setTexture(texture_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isAmbientUsed())
        {
            zserioContext.getAmbient().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ambient_));
        }
        if (isDiffuseUsed())
        {
            zserioContext.getDiffuse().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(diffuse_));
        }
        if (isSpecularUsed())
        {
            zserioContext.getSpecular().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(specular_));
        }
        if (isShininessUsed())
        {
            zserioContext.getShininess().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(shininess_));
        }
        if (isTextureUsed())
        {
            texture_.initPackingContext(zserioContext.getTexture());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isAmbientUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(ambient_);
        }
        if (isDiffuseUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(diffuse_);
        }
        if (isSpecularUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(specular_);
        }
        if (isShininessUsed())
        {
            endBitPosition += 8;
        }
        if (isTextureUsed())
        {
            endBitPosition += texture_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isAmbientUsed())
        {
            endBitPosition += zserioContext.getAmbient().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ambient_));
        }
        if (isDiffuseUsed())
        {
            endBitPosition += zserioContext.getDiffuse().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(diffuse_));
        }
        if (isSpecularUsed())
        {
            endBitPosition += zserioContext.getSpecular().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(specular_));
        }
        if (isShininessUsed())
        {
            endBitPosition += zserioContext.getShininess().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(shininess_));
        }
        if (isTextureUsed())
        {
            endBitPosition += texture_.bitSizeOf(zserioContext.getTexture(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.MaterialContent getContent()
    {
        return content_;
    }

    public void setContent(nds.display.types.MaterialContent content_)
    {
        this.content_ = content_;
    }

    public java.lang.Short getAmbient()
    {
        return ambient_;
    }

    public void setAmbient(java.lang.Short ambient_)
    {
        this.ambient_ = ambient_;
    }

    public boolean isAmbientUsed()
    {
        return (getContent().getHasAmbientAndDiffuseColor() == true);
    }

    public boolean isAmbientSet()
    {
        return (ambient_ != null);
    }

    public void resetAmbient()
    {
        this.ambient_ = null;
    }

    public java.lang.Short getDiffuse()
    {
        return diffuse_;
    }

    public void setDiffuse(java.lang.Short diffuse_)
    {
        this.diffuse_ = diffuse_;
    }

    public boolean isDiffuseUsed()
    {
        return (getContent().getHasAmbientAndDiffuseColor() == true);
    }

    public boolean isDiffuseSet()
    {
        return (diffuse_ != null);
    }

    public void resetDiffuse()
    {
        this.diffuse_ = null;
    }

    public java.lang.Short getSpecular()
    {
        return specular_;
    }

    public void setSpecular(java.lang.Short specular_)
    {
        this.specular_ = specular_;
    }

    public boolean isSpecularUsed()
    {
        return (getContent().getHasSpecularAndShininessColor() == true);
    }

    public boolean isSpecularSet()
    {
        return (specular_ != null);
    }

    public void resetSpecular()
    {
        this.specular_ = null;
    }

    public java.lang.Short getShininess()
    {
        return shininess_;
    }

    public void setShininess(java.lang.Short shininess_)
    {
        this.shininess_ = shininess_;
    }

    public boolean isShininessUsed()
    {
        return (getContent().getHasSpecularAndShininessColor() == true);
    }

    public boolean isShininessSet()
    {
        return (shininess_ != null);
    }

    public void resetShininess()
    {
        this.shininess_ = null;
    }

    public nds.display.reference.types.TextureReference getTexture()
    {
        return texture_;
    }

    public void setTexture(nds.display.reference.types.TextureReference texture_)
    {
        this.texture_ = texture_;
    }

    public boolean isTextureUsed()
    {
        return (getContent().getUsesTextures() == true);
    }

    public boolean isTextureSet()
    {
        return (texture_ != null);
    }

    public void resetTexture()
    {
        this.texture_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Material)
        {
            final Material that = (Material)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isAmbientUsed()) ? !that.isAmbientUsed() :
                        ((ambient_ == null) ? that.ambient_ == null : ambient_.equals(that.ambient_))) &&
                    ((!isDiffuseUsed()) ? !that.isDiffuseUsed() :
                        ((diffuse_ == null) ? that.diffuse_ == null : diffuse_.equals(that.diffuse_))) &&
                    ((!isSpecularUsed()) ? !that.isSpecularUsed() :
                        ((specular_ == null) ? that.specular_ == null : specular_.equals(that.specular_))) &&
                    ((!isShininessUsed()) ? !that.isShininessUsed() :
                        ((shininess_ == null) ? that.shininess_ == null : shininess_.equals(that.shininess_))) &&
                    ((!isTextureUsed()) ? !that.isTextureUsed() :
                        ((texture_ == null) ? that.texture_ == null : texture_.equals(that.texture_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isAmbientUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, ambient_);
        if (isDiffuseUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, diffuse_);
        if (isSpecularUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, specular_);
        if (isShininessUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, shininess_);
        if (isTextureUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, texture_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.display.types.MaterialContent(in);

        if (getContent().getHasAmbientAndDiffuseColor() == true)
        {
            ambient_ = in.readVarUInt16();
        }

        if (getContent().getHasAmbientAndDiffuseColor() == true)
        {
            diffuse_ = in.readVarUInt16();
        }

        if (getContent().getHasSpecularAndShininessColor() == true)
        {
            specular_ = in.readVarUInt16();
        }

        if (getContent().getHasSpecularAndShininessColor() == true)
        {
            shininess_ = in.readUnsignedByte();
        }

        if (getContent().getUsesTextures() == true)
        {
            texture_ = new nds.display.reference.types.TextureReference(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.display.types.MaterialContent(zserioContext.getContent(), in);

        if (getContent().getHasAmbientAndDiffuseColor() == true)
        {
            ambient_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAmbient().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (getContent().getHasAmbientAndDiffuseColor() == true)
        {
            diffuse_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getDiffuse().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (getContent().getHasSpecularAndShininessColor() == true)
        {
            specular_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpecular().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (getContent().getHasSpecularAndShininessColor() == true)
        {
            shininess_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getShininess().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (getContent().getUsesTextures() == true)
        {
            texture_ = new nds.display.reference.types.TextureReference(zserioContext.getTexture(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(endBitPosition);
        if (isAmbientUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(ambient_);
        }
        if (isDiffuseUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(diffuse_);
        }
        if (isSpecularUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(specular_);
        }
        if (isShininessUsed())
        {
            endBitPosition += 8;
        }
        if (isTextureUsed())
        {
            endBitPosition = texture_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isAmbientUsed())
        {
            endBitPosition += zserioContext.getAmbient().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ambient_));
        }
        if (isDiffuseUsed())
        {
            endBitPosition += zserioContext.getDiffuse().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(diffuse_));
        }
        if (isSpecularUsed())
        {
            endBitPosition += zserioContext.getSpecular().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(specular_));
        }
        if (isShininessUsed())
        {
            endBitPosition += zserioContext.getShininess().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(shininess_));
        }
        if (isTextureUsed())
        {
            endBitPosition = texture_.initializeOffsets(zserioContext.getTexture(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isAmbientUsed())
        {
            out.writeVarUInt16(ambient_);
        }

        if (isDiffuseUsed())
        {
            out.writeVarUInt16(diffuse_);
        }

        if (isSpecularUsed())
        {
            out.writeVarUInt16(specular_);
        }

        if (isShininessUsed())
        {
            out.writeUnsignedByte(shininess_);
        }

        if (isTextureUsed())
        {
            texture_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isAmbientUsed())
        {
            zserioContext.getAmbient().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(ambient_));
        }

        if (isDiffuseUsed())
        {
            zserioContext.getDiffuse().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(diffuse_));
        }

        if (isSpecularUsed())
        {
            zserioContext.getSpecular().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(specular_));
        }

        if (isShininessUsed())
        {
            zserioContext.getShininess().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(shininess_));
        }

        if (isTextureUsed())
        {
            texture_.write(zserioContext.getTexture(), out);
        }
    }

    private nds.display.types.MaterialContent content_;
    private java.lang.Short ambient_;
    private java.lang.Short diffuse_;
    private java.lang.Short specular_;
    private java.lang.Short shininess_;
    private nds.display.reference.types.TextureReference texture_;
}
