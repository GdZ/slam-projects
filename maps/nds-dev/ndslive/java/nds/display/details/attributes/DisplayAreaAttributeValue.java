/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.details.attributes;

public class DisplayAreaAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            drawingOrder_ = new nds.display.details.types.DrawingOrder.ZserioPackingContext();
            buildingFloorCount_ = new zserio.runtime.array.DeltaContext();
            buildingHeight_ = new zserio.runtime.array.DeltaContext();
            groundHeight_ = new zserio.runtime.array.DeltaContext();
            roofColor_ = new nds.core.color.ColorRgba.ZserioPackingContext();
            wallColor_ = new nds.core.color.ColorRgba.ZserioPackingContext();
            elevationDelta_ = new zserio.runtime.array.DeltaContext();
            elevationLevel_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.display.details.types.DrawingOrder.ZserioPackingContext getDrawingOrder()
        {
            return drawingOrder_;
        }

        public zserio.runtime.array.DeltaContext getBuildingFloorCount()
        {
            return buildingFloorCount_;
        }

        public zserio.runtime.array.DeltaContext getBuildingHeight()
        {
            return buildingHeight_;
        }

        public zserio.runtime.array.DeltaContext getGroundHeight()
        {
            return groundHeight_;
        }

        public nds.core.color.ColorRgba.ZserioPackingContext getRoofColor()
        {
            return roofColor_;
        }

        public nds.core.color.ColorRgba.ZserioPackingContext getWallColor()
        {
            return wallColor_;
        }

        public zserio.runtime.array.DeltaContext getElevationDelta()
        {
            return elevationDelta_;
        }

        public zserio.runtime.array.DeltaContext getElevationLevel()
        {
            return elevationLevel_;
        }

        private nds.display.details.types.DrawingOrder.ZserioPackingContext drawingOrder_;
        private zserio.runtime.array.DeltaContext buildingFloorCount_;
        private zserio.runtime.array.DeltaContext buildingHeight_;
        private zserio.runtime.array.DeltaContext groundHeight_;
        private nds.core.color.ColorRgba.ZserioPackingContext roofColor_;
        private nds.core.color.ColorRgba.ZserioPackingContext wallColor_;
        private zserio.runtime.array.DeltaContext elevationDelta_;
        private zserio.runtime.array.DeltaContext elevationLevel_;
    };

    public DisplayAreaAttributeValue(
            nds.display.details.attributes.DisplayAreaAttributeType type_)
    {
        this.type_ = type_;
    }

    public DisplayAreaAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.display.details.attributes.DisplayAreaAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public DisplayAreaAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.display.details.attributes.DisplayAreaAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case DRAWING_ORDER:
            return CHOICE_drawingOrder;
        case BUILDING_FLOOR_COUNT:
            return CHOICE_buildingFloorCount;
        case BUILDING_HEIGHT:
            return CHOICE_buildingHeight;
        case GROUND_HEIGHT:
            return CHOICE_groundHeight;
        case ROOF_COLOR:
            return CHOICE_roofColor;
        case WALL_COLOR:
            return CHOICE_wallColor;
        case ELEVATION_DELTA:
            return CHOICE_elevationDelta;
        case ELEVATION_LEVEL:
            return CHOICE_elevationLevel;
        case HAS_3D_REPRESENTATION:
            return CHOICE_has3dRepresentation;
        case GLOBAL_SOURCE_ID:
            return CHOICE_globalSourceId;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DRAWING_ORDER:
            getDrawingOrder().initPackingContext(zserioContext.getDrawingOrder());
            break;
        case BUILDING_FLOOR_COUNT:
            zserioContext.getBuildingFloorCount().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBuildingFloorCount()));
            break;
        case BUILDING_HEIGHT:
            zserioContext.getBuildingHeight().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getBuildingHeight()));
            break;
        case GROUND_HEIGHT:
            zserioContext.getGroundHeight().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGroundHeight()));
            break;
        case ROOF_COLOR:
            getRoofColor().initPackingContext(zserioContext.getRoofColor());
            break;
        case WALL_COLOR:
            getWallColor().initPackingContext(zserioContext.getWallColor());
            break;
        case ELEVATION_DELTA:
            zserioContext.getElevationDelta().init(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getElevationDelta()));
            break;
        case ELEVATION_LEVEL:
            zserioContext.getElevationLevel().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getElevationLevel()));
            break;
        case HAS_3D_REPRESENTATION:
            break;
        case GLOBAL_SOURCE_ID:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DRAWING_ORDER:
            endBitPosition += getDrawingOrder().bitSizeOf(endBitPosition);
            break;
        case BUILDING_FLOOR_COUNT:
            endBitPosition += 8;
            break;
        case BUILDING_HEIGHT:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getBuildingHeight());
            break;
        case GROUND_HEIGHT:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getGroundHeight());
            break;
        case ROOF_COLOR:
            endBitPosition += getRoofColor().bitSizeOf(endBitPosition);
            break;
        case WALL_COLOR:
            endBitPosition += getWallColor().bitSizeOf(endBitPosition);
            break;
        case ELEVATION_DELTA:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(getElevationDelta());
            break;
        case ELEVATION_LEVEL:
            endBitPosition += 8;
            break;
        case HAS_3D_REPRESENTATION:
            endBitPosition += getHas3dRepresentation().bitSizeOf(endBitPosition);
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DRAWING_ORDER:
            endBitPosition += getDrawingOrder().bitSizeOf(zserioContext.getDrawingOrder(), endBitPosition);
            break;
        case BUILDING_FLOOR_COUNT:
            endBitPosition += zserioContext.getBuildingFloorCount().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBuildingFloorCount()));
            break;
        case BUILDING_HEIGHT:
            endBitPosition += zserioContext.getBuildingHeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getBuildingHeight()));
            break;
        case GROUND_HEIGHT:
            endBitPosition += zserioContext.getGroundHeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGroundHeight()));
            break;
        case ROOF_COLOR:
            endBitPosition += getRoofColor().bitSizeOf(zserioContext.getRoofColor(), endBitPosition);
            break;
        case WALL_COLOR:
            endBitPosition += getWallColor().bitSizeOf(zserioContext.getWallColor(), endBitPosition);
            break;
        case ELEVATION_DELTA:
            endBitPosition += zserioContext.getElevationDelta().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getElevationDelta()));
            break;
        case ELEVATION_LEVEL:
            endBitPosition += zserioContext.getElevationLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getElevationLevel()));
            break;
        case HAS_3D_REPRESENTATION:
            endBitPosition += getHas3dRepresentation().bitSizeOf(endBitPosition);
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.details.attributes.DisplayAreaAttributeType getType()
    {
        return this.type_;
    }

    public nds.display.details.types.DrawingOrder getDrawingOrder()
    {
        return (nds.display.details.types.DrawingOrder)objectChoice;
    }

    public void setDrawingOrder(nds.display.details.types.DrawingOrder drawingOrder_)
    {
        objectChoice = drawingOrder_;
    }

    public short getBuildingFloorCount()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setBuildingFloorCount(short buildingFloorCount_)
    {
        objectChoice = buildingFloorCount_;
    }

    public int getBuildingHeight()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setBuildingHeight(int buildingHeight_)
    {
        objectChoice = buildingHeight_;
    }

    public int getGroundHeight()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setGroundHeight(int groundHeight_)
    {
        objectChoice = groundHeight_;
    }

    public nds.core.color.ColorRgba getRoofColor()
    {
        return (nds.core.color.ColorRgba)objectChoice;
    }

    public void setRoofColor(nds.core.color.ColorRgba roofColor_)
    {
        objectChoice = roofColor_;
    }

    public nds.core.color.ColorRgba getWallColor()
    {
        return (nds.core.color.ColorRgba)objectChoice;
    }

    public void setWallColor(nds.core.color.ColorRgba wallColor_)
    {
        objectChoice = wallColor_;
    }

    public int getElevationDelta()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setElevationDelta(int elevationDelta_)
    {
        objectChoice = elevationDelta_;
    }

    public byte getElevationLevel()
    {
        return (java.lang.Byte)objectChoice;
    }

    public void setElevationLevel(byte elevationLevel_)
    {
        objectChoice = elevationLevel_;
    }

    public nds.core.types.Flag getHas3dRepresentation()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setHas3dRepresentation(nds.core.types.Flag has3dRepresentation_)
    {
        objectChoice = has3dRepresentation_;
    }

    public java.lang.String getGlobalSourceId()
    {
        return (java.lang.String)objectChoice;
    }

    public void setGlobalSourceId(java.lang.String globalSourceId_)
    {
        objectChoice = globalSourceId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DisplayAreaAttributeValue)
        {
            final DisplayAreaAttributeValue that = (DisplayAreaAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case DRAWING_ORDER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.display.details.types.DrawingOrder)objectChoice);
                break;
            case BUILDING_FLOOR_COUNT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case BUILDING_HEIGHT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case GROUND_HEIGHT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case ROOF_COLOR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.color.ColorRgba)objectChoice);
                break;
            case WALL_COLOR:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.color.ColorRgba)objectChoice);
                break;
            case ELEVATION_DELTA:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case ELEVATION_LEVEL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Byte)objectChoice);
                break;
            case HAS_3D_REPRESENTATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case GLOBAL_SOURCE_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case DRAWING_ORDER:
            objectChoice = new nds.display.details.types.DrawingOrder(in);
            break;
        case BUILDING_FLOOR_COUNT:
            objectChoice = in.readUnsignedByte();
            break;
        case BUILDING_HEIGHT:
            objectChoice = in.readVarUInt32();
            break;
        case GROUND_HEIGHT:
            objectChoice = in.readVarUInt32();
            break;
        case ROOF_COLOR:
            objectChoice = new nds.core.color.ColorRgba(in);
            break;
        case WALL_COLOR:
            objectChoice = new nds.core.color.ColorRgba(in);
            break;
        case ELEVATION_DELTA:
            objectChoice = in.readVarInt32();
            break;
        case ELEVATION_LEVEL:
            objectChoice = in.readByte();
            break;
        case HAS_3D_REPRESENTATION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DRAWING_ORDER:
            objectChoice = new nds.display.details.types.DrawingOrder(zserioContext.getDrawingOrder(), in);
            break;
        case BUILDING_FLOOR_COUNT:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getBuildingFloorCount().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case BUILDING_HEIGHT:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getBuildingHeight().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case GROUND_HEIGHT:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getGroundHeight().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case ROOF_COLOR:
            objectChoice = new nds.core.color.ColorRgba(zserioContext.getRoofColor(), in);
            break;
        case WALL_COLOR:
            objectChoice = new nds.core.color.ColorRgba(zserioContext.getWallColor(), in);
            break;
        case ELEVATION_DELTA:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getElevationDelta().read(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), in)).get();
            break;
        case ELEVATION_LEVEL:
            objectChoice = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getElevationLevel().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();
            break;
        case HAS_3D_REPRESENTATION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DRAWING_ORDER:
            {
                endBitPosition = getDrawingOrder().initializeOffsets(endBitPosition);
            }
            break;
        case BUILDING_FLOOR_COUNT:
            {
                endBitPosition += 8;
            }
            break;
        case BUILDING_HEIGHT:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getBuildingHeight());
            }
            break;
        case GROUND_HEIGHT:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getGroundHeight());
            }
            break;
        case ROOF_COLOR:
            {
                endBitPosition = getRoofColor().initializeOffsets(endBitPosition);
            }
            break;
        case WALL_COLOR:
            {
                endBitPosition = getWallColor().initializeOffsets(endBitPosition);
            }
            break;
        case ELEVATION_DELTA:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(getElevationDelta());
            }
            break;
        case ELEVATION_LEVEL:
            {
                endBitPosition += 8;
            }
            break;
        case HAS_3D_REPRESENTATION:
            {
                endBitPosition = getHas3dRepresentation().initializeOffsets(endBitPosition);
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DRAWING_ORDER:
            {
                endBitPosition = getDrawingOrder().initializeOffsets(zserioContext.getDrawingOrder(), endBitPosition);
            }
            break;
        case BUILDING_FLOOR_COUNT:
            {
                endBitPosition += zserioContext.getBuildingFloorCount().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getBuildingFloorCount()));
            }
            break;
        case BUILDING_HEIGHT:
            {
                endBitPosition += zserioContext.getBuildingHeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getBuildingHeight()));
            }
            break;
        case GROUND_HEIGHT:
            {
                endBitPosition += zserioContext.getGroundHeight().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getGroundHeight()));
            }
            break;
        case ROOF_COLOR:
            {
                endBitPosition = getRoofColor().initializeOffsets(zserioContext.getRoofColor(), endBitPosition);
            }
            break;
        case WALL_COLOR:
            {
                endBitPosition = getWallColor().initializeOffsets(zserioContext.getWallColor(), endBitPosition);
            }
            break;
        case ELEVATION_DELTA:
            {
                endBitPosition += zserioContext.getElevationDelta().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getElevationDelta()));
            }
            break;
        case ELEVATION_LEVEL:
            {
                endBitPosition += zserioContext.getElevationLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ByteArrayElement(getElevationLevel()));
            }
            break;
        case HAS_3D_REPRESENTATION:
            {
                endBitPosition = getHas3dRepresentation().initializeOffsets(endBitPosition);
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case DRAWING_ORDER:
            getDrawingOrder().write(out);
            break;
        case BUILDING_FLOOR_COUNT:
            out.writeUnsignedByte(getBuildingFloorCount());
            break;
        case BUILDING_HEIGHT:
            out.writeVarUInt32(getBuildingHeight());
            break;
        case GROUND_HEIGHT:
            out.writeVarUInt32(getGroundHeight());
            break;
        case ROOF_COLOR:
            getRoofColor().write(out);
            break;
        case WALL_COLOR:
            getWallColor().write(out);
            break;
        case ELEVATION_DELTA:
            out.writeVarInt32(getElevationDelta());
            break;
        case ELEVATION_LEVEL:
            out.writeByte(getElevationLevel());
            break;
        case HAS_3D_REPRESENTATION:
            getHas3dRepresentation().write(out);
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DRAWING_ORDER:
            getDrawingOrder().write(zserioContext.getDrawingOrder(), out);
            break;
        case BUILDING_FLOOR_COUNT:
            zserioContext.getBuildingFloorCount().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getBuildingFloorCount()));
            break;
        case BUILDING_HEIGHT:
            zserioContext.getBuildingHeight().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getBuildingHeight()));
            break;
        case GROUND_HEIGHT:
            zserioContext.getGroundHeight().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGroundHeight()));
            break;
        case ROOF_COLOR:
            getRoofColor().write(zserioContext.getRoofColor(), out);
            break;
        case WALL_COLOR:
            getWallColor().write(zserioContext.getWallColor(), out);
            break;
        case ELEVATION_DELTA:
            zserioContext.getElevationDelta().write(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getElevationDelta()));
            break;
        case ELEVATION_LEVEL:
            zserioContext.getElevationLevel().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getElevationLevel()));
            break;
        case HAS_3D_REPRESENTATION:
            getHas3dRepresentation().write(out);
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayAreaAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_drawingOrder = 0;
    public static final int CHOICE_buildingFloorCount = 1;
    public static final int CHOICE_buildingHeight = 2;
    public static final int CHOICE_groundHeight = 3;
    public static final int CHOICE_roofColor = 4;
    public static final int CHOICE_wallColor = 5;
    public static final int CHOICE_elevationDelta = 6;
    public static final int CHOICE_elevationLevel = 7;
    public static final int CHOICE_has3dRepresentation = 8;
    public static final int CHOICE_globalSourceId = 9;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.display.details.attributes.DisplayAreaAttributeType type_;
    private java.lang.Object objectChoice;
}
