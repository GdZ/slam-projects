/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class DisplayAreaValidity implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            numLabelAreas_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getNumLabelAreas()
        {
            return numLabelAreas_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext numLabelAreas_;
    };

    public DisplayAreaValidity(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public DisplayAreaValidity(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public DisplayAreaValidity(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public DisplayAreaValidity(
            byte shift_,
            nds.display.reference.types.DisplayAreaValidityType type_,
            java.lang.Integer numLabelAreas_,
            nds.display.reference.types.DisplayAreaChoice[] labelAreas_)
    {
        this(shift_);

        setType(type_);
        setNumLabelAreas(numLabelAreas_);
        setLabelAreas(labelAreas_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        if (isNumLabelAreasUsed())
        {
            zserioContext.getNumLabelAreas().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numLabelAreas_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isNumLabelAreasUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numLabelAreas_);
        }
        if (isLabelAreasUsed())
        {
            endBitPosition += labelAreas_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        if (isNumLabelAreasUsed())
        {
            endBitPosition += zserioContext.getNumLabelAreas().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numLabelAreas_));
        }
        if (isLabelAreasUsed())
        {
            endBitPosition += labelAreas_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.display.reference.types.DisplayAreaValidityType getType()
    {
        return type_;
    }

    public void setType(nds.display.reference.types.DisplayAreaValidityType type_)
    {
        this.type_ = type_;
    }

    public java.lang.Integer getNumLabelAreas()
    {
        return numLabelAreas_;
    }

    public void setNumLabelAreas(java.lang.Integer numLabelAreas_)
    {
        this.numLabelAreas_ = numLabelAreas_;
    }

    public boolean isNumLabelAreasUsed()
    {
        return (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE);
    }

    public boolean isNumLabelAreasSet()
    {
        return (numLabelAreas_ != null);
    }

    public void resetNumLabelAreas()
    {
        this.numLabelAreas_ = null;
    }

    public nds.display.reference.types.DisplayAreaChoice[] getLabelAreas()
    {
        return (labelAreas_ == null) ? null : labelAreas_.getRawArray();
    }

    public void setLabelAreas(nds.display.reference.types.DisplayAreaChoice[] labelAreas_)
    {
        if (labelAreas_ == null)
        {
            this.labelAreas_ = null;
        }
        else
        {
            this.labelAreas_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.DisplayAreaChoice.class, labelAreas_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.DisplayAreaChoice>(new ZserioElementFactory_labelAreas()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isLabelAreasUsed()
    {
        return (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE);
    }

    public boolean isLabelAreasSet()
    {
        return (labelAreas_ != null);
    }

    public void resetLabelAreas()
    {
        this.labelAreas_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DisplayAreaValidity)
        {
            final DisplayAreaValidity that = (DisplayAreaValidity)obj;

            return
                    this.shift_ == that.shift_ &&
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((!isNumLabelAreasUsed()) ? !that.isNumLabelAreasUsed() :
                        ((numLabelAreas_ == null) ? that.numLabelAreas_ == null : numLabelAreas_.equals(that.numLabelAreas_))) &&
                    ((!isLabelAreasUsed()) ? !that.isLabelAreasUsed() :
                        ((labelAreas_ == null) ? that.labelAreas_ == null : labelAreas_.equals(that.labelAreas_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isNumLabelAreasUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLabelAreas_);
        if (isLabelAreasUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, labelAreas_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.display.reference.types.DisplayAreaValidityType.readEnum(in);

        if (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE)
        {
            numLabelAreas_ = in.readVarSize();
        }

        if (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE)
        {
            labelAreas_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.DisplayAreaChoice.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.DisplayAreaChoice>(new ZserioElementFactory_labelAreas()),
                    zserio.runtime.array.ArrayType.NORMAL);
            labelAreas_.read(in, (int)(getNumLabelAreas()));
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.display.reference.types.DisplayAreaValidityType.readEnum(zserioContext.getType(), in);

        if (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE)
        {
            numLabelAreas_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumLabelAreas().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        if (getType() != nds.display.reference.types.DisplayAreaValidityType.COMPLETE)
        {
            labelAreas_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.DisplayAreaChoice.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.DisplayAreaChoice>(new ZserioElementFactory_labelAreas()),
                    zserio.runtime.array.ArrayType.NORMAL);
            labelAreas_.readPacked(in, (int)(getNumLabelAreas()));
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isNumLabelAreasUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numLabelAreas_);
        }
        if (isLabelAreasUsed())
        {
            endBitPosition = labelAreas_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        if (isNumLabelAreasUsed())
        {
            endBitPosition += zserioContext.getNumLabelAreas().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numLabelAreas_));
        }
        if (isLabelAreasUsed())
        {
            endBitPosition = labelAreas_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        type_.write(out);

        if (isNumLabelAreasUsed())
        {
            out.writeVarSize(numLabelAreas_);
        }

        if (isLabelAreasUsed())
        {
            if (labelAreas_.size() != (int)(getNumLabelAreas()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field DisplayAreaValidity.labelAreas: " +
                        labelAreas_.size() + " != " + (int)(getNumLabelAreas()) + "!");
            }
            labelAreas_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        type_.write(zserioContext.getType(), out);

        if (isNumLabelAreasUsed())
        {
            zserioContext.getNumLabelAreas().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numLabelAreas_));
        }

        if (isLabelAreasUsed())
        {
            if (labelAreas_.size() != (int)(getNumLabelAreas()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field DisplayAreaValidity.labelAreas: " +
                        labelAreas_.size() + " != " + (int)(getNumLabelAreas()) + "!");
            }
            labelAreas_.writePacked(out);
        }
    }

    private void checkConstraints()
    {
        if (isNumLabelAreasUsed() && !(getNumLabelAreas() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at DisplayAreaValidity.numLabelAreas!");
    }

    private final class ZserioElementFactory_labelAreas implements zserio.runtime.array.PackableElementFactory<nds.display.reference.types.DisplayAreaChoice>
    {
        @Override
        public nds.display.reference.types.DisplayAreaChoice create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.reference.types.DisplayAreaChoice(in, getType(), (byte)(getShift()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.reference.types.DisplayAreaChoice.ZserioPackingContext();
        }

        @Override
        public nds.display.reference.types.DisplayAreaChoice create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.reference.types.DisplayAreaChoice(context, in, getType(), (byte)(getShift()));
        }
    }

    private final byte shift_;
    private nds.display.reference.types.DisplayAreaValidityType type_;
    private java.lang.Integer numLabelAreas_;
    private zserio.runtime.array.Array labelAreas_;
}
