/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class DisplayLineReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            directedLineReference_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
            lineReference_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getDirectedLineReference()
        {
            return directedLineReference_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getLineReference()
        {
            return lineReference_;
        }

        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext directedLineReference_;
        private nds.core.types.Var4ByteId.ZserioPackingContext lineReference_;
    };

    public DisplayLineReference()
    {
    }

    public DisplayLineReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DisplayLineReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DisplayLineReference(
            boolean isDirected_,
            nds.core.types.Var4ByteDirectedReference directedLineReference_,
            nds.core.types.Var4ByteId lineReference_)
    {
        setIsDirected(isDirected_);
        setDirectedLineReference(directedLineReference_);
        setLineReference(lineReference_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isDirectedLineReferenceUsed())
        {
            directedLineReference_.initPackingContext(zserioContext.getDirectedLineReference());
        }
        if (isLineReferenceUsed())
        {
            lineReference_.initPackingContext(zserioContext.getLineReference());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedLineReferenceUsed())
        {
            endBitPosition += directedLineReference_.bitSizeOf(endBitPosition);
        }
        if (isLineReferenceUsed())
        {
            endBitPosition += lineReference_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedLineReferenceUsed())
        {
            endBitPosition += directedLineReference_.bitSizeOf(zserioContext.getDirectedLineReference(), endBitPosition);
        }
        if (isLineReferenceUsed())
        {
            endBitPosition += lineReference_.bitSizeOf(zserioContext.getLineReference(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getIsDirected()
    {
        return isDirected_;
    }

    public void setIsDirected(boolean isDirected_)
    {
        this.isDirected_ = isDirected_;
    }

    public nds.core.types.Var4ByteDirectedReference getDirectedLineReference()
    {
        return directedLineReference_;
    }

    public void setDirectedLineReference(nds.core.types.Var4ByteDirectedReference directedLineReference_)
    {
        this.directedLineReference_ = directedLineReference_;
    }

    public boolean isDirectedLineReferenceUsed()
    {
        return (getIsDirected());
    }

    public boolean isDirectedLineReferenceSet()
    {
        return (directedLineReference_ != null);
    }

    public void resetDirectedLineReference()
    {
        this.directedLineReference_ = null;
    }

    public nds.core.types.Var4ByteId getLineReference()
    {
        return lineReference_;
    }

    public void setLineReference(nds.core.types.Var4ByteId lineReference_)
    {
        this.lineReference_ = lineReference_;
    }

    public boolean isLineReferenceUsed()
    {
        return (!getIsDirected());
    }

    public boolean isLineReferenceSet()
    {
        return (lineReference_ != null);
    }

    public void resetLineReference()
    {
        this.lineReference_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DisplayLineReference)
        {
            final DisplayLineReference that = (DisplayLineReference)obj;

            return
                    isDirected_ == that.isDirected_ &&
                    ((!isDirectedLineReferenceUsed()) ? !that.isDirectedLineReferenceUsed() :
                        ((directedLineReference_ == null) ? that.directedLineReference_ == null : directedLineReference_.equals(that.directedLineReference_))) &&
                    ((!isLineReferenceUsed()) ? !that.isLineReferenceUsed() :
                        ((lineReference_ == null) ? that.lineReference_ == null : lineReference_.equals(that.lineReference_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isDirected_);
        if (isDirectedLineReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, directedLineReference_);
        if (isLineReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lineReference_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        isDirected_ = in.readBool();

        if (getIsDirected())
        {
            directedLineReference_ = new nds.core.types.Var4ByteDirectedReference(in);
        }

        if (!getIsDirected())
        {
            lineReference_ = new nds.core.types.Var4ByteId(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        isDirected_ = in.readBool();

        if (getIsDirected())
        {
            directedLineReference_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getDirectedLineReference(), in);
        }

        if (!getIsDirected())
        {
            lineReference_ = new nds.core.types.Var4ByteId(zserioContext.getLineReference(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedLineReferenceUsed())
        {
            endBitPosition = directedLineReference_.initializeOffsets(endBitPosition);
        }
        if (isLineReferenceUsed())
        {
            endBitPosition = lineReference_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedLineReferenceUsed())
        {
            endBitPosition = directedLineReference_.initializeOffsets(zserioContext.getDirectedLineReference(), endBitPosition);
        }
        if (isLineReferenceUsed())
        {
            endBitPosition = lineReference_.initializeOffsets(zserioContext.getLineReference(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(isDirected_);

        if (isDirectedLineReferenceUsed())
        {
            directedLineReference_.write(out);
        }

        if (isLineReferenceUsed())
        {
            lineReference_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(isDirected_);

        if (isDirectedLineReferenceUsed())
        {
            directedLineReference_.write(zserioContext.getDirectedLineReference(), out);
        }

        if (isLineReferenceUsed())
        {
            lineReference_.write(zserioContext.getLineReference(), out);
        }
    }

    private boolean isDirected_;
    private nds.core.types.Var4ByteDirectedReference directedLineReference_;
    private nds.core.types.Var4ByteId lineReference_;
}
