/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class StraightLabelPositioningHint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numPositions_ = new zserio.runtime.array.DeltaContext();
            coordWidth_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumPositions()
        {
            return numPositions_;
        }

        public zserio.runtime.array.DeltaContext getCoordWidth()
        {
            return coordWidth_;
        }

        private zserio.runtime.array.DeltaContext numPositions_;
        private zserio.runtime.array.DeltaContext coordWidth_;
    };

    public StraightLabelPositioningHint(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public StraightLabelPositioningHint(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public StraightLabelPositioningHint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public StraightLabelPositioningHint(
            byte shift_,
            int numPositions_,
            byte coordWidth_,
            nds.display.reference.types.StraightLabelingPosition[] positions_)
    {
        this(shift_);

        setNumPositions(numPositions_);
        setCoordWidth(coordWidth_);
        setPositions(positions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPositions().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        zserioContext.getCoordWidth().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(coordWidth_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPositions_);
        endBitPosition += 5;
        endBitPosition += positions_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPositions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        endBitPosition += zserioContext.getCoordWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(coordWidth_));
        endBitPosition += positions_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public int getNumPositions()
    {
        return numPositions_;
    }

    public void setNumPositions(int numPositions_)
    {
        this.numPositions_ = numPositions_;
    }

    public byte getCoordWidth()
    {
        return coordWidth_;
    }

    public void setCoordWidth(byte coordWidth_)
    {
        this.coordWidth_ = coordWidth_;
    }

    public nds.display.reference.types.StraightLabelingPosition[] getPositions()
    {
        return (positions_ == null) ? null : positions_.getRawArray();
    }

    public void setPositions(nds.display.reference.types.StraightLabelingPosition[] positions_)
    {
        this.positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.StraightLabelingPosition.class, positions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.StraightLabelingPosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof StraightLabelPositioningHint)
        {
            final StraightLabelPositioningHint that = (StraightLabelPositioningHint)obj;

            return
                    this.shift_ == that.shift_ &&
                    numPositions_ == that.numPositions_ &&
                    coordWidth_ == that.coordWidth_ &&
                    ((positions_ == null) ? that.positions_ == null : positions_.equals(that.positions_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numPositions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coordWidth_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, positions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numPositions_ = in.readVarSize();

        coordWidth_ = (byte)in.readBits(5);

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.StraightLabelingPosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.StraightLabelingPosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.read(in, (int)(getNumPositions()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numPositions_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumPositions().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        coordWidth_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getCoordWidth().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.reference.types.StraightLabelingPosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.reference.types.StraightLabelingPosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.readPacked(in, (int)(getNumPositions()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPositions_);
        endBitPosition += 5;
        endBitPosition = positions_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPositions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));
        endBitPosition += zserioContext.getCoordWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(coordWidth_));
        endBitPosition = positions_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numPositions_);

        out.writeBits(coordWidth_, 5);

        if (positions_.size() != (int)(getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field StraightLabelPositioningHint.positions: " +
                    positions_.size() + " != " + (int)(getNumPositions()) + "!");
        }
        positions_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPositions().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPositions_));

        zserioContext.getCoordWidth().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(coordWidth_));

        if (positions_.size() != (int)(getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field StraightLabelPositioningHint.positions: " +
                    positions_.size() + " != " + (int)(getNumPositions()) + "!");
        }
        positions_.writePacked(out);
    }

    private final class ZserioElementFactory_positions implements zserio.runtime.array.PackableElementFactory<nds.display.reference.types.StraightLabelingPosition>
    {
        @Override
        public nds.display.reference.types.StraightLabelingPosition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.reference.types.StraightLabelingPosition(in, (byte)(getShift()), (byte)(getCoordWidth()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.reference.types.StraightLabelingPosition.ZserioPackingContext();
        }

        @Override
        public nds.display.reference.types.StraightLabelingPosition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.reference.types.StraightLabelingPosition(context, in, (byte)(getShift()), (byte)(getCoordWidth()));
        }
    }

    private final byte shift_;
    private int numPositions_;
    private byte coordWidth_;
    private zserio.runtime.array.Array positions_;
}
