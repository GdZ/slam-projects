/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public enum DisplayLineValidityType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    COMPLETE((short)0),
    POSITION((short)1),
    GEOMETRY((short)2),
    GEOMETRY_OFFSET((short)3),
    PERCENTAGE((short)4),
    CURVED_LABEL_POSITIONING_HINT((short)5);

    private DisplayLineValidityType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static DisplayLineValidityType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static DisplayLineValidityType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static DisplayLineValidityType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return COMPLETE;
            case (short)1:
                return POSITION;
            case (short)2:
                return GEOMETRY;
            case (short)3:
                return GEOMETRY_OFFSET;
            case (short)4:
                return PERCENTAGE;
            case (short)5:
                return CURVED_LABEL_POSITIONING_HINT;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration DisplayLineValidityType: " + value + "!");
        }
    }

    public static DisplayLineValidityType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("COMPLETE"))
            return COMPLETE;
        if (itemName.equals("POSITION"))
            return POSITION;
        if (itemName.equals("GEOMETRY"))
            return GEOMETRY;
        if (itemName.equals("GEOMETRY_OFFSET"))
            return GEOMETRY_OFFSET;
        if (itemName.equals("PERCENTAGE"))
            return PERCENTAGE;
        if (itemName.equals("CURVED_LABEL_POSITIONING_HINT"))
            return CURVED_LABEL_POSITIONING_HINT;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration DisplayLineValidityType!");
    }

    private short value;
}
