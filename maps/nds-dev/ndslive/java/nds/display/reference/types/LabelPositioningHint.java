/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class LabelPositioningHint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            importance_ = new zserio.runtime.array.DeltaContext();
            curvedLabelHint_ = new nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext();
            straightLabelHint_ = new nds.display.reference.types.StraightLabelPositioningHint.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getImportance()
        {
            return importance_;
        }

        public nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext getCurvedLabelHint()
        {
            return curvedLabelHint_;
        }

        public nds.display.reference.types.StraightLabelPositioningHint.ZserioPackingContext getStraightLabelHint()
        {
            return straightLabelHint_;
        }

        private zserio.runtime.array.DeltaContext importance_;
        private nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext curvedLabelHint_;
        private nds.display.reference.types.StraightLabelPositioningHint.ZserioPackingContext straightLabelHint_;
    };

    public LabelPositioningHint(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public LabelPositioningHint(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public LabelPositioningHint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public LabelPositioningHint(
            byte shift_,
            short importance_,
            boolean hasCurvedLabel_,
            boolean hasStraightLabel_,
            nds.display.reference.types.CurvedLabelPositioningHint curvedLabelHint_,
            nds.display.reference.types.StraightLabelPositioningHint straightLabelHint_)
    {
        this(shift_);

        setImportance(importance_);
        setHasCurvedLabel(hasCurvedLabel_);
        setHasStraightLabel(hasStraightLabel_);
        setCurvedLabelHint(curvedLabelHint_);
        setStraightLabelHint(straightLabelHint_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getImportance().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(importance_));
        if (isCurvedLabelHintUsed())
        {
            curvedLabelHint_.initPackingContext(zserioContext.getCurvedLabelHint());
        }
        if (isStraightLabelHintUsed())
        {
            straightLabelHint_.initPackingContext(zserioContext.getStraightLabelHint());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCurvedLabelHintUsed())
        {
            endBitPosition += curvedLabelHint_.bitSizeOf(endBitPosition);
        }
        if (isStraightLabelHintUsed())
        {
            endBitPosition += straightLabelHint_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getImportance().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(importance_));
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCurvedLabelHintUsed())
        {
            endBitPosition += curvedLabelHint_.bitSizeOf(zserioContext.getCurvedLabelHint(), endBitPosition);
        }
        if (isStraightLabelHintUsed())
        {
            endBitPosition += straightLabelHint_.bitSizeOf(zserioContext.getStraightLabelHint(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public short getImportance()
    {
        return importance_;
    }

    public void setImportance(short importance_)
    {
        this.importance_ = importance_;
    }

    public boolean getHasCurvedLabel()
    {
        return hasCurvedLabel_;
    }

    public void setHasCurvedLabel(boolean hasCurvedLabel_)
    {
        this.hasCurvedLabel_ = hasCurvedLabel_;
    }

    public boolean getHasStraightLabel()
    {
        return hasStraightLabel_;
    }

    public void setHasStraightLabel(boolean hasStraightLabel_)
    {
        this.hasStraightLabel_ = hasStraightLabel_;
    }

    public nds.display.reference.types.CurvedLabelPositioningHint getCurvedLabelHint()
    {
        return curvedLabelHint_;
    }

    public void setCurvedLabelHint(nds.display.reference.types.CurvedLabelPositioningHint curvedLabelHint_)
    {
        this.curvedLabelHint_ = curvedLabelHint_;
    }

    public boolean isCurvedLabelHintUsed()
    {
        return (getHasCurvedLabel());
    }

    public boolean isCurvedLabelHintSet()
    {
        return (curvedLabelHint_ != null);
    }

    public void resetCurvedLabelHint()
    {
        this.curvedLabelHint_ = null;
    }

    public nds.display.reference.types.StraightLabelPositioningHint getStraightLabelHint()
    {
        return straightLabelHint_;
    }

    public void setStraightLabelHint(nds.display.reference.types.StraightLabelPositioningHint straightLabelHint_)
    {
        this.straightLabelHint_ = straightLabelHint_;
    }

    public boolean isStraightLabelHintUsed()
    {
        return (getHasStraightLabel());
    }

    public boolean isStraightLabelHintSet()
    {
        return (straightLabelHint_ != null);
    }

    public void resetStraightLabelHint()
    {
        this.straightLabelHint_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LabelPositioningHint)
        {
            final LabelPositioningHint that = (LabelPositioningHint)obj;

            return
                    this.shift_ == that.shift_ &&
                    importance_ == that.importance_ &&
                    hasCurvedLabel_ == that.hasCurvedLabel_ &&
                    hasStraightLabel_ == that.hasStraightLabel_ &&
                    ((!isCurvedLabelHintUsed()) ? !that.isCurvedLabelHintUsed() :
                        ((curvedLabelHint_ == null) ? that.curvedLabelHint_ == null : curvedLabelHint_.equals(that.curvedLabelHint_))) &&
                    ((!isStraightLabelHintUsed()) ? !that.isStraightLabelHintUsed() :
                        ((straightLabelHint_ == null) ? that.straightLabelHint_ == null : straightLabelHint_.equals(that.straightLabelHint_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, importance_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasCurvedLabel_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasStraightLabel_);
        if (isCurvedLabelHintUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, curvedLabelHint_);
        if (isStraightLabelHintUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, straightLabelHint_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        importance_ = in.readUnsignedByte();

        hasCurvedLabel_ = in.readBool();

        hasStraightLabel_ = in.readBool();

        if (getHasCurvedLabel())
        {
            curvedLabelHint_ = new nds.display.reference.types.CurvedLabelPositioningHint(in, (byte)(getShift()));
        }

        if (getHasStraightLabel())
        {
            straightLabelHint_ = new nds.display.reference.types.StraightLabelPositioningHint(in, (byte)(getShift()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        importance_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getImportance().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        hasCurvedLabel_ = in.readBool();

        hasStraightLabel_ = in.readBool();

        if (getHasCurvedLabel())
        {
            curvedLabelHint_ = new nds.display.reference.types.CurvedLabelPositioningHint(zserioContext.getCurvedLabelHint(), in, (byte)(getShift()));
        }

        if (getHasStraightLabel())
        {
            straightLabelHint_ = new nds.display.reference.types.StraightLabelPositioningHint(zserioContext.getStraightLabelHint(), in, (byte)(getShift()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCurvedLabelHintUsed())
        {
            endBitPosition = curvedLabelHint_.initializeOffsets(endBitPosition);
        }
        if (isStraightLabelHintUsed())
        {
            endBitPosition = straightLabelHint_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getImportance().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(importance_));
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCurvedLabelHintUsed())
        {
            endBitPosition = curvedLabelHint_.initializeOffsets(zserioContext.getCurvedLabelHint(), endBitPosition);
        }
        if (isStraightLabelHintUsed())
        {
            endBitPosition = straightLabelHint_.initializeOffsets(zserioContext.getStraightLabelHint(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(importance_);

        out.writeBool(hasCurvedLabel_);

        out.writeBool(hasStraightLabel_);

        if (isCurvedLabelHintUsed())
        {
            // check parameters
            if (curvedLabelHint_.getShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field LabelPositioningHint.curvedLabelHint: " +
                        curvedLabelHint_.getShift() + " != " + (byte)(getShift()) + "!");
            }
            curvedLabelHint_.write(out);
        }

        if (isStraightLabelHintUsed())
        {
            // check parameters
            if (straightLabelHint_.getShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field LabelPositioningHint.straightLabelHint: " +
                        straightLabelHint_.getShift() + " != " + (byte)(getShift()) + "!");
            }
            straightLabelHint_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getImportance().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(importance_));

        out.writeBool(hasCurvedLabel_);

        out.writeBool(hasStraightLabel_);

        if (isCurvedLabelHintUsed())
        {
            curvedLabelHint_.write(zserioContext.getCurvedLabelHint(), out);
        }

        if (isStraightLabelHintUsed())
        {
            straightLabelHint_.write(zserioContext.getStraightLabelHint(), out);
        }
    }

    private final byte shift_;
    private short importance_;
    private boolean hasCurvedLabel_;
    private boolean hasStraightLabel_;
    private nds.display.reference.types.CurvedLabelPositioningHint curvedLabelHint_;
    private nds.display.reference.types.StraightLabelPositioningHint straightLabelHint_;
}
