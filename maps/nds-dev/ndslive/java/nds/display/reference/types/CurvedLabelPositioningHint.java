/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class CurvedLabelPositioningHint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numLines_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumLines()
        {
            return numLines_;
        }

        private zserio.runtime.array.DeltaContext numLines_;
    };

    public CurvedLabelPositioningHint(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public CurvedLabelPositioningHint(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public CurvedLabelPositioningHint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public CurvedLabelPositioningHint(
            byte shift_,
            int numLines_,
            nds.core.geometry.Line2D[] hintLines_)
    {
        this(shift_);

        setNumLines(numLines_);
        setHintLines(hintLines_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLines().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numLines_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numLines_);
        endBitPosition += hintLines_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLines().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numLines_));
        endBitPosition += hintLines_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public int getNumLines()
    {
        return numLines_;
    }

    public void setNumLines(int numLines_)
    {
        this.numLines_ = numLines_;
    }

    public nds.core.geometry.Line2D[] getHintLines()
    {
        return (hintLines_ == null) ? null : hintLines_.getRawArray();
    }

    public void setHintLines(nds.core.geometry.Line2D[] hintLines_)
    {
        this.hintLines_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class, hintLines_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_hintLines()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CurvedLabelPositioningHint)
        {
            final CurvedLabelPositioningHint that = (CurvedLabelPositioningHint)obj;

            return
                    this.shift_ == that.shift_ &&
                    numLines_ == that.numLines_ &&
                    ((hintLines_ == null) ? that.hintLines_ == null : hintLines_.equals(that.hintLines_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLines_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hintLines_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numLines_ = in.readVarSize();

        hintLines_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_hintLines()),
                zserio.runtime.array.ArrayType.NORMAL);
        hintLines_.read(in, (int)(getNumLines()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numLines_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumLines().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        hintLines_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.geometry.Line2D.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.geometry.Line2D>(new ZserioElementFactory_hintLines()),
                zserio.runtime.array.ArrayType.NORMAL);
        hintLines_.readPacked(in, (int)(getNumLines()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numLines_);
        endBitPosition = hintLines_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLines().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numLines_));
        endBitPosition = hintLines_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numLines_);

        if (hintLines_.size() != (int)(getNumLines()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field CurvedLabelPositioningHint.hintLines: " +
                    hintLines_.size() + " != " + (int)(getNumLines()) + "!");
        }
        hintLines_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLines().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numLines_));

        if (hintLines_.size() != (int)(getNumLines()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field CurvedLabelPositioningHint.hintLines: " +
                    hintLines_.size() + " != " + (int)(getNumLines()) + "!");
        }
        hintLines_.writePacked(out);
    }

    private final class ZserioElementFactory_hintLines implements zserio.runtime.array.PackableElementFactory<nds.core.geometry.Line2D>
    {
        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(in, (byte)(getShift()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.geometry.Line2D.ZserioPackingContext();
        }

        @Override
        public nds.core.geometry.Line2D create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.geometry.Line2D(context, in, (byte)(getShift()));
        }
    }

    private final byte shift_;
    private int numLines_;
    private zserio.runtime.array.Array hintLines_;
}
