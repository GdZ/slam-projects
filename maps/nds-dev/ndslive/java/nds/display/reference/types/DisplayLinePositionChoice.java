/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.reference.types;

public class DisplayLinePositionChoice implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            validityPosition_ = new nds.display.reference.types.DisplayLineValidityPosition.ZserioPackingContext();
            geometryPosition_ = new zserio.runtime.array.DeltaContext();
            geometryOffsetPosition_ = new nds.core.geometry.LinePositionOffset2D.ZserioPackingContext();
            percentagePosition_ = new nds.core.types.PercentagePosition.ZserioPackingContext();
            curvedLabelPositioningHint_ = new nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext();
        }

        public nds.display.reference.types.DisplayLineValidityPosition.ZserioPackingContext getValidityPosition()
        {
            return validityPosition_;
        }

        public zserio.runtime.array.DeltaContext getGeometryPosition()
        {
            return geometryPosition_;
        }

        public nds.core.geometry.LinePositionOffset2D.ZserioPackingContext getGeometryOffsetPosition()
        {
            return geometryOffsetPosition_;
        }

        public nds.core.types.PercentagePosition.ZserioPackingContext getPercentagePosition()
        {
            return percentagePosition_;
        }

        public nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext getCurvedLabelPositioningHint()
        {
            return curvedLabelPositioningHint_;
        }

        private nds.display.reference.types.DisplayLineValidityPosition.ZserioPackingContext validityPosition_;
        private zserio.runtime.array.DeltaContext geometryPosition_;
        private nds.core.geometry.LinePositionOffset2D.ZserioPackingContext geometryOffsetPosition_;
        private nds.core.types.PercentagePosition.ZserioPackingContext percentagePosition_;
        private nds.display.reference.types.CurvedLabelPositioningHint.ZserioPackingContext curvedLabelPositioningHint_;
    };

    public DisplayLinePositionChoice(
            nds.display.reference.types.DisplayLineValidityType type_,
            byte shift_)
    {
        this.type_ = type_;
        this.shift_ = shift_;
    }

    public DisplayLinePositionChoice(zserio.runtime.io.BitStreamReader in,
            nds.display.reference.types.DisplayLineValidityType type_,
            byte shift_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.shift_ = shift_;

        read(in);
    }

    public DisplayLinePositionChoice(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.display.reference.types.DisplayLineValidityType type_,
            byte shift_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.shift_ = shift_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case COMPLETE:
            return UNDEFINED_CHOICE;
        case POSITION:
            return CHOICE_validityPosition;
        case GEOMETRY:
            return CHOICE_geometryPosition;
        case GEOMETRY_OFFSET:
            return CHOICE_geometryOffsetPosition;
        case PERCENTAGE:
            return CHOICE_percentagePosition;
        case CURVED_LABEL_POSITIONING_HINT:
            return CHOICE_curvedLabelPositioningHint;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityPosition().initPackingContext(zserioContext.getValidityPosition());
            break;
        case GEOMETRY:
            zserioContext.getGeometryPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            getGeometryOffsetPosition().initPackingContext(zserioContext.getGeometryOffsetPosition());
            break;
        case PERCENTAGE:
            getPercentagePosition().initPackingContext(zserioContext.getPercentagePosition());
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            getCurvedLabelPositioningHint().initPackingContext(zserioContext.getCurvedLabelPositioningHint());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityPosition().bitSizeOf(endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(getGeometryPosition());
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryOffsetPosition().bitSizeOf(endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentagePosition().bitSizeOf(endBitPosition);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            endBitPosition += getCurvedLabelPositioningHint().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityPosition().bitSizeOf(zserioContext.getValidityPosition(), endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += zserioContext.getGeometryPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryOffsetPosition().bitSizeOf(zserioContext.getGeometryOffsetPosition(), endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentagePosition().bitSizeOf(zserioContext.getPercentagePosition(), endBitPosition);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            endBitPosition += getCurvedLabelPositioningHint().bitSizeOf(zserioContext.getCurvedLabelPositioningHint(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.reference.types.DisplayLineValidityType getType()
    {
        return this.type_;
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.display.reference.types.DisplayLineValidityPosition getValidityPosition()
    {
        return (nds.display.reference.types.DisplayLineValidityPosition)objectChoice;
    }

    public void setValidityPosition(nds.display.reference.types.DisplayLineValidityPosition validityPosition_)
    {
        objectChoice = validityPosition_;
    }

    public int getGeometryPosition()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setGeometryPosition(int geometryPosition_)
    {
        objectChoice = geometryPosition_;
    }

    public nds.core.geometry.LinePositionOffset2D getGeometryOffsetPosition()
    {
        return (nds.core.geometry.LinePositionOffset2D)objectChoice;
    }

    public void setGeometryOffsetPosition(nds.core.geometry.LinePositionOffset2D geometryOffsetPosition_)
    {
        objectChoice = geometryOffsetPosition_;
    }

    public nds.core.types.PercentagePosition getPercentagePosition()
    {
        return (nds.core.types.PercentagePosition)objectChoice;
    }

    public void setPercentagePosition(nds.core.types.PercentagePosition percentagePosition_)
    {
        objectChoice = percentagePosition_;
    }

    public nds.display.reference.types.CurvedLabelPositioningHint getCurvedLabelPositioningHint()
    {
        return (nds.display.reference.types.CurvedLabelPositioningHint)objectChoice;
    }

    public void setCurvedLabelPositioningHint(nds.display.reference.types.CurvedLabelPositioningHint curvedLabelPositioningHint_)
    {
        objectChoice = curvedLabelPositioningHint_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DisplayLinePositionChoice)
        {
            final DisplayLinePositionChoice that = (DisplayLinePositionChoice)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    this.shift_ == that.shift_ &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case COMPLETE:
                // empty
                break;
            case POSITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.display.reference.types.DisplayLineValidityPosition)objectChoice);
                break;
            case GEOMETRY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case GEOMETRY_OFFSET:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.LinePositionOffset2D)objectChoice);
                break;
            case PERCENTAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.PercentagePosition)objectChoice);
                break;
            case CURVED_LABEL_POSITIONING_HINT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.display.reference.types.CurvedLabelPositioningHint)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.display.reference.types.DisplayLineValidityPosition(in, (byte)(getShift()));
            break;
        case GEOMETRY:
            objectChoice = in.readVarSize();
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LinePositionOffset2D(in, (byte)(getShift()));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentagePosition(in);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            objectChoice = new nds.display.reference.types.CurvedLabelPositioningHint(in, (byte)(getShift()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.display.reference.types.DisplayLineValidityPosition(zserioContext.getValidityPosition(), in, (byte)(getShift()));
            break;
        case GEOMETRY:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getGeometryPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LinePositionOffset2D(zserioContext.getGeometryOffsetPosition(), in, (byte)(getShift()));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentagePosition(zserioContext.getPercentagePosition(), in);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            objectChoice = new nds.display.reference.types.CurvedLabelPositioningHint(zserioContext.getCurvedLabelPositioningHint(), in, (byte)(getShift()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityPosition().initializeOffsets(endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(getGeometryPosition());
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryOffsetPosition().initializeOffsets(endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentagePosition().initializeOffsets(endBitPosition);
            }
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            {
                endBitPosition = getCurvedLabelPositioningHint().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityPosition().initializeOffsets(zserioContext.getValidityPosition(), endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition += zserioContext.getGeometryPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryOffsetPosition().initializeOffsets(zserioContext.getGeometryOffsetPosition(), endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentagePosition().initializeOffsets(zserioContext.getPercentagePosition(), endBitPosition);
            }
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            {
                endBitPosition = getCurvedLabelPositioningHint().initializeOffsets(zserioContext.getCurvedLabelPositioningHint(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            // check parameters
            if (getValidityPosition().getShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field DisplayLinePositionChoice.validityPosition: " +
                        getValidityPosition().getShift() + " != " + (byte)(getShift()) + "!");
            }
            getValidityPosition().write(out);
            break;
        case GEOMETRY:
            out.writeVarSize(getGeometryPosition());
            break;
        case GEOMETRY_OFFSET:
            // check parameters
            if (getGeometryOffsetPosition().getShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field DisplayLinePositionChoice.geometryOffsetPosition: " +
                        getGeometryOffsetPosition().getShift() + " != " + (byte)(getShift()) + "!");
            }
            getGeometryOffsetPosition().write(out);
            break;
        case PERCENTAGE:
            getPercentagePosition().write(out);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            // check parameters
            if (getCurvedLabelPositioningHint().getShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field DisplayLinePositionChoice.curvedLabelPositioningHint: " +
                        getCurvedLabelPositioningHint().getShift() + " != " + (byte)(getShift()) + "!");
            }
            getCurvedLabelPositioningHint().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityPosition().write(zserioContext.getValidityPosition(), out);
            break;
        case GEOMETRY:
            zserioContext.getGeometryPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            getGeometryOffsetPosition().write(zserioContext.getGeometryOffsetPosition(), out);
            break;
        case PERCENTAGE:
            getPercentagePosition().write(zserioContext.getPercentagePosition(), out);
            break;
        case CURVED_LABEL_POSITIONING_HINT:
            getCurvedLabelPositioningHint().write(zserioContext.getCurvedLabelPositioningHint(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice DisplayLinePositionChoice: " + getType() + "!");
        }
    }

    public static final int CHOICE_validityPosition = 0;
    public static final int CHOICE_geometryPosition = 1;
    public static final int CHOICE_geometryOffsetPosition = 2;
    public static final int CHOICE_percentagePosition = 3;
    public static final int CHOICE_curvedLabelPositioningHint = 4;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.display.reference.types.DisplayLineValidityType type_;
    private final byte shift_;
    private java.lang.Object objectChoice;
}
