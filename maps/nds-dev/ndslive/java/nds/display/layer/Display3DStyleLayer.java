/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.layer;

public class Display3DStyleLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public Display3DStyleLayer()
    {
    }

    public Display3DStyleLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Display3DStyleLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Display3DStyleLayer(
            nds.display.metadata.Display3DStyleLayerContent content_,
            nds.display.types.Texture[] textures_,
            nds.display.types.Style3DColor[] colors_)
    {
        setContent(content_);
        setTextures(textures_);
        setColors(colors_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isTexturesUsed())
        {
            endBitPosition += textures_.bitSizeOf(endBitPosition);
        }
        if (isColorsUsed())
        {
            endBitPosition += colors_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isTexturesUsed())
        {
            endBitPosition += textures_.bitSizeOfPacked(endBitPosition);
        }
        if (isColorsUsed())
        {
            endBitPosition += colors_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.metadata.Display3DStyleLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.display.metadata.Display3DStyleLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.display.types.Texture[] getTextures()
    {
        return (textures_ == null) ? null : textures_.getRawArray();
    }

    public void setTextures(nds.display.types.Texture[] textures_)
    {
        if (textures_ == null)
        {
            this.textures_ = null;
        }
        else
        {
            this.textures_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Texture.class, textures_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Texture>(new ZserioElementFactory_textures()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isTexturesUsed()
    {
        return (getContent().getHasTextures());
    }

    public boolean isTexturesSet()
    {
        return (textures_ != null);
    }

    public void resetTextures()
    {
        this.textures_ = null;
    }

    public nds.display.types.Style3DColor[] getColors()
    {
        return (colors_ == null) ? null : colors_.getRawArray();
    }

    public void setColors(nds.display.types.Style3DColor[] colors_)
    {
        if (colors_ == null)
        {
            this.colors_ = null;
        }
        else
        {
            this.colors_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Style3DColor.class, colors_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Style3DColor>(new ZserioElementFactory_colors()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isColorsUsed()
    {
        return (getContent().getHasColors());
    }

    public boolean isColorsSet()
    {
        return (colors_ != null);
    }

    public void resetColors()
    {
        this.colors_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Display3DStyleLayer)
        {
            final Display3DStyleLayer that = (Display3DStyleLayer)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isTexturesUsed()) ? !that.isTexturesUsed() :
                        ((textures_ == null) ? that.textures_ == null : textures_.equals(that.textures_))) &&
                    ((!isColorsUsed()) ? !that.isColorsUsed() :
                        ((colors_ == null) ? that.colors_ == null : colors_.equals(that.colors_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isTexturesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textures_);
        if (isColorsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, colors_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.display.metadata.Display3DStyleLayerContent(in);

        if (getContent().getHasTextures())
        {
            textures_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Texture.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Texture>(new ZserioElementFactory_textures()),
                    zserio.runtime.array.ArrayType.AUTO);
            textures_.read(in);
        }

        if (getContent().getHasColors())
        {
            colors_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Style3DColor.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Style3DColor>(new ZserioElementFactory_colors()),
                    zserio.runtime.array.ArrayType.AUTO);
            colors_.read(in);
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.display.metadata.Display3DStyleLayerContent(in);

        if (getContent().getHasTextures())
        {
            textures_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Texture.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Texture>(new ZserioElementFactory_textures()),
                    zserio.runtime.array.ArrayType.AUTO);
            textures_.readPacked(in);
        }

        if (getContent().getHasColors())
        {
            colors_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Style3DColor.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Style3DColor>(new ZserioElementFactory_colors()),
                    zserio.runtime.array.ArrayType.AUTO);
            colors_.readPacked(in);
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(endBitPosition);
        if (isTexturesUsed())
        {
            endBitPosition = textures_.initializeOffsets(endBitPosition);
        }
        if (isColorsUsed())
        {
            endBitPosition = colors_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(endBitPosition);
        if (isTexturesUsed())
        {
            endBitPosition = textures_.initializeOffsetsPacked(endBitPosition);
        }
        if (isColorsUsed())
        {
            endBitPosition = colors_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        content_.write(out);

        if (isTexturesUsed())
        {
            textures_.write(out);
        }

        if (isColorsUsed())
        {
            colors_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        checkConstraints();

        content_.write(out);

        if (isTexturesUsed())
        {
            textures_.writePacked(out);
        }

        if (isColorsUsed())
        {
            colors_.writePacked(out);
        }
    }

    private void checkConstraints()
    {
        if (isTexturesUsed() && !(getTextures().length > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Display3DStyleLayer.textures!");
        if (isColorsUsed() && !(getColors().length > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Display3DStyleLayer.colors!");
    }

    private static final class ZserioElementFactory_textures implements zserio.runtime.array.PackableElementFactory<nds.display.types.Texture>
    {
        @Override
        public nds.display.types.Texture create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.Texture(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.Texture.ZserioPackingContext();
        }

        @Override
        public nds.display.types.Texture create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.Texture(context, in);
        }
    }

    private static final class ZserioElementFactory_colors implements zserio.runtime.array.PackableElementFactory<nds.display.types.Style3DColor>
    {
        @Override
        public nds.display.types.Style3DColor create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.Style3DColor(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.Style3DColor.ZserioPackingContext();
        }

        @Override
        public nds.display.types.Style3DColor create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.Style3DColor(context, in);
        }
    }

    private nds.display.metadata.Display3DStyleLayerContent content_;
    private zserio.runtime.array.Array textures_;
    private zserio.runtime.array.Array colors_;
}
