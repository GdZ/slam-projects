/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.layer;

public class Display2DLayerHeader implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            minScaleDenominator_ = new zserio.runtime.array.DeltaContext();
            maxScaleDenominator_ = new zserio.runtime.array.DeltaContext();
            numSublevels_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public zserio.runtime.array.DeltaContext getMinScaleDenominator()
        {
            return minScaleDenominator_;
        }

        public zserio.runtime.array.DeltaContext getMaxScaleDenominator()
        {
            return maxScaleDenominator_;
        }

        public zserio.runtime.array.DeltaContext getNumSublevels()
        {
            return numSublevels_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private zserio.runtime.array.DeltaContext minScaleDenominator_;
        private zserio.runtime.array.DeltaContext maxScaleDenominator_;
        private zserio.runtime.array.DeltaContext numSublevels_;
    };

    public Display2DLayerHeader()
    {
    }

    public Display2DLayerHeader(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Display2DLayerHeader(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Display2DLayerHeader(
            nds.display.metadata.Display2DContent content_,
            boolean hasClippingEdgeList_,
            boolean hasScaleSublevels_,
            long minScaleDenominator_,
            long maxScaleDenominator_,
            java.lang.Short numSublevels_,
            long[] subscales_)
    {
        setContent(content_);
        setHasClippingEdgeList(hasClippingEdgeList_);
        setHasScaleSublevels(hasScaleSublevels_);
        setMinScaleDenominator(minScaleDenominator_);
        setMaxScaleDenominator(maxScaleDenominator_);
        setNumSublevels(numSublevels_);
        setSubscales(subscales_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        zserioContext.getMinScaleDenominator().init(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(minScaleDenominator_));
        zserioContext.getMaxScaleDenominator().init(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(maxScaleDenominator_));
        if (isNumSublevelsUsed())
        {
            zserioContext.getNumSublevels().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSublevels_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 32;
        endBitPosition += 32;
        if (isNumSublevelsUsed())
        {
            endBitPosition += 8;
        }
        if (isSubscalesUsed())
        {
            endBitPosition += subscales_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += zserioContext.getMinScaleDenominator().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(minScaleDenominator_));
        endBitPosition += zserioContext.getMaxScaleDenominator().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(maxScaleDenominator_));
        if (isNumSublevelsUsed())
        {
            endBitPosition += zserioContext.getNumSublevels().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSublevels_));
        }
        if (isSubscalesUsed())
        {
            endBitPosition += subscales_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.metadata.Display2DContent getContent()
    {
        return content_;
    }

    public void setContent(nds.display.metadata.Display2DContent content_)
    {
        this.content_ = content_;
    }

    public boolean getHasClippingEdgeList()
    {
        return hasClippingEdgeList_;
    }

    public void setHasClippingEdgeList(boolean hasClippingEdgeList_)
    {
        this.hasClippingEdgeList_ = hasClippingEdgeList_;
    }

    public boolean getHasScaleSublevels()
    {
        return hasScaleSublevels_;
    }

    public void setHasScaleSublevels(boolean hasScaleSublevels_)
    {
        this.hasScaleSublevels_ = hasScaleSublevels_;
    }

    public long getMinScaleDenominator()
    {
        return minScaleDenominator_;
    }

    public void setMinScaleDenominator(long minScaleDenominator_)
    {
        this.minScaleDenominator_ = minScaleDenominator_;
    }

    public long getMaxScaleDenominator()
    {
        return maxScaleDenominator_;
    }

    public void setMaxScaleDenominator(long maxScaleDenominator_)
    {
        this.maxScaleDenominator_ = maxScaleDenominator_;
    }

    public java.lang.Short getNumSublevels()
    {
        return numSublevels_;
    }

    public void setNumSublevels(java.lang.Short numSublevels_)
    {
        this.numSublevels_ = numSublevels_;
    }

    public boolean isNumSublevelsUsed()
    {
        return (getHasScaleSublevels());
    }

    public boolean isNumSublevelsSet()
    {
        return (numSublevels_ != null);
    }

    public void resetNumSublevels()
    {
        this.numSublevels_ = null;
    }

    public long[] getSubscales()
    {
        return (subscales_ == null) ? null : subscales_.getRawArray();
    }

    public void setSubscales(long[] subscales_)
    {
        if (subscales_ == null)
        {
            this.subscales_ = null;
        }
        else
        {
            this.subscales_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.LongRawArray(subscales_),
                    new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isSubscalesUsed()
    {
        return (getHasScaleSublevels());
    }

    public boolean isSubscalesSet()
    {
        return (subscales_ != null);
    }

    public void resetSubscales()
    {
        this.subscales_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Display2DLayerHeader)
        {
            final Display2DLayerHeader that = (Display2DLayerHeader)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    hasClippingEdgeList_ == that.hasClippingEdgeList_ &&
                    hasScaleSublevels_ == that.hasScaleSublevels_ &&
                    minScaleDenominator_ == that.minScaleDenominator_ &&
                    maxScaleDenominator_ == that.maxScaleDenominator_ &&
                    ((!isNumSublevelsUsed()) ? !that.isNumSublevelsUsed() :
                        ((numSublevels_ == null) ? that.numSublevels_ == null : numSublevels_.equals(that.numSublevels_))) &&
                    ((!isSubscalesUsed()) ? !that.isSubscalesUsed() :
                        ((subscales_ == null) ? that.subscales_ == null : subscales_.equals(that.subscales_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasClippingEdgeList_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasScaleSublevels_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, minScaleDenominator_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxScaleDenominator_);
        if (isNumSublevelsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSublevels_);
        if (isSubscalesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, subscales_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.display.metadata.Display2DContent(in);

        hasClippingEdgeList_ = in.readBool();

        hasScaleSublevels_ = in.readBool();

        minScaleDenominator_ = in.readUnsignedInt();

        maxScaleDenominator_ = in.readUnsignedInt();

        if (getHasScaleSublevels())
        {
            numSublevels_ = in.readUnsignedByte();
        }

        if (getHasScaleSublevels())
        {
            subscales_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.LongRawArray(),
                    new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                    zserio.runtime.array.ArrayType.NORMAL);
            subscales_.read(in, (int)(getNumSublevels()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.display.metadata.Display2DContent(zserioContext.getContent(), in);

        hasClippingEdgeList_ = in.readBool();

        hasScaleSublevels_ = in.readBool();

        minScaleDenominator_ = ((zserio.runtime.array.ArrayElement.LongArrayElement)
                zserioContext.getMinScaleDenominator().read(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)), in)).get();

        maxScaleDenominator_ = ((zserio.runtime.array.ArrayElement.LongArrayElement)
                zserioContext.getMaxScaleDenominator().read(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)), in)).get();

        if (getHasScaleSublevels())
        {
            numSublevels_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumSublevels().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (getHasScaleSublevels())
        {
            subscales_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.LongRawArray(),
                    new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                    zserio.runtime.array.ArrayType.NORMAL);
            subscales_.readPacked(in, (int)(getNumSublevels()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 32;
        endBitPosition += 32;
        if (isNumSublevelsUsed())
        {
            endBitPosition += 8;
        }
        if (isSubscalesUsed())
        {
            endBitPosition = subscales_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += zserioContext.getMinScaleDenominator().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(minScaleDenominator_));
        endBitPosition += zserioContext.getMaxScaleDenominator().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)),
                new zserio.runtime.array.ArrayElement.LongArrayElement(maxScaleDenominator_));
        if (isNumSublevelsUsed())
        {
            endBitPosition += zserioContext.getNumSublevels().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSublevels_));
        }
        if (isSubscalesUsed())
        {
            endBitPosition = subscales_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        out.writeBool(hasClippingEdgeList_);

        out.writeBool(hasScaleSublevels_);

        out.writeUnsignedInt(minScaleDenominator_);

        out.writeUnsignedInt(maxScaleDenominator_);

        if (isNumSublevelsUsed())
        {
            out.writeUnsignedByte(numSublevels_);
        }

        if (isSubscalesUsed())
        {
            if (subscales_.size() != (int)(getNumSublevels()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Display2DLayerHeader.subscales: " +
                        subscales_.size() + " != " + (int)(getNumSublevels()) + "!");
            }
            subscales_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        out.writeBool(hasClippingEdgeList_);

        out.writeBool(hasScaleSublevels_);

        zserioContext.getMinScaleDenominator().write(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.LongArrayElement(minScaleDenominator_));

        zserioContext.getMaxScaleDenominator().write(new zserio.runtime.array.ArrayTraits.BitFieldLongArrayTraits((int)(32)), out,
                new zserio.runtime.array.ArrayElement.LongArrayElement(maxScaleDenominator_));

        if (isNumSublevelsUsed())
        {
            zserioContext.getNumSublevels().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numSublevels_));
        }

        if (isSubscalesUsed())
        {
            if (subscales_.size() != (int)(getNumSublevels()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Display2DLayerHeader.subscales: " +
                        subscales_.size() + " != " + (int)(getNumSublevels()) + "!");
            }
            subscales_.writePacked(out);
        }
    }

    private nds.display.metadata.Display2DContent content_;
    private boolean hasClippingEdgeList_;
    private boolean hasScaleSublevels_;
    private long minScaleDenominator_;
    private long maxScaleDenominator_;
    private java.lang.Short numSublevels_;
    private zserio.runtime.array.Array subscales_;
}
