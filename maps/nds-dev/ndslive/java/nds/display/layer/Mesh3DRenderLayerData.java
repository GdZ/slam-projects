/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.layer;

public class Mesh3DRenderLayerData implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            header_ = new nds.display.types.Mesh3DRenderLayerHeader.ZserioPackingContext();
            mesh3dDisplayGeometryLayer_ = new nds.display.instantiations.Mesh3dDisplayGeometryLayer.ZserioPackingContext();
            normalIndices_ = new nds.core.geometry.IndexBuffer.ZserioPackingContext();
            textureCoordsIndices_ = new nds.core.geometry.IndexBuffer.ZserioPackingContext();
            textureCoordsAdditionalIndices_ = new nds.core.geometry.IndexBuffer.ZserioPackingContext();
            colorIdIndices_ = new nds.core.geometry.IndexBuffer.ZserioPackingContext();
        }

        public nds.display.types.Mesh3DRenderLayerHeader.ZserioPackingContext getHeader()
        {
            return header_;
        }

        public nds.display.instantiations.Mesh3dDisplayGeometryLayer.ZserioPackingContext getMesh3dDisplayGeometryLayer()
        {
            return mesh3dDisplayGeometryLayer_;
        }

        public nds.core.geometry.IndexBuffer.ZserioPackingContext getNormalIndices()
        {
            return normalIndices_;
        }

        public nds.core.geometry.IndexBuffer.ZserioPackingContext getTextureCoordsIndices()
        {
            return textureCoordsIndices_;
        }

        public nds.core.geometry.IndexBuffer.ZserioPackingContext getTextureCoordsAdditionalIndices()
        {
            return textureCoordsAdditionalIndices_;
        }

        public nds.core.geometry.IndexBuffer.ZserioPackingContext getColorIdIndices()
        {
            return colorIdIndices_;
        }

        private nds.display.types.Mesh3DRenderLayerHeader.ZserioPackingContext header_;
        private nds.display.instantiations.Mesh3dDisplayGeometryLayer.ZserioPackingContext mesh3dDisplayGeometryLayer_;
        private nds.core.geometry.IndexBuffer.ZserioPackingContext normalIndices_;
        private nds.core.geometry.IndexBuffer.ZserioPackingContext textureCoordsIndices_;
        private nds.core.geometry.IndexBuffer.ZserioPackingContext textureCoordsAdditionalIndices_;
        private nds.core.geometry.IndexBuffer.ZserioPackingContext colorIdIndices_;
    };

    public Mesh3DRenderLayerData()
    {
    }

    public Mesh3DRenderLayerData(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Mesh3DRenderLayerData(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Mesh3DRenderLayerData(
            nds.display.types.Mesh3DRenderLayerHeader header_,
            nds.display.instantiations.Mesh3dDisplayGeometryLayer mesh3dDisplayGeometryLayer_,
            nds.display.types.NormalSphere[] normals_,
            nds.display.types.TextureCoords[] textureCoordinates_,
            nds.display.types.TextureCoords[] textureCoordsAdditional_,
            short[] colorIds_,
            nds.core.geometry.IndexBuffer normalIndices_,
            nds.core.geometry.IndexBuffer textureCoordsIndices_,
            nds.core.geometry.IndexBuffer textureCoordsAdditionalIndices_,
            nds.core.geometry.IndexBuffer colorIdIndices_,
            nds.display.types.Mesh3DRenderData[] mesh3DRenderData_)
    {
        setHeader(header_);
        setMesh3dDisplayGeometryLayer(mesh3dDisplayGeometryLayer_);
        setNormals(normals_);
        setTextureCoordinates(textureCoordinates_);
        setTextureCoordsAdditional(textureCoordsAdditional_);
        setColorIds(colorIds_);
        setNormalIndices(normalIndices_);
        setTextureCoordsIndices(textureCoordsIndices_);
        setTextureCoordsAdditionalIndices(textureCoordsAdditionalIndices_);
        setColorIdIndices(colorIdIndices_);
        setMesh3DRenderData(mesh3DRenderData_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.initPackingContext(zserioContext.getHeader());
        mesh3dDisplayGeometryLayer_.initPackingContext(zserioContext.getMesh3dDisplayGeometryLayer());
        if (isNormalIndicesUsed())
        {
            normalIndices_.initPackingContext(zserioContext.getNormalIndices());
        }
        if (isTextureCoordsIndicesUsed())
        {
            textureCoordsIndices_.initPackingContext(zserioContext.getTextureCoordsIndices());
        }
        if (isTextureCoordsAdditionalIndicesUsed())
        {
            textureCoordsAdditionalIndices_.initPackingContext(zserioContext.getTextureCoordsAdditionalIndices());
        }
        if (isColorIdIndicesUsed())
        {
            colorIdIndices_.initPackingContext(zserioContext.getColorIdIndices());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(endBitPosition);
        endBitPosition += mesh3dDisplayGeometryLayer_.bitSizeOf(endBitPosition);
        if (isNormalsUsed())
        {
            endBitPosition += normals_.bitSizeOfPacked(endBitPosition);
        }
        if (isTextureCoordinatesUsed())
        {
            endBitPosition += textureCoordinates_.bitSizeOf(endBitPosition);
        }
        if (isTextureCoordsAdditionalUsed())
        {
            endBitPosition += textureCoordsAdditional_.bitSizeOf(endBitPosition);
        }
        if (isColorIdsUsed())
        {
            endBitPosition += colorIds_.bitSizeOfPacked(endBitPosition);
        }
        if (isNormalIndicesUsed())
        {
            endBitPosition += normalIndices_.bitSizeOf(endBitPosition);
        }
        if (isTextureCoordsIndicesUsed())
        {
            endBitPosition += textureCoordsIndices_.bitSizeOf(endBitPosition);
        }
        if (isTextureCoordsAdditionalIndicesUsed())
        {
            endBitPosition += textureCoordsAdditionalIndices_.bitSizeOf(endBitPosition);
        }
        if (isColorIdIndicesUsed())
        {
            endBitPosition += colorIdIndices_.bitSizeOf(endBitPosition);
        }
        endBitPosition += mesh3DRenderData_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(zserioContext.getHeader(), endBitPosition);
        endBitPosition += mesh3dDisplayGeometryLayer_.bitSizeOf(zserioContext.getMesh3dDisplayGeometryLayer(), endBitPosition);
        if (isNormalsUsed())
        {
            endBitPosition += normals_.bitSizeOfPacked(endBitPosition);
        }
        if (isTextureCoordinatesUsed())
        {
            endBitPosition += textureCoordinates_.bitSizeOf(endBitPosition);
        }
        if (isTextureCoordsAdditionalUsed())
        {
            endBitPosition += textureCoordsAdditional_.bitSizeOf(endBitPosition);
        }
        if (isColorIdsUsed())
        {
            endBitPosition += colorIds_.bitSizeOfPacked(endBitPosition);
        }
        if (isNormalIndicesUsed())
        {
            endBitPosition += normalIndices_.bitSizeOf(zserioContext.getNormalIndices(), endBitPosition);
        }
        if (isTextureCoordsIndicesUsed())
        {
            endBitPosition += textureCoordsIndices_.bitSizeOf(zserioContext.getTextureCoordsIndices(), endBitPosition);
        }
        if (isTextureCoordsAdditionalIndicesUsed())
        {
            endBitPosition += textureCoordsAdditionalIndices_.bitSizeOf(zserioContext.getTextureCoordsAdditionalIndices(), endBitPosition);
        }
        if (isColorIdIndicesUsed())
        {
            endBitPosition += colorIdIndices_.bitSizeOf(zserioContext.getColorIdIndices(), endBitPosition);
        }
        endBitPosition += mesh3DRenderData_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.Mesh3DRenderLayerHeader getHeader()
    {
        return header_;
    }

    public void setHeader(nds.display.types.Mesh3DRenderLayerHeader header_)
    {
        this.header_ = header_;
    }

    public nds.display.instantiations.Mesh3dDisplayGeometryLayer getMesh3dDisplayGeometryLayer()
    {
        return mesh3dDisplayGeometryLayer_;
    }

    public void setMesh3dDisplayGeometryLayer(nds.display.instantiations.Mesh3dDisplayGeometryLayer mesh3dDisplayGeometryLayer_)
    {
        this.mesh3dDisplayGeometryLayer_ = mesh3dDisplayGeometryLayer_;
    }

    public nds.display.types.NormalSphere[] getNormals()
    {
        return (normals_ == null) ? null : normals_.getRawArray();
    }

    public void setNormals(nds.display.types.NormalSphere[] normals_)
    {
        if (normals_ == null)
        {
            this.normals_ = null;
        }
        else
        {
            this.normals_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class, normals_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isNormalsUsed()
    {
        return ((getHeader().getHasNormals()));
    }

    public boolean isNormalsSet()
    {
        return (normals_ != null);
    }

    public void resetNormals()
    {
        this.normals_ = null;
    }

    public nds.display.types.TextureCoords[] getTextureCoordinates()
    {
        return (textureCoordinates_ == null) ? null : textureCoordinates_.getRawArray();
    }

    public void setTextureCoordinates(nds.display.types.TextureCoords[] textureCoordinates_)
    {
        if (textureCoordinates_ == null)
        {
            this.textureCoordinates_ = null;
        }
        else
        {
            this.textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class, textureCoordinates_),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isTextureCoordinatesUsed()
    {
        return ((getHeader().getHasTextureCoords()));
    }

    public boolean isTextureCoordinatesSet()
    {
        return (textureCoordinates_ != null);
    }

    public void resetTextureCoordinates()
    {
        this.textureCoordinates_ = null;
    }

    public nds.display.types.TextureCoords[] getTextureCoordsAdditional()
    {
        return (textureCoordsAdditional_ == null) ? null : textureCoordsAdditional_.getRawArray();
    }

    public void setTextureCoordsAdditional(nds.display.types.TextureCoords[] textureCoordsAdditional_)
    {
        if (textureCoordsAdditional_ == null)
        {
            this.textureCoordsAdditional_ = null;
        }
        else
        {
            this.textureCoordsAdditional_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class, textureCoordsAdditional_),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordsAdditional()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isTextureCoordsAdditionalUsed()
    {
        return ((getHeader().getHasTextureCoordsAdditional()));
    }

    public boolean isTextureCoordsAdditionalSet()
    {
        return (textureCoordsAdditional_ != null);
    }

    public void resetTextureCoordsAdditional()
    {
        this.textureCoordsAdditional_ = null;
    }

    public short[] getColorIds()
    {
        return (colorIds_ == null) ? null : colorIds_.getRawArray();
    }

    public void setColorIds(short[] colorIds_)
    {
        if (colorIds_ == null)
        {
            this.colorIds_ = null;
        }
        else
        {
            this.colorIds_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(colorIds_),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isColorIdsUsed()
    {
        return ((getHeader().funcHasColorPerVertex()));
    }

    public boolean isColorIdsSet()
    {
        return (colorIds_ != null);
    }

    public void resetColorIds()
    {
        this.colorIds_ = null;
    }

    public nds.core.geometry.IndexBuffer getNormalIndices()
    {
        return normalIndices_;
    }

    public void setNormalIndices(nds.core.geometry.IndexBuffer normalIndices_)
    {
        this.normalIndices_ = normalIndices_;
    }

    public boolean isNormalIndicesUsed()
    {
        return ((getHeader().getHasNormals()));
    }

    public boolean isNormalIndicesSet()
    {
        return (normalIndices_ != null);
    }

    public void resetNormalIndices()
    {
        this.normalIndices_ = null;
    }

    public nds.core.geometry.IndexBuffer getTextureCoordsIndices()
    {
        return textureCoordsIndices_;
    }

    public void setTextureCoordsIndices(nds.core.geometry.IndexBuffer textureCoordsIndices_)
    {
        this.textureCoordsIndices_ = textureCoordsIndices_;
    }

    public boolean isTextureCoordsIndicesUsed()
    {
        return ((getHeader().getHasTextureCoords()));
    }

    public boolean isTextureCoordsIndicesSet()
    {
        return (textureCoordsIndices_ != null);
    }

    public void resetTextureCoordsIndices()
    {
        this.textureCoordsIndices_ = null;
    }

    public nds.core.geometry.IndexBuffer getTextureCoordsAdditionalIndices()
    {
        return textureCoordsAdditionalIndices_;
    }

    public void setTextureCoordsAdditionalIndices(nds.core.geometry.IndexBuffer textureCoordsAdditionalIndices_)
    {
        this.textureCoordsAdditionalIndices_ = textureCoordsAdditionalIndices_;
    }

    public boolean isTextureCoordsAdditionalIndicesUsed()
    {
        return ((getHeader().getHasTextureCoordsAdditional()));
    }

    public boolean isTextureCoordsAdditionalIndicesSet()
    {
        return (textureCoordsAdditionalIndices_ != null);
    }

    public void resetTextureCoordsAdditionalIndices()
    {
        this.textureCoordsAdditionalIndices_ = null;
    }

    public nds.core.geometry.IndexBuffer getColorIdIndices()
    {
        return colorIdIndices_;
    }

    public void setColorIdIndices(nds.core.geometry.IndexBuffer colorIdIndices_)
    {
        this.colorIdIndices_ = colorIdIndices_;
    }

    public boolean isColorIdIndicesUsed()
    {
        return ((getHeader().funcHasColorPerVertex()));
    }

    public boolean isColorIdIndicesSet()
    {
        return (colorIdIndices_ != null);
    }

    public void resetColorIdIndices()
    {
        this.colorIdIndices_ = null;
    }

    public nds.display.types.Mesh3DRenderData[] getMesh3DRenderData()
    {
        return (mesh3DRenderData_ == null) ? null : mesh3DRenderData_.getRawArray();
    }

    public void setMesh3DRenderData(nds.display.types.Mesh3DRenderData[] mesh3DRenderData_)
    {
        this.mesh3DRenderData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Mesh3DRenderData.class, mesh3DRenderData_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Mesh3DRenderData>(new ZserioElementFactory_mesh3DRenderData()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Mesh3DRenderLayerData)
        {
            final Mesh3DRenderLayerData that = (Mesh3DRenderLayerData)obj;

            return
                    ((header_ == null) ? that.header_ == null : header_.equals(that.header_)) &&
                    ((mesh3dDisplayGeometryLayer_ == null) ? that.mesh3dDisplayGeometryLayer_ == null : mesh3dDisplayGeometryLayer_.equals(that.mesh3dDisplayGeometryLayer_)) &&
                    ((!isNormalsUsed()) ? !that.isNormalsUsed() :
                        ((normals_ == null) ? that.normals_ == null : normals_.equals(that.normals_))) &&
                    ((!isTextureCoordinatesUsed()) ? !that.isTextureCoordinatesUsed() :
                        ((textureCoordinates_ == null) ? that.textureCoordinates_ == null : textureCoordinates_.equals(that.textureCoordinates_))) &&
                    ((!isTextureCoordsAdditionalUsed()) ? !that.isTextureCoordsAdditionalUsed() :
                        ((textureCoordsAdditional_ == null) ? that.textureCoordsAdditional_ == null : textureCoordsAdditional_.equals(that.textureCoordsAdditional_))) &&
                    ((!isColorIdsUsed()) ? !that.isColorIdsUsed() :
                        ((colorIds_ == null) ? that.colorIds_ == null : colorIds_.equals(that.colorIds_))) &&
                    ((!isNormalIndicesUsed()) ? !that.isNormalIndicesUsed() :
                        ((normalIndices_ == null) ? that.normalIndices_ == null : normalIndices_.equals(that.normalIndices_))) &&
                    ((!isTextureCoordsIndicesUsed()) ? !that.isTextureCoordsIndicesUsed() :
                        ((textureCoordsIndices_ == null) ? that.textureCoordsIndices_ == null : textureCoordsIndices_.equals(that.textureCoordsIndices_))) &&
                    ((!isTextureCoordsAdditionalIndicesUsed()) ? !that.isTextureCoordsAdditionalIndicesUsed() :
                        ((textureCoordsAdditionalIndices_ == null) ? that.textureCoordsAdditionalIndices_ == null : textureCoordsAdditionalIndices_.equals(that.textureCoordsAdditionalIndices_))) &&
                    ((!isColorIdIndicesUsed()) ? !that.isColorIdIndicesUsed() :
                        ((colorIdIndices_ == null) ? that.colorIdIndices_ == null : colorIdIndices_.equals(that.colorIdIndices_))) &&
                    ((mesh3DRenderData_ == null) ? that.mesh3DRenderData_ == null : mesh3DRenderData_.equals(that.mesh3DRenderData_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, mesh3dDisplayGeometryLayer_);
        if (isNormalsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, normals_);
        if (isTextureCoordinatesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureCoordinates_);
        if (isTextureCoordsAdditionalUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureCoordsAdditional_);
        if (isColorIdsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorIds_);
        if (isNormalIndicesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, normalIndices_);
        if (isTextureCoordsIndicesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureCoordsIndices_);
        if (isTextureCoordsAdditionalIndicesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, textureCoordsAdditionalIndices_);
        if (isColorIdIndicesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, colorIdIndices_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, mesh3DRenderData_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        header_ = new nds.display.types.Mesh3DRenderLayerHeader(in);

        mesh3dDisplayGeometryLayer_ = new nds.display.instantiations.Mesh3dDisplayGeometryLayer(in, nds.core.geometry.GeometryLayerType.MESH_3D, (boolean)(true), (boolean)(true));

        if ((getHeader().getHasNormals()))
        {
            normals_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                    zserio.runtime.array.ArrayType.NORMAL);
            normals_.readPacked(in, (int)(getHeader().funcNumOfNormals()));
        }

        if ((getHeader().getHasTextureCoords()))
        {
            textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordinates_.read(in, (int)(getHeader().funcNumOfTextureCoords()));
        }

        if ((getHeader().getHasTextureCoordsAdditional()))
        {
            textureCoordsAdditional_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordsAdditional()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordsAdditional_.read(in, (int)(getHeader().funcNumOfTextureCoordsAdditional()));
        }

        if ((getHeader().funcHasColorPerVertex()))
        {
            colorIds_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            colorIds_.readPacked(in, (int)(getHeader().funcNumOfColorIds()));
        }

        if ((getHeader().getHasNormals()))
        {
            normalIndices_ = new nds.core.geometry.IndexBuffer(in, (int)(getNormals().length));
        }

        if ((getHeader().getHasTextureCoords()))
        {
            textureCoordsIndices_ = new nds.core.geometry.IndexBuffer(in, (int)(getTextureCoordinates().length));
        }

        if ((getHeader().getHasTextureCoordsAdditional()))
        {
            textureCoordsAdditionalIndices_ = new nds.core.geometry.IndexBuffer(in, (int)(getTextureCoordsAdditional().length));
        }

        if ((getHeader().funcHasColorPerVertex()))
        {
            colorIdIndices_ = new nds.core.geometry.IndexBuffer(in, (int)(getColorIds().length));
        }

        mesh3DRenderData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Mesh3DRenderData.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Mesh3DRenderData>(new ZserioElementFactory_mesh3DRenderData()),
                zserio.runtime.array.ArrayType.NORMAL);
        mesh3DRenderData_.read(in, (int)(getMesh3dDisplayGeometryLayer().getNumElements()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_ = new nds.display.types.Mesh3DRenderLayerHeader(zserioContext.getHeader(), in);

        mesh3dDisplayGeometryLayer_ = new nds.display.instantiations.Mesh3dDisplayGeometryLayer(zserioContext.getMesh3dDisplayGeometryLayer(), in, nds.core.geometry.GeometryLayerType.MESH_3D, (boolean)(true), (boolean)(true));

        if ((getHeader().getHasNormals()))
        {
            normals_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.NormalSphere.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.NormalSphere>(new ZserioElementFactory_normals()),
                    zserio.runtime.array.ArrayType.NORMAL);
            normals_.readPacked(in, (int)(getHeader().funcNumOfNormals()));
        }

        if ((getHeader().getHasTextureCoords()))
        {
            textureCoordinates_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordinates()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordinates_.read(in, (int)(getHeader().funcNumOfTextureCoords()));
        }

        if ((getHeader().getHasTextureCoordsAdditional()))
        {
            textureCoordsAdditional_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.TextureCoords.class),
                    new zserio.runtime.array.ArrayTraits.WriteObjectArrayTraits<nds.display.types.TextureCoords>(new ZserioElementFactory_textureCoordsAdditional()),
                    zserio.runtime.array.ArrayType.NORMAL);
            textureCoordsAdditional_.read(in, (int)(getHeader().funcNumOfTextureCoordsAdditional()));
        }

        if ((getHeader().funcHasColorPerVertex()))
        {
            colorIds_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            colorIds_.readPacked(in, (int)(getHeader().funcNumOfColorIds()));
        }

        if ((getHeader().getHasNormals()))
        {
            normalIndices_ = new nds.core.geometry.IndexBuffer(zserioContext.getNormalIndices(), in, (int)(getNormals().length));
        }

        if ((getHeader().getHasTextureCoords()))
        {
            textureCoordsIndices_ = new nds.core.geometry.IndexBuffer(zserioContext.getTextureCoordsIndices(), in, (int)(getTextureCoordinates().length));
        }

        if ((getHeader().getHasTextureCoordsAdditional()))
        {
            textureCoordsAdditionalIndices_ = new nds.core.geometry.IndexBuffer(zserioContext.getTextureCoordsAdditionalIndices(), in, (int)(getTextureCoordsAdditional().length));
        }

        if ((getHeader().funcHasColorPerVertex()))
        {
            colorIdIndices_ = new nds.core.geometry.IndexBuffer(zserioContext.getColorIdIndices(), in, (int)(getColorIds().length));
        }

        mesh3DRenderData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.Mesh3DRenderData.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.Mesh3DRenderData>(new ZserioElementFactory_mesh3DRenderData()),
                zserio.runtime.array.ArrayType.NORMAL);
        mesh3DRenderData_.readPacked(in, (int)(getMesh3dDisplayGeometryLayer().getNumElements()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(endBitPosition);
        endBitPosition = mesh3dDisplayGeometryLayer_.initializeOffsets(endBitPosition);
        if (isNormalsUsed())
        {
            endBitPosition = normals_.initializeOffsetsPacked(endBitPosition);
        }
        if (isTextureCoordinatesUsed())
        {
            endBitPosition = textureCoordinates_.initializeOffsets(endBitPosition);
        }
        if (isTextureCoordsAdditionalUsed())
        {
            endBitPosition = textureCoordsAdditional_.initializeOffsets(endBitPosition);
        }
        if (isColorIdsUsed())
        {
            endBitPosition = colorIds_.initializeOffsetsPacked(endBitPosition);
        }
        if (isNormalIndicesUsed())
        {
            endBitPosition = normalIndices_.initializeOffsets(endBitPosition);
        }
        if (isTextureCoordsIndicesUsed())
        {
            endBitPosition = textureCoordsIndices_.initializeOffsets(endBitPosition);
        }
        if (isTextureCoordsAdditionalIndicesUsed())
        {
            endBitPosition = textureCoordsAdditionalIndices_.initializeOffsets(endBitPosition);
        }
        if (isColorIdIndicesUsed())
        {
            endBitPosition = colorIdIndices_.initializeOffsets(endBitPosition);
        }
        endBitPosition = mesh3DRenderData_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(zserioContext.getHeader(), endBitPosition);
        endBitPosition = mesh3dDisplayGeometryLayer_.initializeOffsets(zserioContext.getMesh3dDisplayGeometryLayer(), endBitPosition);
        if (isNormalsUsed())
        {
            endBitPosition = normals_.initializeOffsetsPacked(endBitPosition);
        }
        if (isTextureCoordinatesUsed())
        {
            endBitPosition = textureCoordinates_.initializeOffsets(endBitPosition);
        }
        if (isTextureCoordsAdditionalUsed())
        {
            endBitPosition = textureCoordsAdditional_.initializeOffsets(endBitPosition);
        }
        if (isColorIdsUsed())
        {
            endBitPosition = colorIds_.initializeOffsetsPacked(endBitPosition);
        }
        if (isNormalIndicesUsed())
        {
            endBitPosition = normalIndices_.initializeOffsets(zserioContext.getNormalIndices(), endBitPosition);
        }
        if (isTextureCoordsIndicesUsed())
        {
            endBitPosition = textureCoordsIndices_.initializeOffsets(zserioContext.getTextureCoordsIndices(), endBitPosition);
        }
        if (isTextureCoordsAdditionalIndicesUsed())
        {
            endBitPosition = textureCoordsAdditionalIndices_.initializeOffsets(zserioContext.getTextureCoordsAdditionalIndices(), endBitPosition);
        }
        if (isColorIdIndicesUsed())
        {
            endBitPosition = colorIdIndices_.initializeOffsets(zserioContext.getColorIdIndices(), endBitPosition);
        }
        endBitPosition = mesh3DRenderData_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        header_.write(out);

        // check parameters
        if (mesh3dDisplayGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.MESH_3D))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer!");
        }
        if (mesh3dDisplayGeometryLayer_.getHasIds() != (boolean)(true))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: " +
                    mesh3dDisplayGeometryLayer_.getHasIds() + " != " + (boolean)(true) + "!");
        }
        if (mesh3dDisplayGeometryLayer_.getHasTypes() != (boolean)(true))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field Mesh3DRenderLayerData.mesh3dDisplayGeometryLayer: " +
                    mesh3dDisplayGeometryLayer_.getHasTypes() + " != " + (boolean)(true) + "!");
        }
        mesh3dDisplayGeometryLayer_.write(out);

        if (isNormalsUsed())
        {
            if (normals_.size() != (int)(getHeader().funcNumOfNormals()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.normals: " +
                        normals_.size() + " != " + (int)(getHeader().funcNumOfNormals()) + "!");
            }
            normals_.writePacked(out);
        }

        if (isTextureCoordinatesUsed())
        {
            if (textureCoordinates_.size() != (int)(getHeader().funcNumOfTextureCoords()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: " +
                        textureCoordinates_.size() + " != " + (int)(getHeader().funcNumOfTextureCoords()) + "!");
            }
            textureCoordinates_.write(out);
        }

        if (isTextureCoordsAdditionalUsed())
        {
            if (textureCoordsAdditional_.size() != (int)(getHeader().funcNumOfTextureCoordsAdditional()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: " +
                        textureCoordsAdditional_.size() + " != " + (int)(getHeader().funcNumOfTextureCoordsAdditional()) + "!");
            }
            textureCoordsAdditional_.write(out);
        }

        if (isColorIdsUsed())
        {
            if (colorIds_.size() != (int)(getHeader().funcNumOfColorIds()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.colorIds: " +
                        colorIds_.size() + " != " + (int)(getHeader().funcNumOfColorIds()) + "!");
            }
            colorIds_.writePacked(out);
        }

        if (isNormalIndicesUsed())
        {
            // check parameters
            if (normalIndices_.getPositionBufferSize() != (int)(getNormals().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.normalIndices: " +
                        normalIndices_.getPositionBufferSize() + " != " + (int)(getNormals().length) + "!");
            }
            normalIndices_.write(out);
        }

        if (isTextureCoordsIndicesUsed())
        {
            // check parameters
            if (textureCoordsIndices_.getPositionBufferSize() != (int)(getTextureCoordinates().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsIndices: " +
                        textureCoordsIndices_.getPositionBufferSize() + " != " + (int)(getTextureCoordinates().length) + "!");
            }
            textureCoordsIndices_.write(out);
        }

        if (isTextureCoordsAdditionalIndicesUsed())
        {
            // check parameters
            if (textureCoordsAdditionalIndices_.getPositionBufferSize() != (int)(getTextureCoordsAdditional().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.textureCoordsAdditionalIndices: " +
                        textureCoordsAdditionalIndices_.getPositionBufferSize() + " != " + (int)(getTextureCoordsAdditional().length) + "!");
            }
            textureCoordsAdditionalIndices_.write(out);
        }

        if (isColorIdIndicesUsed())
        {
            // check parameters
            if (colorIdIndices_.getPositionBufferSize() != (int)(getColorIds().length))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter positionBufferSize for field Mesh3DRenderLayerData.colorIdIndices: " +
                        colorIdIndices_.getPositionBufferSize() + " != " + (int)(getColorIds().length) + "!");
            }
            colorIdIndices_.write(out);
        }

        if (mesh3DRenderData_.size() != (int)(getMesh3dDisplayGeometryLayer().getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: " +
                    mesh3DRenderData_.size() + " != " + (int)(getMesh3dDisplayGeometryLayer().getNumElements()) + "!");
        }
        mesh3DRenderData_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.write(zserioContext.getHeader(), out);

        mesh3dDisplayGeometryLayer_.write(zserioContext.getMesh3dDisplayGeometryLayer(), out);

        if (isNormalsUsed())
        {
            if (normals_.size() != (int)(getHeader().funcNumOfNormals()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.normals: " +
                        normals_.size() + " != " + (int)(getHeader().funcNumOfNormals()) + "!");
            }
            normals_.writePacked(out);
        }

        if (isTextureCoordinatesUsed())
        {
            if (textureCoordinates_.size() != (int)(getHeader().funcNumOfTextureCoords()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordinates: " +
                        textureCoordinates_.size() + " != " + (int)(getHeader().funcNumOfTextureCoords()) + "!");
            }
            textureCoordinates_.write(out);
        }

        if (isTextureCoordsAdditionalUsed())
        {
            if (textureCoordsAdditional_.size() != (int)(getHeader().funcNumOfTextureCoordsAdditional()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.textureCoordsAdditional: " +
                        textureCoordsAdditional_.size() + " != " + (int)(getHeader().funcNumOfTextureCoordsAdditional()) + "!");
            }
            textureCoordsAdditional_.write(out);
        }

        if (isColorIdsUsed())
        {
            if (colorIds_.size() != (int)(getHeader().funcNumOfColorIds()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.colorIds: " +
                        colorIds_.size() + " != " + (int)(getHeader().funcNumOfColorIds()) + "!");
            }
            colorIds_.writePacked(out);
        }

        if (isNormalIndicesUsed())
        {
            normalIndices_.write(zserioContext.getNormalIndices(), out);
        }

        if (isTextureCoordsIndicesUsed())
        {
            textureCoordsIndices_.write(zserioContext.getTextureCoordsIndices(), out);
        }

        if (isTextureCoordsAdditionalIndicesUsed())
        {
            textureCoordsAdditionalIndices_.write(zserioContext.getTextureCoordsAdditionalIndices(), out);
        }

        if (isColorIdIndicesUsed())
        {
            colorIdIndices_.write(zserioContext.getColorIdIndices(), out);
        }

        if (mesh3DRenderData_.size() != (int)(getMesh3dDisplayGeometryLayer().getNumElements()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Mesh3DRenderLayerData.mesh3DRenderData: " +
                    mesh3DRenderData_.size() + " != " + (int)(getMesh3dDisplayGeometryLayer().getNumElements()) + "!");
        }
        mesh3DRenderData_.writePacked(out);
    }

    private static final class ZserioElementFactory_normals implements zserio.runtime.array.PackableElementFactory<nds.display.types.NormalSphere>
    {
        @Override
        public nds.display.types.NormalSphere create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.NormalSphere(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.NormalSphere.ZserioPackingContext();
        }

        @Override
        public nds.display.types.NormalSphere create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.NormalSphere(context, in);
        }
    }

    private static final class ZserioElementFactory_textureCoordinates implements zserio.runtime.array.ElementFactory<nds.display.types.TextureCoords>
    {
        @Override
        public nds.display.types.TextureCoords create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureCoords(in);
        }
    }

    private static final class ZserioElementFactory_textureCoordsAdditional implements zserio.runtime.array.ElementFactory<nds.display.types.TextureCoords>
    {
        @Override
        public nds.display.types.TextureCoords create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.TextureCoords(in);
        }
    }

    private final class ZserioElementFactory_mesh3DRenderData implements zserio.runtime.array.PackableElementFactory<nds.display.types.Mesh3DRenderData>
    {
        @Override
        public nds.display.types.Mesh3DRenderData create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.Mesh3DRenderData(in, getMesh3dDisplayGeometryLayer().getBuffers().getMeshes3D().getPolymeshes()[index], getHeader());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.Mesh3DRenderData.ZserioPackingContext();
        }

        @Override
        public nds.display.types.Mesh3DRenderData create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.Mesh3DRenderData(context, in, getMesh3dDisplayGeometryLayer().getBuffers().getMeshes3D().getPolymeshes()[index], getHeader());
        }
    }

    private nds.display.types.Mesh3DRenderLayerHeader header_;
    private nds.display.instantiations.Mesh3dDisplayGeometryLayer mesh3dDisplayGeometryLayer_;
    private zserio.runtime.array.Array normals_;
    private zserio.runtime.array.Array textureCoordinates_;
    private zserio.runtime.array.Array textureCoordsAdditional_;
    private zserio.runtime.array.Array colorIds_;
    private nds.core.geometry.IndexBuffer normalIndices_;
    private nds.core.geometry.IndexBuffer textureCoordsIndices_;
    private nds.core.geometry.IndexBuffer textureCoordsAdditionalIndices_;
    private nds.core.geometry.IndexBuffer colorIdIndices_;
    private zserio.runtime.array.Array mesh3DRenderData_;
}
