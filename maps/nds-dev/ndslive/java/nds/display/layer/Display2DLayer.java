/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.layer;

public class Display2DLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            header_ = new nds.display.layer.Display2DLayerHeader.ZserioPackingContext();
            geometryLayers_ = new nds.display.layer.Display2DGeometryLayerList.ZserioPackingContext();
            clippingEdgeList_ = new nds.display.types.ClippingEdgeList.ZserioPackingContext();
        }

        public nds.display.layer.Display2DLayerHeader.ZserioPackingContext getHeader()
        {
            return header_;
        }

        public nds.display.layer.Display2DGeometryLayerList.ZserioPackingContext getGeometryLayers()
        {
            return geometryLayers_;
        }

        public nds.display.types.ClippingEdgeList.ZserioPackingContext getClippingEdgeList()
        {
            return clippingEdgeList_;
        }

        private nds.display.layer.Display2DLayerHeader.ZserioPackingContext header_;
        private nds.display.layer.Display2DGeometryLayerList.ZserioPackingContext geometryLayers_;
        private nds.display.types.ClippingEdgeList.ZserioPackingContext clippingEdgeList_;
    };

    public Display2DLayer()
    {
    }

    public Display2DLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Display2DLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Display2DLayer(
            nds.display.layer.Display2DLayerHeader header_,
            nds.display.layer.Display2DGeometryLayerList geometryLayers_,
            nds.display.layer.Display2DGeometryLayerList[] scaleSublevelLayers_,
            nds.display.types.ClippingEdgeList clippingEdgeList_)
    {
        setHeader(header_);
        setGeometryLayers(geometryLayers_);
        setScaleSublevelLayers(scaleSublevelLayers_);
        setClippingEdgeList(clippingEdgeList_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.initPackingContext(zserioContext.getHeader());
        if (isGeometryLayersUsed())
        {
            geometryLayers_.initPackingContext(zserioContext.getGeometryLayers());
        }
        if (isClippingEdgeListUsed())
        {
            clippingEdgeList_.initPackingContext(zserioContext.getClippingEdgeList());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(endBitPosition);
        if (isGeometryLayersUsed())
        {
            endBitPosition += geometryLayers_.bitSizeOf(endBitPosition);
        }
        if (isScaleSublevelLayersUsed())
        {
            endBitPosition += scaleSublevelLayers_.bitSizeOf(endBitPosition);
        }
        if (isClippingEdgeListUsed())
        {
            endBitPosition += clippingEdgeList_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(zserioContext.getHeader(), endBitPosition);
        if (isGeometryLayersUsed())
        {
            endBitPosition += geometryLayers_.bitSizeOf(zserioContext.getGeometryLayers(), endBitPosition);
        }
        if (isScaleSublevelLayersUsed())
        {
            endBitPosition += scaleSublevelLayers_.bitSizeOfPacked(endBitPosition);
        }
        if (isClippingEdgeListUsed())
        {
            endBitPosition += clippingEdgeList_.bitSizeOf(zserioContext.getClippingEdgeList(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.layer.Display2DLayerHeader getHeader()
    {
        return header_;
    }

    public void setHeader(nds.display.layer.Display2DLayerHeader header_)
    {
        this.header_ = header_;
    }

    public nds.display.layer.Display2DGeometryLayerList getGeometryLayers()
    {
        return geometryLayers_;
    }

    public void setGeometryLayers(nds.display.layer.Display2DGeometryLayerList geometryLayers_)
    {
        this.geometryLayers_ = geometryLayers_;
    }

    public boolean isGeometryLayersUsed()
    {
        return (!getHeader().getHasScaleSublevels());
    }

    public boolean isGeometryLayersSet()
    {
        return (geometryLayers_ != null);
    }

    public void resetGeometryLayers()
    {
        this.geometryLayers_ = null;
    }

    public nds.display.layer.Display2DGeometryLayerList[] getScaleSublevelLayers()
    {
        return (scaleSublevelLayers_ == null) ? null : scaleSublevelLayers_.getRawArray();
    }

    public void setScaleSublevelLayers(nds.display.layer.Display2DGeometryLayerList[] scaleSublevelLayers_)
    {
        if (scaleSublevelLayers_ == null)
        {
            this.scaleSublevelLayers_ = null;
        }
        else
        {
            this.scaleSublevelLayers_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.layer.Display2DGeometryLayerList.class, scaleSublevelLayers_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.layer.Display2DGeometryLayerList>(new ZserioElementFactory_scaleSublevelLayers()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isScaleSublevelLayersUsed()
    {
        return (getHeader().getHasScaleSublevels());
    }

    public boolean isScaleSublevelLayersSet()
    {
        return (scaleSublevelLayers_ != null);
    }

    public void resetScaleSublevelLayers()
    {
        this.scaleSublevelLayers_ = null;
    }

    public nds.display.types.ClippingEdgeList getClippingEdgeList()
    {
        return clippingEdgeList_;
    }

    public void setClippingEdgeList(nds.display.types.ClippingEdgeList clippingEdgeList_)
    {
        this.clippingEdgeList_ = clippingEdgeList_;
    }

    public boolean isClippingEdgeListUsed()
    {
        return (getHeader().getHasClippingEdgeList());
    }

    public boolean isClippingEdgeListSet()
    {
        return (clippingEdgeList_ != null);
    }

    public void resetClippingEdgeList()
    {
        this.clippingEdgeList_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.FEATURE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Display2DLayer)
        {
            final Display2DLayer that = (Display2DLayer)obj;

            return
                    ((header_ == null) ? that.header_ == null : header_.equals(that.header_)) &&
                    ((!isGeometryLayersUsed()) ? !that.isGeometryLayersUsed() :
                        ((geometryLayers_ == null) ? that.geometryLayers_ == null : geometryLayers_.equals(that.geometryLayers_))) &&
                    ((!isScaleSublevelLayersUsed()) ? !that.isScaleSublevelLayersUsed() :
                        ((scaleSublevelLayers_ == null) ? that.scaleSublevelLayers_ == null : scaleSublevelLayers_.equals(that.scaleSublevelLayers_))) &&
                    ((!isClippingEdgeListUsed()) ? !that.isClippingEdgeListUsed() :
                        ((clippingEdgeList_ == null) ? that.clippingEdgeList_ == null : clippingEdgeList_.equals(that.clippingEdgeList_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        if (isGeometryLayersUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, geometryLayers_);
        if (isScaleSublevelLayersUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, scaleSublevelLayers_);
        if (isClippingEdgeListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, clippingEdgeList_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        header_ = new nds.display.layer.Display2DLayerHeader(in);

        if (!getHeader().getHasScaleSublevels())
        {
            geometryLayers_ = new nds.display.layer.Display2DGeometryLayerList(in, getHeader().getContent());
        }

        if (getHeader().getHasScaleSublevels())
        {
            scaleSublevelLayers_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.layer.Display2DGeometryLayerList.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.layer.Display2DGeometryLayerList>(new ZserioElementFactory_scaleSublevelLayers()),
                    zserio.runtime.array.ArrayType.NORMAL);
            scaleSublevelLayers_.read(in, (int)(getHeader().getNumSublevels()));
        }

        if (getHeader().getHasClippingEdgeList())
        {
            clippingEdgeList_ = new nds.display.types.ClippingEdgeList(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_ = new nds.display.layer.Display2DLayerHeader(zserioContext.getHeader(), in);

        if (!getHeader().getHasScaleSublevels())
        {
            geometryLayers_ = new nds.display.layer.Display2DGeometryLayerList(zserioContext.getGeometryLayers(), in, getHeader().getContent());
        }

        if (getHeader().getHasScaleSublevels())
        {
            scaleSublevelLayers_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.layer.Display2DGeometryLayerList.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.layer.Display2DGeometryLayerList>(new ZserioElementFactory_scaleSublevelLayers()),
                    zserio.runtime.array.ArrayType.NORMAL);
            scaleSublevelLayers_.readPacked(in, (int)(getHeader().getNumSublevels()));
        }

        if (getHeader().getHasClippingEdgeList())
        {
            clippingEdgeList_ = new nds.display.types.ClippingEdgeList(zserioContext.getClippingEdgeList(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(endBitPosition);
        if (isGeometryLayersUsed())
        {
            endBitPosition = geometryLayers_.initializeOffsets(endBitPosition);
        }
        if (isScaleSublevelLayersUsed())
        {
            endBitPosition = scaleSublevelLayers_.initializeOffsets(endBitPosition);
        }
        if (isClippingEdgeListUsed())
        {
            endBitPosition = clippingEdgeList_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(zserioContext.getHeader(), endBitPosition);
        if (isGeometryLayersUsed())
        {
            endBitPosition = geometryLayers_.initializeOffsets(zserioContext.getGeometryLayers(), endBitPosition);
        }
        if (isScaleSublevelLayersUsed())
        {
            endBitPosition = scaleSublevelLayers_.initializeOffsetsPacked(endBitPosition);
        }
        if (isClippingEdgeListUsed())
        {
            endBitPosition = clippingEdgeList_.initializeOffsets(zserioContext.getClippingEdgeList(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        header_.write(out);

        if (isGeometryLayersUsed())
        {
            // check parameters
            if (geometryLayers_.getContent() != (getHeader().getContent()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter content for field Display2DLayer.geometryLayers!");
            }
            geometryLayers_.write(out);
        }

        if (isScaleSublevelLayersUsed())
        {
            if (scaleSublevelLayers_.size() != (int)(getHeader().getNumSublevels()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Display2DLayer.scaleSublevelLayers: " +
                        scaleSublevelLayers_.size() + " != " + (int)(getHeader().getNumSublevels()) + "!");
            }
            scaleSublevelLayers_.write(out);
        }

        if (isClippingEdgeListUsed())
        {
            clippingEdgeList_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.write(zserioContext.getHeader(), out);

        if (isGeometryLayersUsed())
        {
            geometryLayers_.write(zserioContext.getGeometryLayers(), out);
        }

        if (isScaleSublevelLayersUsed())
        {
            if (scaleSublevelLayers_.size() != (int)(getHeader().getNumSublevels()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Display2DLayer.scaleSublevelLayers: " +
                        scaleSublevelLayers_.size() + " != " + (int)(getHeader().getNumSublevels()) + "!");
            }
            scaleSublevelLayers_.writePacked(out);
        }

        if (isClippingEdgeListUsed())
        {
            clippingEdgeList_.write(zserioContext.getClippingEdgeList(), out);
        }
    }

    private final class ZserioElementFactory_scaleSublevelLayers implements zserio.runtime.array.PackableElementFactory<nds.display.layer.Display2DGeometryLayerList>
    {
        @Override
        public nds.display.layer.Display2DGeometryLayerList create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.layer.Display2DGeometryLayerList(in, getHeader().getContent());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.layer.Display2DGeometryLayerList.ZserioPackingContext();
        }

        @Override
        public nds.display.layer.Display2DGeometryLayerList create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.layer.Display2DGeometryLayerList(context, in, getHeader().getContent());
        }
    }

    private nds.display.layer.Display2DLayerHeader header_;
    private nds.display.layer.Display2DGeometryLayerList geometryLayers_;
    private zserio.runtime.array.Array scaleSublevelLayers_;
    private nds.display.types.ClippingEdgeList clippingEdgeList_;
}
