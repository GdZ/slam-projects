/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.display.layer;

public class BdamLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            header_ = new nds.display.types.BdamLayerHeader.ZserioPackingContext();
        }

        public nds.display.types.BdamLayerHeader.ZserioPackingContext getHeader()
        {
            return header_;
        }

        private nds.display.types.BdamLayerHeader.ZserioPackingContext header_;
    };

    public BdamLayer()
    {
    }

    public BdamLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public BdamLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public BdamLayer(
            nds.display.types.BdamLayerHeader header_,
            nds.display.types.BdamSurfaceGrid[] surfaceGrids_)
    {
        setHeader(header_);
        setSurfaceGrids(surfaceGrids_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.initPackingContext(zserioContext.getHeader());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(endBitPosition);
        endBitPosition += surfaceGrids_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(zserioContext.getHeader(), endBitPosition);
        endBitPosition += surfaceGrids_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.display.types.BdamLayerHeader getHeader()
    {
        return header_;
    }

    public void setHeader(nds.display.types.BdamLayerHeader header_)
    {
        this.header_ = header_;
    }

    public nds.display.types.BdamSurfaceGrid[] getSurfaceGrids()
    {
        return (surfaceGrids_ == null) ? null : surfaceGrids_.getRawArray();
    }

    public void setSurfaceGrids(nds.display.types.BdamSurfaceGrid[] surfaceGrids_)
    {
        this.surfaceGrids_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceGrid.class, surfaceGrids_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceGrid>(new ZserioElementFactory_surfaceGrids()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.FEATURE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BdamLayer)
        {
            final BdamLayer that = (BdamLayer)obj;

            return
                    ((header_ == null) ? that.header_ == null : header_.equals(that.header_)) &&
                    ((surfaceGrids_ == null) ? that.surfaceGrids_ == null : surfaceGrids_.equals(that.surfaceGrids_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, surfaceGrids_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        header_ = new nds.display.types.BdamLayerHeader(in);

        surfaceGrids_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceGrid.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceGrid>(new ZserioElementFactory_surfaceGrids()),
                zserio.runtime.array.ArrayType.AUTO);
        surfaceGrids_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_ = new nds.display.types.BdamLayerHeader(zserioContext.getHeader(), in);

        surfaceGrids_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.display.types.BdamSurfaceGrid.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.display.types.BdamSurfaceGrid>(new ZserioElementFactory_surfaceGrids()),
                zserio.runtime.array.ArrayType.AUTO);
        surfaceGrids_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(endBitPosition);
        endBitPosition = surfaceGrids_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(zserioContext.getHeader(), endBitPosition);
        endBitPosition = surfaceGrids_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        header_.write(out);

        surfaceGrids_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.write(zserioContext.getHeader(), out);

        surfaceGrids_.writePacked(out);
    }

    private final class ZserioElementFactory_surfaceGrids implements zserio.runtime.array.PackableElementFactory<nds.display.types.BdamSurfaceGrid>
    {
        @Override
        public nds.display.types.BdamSurfaceGrid create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.display.types.BdamSurfaceGrid(in, getHeader());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.display.types.BdamSurfaceGrid.ZserioPackingContext();
        }

        @Override
        public nds.display.types.BdamSurfaceGrid create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.display.types.BdamSurfaceGrid(context, in, getHeader());
        }
    }

    private nds.display.types.BdamLayerHeader header_;
    private zserio.runtime.array.Array surfaceGrids_;
}
