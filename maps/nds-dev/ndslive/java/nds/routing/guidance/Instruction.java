/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.guidance;

public class Instruction implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            targetIndex_ = new zserio.runtime.array.DeltaContext();
            activationDistance_ = new zserio.runtime.array.DeltaContext();
            guidanceCode_ = new zserio.runtime.array.DeltaContext();
            roundaboutExitNumber_ = new zserio.runtime.array.DeltaContext();
            targetName_ = new nds.routing.guidance.GuidanceName.ZserioPackingContext();
            towardsName_ = new nds.routing.guidance.GuidanceName.ZserioPackingContext();
            lanes_ = new nds.routing.guidance.GuidanceLanes.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getTargetIndex()
        {
            return targetIndex_;
        }

        public zserio.runtime.array.DeltaContext getActivationDistance()
        {
            return activationDistance_;
        }

        public zserio.runtime.array.DeltaContext getGuidanceCode()
        {
            return guidanceCode_;
        }

        public zserio.runtime.array.DeltaContext getRoundaboutExitNumber()
        {
            return roundaboutExitNumber_;
        }

        public nds.routing.guidance.GuidanceName.ZserioPackingContext getTargetName()
        {
            return targetName_;
        }

        public nds.routing.guidance.GuidanceName.ZserioPackingContext getTowardsName()
        {
            return towardsName_;
        }

        public nds.routing.guidance.GuidanceLanes.ZserioPackingContext getLanes()
        {
            return lanes_;
        }

        private zserio.runtime.array.DeltaContext targetIndex_;
        private zserio.runtime.array.DeltaContext activationDistance_;
        private zserio.runtime.array.DeltaContext guidanceCode_;
        private zserio.runtime.array.DeltaContext roundaboutExitNumber_;
        private nds.routing.guidance.GuidanceName.ZserioPackingContext targetName_;
        private nds.routing.guidance.GuidanceName.ZserioPackingContext towardsName_;
        private nds.routing.guidance.GuidanceLanes.ZserioPackingContext lanes_;
    };

    public Instruction()
    {
    }

    public Instruction(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Instruction(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Instruction(
            java.math.BigInteger targetIndex_,
            java.math.BigInteger activationDistance_,
            nds.routing.types.GuidanceCode guidanceCode_,
            java.lang.String extGuidanceCode_,
            java.lang.Short roundaboutExitNumber_,
            nds.routing.guidance.GuidanceName targetName_,
            nds.routing.guidance.GuidanceName towardsName_,
            nds.routing.guidance.GuidanceLanes lanes_)
    {
        setTargetIndex(targetIndex_);
        setActivationDistance(activationDistance_);
        setGuidanceCode(guidanceCode_);
        setExtGuidanceCode(extGuidanceCode_);
        setRoundaboutExitNumber(roundaboutExitNumber_);
        setTargetName(targetName_);
        setTowardsName(towardsName_);
        setLanes(lanes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTargetIndex().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(targetIndex_));
        zserioContext.getActivationDistance().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(activationDistance_));
        guidanceCode_.initPackingContext(zserioContext.getGuidanceCode());
        if (isRoundaboutExitNumberUsed())
        {
            zserioContext.getRoundaboutExitNumber().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(roundaboutExitNumber_));
        }
        if (isTargetNameUsed())
        {
            targetName_.initPackingContext(zserioContext.getTargetName());
        }
        if (isTowardsNameUsed())
        {
            towardsName_.initPackingContext(zserioContext.getTowardsName());
        }
        if (isLanesUsed())
        {
            lanes_.initPackingContext(zserioContext.getLanes());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(targetIndex_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(activationDistance_);
        endBitPosition += guidanceCode_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isExtGuidanceCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(extGuidanceCode_);
        }
        if (isRoundaboutExitNumberUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isTargetNameUsed())
        {
            endBitPosition += targetName_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isTowardsNameUsed())
        {
            endBitPosition += towardsName_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isLanesUsed())
        {
            endBitPosition += lanes_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTargetIndex().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(targetIndex_));
        endBitPosition += zserioContext.getActivationDistance().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(activationDistance_));
        endBitPosition += guidanceCode_.bitSizeOf(zserioContext.getGuidanceCode(), endBitPosition);
        endBitPosition += 1;
        if (isExtGuidanceCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(extGuidanceCode_);
        }
        if (isRoundaboutExitNumberUsed())
        {
            endBitPosition += zserioContext.getRoundaboutExitNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(roundaboutExitNumber_));
        }
        endBitPosition += 1;
        if (isTargetNameUsed())
        {
            endBitPosition += targetName_.bitSizeOf(zserioContext.getTargetName(), endBitPosition);
        }
        endBitPosition += 1;
        if (isTowardsNameUsed())
        {
            endBitPosition += towardsName_.bitSizeOf(zserioContext.getTowardsName(), endBitPosition);
        }
        endBitPosition += 1;
        if (isLanesUsed())
        {
            endBitPosition += lanes_.bitSizeOf(zserioContext.getLanes(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getTargetIndex()
    {
        return targetIndex_;
    }

    public void setTargetIndex(java.math.BigInteger targetIndex_)
    {
        this.targetIndex_ = targetIndex_;
    }

    public java.math.BigInteger getActivationDistance()
    {
        return activationDistance_;
    }

    public void setActivationDistance(java.math.BigInteger activationDistance_)
    {
        this.activationDistance_ = activationDistance_;
    }

    public nds.routing.types.GuidanceCode getGuidanceCode()
    {
        return guidanceCode_;
    }

    public void setGuidanceCode(nds.routing.types.GuidanceCode guidanceCode_)
    {
        this.guidanceCode_ = guidanceCode_;
    }

    public java.lang.String getExtGuidanceCode()
    {
        return extGuidanceCode_;
    }

    public void setExtGuidanceCode(java.lang.String extGuidanceCode_)
    {
        this.extGuidanceCode_ = extGuidanceCode_;
    }

    public boolean isExtGuidanceCodeUsed()
    {
        return isExtGuidanceCodeSet();
    }

    public boolean isExtGuidanceCodeSet()
    {
        return (extGuidanceCode_ != null);
    }

    public void resetExtGuidanceCode()
    {
        this.extGuidanceCode_ = null;
    }

    public java.lang.Short getRoundaboutExitNumber()
    {
        return roundaboutExitNumber_;
    }

    public void setRoundaboutExitNumber(java.lang.Short roundaboutExitNumber_)
    {
        this.roundaboutExitNumber_ = roundaboutExitNumber_;
    }

    public boolean isRoundaboutExitNumberUsed()
    {
        return (getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT || getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT_REVERSED);
    }

    public boolean isRoundaboutExitNumberSet()
    {
        return (roundaboutExitNumber_ != null);
    }

    public void resetRoundaboutExitNumber()
    {
        this.roundaboutExitNumber_ = null;
    }

    public nds.routing.guidance.GuidanceName getTargetName()
    {
        return targetName_;
    }

    public void setTargetName(nds.routing.guidance.GuidanceName targetName_)
    {
        this.targetName_ = targetName_;
    }

    public boolean isTargetNameUsed()
    {
        return isTargetNameSet();
    }

    public boolean isTargetNameSet()
    {
        return (targetName_ != null);
    }

    public void resetTargetName()
    {
        this.targetName_ = null;
    }

    public nds.routing.guidance.GuidanceName getTowardsName()
    {
        return towardsName_;
    }

    public void setTowardsName(nds.routing.guidance.GuidanceName towardsName_)
    {
        this.towardsName_ = towardsName_;
    }

    public boolean isTowardsNameUsed()
    {
        return isTowardsNameSet();
    }

    public boolean isTowardsNameSet()
    {
        return (towardsName_ != null);
    }

    public void resetTowardsName()
    {
        this.towardsName_ = null;
    }

    public nds.routing.guidance.GuidanceLanes getLanes()
    {
        return lanes_;
    }

    public void setLanes(nds.routing.guidance.GuidanceLanes lanes_)
    {
        this.lanes_ = lanes_;
    }

    public boolean isLanesUsed()
    {
        return isLanesSet();
    }

    public boolean isLanesSet()
    {
        return (lanes_ != null);
    }

    public void resetLanes()
    {
        this.lanes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Instruction)
        {
            final Instruction that = (Instruction)obj;

            return
                    ((targetIndex_ == null) ? that.targetIndex_ == null : targetIndex_.equals(that.targetIndex_)) &&
                    ((activationDistance_ == null) ? that.activationDistance_ == null : activationDistance_.equals(that.activationDistance_)) &&
                    ((guidanceCode_ == null) ? that.guidanceCode_ == null : guidanceCode_.getValue() == that.guidanceCode_.getValue()) &&
                    ((!isExtGuidanceCodeUsed()) ? !that.isExtGuidanceCodeUsed() :
                        ((extGuidanceCode_ == null) ? that.extGuidanceCode_ == null : extGuidanceCode_.equals(that.extGuidanceCode_))) &&
                    ((!isRoundaboutExitNumberUsed()) ? !that.isRoundaboutExitNumberUsed() :
                        ((roundaboutExitNumber_ == null) ? that.roundaboutExitNumber_ == null : roundaboutExitNumber_.equals(that.roundaboutExitNumber_))) &&
                    ((!isTargetNameUsed()) ? !that.isTargetNameUsed() :
                        ((targetName_ == null) ? that.targetName_ == null : targetName_.equals(that.targetName_))) &&
                    ((!isTowardsNameUsed()) ? !that.isTowardsNameUsed() :
                        ((towardsName_ == null) ? that.towardsName_ == null : towardsName_.equals(that.towardsName_))) &&
                    ((!isLanesUsed()) ? !that.isLanesUsed() :
                        ((lanes_ == null) ? that.lanes_ == null : lanes_.equals(that.lanes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, targetIndex_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, activationDistance_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, guidanceCode_);
        if (isExtGuidanceCodeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, extGuidanceCode_);
        if (isRoundaboutExitNumberUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roundaboutExitNumber_);
        if (isTargetNameUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, targetName_);
        if (isTowardsNameUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, towardsName_);
        if (isLanesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        targetIndex_ = in.readVarUInt();

        activationDistance_ = in.readVarUInt();

        guidanceCode_ = nds.routing.types.GuidanceCode.readEnum(in);

        if (in.readBool())
        {
            extGuidanceCode_ = in.readString();
        }

        if (getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT || getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT_REVERSED)
        {
            roundaboutExitNumber_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            targetName_ = new nds.routing.guidance.GuidanceName(in);
        }

        if (in.readBool())
        {
            towardsName_ = new nds.routing.guidance.GuidanceName(in);
        }

        if (in.readBool())
        {
            lanes_ = new nds.routing.guidance.GuidanceLanes(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        targetIndex_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getTargetIndex().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        activationDistance_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getActivationDistance().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        guidanceCode_ = nds.routing.types.GuidanceCode.readEnum(zserioContext.getGuidanceCode(), in);

        if (in.readBool())
        {
            extGuidanceCode_ = in.readString();
        }

        if (getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT || getGuidanceCode() == nds.routing.types.GuidanceCode.ROUNDABOUT_REVERSED)
        {
            roundaboutExitNumber_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getRoundaboutExitNumber().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            targetName_ = new nds.routing.guidance.GuidanceName(zserioContext.getTargetName(), in);
        }

        if (in.readBool())
        {
            towardsName_ = new nds.routing.guidance.GuidanceName(zserioContext.getTowardsName(), in);
        }

        if (in.readBool())
        {
            lanes_ = new nds.routing.guidance.GuidanceLanes(zserioContext.getLanes(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(targetIndex_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(activationDistance_);
        endBitPosition += guidanceCode_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isExtGuidanceCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(extGuidanceCode_);
        }
        if (isRoundaboutExitNumberUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isTargetNameUsed())
        {
            endBitPosition = targetName_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isTowardsNameUsed())
        {
            endBitPosition = towardsName_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isLanesUsed())
        {
            endBitPosition = lanes_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getTargetIndex().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(targetIndex_));
        endBitPosition += zserioContext.getActivationDistance().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(activationDistance_));
        endBitPosition = guidanceCode_.initializeOffsets(zserioContext.getGuidanceCode(), endBitPosition);
        endBitPosition += 1;
        if (isExtGuidanceCodeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(extGuidanceCode_);
        }
        if (isRoundaboutExitNumberUsed())
        {
            endBitPosition += zserioContext.getRoundaboutExitNumber().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(roundaboutExitNumber_));
        }
        endBitPosition += 1;
        if (isTargetNameUsed())
        {
            endBitPosition = targetName_.initializeOffsets(zserioContext.getTargetName(), endBitPosition);
        }
        endBitPosition += 1;
        if (isTowardsNameUsed())
        {
            endBitPosition = towardsName_.initializeOffsets(zserioContext.getTowardsName(), endBitPosition);
        }
        endBitPosition += 1;
        if (isLanesUsed())
        {
            endBitPosition = lanes_.initializeOffsets(zserioContext.getLanes(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(targetIndex_);

        out.writeVarUInt(activationDistance_);

        guidanceCode_.write(out);

        if (isExtGuidanceCodeUsed())
        {
            out.writeBool(true);
            out.writeString(extGuidanceCode_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoundaboutExitNumberUsed())
        {
            out.writeUnsignedByte(roundaboutExitNumber_);
        }

        if (isTargetNameUsed())
        {
            out.writeBool(true);
            targetName_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTowardsNameUsed())
        {
            out.writeBool(true);
            towardsName_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isLanesUsed())
        {
            out.writeBool(true);
            lanes_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getTargetIndex().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(targetIndex_));

        zserioContext.getActivationDistance().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(activationDistance_));

        guidanceCode_.write(zserioContext.getGuidanceCode(), out);

        if (isExtGuidanceCodeUsed())
        {
            out.writeBool(true);
            out.writeString(extGuidanceCode_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRoundaboutExitNumberUsed())
        {
            zserioContext.getRoundaboutExitNumber().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(roundaboutExitNumber_));
        }

        if (isTargetNameUsed())
        {
            out.writeBool(true);
            targetName_.write(zserioContext.getTargetName(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTowardsNameUsed())
        {
            out.writeBool(true);
            towardsName_.write(zserioContext.getTowardsName(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isLanesUsed())
        {
            out.writeBool(true);
            lanes_.write(zserioContext.getLanes(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.math.BigInteger targetIndex_;
    private java.math.BigInteger activationDistance_;
    private nds.routing.types.GuidanceCode guidanceCode_;
    private java.lang.String extGuidanceCode_;
    private java.lang.Short roundaboutExitNumber_;
    private nds.routing.guidance.GuidanceName targetName_;
    private nds.routing.guidance.GuidanceName towardsName_;
    private nds.routing.guidance.GuidanceLanes lanes_;
}
