/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.guidance;

public enum GuidanceNameClass implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    CITY_BLOCK((short)0),
    COUNTY((short)1),
    COUNTRY((short)2),
    COUNTRY_SET((short)3),
    HAMLET((short)4),
    HOUSE((short)5),
    INTERSECTION((short)6),
    LICENSE_PLATE_ZONE((short)7),
    MUNICIPALITY((short)8),
    MUNICIPALITY_SUBDIVISION((short)9),
    NAMED_AREA((short)10),
    NAMED_BRIDGE((short)11),
    NAMED_TUNNEL((short)12),
    NEIGHBORHOOD((short)13),
    POSTAL_CODE_DISTRICT((short)14),
    PREFERRED_POSTAL_PLACE((short)15),
    POI((short)16),
    ROAD((short)17),
    ROAD_NUMBER((short)18),
    ROUTE((short)19),
    SIGNPOST((short)20),
    SUB_COUNTRY((short)21),
    SUB_COUNTRY_SET((short)22),
    TOLL_GATE((short)23),
    TOURIST_ROUTE((short)24),
    TRAFFIC_ZONE((short)25),
    ZONE((short)26);

    private GuidanceNameClass(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static GuidanceNameClass readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static GuidanceNameClass readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static GuidanceNameClass toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return CITY_BLOCK;
            case (short)1:
                return COUNTY;
            case (short)2:
                return COUNTRY;
            case (short)3:
                return COUNTRY_SET;
            case (short)4:
                return HAMLET;
            case (short)5:
                return HOUSE;
            case (short)6:
                return INTERSECTION;
            case (short)7:
                return LICENSE_PLATE_ZONE;
            case (short)8:
                return MUNICIPALITY;
            case (short)9:
                return MUNICIPALITY_SUBDIVISION;
            case (short)10:
                return NAMED_AREA;
            case (short)11:
                return NAMED_BRIDGE;
            case (short)12:
                return NAMED_TUNNEL;
            case (short)13:
                return NEIGHBORHOOD;
            case (short)14:
                return POSTAL_CODE_DISTRICT;
            case (short)15:
                return PREFERRED_POSTAL_PLACE;
            case (short)16:
                return POI;
            case (short)17:
                return ROAD;
            case (short)18:
                return ROAD_NUMBER;
            case (short)19:
                return ROUTE;
            case (short)20:
                return SIGNPOST;
            case (short)21:
                return SUB_COUNTRY;
            case (short)22:
                return SUB_COUNTRY_SET;
            case (short)23:
                return TOLL_GATE;
            case (short)24:
                return TOURIST_ROUTE;
            case (short)25:
                return TRAFFIC_ZONE;
            case (short)26:
                return ZONE;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration GuidanceNameClass: " + value + "!");
        }
    }

    public static GuidanceNameClass toEnum(java.lang.String itemName)
    {
        if (itemName.equals("CITY_BLOCK"))
            return CITY_BLOCK;
        if (itemName.equals("COUNTY"))
            return COUNTY;
        if (itemName.equals("COUNTRY"))
            return COUNTRY;
        if (itemName.equals("COUNTRY_SET"))
            return COUNTRY_SET;
        if (itemName.equals("HAMLET"))
            return HAMLET;
        if (itemName.equals("HOUSE"))
            return HOUSE;
        if (itemName.equals("INTERSECTION"))
            return INTERSECTION;
        if (itemName.equals("LICENSE_PLATE_ZONE"))
            return LICENSE_PLATE_ZONE;
        if (itemName.equals("MUNICIPALITY"))
            return MUNICIPALITY;
        if (itemName.equals("MUNICIPALITY_SUBDIVISION"))
            return MUNICIPALITY_SUBDIVISION;
        if (itemName.equals("NAMED_AREA"))
            return NAMED_AREA;
        if (itemName.equals("NAMED_BRIDGE"))
            return NAMED_BRIDGE;
        if (itemName.equals("NAMED_TUNNEL"))
            return NAMED_TUNNEL;
        if (itemName.equals("NEIGHBORHOOD"))
            return NEIGHBORHOOD;
        if (itemName.equals("POSTAL_CODE_DISTRICT"))
            return POSTAL_CODE_DISTRICT;
        if (itemName.equals("PREFERRED_POSTAL_PLACE"))
            return PREFERRED_POSTAL_PLACE;
        if (itemName.equals("POI"))
            return POI;
        if (itemName.equals("ROAD"))
            return ROAD;
        if (itemName.equals("ROAD_NUMBER"))
            return ROAD_NUMBER;
        if (itemName.equals("ROUTE"))
            return ROUTE;
        if (itemName.equals("SIGNPOST"))
            return SIGNPOST;
        if (itemName.equals("SUB_COUNTRY"))
            return SUB_COUNTRY;
        if (itemName.equals("SUB_COUNTRY_SET"))
            return SUB_COUNTRY_SET;
        if (itemName.equals("TOLL_GATE"))
            return TOLL_GATE;
        if (itemName.equals("TOURIST_ROUTE"))
            return TOURIST_ROUTE;
        if (itemName.equals("TRAFFIC_ZONE"))
            return TRAFFIC_ZONE;
        if (itemName.equals("ZONE"))
            return ZONE;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration GuidanceNameClass!");
    }

    private short value;
}
