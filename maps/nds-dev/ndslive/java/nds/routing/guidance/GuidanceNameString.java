/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.guidance;

public class GuidanceNameString implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            language_ = new zserio.runtime.array.DeltaContext();
            relations_ = new nds.routing.guidance.GuidanceNameStringRelationList.ZserioPackingContext();
            phoneticTranscriptions_ = new nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLanguage()
        {
            return language_;
        }

        public nds.routing.guidance.GuidanceNameStringRelationList.ZserioPackingContext getRelations()
        {
            return relations_;
        }

        public nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext getPhoneticTranscriptions()
        {
            return phoneticTranscriptions_;
        }

        private zserio.runtime.array.DeltaContext language_;
        private nds.routing.guidance.GuidanceNameStringRelationList.ZserioPackingContext relations_;
        private nds.core.speech.PhoneticTranscriptionList.ZserioPackingContext phoneticTranscriptions_;
    };

    public GuidanceNameString(
            short numNames_)
    {
        this.numNames_ = numNames_;
    }

    public GuidanceNameString(zserio.runtime.io.BitStreamReader in,
            short numNames_)
            throws java.io.IOException
    {
        this.numNames_ = numNames_;

        read(in);
    }

    public GuidanceNameString(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            short numNames_)
            throws java.io.IOException
    {
        this.numNames_ = numNames_;

        read(context, in);
    }

    public GuidanceNameString(
            short numNames_,
            short language_,
            java.lang.String name_,
            nds.routing.guidance.GuidanceNameStringRelationList relations_,
            nds.core.speech.PhoneticTranscriptionList phoneticTranscriptions_)
    {
        this(numNames_);

        setLanguage(language_);
        setName(name_);
        setRelations(relations_);
        setPhoneticTranscriptions(phoneticTranscriptions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguage().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        if (isRelationsUsed())
        {
            relations_.initPackingContext(zserioContext.getRelations());
        }
        if (isPhoneticTranscriptionsUsed())
        {
            phoneticTranscriptions_.initPackingContext(zserioContext.getPhoneticTranscriptions());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(language_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isRelationsUsed())
        {
            endBitPosition += relations_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isPhoneticTranscriptionsUsed())
        {
            endBitPosition += phoneticTranscriptions_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isRelationsUsed())
        {
            endBitPosition += relations_.bitSizeOf(zserioContext.getRelations(), endBitPosition);
        }
        endBitPosition += 1;
        if (isPhoneticTranscriptionsUsed())
        {
            endBitPosition += phoneticTranscriptions_.bitSizeOf(zserioContext.getPhoneticTranscriptions(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumNames()
    {
        return this.numNames_;
    }

    public short getLanguage()
    {
        return language_;
    }

    public void setLanguage(short language_)
    {
        this.language_ = language_;
    }

    public java.lang.String getName()
    {
        return name_;
    }

    public void setName(java.lang.String name_)
    {
        this.name_ = name_;
    }

    public nds.routing.guidance.GuidanceNameStringRelationList getRelations()
    {
        return relations_;
    }

    public void setRelations(nds.routing.guidance.GuidanceNameStringRelationList relations_)
    {
        this.relations_ = relations_;
    }

    public boolean isRelationsUsed()
    {
        return isRelationsSet();
    }

    public boolean isRelationsSet()
    {
        return (relations_ != null);
    }

    public void resetRelations()
    {
        this.relations_ = null;
    }

    public nds.core.speech.PhoneticTranscriptionList getPhoneticTranscriptions()
    {
        return phoneticTranscriptions_;
    }

    public void setPhoneticTranscriptions(nds.core.speech.PhoneticTranscriptionList phoneticTranscriptions_)
    {
        this.phoneticTranscriptions_ = phoneticTranscriptions_;
    }

    public boolean isPhoneticTranscriptionsUsed()
    {
        return isPhoneticTranscriptionsSet();
    }

    public boolean isPhoneticTranscriptionsSet()
    {
        return (phoneticTranscriptions_ != null);
    }

    public void resetPhoneticTranscriptions()
    {
        this.phoneticTranscriptions_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GuidanceNameString)
        {
            final GuidanceNameString that = (GuidanceNameString)obj;

            return
                    this.numNames_ == that.numNames_ &&
                    language_ == that.language_ &&
                    ((name_ == null) ? that.name_ == null : name_.equals(that.name_)) &&
                    ((!isRelationsUsed()) ? !that.isRelationsUsed() :
                        ((relations_ == null) ? that.relations_ == null : relations_.equals(that.relations_))) &&
                    ((!isPhoneticTranscriptionsUsed()) ? !that.isPhoneticTranscriptionsUsed() :
                        ((phoneticTranscriptions_ == null) ? that.phoneticTranscriptions_ == null : phoneticTranscriptions_.equals(that.phoneticTranscriptions_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getNumNames());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, language_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, name_);
        if (isRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, relations_);
        if (isPhoneticTranscriptionsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, phoneticTranscriptions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        language_ = in.readVarUInt16();

        name_ = in.readString();

        if (in.readBool())
        {
            relations_ = new nds.routing.guidance.GuidanceNameStringRelationList(in, (short)(getNumNames()));
        }

        if (in.readBool())
        {
            phoneticTranscriptions_ = new nds.core.speech.PhoneticTranscriptionList(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        language_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getLanguage().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        name_ = in.readString();

        if (in.readBool())
        {
            relations_ = new nds.routing.guidance.GuidanceNameStringRelationList(zserioContext.getRelations(), in, (short)(getNumNames()));
        }

        if (in.readBool())
        {
            phoneticTranscriptions_ = new nds.core.speech.PhoneticTranscriptionList(zserioContext.getPhoneticTranscriptions(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(language_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isRelationsUsed())
        {
            endBitPosition = relations_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isPhoneticTranscriptionsUsed())
        {
            endBitPosition = phoneticTranscriptions_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLanguage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(name_);
        endBitPosition += 1;
        if (isRelationsUsed())
        {
            endBitPosition = relations_.initializeOffsets(zserioContext.getRelations(), endBitPosition);
        }
        endBitPosition += 1;
        if (isPhoneticTranscriptionsUsed())
        {
            endBitPosition = phoneticTranscriptions_.initializeOffsets(zserioContext.getPhoneticTranscriptions(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(language_);

        out.writeString(name_);

        if (isRelationsUsed())
        {
            out.writeBool(true);
            // check parameters
            if (relations_.getNumNames() != (short)(getNumNames()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter numNames for field GuidanceNameString.relations: " +
                        relations_.getNumNames() + " != " + (short)(getNumNames()) + "!");
            }
            relations_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isPhoneticTranscriptionsUsed())
        {
            out.writeBool(true);
            phoneticTranscriptions_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguage().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));

        out.writeString(name_);

        if (isRelationsUsed())
        {
            out.writeBool(true);
            relations_.write(zserioContext.getRelations(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isPhoneticTranscriptionsUsed())
        {
            out.writeBool(true);
            phoneticTranscriptions_.write(zserioContext.getPhoneticTranscriptions(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private final short numNames_;
    private short language_;
    private java.lang.String name_;
    private nds.routing.guidance.GuidanceNameStringRelationList relations_;
    private nds.core.speech.PhoneticTranscriptionList phoneticTranscriptions_;
}
