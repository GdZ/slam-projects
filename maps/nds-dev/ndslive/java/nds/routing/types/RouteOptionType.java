/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.types;

public enum RouteOptionType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    SCENIC((short)0),
    MOTORWAY((short)1),
    AUTONOMOUS_DRIVING((short)2),
    DIFFICULT_TURNS((short)3),
    TUNNEL((short)4),
    FERRY((short)5),
    VIGNETTE((short)6),
    TOLL((short)7),
    HOV((short)8),
    UNPAVED((short)9),
    LOCAL_ROADS((short)10),
    CHALLENGING((short)11);

    private RouteOptionType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RouteOptionType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static RouteOptionType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static RouteOptionType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return SCENIC;
            case (short)1:
                return MOTORWAY;
            case (short)2:
                return AUTONOMOUS_DRIVING;
            case (short)3:
                return DIFFICULT_TURNS;
            case (short)4:
                return TUNNEL;
            case (short)5:
                return FERRY;
            case (short)6:
                return VIGNETTE;
            case (short)7:
                return TOLL;
            case (short)8:
                return HOV;
            case (short)9:
                return UNPAVED;
            case (short)10:
                return LOCAL_ROADS;
            case (short)11:
                return CHALLENGING;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RouteOptionType: " + value + "!");
        }
    }

    public static RouteOptionType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("SCENIC"))
            return SCENIC;
        if (itemName.equals("MOTORWAY"))
            return MOTORWAY;
        if (itemName.equals("AUTONOMOUS_DRIVING"))
            return AUTONOMOUS_DRIVING;
        if (itemName.equals("DIFFICULT_TURNS"))
            return DIFFICULT_TURNS;
        if (itemName.equals("TUNNEL"))
            return TUNNEL;
        if (itemName.equals("FERRY"))
            return FERRY;
        if (itemName.equals("VIGNETTE"))
            return VIGNETTE;
        if (itemName.equals("TOLL"))
            return TOLL;
        if (itemName.equals("HOV"))
            return HOV;
        if (itemName.equals("UNPAVED"))
            return UNPAVED;
        if (itemName.equals("LOCAL_ROADS"))
            return LOCAL_ROADS;
        if (itemName.equals("CHALLENGING"))
            return CHALLENGING;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RouteOptionType!");
    }

    private short value;
}
