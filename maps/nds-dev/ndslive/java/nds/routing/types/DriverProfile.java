/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.types;

public class DriverProfile implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            aggressiveness_ = new zserio.runtime.array.DeltaContext();
            homeAddress_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            workAddress_ = new nds.core.geometry.Position2D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getAggressiveness()
        {
            return aggressiveness_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getHomeAddress()
        {
            return homeAddress_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getWorkAddress()
        {
            return workAddress_;
        }

        private zserio.runtime.array.DeltaContext aggressiveness_;
        private nds.core.geometry.Position2D.ZserioPackingContext homeAddress_;
        private nds.core.geometry.Position2D.ZserioPackingContext workAddress_;
    };

    public DriverProfile()
    {
    }

    public DriverProfile(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public DriverProfile(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public DriverProfile(
            java.lang.Short aggressiveness_,
            java.lang.Boolean isDisabledPerson_,
            nds.core.geometry.Position2D homeAddress_,
            nds.core.geometry.Position2D workAddress_)
    {
        setAggressiveness(aggressiveness_);
        setIsDisabledPerson(isDisabledPerson_);
        setHomeAddress(homeAddress_);
        setWorkAddress(workAddress_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isAggressivenessUsed())
        {
            zserioContext.getAggressiveness().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(aggressiveness_));
        }
        if (isHomeAddressUsed())
        {
            homeAddress_.initPackingContext(zserioContext.getHomeAddress());
        }
        if (isWorkAddressUsed())
        {
            workAddress_.initPackingContext(zserioContext.getWorkAddress());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isAggressivenessUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isIsDisabledPersonUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isHomeAddressUsed())
        {
            endBitPosition += homeAddress_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isWorkAddressUsed())
        {
            endBitPosition += workAddress_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isAggressivenessUsed())
        {
            endBitPosition += zserioContext.getAggressiveness().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(aggressiveness_));
        }
        endBitPosition += 1;
        if (isIsDisabledPersonUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isHomeAddressUsed())
        {
            endBitPosition += homeAddress_.bitSizeOf(zserioContext.getHomeAddress(), endBitPosition);
        }
        endBitPosition += 1;
        if (isWorkAddressUsed())
        {
            endBitPosition += workAddress_.bitSizeOf(zserioContext.getWorkAddress(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.Short getAggressiveness()
    {
        return aggressiveness_;
    }

    public void setAggressiveness(java.lang.Short aggressiveness_)
    {
        this.aggressiveness_ = aggressiveness_;
    }

    public boolean isAggressivenessUsed()
    {
        return isAggressivenessSet();
    }

    public boolean isAggressivenessSet()
    {
        return (aggressiveness_ != null);
    }

    public void resetAggressiveness()
    {
        this.aggressiveness_ = null;
    }

    public java.lang.Boolean getIsDisabledPerson()
    {
        return isDisabledPerson_;
    }

    public void setIsDisabledPerson(java.lang.Boolean isDisabledPerson_)
    {
        this.isDisabledPerson_ = isDisabledPerson_;
    }

    public boolean isIsDisabledPersonUsed()
    {
        return isIsDisabledPersonSet();
    }

    public boolean isIsDisabledPersonSet()
    {
        return (isDisabledPerson_ != null);
    }

    public void resetIsDisabledPerson()
    {
        this.isDisabledPerson_ = null;
    }

    public nds.core.geometry.Position2D getHomeAddress()
    {
        return homeAddress_;
    }

    public void setHomeAddress(nds.core.geometry.Position2D homeAddress_)
    {
        this.homeAddress_ = homeAddress_;
    }

    public boolean isHomeAddressUsed()
    {
        return isHomeAddressSet();
    }

    public boolean isHomeAddressSet()
    {
        return (homeAddress_ != null);
    }

    public void resetHomeAddress()
    {
        this.homeAddress_ = null;
    }

    public nds.core.geometry.Position2D getWorkAddress()
    {
        return workAddress_;
    }

    public void setWorkAddress(nds.core.geometry.Position2D workAddress_)
    {
        this.workAddress_ = workAddress_;
    }

    public boolean isWorkAddressUsed()
    {
        return isWorkAddressSet();
    }

    public boolean isWorkAddressSet()
    {
        return (workAddress_ != null);
    }

    public void resetWorkAddress()
    {
        this.workAddress_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof DriverProfile)
        {
            final DriverProfile that = (DriverProfile)obj;

            return
                    ((!isAggressivenessUsed()) ? !that.isAggressivenessUsed() :
                        ((aggressiveness_ == null) ? that.aggressiveness_ == null : aggressiveness_.equals(that.aggressiveness_))) &&
                    ((!isIsDisabledPersonUsed()) ? !that.isIsDisabledPersonUsed() :
                        ((isDisabledPerson_ == null) ? that.isDisabledPerson_ == null : isDisabledPerson_.equals(that.isDisabledPerson_))) &&
                    ((!isHomeAddressUsed()) ? !that.isHomeAddressUsed() :
                        ((homeAddress_ == null) ? that.homeAddress_ == null : homeAddress_.equals(that.homeAddress_))) &&
                    ((!isWorkAddressUsed()) ? !that.isWorkAddressUsed() :
                        ((workAddress_ == null) ? that.workAddress_ == null : workAddress_.equals(that.workAddress_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        if (isAggressivenessUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, aggressiveness_);
        if (isIsDisabledPersonUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, isDisabledPerson_);
        if (isHomeAddressUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, homeAddress_);
        if (isWorkAddressUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, workAddress_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (in.readBool())
        {
            aggressiveness_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            isDisabledPerson_ = in.readBool();
        }

        if (in.readBool())
        {
            homeAddress_ = new nds.core.geometry.Position2D(in, (byte)(0));
        }

        if (in.readBool())
        {
            workAddress_ = new nds.core.geometry.Position2D(in, (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (in.readBool())
        {
            aggressiveness_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAggressiveness().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            isDisabledPerson_ = in.readBool();
        }

        if (in.readBool())
        {
            homeAddress_ = new nds.core.geometry.Position2D(zserioContext.getHomeAddress(), in, (byte)(0));
        }

        if (in.readBool())
        {
            workAddress_ = new nds.core.geometry.Position2D(zserioContext.getWorkAddress(), in, (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isAggressivenessUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isIsDisabledPersonUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isHomeAddressUsed())
        {
            endBitPosition = homeAddress_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isWorkAddressUsed())
        {
            endBitPosition = workAddress_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isAggressivenessUsed())
        {
            endBitPosition += zserioContext.getAggressiveness().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(aggressiveness_));
        }
        endBitPosition += 1;
        if (isIsDisabledPersonUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isHomeAddressUsed())
        {
            endBitPosition = homeAddress_.initializeOffsets(zserioContext.getHomeAddress(), endBitPosition);
        }
        endBitPosition += 1;
        if (isWorkAddressUsed())
        {
            endBitPosition = workAddress_.initializeOffsets(zserioContext.getWorkAddress(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isAggressivenessUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(aggressiveness_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isIsDisabledPersonUsed())
        {
            out.writeBool(true);
            out.writeBool(isDisabledPerson_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isHomeAddressUsed())
        {
            out.writeBool(true);
            // check parameters
            if (homeAddress_.getShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field DriverProfile.homeAddress: " +
                        homeAddress_.getShift() + " != " + (byte)(0) + "!");
            }
            homeAddress_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isWorkAddressUsed())
        {
            out.writeBool(true);
            // check parameters
            if (workAddress_.getShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field DriverProfile.workAddress: " +
                        workAddress_.getShift() + " != " + (byte)(0) + "!");
            }
            workAddress_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isAggressivenessUsed())
        {
            out.writeBool(true);
            zserioContext.getAggressiveness().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(aggressiveness_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isIsDisabledPersonUsed())
        {
            out.writeBool(true);
            out.writeBool(isDisabledPerson_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isHomeAddressUsed())
        {
            out.writeBool(true);
            homeAddress_.write(zserioContext.getHomeAddress(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isWorkAddressUsed())
        {
            out.writeBool(true);
            workAddress_.write(zserioContext.getWorkAddress(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private java.lang.Short aggressiveness_;
    private java.lang.Boolean isDisabledPerson_;
    private nds.core.geometry.Position2D homeAddress_;
    private nds.core.geometry.Position2D workAddress_;
}
