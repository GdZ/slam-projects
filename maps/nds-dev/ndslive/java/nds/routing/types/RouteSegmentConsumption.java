/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.types;

public class RouteSegmentConsumption implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            batteryConsumption_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getBatteryConsumption()
        {
            return batteryConsumption_;
        }

        private zserio.runtime.array.DeltaContext batteryConsumption_;
    };

    public RouteSegmentConsumption()
    {
    }

    public RouteSegmentConsumption(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RouteSegmentConsumption(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RouteSegmentConsumption(
            float fuelConsumption_,
            int batteryConsumption_)
    {
        setFuelConsumption(fuelConsumption_);
        setBatteryConsumption(batteryConsumption_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getBatteryConsumption().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(batteryConsumption_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(batteryConsumption_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserioContext.getBatteryConsumption().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(batteryConsumption_));

        return (int)(endBitPosition - bitPosition);
    }

    public float getFuelConsumption()
    {
        return fuelConsumption_;
    }

    public void setFuelConsumption(float fuelConsumption_)
    {
        this.fuelConsumption_ = fuelConsumption_;
    }

    public int getBatteryConsumption()
    {
        return batteryConsumption_;
    }

    public void setBatteryConsumption(int batteryConsumption_)
    {
        this.batteryConsumption_ = batteryConsumption_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RouteSegmentConsumption)
        {
            final RouteSegmentConsumption that = (RouteSegmentConsumption)obj;

            return
                    java.lang.Float.floatToIntBits(fuelConsumption_) == java.lang.Float.floatToIntBits(that.fuelConsumption_) &&
                    batteryConsumption_ == that.batteryConsumption_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, fuelConsumption_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, batteryConsumption_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        fuelConsumption_ = in.readFloat16();

        batteryConsumption_ = in.readVarUInt32();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        fuelConsumption_ = in.readFloat16();

        batteryConsumption_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getBatteryConsumption().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(batteryConsumption_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserioContext.getBatteryConsumption().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(batteryConsumption_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeFloat16(fuelConsumption_);

        out.writeVarUInt32(batteryConsumption_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeFloat16(fuelConsumption_);

        zserioContext.getBatteryConsumption().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(batteryConsumption_));
    }

    private float fuelConsumption_;
    private int batteryConsumption_;
}
