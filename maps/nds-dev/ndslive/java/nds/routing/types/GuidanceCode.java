/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.types;

public enum GuidanceCode implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    STRAIGHT((short)0),
    BEAR_LEFT((short)1),
    BEAR_RIGHT((short)2),
    LEFT((short)3),
    RIGHT((short)4),
    SLIGHT_LEFT((short)5),
    SLIGHT_RIGHT((short)6),
    SHARP_LEFT((short)7),
    SHARP_RIGHT((short)8),
    UTURN_LEFT((short)9),
    UTURN_RIGHT((short)10),
    UTURN_LEFT_DUAL((short)11),
    UTURN_RIGHT_DUAL((short)12),
    KEEP_LEFT((short)13),
    KEEP_RIGHT((short)14),
    KEEP_LEFT_SINGLE((short)15),
    KEEP_RIGHT_SINGLE((short)16),
    ROUNDABOUT((short)17),
    ROUNDABOUT_REVERSED((short)18),
    MOTORWAY_EXIT_LEFT((short)19),
    MOTORWAY_EXIT_RIGHT((short)20),
    BOARD_FERRY((short)21),
    LEAVE_FERRY((short)22),
    BOARD_CAR_SHUTTLE_TRAIN((short)23),
    LEAVE_CAR_SHUTTLE_TRAIN((short)24),
    ARRIVE((short)25),
    DEPART((short)26),
    HEAD_NORTH((short)27),
    HEAD_NORTH_EAST((short)28),
    HEAD_EAST((short)29),
    HEAD_SOUTH_EAST((short)30),
    HEAD_SOUTH((short)31),
    HEAD_SOUTH_WEST((short)32),
    HEAD_WEST((short)33),
    HEAD_NORTH_WEST((short)34);

    private GuidanceCode(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static GuidanceCode readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static GuidanceCode readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static GuidanceCode toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return STRAIGHT;
            case (short)1:
                return BEAR_LEFT;
            case (short)2:
                return BEAR_RIGHT;
            case (short)3:
                return LEFT;
            case (short)4:
                return RIGHT;
            case (short)5:
                return SLIGHT_LEFT;
            case (short)6:
                return SLIGHT_RIGHT;
            case (short)7:
                return SHARP_LEFT;
            case (short)8:
                return SHARP_RIGHT;
            case (short)9:
                return UTURN_LEFT;
            case (short)10:
                return UTURN_RIGHT;
            case (short)11:
                return UTURN_LEFT_DUAL;
            case (short)12:
                return UTURN_RIGHT_DUAL;
            case (short)13:
                return KEEP_LEFT;
            case (short)14:
                return KEEP_RIGHT;
            case (short)15:
                return KEEP_LEFT_SINGLE;
            case (short)16:
                return KEEP_RIGHT_SINGLE;
            case (short)17:
                return ROUNDABOUT;
            case (short)18:
                return ROUNDABOUT_REVERSED;
            case (short)19:
                return MOTORWAY_EXIT_LEFT;
            case (short)20:
                return MOTORWAY_EXIT_RIGHT;
            case (short)21:
                return BOARD_FERRY;
            case (short)22:
                return LEAVE_FERRY;
            case (short)23:
                return BOARD_CAR_SHUTTLE_TRAIN;
            case (short)24:
                return LEAVE_CAR_SHUTTLE_TRAIN;
            case (short)25:
                return ARRIVE;
            case (short)26:
                return DEPART;
            case (short)27:
                return HEAD_NORTH;
            case (short)28:
                return HEAD_NORTH_EAST;
            case (short)29:
                return HEAD_EAST;
            case (short)30:
                return HEAD_SOUTH_EAST;
            case (short)31:
                return HEAD_SOUTH;
            case (short)32:
                return HEAD_SOUTH_WEST;
            case (short)33:
                return HEAD_WEST;
            case (short)34:
                return HEAD_NORTH_WEST;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration GuidanceCode: " + value + "!");
        }
    }

    public static GuidanceCode toEnum(java.lang.String itemName)
    {
        if (itemName.equals("STRAIGHT"))
            return STRAIGHT;
        if (itemName.equals("BEAR_LEFT"))
            return BEAR_LEFT;
        if (itemName.equals("BEAR_RIGHT"))
            return BEAR_RIGHT;
        if (itemName.equals("LEFT"))
            return LEFT;
        if (itemName.equals("RIGHT"))
            return RIGHT;
        if (itemName.equals("SLIGHT_LEFT"))
            return SLIGHT_LEFT;
        if (itemName.equals("SLIGHT_RIGHT"))
            return SLIGHT_RIGHT;
        if (itemName.equals("SHARP_LEFT"))
            return SHARP_LEFT;
        if (itemName.equals("SHARP_RIGHT"))
            return SHARP_RIGHT;
        if (itemName.equals("UTURN_LEFT"))
            return UTURN_LEFT;
        if (itemName.equals("UTURN_RIGHT"))
            return UTURN_RIGHT;
        if (itemName.equals("UTURN_LEFT_DUAL"))
            return UTURN_LEFT_DUAL;
        if (itemName.equals("UTURN_RIGHT_DUAL"))
            return UTURN_RIGHT_DUAL;
        if (itemName.equals("KEEP_LEFT"))
            return KEEP_LEFT;
        if (itemName.equals("KEEP_RIGHT"))
            return KEEP_RIGHT;
        if (itemName.equals("KEEP_LEFT_SINGLE"))
            return KEEP_LEFT_SINGLE;
        if (itemName.equals("KEEP_RIGHT_SINGLE"))
            return KEEP_RIGHT_SINGLE;
        if (itemName.equals("ROUNDABOUT"))
            return ROUNDABOUT;
        if (itemName.equals("ROUNDABOUT_REVERSED"))
            return ROUNDABOUT_REVERSED;
        if (itemName.equals("MOTORWAY_EXIT_LEFT"))
            return MOTORWAY_EXIT_LEFT;
        if (itemName.equals("MOTORWAY_EXIT_RIGHT"))
            return MOTORWAY_EXIT_RIGHT;
        if (itemName.equals("BOARD_FERRY"))
            return BOARD_FERRY;
        if (itemName.equals("LEAVE_FERRY"))
            return LEAVE_FERRY;
        if (itemName.equals("BOARD_CAR_SHUTTLE_TRAIN"))
            return BOARD_CAR_SHUTTLE_TRAIN;
        if (itemName.equals("LEAVE_CAR_SHUTTLE_TRAIN"))
            return LEAVE_CAR_SHUTTLE_TRAIN;
        if (itemName.equals("ARRIVE"))
            return ARRIVE;
        if (itemName.equals("DEPART"))
            return DEPART;
        if (itemName.equals("HEAD_NORTH"))
            return HEAD_NORTH;
        if (itemName.equals("HEAD_NORTH_EAST"))
            return HEAD_NORTH_EAST;
        if (itemName.equals("HEAD_EAST"))
            return HEAD_EAST;
        if (itemName.equals("HEAD_SOUTH_EAST"))
            return HEAD_SOUTH_EAST;
        if (itemName.equals("HEAD_SOUTH"))
            return HEAD_SOUTH;
        if (itemName.equals("HEAD_SOUTH_WEST"))
            return HEAD_SOUTH_WEST;
        if (itemName.equals("HEAD_WEST"))
            return HEAD_WEST;
        if (itemName.equals("HEAD_NORTH_WEST"))
            return HEAD_NORTH_WEST;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration GuidanceCode!");
    }

    private short value;
}
