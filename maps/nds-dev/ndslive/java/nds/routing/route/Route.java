/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.route;

public class Route implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            length_ = new zserio.runtime.array.DeltaContext();
            travelTime_ = new zserio.runtime.array.DeltaContext();
            routePath_ = new nds.core.location.RoadLocationPath.ZserioPackingContext();
            numRouteSegments_ = new zserio.runtime.array.DeltaContext();
            guidance_ = new nds.routing.guidance.GuidanceInstructions.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        public zserio.runtime.array.DeltaContext getTravelTime()
        {
            return travelTime_;
        }

        public nds.core.location.RoadLocationPath.ZserioPackingContext getRoutePath()
        {
            return routePath_;
        }

        public zserio.runtime.array.DeltaContext getNumRouteSegments()
        {
            return numRouteSegments_;
        }

        public nds.routing.guidance.GuidanceInstructions.ZserioPackingContext getGuidance()
        {
            return guidance_;
        }

        private zserio.runtime.array.DeltaContext length_;
        private zserio.runtime.array.DeltaContext travelTime_;
        private nds.core.location.RoadLocationPath.ZserioPackingContext routePath_;
        private zserio.runtime.array.DeltaContext numRouteSegments_;
        private nds.routing.guidance.GuidanceInstructions.ZserioPackingContext guidance_;
    };

    public Route()
    {
    }

    public Route(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Route(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Route(
            int length_,
            java.math.BigInteger travelTime_,
            nds.core.location.RoadLocationPath routePath_,
            nds.routing.route.RoutePoint[] routePointTypes_,
            int numRouteSegments_,
            nds.routing.route.RouteSegment[] segments_,
            nds.routing.types.RouteSegmentConsumption[] vehicleConsumption_,
            nds.routing.guidance.GuidanceInstructions guidance_,
            nds.routing.route.RouteGeometry[] geometries_)
    {
        setLength(length_);
        setTravelTime(travelTime_);
        setRoutePath(routePath_);
        setRoutePointTypes(routePointTypes_);
        setNumRouteSegments(numRouteSegments_);
        setSegments(segments_);
        setVehicleConsumption(vehicleConsumption_);
        setGuidance(guidance_);
        setGeometries(geometries_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        zserioContext.getTravelTime().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(travelTime_));
        routePath_.initPackingContext(zserioContext.getRoutePath());
        zserioContext.getNumRouteSegments().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRouteSegments_));
        if (isGuidanceUsed())
        {
            guidance_.initPackingContext(zserioContext.getGuidance());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(travelTime_);
        endBitPosition += routePath_.bitSizeOf(endBitPosition);
        endBitPosition += routePointTypes_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(numRouteSegments_);
        endBitPosition += segments_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isVehicleConsumptionUsed())
        {
            endBitPosition += vehicleConsumption_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isGuidanceUsed())
        {
            endBitPosition += guidance_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isGeometriesUsed())
        {
            endBitPosition += geometries_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += zserioContext.getTravelTime().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(travelTime_));
        endBitPosition += routePath_.bitSizeOf(zserioContext.getRoutePath(), endBitPosition);
        endBitPosition += routePointTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getNumRouteSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRouteSegments_));
        endBitPosition += segments_.bitSizeOfPacked(endBitPosition);
        endBitPosition += 1;
        if (isVehicleConsumptionUsed())
        {
            endBitPosition += vehicleConsumption_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isGuidanceUsed())
        {
            endBitPosition += guidance_.bitSizeOf(zserioContext.getGuidance(), endBitPosition);
        }
        endBitPosition += 1;
        if (isGeometriesUsed())
        {
            endBitPosition += geometries_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    public java.math.BigInteger getTravelTime()
    {
        return travelTime_;
    }

    public void setTravelTime(java.math.BigInteger travelTime_)
    {
        this.travelTime_ = travelTime_;
    }

    public nds.core.location.RoadLocationPath getRoutePath()
    {
        return routePath_;
    }

    public void setRoutePath(nds.core.location.RoadLocationPath routePath_)
    {
        this.routePath_ = routePath_;
    }

    public nds.routing.route.RoutePoint[] getRoutePointTypes()
    {
        return (routePointTypes_ == null) ? null : routePointTypes_.getRawArray();
    }

    public void setRoutePointTypes(nds.routing.route.RoutePoint[] routePointTypes_)
    {
        this.routePointTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RoutePoint.class, routePointTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RoutePoint>(new ZserioElementFactory_routePointTypes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int getNumRouteSegments()
    {
        return numRouteSegments_;
    }

    public void setNumRouteSegments(int numRouteSegments_)
    {
        this.numRouteSegments_ = numRouteSegments_;
    }

    public nds.routing.route.RouteSegment[] getSegments()
    {
        return (segments_ == null) ? null : segments_.getRawArray();
    }

    public void setSegments(nds.routing.route.RouteSegment[] segments_)
    {
        this.segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteSegment.class, segments_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.routing.types.RouteSegmentConsumption[] getVehicleConsumption()
    {
        return (vehicleConsumption_ == null) ? null : vehicleConsumption_.getRawArray();
    }

    public void setVehicleConsumption(nds.routing.types.RouteSegmentConsumption[] vehicleConsumption_)
    {
        if (vehicleConsumption_ == null)
        {
            this.vehicleConsumption_ = null;
        }
        else
        {
            this.vehicleConsumption_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RouteSegmentConsumption.class, vehicleConsumption_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteSegmentConsumption>(new ZserioElementFactory_vehicleConsumption()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isVehicleConsumptionUsed()
    {
        return isVehicleConsumptionSet();
    }

    public boolean isVehicleConsumptionSet()
    {
        return (vehicleConsumption_ != null);
    }

    public void resetVehicleConsumption()
    {
        this.vehicleConsumption_ = null;
    }

    public nds.routing.guidance.GuidanceInstructions getGuidance()
    {
        return guidance_;
    }

    public void setGuidance(nds.routing.guidance.GuidanceInstructions guidance_)
    {
        this.guidance_ = guidance_;
    }

    public boolean isGuidanceUsed()
    {
        return isGuidanceSet();
    }

    public boolean isGuidanceSet()
    {
        return (guidance_ != null);
    }

    public void resetGuidance()
    {
        this.guidance_ = null;
    }

    public nds.routing.route.RouteGeometry[] getGeometries()
    {
        return (geometries_ == null) ? null : geometries_.getRawArray();
    }

    public void setGeometries(nds.routing.route.RouteGeometry[] geometries_)
    {
        if (geometries_ == null)
        {
            this.geometries_ = null;
        }
        else
        {
            this.geometries_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteGeometry.class, geometries_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteGeometry>(new ZserioElementFactory_geometries()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isGeometriesUsed()
    {
        return isGeometriesSet();
    }

    public boolean isGeometriesSet()
    {
        return (geometries_ != null);
    }

    public void resetGeometries()
    {
        this.geometries_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Route)
        {
            final Route that = (Route)obj;

            return
                    length_ == that.length_ &&
                    ((travelTime_ == null) ? that.travelTime_ == null : travelTime_.equals(that.travelTime_)) &&
                    ((routePath_ == null) ? that.routePath_ == null : routePath_.equals(that.routePath_)) &&
                    ((routePointTypes_ == null) ? that.routePointTypes_ == null : routePointTypes_.equals(that.routePointTypes_)) &&
                    numRouteSegments_ == that.numRouteSegments_ &&
                    ((segments_ == null) ? that.segments_ == null : segments_.equals(that.segments_)) &&
                    ((!isVehicleConsumptionUsed()) ? !that.isVehicleConsumptionUsed() :
                        ((vehicleConsumption_ == null) ? that.vehicleConsumption_ == null : vehicleConsumption_.equals(that.vehicleConsumption_))) &&
                    ((!isGuidanceUsed()) ? !that.isGuidanceUsed() :
                        ((guidance_ == null) ? that.guidance_ == null : guidance_.equals(that.guidance_))) &&
                    ((!isGeometriesUsed()) ? !that.isGeometriesUsed() :
                        ((geometries_ == null) ? that.geometries_ == null : geometries_.equals(that.geometries_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, travelTime_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, routePath_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, routePointTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRouteSegments_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, segments_);
        if (isVehicleConsumptionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleConsumption_);
        if (isGuidanceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, guidance_);
        if (isGeometriesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, geometries_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        length_ = in.readVarUInt32();

        travelTime_ = in.readVarUInt();

        routePath_ = new nds.core.location.RoadLocationPath(in);

        routePointTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RoutePoint.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RoutePoint>(new ZserioElementFactory_routePointTypes()),
                zserio.runtime.array.ArrayType.NORMAL);
        routePointTypes_.read(in, (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()));

        numRouteSegments_ = in.readVarUInt32();

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.read(in, (int)(getNumRouteSegments()));

        if (in.readBool())
        {
            vehicleConsumption_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RouteSegmentConsumption.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteSegmentConsumption>(new ZserioElementFactory_vehicleConsumption()),
                    zserio.runtime.array.ArrayType.NORMAL);
            vehicleConsumption_.read(in, (int)(getNumRouteSegments()));
        }

        if (in.readBool())
        {
            guidance_ = new nds.routing.guidance.GuidanceInstructions(in);
        }

        if (in.readBool())
        {
            geometries_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteGeometry.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteGeometry>(new ZserioElementFactory_geometries()),
                    zserio.runtime.array.ArrayType.AUTO);
            geometries_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        travelTime_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getTravelTime().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        routePath_ = new nds.core.location.RoadLocationPath(zserioContext.getRoutePath(), in);

        routePointTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RoutePoint.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RoutePoint>(new ZserioElementFactory_routePointTypes()),
                zserio.runtime.array.ArrayType.NORMAL);
        routePointTypes_.readPacked(in, (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()));

        numRouteSegments_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumRouteSegments().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.readPacked(in, (int)(getNumRouteSegments()));

        if (in.readBool())
        {
            vehicleConsumption_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RouteSegmentConsumption.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteSegmentConsumption>(new ZserioElementFactory_vehicleConsumption()),
                    zserio.runtime.array.ArrayType.NORMAL);
            vehicleConsumption_.readPacked(in, (int)(getNumRouteSegments()));
        }

        if (in.readBool())
        {
            guidance_ = new nds.routing.guidance.GuidanceInstructions(zserioContext.getGuidance(), in);
        }

        if (in.readBool())
        {
            geometries_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteGeometry.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteGeometry>(new ZserioElementFactory_geometries()),
                    zserio.runtime.array.ArrayType.AUTO);
            geometries_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(travelTime_);
        endBitPosition = routePath_.initializeOffsets(endBitPosition);
        endBitPosition = routePointTypes_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(numRouteSegments_);
        endBitPosition = segments_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isVehicleConsumptionUsed())
        {
            endBitPosition = vehicleConsumption_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isGuidanceUsed())
        {
            endBitPosition = guidance_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isGeometriesUsed())
        {
            endBitPosition = geometries_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += zserioContext.getTravelTime().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(travelTime_));
        endBitPosition = routePath_.initializeOffsets(zserioContext.getRoutePath(), endBitPosition);
        endBitPosition = routePointTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getNumRouteSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRouteSegments_));
        endBitPosition = segments_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += 1;
        if (isVehicleConsumptionUsed())
        {
            endBitPosition = vehicleConsumption_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isGuidanceUsed())
        {
            endBitPosition = guidance_.initializeOffsets(zserioContext.getGuidance(), endBitPosition);
        }
        endBitPosition += 1;
        if (isGeometriesUsed())
        {
            endBitPosition = geometries_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(length_);

        out.writeVarUInt(travelTime_);

        routePath_.write(out);

        if (routePointTypes_.size() != (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.routePointTypes: " +
                    routePointTypes_.size() + " != " + (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()) + "!");
        }
        routePointTypes_.write(out);

        out.writeVarUInt32(numRouteSegments_);

        if (segments_.size() != (int)(getNumRouteSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.segments: " +
                    segments_.size() + " != " + (int)(getNumRouteSegments()) + "!");
        }
        segments_.write(out);

        if (isVehicleConsumptionUsed())
        {
            out.writeBool(true);
            if (vehicleConsumption_.size() != (int)(getNumRouteSegments()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.vehicleConsumption: " +
                        vehicleConsumption_.size() + " != " + (int)(getNumRouteSegments()) + "!");
            }
            vehicleConsumption_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isGuidanceUsed())
        {
            out.writeBool(true);
            guidance_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isGeometriesUsed())
        {
            out.writeBool(true);
            geometries_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        zserioContext.getTravelTime().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(travelTime_));

        routePath_.write(zserioContext.getRoutePath(), out);

        if (routePointTypes_.size() != (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.routePointTypes: " +
                    routePointTypes_.size() + " != " + (int)(getRoutePath().getPathGeometry().getLine().getNumPositions()) + "!");
        }
        routePointTypes_.writePacked(out);

        zserioContext.getNumRouteSegments().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numRouteSegments_));

        if (segments_.size() != (int)(getNumRouteSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.segments: " +
                    segments_.size() + " != " + (int)(getNumRouteSegments()) + "!");
        }
        segments_.writePacked(out);

        if (isVehicleConsumptionUsed())
        {
            out.writeBool(true);
            if (vehicleConsumption_.size() != (int)(getNumRouteSegments()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field Route.vehicleConsumption: " +
                        vehicleConsumption_.size() + " != " + (int)(getNumRouteSegments()) + "!");
            }
            vehicleConsumption_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isGuidanceUsed())
        {
            out.writeBool(true);
            guidance_.write(zserioContext.getGuidance(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isGeometriesUsed())
        {
            out.writeBool(true);
            geometries_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_routePointTypes implements zserio.runtime.array.PackableElementFactory<nds.routing.route.RoutePoint>
    {
        @Override
        public nds.routing.route.RoutePoint create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.RoutePoint(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.RoutePoint.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.RoutePoint create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.RoutePoint(context, in);
        }
    }

    private static final class ZserioElementFactory_segments implements zserio.runtime.array.PackableElementFactory<nds.routing.route.RouteSegment>
    {
        @Override
        public nds.routing.route.RouteSegment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.RouteSegment(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.RouteSegment.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.RouteSegment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.RouteSegment(context, in);
        }
    }

    private static final class ZserioElementFactory_vehicleConsumption implements zserio.runtime.array.PackableElementFactory<nds.routing.types.RouteSegmentConsumption>
    {
        @Override
        public nds.routing.types.RouteSegmentConsumption create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.types.RouteSegmentConsumption(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.types.RouteSegmentConsumption.ZserioPackingContext();
        }

        @Override
        public nds.routing.types.RouteSegmentConsumption create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.types.RouteSegmentConsumption(context, in);
        }
    }

    private static final class ZserioElementFactory_geometries implements zserio.runtime.array.PackableElementFactory<nds.routing.route.RouteGeometry>
    {
        @Override
        public nds.routing.route.RouteGeometry create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.RouteGeometry(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.RouteGeometry.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.RouteGeometry create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.RouteGeometry(context, in);
        }
    }

    private int length_;
    private java.math.BigInteger travelTime_;
    private nds.core.location.RoadLocationPath routePath_;
    private zserio.runtime.array.Array routePointTypes_;
    private int numRouteSegments_;
    private zserio.runtime.array.Array segments_;
    private zserio.runtime.array.Array vehicleConsumption_;
    private nds.routing.guidance.GuidanceInstructions guidance_;
    private zserio.runtime.array.Array geometries_;
}
