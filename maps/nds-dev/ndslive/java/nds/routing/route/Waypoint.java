/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.route;

public class Waypoint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            position_ = new nds.core.geometry.Position2D.ZserioPackingContext();
            locationPath_ = new nds.core.location.RoadLocationPath.ZserioPackingContext();
            locationId_ = new nds.core.location.RoadLocationId.ZserioPackingContext();
            type_ = new zserio.runtime.array.DeltaContext();
            departureTime_ = new nds.core.types.TimeWithZone.ZserioPackingContext();
            arrivalTime_ = new nds.core.types.TimeWithZone.ZserioPackingContext();
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getPosition()
        {
            return position_;
        }

        public nds.core.location.RoadLocationPath.ZserioPackingContext getLocationPath()
        {
            return locationPath_;
        }

        public nds.core.location.RoadLocationId.ZserioPackingContext getLocationId()
        {
            return locationId_;
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.core.types.TimeWithZone.ZserioPackingContext getDepartureTime()
        {
            return departureTime_;
        }

        public nds.core.types.TimeWithZone.ZserioPackingContext getArrivalTime()
        {
            return arrivalTime_;
        }

        private nds.core.geometry.Position2D.ZserioPackingContext position_;
        private nds.core.location.RoadLocationPath.ZserioPackingContext locationPath_;
        private nds.core.location.RoadLocationId.ZserioPackingContext locationId_;
        private zserio.runtime.array.DeltaContext type_;
        private nds.core.types.TimeWithZone.ZserioPackingContext departureTime_;
        private nds.core.types.TimeWithZone.ZserioPackingContext arrivalTime_;
    };

    public Waypoint()
    {
    }

    public Waypoint(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Waypoint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Waypoint(
            nds.core.geometry.Position2D position_,
            nds.core.location.RoadLocationPath locationPath_,
            nds.core.location.RoadLocationId locationId_,
            java.lang.Boolean rightSide_,
            nds.routing.types.WaypointType type_,
            nds.core.types.TimeWithZone departureTime_,
            nds.core.types.TimeWithZone arrivalTime_)
    {
        setPosition(position_);
        setLocationPath(locationPath_);
        setLocationId(locationId_);
        setRightSide(rightSide_);
        setType(type_);
        setDepartureTime(departureTime_);
        setArrivalTime(arrivalTime_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        position_.initPackingContext(zserioContext.getPosition());
        if (isLocationPathUsed())
        {
            locationPath_.initPackingContext(zserioContext.getLocationPath());
        }
        if (isLocationIdUsed())
        {
            locationId_.initPackingContext(zserioContext.getLocationId());
        }
        if (isTypeUsed())
        {
            type_.initPackingContext(zserioContext.getType());
        }
        if (isDepartureTimeUsed())
        {
            departureTime_.initPackingContext(zserioContext.getDepartureTime());
        }
        if (isArrivalTimeUsed())
        {
            arrivalTime_.initPackingContext(zserioContext.getArrivalTime());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += position_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isLocationPathUsed())
        {
            endBitPosition += locationPath_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isLocationIdUsed())
        {
            endBitPosition += locationId_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isRightSideUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isTypeUsed())
        {
            endBitPosition += type_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition += departureTime_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition += arrivalTime_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += position_.bitSizeOf(zserioContext.getPosition(), endBitPosition);
        endBitPosition += 1;
        if (isLocationPathUsed())
        {
            endBitPosition += locationPath_.bitSizeOf(zserioContext.getLocationPath(), endBitPosition);
        }
        endBitPosition += 1;
        if (isLocationIdUsed())
        {
            endBitPosition += locationId_.bitSizeOf(zserioContext.getLocationId(), endBitPosition);
        }
        endBitPosition += 1;
        if (isRightSideUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isTypeUsed())
        {
            endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition += departureTime_.bitSizeOf(zserioContext.getDepartureTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition += arrivalTime_.bitSizeOf(zserioContext.getArrivalTime(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.geometry.Position2D getPosition()
    {
        return position_;
    }

    public void setPosition(nds.core.geometry.Position2D position_)
    {
        this.position_ = position_;
    }

    public nds.core.location.RoadLocationPath getLocationPath()
    {
        return locationPath_;
    }

    public void setLocationPath(nds.core.location.RoadLocationPath locationPath_)
    {
        this.locationPath_ = locationPath_;
    }

    public boolean isLocationPathUsed()
    {
        return isLocationPathSet();
    }

    public boolean isLocationPathSet()
    {
        return (locationPath_ != null);
    }

    public void resetLocationPath()
    {
        this.locationPath_ = null;
    }

    public nds.core.location.RoadLocationId getLocationId()
    {
        return locationId_;
    }

    public void setLocationId(nds.core.location.RoadLocationId locationId_)
    {
        this.locationId_ = locationId_;
    }

    public boolean isLocationIdUsed()
    {
        return isLocationIdSet();
    }

    public boolean isLocationIdSet()
    {
        return (locationId_ != null);
    }

    public void resetLocationId()
    {
        this.locationId_ = null;
    }

    public java.lang.Boolean getRightSide()
    {
        return rightSide_;
    }

    public void setRightSide(java.lang.Boolean rightSide_)
    {
        this.rightSide_ = rightSide_;
    }

    public boolean isRightSideUsed()
    {
        return isRightSideSet();
    }

    public boolean isRightSideSet()
    {
        return (rightSide_ != null);
    }

    public void resetRightSide()
    {
        this.rightSide_ = null;
    }

    public nds.routing.types.WaypointType getType()
    {
        return type_;
    }

    public void setType(nds.routing.types.WaypointType type_)
    {
        this.type_ = type_;
    }

    public boolean isTypeUsed()
    {
        return isTypeSet();
    }

    public boolean isTypeSet()
    {
        return (type_ != null);
    }

    public void resetType()
    {
        this.type_ = null;
    }

    public nds.core.types.TimeWithZone getDepartureTime()
    {
        return departureTime_;
    }

    public void setDepartureTime(nds.core.types.TimeWithZone departureTime_)
    {
        this.departureTime_ = departureTime_;
    }

    public boolean isDepartureTimeUsed()
    {
        return isDepartureTimeSet();
    }

    public boolean isDepartureTimeSet()
    {
        return (departureTime_ != null);
    }

    public void resetDepartureTime()
    {
        this.departureTime_ = null;
    }

    public nds.core.types.TimeWithZone getArrivalTime()
    {
        return arrivalTime_;
    }

    public void setArrivalTime(nds.core.types.TimeWithZone arrivalTime_)
    {
        this.arrivalTime_ = arrivalTime_;
    }

    public boolean isArrivalTimeUsed()
    {
        return isArrivalTimeSet();
    }

    public boolean isArrivalTimeSet()
    {
        return (arrivalTime_ != null);
    }

    public void resetArrivalTime()
    {
        this.arrivalTime_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Waypoint)
        {
            final Waypoint that = (Waypoint)obj;

            return
                    ((position_ == null) ? that.position_ == null : position_.equals(that.position_)) &&
                    ((!isLocationPathUsed()) ? !that.isLocationPathUsed() :
                        ((locationPath_ == null) ? that.locationPath_ == null : locationPath_.equals(that.locationPath_))) &&
                    ((!isLocationIdUsed()) ? !that.isLocationIdUsed() :
                        ((locationId_ == null) ? that.locationId_ == null : locationId_.equals(that.locationId_))) &&
                    ((!isRightSideUsed()) ? !that.isRightSideUsed() :
                        ((rightSide_ == null) ? that.rightSide_ == null : rightSide_.equals(that.rightSide_))) &&
                    ((!isTypeUsed()) ? !that.isTypeUsed() :
                        ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue())) &&
                    ((!isDepartureTimeUsed()) ? !that.isDepartureTimeUsed() :
                        ((departureTime_ == null) ? that.departureTime_ == null : departureTime_.equals(that.departureTime_))) &&
                    ((!isArrivalTimeUsed()) ? !that.isArrivalTimeUsed() :
                        ((arrivalTime_ == null) ? that.arrivalTime_ == null : arrivalTime_.equals(that.arrivalTime_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);
        if (isLocationPathUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationPath_);
        if (isLocationIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationId_);
        if (isRightSideUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, rightSide_);
        if (isTypeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isDepartureTimeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, departureTime_);
        if (isArrivalTimeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, arrivalTime_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        position_ = new nds.core.geometry.Position2D(in, (byte)(0));

        if (in.readBool())
        {
            locationPath_ = new nds.core.location.RoadLocationPath(in);
        }

        if (in.readBool())
        {
            locationId_ = new nds.core.location.RoadLocationId(in);
        }

        if (in.readBool())
        {
            rightSide_ = in.readBool();
        }

        if (in.readBool())
        {
            type_ = nds.routing.types.WaypointType.readEnum(in);
        }

        if (in.readBool())
        {
            departureTime_ = new nds.core.types.TimeWithZone(in);
        }

        if (in.readBool())
        {
            arrivalTime_ = new nds.core.types.TimeWithZone(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        position_ = new nds.core.geometry.Position2D(zserioContext.getPosition(), in, (byte)(0));

        if (in.readBool())
        {
            locationPath_ = new nds.core.location.RoadLocationPath(zserioContext.getLocationPath(), in);
        }

        if (in.readBool())
        {
            locationId_ = new nds.core.location.RoadLocationId(zserioContext.getLocationId(), in);
        }

        if (in.readBool())
        {
            rightSide_ = in.readBool();
        }

        if (in.readBool())
        {
            type_ = nds.routing.types.WaypointType.readEnum(zserioContext.getType(), in);
        }

        if (in.readBool())
        {
            departureTime_ = new nds.core.types.TimeWithZone(zserioContext.getDepartureTime(), in);
        }

        if (in.readBool())
        {
            arrivalTime_ = new nds.core.types.TimeWithZone(zserioContext.getArrivalTime(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = position_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isLocationPathUsed())
        {
            endBitPosition = locationPath_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isLocationIdUsed())
        {
            endBitPosition = locationId_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isRightSideUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isTypeUsed())
        {
            endBitPosition += type_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition = departureTime_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition = arrivalTime_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = position_.initializeOffsets(zserioContext.getPosition(), endBitPosition);
        endBitPosition += 1;
        if (isLocationPathUsed())
        {
            endBitPosition = locationPath_.initializeOffsets(zserioContext.getLocationPath(), endBitPosition);
        }
        endBitPosition += 1;
        if (isLocationIdUsed())
        {
            endBitPosition = locationId_.initializeOffsets(zserioContext.getLocationId(), endBitPosition);
        }
        endBitPosition += 1;
        if (isRightSideUsed())
        {
            endBitPosition += 1;
        }
        endBitPosition += 1;
        if (isTypeUsed())
        {
            endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition = departureTime_.initializeOffsets(zserioContext.getDepartureTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition = arrivalTime_.initializeOffsets(zserioContext.getArrivalTime(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (position_.getShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field Waypoint.position: " +
                    position_.getShift() + " != " + (byte)(0) + "!");
        }
        position_.write(out);

        if (isLocationPathUsed())
        {
            out.writeBool(true);
            locationPath_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isLocationIdUsed())
        {
            out.writeBool(true);
            locationId_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRightSideUsed())
        {
            out.writeBool(true);
            out.writeBool(rightSide_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTypeUsed())
        {
            out.writeBool(true);
            type_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDepartureTimeUsed())
        {
            out.writeBool(true);
            departureTime_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isArrivalTimeUsed())
        {
            out.writeBool(true);
            arrivalTime_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        position_.write(zserioContext.getPosition(), out);

        if (isLocationPathUsed())
        {
            out.writeBool(true);
            locationPath_.write(zserioContext.getLocationPath(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isLocationIdUsed())
        {
            out.writeBool(true);
            locationId_.write(zserioContext.getLocationId(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRightSideUsed())
        {
            out.writeBool(true);
            out.writeBool(rightSide_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isTypeUsed())
        {
            out.writeBool(true);
            type_.write(zserioContext.getType(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDepartureTimeUsed())
        {
            out.writeBool(true);
            departureTime_.write(zserioContext.getDepartureTime(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isArrivalTimeUsed())
        {
            out.writeBool(true);
            arrivalTime_.write(zserioContext.getArrivalTime(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.core.geometry.Position2D position_;
    private nds.core.location.RoadLocationPath locationPath_;
    private nds.core.location.RoadLocationId locationId_;
    private java.lang.Boolean rightSide_;
    private nds.routing.types.WaypointType type_;
    private nds.core.types.TimeWithZone departureTime_;
    private nds.core.types.TimeWithZone arrivalTime_;
}
