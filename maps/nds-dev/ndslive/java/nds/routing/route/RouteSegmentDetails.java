/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.route;

public class RouteSegmentDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            delay_ = new nds.routing.route.DelayInformation.ZserioPackingContext();
            pollution_ = new nds.routing.types.Pollution.ZserioPackingContext();
            tollCost_ = new nds.core.types.MonetaryAmount.ZserioPackingContext();
            trafficEnforcementCameraType_ = new zserio.runtime.array.DeltaContext();
            trafficEnforcementZoneType_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.routing.route.DelayInformation.ZserioPackingContext getDelay()
        {
            return delay_;
        }

        public nds.routing.types.Pollution.ZserioPackingContext getPollution()
        {
            return pollution_;
        }

        public nds.core.types.MonetaryAmount.ZserioPackingContext getTollCost()
        {
            return tollCost_;
        }

        public zserio.runtime.array.DeltaContext getTrafficEnforcementCameraType()
        {
            return trafficEnforcementCameraType_;
        }

        public zserio.runtime.array.DeltaContext getTrafficEnforcementZoneType()
        {
            return trafficEnforcementZoneType_;
        }

        private nds.routing.route.DelayInformation.ZserioPackingContext delay_;
        private nds.routing.types.Pollution.ZserioPackingContext pollution_;
        private nds.core.types.MonetaryAmount.ZserioPackingContext tollCost_;
        private zserio.runtime.array.DeltaContext trafficEnforcementCameraType_;
        private zserio.runtime.array.DeltaContext trafficEnforcementZoneType_;
    };

    public RouteSegmentDetails(
            nds.routing.types.RouteSegmentType type_)
    {
        this.type_ = type_;
    }

    public RouteSegmentDetails(zserio.runtime.io.BitStreamReader in,
            nds.routing.types.RouteSegmentType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RouteSegmentDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.routing.types.RouteSegmentType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case DELAY:
            return CHOICE_delay;
        case POLLUTION:
            return CHOICE_pollution;
        case TOLL:
            return CHOICE_tollCost;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            return CHOICE_trafficEnforcementCameraType;
        case TRAFFIC_ENFORCEMENT_ZONE:
            return CHOICE_trafficEnforcementZoneType;
        case TUNNEL:
            return UNDEFINED_CHOICE;
        case BRIDGE:
            return UNDEFINED_CHOICE;
        case FERRY:
            return UNDEFINED_CHOICE;
        case CAR_TRAIN:
            return UNDEFINED_CHOICE;
        case PUBLIC_TRANSPORT:
            return UNDEFINED_CHOICE;
        case MOTORWAY:
            return UNDEFINED_CHOICE;
        case UNPAVED:
            return UNDEFINED_CHOICE;
        case AUTOMATED_DRIVING_L3:
            return UNDEFINED_CHOICE;
        case AUTOMATED_DRIVING_L4:
            return UNDEFINED_CHOICE;
        case AUTOMATED_DRIVING_L5:
            return UNDEFINED_CHOICE;
        case LIMITED_MOBILE_DATA_COVERAGE:
            return UNDEFINED_CHOICE;
        case VIGNETTE:
            return UNDEFINED_CHOICE;
        case PEDESTRIAN:
            return UNDEFINED_CHOICE;
        case BIKE:
            return UNDEFINED_CHOICE;
        case SCOOTER:
            return UNDEFINED_CHOICE;
        case ENVIRONMENT_ZONE:
            return UNDEFINED_CHOICE;
        case USER_RESTRICTED_ACCESS:
            return UNDEFINED_CHOICE;
        case PHYSICAL_RESTRICTED_ACCESS:
            return UNDEFINED_CHOICE;
        case LEGAL_RESTRICTED_ACCESS:
            return UNDEFINED_CHOICE;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DELAY:
            getDelay().initPackingContext(zserioContext.getDelay());
            break;
        case POLLUTION:
            getPollution().initPackingContext(zserioContext.getPollution());
            break;
        case TOLL:
            getTollCost().initPackingContext(zserioContext.getTollCost());
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            getTrafficEnforcementCameraType().initPackingContext(zserioContext.getTrafficEnforcementCameraType());
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZoneType().initPackingContext(zserioContext.getTrafficEnforcementZoneType());
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DELAY:
            endBitPosition += getDelay().bitSizeOf(endBitPosition);
            break;
        case POLLUTION:
            endBitPosition += getPollution().bitSizeOf(endBitPosition);
            break;
        case TOLL:
            endBitPosition += getTollCost().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            endBitPosition += getTrafficEnforcementCameraType().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            endBitPosition += getTrafficEnforcementZoneType().bitSizeOf(endBitPosition);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DELAY:
            endBitPosition += getDelay().bitSizeOf(zserioContext.getDelay(), endBitPosition);
            break;
        case POLLUTION:
            endBitPosition += getPollution().bitSizeOf(zserioContext.getPollution(), endBitPosition);
            break;
        case TOLL:
            endBitPosition += getTollCost().bitSizeOf(zserioContext.getTollCost(), endBitPosition);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            endBitPosition += getTrafficEnforcementCameraType().bitSizeOf(zserioContext.getTrafficEnforcementCameraType(), endBitPosition);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            endBitPosition += getTrafficEnforcementZoneType().bitSizeOf(zserioContext.getTrafficEnforcementZoneType(), endBitPosition);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.types.RouteSegmentType getType()
    {
        return this.type_;
    }

    public nds.routing.route.DelayInformation getDelay()
    {
        return (nds.routing.route.DelayInformation)objectChoice;
    }

    public void setDelay(nds.routing.route.DelayInformation delay_)
    {
        objectChoice = delay_;
    }

    public nds.routing.types.Pollution getPollution()
    {
        return (nds.routing.types.Pollution)objectChoice;
    }

    public void setPollution(nds.routing.types.Pollution pollution_)
    {
        objectChoice = pollution_;
    }

    public nds.core.types.MonetaryAmount getTollCost()
    {
        return (nds.core.types.MonetaryAmount)objectChoice;
    }

    public void setTollCost(nds.core.types.MonetaryAmount tollCost_)
    {
        objectChoice = tollCost_;
    }

    public nds.core.types.TrafficEnforcementCameraType getTrafficEnforcementCameraType()
    {
        return (nds.core.types.TrafficEnforcementCameraType)objectChoice;
    }

    public void setTrafficEnforcementCameraType(nds.core.types.TrafficEnforcementCameraType trafficEnforcementCameraType_)
    {
        objectChoice = trafficEnforcementCameraType_;
    }

    public nds.core.types.TrafficEnforcementZoneType getTrafficEnforcementZoneType()
    {
        return (nds.core.types.TrafficEnforcementZoneType)objectChoice;
    }

    public void setTrafficEnforcementZoneType(nds.core.types.TrafficEnforcementZoneType trafficEnforcementZoneType_)
    {
        objectChoice = trafficEnforcementZoneType_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RouteSegmentDetails)
        {
            final RouteSegmentDetails that = (RouteSegmentDetails)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case DELAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routing.route.DelayInformation)objectChoice);
                break;
            case POLLUTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routing.types.Pollution)objectChoice);
                break;
            case TOLL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.MonetaryAmount)objectChoice);
                break;
            case TRAFFIC_ENFORCEMENT_CAMERA:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.TrafficEnforcementCameraType)objectChoice);
                break;
            case TRAFFIC_ENFORCEMENT_ZONE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.TrafficEnforcementZoneType)objectChoice);
                break;
            case TUNNEL:
                // empty
                break;
            case BRIDGE:
                // empty
                break;
            case FERRY:
                // empty
                break;
            case CAR_TRAIN:
                // empty
                break;
            case PUBLIC_TRANSPORT:
                // empty
                break;
            case MOTORWAY:
                // empty
                break;
            case UNPAVED:
                // empty
                break;
            case AUTOMATED_DRIVING_L3:
                // empty
                break;
            case AUTOMATED_DRIVING_L4:
                // empty
                break;
            case AUTOMATED_DRIVING_L5:
                // empty
                break;
            case LIMITED_MOBILE_DATA_COVERAGE:
                // empty
                break;
            case VIGNETTE:
                // empty
                break;
            case PEDESTRIAN:
                // empty
                break;
            case BIKE:
                // empty
                break;
            case SCOOTER:
                // empty
                break;
            case ENVIRONMENT_ZONE:
                // empty
                break;
            case USER_RESTRICTED_ACCESS:
                // empty
                break;
            case PHYSICAL_RESTRICTED_ACCESS:
                // empty
                break;
            case LEGAL_RESTRICTED_ACCESS:
                // empty
                break;
            default:
                // empty
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case DELAY:
            objectChoice = new nds.routing.route.DelayInformation(in);
            break;
        case POLLUTION:
            objectChoice = new nds.routing.types.Pollution(in);
            break;
        case TOLL:
            objectChoice = new nds.core.types.MonetaryAmount(in);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            objectChoice = nds.core.types.TrafficEnforcementCameraType.readEnum(in);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            objectChoice = nds.core.types.TrafficEnforcementZoneType.readEnum(in);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DELAY:
            objectChoice = new nds.routing.route.DelayInformation(zserioContext.getDelay(), in);
            break;
        case POLLUTION:
            objectChoice = new nds.routing.types.Pollution(zserioContext.getPollution(), in);
            break;
        case TOLL:
            objectChoice = new nds.core.types.MonetaryAmount(zserioContext.getTollCost(), in);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            objectChoice = nds.core.types.TrafficEnforcementCameraType.readEnum(zserioContext.getTrafficEnforcementCameraType(), in);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            objectChoice = nds.core.types.TrafficEnforcementZoneType.readEnum(zserioContext.getTrafficEnforcementZoneType(), in);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DELAY:
            {
                endBitPosition = getDelay().initializeOffsets(endBitPosition);
            }
            break;
        case POLLUTION:
            {
                endBitPosition = getPollution().initializeOffsets(endBitPosition);
            }
            break;
        case TOLL:
            {
                endBitPosition = getTollCost().initializeOffsets(endBitPosition);
            }
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            {
                endBitPosition += getTrafficEnforcementCameraType().bitSizeOf(endBitPosition);
            }
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            {
                endBitPosition += getTrafficEnforcementZoneType().bitSizeOf(endBitPosition);
            }
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case DELAY:
            {
                endBitPosition = getDelay().initializeOffsets(zserioContext.getDelay(), endBitPosition);
            }
            break;
        case POLLUTION:
            {
                endBitPosition = getPollution().initializeOffsets(zserioContext.getPollution(), endBitPosition);
            }
            break;
        case TOLL:
            {
                endBitPosition = getTollCost().initializeOffsets(zserioContext.getTollCost(), endBitPosition);
            }
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            {
                endBitPosition = getTrafficEnforcementCameraType().initializeOffsets(zserioContext.getTrafficEnforcementCameraType(), endBitPosition);
            }
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            {
                endBitPosition = getTrafficEnforcementZoneType().initializeOffsets(zserioContext.getTrafficEnforcementZoneType(), endBitPosition);
            }
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case DELAY:
            getDelay().write(out);
            break;
        case POLLUTION:
            getPollution().write(out);
            break;
        case TOLL:
            getTollCost().write(out);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            getTrafficEnforcementCameraType().write(out);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZoneType().write(out);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case DELAY:
            getDelay().write(zserioContext.getDelay(), out);
            break;
        case POLLUTION:
            getPollution().write(zserioContext.getPollution(), out);
            break;
        case TOLL:
            getTollCost().write(zserioContext.getTollCost(), out);
            break;
        case TRAFFIC_ENFORCEMENT_CAMERA:
            getTrafficEnforcementCameraType().write(zserioContext.getTrafficEnforcementCameraType(), out);
            break;
        case TRAFFIC_ENFORCEMENT_ZONE:
            getTrafficEnforcementZoneType().write(zserioContext.getTrafficEnforcementZoneType(), out);
            break;
        case TUNNEL:
            // empty
            break;
        case BRIDGE:
            // empty
            break;
        case FERRY:
            // empty
            break;
        case CAR_TRAIN:
            // empty
            break;
        case PUBLIC_TRANSPORT:
            // empty
            break;
        case MOTORWAY:
            // empty
            break;
        case UNPAVED:
            // empty
            break;
        case AUTOMATED_DRIVING_L3:
            // empty
            break;
        case AUTOMATED_DRIVING_L4:
            // empty
            break;
        case AUTOMATED_DRIVING_L5:
            // empty
            break;
        case LIMITED_MOBILE_DATA_COVERAGE:
            // empty
            break;
        case VIGNETTE:
            // empty
            break;
        case PEDESTRIAN:
            // empty
            break;
        case BIKE:
            // empty
            break;
        case SCOOTER:
            // empty
            break;
        case ENVIRONMENT_ZONE:
            // empty
            break;
        case USER_RESTRICTED_ACCESS:
            // empty
            break;
        case PHYSICAL_RESTRICTED_ACCESS:
            // empty
            break;
        case LEGAL_RESTRICTED_ACCESS:
            // empty
            break;
        default:
            // empty
            break;
        }
    }

    public static final int CHOICE_delay = 0;
    public static final int CHOICE_pollution = 1;
    public static final int CHOICE_tollCost = 2;
    public static final int CHOICE_trafficEnforcementCameraType = 3;
    public static final int CHOICE_trafficEnforcementZoneType = 4;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.routing.types.RouteSegmentType type_;
    private java.lang.Object objectChoice;
}
