/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.services;

public class RoutingServiceResponse implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            route_ = new nds.routing.route.Route.ZserioPackingContext();
            mapId_ = new nds.system.types.NdsSystemToken.ZserioPackingContext();
            versionId_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.routing.route.Route.ZserioPackingContext getRoute()
        {
            return route_;
        }

        public nds.system.types.NdsSystemToken.ZserioPackingContext getMapId()
        {
            return mapId_;
        }

        public zserio.runtime.array.DeltaContext getVersionId()
        {
            return versionId_;
        }

        private nds.routing.route.Route.ZserioPackingContext route_;
        private nds.system.types.NdsSystemToken.ZserioPackingContext mapId_;
        private zserio.runtime.array.DeltaContext versionId_;
    };

    public RoutingServiceResponse()
    {
    }

    public RoutingServiceResponse(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoutingServiceResponse(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoutingServiceResponse(
            nds.routing.route.Route route_,
            nds.routing.route.Route[] alternativeRoutes_,
            nds.system.types.NdsSystemToken mapId_,
            java.math.BigInteger versionId_,
            zserio.runtime.io.BitBuffer customResponseData_)
    {
        setRoute(route_);
        setAlternativeRoutes(alternativeRoutes_);
        setMapId(mapId_);
        setVersionId(versionId_);
        setCustomResponseData(customResponseData_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        route_.initPackingContext(zserioContext.getRoute());
        if (isMapIdUsed())
        {
            mapId_.initPackingContext(zserioContext.getMapId());
        }
        if (isVersionIdUsed())
        {
            zserioContext.getVersionId().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(versionId_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += route_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isAlternativeRoutesUsed())
        {
            endBitPosition += alternativeRoutes_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isMapIdUsed())
        {
            endBitPosition += mapId_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isVersionIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(versionId_);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customResponseData_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += route_.bitSizeOf(zserioContext.getRoute(), endBitPosition);
        endBitPosition += 1;
        if (isAlternativeRoutesUsed())
        {
            endBitPosition += alternativeRoutes_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isMapIdUsed())
        {
            endBitPosition += mapId_.bitSizeOf(zserioContext.getMapId(), endBitPosition);
        }
        endBitPosition += 1;
        if (isVersionIdUsed())
        {
            endBitPosition += zserioContext.getVersionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(versionId_));
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customResponseData_);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.route.Route getRoute()
    {
        return route_;
    }

    public void setRoute(nds.routing.route.Route route_)
    {
        this.route_ = route_;
    }

    public nds.routing.route.Route[] getAlternativeRoutes()
    {
        return (alternativeRoutes_ == null) ? null : alternativeRoutes_.getRawArray();
    }

    public void setAlternativeRoutes(nds.routing.route.Route[] alternativeRoutes_)
    {
        if (alternativeRoutes_ == null)
        {
            this.alternativeRoutes_ = null;
        }
        else
        {
            this.alternativeRoutes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Route.class, alternativeRoutes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Route>(new ZserioElementFactory_alternativeRoutes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isAlternativeRoutesUsed()
    {
        return isAlternativeRoutesSet();
    }

    public boolean isAlternativeRoutesSet()
    {
        return (alternativeRoutes_ != null);
    }

    public void resetAlternativeRoutes()
    {
        this.alternativeRoutes_ = null;
    }

    public nds.system.types.NdsSystemToken getMapId()
    {
        return mapId_;
    }

    public void setMapId(nds.system.types.NdsSystemToken mapId_)
    {
        this.mapId_ = mapId_;
    }

    public boolean isMapIdUsed()
    {
        return isMapIdSet();
    }

    public boolean isMapIdSet()
    {
        return (mapId_ != null);
    }

    public void resetMapId()
    {
        this.mapId_ = null;
    }

    public java.math.BigInteger getVersionId()
    {
        return versionId_;
    }

    public void setVersionId(java.math.BigInteger versionId_)
    {
        this.versionId_ = versionId_;
    }

    public boolean isVersionIdUsed()
    {
        return isVersionIdSet();
    }

    public boolean isVersionIdSet()
    {
        return (versionId_ != null);
    }

    public void resetVersionId()
    {
        this.versionId_ = null;
    }

    public zserio.runtime.io.BitBuffer getCustomResponseData()
    {
        return customResponseData_;
    }

    public void setCustomResponseData(zserio.runtime.io.BitBuffer customResponseData_)
    {
        this.customResponseData_ = customResponseData_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoutingServiceResponse)
        {
            final RoutingServiceResponse that = (RoutingServiceResponse)obj;

            return
                    ((route_ == null) ? that.route_ == null : route_.equals(that.route_)) &&
                    ((!isAlternativeRoutesUsed()) ? !that.isAlternativeRoutesUsed() :
                        ((alternativeRoutes_ == null) ? that.alternativeRoutes_ == null : alternativeRoutes_.equals(that.alternativeRoutes_))) &&
                    ((!isMapIdUsed()) ? !that.isMapIdUsed() :
                        ((mapId_ == null) ? that.mapId_ == null : mapId_.equals(that.mapId_))) &&
                    ((!isVersionIdUsed()) ? !that.isVersionIdUsed() :
                        ((versionId_ == null) ? that.versionId_ == null : versionId_.equals(that.versionId_))) &&
                    ((customResponseData_ == null) ? that.customResponseData_ == null : customResponseData_.equals(that.customResponseData_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, route_);
        if (isAlternativeRoutesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, alternativeRoutes_);
        if (isMapIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, mapId_);
        if (isVersionIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, versionId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, customResponseData_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        route_ = new nds.routing.route.Route(in);

        if (in.readBool())
        {
            alternativeRoutes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Route.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Route>(new ZserioElementFactory_alternativeRoutes()),
                    zserio.runtime.array.ArrayType.AUTO);
            alternativeRoutes_.read(in);
        }

        if (in.readBool())
        {
            mapId_ = new nds.system.types.NdsSystemToken(in);
        }

        if (in.readBool())
        {
            versionId_ = in.readVarUInt();
        }

        in.alignTo(8);
        customResponseData_ = in.readBitBuffer();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        route_ = new nds.routing.route.Route(zserioContext.getRoute(), in);

        if (in.readBool())
        {
            alternativeRoutes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Route.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Route>(new ZserioElementFactory_alternativeRoutes()),
                    zserio.runtime.array.ArrayType.AUTO);
            alternativeRoutes_.readPacked(in);
        }

        if (in.readBool())
        {
            mapId_ = new nds.system.types.NdsSystemToken(zserioContext.getMapId(), in);
        }

        if (in.readBool())
        {
            versionId_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getVersionId().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        in.alignTo(8);
        customResponseData_ = in.readBitBuffer();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = route_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isAlternativeRoutesUsed())
        {
            endBitPosition = alternativeRoutes_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isMapIdUsed())
        {
            endBitPosition = mapId_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isVersionIdUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(versionId_);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customResponseData_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = route_.initializeOffsets(zserioContext.getRoute(), endBitPosition);
        endBitPosition += 1;
        if (isAlternativeRoutesUsed())
        {
            endBitPosition = alternativeRoutes_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isMapIdUsed())
        {
            endBitPosition = mapId_.initializeOffsets(zserioContext.getMapId(), endBitPosition);
        }
        endBitPosition += 1;
        if (isVersionIdUsed())
        {
            endBitPosition += zserioContext.getVersionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(versionId_));
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customResponseData_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        route_.write(out);

        if (isAlternativeRoutesUsed())
        {
            out.writeBool(true);
            alternativeRoutes_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isMapIdUsed())
        {
            out.writeBool(true);
            mapId_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVersionIdUsed())
        {
            out.writeBool(true);
            out.writeVarUInt(versionId_);
        }
        else
        {
            out.writeBool(false);
        }

        out.alignTo(8);
        out.writeBitBuffer(customResponseData_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        route_.write(zserioContext.getRoute(), out);

        if (isAlternativeRoutesUsed())
        {
            out.writeBool(true);
            alternativeRoutes_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isMapIdUsed())
        {
            out.writeBool(true);
            mapId_.write(zserioContext.getMapId(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVersionIdUsed())
        {
            out.writeBool(true);
            zserioContext.getVersionId().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(versionId_));
        }
        else
        {
            out.writeBool(false);
        }

        out.alignTo(8);
        out.writeBitBuffer(customResponseData_);
    }

    private static final class ZserioElementFactory_alternativeRoutes implements zserio.runtime.array.PackableElementFactory<nds.routing.route.Route>
    {
        @Override
        public nds.routing.route.Route create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.Route(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.Route.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.Route create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.Route(context, in);
        }
    }

    private nds.routing.route.Route route_;
    private zserio.runtime.array.Array alternativeRoutes_;
    private nds.system.types.NdsSystemToken mapId_;
    private java.math.BigInteger versionId_;
    private zserio.runtime.io.BitBuffer customResponseData_;
}
