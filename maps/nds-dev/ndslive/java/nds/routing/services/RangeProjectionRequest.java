/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.services;

public class RangeProjectionRequest implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            origin_ = new nds.routing.route.Waypoint.ZserioPackingContext();
            timeBudget_ = new zserio.runtime.array.DeltaContext();
            distanceMeters_ = new zserio.runtime.array.DeltaContext();
            vehicleDetails_ = new nds.core.vehicle.VehicleDetails.ZserioPackingContext();
            vehiclePose_ = new nds.core.vehicle.VehiclePose.ZserioPackingContext();
            driverProfile_ = new nds.routing.types.DriverProfile.ZserioPackingContext();
            maxPolyCount_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.routing.route.Waypoint.ZserioPackingContext getOrigin()
        {
            return origin_;
        }

        public zserio.runtime.array.DeltaContext getTimeBudget()
        {
            return timeBudget_;
        }

        public zserio.runtime.array.DeltaContext getDistanceMeters()
        {
            return distanceMeters_;
        }

        public nds.core.vehicle.VehicleDetails.ZserioPackingContext getVehicleDetails()
        {
            return vehicleDetails_;
        }

        public nds.core.vehicle.VehiclePose.ZserioPackingContext getVehiclePose()
        {
            return vehiclePose_;
        }

        public nds.routing.types.DriverProfile.ZserioPackingContext getDriverProfile()
        {
            return driverProfile_;
        }

        public zserio.runtime.array.DeltaContext getMaxPolyCount()
        {
            return maxPolyCount_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private nds.routing.route.Waypoint.ZserioPackingContext origin_;
        private zserio.runtime.array.DeltaContext timeBudget_;
        private zserio.runtime.array.DeltaContext distanceMeters_;
        private nds.core.vehicle.VehicleDetails.ZserioPackingContext vehicleDetails_;
        private nds.core.vehicle.VehiclePose.ZserioPackingContext vehiclePose_;
        private nds.routing.types.DriverProfile.ZserioPackingContext driverProfile_;
        private zserio.runtime.array.DeltaContext maxPolyCount_;
    };

    public RangeProjectionRequest()
    {
    }

    public RangeProjectionRequest(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RangeProjectionRequest(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RangeProjectionRequest(
            nds.routing.types.RangeProjectionType type_,
            nds.routing.route.Waypoint origin_,
            java.math.BigInteger timeBudget_,
            java.lang.Integer distanceMeters_,
            nds.core.vehicle.VehicleDetails vehicleDetails_,
            nds.core.vehicle.VehiclePose vehiclePose_,
            nds.routing.types.DriverProfile driverProfile_,
            java.lang.Integer maxPolyCount_)
    {
        setType(type_);
        setOrigin(origin_);
        setTimeBudget(timeBudget_);
        setDistanceMeters(distanceMeters_);
        setVehicleDetails(vehicleDetails_);
        setVehiclePose(vehiclePose_);
        setDriverProfile(driverProfile_);
        setMaxPolyCount(maxPolyCount_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        origin_.initPackingContext(zserioContext.getOrigin());
        if (isTimeBudgetUsed())
        {
            zserioContext.getTimeBudget().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(timeBudget_));
        }
        if (isDistanceMetersUsed())
        {
            zserioContext.getDistanceMeters().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(distanceMeters_));
        }
        vehicleDetails_.initPackingContext(zserioContext.getVehicleDetails());
        if (isVehiclePoseUsed())
        {
            vehiclePose_.initPackingContext(zserioContext.getVehiclePose());
        }
        if (isDriverProfileUsed())
        {
            driverProfile_.initPackingContext(zserioContext.getDriverProfile());
        }
        if (isMaxPolyCountUsed())
        {
            zserioContext.getMaxPolyCount().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maxPolyCount_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += origin_.bitSizeOf(endBitPosition);
        if (isTimeBudgetUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(timeBudget_);
        }
        if (isDistanceMetersUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(distanceMeters_);
        }
        endBitPosition += vehicleDetails_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition += vehiclePose_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition += driverProfile_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isMaxPolyCountUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxPolyCount_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += origin_.bitSizeOf(zserioContext.getOrigin(), endBitPosition);
        if (isTimeBudgetUsed())
        {
            endBitPosition += zserioContext.getTimeBudget().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(timeBudget_));
        }
        if (isDistanceMetersUsed())
        {
            endBitPosition += zserioContext.getDistanceMeters().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(distanceMeters_));
        }
        endBitPosition += vehicleDetails_.bitSizeOf(zserioContext.getVehicleDetails(), endBitPosition);
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition += vehiclePose_.bitSizeOf(zserioContext.getVehiclePose(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition += driverProfile_.bitSizeOf(zserioContext.getDriverProfile(), endBitPosition);
        }
        endBitPosition += 1;
        if (isMaxPolyCountUsed())
        {
            endBitPosition += zserioContext.getMaxPolyCount().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maxPolyCount_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.types.RangeProjectionType getType()
    {
        return type_;
    }

    public void setType(nds.routing.types.RangeProjectionType type_)
    {
        this.type_ = type_;
    }

    public nds.routing.route.Waypoint getOrigin()
    {
        return origin_;
    }

    public void setOrigin(nds.routing.route.Waypoint origin_)
    {
        this.origin_ = origin_;
    }

    public java.math.BigInteger getTimeBudget()
    {
        return timeBudget_;
    }

    public void setTimeBudget(java.math.BigInteger timeBudget_)
    {
        this.timeBudget_ = timeBudget_;
    }

    public boolean isTimeBudgetUsed()
    {
        return ((getType().and(nds.routing.types.RangeProjectionType.Values.TIME)).equals(nds.routing.types.RangeProjectionType.Values.TIME));
    }

    public boolean isTimeBudgetSet()
    {
        return (timeBudget_ != null);
    }

    public void resetTimeBudget()
    {
        this.timeBudget_ = null;
    }

    public java.lang.Integer getDistanceMeters()
    {
        return distanceMeters_;
    }

    public void setDistanceMeters(java.lang.Integer distanceMeters_)
    {
        this.distanceMeters_ = distanceMeters_;
    }

    public boolean isDistanceMetersUsed()
    {
        return ((getType().and(nds.routing.types.RangeProjectionType.Values.DISTANCE)).equals(nds.routing.types.RangeProjectionType.Values.DISTANCE));
    }

    public boolean isDistanceMetersSet()
    {
        return (distanceMeters_ != null);
    }

    public void resetDistanceMeters()
    {
        this.distanceMeters_ = null;
    }

    public nds.core.vehicle.VehicleDetails getVehicleDetails()
    {
        return vehicleDetails_;
    }

    public void setVehicleDetails(nds.core.vehicle.VehicleDetails vehicleDetails_)
    {
        this.vehicleDetails_ = vehicleDetails_;
    }

    public nds.core.vehicle.VehiclePose getVehiclePose()
    {
        return vehiclePose_;
    }

    public void setVehiclePose(nds.core.vehicle.VehiclePose vehiclePose_)
    {
        this.vehiclePose_ = vehiclePose_;
    }

    public boolean isVehiclePoseUsed()
    {
        return isVehiclePoseSet();
    }

    public boolean isVehiclePoseSet()
    {
        return (vehiclePose_ != null);
    }

    public void resetVehiclePose()
    {
        this.vehiclePose_ = null;
    }

    public nds.routing.types.DriverProfile getDriverProfile()
    {
        return driverProfile_;
    }

    public void setDriverProfile(nds.routing.types.DriverProfile driverProfile_)
    {
        this.driverProfile_ = driverProfile_;
    }

    public boolean isDriverProfileUsed()
    {
        return isDriverProfileSet();
    }

    public boolean isDriverProfileSet()
    {
        return (driverProfile_ != null);
    }

    public void resetDriverProfile()
    {
        this.driverProfile_ = null;
    }

    public java.lang.Integer getMaxPolyCount()
    {
        return maxPolyCount_;
    }

    public void setMaxPolyCount(java.lang.Integer maxPolyCount_)
    {
        this.maxPolyCount_ = maxPolyCount_;
    }

    public boolean isMaxPolyCountUsed()
    {
        return isMaxPolyCountSet();
    }

    public boolean isMaxPolyCountSet()
    {
        return (maxPolyCount_ != null);
    }

    public void resetMaxPolyCount()
    {
        this.maxPolyCount_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RangeProjectionRequest)
        {
            final RangeProjectionRequest that = (RangeProjectionRequest)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.equals(that.type_)) &&
                    ((origin_ == null) ? that.origin_ == null : origin_.equals(that.origin_)) &&
                    ((!isTimeBudgetUsed()) ? !that.isTimeBudgetUsed() :
                        ((timeBudget_ == null) ? that.timeBudget_ == null : timeBudget_.equals(that.timeBudget_))) &&
                    ((!isDistanceMetersUsed()) ? !that.isDistanceMetersUsed() :
                        ((distanceMeters_ == null) ? that.distanceMeters_ == null : distanceMeters_.equals(that.distanceMeters_))) &&
                    ((vehicleDetails_ == null) ? that.vehicleDetails_ == null : vehicleDetails_.equals(that.vehicleDetails_)) &&
                    ((!isVehiclePoseUsed()) ? !that.isVehiclePoseUsed() :
                        ((vehiclePose_ == null) ? that.vehiclePose_ == null : vehiclePose_.equals(that.vehiclePose_))) &&
                    ((!isDriverProfileUsed()) ? !that.isDriverProfileUsed() :
                        ((driverProfile_ == null) ? that.driverProfile_ == null : driverProfile_.equals(that.driverProfile_))) &&
                    ((!isMaxPolyCountUsed()) ? !that.isMaxPolyCountUsed() :
                        ((maxPolyCount_ == null) ? that.maxPolyCount_ == null : maxPolyCount_.equals(that.maxPolyCount_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, origin_);
        if (isTimeBudgetUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, timeBudget_);
        if (isDistanceMetersUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, distanceMeters_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleDetails_);
        if (isVehiclePoseUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehiclePose_);
        if (isDriverProfileUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, driverProfile_);
        if (isMaxPolyCountUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, maxPolyCount_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = new nds.routing.types.RangeProjectionType(in);

        origin_ = new nds.routing.route.Waypoint(in);

        if ((getType().and(nds.routing.types.RangeProjectionType.Values.TIME)).equals(nds.routing.types.RangeProjectionType.Values.TIME))
        {
            timeBudget_ = in.readVarUInt();
        }

        if ((getType().and(nds.routing.types.RangeProjectionType.Values.DISTANCE)).equals(nds.routing.types.RangeProjectionType.Values.DISTANCE))
        {
            distanceMeters_ = in.readVarUInt32();
        }

        vehicleDetails_ = new nds.core.vehicle.VehicleDetails(in);

        if (in.readBool())
        {
            vehiclePose_ = new nds.core.vehicle.VehiclePose(in);
        }

        if (in.readBool())
        {
            driverProfile_ = new nds.routing.types.DriverProfile(in);
        }

        if (in.readBool())
        {
            maxPolyCount_ = in.readVarUInt32();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = new nds.routing.types.RangeProjectionType(zserioContext.getType(), in);

        origin_ = new nds.routing.route.Waypoint(zserioContext.getOrigin(), in);

        if ((getType().and(nds.routing.types.RangeProjectionType.Values.TIME)).equals(nds.routing.types.RangeProjectionType.Values.TIME))
        {
            timeBudget_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getTimeBudget().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
        }

        if ((getType().and(nds.routing.types.RangeProjectionType.Values.DISTANCE)).equals(nds.routing.types.RangeProjectionType.Values.DISTANCE))
        {
            distanceMeters_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getDistanceMeters().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }

        vehicleDetails_ = new nds.core.vehicle.VehicleDetails(zserioContext.getVehicleDetails(), in);

        if (in.readBool())
        {
            vehiclePose_ = new nds.core.vehicle.VehiclePose(zserioContext.getVehiclePose(), in);
        }

        if (in.readBool())
        {
            driverProfile_ = new nds.routing.types.DriverProfile(zserioContext.getDriverProfile(), in);
        }

        if (in.readBool())
        {
            maxPolyCount_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getMaxPolyCount().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition = origin_.initializeOffsets(endBitPosition);
        if (isTimeBudgetUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(timeBudget_);
        }
        if (isDistanceMetersUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(distanceMeters_);
        }
        endBitPosition = vehicleDetails_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition = vehiclePose_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition = driverProfile_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isMaxPolyCountUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(maxPolyCount_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = origin_.initializeOffsets(zserioContext.getOrigin(), endBitPosition);
        if (isTimeBudgetUsed())
        {
            endBitPosition += zserioContext.getTimeBudget().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(timeBudget_));
        }
        if (isDistanceMetersUsed())
        {
            endBitPosition += zserioContext.getDistanceMeters().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(distanceMeters_));
        }
        endBitPosition = vehicleDetails_.initializeOffsets(zserioContext.getVehicleDetails(), endBitPosition);
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition = vehiclePose_.initializeOffsets(zserioContext.getVehiclePose(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition = driverProfile_.initializeOffsets(zserioContext.getDriverProfile(), endBitPosition);
        }
        endBitPosition += 1;
        if (isMaxPolyCountUsed())
        {
            endBitPosition += zserioContext.getMaxPolyCount().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maxPolyCount_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        origin_.write(out);

        if (isTimeBudgetUsed())
        {
            out.writeVarUInt(timeBudget_);
        }

        if (isDistanceMetersUsed())
        {
            out.writeVarUInt32(distanceMeters_);
        }

        vehicleDetails_.write(out);

        if (isVehiclePoseUsed())
        {
            out.writeBool(true);
            vehiclePose_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDriverProfileUsed())
        {
            out.writeBool(true);
            driverProfile_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isMaxPolyCountUsed())
        {
            out.writeBool(true);
            out.writeVarUInt32(maxPolyCount_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        origin_.write(zserioContext.getOrigin(), out);

        if (isTimeBudgetUsed())
        {
            zserioContext.getTimeBudget().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(timeBudget_));
        }

        if (isDistanceMetersUsed())
        {
            zserioContext.getDistanceMeters().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(distanceMeters_));
        }

        vehicleDetails_.write(zserioContext.getVehicleDetails(), out);

        if (isVehiclePoseUsed())
        {
            out.writeBool(true);
            vehiclePose_.write(zserioContext.getVehiclePose(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDriverProfileUsed())
        {
            out.writeBool(true);
            driverProfile_.write(zserioContext.getDriverProfile(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isMaxPolyCountUsed())
        {
            out.writeBool(true);
            zserioContext.getMaxPolyCount().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(maxPolyCount_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.routing.types.RangeProjectionType type_;
    private nds.routing.route.Waypoint origin_;
    private java.math.BigInteger timeBudget_;
    private java.lang.Integer distanceMeters_;
    private nds.core.vehicle.VehicleDetails vehicleDetails_;
    private nds.core.vehicle.VehiclePose vehiclePose_;
    private nds.routing.types.DriverProfile driverProfile_;
    private java.lang.Integer maxPolyCount_;
}
