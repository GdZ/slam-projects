/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.services;

public class RoutingServiceRequest implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            language_ = new zserio.runtime.array.DeltaContext();
            type_ = new zserio.runtime.array.DeltaContext();
            origin_ = new nds.routing.route.Waypoint.ZserioPackingContext();
            destination_ = new nds.routing.route.Waypoint.ZserioPackingContext();
            vehicleDetails_ = new nds.core.vehicle.VehicleDetails.ZserioPackingContext();
            vehiclePose_ = new nds.core.vehicle.VehiclePose.ZserioPackingContext();
            driverProfile_ = new nds.routing.types.DriverProfile.ZserioPackingContext();
            numAlternativeRoutes_ = new zserio.runtime.array.DeltaContext();
            departureTime_ = new nds.core.types.TimeWithZone.ZserioPackingContext();
            arrivalTime_ = new nds.core.types.TimeWithZone.ZserioPackingContext();
            coveredPath_ = new nds.core.location.RoadLocationPath.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLanguage()
        {
            return language_;
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.routing.route.Waypoint.ZserioPackingContext getOrigin()
        {
            return origin_;
        }

        public nds.routing.route.Waypoint.ZserioPackingContext getDestination()
        {
            return destination_;
        }

        public nds.core.vehicle.VehicleDetails.ZserioPackingContext getVehicleDetails()
        {
            return vehicleDetails_;
        }

        public nds.core.vehicle.VehiclePose.ZserioPackingContext getVehiclePose()
        {
            return vehiclePose_;
        }

        public nds.routing.types.DriverProfile.ZserioPackingContext getDriverProfile()
        {
            return driverProfile_;
        }

        public zserio.runtime.array.DeltaContext getNumAlternativeRoutes()
        {
            return numAlternativeRoutes_;
        }

        public nds.core.types.TimeWithZone.ZserioPackingContext getDepartureTime()
        {
            return departureTime_;
        }

        public nds.core.types.TimeWithZone.ZserioPackingContext getArrivalTime()
        {
            return arrivalTime_;
        }

        public nds.core.location.RoadLocationPath.ZserioPackingContext getCoveredPath()
        {
            return coveredPath_;
        }

        private zserio.runtime.array.DeltaContext language_;
        private zserio.runtime.array.DeltaContext type_;
        private nds.routing.route.Waypoint.ZserioPackingContext origin_;
        private nds.routing.route.Waypoint.ZserioPackingContext destination_;
        private nds.core.vehicle.VehicleDetails.ZserioPackingContext vehicleDetails_;
        private nds.core.vehicle.VehiclePose.ZserioPackingContext vehiclePose_;
        private nds.routing.types.DriverProfile.ZserioPackingContext driverProfile_;
        private zserio.runtime.array.DeltaContext numAlternativeRoutes_;
        private nds.core.types.TimeWithZone.ZserioPackingContext departureTime_;
        private nds.core.types.TimeWithZone.ZserioPackingContext arrivalTime_;
        private nds.core.location.RoadLocationPath.ZserioPackingContext coveredPath_;
    };

    public RoutingServiceRequest()
    {
    }

    public RoutingServiceRequest(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoutingServiceRequest(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoutingServiceRequest(
            boolean optimizeViaPoints_,
            short language_,
            nds.routing.types.RouteType type_,
            nds.routing.route.Waypoint origin_,
            nds.routing.route.Waypoint destination_,
            nds.routing.route.Waypoint[] viaPoints_,
            nds.routing.route.RouteOptions[] routeOptions_,
            nds.core.vehicle.VehicleDetails vehicleDetails_,
            nds.core.vehicle.VehiclePose vehiclePose_,
            nds.routing.types.DriverProfile driverProfile_,
            short numAlternativeRoutes_,
            nds.core.types.TimeWithZone departureTime_,
            nds.core.types.TimeWithZone arrivalTime_,
            nds.core.location.RoadLocationPath coveredPath_,
            zserio.runtime.io.BitBuffer customRequestData_)
    {
        setOptimizeViaPoints(optimizeViaPoints_);
        setLanguage(language_);
        setType(type_);
        setOrigin(origin_);
        setDestination(destination_);
        setViaPoints(viaPoints_);
        setRouteOptions(routeOptions_);
        setVehicleDetails(vehicleDetails_);
        setVehiclePose(vehiclePose_);
        setDriverProfile(driverProfile_);
        setNumAlternativeRoutes(numAlternativeRoutes_);
        setDepartureTime(departureTime_);
        setArrivalTime(arrivalTime_);
        setCoveredPath(coveredPath_);
        setCustomRequestData(customRequestData_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLanguage().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        type_.initPackingContext(zserioContext.getType());
        origin_.initPackingContext(zserioContext.getOrigin());
        destination_.initPackingContext(zserioContext.getDestination());
        if (isVehicleDetailsUsed())
        {
            vehicleDetails_.initPackingContext(zserioContext.getVehicleDetails());
        }
        if (isVehiclePoseUsed())
        {
            vehiclePose_.initPackingContext(zserioContext.getVehiclePose());
        }
        if (isDriverProfileUsed())
        {
            driverProfile_.initPackingContext(zserioContext.getDriverProfile());
        }
        zserioContext.getNumAlternativeRoutes().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numAlternativeRoutes_));
        if (isDepartureTimeUsed())
        {
            departureTime_.initPackingContext(zserioContext.getDepartureTime());
        }
        if (isArrivalTimeUsed())
        {
            arrivalTime_.initPackingContext(zserioContext.getArrivalTime());
        }
        if (isCoveredPathUsed())
        {
            coveredPath_.initPackingContext(zserioContext.getCoveredPath());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(language_);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += origin_.bitSizeOf(endBitPosition);
        endBitPosition += destination_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isViaPointsUsed())
        {
            endBitPosition += viaPoints_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isRouteOptionsUsed())
        {
            endBitPosition += routeOptions_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehicleDetailsUsed())
        {
            endBitPosition += vehicleDetails_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition += vehiclePose_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition += driverProfile_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 8;
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition += departureTime_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition += arrivalTime_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isCoveredPathUsed())
        {
            endBitPosition += coveredPath_.bitSizeOf(endBitPosition);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customRequestData_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserioContext.getLanguage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += origin_.bitSizeOf(zserioContext.getOrigin(), endBitPosition);
        endBitPosition += destination_.bitSizeOf(zserioContext.getDestination(), endBitPosition);
        endBitPosition += 1;
        if (isViaPointsUsed())
        {
            endBitPosition += viaPoints_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isRouteOptionsUsed())
        {
            endBitPosition += routeOptions_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehicleDetailsUsed())
        {
            endBitPosition += vehicleDetails_.bitSizeOf(zserioContext.getVehicleDetails(), endBitPosition);
        }
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition += vehiclePose_.bitSizeOf(zserioContext.getVehiclePose(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition += driverProfile_.bitSizeOf(zserioContext.getDriverProfile(), endBitPosition);
        }
        endBitPosition += zserioContext.getNumAlternativeRoutes().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numAlternativeRoutes_));
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition += departureTime_.bitSizeOf(zserioContext.getDepartureTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition += arrivalTime_.bitSizeOf(zserioContext.getArrivalTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isCoveredPathUsed())
        {
            endBitPosition += coveredPath_.bitSizeOf(zserioContext.getCoveredPath(), endBitPosition);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customRequestData_);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getOptimizeViaPoints()
    {
        return optimizeViaPoints_;
    }

    public void setOptimizeViaPoints(boolean optimizeViaPoints_)
    {
        this.optimizeViaPoints_ = optimizeViaPoints_;
    }

    public short getLanguage()
    {
        return language_;
    }

    public void setLanguage(short language_)
    {
        this.language_ = language_;
    }

    public nds.routing.types.RouteType getType()
    {
        return type_;
    }

    public void setType(nds.routing.types.RouteType type_)
    {
        this.type_ = type_;
    }

    public nds.routing.route.Waypoint getOrigin()
    {
        return origin_;
    }

    public void setOrigin(nds.routing.route.Waypoint origin_)
    {
        this.origin_ = origin_;
    }

    public nds.routing.route.Waypoint getDestination()
    {
        return destination_;
    }

    public void setDestination(nds.routing.route.Waypoint destination_)
    {
        this.destination_ = destination_;
    }

    public nds.routing.route.Waypoint[] getViaPoints()
    {
        return (viaPoints_ == null) ? null : viaPoints_.getRawArray();
    }

    public void setViaPoints(nds.routing.route.Waypoint[] viaPoints_)
    {
        if (viaPoints_ == null)
        {
            this.viaPoints_ = null;
        }
        else
        {
            this.viaPoints_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Waypoint.class, viaPoints_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Waypoint>(new ZserioElementFactory_viaPoints()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isViaPointsUsed()
    {
        return isViaPointsSet();
    }

    public boolean isViaPointsSet()
    {
        return (viaPoints_ != null);
    }

    public void resetViaPoints()
    {
        this.viaPoints_ = null;
    }

    public nds.routing.route.RouteOptions[] getRouteOptions()
    {
        return (routeOptions_ == null) ? null : routeOptions_.getRawArray();
    }

    public void setRouteOptions(nds.routing.route.RouteOptions[] routeOptions_)
    {
        if (routeOptions_ == null)
        {
            this.routeOptions_ = null;
        }
        else
        {
            this.routeOptions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class, routeOptions_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_routeOptions()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isRouteOptionsUsed()
    {
        return isRouteOptionsSet();
    }

    public boolean isRouteOptionsSet()
    {
        return (routeOptions_ != null);
    }

    public void resetRouteOptions()
    {
        this.routeOptions_ = null;
    }

    public nds.core.vehicle.VehicleDetails getVehicleDetails()
    {
        return vehicleDetails_;
    }

    public void setVehicleDetails(nds.core.vehicle.VehicleDetails vehicleDetails_)
    {
        this.vehicleDetails_ = vehicleDetails_;
    }

    public boolean isVehicleDetailsUsed()
    {
        return isVehicleDetailsSet();
    }

    public boolean isVehicleDetailsSet()
    {
        return (vehicleDetails_ != null);
    }

    public void resetVehicleDetails()
    {
        this.vehicleDetails_ = null;
    }

    public nds.core.vehicle.VehiclePose getVehiclePose()
    {
        return vehiclePose_;
    }

    public void setVehiclePose(nds.core.vehicle.VehiclePose vehiclePose_)
    {
        this.vehiclePose_ = vehiclePose_;
    }

    public boolean isVehiclePoseUsed()
    {
        return isVehiclePoseSet();
    }

    public boolean isVehiclePoseSet()
    {
        return (vehiclePose_ != null);
    }

    public void resetVehiclePose()
    {
        this.vehiclePose_ = null;
    }

    public nds.routing.types.DriverProfile getDriverProfile()
    {
        return driverProfile_;
    }

    public void setDriverProfile(nds.routing.types.DriverProfile driverProfile_)
    {
        this.driverProfile_ = driverProfile_;
    }

    public boolean isDriverProfileUsed()
    {
        return isDriverProfileSet();
    }

    public boolean isDriverProfileSet()
    {
        return (driverProfile_ != null);
    }

    public void resetDriverProfile()
    {
        this.driverProfile_ = null;
    }

    public short getNumAlternativeRoutes()
    {
        return numAlternativeRoutes_;
    }

    public void setNumAlternativeRoutes(short numAlternativeRoutes_)
    {
        this.numAlternativeRoutes_ = numAlternativeRoutes_;
    }

    public nds.core.types.TimeWithZone getDepartureTime()
    {
        return departureTime_;
    }

    public void setDepartureTime(nds.core.types.TimeWithZone departureTime_)
    {
        this.departureTime_ = departureTime_;
    }

    public boolean isDepartureTimeUsed()
    {
        return isDepartureTimeSet();
    }

    public boolean isDepartureTimeSet()
    {
        return (departureTime_ != null);
    }

    public void resetDepartureTime()
    {
        this.departureTime_ = null;
    }

    public nds.core.types.TimeWithZone getArrivalTime()
    {
        return arrivalTime_;
    }

    public void setArrivalTime(nds.core.types.TimeWithZone arrivalTime_)
    {
        this.arrivalTime_ = arrivalTime_;
    }

    public boolean isArrivalTimeUsed()
    {
        return isArrivalTimeSet();
    }

    public boolean isArrivalTimeSet()
    {
        return (arrivalTime_ != null);
    }

    public void resetArrivalTime()
    {
        this.arrivalTime_ = null;
    }

    public nds.core.location.RoadLocationPath getCoveredPath()
    {
        return coveredPath_;
    }

    public void setCoveredPath(nds.core.location.RoadLocationPath coveredPath_)
    {
        this.coveredPath_ = coveredPath_;
    }

    public boolean isCoveredPathUsed()
    {
        return isCoveredPathSet();
    }

    public boolean isCoveredPathSet()
    {
        return (coveredPath_ != null);
    }

    public void resetCoveredPath()
    {
        this.coveredPath_ = null;
    }

    public zserio.runtime.io.BitBuffer getCustomRequestData()
    {
        return customRequestData_;
    }

    public void setCustomRequestData(zserio.runtime.io.BitBuffer customRequestData_)
    {
        this.customRequestData_ = customRequestData_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoutingServiceRequest)
        {
            final RoutingServiceRequest that = (RoutingServiceRequest)obj;

            return
                    optimizeViaPoints_ == that.optimizeViaPoints_ &&
                    language_ == that.language_ &&
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((origin_ == null) ? that.origin_ == null : origin_.equals(that.origin_)) &&
                    ((destination_ == null) ? that.destination_ == null : destination_.equals(that.destination_)) &&
                    ((!isViaPointsUsed()) ? !that.isViaPointsUsed() :
                        ((viaPoints_ == null) ? that.viaPoints_ == null : viaPoints_.equals(that.viaPoints_))) &&
                    ((!isRouteOptionsUsed()) ? !that.isRouteOptionsUsed() :
                        ((routeOptions_ == null) ? that.routeOptions_ == null : routeOptions_.equals(that.routeOptions_))) &&
                    ((!isVehicleDetailsUsed()) ? !that.isVehicleDetailsUsed() :
                        ((vehicleDetails_ == null) ? that.vehicleDetails_ == null : vehicleDetails_.equals(that.vehicleDetails_))) &&
                    ((!isVehiclePoseUsed()) ? !that.isVehiclePoseUsed() :
                        ((vehiclePose_ == null) ? that.vehiclePose_ == null : vehiclePose_.equals(that.vehiclePose_))) &&
                    ((!isDriverProfileUsed()) ? !that.isDriverProfileUsed() :
                        ((driverProfile_ == null) ? that.driverProfile_ == null : driverProfile_.equals(that.driverProfile_))) &&
                    numAlternativeRoutes_ == that.numAlternativeRoutes_ &&
                    ((!isDepartureTimeUsed()) ? !that.isDepartureTimeUsed() :
                        ((departureTime_ == null) ? that.departureTime_ == null : departureTime_.equals(that.departureTime_))) &&
                    ((!isArrivalTimeUsed()) ? !that.isArrivalTimeUsed() :
                        ((arrivalTime_ == null) ? that.arrivalTime_ == null : arrivalTime_.equals(that.arrivalTime_))) &&
                    ((!isCoveredPathUsed()) ? !that.isCoveredPathUsed() :
                        ((coveredPath_ == null) ? that.coveredPath_ == null : coveredPath_.equals(that.coveredPath_))) &&
                    ((customRequestData_ == null) ? that.customRequestData_ == null : customRequestData_.equals(that.customRequestData_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, optimizeViaPoints_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, language_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, origin_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, destination_);
        if (isViaPointsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, viaPoints_);
        if (isRouteOptionsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routeOptions_);
        if (isVehicleDetailsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleDetails_);
        if (isVehiclePoseUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehiclePose_);
        if (isDriverProfileUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, driverProfile_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numAlternativeRoutes_);
        if (isDepartureTimeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, departureTime_);
        if (isArrivalTimeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, arrivalTime_);
        if (isCoveredPathUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, coveredPath_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, customRequestData_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        optimizeViaPoints_ = in.readBool();

        language_ = in.readVarUInt16();

        type_ = nds.routing.types.RouteType.readEnum(in);

        origin_ = new nds.routing.route.Waypoint(in);

        destination_ = new nds.routing.route.Waypoint(in);

        if (in.readBool())
        {
            viaPoints_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Waypoint.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Waypoint>(new ZserioElementFactory_viaPoints()),
                    zserio.runtime.array.ArrayType.AUTO);
            viaPoints_.read(in);
        }

        if (in.readBool())
        {
            routeOptions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_routeOptions()),
                    zserio.runtime.array.ArrayType.AUTO);
            routeOptions_.read(in);
        }

        if (in.readBool())
        {
            vehicleDetails_ = new nds.core.vehicle.VehicleDetails(in);
        }

        if (in.readBool())
        {
            vehiclePose_ = new nds.core.vehicle.VehiclePose(in);
        }

        if (in.readBool())
        {
            driverProfile_ = new nds.routing.types.DriverProfile(in);
        }

        numAlternativeRoutes_ = in.readUnsignedByte();

        if (in.readBool())
        {
            departureTime_ = new nds.core.types.TimeWithZone(in);
        }

        if (in.readBool())
        {
            arrivalTime_ = new nds.core.types.TimeWithZone(in);
        }

        if (in.readBool())
        {
            coveredPath_ = new nds.core.location.RoadLocationPath(in);
        }

        in.alignTo(8);
        customRequestData_ = in.readBitBuffer();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        optimizeViaPoints_ = in.readBool();

        language_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getLanguage().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        type_ = nds.routing.types.RouteType.readEnum(zserioContext.getType(), in);

        origin_ = new nds.routing.route.Waypoint(zserioContext.getOrigin(), in);

        destination_ = new nds.routing.route.Waypoint(zserioContext.getDestination(), in);

        if (in.readBool())
        {
            viaPoints_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.Waypoint.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.Waypoint>(new ZserioElementFactory_viaPoints()),
                    zserio.runtime.array.ArrayType.AUTO);
            viaPoints_.readPacked(in);
        }

        if (in.readBool())
        {
            routeOptions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_routeOptions()),
                    zserio.runtime.array.ArrayType.AUTO);
            routeOptions_.readPacked(in);
        }

        if (in.readBool())
        {
            vehicleDetails_ = new nds.core.vehicle.VehicleDetails(zserioContext.getVehicleDetails(), in);
        }

        if (in.readBool())
        {
            vehiclePose_ = new nds.core.vehicle.VehiclePose(zserioContext.getVehiclePose(), in);
        }

        if (in.readBool())
        {
            driverProfile_ = new nds.routing.types.DriverProfile(zserioContext.getDriverProfile(), in);
        }

        numAlternativeRoutes_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumAlternativeRoutes().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        if (in.readBool())
        {
            departureTime_ = new nds.core.types.TimeWithZone(zserioContext.getDepartureTime(), in);
        }

        if (in.readBool())
        {
            arrivalTime_ = new nds.core.types.TimeWithZone(zserioContext.getArrivalTime(), in);
        }

        if (in.readBool())
        {
            coveredPath_ = new nds.core.location.RoadLocationPath(zserioContext.getCoveredPath(), in);
        }

        in.alignTo(8);
        customRequestData_ = in.readBitBuffer();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(language_);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition = origin_.initializeOffsets(endBitPosition);
        endBitPosition = destination_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isViaPointsUsed())
        {
            endBitPosition = viaPoints_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isRouteOptionsUsed())
        {
            endBitPosition = routeOptions_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehicleDetailsUsed())
        {
            endBitPosition = vehicleDetails_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition = vehiclePose_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition = driverProfile_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 8;
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition = departureTime_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition = arrivalTime_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isCoveredPathUsed())
        {
            endBitPosition = coveredPath_.initializeOffsets(endBitPosition);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customRequestData_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserioContext.getLanguage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));
        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = origin_.initializeOffsets(zserioContext.getOrigin(), endBitPosition);
        endBitPosition = destination_.initializeOffsets(zserioContext.getDestination(), endBitPosition);
        endBitPosition += 1;
        if (isViaPointsUsed())
        {
            endBitPosition = viaPoints_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isRouteOptionsUsed())
        {
            endBitPosition = routeOptions_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition += 1;
        if (isVehicleDetailsUsed())
        {
            endBitPosition = vehicleDetails_.initializeOffsets(zserioContext.getVehicleDetails(), endBitPosition);
        }
        endBitPosition += 1;
        if (isVehiclePoseUsed())
        {
            endBitPosition = vehiclePose_.initializeOffsets(zserioContext.getVehiclePose(), endBitPosition);
        }
        endBitPosition += 1;
        if (isDriverProfileUsed())
        {
            endBitPosition = driverProfile_.initializeOffsets(zserioContext.getDriverProfile(), endBitPosition);
        }
        endBitPosition += zserioContext.getNumAlternativeRoutes().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numAlternativeRoutes_));
        endBitPosition += 1;
        if (isDepartureTimeUsed())
        {
            endBitPosition = departureTime_.initializeOffsets(zserioContext.getDepartureTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isArrivalTimeUsed())
        {
            endBitPosition = arrivalTime_.initializeOffsets(zserioContext.getArrivalTime(), endBitPosition);
        }
        endBitPosition += 1;
        if (isCoveredPathUsed())
        {
            endBitPosition = coveredPath_.initializeOffsets(zserioContext.getCoveredPath(), endBitPosition);
        }
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customRequestData_);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(optimizeViaPoints_);

        out.writeVarUInt16(language_);

        type_.write(out);

        origin_.write(out);

        destination_.write(out);

        if (isViaPointsUsed())
        {
            out.writeBool(true);
            viaPoints_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRouteOptionsUsed())
        {
            out.writeBool(true);
            routeOptions_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVehicleDetailsUsed())
        {
            out.writeBool(true);
            vehicleDetails_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVehiclePoseUsed())
        {
            out.writeBool(true);
            vehiclePose_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDriverProfileUsed())
        {
            out.writeBool(true);
            driverProfile_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        out.writeUnsignedByte(numAlternativeRoutes_);

        if (isDepartureTimeUsed())
        {
            out.writeBool(true);
            departureTime_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isArrivalTimeUsed())
        {
            out.writeBool(true);
            arrivalTime_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isCoveredPathUsed())
        {
            out.writeBool(true);
            coveredPath_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        out.alignTo(8);
        out.writeBitBuffer(customRequestData_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(optimizeViaPoints_);

        zserioContext.getLanguage().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(language_));

        type_.write(zserioContext.getType(), out);

        origin_.write(zserioContext.getOrigin(), out);

        destination_.write(zserioContext.getDestination(), out);

        if (isViaPointsUsed())
        {
            out.writeBool(true);
            viaPoints_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isRouteOptionsUsed())
        {
            out.writeBool(true);
            routeOptions_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVehicleDetailsUsed())
        {
            out.writeBool(true);
            vehicleDetails_.write(zserioContext.getVehicleDetails(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isVehiclePoseUsed())
        {
            out.writeBool(true);
            vehiclePose_.write(zserioContext.getVehiclePose(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isDriverProfileUsed())
        {
            out.writeBool(true);
            driverProfile_.write(zserioContext.getDriverProfile(), out);
        }
        else
        {
            out.writeBool(false);
        }

        zserioContext.getNumAlternativeRoutes().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numAlternativeRoutes_));

        if (isDepartureTimeUsed())
        {
            out.writeBool(true);
            departureTime_.write(zserioContext.getDepartureTime(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isArrivalTimeUsed())
        {
            out.writeBool(true);
            arrivalTime_.write(zserioContext.getArrivalTime(), out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isCoveredPathUsed())
        {
            out.writeBool(true);
            coveredPath_.write(zserioContext.getCoveredPath(), out);
        }
        else
        {
            out.writeBool(false);
        }

        out.alignTo(8);
        out.writeBitBuffer(customRequestData_);
    }

    private static final class ZserioElementFactory_viaPoints implements zserio.runtime.array.PackableElementFactory<nds.routing.route.Waypoint>
    {
        @Override
        public nds.routing.route.Waypoint create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.Waypoint(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.Waypoint.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.Waypoint create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.Waypoint(context, in);
        }
    }

    private static final class ZserioElementFactory_routeOptions implements zserio.runtime.array.PackableElementFactory<nds.routing.route.RouteOptions>
    {
        @Override
        public nds.routing.route.RouteOptions create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.RouteOptions(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.RouteOptions.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.RouteOptions create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.RouteOptions(context, in);
        }
    }

    private boolean optimizeViaPoints_;
    private short language_;
    private nds.routing.types.RouteType type_;
    private nds.routing.route.Waypoint origin_;
    private nds.routing.route.Waypoint destination_;
    private zserio.runtime.array.Array viaPoints_;
    private zserio.runtime.array.Array routeOptions_;
    private nds.core.vehicle.VehicleDetails vehicleDetails_;
    private nds.core.vehicle.VehiclePose vehiclePose_;
    private nds.routing.types.DriverProfile driverProfile_;
    private short numAlternativeRoutes_;
    private nds.core.types.TimeWithZone departureTime_;
    private nds.core.types.TimeWithZone arrivalTime_;
    private nds.core.location.RoadLocationPath coveredPath_;
    private zserio.runtime.io.BitBuffer customRequestData_;
}
