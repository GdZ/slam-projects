/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.metadata;

public class RoutingRegistryMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            routingServiceType_ = new zserio.runtime.array.DeltaContext();
            capabilities_ = new nds.routing.metadata.RoutingServiceCapabilities.ZserioPackingContext();
            availableLanguages_ = new nds.core.language.AvailableLanguages.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getRoutingServiceType()
        {
            return routingServiceType_;
        }

        public nds.routing.metadata.RoutingServiceCapabilities.ZserioPackingContext getCapabilities()
        {
            return capabilities_;
        }

        public nds.core.language.AvailableLanguages.ZserioPackingContext getAvailableLanguages()
        {
            return availableLanguages_;
        }

        private zserio.runtime.array.DeltaContext routingServiceType_;
        private nds.routing.metadata.RoutingServiceCapabilities.ZserioPackingContext capabilities_;
        private nds.core.language.AvailableLanguages.ZserioPackingContext availableLanguages_;
    };

    public RoutingRegistryMetadata()
    {
    }

    public RoutingRegistryMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoutingRegistryMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoutingRegistryMetadata(
            nds.routing.metadata.RoutingServiceType routingServiceType_,
            nds.routing.metadata.RoutingServiceCapabilities capabilities_,
            nds.core.language.AvailableLanguages availableLanguages_)
    {
        setRoutingServiceType(routingServiceType_);
        setCapabilities(capabilities_);
        setAvailableLanguages(availableLanguages_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        routingServiceType_.initPackingContext(zserioContext.getRoutingServiceType());
        capabilities_.initPackingContext(zserioContext.getCapabilities());
        availableLanguages_.initPackingContext(zserioContext.getAvailableLanguages());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += routingServiceType_.bitSizeOf(endBitPosition);
        endBitPosition += capabilities_.bitSizeOf(endBitPosition);
        endBitPosition += availableLanguages_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += routingServiceType_.bitSizeOf(zserioContext.getRoutingServiceType(), endBitPosition);
        endBitPosition += capabilities_.bitSizeOf(zserioContext.getCapabilities(), endBitPosition);
        endBitPosition += availableLanguages_.bitSizeOf(zserioContext.getAvailableLanguages(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.metadata.RoutingServiceType getRoutingServiceType()
    {
        return routingServiceType_;
    }

    public void setRoutingServiceType(nds.routing.metadata.RoutingServiceType routingServiceType_)
    {
        this.routingServiceType_ = routingServiceType_;
    }

    public nds.routing.metadata.RoutingServiceCapabilities getCapabilities()
    {
        return capabilities_;
    }

    public void setCapabilities(nds.routing.metadata.RoutingServiceCapabilities capabilities_)
    {
        this.capabilities_ = capabilities_;
    }

    public nds.core.language.AvailableLanguages getAvailableLanguages()
    {
        return availableLanguages_;
    }

    public void setAvailableLanguages(nds.core.language.AvailableLanguages availableLanguages_)
    {
        this.availableLanguages_ = availableLanguages_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoutingRegistryMetadata)
        {
            final RoutingRegistryMetadata that = (RoutingRegistryMetadata)obj;

            return
                    ((routingServiceType_ == null) ? that.routingServiceType_ == null : routingServiceType_.getValue() == that.routingServiceType_.getValue()) &&
                    ((capabilities_ == null) ? that.capabilities_ == null : capabilities_.equals(that.capabilities_)) &&
                    ((availableLanguages_ == null) ? that.availableLanguages_ == null : availableLanguages_.equals(that.availableLanguages_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingServiceType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, capabilities_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableLanguages_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        routingServiceType_ = nds.routing.metadata.RoutingServiceType.readEnum(in);

        capabilities_ = new nds.routing.metadata.RoutingServiceCapabilities(in, getRoutingServiceType());

        availableLanguages_ = new nds.core.language.AvailableLanguages(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        routingServiceType_ = nds.routing.metadata.RoutingServiceType.readEnum(zserioContext.getRoutingServiceType(), in);

        capabilities_ = new nds.routing.metadata.RoutingServiceCapabilities(zserioContext.getCapabilities(), in, getRoutingServiceType());

        availableLanguages_ = new nds.core.language.AvailableLanguages(zserioContext.getAvailableLanguages(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += routingServiceType_.bitSizeOf(endBitPosition);
        endBitPosition = capabilities_.initializeOffsets(endBitPosition);
        endBitPosition = availableLanguages_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = routingServiceType_.initializeOffsets(zserioContext.getRoutingServiceType(), endBitPosition);
        endBitPosition = capabilities_.initializeOffsets(zserioContext.getCapabilities(), endBitPosition);
        endBitPosition = availableLanguages_.initializeOffsets(zserioContext.getAvailableLanguages(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        routingServiceType_.write(out);

        // check parameters
        if (capabilities_.getType() != (getRoutingServiceType()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field RoutingRegistryMetadata.capabilities!");
        }
        capabilities_.write(out);

        availableLanguages_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        routingServiceType_.write(zserioContext.getRoutingServiceType(), out);

        capabilities_.write(zserioContext.getCapabilities(), out);

        availableLanguages_.write(zserioContext.getAvailableLanguages(), out);
    }

    private nds.routing.metadata.RoutingServiceType routingServiceType_;
    private nds.routing.metadata.RoutingServiceCapabilities capabilities_;
    private nds.core.language.AvailableLanguages availableLanguages_;
}
