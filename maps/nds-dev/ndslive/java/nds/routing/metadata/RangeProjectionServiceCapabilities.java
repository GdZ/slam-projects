/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.metadata;

public class RangeProjectionServiceCapabilities implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            implementedMethods_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getImplementedMethods()
        {
            return implementedMethods_;
        }

        private zserio.runtime.array.DeltaContext implementedMethods_;
    };

    public RangeProjectionServiceCapabilities()
    {
    }

    public RangeProjectionServiceCapabilities(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RangeProjectionServiceCapabilities(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RangeProjectionServiceCapabilities(
            nds.routing.metadata.RangeProjectionServiceMethods implementedMethods_,
            nds.routing.types.RangeProjectionType[] supportedRangeProjectionTypes_)
    {
        setImplementedMethods(implementedMethods_);
        setSupportedRangeProjectionTypes(supportedRangeProjectionTypes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_.initPackingContext(zserioContext.getImplementedMethods());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(endBitPosition);
        endBitPosition += supportedRangeProjectionTypes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(zserioContext.getImplementedMethods(), endBitPosition);
        endBitPosition += supportedRangeProjectionTypes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.metadata.RangeProjectionServiceMethods getImplementedMethods()
    {
        return implementedMethods_;
    }

    public void setImplementedMethods(nds.routing.metadata.RangeProjectionServiceMethods implementedMethods_)
    {
        this.implementedMethods_ = implementedMethods_;
    }

    public nds.routing.types.RangeProjectionType[] getSupportedRangeProjectionTypes()
    {
        return (supportedRangeProjectionTypes_ == null) ? null : supportedRangeProjectionTypes_.getRawArray();
    }

    public void setSupportedRangeProjectionTypes(nds.routing.types.RangeProjectionType[] supportedRangeProjectionTypes_)
    {
        this.supportedRangeProjectionTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RangeProjectionType.class, supportedRangeProjectionTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RangeProjectionType>(new ZserioElementFactory_supportedRangeProjectionTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RangeProjectionServiceCapabilities)
        {
            final RangeProjectionServiceCapabilities that = (RangeProjectionServiceCapabilities)obj;

            return
                    ((implementedMethods_ == null) ? that.implementedMethods_ == null : implementedMethods_.equals(that.implementedMethods_)) &&
                    ((supportedRangeProjectionTypes_ == null) ? that.supportedRangeProjectionTypes_ == null : supportedRangeProjectionTypes_.equals(that.supportedRangeProjectionTypes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, implementedMethods_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedRangeProjectionTypes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        implementedMethods_ = new nds.routing.metadata.RangeProjectionServiceMethods(in);

        supportedRangeProjectionTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RangeProjectionType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RangeProjectionType>(new ZserioElementFactory_supportedRangeProjectionTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRangeProjectionTypes_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_ = new nds.routing.metadata.RangeProjectionServiceMethods(zserioContext.getImplementedMethods(), in);

        supportedRangeProjectionTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.types.RangeProjectionType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RangeProjectionType>(new ZserioElementFactory_supportedRangeProjectionTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRangeProjectionTypes_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(endBitPosition);
        endBitPosition = supportedRangeProjectionTypes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = implementedMethods_.initializeOffsets(zserioContext.getImplementedMethods(), endBitPosition);
        endBitPosition = supportedRangeProjectionTypes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        implementedMethods_.write(out);

        supportedRangeProjectionTypes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_.write(zserioContext.getImplementedMethods(), out);

        supportedRangeProjectionTypes_.writePacked(out);
    }

    private static final class ZserioElementFactory_supportedRangeProjectionTypes implements zserio.runtime.array.PackableElementFactory<nds.routing.types.RangeProjectionType>
    {
        @Override
        public nds.routing.types.RangeProjectionType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.types.RangeProjectionType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.routing.types.RangeProjectionType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.types.RangeProjectionType(context, in);
        }
    }

    private nds.routing.metadata.RangeProjectionServiceMethods implementedMethods_;
    private zserio.runtime.array.Array supportedRangeProjectionTypes_;
}
