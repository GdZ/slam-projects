/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routing.metadata;

public class RouteServiceCapabilities implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            implementedMethods_ = new zserio.runtime.array.DeltaContext();
            supportedVehicleDetails_ = new zserio.runtime.array.DeltaContext();
            supportedDriverProfileDetails_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getImplementedMethods()
        {
            return implementedMethods_;
        }

        public zserio.runtime.array.DeltaContext getSupportedVehicleDetails()
        {
            return supportedVehicleDetails_;
        }

        public zserio.runtime.array.DeltaContext getSupportedDriverProfileDetails()
        {
            return supportedDriverProfileDetails_;
        }

        private zserio.runtime.array.DeltaContext implementedMethods_;
        private zserio.runtime.array.DeltaContext supportedVehicleDetails_;
        private zserio.runtime.array.DeltaContext supportedDriverProfileDetails_;
    };

    public RouteServiceCapabilities()
    {
    }

    public RouteServiceCapabilities(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RouteServiceCapabilities(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RouteServiceCapabilities(
            nds.routing.metadata.RouteServiceMethods implementedMethods_,
            nds.routing.types.RouteType[] supportedRouteTypes_,
            nds.routing.route.RouteOptions[] supportedRouteOptions_,
            short[] supportedLanguages_,
            nds.routing.metadata.SupportedVehicleDetails supportedVehicleDetails_,
            nds.routing.metadata.SupportedDriverProfileDetails supportedDriverProfileDetails_,
            boolean providesAlternativeRoutes_,
            boolean considersTimes_,
            boolean usesCustomData_,
            zserio.runtime.io.BitBuffer customDataMetadata_)
    {
        setImplementedMethods(implementedMethods_);
        setSupportedRouteTypes(supportedRouteTypes_);
        setSupportedRouteOptions(supportedRouteOptions_);
        setSupportedLanguages(supportedLanguages_);
        setSupportedVehicleDetails(supportedVehicleDetails_);
        setSupportedDriverProfileDetails(supportedDriverProfileDetails_);
        setProvidesAlternativeRoutes(providesAlternativeRoutes_);
        setConsidersTimes(considersTimes_);
        setUsesCustomData(usesCustomData_);
        setCustomDataMetadata(customDataMetadata_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_.initPackingContext(zserioContext.getImplementedMethods());
        supportedVehicleDetails_.initPackingContext(zserioContext.getSupportedVehicleDetails());
        supportedDriverProfileDetails_.initPackingContext(zserioContext.getSupportedDriverProfileDetails());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(endBitPosition);
        endBitPosition += supportedRouteTypes_.bitSizeOf(endBitPosition);
        endBitPosition += supportedRouteOptions_.bitSizeOf(endBitPosition);
        endBitPosition += supportedLanguages_.bitSizeOf(endBitPosition);
        endBitPosition += supportedVehicleDetails_.bitSizeOf(endBitPosition);
        endBitPosition += supportedDriverProfileDetails_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCustomDataMetadataUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customDataMetadata_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(zserioContext.getImplementedMethods(), endBitPosition);
        endBitPosition += supportedRouteTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += supportedRouteOptions_.bitSizeOfPacked(endBitPosition);
        endBitPosition += supportedLanguages_.bitSizeOfPacked(endBitPosition);
        endBitPosition += supportedVehicleDetails_.bitSizeOf(zserioContext.getSupportedVehicleDetails(), endBitPosition);
        endBitPosition += supportedDriverProfileDetails_.bitSizeOf(zserioContext.getSupportedDriverProfileDetails(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCustomDataMetadataUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customDataMetadata_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routing.metadata.RouteServiceMethods getImplementedMethods()
    {
        return implementedMethods_;
    }

    public void setImplementedMethods(nds.routing.metadata.RouteServiceMethods implementedMethods_)
    {
        this.implementedMethods_ = implementedMethods_;
    }

    public nds.routing.types.RouteType[] getSupportedRouteTypes()
    {
        return (supportedRouteTypes_ == null) ? null : supportedRouteTypes_.getRawArray();
    }

    public void setSupportedRouteTypes(nds.routing.types.RouteType[] supportedRouteTypes_)
    {
        this.supportedRouteTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.routing.types.RouteType.class, supportedRouteTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteType>(new ZserioElementFactory_supportedRouteTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.routing.route.RouteOptions[] getSupportedRouteOptions()
    {
        return (supportedRouteOptions_ == null) ? null : supportedRouteOptions_.getRawArray();
    }

    public void setSupportedRouteOptions(nds.routing.route.RouteOptions[] supportedRouteOptions_)
    {
        this.supportedRouteOptions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class, supportedRouteOptions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_supportedRouteOptions()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public short[] getSupportedLanguages()
    {
        return (supportedLanguages_ == null) ? null : supportedLanguages_.getRawArray();
    }

    public void setSupportedLanguages(short[] supportedLanguages_)
    {
        this.supportedLanguages_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(supportedLanguages_),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.routing.metadata.SupportedVehicleDetails getSupportedVehicleDetails()
    {
        return supportedVehicleDetails_;
    }

    public void setSupportedVehicleDetails(nds.routing.metadata.SupportedVehicleDetails supportedVehicleDetails_)
    {
        this.supportedVehicleDetails_ = supportedVehicleDetails_;
    }

    public nds.routing.metadata.SupportedDriverProfileDetails getSupportedDriverProfileDetails()
    {
        return supportedDriverProfileDetails_;
    }

    public void setSupportedDriverProfileDetails(nds.routing.metadata.SupportedDriverProfileDetails supportedDriverProfileDetails_)
    {
        this.supportedDriverProfileDetails_ = supportedDriverProfileDetails_;
    }

    public boolean getProvidesAlternativeRoutes()
    {
        return providesAlternativeRoutes_;
    }

    public void setProvidesAlternativeRoutes(boolean providesAlternativeRoutes_)
    {
        this.providesAlternativeRoutes_ = providesAlternativeRoutes_;
    }

    public boolean getConsidersTimes()
    {
        return considersTimes_;
    }

    public void setConsidersTimes(boolean considersTimes_)
    {
        this.considersTimes_ = considersTimes_;
    }

    public boolean getUsesCustomData()
    {
        return usesCustomData_;
    }

    public void setUsesCustomData(boolean usesCustomData_)
    {
        this.usesCustomData_ = usesCustomData_;
    }

    public zserio.runtime.io.BitBuffer getCustomDataMetadata()
    {
        return customDataMetadata_;
    }

    public void setCustomDataMetadata(zserio.runtime.io.BitBuffer customDataMetadata_)
    {
        this.customDataMetadata_ = customDataMetadata_;
    }

    public boolean isCustomDataMetadataUsed()
    {
        return (getUsesCustomData());
    }

    public boolean isCustomDataMetadataSet()
    {
        return (customDataMetadata_ != null);
    }

    public void resetCustomDataMetadata()
    {
        this.customDataMetadata_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RouteServiceCapabilities)
        {
            final RouteServiceCapabilities that = (RouteServiceCapabilities)obj;

            return
                    ((implementedMethods_ == null) ? that.implementedMethods_ == null : implementedMethods_.equals(that.implementedMethods_)) &&
                    ((supportedRouteTypes_ == null) ? that.supportedRouteTypes_ == null : supportedRouteTypes_.equals(that.supportedRouteTypes_)) &&
                    ((supportedRouteOptions_ == null) ? that.supportedRouteOptions_ == null : supportedRouteOptions_.equals(that.supportedRouteOptions_)) &&
                    ((supportedLanguages_ == null) ? that.supportedLanguages_ == null : supportedLanguages_.equals(that.supportedLanguages_)) &&
                    ((supportedVehicleDetails_ == null) ? that.supportedVehicleDetails_ == null : supportedVehicleDetails_.equals(that.supportedVehicleDetails_)) &&
                    ((supportedDriverProfileDetails_ == null) ? that.supportedDriverProfileDetails_ == null : supportedDriverProfileDetails_.equals(that.supportedDriverProfileDetails_)) &&
                    providesAlternativeRoutes_ == that.providesAlternativeRoutes_ &&
                    considersTimes_ == that.considersTimes_ &&
                    usesCustomData_ == that.usesCustomData_ &&
                    ((!isCustomDataMetadataUsed()) ? !that.isCustomDataMetadataUsed() :
                        ((customDataMetadata_ == null) ? that.customDataMetadata_ == null : customDataMetadata_.equals(that.customDataMetadata_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, implementedMethods_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedRouteTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedRouteOptions_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedLanguages_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedVehicleDetails_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, supportedDriverProfileDetails_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, providesAlternativeRoutes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, considersTimes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, usesCustomData_);
        if (isCustomDataMetadataUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, customDataMetadata_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        implementedMethods_ = new nds.routing.metadata.RouteServiceMethods(in);

        supportedRouteTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.routing.types.RouteType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteType>(new ZserioElementFactory_supportedRouteTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRouteTypes_.read(in);

        supportedRouteOptions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_supportedRouteOptions()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRouteOptions_.read(in);

        supportedLanguages_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        supportedLanguages_.read(in);

        supportedVehicleDetails_ = new nds.routing.metadata.SupportedVehicleDetails(in);

        supportedDriverProfileDetails_ = new nds.routing.metadata.SupportedDriverProfileDetails(in);

        providesAlternativeRoutes_ = in.readBool();

        considersTimes_ = in.readBool();

        usesCustomData_ = in.readBool();

        if (getUsesCustomData())
        {
            customDataMetadata_ = in.readBitBuffer();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_ = new nds.routing.metadata.RouteServiceMethods(zserioContext.getImplementedMethods(), in);

        supportedRouteTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.routing.types.RouteType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.types.RouteType>(new ZserioElementFactory_supportedRouteTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRouteTypes_.readPacked(in);

        supportedRouteOptions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routing.route.RouteOptions.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routing.route.RouteOptions>(new ZserioElementFactory_supportedRouteOptions()),
                zserio.runtime.array.ArrayType.AUTO);
        supportedRouteOptions_.readPacked(in);

        supportedLanguages_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ShortRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        supportedLanguages_.readPacked(in);

        supportedVehicleDetails_ = new nds.routing.metadata.SupportedVehicleDetails(zserioContext.getSupportedVehicleDetails(), in);

        supportedDriverProfileDetails_ = new nds.routing.metadata.SupportedDriverProfileDetails(zserioContext.getSupportedDriverProfileDetails(), in);

        providesAlternativeRoutes_ = in.readBool();

        considersTimes_ = in.readBool();

        usesCustomData_ = in.readBool();

        if (getUsesCustomData())
        {
            customDataMetadata_ = in.readBitBuffer();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += implementedMethods_.bitSizeOf(endBitPosition);
        endBitPosition = supportedRouteTypes_.initializeOffsets(endBitPosition);
        endBitPosition = supportedRouteOptions_.initializeOffsets(endBitPosition);
        endBitPosition = supportedLanguages_.initializeOffsets(endBitPosition);
        endBitPosition += supportedVehicleDetails_.bitSizeOf(endBitPosition);
        endBitPosition += supportedDriverProfileDetails_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCustomDataMetadataUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customDataMetadata_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = implementedMethods_.initializeOffsets(zserioContext.getImplementedMethods(), endBitPosition);
        endBitPosition = supportedRouteTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = supportedRouteOptions_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = supportedLanguages_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = supportedVehicleDetails_.initializeOffsets(zserioContext.getSupportedVehicleDetails(), endBitPosition);
        endBitPosition = supportedDriverProfileDetails_.initializeOffsets(zserioContext.getSupportedDriverProfileDetails(), endBitPosition);
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        if (isCustomDataMetadataUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfBitBuffer(customDataMetadata_);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        implementedMethods_.write(out);

        supportedRouteTypes_.write(out);

        supportedRouteOptions_.write(out);

        supportedLanguages_.write(out);

        supportedVehicleDetails_.write(out);

        supportedDriverProfileDetails_.write(out);

        out.writeBool(providesAlternativeRoutes_);

        out.writeBool(considersTimes_);

        out.writeBool(usesCustomData_);

        if (isCustomDataMetadataUsed())
        {
            out.writeBitBuffer(customDataMetadata_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        implementedMethods_.write(zserioContext.getImplementedMethods(), out);

        supportedRouteTypes_.writePacked(out);

        supportedRouteOptions_.writePacked(out);

        supportedLanguages_.writePacked(out);

        supportedVehicleDetails_.write(zserioContext.getSupportedVehicleDetails(), out);

        supportedDriverProfileDetails_.write(zserioContext.getSupportedDriverProfileDetails(), out);

        out.writeBool(providesAlternativeRoutes_);

        out.writeBool(considersTimes_);

        out.writeBool(usesCustomData_);

        if (isCustomDataMetadataUsed())
        {
            out.writeBitBuffer(customDataMetadata_);
        }
    }

    private static final class ZserioElementFactory_supportedRouteTypes implements zserio.runtime.array.PackableElementFactory<nds.routing.types.RouteType>
    {
        @Override
        public nds.routing.types.RouteType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.routing.types.RouteType.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.routing.types.RouteType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.routing.types.RouteType.readEnum(context, in);
        }
    }

    private static final class ZserioElementFactory_supportedRouteOptions implements zserio.runtime.array.PackableElementFactory<nds.routing.route.RouteOptions>
    {
        @Override
        public nds.routing.route.RouteOptions create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routing.route.RouteOptions(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routing.route.RouteOptions.ZserioPackingContext();
        }

        @Override
        public nds.routing.route.RouteOptions create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routing.route.RouteOptions(context, in);
        }
    }

    private nds.routing.metadata.RouteServiceMethods implementedMethods_;
    private zserio.runtime.array.Array supportedRouteTypes_;
    private zserio.runtime.array.Array supportedRouteOptions_;
    private zserio.runtime.array.Array supportedLanguages_;
    private nds.routing.metadata.SupportedVehicleDetails supportedVehicleDetails_;
    private nds.routing.metadata.SupportedDriverProfileDetails supportedDriverProfileDetails_;
    private boolean providesAlternativeRoutes_;
    private boolean considersTimes_;
    private boolean usesCustomData_;
    private zserio.runtime.io.BitBuffer customDataMetadata_;
}
