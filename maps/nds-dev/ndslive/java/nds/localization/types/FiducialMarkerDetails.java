/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.types;

public class FiducialMarkerDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            dictionaryIndex_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getDictionaryIndex()
        {
            return dictionaryIndex_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext dictionaryIndex_;
    };

    public FiducialMarkerDetails()
    {
    }

    public FiducialMarkerDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public FiducialMarkerDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public FiducialMarkerDetails(
            nds.localization.types.FiducialMarkerSystemType type_,
            short dictionaryIndex_)
    {
        setType(type_);
        setDictionaryIndex(dictionaryIndex_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        zserioContext.getDictionaryIndex().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(dictionaryIndex_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(dictionaryIndex_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += zserioContext.getDictionaryIndex().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(dictionaryIndex_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.localization.types.FiducialMarkerSystemType getType()
    {
        return type_;
    }

    public void setType(nds.localization.types.FiducialMarkerSystemType type_)
    {
        this.type_ = type_;
    }

    public short getDictionaryIndex()
    {
        return dictionaryIndex_;
    }

    public void setDictionaryIndex(short dictionaryIndex_)
    {
        this.dictionaryIndex_ = dictionaryIndex_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof FiducialMarkerDetails)
        {
            final FiducialMarkerDetails that = (FiducialMarkerDetails)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    dictionaryIndex_ == that.dictionaryIndex_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, dictionaryIndex_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.localization.types.FiducialMarkerSystemType.readEnum(in);

        dictionaryIndex_ = in.readVarUInt16();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.localization.types.FiducialMarkerSystemType.readEnum(zserioContext.getType(), in);

        dictionaryIndex_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getDictionaryIndex().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(dictionaryIndex_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition += zserioContext.getDictionaryIndex().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(dictionaryIndex_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        out.writeVarUInt16(dictionaryIndex_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        zserioContext.getDictionaryIndex().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(dictionaryIndex_));
    }

    private nds.localization.types.FiducialMarkerSystemType type_;
    private short dictionaryIndex_;
}
