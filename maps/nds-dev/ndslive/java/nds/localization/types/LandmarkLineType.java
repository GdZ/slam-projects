/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.types;

public enum LandmarkLineType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    GUARDRAIL_POST((short)0),
    LIGHT_POLE((short)1),
    DELINEATOR_POST((short)2),
    REFLECTOR_POST((short)3),
    GANTRY_POLE((short)4),
    SIGNPOST_POLE((short)5),
    POLE_UNKNOWN((short)6),
    CURB((short)7),
    WALL_FLAT((short)8),
    WALL_TUNNEL((short)9),
    BARRIER_JERSEY((short)10),
    BARRIER_SOUND((short)11),
    BARRIER_CABLE((short)12),
    GUARDRAIL((short)13),
    FENCE((short)14),
    CLIFF((short)15),
    DITCH((short)16);

    private LandmarkLineType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static LandmarkLineType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static LandmarkLineType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static LandmarkLineType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return GUARDRAIL_POST;
            case (short)1:
                return LIGHT_POLE;
            case (short)2:
                return DELINEATOR_POST;
            case (short)3:
                return REFLECTOR_POST;
            case (short)4:
                return GANTRY_POLE;
            case (short)5:
                return SIGNPOST_POLE;
            case (short)6:
                return POLE_UNKNOWN;
            case (short)7:
                return CURB;
            case (short)8:
                return WALL_FLAT;
            case (short)9:
                return WALL_TUNNEL;
            case (short)10:
                return BARRIER_JERSEY;
            case (short)11:
                return BARRIER_SOUND;
            case (short)12:
                return BARRIER_CABLE;
            case (short)13:
                return GUARDRAIL;
            case (short)14:
                return FENCE;
            case (short)15:
                return CLIFF;
            case (short)16:
                return DITCH;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration LandmarkLineType: " + value + "!");
        }
    }

    public static LandmarkLineType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("GUARDRAIL_POST"))
            return GUARDRAIL_POST;
        if (itemName.equals("LIGHT_POLE"))
            return LIGHT_POLE;
        if (itemName.equals("DELINEATOR_POST"))
            return DELINEATOR_POST;
        if (itemName.equals("REFLECTOR_POST"))
            return REFLECTOR_POST;
        if (itemName.equals("GANTRY_POLE"))
            return GANTRY_POLE;
        if (itemName.equals("SIGNPOST_POLE"))
            return SIGNPOST_POLE;
        if (itemName.equals("POLE_UNKNOWN"))
            return POLE_UNKNOWN;
        if (itemName.equals("CURB"))
            return CURB;
        if (itemName.equals("WALL_FLAT"))
            return WALL_FLAT;
        if (itemName.equals("WALL_TUNNEL"))
            return WALL_TUNNEL;
        if (itemName.equals("BARRIER_JERSEY"))
            return BARRIER_JERSEY;
        if (itemName.equals("BARRIER_SOUND"))
            return BARRIER_SOUND;
        if (itemName.equals("BARRIER_CABLE"))
            return BARRIER_CABLE;
        if (itemName.equals("GUARDRAIL"))
            return GUARDRAIL;
        if (itemName.equals("FENCE"))
            return FENCE;
        if (itemName.equals("CLIFF"))
            return CLIFF;
        if (itemName.equals("DITCH"))
            return DITCH;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration LandmarkLineType!");
    }

    private short value;
}
