/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.types;

public class LandmarkLine implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            diameter_ = new zserio.runtime.array.DeltaContext();
            confidence_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getDiameter()
        {
            return diameter_;
        }

        public zserio.runtime.array.DeltaContext getConfidence()
        {
            return confidence_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext diameter_;
        private zserio.runtime.array.DeltaContext confidence_;
    };

    public LandmarkLine()
    {
    }

    public LandmarkLine(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LandmarkLine(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LandmarkLine(
            nds.localization.types.LandmarkLineType type_,
            java.lang.Integer diameter_,
            java.lang.Short confidence_)
    {
        setType(type_);
        setDiameter(diameter_);
        setConfidence(confidence_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        if (isDiameterUsed())
        {
            zserioContext.getDiameter().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(diameter_));
        }
        if (isConfidenceUsed())
        {
            zserioContext.getConfidence().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(confidence_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isDiameterUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(diameter_);
        }
        endBitPosition += 1;
        if (isConfidenceUsed())
        {
            endBitPosition += 8;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += 1;
        if (isDiameterUsed())
        {
            endBitPosition += zserioContext.getDiameter().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(diameter_));
        }
        endBitPosition += 1;
        if (isConfidenceUsed())
        {
            endBitPosition += zserioContext.getConfidence().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(confidence_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.localization.types.LandmarkLineType getType()
    {
        return type_;
    }

    public void setType(nds.localization.types.LandmarkLineType type_)
    {
        this.type_ = type_;
    }

    public java.lang.Integer getDiameter()
    {
        return diameter_;
    }

    public void setDiameter(java.lang.Integer diameter_)
    {
        this.diameter_ = diameter_;
    }

    public boolean isDiameterUsed()
    {
        return isDiameterSet();
    }

    public boolean isDiameterSet()
    {
        return (diameter_ != null);
    }

    public void resetDiameter()
    {
        this.diameter_ = null;
    }

    public java.lang.Short getConfidence()
    {
        return confidence_;
    }

    public void setConfidence(java.lang.Short confidence_)
    {
        this.confidence_ = confidence_;
    }

    public boolean isConfidenceUsed()
    {
        return isConfidenceSet();
    }

    public boolean isConfidenceSet()
    {
        return (confidence_ != null);
    }

    public void resetConfidence()
    {
        this.confidence_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LandmarkLine)
        {
            final LandmarkLine that = (LandmarkLine)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((!isDiameterUsed()) ? !that.isDiameterUsed() :
                        ((diameter_ == null) ? that.diameter_ == null : diameter_.equals(that.diameter_))) &&
                    ((!isConfidenceUsed()) ? !that.isConfidenceUsed() :
                        ((confidence_ == null) ? that.confidence_ == null : confidence_.equals(that.confidence_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isDiameterUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, diameter_);
        if (isConfidenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, confidence_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.localization.types.LandmarkLineType.readEnum(in);

        if (in.readBool())
        {
            diameter_ = in.readVarUInt32();
        }

        if (in.readBool())
        {
            confidence_ = in.readUnsignedByte();
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.localization.types.LandmarkLineType.readEnum(zserioContext.getType(), in);

        if (in.readBool())
        {
            diameter_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getDiameter().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            confidence_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getConfidence().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isDiameterUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(diameter_);
        }
        endBitPosition += 1;
        if (isConfidenceUsed())
        {
            endBitPosition += 8;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition += 1;
        if (isDiameterUsed())
        {
            endBitPosition += zserioContext.getDiameter().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(diameter_));
        }
        endBitPosition += 1;
        if (isConfidenceUsed())
        {
            endBitPosition += zserioContext.getConfidence().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(confidence_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        type_.write(out);

        if (isDiameterUsed())
        {
            out.writeBool(true);
            out.writeVarUInt32(diameter_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isConfidenceUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(confidence_);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        type_.write(zserioContext.getType(), out);

        if (isDiameterUsed())
        {
            out.writeBool(true);
            zserioContext.getDiameter().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(diameter_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isConfidenceUsed())
        {
            out.writeBool(true);
            zserioContext.getConfidence().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(confidence_));
        }
        else
        {
            out.writeBool(false);
        }
    }

    private void checkConstraints()
    {
        if (isConfidenceUsed() && !(getConfidence() <= 100))
            throw new zserio.runtime.ConstraintError("Constraint violated at LandmarkLine.confidence!");
    }

    private nds.localization.types.LandmarkLineType type_;
    private java.lang.Integer diameter_;
    private java.lang.Short confidence_;
}
