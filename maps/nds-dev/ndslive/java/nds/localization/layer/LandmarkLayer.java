/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.layer;

public class LandmarkLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            header_ = new nds.localization.layer.LandmarkLayerHeader.ZserioPackingContext();
            lineGeometryLayer_ = new nds.localization.instantiations.LandmarkLineGeometryLayer.ZserioPackingContext();
            polygonGeometryLayer_ = new nds.localization.instantiations.LandmarkPolygonGeometryLayer.ZserioPackingContext();
            meshGeometryLayer_ = new nds.localization.instantiations.LandmarkMeshGeometryLayer.ZserioPackingContext();
        }

        public nds.localization.layer.LandmarkLayerHeader.ZserioPackingContext getHeader()
        {
            return header_;
        }

        public nds.localization.instantiations.LandmarkLineGeometryLayer.ZserioPackingContext getLineGeometryLayer()
        {
            return lineGeometryLayer_;
        }

        public nds.localization.instantiations.LandmarkPolygonGeometryLayer.ZserioPackingContext getPolygonGeometryLayer()
        {
            return polygonGeometryLayer_;
        }

        public nds.localization.instantiations.LandmarkMeshGeometryLayer.ZserioPackingContext getMeshGeometryLayer()
        {
            return meshGeometryLayer_;
        }

        private nds.localization.layer.LandmarkLayerHeader.ZserioPackingContext header_;
        private nds.localization.instantiations.LandmarkLineGeometryLayer.ZserioPackingContext lineGeometryLayer_;
        private nds.localization.instantiations.LandmarkPolygonGeometryLayer.ZserioPackingContext polygonGeometryLayer_;
        private nds.localization.instantiations.LandmarkMeshGeometryLayer.ZserioPackingContext meshGeometryLayer_;
    };

    public LandmarkLayer()
    {
    }

    public LandmarkLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LandmarkLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LandmarkLayer(
            nds.localization.layer.LandmarkLayerHeader header_,
            nds.localization.instantiations.LandmarkLineGeometryLayer lineGeometryLayer_,
            nds.localization.instantiations.LandmarkPolygonGeometryLayer polygonGeometryLayer_,
            nds.localization.instantiations.LandmarkMeshGeometryLayer meshGeometryLayer_)
    {
        setHeader(header_);
        setLineGeometryLayer(lineGeometryLayer_);
        setPolygonGeometryLayer(polygonGeometryLayer_);
        setMeshGeometryLayer(meshGeometryLayer_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_.initPackingContext(zserioContext.getHeader());
        if (isLineGeometryLayerUsed())
        {
            lineGeometryLayer_.initPackingContext(zserioContext.getLineGeometryLayer());
        }
        if (isPolygonGeometryLayerUsed())
        {
            polygonGeometryLayer_.initPackingContext(zserioContext.getPolygonGeometryLayer());
        }
        if (isMeshGeometryLayerUsed())
        {
            meshGeometryLayer_.initPackingContext(zserioContext.getMeshGeometryLayer());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(endBitPosition);
        if (isLineGeometryLayerUsed())
        {
            endBitPosition += lineGeometryLayer_.bitSizeOf(endBitPosition);
        }
        if (isPolygonGeometryLayerUsed())
        {
            endBitPosition += polygonGeometryLayer_.bitSizeOf(endBitPosition);
        }
        if (isMeshGeometryLayerUsed())
        {
            endBitPosition += meshGeometryLayer_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += header_.bitSizeOf(zserioContext.getHeader(), endBitPosition);
        if (isLineGeometryLayerUsed())
        {
            endBitPosition += lineGeometryLayer_.bitSizeOf(zserioContext.getLineGeometryLayer(), endBitPosition);
        }
        if (isPolygonGeometryLayerUsed())
        {
            endBitPosition += polygonGeometryLayer_.bitSizeOf(zserioContext.getPolygonGeometryLayer(), endBitPosition);
        }
        if (isMeshGeometryLayerUsed())
        {
            endBitPosition += meshGeometryLayer_.bitSizeOf(zserioContext.getMeshGeometryLayer(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.localization.layer.LandmarkLayerHeader getHeader()
    {
        return header_;
    }

    public void setHeader(nds.localization.layer.LandmarkLayerHeader header_)
    {
        this.header_ = header_;
    }

    public nds.localization.instantiations.LandmarkLineGeometryLayer getLineGeometryLayer()
    {
        return lineGeometryLayer_;
    }

    public void setLineGeometryLayer(nds.localization.instantiations.LandmarkLineGeometryLayer lineGeometryLayer_)
    {
        this.lineGeometryLayer_ = lineGeometryLayer_;
    }

    public boolean isLineGeometryLayerUsed()
    {
        return (getHeader().getAvailableLineTypes().length > 0);
    }

    public boolean isLineGeometryLayerSet()
    {
        return (lineGeometryLayer_ != null);
    }

    public void resetLineGeometryLayer()
    {
        this.lineGeometryLayer_ = null;
    }

    public nds.localization.instantiations.LandmarkPolygonGeometryLayer getPolygonGeometryLayer()
    {
        return polygonGeometryLayer_;
    }

    public void setPolygonGeometryLayer(nds.localization.instantiations.LandmarkPolygonGeometryLayer polygonGeometryLayer_)
    {
        this.polygonGeometryLayer_ = polygonGeometryLayer_;
    }

    public boolean isPolygonGeometryLayerUsed()
    {
        return (getHeader().getAvailablePolygonTypes().length > 0);
    }

    public boolean isPolygonGeometryLayerSet()
    {
        return (polygonGeometryLayer_ != null);
    }

    public void resetPolygonGeometryLayer()
    {
        this.polygonGeometryLayer_ = null;
    }

    public nds.localization.instantiations.LandmarkMeshGeometryLayer getMeshGeometryLayer()
    {
        return meshGeometryLayer_;
    }

    public void setMeshGeometryLayer(nds.localization.instantiations.LandmarkMeshGeometryLayer meshGeometryLayer_)
    {
        this.meshGeometryLayer_ = meshGeometryLayer_;
    }

    public boolean isMeshGeometryLayerUsed()
    {
        return (getHeader().getAvailableMeshTypes().length > 0);
    }

    public boolean isMeshGeometryLayerSet()
    {
        return (meshGeometryLayer_ != null);
    }

    public void resetMeshGeometryLayer()
    {
        this.meshGeometryLayer_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LandmarkLayer)
        {
            final LandmarkLayer that = (LandmarkLayer)obj;

            return
                    ((header_ == null) ? that.header_ == null : header_.equals(that.header_)) &&
                    ((!isLineGeometryLayerUsed()) ? !that.isLineGeometryLayerUsed() :
                        ((lineGeometryLayer_ == null) ? that.lineGeometryLayer_ == null : lineGeometryLayer_.equals(that.lineGeometryLayer_))) &&
                    ((!isPolygonGeometryLayerUsed()) ? !that.isPolygonGeometryLayerUsed() :
                        ((polygonGeometryLayer_ == null) ? that.polygonGeometryLayer_ == null : polygonGeometryLayer_.equals(that.polygonGeometryLayer_))) &&
                    ((!isMeshGeometryLayerUsed()) ? !that.isMeshGeometryLayerUsed() :
                        ((meshGeometryLayer_ == null) ? that.meshGeometryLayer_ == null : meshGeometryLayer_.equals(that.meshGeometryLayer_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, header_);
        if (isLineGeometryLayerUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lineGeometryLayer_);
        if (isPolygonGeometryLayerUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, polygonGeometryLayer_);
        if (isMeshGeometryLayerUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, meshGeometryLayer_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        header_ = new nds.localization.layer.LandmarkLayerHeader(in);

        if (getHeader().getAvailableLineTypes().length > 0)
        {
            lineGeometryLayer_ = new nds.localization.instantiations.LandmarkLineGeometryLayer(in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        if (getHeader().getAvailablePolygonTypes().length > 0)
        {
            polygonGeometryLayer_ = new nds.localization.instantiations.LandmarkPolygonGeometryLayer(in, nds.core.geometry.GeometryLayerType.POLYGON_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        if (getHeader().getAvailableMeshTypes().length > 0)
        {
            meshGeometryLayer_ = new nds.localization.instantiations.LandmarkMeshGeometryLayer(in, nds.core.geometry.GeometryLayerType.MESH_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        header_ = new nds.localization.layer.LandmarkLayerHeader(zserioContext.getHeader(), in);

        if (getHeader().getAvailableLineTypes().length > 0)
        {
            lineGeometryLayer_ = new nds.localization.instantiations.LandmarkLineGeometryLayer(zserioContext.getLineGeometryLayer(), in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        if (getHeader().getAvailablePolygonTypes().length > 0)
        {
            polygonGeometryLayer_ = new nds.localization.instantiations.LandmarkPolygonGeometryLayer(zserioContext.getPolygonGeometryLayer(), in, nds.core.geometry.GeometryLayerType.POLYGON_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        if (getHeader().getAvailableMeshTypes().length > 0)
        {
            meshGeometryLayer_ = new nds.localization.instantiations.LandmarkMeshGeometryLayer(zserioContext.getMeshGeometryLayer(), in, nds.core.geometry.GeometryLayerType.MESH_3D, (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())), (boolean)(true));
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(endBitPosition);
        if (isLineGeometryLayerUsed())
        {
            endBitPosition = lineGeometryLayer_.initializeOffsets(endBitPosition);
        }
        if (isPolygonGeometryLayerUsed())
        {
            endBitPosition = polygonGeometryLayer_.initializeOffsets(endBitPosition);
        }
        if (isMeshGeometryLayerUsed())
        {
            endBitPosition = meshGeometryLayer_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = header_.initializeOffsets(zserioContext.getHeader(), endBitPosition);
        if (isLineGeometryLayerUsed())
        {
            endBitPosition = lineGeometryLayer_.initializeOffsets(zserioContext.getLineGeometryLayer(), endBitPosition);
        }
        if (isPolygonGeometryLayerUsed())
        {
            endBitPosition = polygonGeometryLayer_.initializeOffsets(zserioContext.getPolygonGeometryLayer(), endBitPosition);
        }
        if (isMeshGeometryLayerUsed())
        {
            endBitPosition = meshGeometryLayer_.initializeOffsets(zserioContext.getMeshGeometryLayer(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        header_.write(out);

        if (isLineGeometryLayerUsed())
        {
            // check parameters
            if (lineGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.LINE_3D))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field LandmarkLayer.lineGeometryLayer!");
            }
            if (lineGeometryLayer_.getHasIds() != (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field LandmarkLayer.lineGeometryLayer: " +
                        lineGeometryLayer_.getHasIds() + " != " + (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())) + "!");
            }
            if (lineGeometryLayer_.getHasTypes() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field LandmarkLayer.lineGeometryLayer: " +
                        lineGeometryLayer_.getHasTypes() + " != " + (boolean)(true) + "!");
            }
            lineGeometryLayer_.write(out);
        }

        if (isPolygonGeometryLayerUsed())
        {
            // check parameters
            if (polygonGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.POLYGON_3D))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field LandmarkLayer.polygonGeometryLayer!");
            }
            if (polygonGeometryLayer_.getHasIds() != (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field LandmarkLayer.polygonGeometryLayer: " +
                        polygonGeometryLayer_.getHasIds() + " != " + (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())) + "!");
            }
            if (polygonGeometryLayer_.getHasTypes() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field LandmarkLayer.polygonGeometryLayer: " +
                        polygonGeometryLayer_.getHasTypes() + " != " + (boolean)(true) + "!");
            }
            polygonGeometryLayer_.write(out);
        }

        if (isMeshGeometryLayerUsed())
        {
            // check parameters
            if (meshGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.MESH_3D))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field LandmarkLayer.meshGeometryLayer!");
            }
            if (meshGeometryLayer_.getHasIds() != (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field LandmarkLayer.meshGeometryLayer: " +
                        meshGeometryLayer_.getHasIds() + " != " + (boolean)((getHeader().getHasRelations() || getHeader().getHasDetails())) + "!");
            }
            if (meshGeometryLayer_.getHasTypes() != (boolean)(true))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field LandmarkLayer.meshGeometryLayer: " +
                        meshGeometryLayer_.getHasTypes() + " != " + (boolean)(true) + "!");
            }
            meshGeometryLayer_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        header_.write(zserioContext.getHeader(), out);

        if (isLineGeometryLayerUsed())
        {
            lineGeometryLayer_.write(zserioContext.getLineGeometryLayer(), out);
        }

        if (isPolygonGeometryLayerUsed())
        {
            polygonGeometryLayer_.write(zserioContext.getPolygonGeometryLayer(), out);
        }

        if (isMeshGeometryLayerUsed())
        {
            meshGeometryLayer_.write(zserioContext.getMeshGeometryLayer(), out);
        }
    }

    private void checkConstraints()
    {
        if (!((getHeader().getAvailableLineTypes().length > 0) || (getHeader().getAvailablePolygonTypes().length > 0) || (getHeader().getAvailableMeshTypes().length > 0)))
            throw new zserio.runtime.ConstraintError("Constraint violated at LandmarkLayer.header!");
    }

    private nds.localization.layer.LandmarkLayerHeader header_;
    private nds.localization.instantiations.LandmarkLineGeometryLayer lineGeometryLayer_;
    private nds.localization.instantiations.LandmarkPolygonGeometryLayer polygonGeometryLayer_;
    private nds.localization.instantiations.LandmarkMeshGeometryLayer meshGeometryLayer_;
}
