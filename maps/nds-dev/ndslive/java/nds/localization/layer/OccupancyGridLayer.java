/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.layer;

public class OccupancyGridLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            gridLayer_ = new nds.localization.instantiations.OccupancyProbabilityGridLayer.ZserioPackingContext();
        }

        public nds.localization.instantiations.OccupancyProbabilityGridLayer.ZserioPackingContext getGridLayer()
        {
            return gridLayer_;
        }

        private nds.localization.instantiations.OccupancyProbabilityGridLayer.ZserioPackingContext gridLayer_;
    };

    public OccupancyGridLayer()
    {
    }

    public OccupancyGridLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public OccupancyGridLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public OccupancyGridLayer(
            boolean hasIds_,
            nds.localization.instantiations.OccupancyProbabilityGridLayer gridLayer_)
    {
        setHasIds(hasIds_);
        setGridLayer(gridLayer_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        gridLayer_.initPackingContext(zserioContext.getGridLayer());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += gridLayer_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += gridLayer_.bitSizeOf(zserioContext.getGridLayer(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasIds()
    {
        return hasIds_;
    }

    public void setHasIds(boolean hasIds_)
    {
        this.hasIds_ = hasIds_;
    }

    public nds.localization.instantiations.OccupancyProbabilityGridLayer getGridLayer()
    {
        return gridLayer_;
    }

    public void setGridLayer(nds.localization.instantiations.OccupancyProbabilityGridLayer gridLayer_)
    {
        this.gridLayer_ = gridLayer_;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof OccupancyGridLayer)
        {
            final OccupancyGridLayer that = (OccupancyGridLayer)obj;

            return
                    hasIds_ == that.hasIds_ &&
                    ((gridLayer_ == null) ? that.gridLayer_ == null : gridLayer_.equals(that.gridLayer_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasIds_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, gridLayer_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasIds_ = in.readBool();

        gridLayer_ = new nds.localization.instantiations.OccupancyProbabilityGridLayer(in, (boolean)(getHasIds()), (boolean)(false));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        hasIds_ = in.readBool();

        gridLayer_ = new nds.localization.instantiations.OccupancyProbabilityGridLayer(zserioContext.getGridLayer(), in, (boolean)(getHasIds()), (boolean)(false));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition = gridLayer_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition = gridLayer_.initializeOffsets(zserioContext.getGridLayer(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasIds_);

        // check parameters
        if (gridLayer_.getHasIds() != (boolean)(getHasIds()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field OccupancyGridLayer.gridLayer: " +
                    gridLayer_.getHasIds() + " != " + (boolean)(getHasIds()) + "!");
        }
        if (gridLayer_.getHasTypes() != (boolean)(false))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field OccupancyGridLayer.gridLayer: " +
                    gridLayer_.getHasTypes() + " != " + (boolean)(false) + "!");
        }
        gridLayer_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(hasIds_);

        gridLayer_.write(zserioContext.getGridLayer(), out);
    }

    private boolean hasIds_;
    private nds.localization.instantiations.OccupancyProbabilityGridLayer gridLayer_;
}
