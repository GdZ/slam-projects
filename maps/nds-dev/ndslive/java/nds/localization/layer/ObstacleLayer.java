/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.localization.layer;

public class ObstacleLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            obstacleGeometryLayer_ = new nds.localization.instantiations.ObstacleGeometryLayer.ZserioPackingContext();
        }

        public nds.localization.instantiations.ObstacleGeometryLayer.ZserioPackingContext getObstacleGeometryLayer()
        {
            return obstacleGeometryLayer_;
        }

        private nds.localization.instantiations.ObstacleGeometryLayer.ZserioPackingContext obstacleGeometryLayer_;
    };

    public ObstacleLayer()
    {
    }

    public ObstacleLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ObstacleLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ObstacleLayer(
            nds.localization.instantiations.ObstacleGeometryLayer obstacleGeometryLayer_)
    {
        setObstacleGeometryLayer(obstacleGeometryLayer_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        obstacleGeometryLayer_.initPackingContext(zserioContext.getObstacleGeometryLayer());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += obstacleGeometryLayer_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += obstacleGeometryLayer_.bitSizeOf(zserioContext.getObstacleGeometryLayer(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.localization.instantiations.ObstacleGeometryLayer getObstacleGeometryLayer()
    {
        return obstacleGeometryLayer_;
    }

    public void setObstacleGeometryLayer(nds.localization.instantiations.ObstacleGeometryLayer obstacleGeometryLayer_)
    {
        this.obstacleGeometryLayer_ = obstacleGeometryLayer_;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ObstacleLayer)
        {
            final ObstacleLayer that = (ObstacleLayer)obj;

            return
                    ((obstacleGeometryLayer_ == null) ? that.obstacleGeometryLayer_ == null : obstacleGeometryLayer_.equals(that.obstacleGeometryLayer_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, obstacleGeometryLayer_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        obstacleGeometryLayer_ = new nds.localization.instantiations.ObstacleGeometryLayer(in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)(false), (boolean)(true));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        obstacleGeometryLayer_ = new nds.localization.instantiations.ObstacleGeometryLayer(zserioContext.getObstacleGeometryLayer(), in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)(false), (boolean)(true));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = obstacleGeometryLayer_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = obstacleGeometryLayer_.initializeOffsets(zserioContext.getObstacleGeometryLayer(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (obstacleGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.LINE_3D))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field ObstacleLayer.obstacleGeometryLayer!");
        }
        if (obstacleGeometryLayer_.getHasIds() != (boolean)(false))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field ObstacleLayer.obstacleGeometryLayer: " +
                    obstacleGeometryLayer_.getHasIds() + " != " + (boolean)(false) + "!");
        }
        if (obstacleGeometryLayer_.getHasTypes() != (boolean)(true))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field ObstacleLayer.obstacleGeometryLayer: " +
                    obstacleGeometryLayer_.getHasTypes() + " != " + (boolean)(true) + "!");
        }
        obstacleGeometryLayer_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        obstacleGeometryLayer_.write(zserioContext.getObstacleGeometryLayer(), out);
    }

    private nds.localization.instantiations.ObstacleGeometryLayer obstacleGeometryLayer_;
}
