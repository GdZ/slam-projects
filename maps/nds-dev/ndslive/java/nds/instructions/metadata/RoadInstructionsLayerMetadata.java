/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.metadata;

public class RoadInstructionsLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            transitionMetadata_ = new nds.instructions.instantiations.InstructionsTransitionAttributeMetadata.ZserioPackingContext();
            availableLanguages_ = new nds.core.language.AvailableLanguages.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.instructions.instantiations.InstructionsTransitionAttributeMetadata.ZserioPackingContext getTransitionMetadata()
        {
            return transitionMetadata_;
        }

        public nds.core.language.AvailableLanguages.ZserioPackingContext getAvailableLanguages()
        {
            return availableLanguages_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.instructions.instantiations.InstructionsTransitionAttributeMetadata.ZserioPackingContext transitionMetadata_;
        private nds.core.language.AvailableLanguages.ZserioPackingContext availableLanguages_;
    };

    public RoadInstructionsLayerMetadata()
    {
    }

    public RoadInstructionsLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadInstructionsLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadInstructionsLayerMetadata(
            nds.instructions.metadata.RoadInstructionsLayerContent content_,
            nds.instructions.instantiations.InstructionsTransitionAttributeMetadata transitionMetadata_,
            nds.core.types.RoadType[] coveredRoadTypes_,
            boolean globalImageReferences_,
            nds.core.language.AvailableLanguages availableLanguages_)
    {
        setContent(content_);
        setTransitionMetadata(transitionMetadata_);
        setCoveredRoadTypes(coveredRoadTypes_);
        setGlobalImageReferences(globalImageReferences_);
        setAvailableLanguages(availableLanguages_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isTransitionMetadataUsed())
        {
            transitionMetadata_.initPackingContext(zserioContext.getTransitionMetadata());
        }
        availableLanguages_.initPackingContext(zserioContext.getAvailableLanguages());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isTransitionMetadataUsed())
        {
            endBitPosition += transitionMetadata_.bitSizeOf(endBitPosition);
        }
        endBitPosition += coveredRoadTypes_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        endBitPosition += availableLanguages_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isTransitionMetadataUsed())
        {
            endBitPosition += transitionMetadata_.bitSizeOf(zserioContext.getTransitionMetadata(), endBitPosition);
        }
        endBitPosition += coveredRoadTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += 1;
        endBitPosition += availableLanguages_.bitSizeOf(zserioContext.getAvailableLanguages(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.metadata.RoadInstructionsLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.instructions.metadata.RoadInstructionsLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.instructions.instantiations.InstructionsTransitionAttributeMetadata getTransitionMetadata()
    {
        return transitionMetadata_;
    }

    public void setTransitionMetadata(nds.instructions.instantiations.InstructionsTransitionAttributeMetadata transitionMetadata_)
    {
        this.transitionMetadata_ = transitionMetadata_;
    }

    public boolean isTransitionMetadataUsed()
    {
        return ((getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS) || (getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS));
    }

    public boolean isTransitionMetadataSet()
    {
        return (transitionMetadata_ != null);
    }

    public void resetTransitionMetadata()
    {
        this.transitionMetadata_ = null;
    }

    public nds.core.types.RoadType[] getCoveredRoadTypes()
    {
        return (coveredRoadTypes_ == null) ? null : coveredRoadTypes_.getRawArray();
    }

    public void setCoveredRoadTypes(nds.core.types.RoadType[] coveredRoadTypes_)
    {
        this.coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class, coveredRoadTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public boolean getGlobalImageReferences()
    {
        return globalImageReferences_;
    }

    public void setGlobalImageReferences(boolean globalImageReferences_)
    {
        this.globalImageReferences_ = globalImageReferences_;
    }

    public nds.core.language.AvailableLanguages getAvailableLanguages()
    {
        return availableLanguages_;
    }

    public void setAvailableLanguages(nds.core.language.AvailableLanguages availableLanguages_)
    {
        this.availableLanguages_ = availableLanguages_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadInstructionsLayerMetadata)
        {
            final RoadInstructionsLayerMetadata that = (RoadInstructionsLayerMetadata)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isTransitionMetadataUsed()) ? !that.isTransitionMetadataUsed() :
                        ((transitionMetadata_ == null) ? that.transitionMetadata_ == null : transitionMetadata_.equals(that.transitionMetadata_))) &&
                    ((coveredRoadTypes_ == null) ? that.coveredRoadTypes_ == null : coveredRoadTypes_.equals(that.coveredRoadTypes_)) &&
                    globalImageReferences_ == that.globalImageReferences_ &&
                    ((availableLanguages_ == null) ? that.availableLanguages_ == null : availableLanguages_.equals(that.availableLanguages_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isTransitionMetadataUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionMetadata_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coveredRoadTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, globalImageReferences_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, availableLanguages_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.instructions.metadata.RoadInstructionsLayerContent(in);

        if ((getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS) || (getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS))
        {
            transitionMetadata_ = new nds.instructions.instantiations.InstructionsTransitionAttributeMetadata(in);
        }

        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.read(in);

        globalImageReferences_ = in.readBool();

        availableLanguages_ = new nds.core.language.AvailableLanguages(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.instructions.metadata.RoadInstructionsLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_MAPS) || (getContent().and(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS)).equals(nds.instructions.metadata.RoadInstructionsLayerContent.Values.TRANSITION_SETS))
        {
            transitionMetadata_ = new nds.instructions.instantiations.InstructionsTransitionAttributeMetadata(zserioContext.getTransitionMetadata(), in);
        }

        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.readPacked(in);

        globalImageReferences_ = in.readBool();

        availableLanguages_ = new nds.core.language.AvailableLanguages(zserioContext.getAvailableLanguages(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isTransitionMetadataUsed())
        {
            endBitPosition = transitionMetadata_.initializeOffsets(endBitPosition);
        }
        endBitPosition = coveredRoadTypes_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        endBitPosition = availableLanguages_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isTransitionMetadataUsed())
        {
            endBitPosition = transitionMetadata_.initializeOffsets(zserioContext.getTransitionMetadata(), endBitPosition);
        }
        endBitPosition = coveredRoadTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += 1;
        endBitPosition = availableLanguages_.initializeOffsets(zserioContext.getAvailableLanguages(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isTransitionMetadataUsed())
        {
            transitionMetadata_.write(out);
        }

        coveredRoadTypes_.write(out);

        out.writeBool(globalImageReferences_);

        availableLanguages_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isTransitionMetadataUsed())
        {
            transitionMetadata_.write(zserioContext.getTransitionMetadata(), out);
        }

        coveredRoadTypes_.writePacked(out);

        out.writeBool(globalImageReferences_);

        availableLanguages_.write(zserioContext.getAvailableLanguages(), out);
    }

    private static final class ZserioElementFactory_coveredRoadTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.RoadType>
    {
        @Override
        public nds.core.types.RoadType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.RoadType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.RoadType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.RoadType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.RoadType(context, in);
        }
    }

    private nds.instructions.metadata.RoadInstructionsLayerContent content_;
    private nds.instructions.instantiations.InstructionsTransitionAttributeMetadata transitionMetadata_;
    private zserio.runtime.array.Array coveredRoadTypes_;
    private boolean globalImageReferences_;
    private nds.core.language.AvailableLanguages availableLanguages_;
}
