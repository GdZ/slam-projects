/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.metadata;

public class InstructionsImageLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            junctionViewAbstractionLevel_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public zserio.runtime.array.DeltaContext getJunctionViewAbstractionLevel()
        {
            return junctionViewAbstractionLevel_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private zserio.runtime.array.DeltaContext junctionViewAbstractionLevel_;
    };

    public InstructionsImageLayerMetadata()
    {
    }

    public InstructionsImageLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public InstructionsImageLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public InstructionsImageLayerMetadata(
            nds.instructions.metadata.InstructionsImageLayerContent content_,
            nds.instructions.types.JunctionViewAbstractionLevel junctionViewAbstractionLevel_)
    {
        setContent(content_);
        setJunctionViewAbstractionLevel(junctionViewAbstractionLevel_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isJunctionViewAbstractionLevelUsed())
        {
            junctionViewAbstractionLevel_.initPackingContext(zserioContext.getJunctionViewAbstractionLevel());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isJunctionViewAbstractionLevelUsed())
        {
            endBitPosition += junctionViewAbstractionLevel_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isJunctionViewAbstractionLevelUsed())
        {
            endBitPosition += junctionViewAbstractionLevel_.bitSizeOf(zserioContext.getJunctionViewAbstractionLevel(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.metadata.InstructionsImageLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.instructions.metadata.InstructionsImageLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.instructions.types.JunctionViewAbstractionLevel getJunctionViewAbstractionLevel()
    {
        return junctionViewAbstractionLevel_;
    }

    public void setJunctionViewAbstractionLevel(nds.instructions.types.JunctionViewAbstractionLevel junctionViewAbstractionLevel_)
    {
        this.junctionViewAbstractionLevel_ = junctionViewAbstractionLevel_;
    }

    public boolean isJunctionViewAbstractionLevelUsed()
    {
        return ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW));
    }

    public boolean isJunctionViewAbstractionLevelSet()
    {
        return (junctionViewAbstractionLevel_ != null);
    }

    public void resetJunctionViewAbstractionLevel()
    {
        this.junctionViewAbstractionLevel_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof InstructionsImageLayerMetadata)
        {
            final InstructionsImageLayerMetadata that = (InstructionsImageLayerMetadata)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isJunctionViewAbstractionLevelUsed()) ? !that.isJunctionViewAbstractionLevelUsed() :
                        ((junctionViewAbstractionLevel_ == null) ? that.junctionViewAbstractionLevel_ == null : junctionViewAbstractionLevel_.getValue() == that.junctionViewAbstractionLevel_.getValue()));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isJunctionViewAbstractionLevelUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, junctionViewAbstractionLevel_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.instructions.metadata.InstructionsImageLayerContent(in);

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW))
        {
            junctionViewAbstractionLevel_ = nds.instructions.types.JunctionViewAbstractionLevel.readEnum(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.instructions.metadata.InstructionsImageLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW))
        {
            junctionViewAbstractionLevel_ = nds.instructions.types.JunctionViewAbstractionLevel.readEnum(zserioContext.getJunctionViewAbstractionLevel(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isJunctionViewAbstractionLevelUsed())
        {
            endBitPosition += junctionViewAbstractionLevel_.bitSizeOf(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isJunctionViewAbstractionLevelUsed())
        {
            endBitPosition = junctionViewAbstractionLevel_.initializeOffsets(zserioContext.getJunctionViewAbstractionLevel(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isJunctionViewAbstractionLevelUsed())
        {
            junctionViewAbstractionLevel_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isJunctionViewAbstractionLevelUsed())
        {
            junctionViewAbstractionLevel_.write(zserioContext.getJunctionViewAbstractionLevel(), out);
        }
    }

    private nds.instructions.metadata.InstructionsImageLayerContent content_;
    private nds.instructions.types.JunctionViewAbstractionLevel junctionViewAbstractionLevel_;
}
