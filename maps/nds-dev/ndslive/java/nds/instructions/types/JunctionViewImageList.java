/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.types;

public class JunctionViewImageList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            imageFormat_ = new zserio.runtime.array.DeltaContext();
            numImages_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getImageFormat()
        {
            return imageFormat_;
        }

        public zserio.runtime.array.DeltaContext getNumImages()
        {
            return numImages_;
        }

        private zserio.runtime.array.DeltaContext imageFormat_;
        private zserio.runtime.array.DeltaContext numImages_;
    };

    public JunctionViewImageList()
    {
    }

    public JunctionViewImageList(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public JunctionViewImageList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public JunctionViewImageList(
            nds.instructions.types.JunctionViewImageFormat imageFormat_,
            int numImages_,
            java.math.BigInteger[] setId_,
            nds.instructions.types.JunctionViewImageUsageType[] usageType_,
            nds.instructions.types.JunctionViewImageRatio[] ratio_,
            zserio.runtime.io.BitBuffer[] imageData_)
    {
        setImageFormat(imageFormat_);
        setNumImages(numImages_);
        setSetId(setId_);
        setUsageType(usageType_);
        setRatio(ratio_);
        setImageData(imageData_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        imageFormat_.initPackingContext(zserioContext.getImageFormat());
        zserioContext.getNumImages().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numImages_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += imageFormat_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numImages_);
        endBitPosition += setId_.bitSizeOfPacked(endBitPosition);
        endBitPosition += usageType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += ratio_.bitSizeOfPacked(endBitPosition);
        endBitPosition += imageData_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += imageFormat_.bitSizeOf(zserioContext.getImageFormat(), endBitPosition);
        endBitPosition += zserioContext.getNumImages().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numImages_));
        endBitPosition += setId_.bitSizeOfPacked(endBitPosition);
        endBitPosition += usageType_.bitSizeOfPacked(endBitPosition);
        endBitPosition += ratio_.bitSizeOfPacked(endBitPosition);
        endBitPosition += imageData_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.types.JunctionViewImageFormat getImageFormat()
    {
        return imageFormat_;
    }

    public void setImageFormat(nds.instructions.types.JunctionViewImageFormat imageFormat_)
    {
        this.imageFormat_ = imageFormat_;
    }

    public int getNumImages()
    {
        return numImages_;
    }

    public void setNumImages(int numImages_)
    {
        this.numImages_ = numImages_;
    }

    public java.math.BigInteger[] getSetId()
    {
        return (setId_ == null) ? null : setId_.getRawArray();
    }

    public void setSetId(java.math.BigInteger[] setId_)
    {
        this.setId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(setId_),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.instructions.types.JunctionViewImageUsageType[] getUsageType()
    {
        return (usageType_ == null) ? null : usageType_.getRawArray();
    }

    public void setUsageType(nds.instructions.types.JunctionViewImageUsageType[] usageType_)
    {
        this.usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageUsageType.class, usageType_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.instructions.types.JunctionViewImageRatio[] getRatio()
    {
        return (ratio_ == null) ? null : ratio_.getRawArray();
    }

    public void setRatio(nds.instructions.types.JunctionViewImageRatio[] ratio_)
    {
        this.ratio_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageRatio.class, ratio_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageRatio>(new ZserioElementFactory_ratio()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public zserio.runtime.io.BitBuffer[] getImageData()
    {
        return (imageData_ == null) ? null : imageData_.getRawArray();
    }

    public void setImageData(zserio.runtime.io.BitBuffer[] imageData_)
    {
        this.imageData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BitBufferRawArray(imageData_),
                new zserio.runtime.array.ArrayTraits.BitBufferArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof JunctionViewImageList)
        {
            final JunctionViewImageList that = (JunctionViewImageList)obj;

            return
                    ((imageFormat_ == null) ? that.imageFormat_ == null : imageFormat_.getValue() == that.imageFormat_.getValue()) &&
                    numImages_ == that.numImages_ &&
                    ((setId_ == null) ? that.setId_ == null : setId_.equals(that.setId_)) &&
                    ((usageType_ == null) ? that.usageType_ == null : usageType_.equals(that.usageType_)) &&
                    ((ratio_ == null) ? that.ratio_ == null : ratio_.equals(that.ratio_)) &&
                    ((imageData_ == null) ? that.imageData_ == null : imageData_.equals(that.imageData_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, imageFormat_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numImages_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, setId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, usageType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, ratio_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, imageData_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        imageFormat_ = nds.instructions.types.JunctionViewImageFormat.readEnum(in);

        numImages_ = in.readVarSize();

        setId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        setId_.readPacked(in, (int)(getNumImages()));

        usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
        usageType_.readPacked(in, (int)(getNumImages()));

        ratio_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageRatio.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageRatio>(new ZserioElementFactory_ratio()),
                zserio.runtime.array.ArrayType.NORMAL);
        ratio_.readPacked(in, (int)(getNumImages()));

        imageData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BitBufferRawArray(),
                new zserio.runtime.array.ArrayTraits.BitBufferArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        imageData_.read(in, (int)(getNumImages()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        imageFormat_ = nds.instructions.types.JunctionViewImageFormat.readEnum(zserioContext.getImageFormat(), in);

        numImages_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumImages().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        setId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        setId_.readPacked(in, (int)(getNumImages()));

        usageType_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageUsageType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageUsageType>(new ZserioElementFactory_usageType()),
                zserio.runtime.array.ArrayType.NORMAL);
        usageType_.readPacked(in, (int)(getNumImages()));

        ratio_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewImageRatio.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewImageRatio>(new ZserioElementFactory_ratio()),
                zserio.runtime.array.ArrayType.NORMAL);
        ratio_.readPacked(in, (int)(getNumImages()));

        imageData_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BitBufferRawArray(),
                new zserio.runtime.array.ArrayTraits.BitBufferArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        imageData_.read(in, (int)(getNumImages()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += imageFormat_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numImages_);
        endBitPosition = setId_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = usageType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = ratio_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = imageData_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = imageFormat_.initializeOffsets(zserioContext.getImageFormat(), endBitPosition);
        endBitPosition += zserioContext.getNumImages().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numImages_));
        endBitPosition = setId_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = usageType_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = ratio_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = imageData_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        imageFormat_.write(out);

        out.writeVarSize(numImages_);

        if (setId_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.setId: " +
                    setId_.size() + " != " + (int)(getNumImages()) + "!");
        }
        setId_.writePacked(out);

        if (usageType_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.usageType: " +
                    usageType_.size() + " != " + (int)(getNumImages()) + "!");
        }
        usageType_.writePacked(out);

        if (ratio_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.ratio: " +
                    ratio_.size() + " != " + (int)(getNumImages()) + "!");
        }
        ratio_.writePacked(out);

        if (imageData_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.imageData: " +
                    imageData_.size() + " != " + (int)(getNumImages()) + "!");
        }
        imageData_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        imageFormat_.write(zserioContext.getImageFormat(), out);

        zserioContext.getNumImages().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numImages_));

        if (setId_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.setId: " +
                    setId_.size() + " != " + (int)(getNumImages()) + "!");
        }
        setId_.writePacked(out);

        if (usageType_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.usageType: " +
                    usageType_.size() + " != " + (int)(getNumImages()) + "!");
        }
        usageType_.writePacked(out);

        if (ratio_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.ratio: " +
                    ratio_.size() + " != " + (int)(getNumImages()) + "!");
        }
        ratio_.writePacked(out);

        if (imageData_.size() != (int)(getNumImages()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionViewImageList.imageData: " +
                    imageData_.size() + " != " + (int)(getNumImages()) + "!");
        }
        imageData_.write(out);
    }

    private static final class ZserioElementFactory_usageType implements zserio.runtime.array.PackableElementFactory<nds.instructions.types.JunctionViewImageUsageType>
    {
        @Override
        public nds.instructions.types.JunctionViewImageUsageType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewImageUsageType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.instructions.types.JunctionViewImageUsageType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewImageUsageType(context, in);
        }
    }

    private static final class ZserioElementFactory_ratio implements zserio.runtime.array.PackableElementFactory<nds.instructions.types.JunctionViewImageRatio>
    {
        @Override
        public nds.instructions.types.JunctionViewImageRatio create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewImageRatio(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.instructions.types.JunctionViewImageRatio.ZserioPackingContext();
        }

        @Override
        public nds.instructions.types.JunctionViewImageRatio create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewImageRatio(context, in);
        }
    }

    private nds.instructions.types.JunctionViewImageFormat imageFormat_;
    private int numImages_;
    private zserio.runtime.array.Array setId_;
    private zserio.runtime.array.Array usageType_;
    private zserio.runtime.array.Array ratio_;
    private zserio.runtime.array.Array imageData_;
}
