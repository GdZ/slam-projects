/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.types;

public class SignpostImage implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
            position_ = new nds.core.types.PercentagePosition.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        public nds.core.types.PercentagePosition.ZserioPackingContext getPosition()
        {
            return position_;
        }

        private zserio.runtime.array.DeltaContext id_;
        private nds.core.types.PercentagePosition.ZserioPackingContext position_;
    };

    public SignpostImage()
    {
    }

    public SignpostImage(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SignpostImage(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SignpostImage(
            java.math.BigInteger id_,
            nds.core.types.PercentagePosition position_)
    {
        setId(id_);
        setPosition(position_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        position_.initPackingContext(zserioContext.getPosition());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(id_);
        endBitPosition += position_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        endBitPosition += position_.bitSizeOf(zserioContext.getPosition(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public java.math.BigInteger getId()
    {
        return id_;
    }

    public void setId(java.math.BigInteger id_)
    {
        this.id_ = id_;
    }

    public nds.core.types.PercentagePosition getPosition()
    {
        return position_;
    }

    public void setPosition(nds.core.types.PercentagePosition position_)
    {
        this.position_ = position_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SignpostImage)
        {
            final SignpostImage that = (SignpostImage)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    ((position_ == null) ? that.position_ == null : position_.equals(that.position_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt();

        position_ = new nds.core.types.PercentagePosition(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        position_ = new nds.core.types.PercentagePosition(zserioContext.getPosition(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(id_);
        endBitPosition = position_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));
        endBitPosition = position_.initializeOffsets(zserioContext.getPosition(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt(id_);

        position_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(id_));

        position_.write(zserioContext.getPosition(), out);
    }

    private java.math.BigInteger id_;
    private nds.core.types.PercentagePosition position_;
}
