/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.types;

public class JunctionView implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numScenes_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumScenes()
        {
            return numScenes_;
        }

        private zserio.runtime.array.DeltaContext numScenes_;
    };

    public JunctionView()
    {
    }

    public JunctionView(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public JunctionView(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public JunctionView(
            int numScenes_,
            nds.instructions.types.JunctionViewScene[] scenes_,
            nds.core.types.PercentagePosition[] positions_)
    {
        setNumScenes(numScenes_);
        setScenes(scenes_);
        setPositions(positions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumScenes().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numScenes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numScenes_);
        endBitPosition += scenes_.bitSizeOf(endBitPosition);
        endBitPosition += positions_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumScenes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numScenes_));
        endBitPosition += scenes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += positions_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumScenes()
    {
        return numScenes_;
    }

    public void setNumScenes(int numScenes_)
    {
        this.numScenes_ = numScenes_;
    }

    public nds.instructions.types.JunctionViewScene[] getScenes()
    {
        return (scenes_ == null) ? null : scenes_.getRawArray();
    }

    public void setScenes(nds.instructions.types.JunctionViewScene[] scenes_)
    {
        this.scenes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewScene.class, scenes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewScene>(new ZserioElementFactory_scenes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.types.PercentagePosition[] getPositions()
    {
        return (positions_ == null) ? null : positions_.getRawArray();
    }

    public void setPositions(nds.core.types.PercentagePosition[] positions_)
    {
        this.positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.PercentagePosition.class, positions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.PercentagePosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof JunctionView)
        {
            final JunctionView that = (JunctionView)obj;

            return
                    numScenes_ == that.numScenes_ &&
                    ((scenes_ == null) ? that.scenes_ == null : scenes_.equals(that.scenes_)) &&
                    ((positions_ == null) ? that.positions_ == null : positions_.equals(that.positions_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numScenes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, scenes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, positions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numScenes_ = in.readVarSize();

        scenes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewScene.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewScene>(new ZserioElementFactory_scenes()),
                zserio.runtime.array.ArrayType.NORMAL);
        scenes_.read(in, (int)(getNumScenes()));

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.PercentagePosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.PercentagePosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.readPacked(in, (int)(getNumScenes()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numScenes_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumScenes().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        scenes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.instructions.types.JunctionViewScene.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.instructions.types.JunctionViewScene>(new ZserioElementFactory_scenes()),
                zserio.runtime.array.ArrayType.NORMAL);
        scenes_.readPacked(in, (int)(getNumScenes()));

        positions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.PercentagePosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.PercentagePosition>(new ZserioElementFactory_positions()),
                zserio.runtime.array.ArrayType.NORMAL);
        positions_.readPacked(in, (int)(getNumScenes()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numScenes_);
        endBitPosition = scenes_.initializeOffsets(endBitPosition);
        endBitPosition = positions_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumScenes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numScenes_));
        endBitPosition = scenes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = positions_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numScenes_);

        if (scenes_.size() != (int)(getNumScenes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionView.scenes: " +
                    scenes_.size() + " != " + (int)(getNumScenes()) + "!");
        }
        scenes_.write(out);

        if (positions_.size() != (int)(getNumScenes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionView.positions: " +
                    positions_.size() + " != " + (int)(getNumScenes()) + "!");
        }
        positions_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumScenes().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numScenes_));

        if (scenes_.size() != (int)(getNumScenes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionView.scenes: " +
                    scenes_.size() + " != " + (int)(getNumScenes()) + "!");
        }
        scenes_.writePacked(out);

        if (positions_.size() != (int)(getNumScenes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field JunctionView.positions: " +
                    positions_.size() + " != " + (int)(getNumScenes()) + "!");
        }
        positions_.writePacked(out);
    }

    private static final class ZserioElementFactory_scenes implements zserio.runtime.array.PackableElementFactory<nds.instructions.types.JunctionViewScene>
    {
        @Override
        public nds.instructions.types.JunctionViewScene create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewScene(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.instructions.types.JunctionViewScene.ZserioPackingContext();
        }

        @Override
        public nds.instructions.types.JunctionViewScene create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.instructions.types.JunctionViewScene(context, in);
        }
    }

    private static final class ZserioElementFactory_positions implements zserio.runtime.array.PackableElementFactory<nds.core.types.PercentagePosition>
    {
        @Override
        public nds.core.types.PercentagePosition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.PercentagePosition(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.PercentagePosition.ZserioPackingContext();
        }

        @Override
        public nds.core.types.PercentagePosition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.PercentagePosition(context, in);
        }
    }

    private int numScenes_;
    private zserio.runtime.array.Array scenes_;
    private zserio.runtime.array.Array positions_;
}
