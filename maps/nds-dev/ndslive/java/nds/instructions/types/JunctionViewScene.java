/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.types;

public class JunctionViewScene implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        private zserio.runtime.array.DeltaContext content_;
    };

    public JunctionViewScene()
    {
    }

    public JunctionViewScene(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public JunctionViewScene(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public JunctionViewScene(
            nds.instructions.types.JunctionViewContent content_,
            java.math.BigInteger[] intersectionId_,
            java.math.BigInteger[] backgroundId_,
            java.math.BigInteger[] signboardId_,
            java.math.BigInteger[] arrowId_,
            java.math.BigInteger[] signboardArrowId_)
    {
        setContent(content_);
        setIntersectionId(intersectionId_);
        setBackgroundId(backgroundId_);
        setSignboardId(signboardId_);
        setArrowId(arrowId_);
        setSignboardArrowId(signboardArrowId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        endBitPosition += intersectionId_.bitSizeOfPacked(endBitPosition);
        if (isBackgroundIdUsed())
        {
            endBitPosition += backgroundId_.bitSizeOfPacked(endBitPosition);
        }
        if (isSignboardIdUsed())
        {
            endBitPosition += signboardId_.bitSizeOfPacked(endBitPosition);
        }
        if (isArrowIdUsed())
        {
            endBitPosition += arrowId_.bitSizeOfPacked(endBitPosition);
        }
        if (isSignboardArrowIdUsed())
        {
            endBitPosition += signboardArrowId_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        endBitPosition += intersectionId_.bitSizeOfPacked(endBitPosition);
        if (isBackgroundIdUsed())
        {
            endBitPosition += backgroundId_.bitSizeOfPacked(endBitPosition);
        }
        if (isSignboardIdUsed())
        {
            endBitPosition += signboardId_.bitSizeOfPacked(endBitPosition);
        }
        if (isArrowIdUsed())
        {
            endBitPosition += arrowId_.bitSizeOfPacked(endBitPosition);
        }
        if (isSignboardArrowIdUsed())
        {
            endBitPosition += signboardArrowId_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.types.JunctionViewContent getContent()
    {
        return content_;
    }

    public void setContent(nds.instructions.types.JunctionViewContent content_)
    {
        this.content_ = content_;
    }

    public java.math.BigInteger[] getIntersectionId()
    {
        return (intersectionId_ == null) ? null : intersectionId_.getRawArray();
    }

    public void setIntersectionId(java.math.BigInteger[] intersectionId_)
    {
        this.intersectionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(intersectionId_),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public java.math.BigInteger[] getBackgroundId()
    {
        return (backgroundId_ == null) ? null : backgroundId_.getRawArray();
    }

    public void setBackgroundId(java.math.BigInteger[] backgroundId_)
    {
        if (backgroundId_ == null)
        {
            this.backgroundId_ = null;
        }
        else
        {
            this.backgroundId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(backgroundId_),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isBackgroundIdUsed()
    {
        return ((getContent().and(nds.instructions.types.JunctionViewContent.Values.BACKGROUND)).equals(nds.instructions.types.JunctionViewContent.Values.BACKGROUND));
    }

    public boolean isBackgroundIdSet()
    {
        return (backgroundId_ != null);
    }

    public void resetBackgroundId()
    {
        this.backgroundId_ = null;
    }

    public java.math.BigInteger[] getSignboardId()
    {
        return (signboardId_ == null) ? null : signboardId_.getRawArray();
    }

    public void setSignboardId(java.math.BigInteger[] signboardId_)
    {
        if (signboardId_ == null)
        {
            this.signboardId_ = null;
        }
        else
        {
            this.signboardId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(signboardId_),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isSignboardIdUsed()
    {
        return ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD));
    }

    public boolean isSignboardIdSet()
    {
        return (signboardId_ != null);
    }

    public void resetSignboardId()
    {
        this.signboardId_ = null;
    }

    public java.math.BigInteger[] getArrowId()
    {
        return (arrowId_ == null) ? null : arrowId_.getRawArray();
    }

    public void setArrowId(java.math.BigInteger[] arrowId_)
    {
        if (arrowId_ == null)
        {
            this.arrowId_ = null;
        }
        else
        {
            this.arrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(arrowId_),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isArrowIdUsed()
    {
        return ((getContent().and(nds.instructions.types.JunctionViewContent.Values.ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.ARROW));
    }

    public boolean isArrowIdSet()
    {
        return (arrowId_ != null);
    }

    public void resetArrowId()
    {
        this.arrowId_ = null;
    }

    public java.math.BigInteger[] getSignboardArrowId()
    {
        return (signboardArrowId_ == null) ? null : signboardArrowId_.getRawArray();
    }

    public void setSignboardArrowId(java.math.BigInteger[] signboardArrowId_)
    {
        if (signboardArrowId_ == null)
        {
            this.signboardArrowId_ = null;
        }
        else
        {
            this.signboardArrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(signboardArrowId_),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isSignboardArrowIdUsed()
    {
        return ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW));
    }

    public boolean isSignboardArrowIdSet()
    {
        return (signboardArrowId_ != null);
    }

    public void resetSignboardArrowId()
    {
        this.signboardArrowId_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof JunctionViewScene)
        {
            final JunctionViewScene that = (JunctionViewScene)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((intersectionId_ == null) ? that.intersectionId_ == null : intersectionId_.equals(that.intersectionId_)) &&
                    ((!isBackgroundIdUsed()) ? !that.isBackgroundIdUsed() :
                        ((backgroundId_ == null) ? that.backgroundId_ == null : backgroundId_.equals(that.backgroundId_))) &&
                    ((!isSignboardIdUsed()) ? !that.isSignboardIdUsed() :
                        ((signboardId_ == null) ? that.signboardId_ == null : signboardId_.equals(that.signboardId_))) &&
                    ((!isArrowIdUsed()) ? !that.isArrowIdUsed() :
                        ((arrowId_ == null) ? that.arrowId_ == null : arrowId_.equals(that.arrowId_))) &&
                    ((!isSignboardArrowIdUsed()) ? !that.isSignboardArrowIdUsed() :
                        ((signboardArrowId_ == null) ? that.signboardArrowId_ == null : signboardArrowId_.equals(that.signboardArrowId_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, intersectionId_);
        if (isBackgroundIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, backgroundId_);
        if (isSignboardIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, signboardId_);
        if (isArrowIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, arrowId_);
        if (isSignboardArrowIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, signboardArrowId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.instructions.types.JunctionViewContent(in);

        intersectionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        intersectionId_.readPacked(in);

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.BACKGROUND)).equals(nds.instructions.types.JunctionViewContent.Values.BACKGROUND))
        {
            backgroundId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            backgroundId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD))
        {
            signboardId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            signboardId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.ARROW))
        {
            arrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            arrowId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW))
        {
            signboardArrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            signboardArrowId_.readPacked(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.instructions.types.JunctionViewContent(zserioContext.getContent(), in);

        intersectionId_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        intersectionId_.readPacked(in);

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.BACKGROUND)).equals(nds.instructions.types.JunctionViewContent.Values.BACKGROUND))
        {
            backgroundId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            backgroundId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD))
        {
            signboardId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            signboardId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.ARROW))
        {
            arrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            arrowId_.readPacked(in);
        }

        if ((getContent().and(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW)).equals(nds.instructions.types.JunctionViewContent.Values.SIGNBOARD_ARROW))
        {
            signboardArrowId_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.BigIntegerRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            signboardArrowId_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        endBitPosition = intersectionId_.initializeOffsetsPacked(endBitPosition);
        if (isBackgroundIdUsed())
        {
            endBitPosition = backgroundId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isSignboardIdUsed())
        {
            endBitPosition = signboardId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isArrowIdUsed())
        {
            endBitPosition = arrowId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isSignboardArrowIdUsed())
        {
            endBitPosition = signboardArrowId_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        endBitPosition = intersectionId_.initializeOffsetsPacked(endBitPosition);
        if (isBackgroundIdUsed())
        {
            endBitPosition = backgroundId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isSignboardIdUsed())
        {
            endBitPosition = signboardId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isArrowIdUsed())
        {
            endBitPosition = arrowId_.initializeOffsetsPacked(endBitPosition);
        }
        if (isSignboardArrowIdUsed())
        {
            endBitPosition = signboardArrowId_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        intersectionId_.writePacked(out);

        if (isBackgroundIdUsed())
        {
            backgroundId_.writePacked(out);
        }

        if (isSignboardIdUsed())
        {
            signboardId_.writePacked(out);
        }

        if (isArrowIdUsed())
        {
            arrowId_.writePacked(out);
        }

        if (isSignboardArrowIdUsed())
        {
            signboardArrowId_.writePacked(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        intersectionId_.writePacked(out);

        if (isBackgroundIdUsed())
        {
            backgroundId_.writePacked(out);
        }

        if (isSignboardIdUsed())
        {
            signboardId_.writePacked(out);
        }

        if (isArrowIdUsed())
        {
            arrowId_.writePacked(out);
        }

        if (isSignboardArrowIdUsed())
        {
            signboardArrowId_.writePacked(out);
        }
    }

    private nds.instructions.types.JunctionViewContent content_;
    private zserio.runtime.array.Array intersectionId_;
    private zserio.runtime.array.Array backgroundId_;
    private zserio.runtime.array.Array signboardId_;
    private zserio.runtime.array.Array arrowId_;
    private zserio.runtime.array.Array signboardArrowId_;
}
