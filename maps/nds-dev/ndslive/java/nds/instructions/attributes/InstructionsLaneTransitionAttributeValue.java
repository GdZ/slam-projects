/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.attributes;

public class InstructionsLaneTransitionAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            signpostImage_ = new nds.instructions.types.SignpostImage.ZserioPackingContext();
            signpostInstruction_ = new nds.instructions.types.SignpostInstruction.ZserioPackingContext();
            laneInstruction_ = new nds.instructions.types.LaneInstruction.ZserioPackingContext();
            junctionView_ = new nds.instructions.types.JunctionView.ZserioPackingContext();
        }

        public nds.instructions.types.SignpostImage.ZserioPackingContext getSignpostImage()
        {
            return signpostImage_;
        }

        public nds.instructions.types.SignpostInstruction.ZserioPackingContext getSignpostInstruction()
        {
            return signpostInstruction_;
        }

        public nds.instructions.types.LaneInstruction.ZserioPackingContext getLaneInstruction()
        {
            return laneInstruction_;
        }

        public nds.instructions.types.JunctionView.ZserioPackingContext getJunctionView()
        {
            return junctionView_;
        }

        private nds.instructions.types.SignpostImage.ZserioPackingContext signpostImage_;
        private nds.instructions.types.SignpostInstruction.ZserioPackingContext signpostInstruction_;
        private nds.instructions.types.LaneInstruction.ZserioPackingContext laneInstruction_;
        private nds.instructions.types.JunctionView.ZserioPackingContext junctionView_;
    };

    public InstructionsLaneTransitionAttributeValue(
            nds.instructions.attributes.InstructionsLaneTransitionAttributeType type_)
    {
        this.type_ = type_;
    }

    public InstructionsLaneTransitionAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.instructions.attributes.InstructionsLaneTransitionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public InstructionsLaneTransitionAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.instructions.attributes.InstructionsLaneTransitionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            return CHOICE_signpostImage;
        case SIGNPOST_INSTRUCTION:
            return CHOICE_signpostInstruction;
        case LANE_INSTRUCTION:
            return CHOICE_laneInstruction;
        case JUNCTION_VIEW:
            return CHOICE_junctionView;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            getSignpostImage().initPackingContext(zserioContext.getSignpostImage());
            break;
        case SIGNPOST_INSTRUCTION:
            getSignpostInstruction().initPackingContext(zserioContext.getSignpostInstruction());
            break;
        case LANE_INSTRUCTION:
            getLaneInstruction().initPackingContext(zserioContext.getLaneInstruction());
            break;
        case JUNCTION_VIEW:
            getJunctionView().initPackingContext(zserioContext.getJunctionView());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SIGNPOST_IMAGE:
            endBitPosition += getSignpostImage().bitSizeOf(endBitPosition);
            break;
        case SIGNPOST_INSTRUCTION:
            endBitPosition += getSignpostInstruction().bitSizeOf(endBitPosition);
            break;
        case LANE_INSTRUCTION:
            endBitPosition += getLaneInstruction().bitSizeOf(endBitPosition);
            break;
        case JUNCTION_VIEW:
            endBitPosition += getJunctionView().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SIGNPOST_IMAGE:
            endBitPosition += getSignpostImage().bitSizeOf(zserioContext.getSignpostImage(), endBitPosition);
            break;
        case SIGNPOST_INSTRUCTION:
            endBitPosition += getSignpostInstruction().bitSizeOf(zserioContext.getSignpostInstruction(), endBitPosition);
            break;
        case LANE_INSTRUCTION:
            endBitPosition += getLaneInstruction().bitSizeOf(zserioContext.getLaneInstruction(), endBitPosition);
            break;
        case JUNCTION_VIEW:
            endBitPosition += getJunctionView().bitSizeOf(zserioContext.getJunctionView(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.attributes.InstructionsLaneTransitionAttributeType getType()
    {
        return this.type_;
    }

    public nds.instructions.types.SignpostImage getSignpostImage()
    {
        return (nds.instructions.types.SignpostImage)objectChoice;
    }

    public void setSignpostImage(nds.instructions.types.SignpostImage signpostImage_)
    {
        objectChoice = signpostImage_;
    }

    public nds.instructions.types.SignpostInstruction getSignpostInstruction()
    {
        return (nds.instructions.types.SignpostInstruction)objectChoice;
    }

    public void setSignpostInstruction(nds.instructions.types.SignpostInstruction signpostInstruction_)
    {
        objectChoice = signpostInstruction_;
    }

    public nds.instructions.types.LaneInstruction getLaneInstruction()
    {
        return (nds.instructions.types.LaneInstruction)objectChoice;
    }

    public void setLaneInstruction(nds.instructions.types.LaneInstruction laneInstruction_)
    {
        objectChoice = laneInstruction_;
    }

    public nds.instructions.types.JunctionView getJunctionView()
    {
        return (nds.instructions.types.JunctionView)objectChoice;
    }

    public void setJunctionView(nds.instructions.types.JunctionView junctionView_)
    {
        objectChoice = junctionView_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof InstructionsLaneTransitionAttributeValue)
        {
            final InstructionsLaneTransitionAttributeValue that = (InstructionsLaneTransitionAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case SIGNPOST_IMAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.instructions.types.SignpostImage)objectChoice);
                break;
            case SIGNPOST_INSTRUCTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.instructions.types.SignpostInstruction)objectChoice);
                break;
            case LANE_INSTRUCTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.instructions.types.LaneInstruction)objectChoice);
                break;
            case JUNCTION_VIEW:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.instructions.types.JunctionView)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            objectChoice = new nds.instructions.types.SignpostImage(in);
            break;
        case SIGNPOST_INSTRUCTION:
            objectChoice = new nds.instructions.types.SignpostInstruction(in);
            break;
        case LANE_INSTRUCTION:
            objectChoice = new nds.instructions.types.LaneInstruction(in);
            break;
        case JUNCTION_VIEW:
            objectChoice = new nds.instructions.types.JunctionView(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            objectChoice = new nds.instructions.types.SignpostImage(zserioContext.getSignpostImage(), in);
            break;
        case SIGNPOST_INSTRUCTION:
            objectChoice = new nds.instructions.types.SignpostInstruction(zserioContext.getSignpostInstruction(), in);
            break;
        case LANE_INSTRUCTION:
            objectChoice = new nds.instructions.types.LaneInstruction(zserioContext.getLaneInstruction(), in);
            break;
        case JUNCTION_VIEW:
            objectChoice = new nds.instructions.types.JunctionView(zserioContext.getJunctionView(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SIGNPOST_IMAGE:
            {
                endBitPosition = getSignpostImage().initializeOffsets(endBitPosition);
            }
            break;
        case SIGNPOST_INSTRUCTION:
            {
                endBitPosition = getSignpostInstruction().initializeOffsets(endBitPosition);
            }
            break;
        case LANE_INSTRUCTION:
            {
                endBitPosition = getLaneInstruction().initializeOffsets(endBitPosition);
            }
            break;
        case JUNCTION_VIEW:
            {
                endBitPosition = getJunctionView().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SIGNPOST_IMAGE:
            {
                endBitPosition = getSignpostImage().initializeOffsets(zserioContext.getSignpostImage(), endBitPosition);
            }
            break;
        case SIGNPOST_INSTRUCTION:
            {
                endBitPosition = getSignpostInstruction().initializeOffsets(zserioContext.getSignpostInstruction(), endBitPosition);
            }
            break;
        case LANE_INSTRUCTION:
            {
                endBitPosition = getLaneInstruction().initializeOffsets(zserioContext.getLaneInstruction(), endBitPosition);
            }
            break;
        case JUNCTION_VIEW:
            {
                endBitPosition = getJunctionView().initializeOffsets(zserioContext.getJunctionView(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            getSignpostImage().write(out);
            break;
        case SIGNPOST_INSTRUCTION:
            getSignpostInstruction().write(out);
            break;
        case LANE_INSTRUCTION:
            getLaneInstruction().write(out);
            break;
        case JUNCTION_VIEW:
            getJunctionView().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SIGNPOST_IMAGE:
            getSignpostImage().write(zserioContext.getSignpostImage(), out);
            break;
        case SIGNPOST_INSTRUCTION:
            getSignpostInstruction().write(zserioContext.getSignpostInstruction(), out);
            break;
        case LANE_INSTRUCTION:
            getLaneInstruction().write(zserioContext.getLaneInstruction(), out);
            break;
        case JUNCTION_VIEW:
            getJunctionView().write(zserioContext.getJunctionView(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice InstructionsLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_signpostImage = 0;
    public static final int CHOICE_signpostInstruction = 1;
    public static final int CHOICE_laneInstruction = 2;
    public static final int CHOICE_junctionView = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.instructions.attributes.InstructionsLaneTransitionAttributeType type_;
    private java.lang.Object objectChoice;
}
