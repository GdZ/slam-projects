/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.layer;

public class InstructionsImageLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            signpostImageList_ = new nds.instructions.types.SignpostImageList.ZserioPackingContext();
            junctionViewImageList_ = new nds.instructions.types.JunctionViewImageList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.instructions.types.SignpostImageList.ZserioPackingContext getSignpostImageList()
        {
            return signpostImageList_;
        }

        public nds.instructions.types.JunctionViewImageList.ZserioPackingContext getJunctionViewImageList()
        {
            return junctionViewImageList_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.instructions.types.SignpostImageList.ZserioPackingContext signpostImageList_;
        private nds.instructions.types.JunctionViewImageList.ZserioPackingContext junctionViewImageList_;
    };

    public InstructionsImageLayer()
    {
    }

    public InstructionsImageLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public InstructionsImageLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public InstructionsImageLayer(
            nds.instructions.metadata.InstructionsImageLayerContent content_,
            nds.instructions.types.SignpostImageList signpostImageList_,
            nds.instructions.types.JunctionViewImageList junctionViewImageList_)
    {
        setContent(content_);
        setSignpostImageList(signpostImageList_);
        setJunctionViewImageList(junctionViewImageList_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isSignpostImageListUsed())
        {
            signpostImageList_.initPackingContext(zserioContext.getSignpostImageList());
        }
        if (isJunctionViewImageListUsed())
        {
            junctionViewImageList_.initPackingContext(zserioContext.getJunctionViewImageList());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isSignpostImageListUsed())
        {
            endBitPosition += signpostImageList_.bitSizeOf(endBitPosition);
        }
        if (isJunctionViewImageListUsed())
        {
            endBitPosition += junctionViewImageList_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isSignpostImageListUsed())
        {
            endBitPosition += signpostImageList_.bitSizeOf(zserioContext.getSignpostImageList(), endBitPosition);
        }
        if (isJunctionViewImageListUsed())
        {
            endBitPosition += junctionViewImageList_.bitSizeOf(zserioContext.getJunctionViewImageList(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.metadata.InstructionsImageLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.instructions.metadata.InstructionsImageLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.instructions.types.SignpostImageList getSignpostImageList()
    {
        return signpostImageList_;
    }

    public void setSignpostImageList(nds.instructions.types.SignpostImageList signpostImageList_)
    {
        this.signpostImageList_ = signpostImageList_;
    }

    public boolean isSignpostImageListUsed()
    {
        return ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS));
    }

    public boolean isSignpostImageListSet()
    {
        return (signpostImageList_ != null);
    }

    public void resetSignpostImageList()
    {
        this.signpostImageList_ = null;
    }

    public nds.instructions.types.JunctionViewImageList getJunctionViewImageList()
    {
        return junctionViewImageList_;
    }

    public void setJunctionViewImageList(nds.instructions.types.JunctionViewImageList junctionViewImageList_)
    {
        this.junctionViewImageList_ = junctionViewImageList_;
    }

    public boolean isJunctionViewImageListUsed()
    {
        return ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW));
    }

    public boolean isJunctionViewImageListSet()
    {
        return (junctionViewImageList_ != null);
    }

    public void resetJunctionViewImageList()
    {
        this.junctionViewImageList_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof InstructionsImageLayer)
        {
            final InstructionsImageLayer that = (InstructionsImageLayer)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isSignpostImageListUsed()) ? !that.isSignpostImageListUsed() :
                        ((signpostImageList_ == null) ? that.signpostImageList_ == null : signpostImageList_.equals(that.signpostImageList_))) &&
                    ((!isJunctionViewImageListUsed()) ? !that.isJunctionViewImageListUsed() :
                        ((junctionViewImageList_ == null) ? that.junctionViewImageList_ == null : junctionViewImageList_.equals(that.junctionViewImageList_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isSignpostImageListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, signpostImageList_);
        if (isJunctionViewImageListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, junctionViewImageList_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.instructions.metadata.InstructionsImageLayerContent(in);

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS))
        {
            signpostImageList_ = new nds.instructions.types.SignpostImageList(in);
        }

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW))
        {
            junctionViewImageList_ = new nds.instructions.types.JunctionViewImageList(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.instructions.metadata.InstructionsImageLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.SIGNPOSTS))
        {
            signpostImageList_ = new nds.instructions.types.SignpostImageList(zserioContext.getSignpostImageList(), in);
        }

        if ((getContent().and(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW)).equals(nds.instructions.metadata.InstructionsImageLayerContent.Values.JUNCTION_VIEW))
        {
            junctionViewImageList_ = new nds.instructions.types.JunctionViewImageList(zserioContext.getJunctionViewImageList(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isSignpostImageListUsed())
        {
            endBitPosition = signpostImageList_.initializeOffsets(endBitPosition);
        }
        if (isJunctionViewImageListUsed())
        {
            endBitPosition = junctionViewImageList_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isSignpostImageListUsed())
        {
            endBitPosition = signpostImageList_.initializeOffsets(zserioContext.getSignpostImageList(), endBitPosition);
        }
        if (isJunctionViewImageListUsed())
        {
            endBitPosition = junctionViewImageList_.initializeOffsets(zserioContext.getJunctionViewImageList(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isSignpostImageListUsed())
        {
            signpostImageList_.write(out);
        }

        if (isJunctionViewImageListUsed())
        {
            junctionViewImageList_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isSignpostImageListUsed())
        {
            signpostImageList_.write(zserioContext.getSignpostImageList(), out);
        }

        if (isJunctionViewImageListUsed())
        {
            junctionViewImageList_.write(zserioContext.getJunctionViewImageList(), out);
        }
    }

    private nds.instructions.metadata.InstructionsImageLayerContent content_;
    private nds.instructions.types.SignpostImageList signpostImageList_;
    private nds.instructions.types.JunctionViewImageList junctionViewImageList_;
}
