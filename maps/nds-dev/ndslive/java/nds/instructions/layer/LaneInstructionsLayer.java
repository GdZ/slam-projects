/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.instructions.layer;

public class LaneInstructionsLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            laneTransitionAttributeMaps_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList.ZserioPackingContext();
            laneTransitionAttributeSets_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList.ZserioPackingContext getLaneTransitionAttributeMaps()
        {
            return laneTransitionAttributeMaps_;
        }

        public nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList.ZserioPackingContext getLaneTransitionAttributeSets()
        {
            return laneTransitionAttributeSets_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList.ZserioPackingContext laneTransitionAttributeMaps_;
        private nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList.ZserioPackingContext laneTransitionAttributeSets_;
    };

    public LaneInstructionsLayer()
    {
    }

    public LaneInstructionsLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneInstructionsLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneInstructionsLayer(
            nds.instructions.metadata.LaneInstructionsLayerContent content_,
            nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList laneTransitionAttributeMaps_,
            nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList laneTransitionAttributeSets_)
    {
        setContent(content_);
        setLaneTransitionAttributeMaps(laneTransitionAttributeMaps_);
        setLaneTransitionAttributeSets(laneTransitionAttributeSets_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isLaneTransitionAttributeMapsUsed())
        {
            laneTransitionAttributeMaps_.initPackingContext(zserioContext.getLaneTransitionAttributeMaps());
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            laneTransitionAttributeSets_.initPackingContext(zserioContext.getLaneTransitionAttributeSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition += laneTransitionAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition += laneTransitionAttributeSets_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition += laneTransitionAttributeMaps_.bitSizeOf(zserioContext.getLaneTransitionAttributeMaps(), endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition += laneTransitionAttributeSets_.bitSizeOf(zserioContext.getLaneTransitionAttributeSets(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.instructions.metadata.LaneInstructionsLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.instructions.metadata.LaneInstructionsLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList getLaneTransitionAttributeMaps()
    {
        return laneTransitionAttributeMaps_;
    }

    public void setLaneTransitionAttributeMaps(nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList laneTransitionAttributeMaps_)
    {
        this.laneTransitionAttributeMaps_ = laneTransitionAttributeMaps_;
    }

    public boolean isLaneTransitionAttributeMapsUsed()
    {
        return ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS));
    }

    public boolean isLaneTransitionAttributeMapsSet()
    {
        return (laneTransitionAttributeMaps_ != null);
    }

    public void resetLaneTransitionAttributeMaps()
    {
        this.laneTransitionAttributeMaps_ = null;
    }

    public nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList getLaneTransitionAttributeSets()
    {
        return laneTransitionAttributeSets_;
    }

    public void setLaneTransitionAttributeSets(nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList laneTransitionAttributeSets_)
    {
        this.laneTransitionAttributeSets_ = laneTransitionAttributeSets_;
    }

    public boolean isLaneTransitionAttributeSetsUsed()
    {
        return ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS));
    }

    public boolean isLaneTransitionAttributeSetsSet()
    {
        return (laneTransitionAttributeSets_ != null);
    }

    public void resetLaneTransitionAttributeSets()
    {
        this.laneTransitionAttributeSets_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneInstructionsLayer)
        {
            final LaneInstructionsLayer that = (LaneInstructionsLayer)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isLaneTransitionAttributeMapsUsed()) ? !that.isLaneTransitionAttributeMapsUsed() :
                        ((laneTransitionAttributeMaps_ == null) ? that.laneTransitionAttributeMaps_ == null : laneTransitionAttributeMaps_.equals(that.laneTransitionAttributeMaps_))) &&
                    ((!isLaneTransitionAttributeSetsUsed()) ? !that.isLaneTransitionAttributeSetsUsed() :
                        ((laneTransitionAttributeSets_ == null) ? that.laneTransitionAttributeSets_ == null : laneTransitionAttributeSets_.equals(that.laneTransitionAttributeSets_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isLaneTransitionAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneTransitionAttributeMaps_);
        if (isLaneTransitionAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneTransitionAttributeSets_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.instructions.metadata.LaneInstructionsLayerContent(in);

        if ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            laneTransitionAttributeMaps_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS))
        {
            laneTransitionAttributeSets_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList(in, (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.instructions.metadata.LaneInstructionsLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            laneTransitionAttributeMaps_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList(zserioContext.getLaneTransitionAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.instructions.metadata.LaneInstructionsLayerContent.Values.LANE_TRANSITION_SETS))
        {
            laneTransitionAttributeSets_ = new nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList(zserioContext.getLaneTransitionAttributeSets(), in, (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition = laneTransitionAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition = laneTransitionAttributeSets_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isLaneTransitionAttributeMapsUsed())
        {
            endBitPosition = laneTransitionAttributeMaps_.initializeOffsets(zserioContext.getLaneTransitionAttributeMaps(), endBitPosition);
        }
        if (isLaneTransitionAttributeSetsUsed())
        {
            endBitPosition = laneTransitionAttributeSets_.initializeOffsets(zserioContext.getLaneTransitionAttributeSets(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isLaneTransitionAttributeMapsUsed())
        {
            // check parameters
            if (laneTransitionAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeMaps: " +
                        laneTransitionAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneTransitionAttributeMaps_.write(out);
        }

        if (isLaneTransitionAttributeSetsUsed())
        {
            // check parameters
            if (laneTransitionAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneInstructionsLayer.laneTransitionAttributeSets: " +
                        laneTransitionAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneTransitionAttributeSets_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isLaneTransitionAttributeMapsUsed())
        {
            laneTransitionAttributeMaps_.write(zserioContext.getLaneTransitionAttributeMaps(), out);
        }

        if (isLaneTransitionAttributeSetsUsed())
        {
            laneTransitionAttributeSets_.write(zserioContext.getLaneTransitionAttributeSets(), out);
        }
    }

    private nds.instructions.metadata.LaneInstructionsLayerContent content_;
    private nds.instructions.instantiations.InstructionsLaneTransitionAttributeMapList laneTransitionAttributeMaps_;
    private nds.instructions.instantiations.InstructionsLaneTransitionAttributeSetList laneTransitionAttributeSets_;
}
