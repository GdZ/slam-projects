/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.traffic.metadata;

public class LaneTrafficLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            laneRangeAttributeMetadata_ = new nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata.ZserioPackingContext getLaneRangeAttributeMetadata()
        {
            return laneRangeAttributeMetadata_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata.ZserioPackingContext laneRangeAttributeMetadata_;
    };

    public LaneTrafficLayerMetadata()
    {
    }

    public LaneTrafficLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneTrafficLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneTrafficLayerMetadata(
            nds.traffic.metadata.LaneTrafficLayerContent content_,
            nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata laneRangeAttributeMetadata_,
            nds.core.types.LaneType[] coveredLaneTypes_)
    {
        setContent(content_);
        setLaneRangeAttributeMetadata(laneRangeAttributeMetadata_);
        setCoveredLaneTypes(coveredLaneTypes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isLaneRangeAttributeMetadataUsed())
        {
            laneRangeAttributeMetadata_.initPackingContext(zserioContext.getLaneRangeAttributeMetadata());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMetadataUsed())
        {
            endBitPosition += laneRangeAttributeMetadata_.bitSizeOf(endBitPosition);
        }
        endBitPosition += coveredLaneTypes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMetadataUsed())
        {
            endBitPosition += laneRangeAttributeMetadata_.bitSizeOf(zserioContext.getLaneRangeAttributeMetadata(), endBitPosition);
        }
        endBitPosition += coveredLaneTypes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.traffic.metadata.LaneTrafficLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.traffic.metadata.LaneTrafficLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata getLaneRangeAttributeMetadata()
    {
        return laneRangeAttributeMetadata_;
    }

    public void setLaneRangeAttributeMetadata(nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata laneRangeAttributeMetadata_)
    {
        this.laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
    }

    public boolean isLaneRangeAttributeMetadataUsed()
    {
        return ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS) || (getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS));
    }

    public boolean isLaneRangeAttributeMetadataSet()
    {
        return (laneRangeAttributeMetadata_ != null);
    }

    public void resetLaneRangeAttributeMetadata()
    {
        this.laneRangeAttributeMetadata_ = null;
    }

    public nds.core.types.LaneType[] getCoveredLaneTypes()
    {
        return (coveredLaneTypes_ == null) ? null : coveredLaneTypes_.getRawArray();
    }

    public void setCoveredLaneTypes(nds.core.types.LaneType[] coveredLaneTypes_)
    {
        this.coveredLaneTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class, coveredLaneTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_coveredLaneTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneTrafficLayerMetadata)
        {
            final LaneTrafficLayerMetadata that = (LaneTrafficLayerMetadata)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isLaneRangeAttributeMetadataUsed()) ? !that.isLaneRangeAttributeMetadataUsed() :
                        ((laneRangeAttributeMetadata_ == null) ? that.laneRangeAttributeMetadata_ == null : laneRangeAttributeMetadata_.equals(that.laneRangeAttributeMetadata_))) &&
                    ((coveredLaneTypes_ == null) ? that.coveredLaneTypes_ == null : coveredLaneTypes_.equals(that.coveredLaneTypes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isLaneRangeAttributeMetadataUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRangeAttributeMetadata_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coveredLaneTypes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.traffic.metadata.LaneTrafficLayerContent(in);

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS) || (getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeMetadata_ = new nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata(in);
        }

        coveredLaneTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_coveredLaneTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredLaneTypes_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.traffic.metadata.LaneTrafficLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS) || (getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeMetadata_ = new nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata(zserioContext.getLaneRangeAttributeMetadata(), in);
        }

        coveredLaneTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_coveredLaneTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredLaneTypes_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMetadataUsed())
        {
            endBitPosition = laneRangeAttributeMetadata_.initializeOffsets(endBitPosition);
        }
        endBitPosition = coveredLaneTypes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMetadataUsed())
        {
            endBitPosition = laneRangeAttributeMetadata_.initializeOffsets(zserioContext.getLaneRangeAttributeMetadata(), endBitPosition);
        }
        endBitPosition = coveredLaneTypes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isLaneRangeAttributeMetadataUsed())
        {
            laneRangeAttributeMetadata_.write(out);
        }

        coveredLaneTypes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isLaneRangeAttributeMetadataUsed())
        {
            laneRangeAttributeMetadata_.write(zserioContext.getLaneRangeAttributeMetadata(), out);
        }

        coveredLaneTypes_.writePacked(out);
    }

    private static final class ZserioElementFactory_coveredLaneTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.LaneType>
    {
        @Override
        public nds.core.types.LaneType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.LaneType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.LaneType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.LaneType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.LaneType(context, in);
        }
    }

    private nds.traffic.metadata.LaneTrafficLayerContent content_;
    private nds.traffic.instantiations.TrafficLaneRangeAttributeMetadata laneRangeAttributeMetadata_;
    private zserio.runtime.array.Array coveredLaneTypes_;
}
