/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.traffic.properties;

public class TrafficPropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            value_ = new nds.traffic.properties.PropertyValue.ZserioPackingContext();
            coreValue_ = new nds.core.properties.CorePropertyValue.ZserioPackingContext();
        }

        public nds.traffic.properties.PropertyValue.ZserioPackingContext getValue()
        {
            return value_;
        }

        public nds.core.properties.CorePropertyValue.ZserioPackingContext getCoreValue()
        {
            return coreValue_;
        }

        private nds.traffic.properties.PropertyValue.ZserioPackingContext value_;
        private nds.core.properties.CorePropertyValue.ZserioPackingContext coreValue_;
    };

    public TrafficPropertyValue(
            nds.traffic.properties.TrafficPropertyType type_)
    {
        this.type_ = type_;
    }

    public TrafficPropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.traffic.properties.TrafficPropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public TrafficPropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.traffic.properties.TrafficPropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public TrafficPropertyValue(
            nds.traffic.properties.TrafficPropertyType type_,
            nds.traffic.properties.PropertyValue value_,
            nds.core.properties.CorePropertyValue coreValue_)
    {
        this(type_);

        setValue(value_);
        setCoreValue(coreValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isValueUsed())
        {
            value_.initPackingContext(zserioContext.getValue());
        }
        if (isCoreValueUsed())
        {
            coreValue_.initPackingContext(zserioContext.getCoreValue());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isValueUsed())
        {
            endBitPosition += value_.bitSizeOf(endBitPosition);
        }
        if (isCoreValueUsed())
        {
            endBitPosition += coreValue_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isValueUsed())
        {
            endBitPosition += value_.bitSizeOf(zserioContext.getValue(), endBitPosition);
        }
        if (isCoreValueUsed())
        {
            endBitPosition += coreValue_.bitSizeOf(zserioContext.getCoreValue(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.traffic.properties.TrafficPropertyType getType()
    {
        return this.type_;
    }

    public nds.traffic.properties.PropertyValue getValue()
    {
        return value_;
    }

    public void setValue(nds.traffic.properties.PropertyValue value_)
    {
        this.value_ = value_;
    }

    public boolean isValueUsed()
    {
        return (getType().getType() != nds.traffic.properties.PropertyType.CORE);
    }

    public boolean isValueSet()
    {
        return (value_ != null);
    }

    public void resetValue()
    {
        this.value_ = null;
    }

    public nds.core.properties.CorePropertyValue getCoreValue()
    {
        return coreValue_;
    }

    public void setCoreValue(nds.core.properties.CorePropertyValue coreValue_)
    {
        this.coreValue_ = coreValue_;
    }

    public boolean isCoreValueUsed()
    {
        return (getType().getType() == nds.traffic.properties.PropertyType.CORE);
    }

    public boolean isCoreValueSet()
    {
        return (coreValue_ != null);
    }

    public void resetCoreValue()
    {
        this.coreValue_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficPropertyValue)
        {
            final TrafficPropertyValue that = (TrafficPropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.equals(that.type_)) &&
                    ((!isValueUsed()) ? !that.isValueUsed() :
                        ((value_ == null) ? that.value_ == null : value_.equals(that.value_))) &&
                    ((!isCoreValueUsed()) ? !that.isCoreValueUsed() :
                        ((coreValue_ == null) ? that.coreValue_ == null : coreValue_.equals(that.coreValue_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (isValueUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, value_);
        if (isCoreValueUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, coreValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (getType().getType() != nds.traffic.properties.PropertyType.CORE)
        {
            value_ = new nds.traffic.properties.PropertyValue(in, getType().getType());
        }

        if (getType().getType() == nds.traffic.properties.PropertyType.CORE)
        {
            coreValue_ = new nds.core.properties.CorePropertyValue(in, getType().getCoreType());
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (getType().getType() != nds.traffic.properties.PropertyType.CORE)
        {
            value_ = new nds.traffic.properties.PropertyValue(zserioContext.getValue(), in, getType().getType());
        }

        if (getType().getType() == nds.traffic.properties.PropertyType.CORE)
        {
            coreValue_ = new nds.core.properties.CorePropertyValue(zserioContext.getCoreValue(), in, getType().getCoreType());
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isValueUsed())
        {
            endBitPosition = value_.initializeOffsets(endBitPosition);
        }
        if (isCoreValueUsed())
        {
            endBitPosition = coreValue_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isValueUsed())
        {
            endBitPosition = value_.initializeOffsets(zserioContext.getValue(), endBitPosition);
        }
        if (isCoreValueUsed())
        {
            endBitPosition = coreValue_.initializeOffsets(zserioContext.getCoreValue(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isValueUsed())
        {
            // check parameters
            if (value_.getType() != (getType().getType()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field TrafficPropertyValue.value!");
            }
            value_.write(out);
        }

        if (isCoreValueUsed())
        {
            // check parameters
            if (coreValue_.getType() != (getType().getCoreType()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field TrafficPropertyValue.coreValue!");
            }
            coreValue_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isValueUsed())
        {
            value_.write(zserioContext.getValue(), out);
        }

        if (isCoreValueUsed())
        {
            coreValue_.write(zserioContext.getCoreValue(), out);
        }
    }

    private final nds.traffic.properties.TrafficPropertyType type_;
    private nds.traffic.properties.PropertyValue value_;
    private nds.core.properties.CorePropertyValue coreValue_;
}
