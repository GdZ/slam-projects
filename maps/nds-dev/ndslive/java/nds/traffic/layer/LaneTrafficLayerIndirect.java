/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.traffic.layer;

public class LaneTrafficLayerIndirect implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            laneRangeAttributeMaps_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList.ZserioPackingContext();
            laneRangeAttributeSets_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList.ZserioPackingContext getLaneRangeAttributeMaps()
        {
            return laneRangeAttributeMaps_;
        }

        public nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList.ZserioPackingContext getLaneRangeAttributeSets()
        {
            return laneRangeAttributeSets_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList.ZserioPackingContext laneRangeAttributeMaps_;
        private nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList.ZserioPackingContext laneRangeAttributeSets_;
    };

    public LaneTrafficLayerIndirect()
    {
    }

    public LaneTrafficLayerIndirect(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneTrafficLayerIndirect(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneTrafficLayerIndirect(
            nds.traffic.metadata.LaneTrafficLayerContent content_,
            nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList laneRangeAttributeMaps_,
            nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList laneRangeAttributeSets_)
    {
        setContent(content_);
        setLaneRangeAttributeMaps(laneRangeAttributeMaps_);
        setLaneRangeAttributeSets(laneRangeAttributeSets_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isLaneRangeAttributeMapsUsed())
        {
            laneRangeAttributeMaps_.initPackingContext(zserioContext.getLaneRangeAttributeMaps());
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            laneRangeAttributeSets_.initPackingContext(zserioContext.getLaneRangeAttributeSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition += laneRangeAttributeMaps_.bitSizeOf(endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition += laneRangeAttributeSets_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition += laneRangeAttributeMaps_.bitSizeOf(zserioContext.getLaneRangeAttributeMaps(), endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition += laneRangeAttributeSets_.bitSizeOf(zserioContext.getLaneRangeAttributeSets(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.traffic.metadata.LaneTrafficLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.traffic.metadata.LaneTrafficLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList getLaneRangeAttributeMaps()
    {
        return laneRangeAttributeMaps_;
    }

    public void setLaneRangeAttributeMaps(nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList laneRangeAttributeMaps_)
    {
        this.laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
    }

    public boolean isLaneRangeAttributeMapsUsed()
    {
        return ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS));
    }

    public boolean isLaneRangeAttributeMapsSet()
    {
        return (laneRangeAttributeMaps_ != null);
    }

    public void resetLaneRangeAttributeMaps()
    {
        this.laneRangeAttributeMaps_ = null;
    }

    public nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList getLaneRangeAttributeSets()
    {
        return laneRangeAttributeSets_;
    }

    public void setLaneRangeAttributeSets(nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList laneRangeAttributeSets_)
    {
        this.laneRangeAttributeSets_ = laneRangeAttributeSets_;
    }

    public boolean isLaneRangeAttributeSetsUsed()
    {
        return ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS));
    }

    public boolean isLaneRangeAttributeSetsSet()
    {
        return (laneRangeAttributeSets_ != null);
    }

    public void resetLaneRangeAttributeSets()
    {
        this.laneRangeAttributeSets_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneTrafficLayerIndirect)
        {
            final LaneTrafficLayerIndirect that = (LaneTrafficLayerIndirect)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isLaneRangeAttributeMapsUsed()) ? !that.isLaneRangeAttributeMapsUsed() :
                        ((laneRangeAttributeMaps_ == null) ? that.laneRangeAttributeMaps_ == null : laneRangeAttributeMaps_.equals(that.laneRangeAttributeMaps_))) &&
                    ((!isLaneRangeAttributeSetsUsed()) ? !that.isLaneRangeAttributeSetsUsed() :
                        ((laneRangeAttributeSets_ == null) ? that.laneRangeAttributeSets_ == null : laneRangeAttributeSets_.equals(that.laneRangeAttributeSets_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isLaneRangeAttributeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRangeAttributeMaps_);
        if (isLaneRangeAttributeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRangeAttributeSets_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.traffic.metadata.LaneTrafficLayerContent(in);

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS))
        {
            laneRangeAttributeMaps_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeSets_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList(in, (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.traffic.metadata.LaneTrafficLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_MAPS))
        {
            laneRangeAttributeMaps_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList(zserioContext.getLaneRangeAttributeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS)).equals(nds.traffic.metadata.LaneTrafficLayerContent.Values.LANE_RANGE_SETS))
        {
            laneRangeAttributeSets_ = new nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList(zserioContext.getLaneRangeAttributeSets(), in, (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition = laneRangeAttributeMaps_.initializeOffsets(endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition = laneRangeAttributeSets_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isLaneRangeAttributeMapsUsed())
        {
            endBitPosition = laneRangeAttributeMaps_.initializeOffsets(zserioContext.getLaneRangeAttributeMaps(), endBitPosition);
        }
        if (isLaneRangeAttributeSetsUsed())
        {
            endBitPosition = laneRangeAttributeSets_.initializeOffsets(zserioContext.getLaneRangeAttributeSets(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isLaneRangeAttributeMapsUsed())
        {
            // check parameters
            if (laneRangeAttributeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeMaps: " +
                        laneRangeAttributeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneRangeAttributeMaps_.write(out);
        }

        if (isLaneRangeAttributeSetsUsed())
        {
            // check parameters
            if (laneRangeAttributeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneTrafficLayerIndirect.laneRangeAttributeSets: " +
                        laneRangeAttributeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            laneRangeAttributeSets_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isLaneRangeAttributeMapsUsed())
        {
            laneRangeAttributeMaps_.write(zserioContext.getLaneRangeAttributeMaps(), out);
        }

        if (isLaneRangeAttributeSetsUsed())
        {
            laneRangeAttributeSets_.write(zserioContext.getLaneRangeAttributeSets(), out);
        }
    }

    private nds.traffic.metadata.LaneTrafficLayerContent content_;
    private nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeMapList laneRangeAttributeMaps_;
    private nds.traffic.instantiations.TrafficIndirectLaneRangeAttributeSetList laneRangeAttributeSets_;
}
