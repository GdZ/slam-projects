/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.traffic.types;

public class TrafficEvent implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            reason_ = new zserio.runtime.array.DeltaContext();
            delay_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getReason()
        {
            return reason_;
        }

        public zserio.runtime.array.DeltaContext getDelay()
        {
            return delay_;
        }

        private zserio.runtime.array.DeltaContext reason_;
        private zserio.runtime.array.DeltaContext delay_;
    };

    public TrafficEvent()
    {
    }

    public TrafficEvent(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TrafficEvent(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TrafficEvent(
            nds.traffic.types.TrafficEventReason reason_,
            java.math.BigInteger delay_,
            boolean blockedPassage_)
    {
        setReason(reason_);
        setDelay(delay_);
        setBlockedPassage(blockedPassage_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        reason_.initPackingContext(zserioContext.getReason());
        zserioContext.getDelay().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(delay_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += reason_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(delay_);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += reason_.bitSizeOf(zserioContext.getReason(), endBitPosition);
        endBitPosition += zserioContext.getDelay().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(delay_));
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public nds.traffic.types.TrafficEventReason getReason()
    {
        return reason_;
    }

    public void setReason(nds.traffic.types.TrafficEventReason reason_)
    {
        this.reason_ = reason_;
    }

    public java.math.BigInteger getDelay()
    {
        return delay_;
    }

    public void setDelay(java.math.BigInteger delay_)
    {
        this.delay_ = delay_;
    }

    public boolean getBlockedPassage()
    {
        return blockedPassage_;
    }

    public void setBlockedPassage(boolean blockedPassage_)
    {
        this.blockedPassage_ = blockedPassage_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficEvent)
        {
            final TrafficEvent that = (TrafficEvent)obj;

            return
                    ((reason_ == null) ? that.reason_ == null : reason_.getValue() == that.reason_.getValue()) &&
                    ((delay_ == null) ? that.delay_ == null : delay_.equals(that.delay_)) &&
                    blockedPassage_ == that.blockedPassage_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, reason_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, delay_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, blockedPassage_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        reason_ = nds.traffic.types.TrafficEventReason.readEnum(in);

        delay_ = in.readVarUInt();

        blockedPassage_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        reason_ = nds.traffic.types.TrafficEventReason.readEnum(zserioContext.getReason(), in);

        delay_ = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                zserioContext.getDelay().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();

        blockedPassage_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += reason_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(delay_);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = reason_.initializeOffsets(zserioContext.getReason(), endBitPosition);
        endBitPosition += zserioContext.getDelay().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(delay_));
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        reason_.write(out);

        out.writeVarUInt(delay_);

        out.writeBool(blockedPassage_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        reason_.write(zserioContext.getReason(), out);

        zserioContext.getDelay().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(delay_));

        out.writeBool(blockedPassage_);
    }

    private nds.traffic.types.TrafficEventReason reason_;
    private java.math.BigInteger delay_;
    private boolean blockedPassage_;
}
