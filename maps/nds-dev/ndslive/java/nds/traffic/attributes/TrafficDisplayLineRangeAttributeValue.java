/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.traffic.attributes;

public class TrafficDisplayLineRangeAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            trafficEvent_ = new nds.traffic.types.TrafficEvent.ZserioPackingContext();
            trafficFlow_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.traffic.types.TrafficEvent.ZserioPackingContext getTrafficEvent()
        {
            return trafficEvent_;
        }

        public zserio.runtime.array.DeltaContext getTrafficFlow()
        {
            return trafficFlow_;
        }

        private nds.traffic.types.TrafficEvent.ZserioPackingContext trafficEvent_;
        private zserio.runtime.array.DeltaContext trafficFlow_;
    };

    public TrafficDisplayLineRangeAttributeValue(
            nds.traffic.attributes.TrafficDisplayLineRangeAttributeType type_)
    {
        this.type_ = type_;
    }

    public TrafficDisplayLineRangeAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.traffic.attributes.TrafficDisplayLineRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public TrafficDisplayLineRangeAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.traffic.attributes.TrafficDisplayLineRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case TRAFFIC_EVENT:
            return CHOICE_trafficEvent;
        case TRAFFIC_FLOW:
            return CHOICE_trafficFlow;
        case CURRENT_ROAD_CONDITION:
            return CHOICE_currentRoadCondition;
        case PARKING_AVAILABILITY:
            return CHOICE_parkingAvailability;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case TRAFFIC_EVENT:
            getTrafficEvent().initPackingContext(zserioContext.getTrafficEvent());
            break;
        case TRAFFIC_FLOW:
            getTrafficFlow().initPackingContext(zserioContext.getTrafficFlow());
            break;
        case CURRENT_ROAD_CONDITION:
            break;
        case PARKING_AVAILABILITY:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TRAFFIC_EVENT:
            endBitPosition += getTrafficEvent().bitSizeOf(endBitPosition);
            break;
        case TRAFFIC_FLOW:
            endBitPosition += getTrafficFlow().bitSizeOf(endBitPosition);
            break;
        case CURRENT_ROAD_CONDITION:
            endBitPosition += getCurrentRoadCondition().bitSizeOf(endBitPosition);
            break;
        case PARKING_AVAILABILITY:
            endBitPosition += 1;
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TRAFFIC_EVENT:
            endBitPosition += getTrafficEvent().bitSizeOf(zserioContext.getTrafficEvent(), endBitPosition);
            break;
        case TRAFFIC_FLOW:
            endBitPosition += getTrafficFlow().bitSizeOf(zserioContext.getTrafficFlow(), endBitPosition);
            break;
        case CURRENT_ROAD_CONDITION:
            endBitPosition += getCurrentRoadCondition().bitSizeOf(endBitPosition);
            break;
        case PARKING_AVAILABILITY:
            endBitPosition += 1;
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.traffic.attributes.TrafficDisplayLineRangeAttributeType getType()
    {
        return this.type_;
    }

    public nds.traffic.types.TrafficEvent getTrafficEvent()
    {
        return (nds.traffic.types.TrafficEvent)objectChoice;
    }

    public void setTrafficEvent(nds.traffic.types.TrafficEvent trafficEvent_)
    {
        objectChoice = trafficEvent_;
    }

    public nds.traffic.types.TrafficFlow getTrafficFlow()
    {
        return (nds.traffic.types.TrafficFlow)objectChoice;
    }

    public void setTrafficFlow(nds.traffic.types.TrafficFlow trafficFlow_)
    {
        objectChoice = trafficFlow_;
    }

    public nds.core.types.Flag getCurrentRoadCondition()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setCurrentRoadCondition(nds.core.types.Flag currentRoadCondition_)
    {
        objectChoice = currentRoadCondition_;
    }

    public boolean getParkingAvailability()
    {
        return (java.lang.Boolean)objectChoice;
    }

    public void setParkingAvailability(boolean parkingAvailability_)
    {
        objectChoice = parkingAvailability_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TrafficDisplayLineRangeAttributeValue)
        {
            final TrafficDisplayLineRangeAttributeValue that = (TrafficDisplayLineRangeAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case TRAFFIC_EVENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.traffic.types.TrafficEvent)objectChoice);
                break;
            case TRAFFIC_FLOW:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.traffic.types.TrafficFlow)objectChoice);
                break;
            case CURRENT_ROAD_CONDITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PARKING_AVAILABILITY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Boolean)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case TRAFFIC_EVENT:
            objectChoice = new nds.traffic.types.TrafficEvent(in);
            break;
        case TRAFFIC_FLOW:
            objectChoice = nds.traffic.types.TrafficFlow.readEnum(in);
            break;
        case CURRENT_ROAD_CONDITION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_AVAILABILITY:
            objectChoice = in.readBool();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case TRAFFIC_EVENT:
            objectChoice = new nds.traffic.types.TrafficEvent(zserioContext.getTrafficEvent(), in);
            break;
        case TRAFFIC_FLOW:
            objectChoice = nds.traffic.types.TrafficFlow.readEnum(zserioContext.getTrafficFlow(), in);
            break;
        case CURRENT_ROAD_CONDITION:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_AVAILABILITY:
            objectChoice = in.readBool();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TRAFFIC_EVENT:
            {
                endBitPosition = getTrafficEvent().initializeOffsets(endBitPosition);
            }
            break;
        case TRAFFIC_FLOW:
            {
                endBitPosition += getTrafficFlow().bitSizeOf(endBitPosition);
            }
            break;
        case CURRENT_ROAD_CONDITION:
            {
                endBitPosition = getCurrentRoadCondition().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_AVAILABILITY:
            {
                endBitPosition += 1;
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case TRAFFIC_EVENT:
            {
                endBitPosition = getTrafficEvent().initializeOffsets(zserioContext.getTrafficEvent(), endBitPosition);
            }
            break;
        case TRAFFIC_FLOW:
            {
                endBitPosition = getTrafficFlow().initializeOffsets(zserioContext.getTrafficFlow(), endBitPosition);
            }
            break;
        case CURRENT_ROAD_CONDITION:
            {
                endBitPosition = getCurrentRoadCondition().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_AVAILABILITY:
            {
                endBitPosition += 1;
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case TRAFFIC_EVENT:
            getTrafficEvent().write(out);
            break;
        case TRAFFIC_FLOW:
            getTrafficFlow().write(out);
            break;
        case CURRENT_ROAD_CONDITION:
            getCurrentRoadCondition().write(out);
            break;
        case PARKING_AVAILABILITY:
            out.writeBool(getParkingAvailability());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case TRAFFIC_EVENT:
            getTrafficEvent().write(zserioContext.getTrafficEvent(), out);
            break;
        case TRAFFIC_FLOW:
            getTrafficFlow().write(zserioContext.getTrafficFlow(), out);
            break;
        case CURRENT_ROAD_CONDITION:
            getCurrentRoadCondition().write(out);
            break;
        case PARKING_AVAILABILITY:
            out.writeBool(getParkingAvailability());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice TrafficDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_trafficEvent = 0;
    public static final int CHOICE_trafficFlow = 1;
    public static final int CHOICE_currentRoadCondition = 2;
    public static final int CHOICE_parkingAvailability = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.traffic.attributes.TrafficDisplayLineRangeAttributeType type_;
    private java.lang.Object objectChoice;
}
