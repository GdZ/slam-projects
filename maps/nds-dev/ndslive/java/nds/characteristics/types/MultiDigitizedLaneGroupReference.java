/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.types;

public class MultiDigitizedLaneGroupReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            counterpartReference_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            counterpartReferenceIndirect_ = new nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getCounterpartReference()
        {
            return counterpartReference_;
        }

        public nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext getCounterpartReferenceIndirect()
        {
            return counterpartReferenceIndirect_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext counterpartReference_;
        private nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext counterpartReferenceIndirect_;
    };

    public MultiDigitizedLaneGroupReference()
    {
    }

    public MultiDigitizedLaneGroupReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MultiDigitizedLaneGroupReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MultiDigitizedLaneGroupReference(
            boolean isDirectReference_,
            nds.core.types.Var4ByteId counterpartReference_,
            nds.lane.reference.types.LaneGroupReferenceIndirect counterpartReferenceIndirect_)
    {
        setIsDirectReference(isDirectReference_);
        setCounterpartReference(counterpartReference_);
        setCounterpartReferenceIndirect(counterpartReferenceIndirect_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isCounterpartReferenceUsed())
        {
            counterpartReference_.initPackingContext(zserioContext.getCounterpartReference());
        }
        if (isCounterpartReferenceIndirectUsed())
        {
            counterpartReferenceIndirect_.initPackingContext(zserioContext.getCounterpartReferenceIndirect());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCounterpartReferenceUsed())
        {
            endBitPosition += counterpartReference_.bitSizeOf(endBitPosition);
        }
        if (isCounterpartReferenceIndirectUsed())
        {
            endBitPosition += counterpartReferenceIndirect_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCounterpartReferenceUsed())
        {
            endBitPosition += counterpartReference_.bitSizeOf(zserioContext.getCounterpartReference(), endBitPosition);
        }
        if (isCounterpartReferenceIndirectUsed())
        {
            endBitPosition += counterpartReferenceIndirect_.bitSizeOf(zserioContext.getCounterpartReferenceIndirect(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getIsDirectReference()
    {
        return isDirectReference_;
    }

    public void setIsDirectReference(boolean isDirectReference_)
    {
        this.isDirectReference_ = isDirectReference_;
    }

    public nds.core.types.Var4ByteId getCounterpartReference()
    {
        return counterpartReference_;
    }

    public void setCounterpartReference(nds.core.types.Var4ByteId counterpartReference_)
    {
        this.counterpartReference_ = counterpartReference_;
    }

    public boolean isCounterpartReferenceUsed()
    {
        return (getIsDirectReference());
    }

    public boolean isCounterpartReferenceSet()
    {
        return (counterpartReference_ != null);
    }

    public void resetCounterpartReference()
    {
        this.counterpartReference_ = null;
    }

    public nds.lane.reference.types.LaneGroupReferenceIndirect getCounterpartReferenceIndirect()
    {
        return counterpartReferenceIndirect_;
    }

    public void setCounterpartReferenceIndirect(nds.lane.reference.types.LaneGroupReferenceIndirect counterpartReferenceIndirect_)
    {
        this.counterpartReferenceIndirect_ = counterpartReferenceIndirect_;
    }

    public boolean isCounterpartReferenceIndirectUsed()
    {
        return (!getIsDirectReference());
    }

    public boolean isCounterpartReferenceIndirectSet()
    {
        return (counterpartReferenceIndirect_ != null);
    }

    public void resetCounterpartReferenceIndirect()
    {
        this.counterpartReferenceIndirect_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MultiDigitizedLaneGroupReference)
        {
            final MultiDigitizedLaneGroupReference that = (MultiDigitizedLaneGroupReference)obj;

            return
                    isDirectReference_ == that.isDirectReference_ &&
                    ((!isCounterpartReferenceUsed()) ? !that.isCounterpartReferenceUsed() :
                        ((counterpartReference_ == null) ? that.counterpartReference_ == null : counterpartReference_.equals(that.counterpartReference_))) &&
                    ((!isCounterpartReferenceIndirectUsed()) ? !that.isCounterpartReferenceIndirectUsed() :
                        ((counterpartReferenceIndirect_ == null) ? that.counterpartReferenceIndirect_ == null : counterpartReferenceIndirect_.equals(that.counterpartReferenceIndirect_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isDirectReference_);
        if (isCounterpartReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, counterpartReference_);
        if (isCounterpartReferenceIndirectUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, counterpartReferenceIndirect_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        isDirectReference_ = in.readBool();

        if (getIsDirectReference())
        {
            counterpartReference_ = new nds.core.types.Var4ByteId(in);
        }

        if (!getIsDirectReference())
        {
            counterpartReferenceIndirect_ = new nds.lane.reference.types.LaneGroupReferenceIndirect(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        isDirectReference_ = in.readBool();

        if (getIsDirectReference())
        {
            counterpartReference_ = new nds.core.types.Var4ByteId(zserioContext.getCounterpartReference(), in);
        }

        if (!getIsDirectReference())
        {
            counterpartReferenceIndirect_ = new nds.lane.reference.types.LaneGroupReferenceIndirect(zserioContext.getCounterpartReferenceIndirect(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCounterpartReferenceUsed())
        {
            endBitPosition = counterpartReference_.initializeOffsets(endBitPosition);
        }
        if (isCounterpartReferenceIndirectUsed())
        {
            endBitPosition = counterpartReferenceIndirect_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCounterpartReferenceUsed())
        {
            endBitPosition = counterpartReference_.initializeOffsets(zserioContext.getCounterpartReference(), endBitPosition);
        }
        if (isCounterpartReferenceIndirectUsed())
        {
            endBitPosition = counterpartReferenceIndirect_.initializeOffsets(zserioContext.getCounterpartReferenceIndirect(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(isDirectReference_);

        if (isCounterpartReferenceUsed())
        {
            counterpartReference_.write(out);
        }

        if (isCounterpartReferenceIndirectUsed())
        {
            counterpartReferenceIndirect_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(isDirectReference_);

        if (isCounterpartReferenceUsed())
        {
            counterpartReference_.write(zserioContext.getCounterpartReference(), out);
        }

        if (isCounterpartReferenceIndirectUsed())
        {
            counterpartReferenceIndirect_.write(zserioContext.getCounterpartReferenceIndirect(), out);
        }
    }

    private boolean isDirectReference_;
    private nds.core.types.Var4ByteId counterpartReference_;
    private nds.lane.reference.types.LaneGroupReferenceIndirect counterpartReferenceIndirect_;
}
