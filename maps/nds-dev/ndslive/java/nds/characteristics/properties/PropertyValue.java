/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.properties;

public class PropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            stationStopType_ = new zserio.runtime.array.DeltaContext();
            stationTollBooths_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getStationStopType()
        {
            return stationStopType_;
        }

        public zserio.runtime.array.DeltaContext getStationTollBooths()
        {
            return stationTollBooths_;
        }

        private zserio.runtime.array.DeltaContext stationStopType_;
        private zserio.runtime.array.DeltaContext stationTollBooths_;
    };

    public PropertyValue(
            nds.characteristics.properties.PropertyType type_)
    {
        this.type_ = type_;
    }

    public PropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.characteristics.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.characteristics.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case CORE:
            return UNDEFINED_CHOICE;
        case TOLL_PAYMENT:
            return CHOICE_tollPayment;
        case STATION_STOP_TYPE:
            return CHOICE_stationStopType;
        case STATION_TEMPORARY:
            return CHOICE_stationTemporary;
        case STATION_TOLL_BOOTHS:
            return CHOICE_stationTollBooths;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            break;
        case STATION_STOP_TYPE:
            getStationStopType().initPackingContext(zserioContext.getStationStopType());
            break;
        case STATION_TEMPORARY:
            break;
        case STATION_TOLL_BOOTHS:
            zserioContext.getStationTollBooths().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getStationTollBooths()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOf(endBitPosition);
            break;
        case STATION_STOP_TYPE:
            endBitPosition += getStationStopType().bitSizeOf(endBitPosition);
            break;
        case STATION_TEMPORARY:
            endBitPosition += getStationTemporary().bitSizeOf(endBitPosition);
            break;
        case STATION_TOLL_BOOTHS:
            endBitPosition += 8;
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            endBitPosition += ((zserio.runtime.array.Array)objectChoice).bitSizeOfPacked(endBitPosition);
            break;
        case STATION_STOP_TYPE:
            endBitPosition += getStationStopType().bitSizeOf(zserioContext.getStationStopType(), endBitPosition);
            break;
        case STATION_TEMPORARY:
            endBitPosition += getStationTemporary().bitSizeOf(endBitPosition);
            break;
        case STATION_TOLL_BOOTHS:
            endBitPosition += zserioContext.getStationTollBooths().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getStationTollBooths()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.characteristics.properties.PropertyType getType()
    {
        return this.type_;
    }

    public nds.characteristics.types.TollPayment[] getTollPayment()
    {
        return (objectChoice == null) ? null : ((zserio.runtime.array.Array)objectChoice).getRawArray();
    }

    public void setTollPayment(nds.characteristics.types.TollPayment[] tollPayment_)
    {
        objectChoice = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.characteristics.types.TollPayment.class, tollPayment_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.characteristics.types.TollPayment>(new ZserioElementFactory_tollPayment()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.characteristics.types.StationStopType getStationStopType()
    {
        return (nds.characteristics.types.StationStopType)objectChoice;
    }

    public void setStationStopType(nds.characteristics.types.StationStopType stationStopType_)
    {
        objectChoice = stationStopType_;
    }

    public nds.core.types.Flag getStationTemporary()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setStationTemporary(nds.core.types.Flag stationTemporary_)
    {
        objectChoice = stationTemporary_;
    }

    public short getStationTollBooths()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setStationTollBooths(short stationTollBooths_)
    {
        objectChoice = stationTollBooths_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PropertyValue)
        {
            final PropertyValue that = (PropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case CORE:
                // empty
                break;
            case TOLL_PAYMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (zserio.runtime.array.Array)objectChoice);
                break;
            case STATION_STOP_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.StationStopType)objectChoice);
                break;
            case STATION_TEMPORARY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case STATION_TOLL_BOOTHS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.characteristics.types.TollPayment.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.characteristics.types.TollPayment>(new ZserioElementFactory_tollPayment()),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).read(in);
            break;
        case STATION_STOP_TYPE:
            objectChoice = nds.characteristics.types.StationStopType.readEnum(in);
            break;
        case STATION_TEMPORARY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION_TOLL_BOOTHS:
            objectChoice = in.readUnsignedByte();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            objectChoice = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.characteristics.types.TollPayment.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.characteristics.types.TollPayment>(new ZserioElementFactory_tollPayment()),
                    zserio.runtime.array.ArrayType.AUTO);
            ((zserio.runtime.array.Array)objectChoice).readPacked(in);
            break;
        case STATION_STOP_TYPE:
            objectChoice = nds.characteristics.types.StationStopType.readEnum(zserioContext.getStationStopType(), in);
            break;
        case STATION_TEMPORARY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION_TOLL_BOOTHS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getStationTollBooths().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsets(endBitPosition);
            }
            break;
        case STATION_STOP_TYPE:
            {
                endBitPosition += getStationStopType().bitSizeOf(endBitPosition);
            }
            break;
        case STATION_TEMPORARY:
            {
                endBitPosition = getStationTemporary().initializeOffsets(endBitPosition);
            }
            break;
        case STATION_TOLL_BOOTHS:
            {
                endBitPosition += 8;
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            {
                endBitPosition = ((zserio.runtime.array.Array)objectChoice).initializeOffsetsPacked(endBitPosition);
            }
            break;
        case STATION_STOP_TYPE:
            {
                endBitPosition = getStationStopType().initializeOffsets(zserioContext.getStationStopType(), endBitPosition);
            }
            break;
        case STATION_TEMPORARY:
            {
                endBitPosition = getStationTemporary().initializeOffsets(endBitPosition);
            }
            break;
        case STATION_TOLL_BOOTHS:
            {
                endBitPosition += zserioContext.getStationTollBooths().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getStationTollBooths()));
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            ((zserio.runtime.array.Array)objectChoice).write(out);
            break;
        case STATION_STOP_TYPE:
            getStationStopType().write(out);
            break;
        case STATION_TEMPORARY:
            getStationTemporary().write(out);
            break;
        case STATION_TOLL_BOOTHS:
            out.writeUnsignedByte(getStationTollBooths());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case CORE:
            // empty
            break;
        case TOLL_PAYMENT:
            ((zserio.runtime.array.Array)objectChoice).writePacked(out);
            break;
        case STATION_STOP_TYPE:
            getStationStopType().write(zserioContext.getStationStopType(), out);
            break;
        case STATION_TEMPORARY:
            getStationTemporary().write(out);
            break;
        case STATION_TOLL_BOOTHS:
            zserioContext.getStationTollBooths().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getStationTollBooths()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_tollPayment = 0;
    public static final int CHOICE_stationStopType = 1;
    public static final int CHOICE_stationTemporary = 2;
    public static final int CHOICE_stationTollBooths = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private static final class ZserioElementFactory_tollPayment implements zserio.runtime.array.PackableElementFactory<nds.characteristics.types.TollPayment>
    {
        @Override
        public nds.characteristics.types.TollPayment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.characteristics.types.TollPayment(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.characteristics.types.TollPayment.ZserioPackingContext();
        }

        @Override
        public nds.characteristics.types.TollPayment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.characteristics.types.TollPayment(context, in);
        }
    }

    private final nds.characteristics.properties.PropertyType type_;
    private java.lang.Object objectChoice;
}
