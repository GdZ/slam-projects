/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.metadata;

public class RoadLocationProviderDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            creationTime_ = new nds.core.types.TimeStamp.ZserioPackingContext();
        }

        public nds.core.types.TimeStamp.ZserioPackingContext getCreationTime()
        {
            return creationTime_;
        }

        private nds.core.types.TimeStamp.ZserioPackingContext creationTime_;
    };

    public RoadLocationProviderDetails()
    {
    }

    public RoadLocationProviderDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadLocationProviderDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadLocationProviderDetails(
            java.lang.String providerName_,
            java.lang.String locationVersion_,
            nds.core.types.TimeStamp creationTime_)
    {
        setProviderName(providerName_);
        setLocationVersion(locationVersion_);
        setCreationTime(creationTime_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        creationTime_.initPackingContext(zserioContext.getCreationTime());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(locationVersion_);
        endBitPosition += creationTime_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(locationVersion_);
        endBitPosition += creationTime_.bitSizeOf(zserioContext.getCreationTime(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public java.lang.String getProviderName()
    {
        return providerName_;
    }

    public void setProviderName(java.lang.String providerName_)
    {
        this.providerName_ = providerName_;
    }

    public java.lang.String getLocationVersion()
    {
        return locationVersion_;
    }

    public void setLocationVersion(java.lang.String locationVersion_)
    {
        this.locationVersion_ = locationVersion_;
    }

    public nds.core.types.TimeStamp getCreationTime()
    {
        return creationTime_;
    }

    public void setCreationTime(nds.core.types.TimeStamp creationTime_)
    {
        this.creationTime_ = creationTime_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationProviderDetails)
        {
            final RoadLocationProviderDetails that = (RoadLocationProviderDetails)obj;

            return
                    ((providerName_ == null) ? that.providerName_ == null : providerName_.equals(that.providerName_)) &&
                    ((locationVersion_ == null) ? that.locationVersion_ == null : locationVersion_.equals(that.locationVersion_)) &&
                    ((creationTime_ == null) ? that.creationTime_ == null : creationTime_.equals(that.creationTime_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, providerName_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationVersion_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, creationTime_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        providerName_ = in.readString();

        locationVersion_ = in.readString();

        creationTime_ = new nds.core.types.TimeStamp(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        providerName_ = in.readString();

        locationVersion_ = in.readString();

        creationTime_ = new nds.core.types.TimeStamp(zserioContext.getCreationTime(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(locationVersion_);
        endBitPosition = creationTime_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(providerName_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(locationVersion_);
        endBitPosition = creationTime_.initializeOffsets(zserioContext.getCreationTime(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeString(providerName_);

        out.writeString(locationVersion_);

        creationTime_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeString(providerName_);

        out.writeString(locationVersion_);

        creationTime_.write(zserioContext.getCreationTime(), out);
    }

    private java.lang.String providerName_;
    private java.lang.String locationVersion_;
    private nds.core.types.TimeStamp creationTime_;
}
