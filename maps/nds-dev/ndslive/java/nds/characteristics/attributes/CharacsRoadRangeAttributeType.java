/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.attributes;

public enum CharacsRoadRangeAttributeType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    COMPLETE_CARPOOL_ROAD((short)0),
    PARTIAL_CARPOOL_ROAD((short)1),
    PHYSICAL_WIDTH_METRIC((short)2),
    TYPE_OF_PAVEMENT((short)3),
    FERRY_TYPE((short)4),
    DIVIDER_TYPE((short)5),
    GRADE_TYPE((short)6),
    STUBBLE((short)7),
    RAILWAY_CROSSING((short)8),
    PEDESTRIAN_CROSSING((short)9),
    TRAFFIC_CALMING((short)10),
    MOVABLE_BRIDGE((short)11),
    SUPERELEVATION((short)12),
    ROAD_MEDIAN((short)13),
    HAS_SIDEWALK((short)14),
    FRICTION((short)15),
    STATION_PLAZA_TYPE((short)16),
    MIDDLE_DIVIDER_TYPE((short)17),
    AVERAGE_SPEED((short)18),
    FUNCTIONAL_ROAD_CLASS((short)19),
    PRIORITY_ROAD_CLASS((short)20),
    ROAD_TYPE((short)21),
    MULTI_DIGITIZED_ROAD_REFERENCE((short)22),
    NUM_LANES((short)23),
    COMPLEX_INTERSECTION_TYPE((short)24),
    START_OR_DESTINATION_ROAD_ONLY((short)25),
    ROAD_LOCATION_ID((short)26),
    HAS_STREET_LIGHTS((short)27),
    SHARED_ROAD_SURFACE_WITH_PEDESTRIANS((short)28),
    IN_BUSINESS_DISTRICT((short)29),
    GLOBAL_SOURCE_ID((short)30);

    private CharacsRoadRangeAttributeType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static CharacsRoadRangeAttributeType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static CharacsRoadRangeAttributeType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static CharacsRoadRangeAttributeType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return COMPLETE_CARPOOL_ROAD;
            case (short)1:
                return PARTIAL_CARPOOL_ROAD;
            case (short)2:
                return PHYSICAL_WIDTH_METRIC;
            case (short)3:
                return TYPE_OF_PAVEMENT;
            case (short)4:
                return FERRY_TYPE;
            case (short)5:
                return DIVIDER_TYPE;
            case (short)6:
                return GRADE_TYPE;
            case (short)7:
                return STUBBLE;
            case (short)8:
                return RAILWAY_CROSSING;
            case (short)9:
                return PEDESTRIAN_CROSSING;
            case (short)10:
                return TRAFFIC_CALMING;
            case (short)11:
                return MOVABLE_BRIDGE;
            case (short)12:
                return SUPERELEVATION;
            case (short)13:
                return ROAD_MEDIAN;
            case (short)14:
                return HAS_SIDEWALK;
            case (short)15:
                return FRICTION;
            case (short)16:
                return STATION_PLAZA_TYPE;
            case (short)17:
                return MIDDLE_DIVIDER_TYPE;
            case (short)18:
                return AVERAGE_SPEED;
            case (short)19:
                return FUNCTIONAL_ROAD_CLASS;
            case (short)20:
                return PRIORITY_ROAD_CLASS;
            case (short)21:
                return ROAD_TYPE;
            case (short)22:
                return MULTI_DIGITIZED_ROAD_REFERENCE;
            case (short)23:
                return NUM_LANES;
            case (short)24:
                return COMPLEX_INTERSECTION_TYPE;
            case (short)25:
                return START_OR_DESTINATION_ROAD_ONLY;
            case (short)26:
                return ROAD_LOCATION_ID;
            case (short)27:
                return HAS_STREET_LIGHTS;
            case (short)28:
                return SHARED_ROAD_SURFACE_WITH_PEDESTRIANS;
            case (short)29:
                return IN_BUSINESS_DISTRICT;
            case (short)30:
                return GLOBAL_SOURCE_ID;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration CharacsRoadRangeAttributeType: " + value + "!");
        }
    }

    public static CharacsRoadRangeAttributeType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("COMPLETE_CARPOOL_ROAD"))
            return COMPLETE_CARPOOL_ROAD;
        if (itemName.equals("PARTIAL_CARPOOL_ROAD"))
            return PARTIAL_CARPOOL_ROAD;
        if (itemName.equals("PHYSICAL_WIDTH_METRIC"))
            return PHYSICAL_WIDTH_METRIC;
        if (itemName.equals("TYPE_OF_PAVEMENT"))
            return TYPE_OF_PAVEMENT;
        if (itemName.equals("FERRY_TYPE"))
            return FERRY_TYPE;
        if (itemName.equals("DIVIDER_TYPE"))
            return DIVIDER_TYPE;
        if (itemName.equals("GRADE_TYPE"))
            return GRADE_TYPE;
        if (itemName.equals("STUBBLE"))
            return STUBBLE;
        if (itemName.equals("RAILWAY_CROSSING"))
            return RAILWAY_CROSSING;
        if (itemName.equals("PEDESTRIAN_CROSSING"))
            return PEDESTRIAN_CROSSING;
        if (itemName.equals("TRAFFIC_CALMING"))
            return TRAFFIC_CALMING;
        if (itemName.equals("MOVABLE_BRIDGE"))
            return MOVABLE_BRIDGE;
        if (itemName.equals("SUPERELEVATION"))
            return SUPERELEVATION;
        if (itemName.equals("ROAD_MEDIAN"))
            return ROAD_MEDIAN;
        if (itemName.equals("HAS_SIDEWALK"))
            return HAS_SIDEWALK;
        if (itemName.equals("FRICTION"))
            return FRICTION;
        if (itemName.equals("STATION_PLAZA_TYPE"))
            return STATION_PLAZA_TYPE;
        if (itemName.equals("MIDDLE_DIVIDER_TYPE"))
            return MIDDLE_DIVIDER_TYPE;
        if (itemName.equals("AVERAGE_SPEED"))
            return AVERAGE_SPEED;
        if (itemName.equals("FUNCTIONAL_ROAD_CLASS"))
            return FUNCTIONAL_ROAD_CLASS;
        if (itemName.equals("PRIORITY_ROAD_CLASS"))
            return PRIORITY_ROAD_CLASS;
        if (itemName.equals("ROAD_TYPE"))
            return ROAD_TYPE;
        if (itemName.equals("MULTI_DIGITIZED_ROAD_REFERENCE"))
            return MULTI_DIGITIZED_ROAD_REFERENCE;
        if (itemName.equals("NUM_LANES"))
            return NUM_LANES;
        if (itemName.equals("COMPLEX_INTERSECTION_TYPE"))
            return COMPLEX_INTERSECTION_TYPE;
        if (itemName.equals("START_OR_DESTINATION_ROAD_ONLY"))
            return START_OR_DESTINATION_ROAD_ONLY;
        if (itemName.equals("ROAD_LOCATION_ID"))
            return ROAD_LOCATION_ID;
        if (itemName.equals("HAS_STREET_LIGHTS"))
            return HAS_STREET_LIGHTS;
        if (itemName.equals("SHARED_ROAD_SURFACE_WITH_PEDESTRIANS"))
            return SHARED_ROAD_SURFACE_WITH_PEDESTRIANS;
        if (itemName.equals("IN_BUSINESS_DISTRICT"))
            return IN_BUSINESS_DISTRICT;
        if (itemName.equals("GLOBAL_SOURCE_ID"))
            return GLOBAL_SOURCE_ID;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration CharacsRoadRangeAttributeType!");
    }

    private short value;
}
