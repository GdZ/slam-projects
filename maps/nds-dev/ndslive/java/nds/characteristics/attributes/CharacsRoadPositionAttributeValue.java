/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.attributes;

public class CharacsRoadPositionAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            stationaryObjectType_ = new zserio.runtime.array.DeltaContext();
            slowRoadUserCrossing_ = new nds.core.geometry.Line2D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getStationaryObjectType()
        {
            return stationaryObjectType_;
        }

        public nds.core.geometry.Line2D.ZserioPackingContext getSlowRoadUserCrossing()
        {
            return slowRoadUserCrossing_;
        }

        private zserio.runtime.array.DeltaContext stationaryObjectType_;
        private nds.core.geometry.Line2D.ZserioPackingContext slowRoadUserCrossing_;
    };

    public CharacsRoadPositionAttributeValue(
            nds.characteristics.attributes.CharacsRoadPositionAttributeType type_)
    {
        this.type_ = type_;
    }

    public CharacsRoadPositionAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.characteristics.attributes.CharacsRoadPositionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public CharacsRoadPositionAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.characteristics.attributes.CharacsRoadPositionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case STOP_LINE:
            return CHOICE_stopLine;
        case WAITING_LINE:
            return CHOICE_waitingLine;
        case STATION:
            return CHOICE_stationaryObjectType;
        case SLOW_ROAD_USER_CROSSING:
            return CHOICE_slowRoadUserCrossing;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case STOP_LINE:
            break;
        case WAITING_LINE:
            break;
        case STATION:
            getStationaryObjectType().initPackingContext(zserioContext.getStationaryObjectType());
            break;
        case SLOW_ROAD_USER_CROSSING:
            getSlowRoadUserCrossing().initPackingContext(zserioContext.getSlowRoadUserCrossing());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case STOP_LINE:
            endBitPosition += getStopLine().bitSizeOf(endBitPosition);
            break;
        case WAITING_LINE:
            endBitPosition += getWaitingLine().bitSizeOf(endBitPosition);
            break;
        case STATION:
            endBitPosition += getStationaryObjectType().bitSizeOf(endBitPosition);
            break;
        case SLOW_ROAD_USER_CROSSING:
            endBitPosition += getSlowRoadUserCrossing().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case STOP_LINE:
            endBitPosition += getStopLine().bitSizeOf(endBitPosition);
            break;
        case WAITING_LINE:
            endBitPosition += getWaitingLine().bitSizeOf(endBitPosition);
            break;
        case STATION:
            endBitPosition += getStationaryObjectType().bitSizeOf(zserioContext.getStationaryObjectType(), endBitPosition);
            break;
        case SLOW_ROAD_USER_CROSSING:
            endBitPosition += getSlowRoadUserCrossing().bitSizeOf(zserioContext.getSlowRoadUserCrossing(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.characteristics.attributes.CharacsRoadPositionAttributeType getType()
    {
        return this.type_;
    }

    public nds.core.types.Flag getStopLine()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setStopLine(nds.core.types.Flag stopLine_)
    {
        objectChoice = stopLine_;
    }

    public nds.core.types.Flag getWaitingLine()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setWaitingLine(nds.core.types.Flag waitingLine_)
    {
        objectChoice = waitingLine_;
    }

    public nds.characteristics.types.StationaryObjectType getStationaryObjectType()
    {
        return (nds.characteristics.types.StationaryObjectType)objectChoice;
    }

    public void setStationaryObjectType(nds.characteristics.types.StationaryObjectType stationaryObjectType_)
    {
        objectChoice = stationaryObjectType_;
    }

    public nds.core.geometry.Line2D getSlowRoadUserCrossing()
    {
        return (nds.core.geometry.Line2D)objectChoice;
    }

    public void setSlowRoadUserCrossing(nds.core.geometry.Line2D slowRoadUserCrossing_)
    {
        objectChoice = slowRoadUserCrossing_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CharacsRoadPositionAttributeValue)
        {
            final CharacsRoadPositionAttributeValue that = (CharacsRoadPositionAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case STOP_LINE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case WAITING_LINE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case STATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.StationaryObjectType)objectChoice);
                break;
            case SLOW_ROAD_USER_CROSSING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.Line2D)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case STOP_LINE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case WAITING_LINE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION:
            objectChoice = nds.characteristics.types.StationaryObjectType.readEnum(in);
            break;
        case SLOW_ROAD_USER_CROSSING:
            objectChoice = new nds.core.geometry.Line2D(in, (byte)(0));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case STOP_LINE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case WAITING_LINE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION:
            objectChoice = nds.characteristics.types.StationaryObjectType.readEnum(zserioContext.getStationaryObjectType(), in);
            break;
        case SLOW_ROAD_USER_CROSSING:
            objectChoice = new nds.core.geometry.Line2D(zserioContext.getSlowRoadUserCrossing(), in, (byte)(0));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case STOP_LINE:
            {
                endBitPosition = getStopLine().initializeOffsets(endBitPosition);
            }
            break;
        case WAITING_LINE:
            {
                endBitPosition = getWaitingLine().initializeOffsets(endBitPosition);
            }
            break;
        case STATION:
            {
                endBitPosition += getStationaryObjectType().bitSizeOf(endBitPosition);
            }
            break;
        case SLOW_ROAD_USER_CROSSING:
            {
                endBitPosition = getSlowRoadUserCrossing().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case STOP_LINE:
            {
                endBitPosition = getStopLine().initializeOffsets(endBitPosition);
            }
            break;
        case WAITING_LINE:
            {
                endBitPosition = getWaitingLine().initializeOffsets(endBitPosition);
            }
            break;
        case STATION:
            {
                endBitPosition = getStationaryObjectType().initializeOffsets(zserioContext.getStationaryObjectType(), endBitPosition);
            }
            break;
        case SLOW_ROAD_USER_CROSSING:
            {
                endBitPosition = getSlowRoadUserCrossing().initializeOffsets(zserioContext.getSlowRoadUserCrossing(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case STOP_LINE:
            getStopLine().write(out);
            break;
        case WAITING_LINE:
            getWaitingLine().write(out);
            break;
        case STATION:
            getStationaryObjectType().write(out);
            break;
        case SLOW_ROAD_USER_CROSSING:
            // check parameters
            if (getSlowRoadUserCrossing().getShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field CharacsRoadPositionAttributeValue.slowRoadUserCrossing: " +
                        getSlowRoadUserCrossing().getShift() + " != " + (byte)(0) + "!");
            }
            getSlowRoadUserCrossing().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case STOP_LINE:
            getStopLine().write(out);
            break;
        case WAITING_LINE:
            getWaitingLine().write(out);
            break;
        case STATION:
            getStationaryObjectType().write(zserioContext.getStationaryObjectType(), out);
            break;
        case SLOW_ROAD_USER_CROSSING:
            getSlowRoadUserCrossing().write(zserioContext.getSlowRoadUserCrossing(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsRoadPositionAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_stopLine = 0;
    public static final int CHOICE_waitingLine = 1;
    public static final int CHOICE_stationaryObjectType = 2;
    public static final int CHOICE_slowRoadUserCrossing = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.characteristics.attributes.CharacsRoadPositionAttributeType type_;
    private java.lang.Object objectChoice;
}
