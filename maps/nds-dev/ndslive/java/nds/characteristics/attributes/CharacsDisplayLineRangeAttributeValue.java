/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.characteristics.attributes;

public class CharacsDisplayLineRangeAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            metricLaneWidth_ = new zserio.runtime.array.DeltaContext();
            pavementType_ = new zserio.runtime.array.DeltaContext();
            stationPlazaType_ = new zserio.runtime.array.DeltaContext();
            averageSpeed_ = new zserio.runtime.array.DeltaContext();
            functionalRoadClass_ = new zserio.runtime.array.DeltaContext();
            priorityRoadClass_ = new zserio.runtime.array.DeltaContext();
            complexIntersectionType_ = new zserio.runtime.array.DeltaContext();
            roadLocationId_ = new nds.characteristics.types.RoadLocationAssignment.ZserioPackingContext();
            roadType_ = new nds.core.types.RoadType.ZserioPackingContext();
            ferryType_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getMetricLaneWidth()
        {
            return metricLaneWidth_;
        }

        public zserio.runtime.array.DeltaContext getPavementType()
        {
            return pavementType_;
        }

        public zserio.runtime.array.DeltaContext getStationPlazaType()
        {
            return stationPlazaType_;
        }

        public zserio.runtime.array.DeltaContext getAverageSpeed()
        {
            return averageSpeed_;
        }

        public zserio.runtime.array.DeltaContext getFunctionalRoadClass()
        {
            return functionalRoadClass_;
        }

        public zserio.runtime.array.DeltaContext getPriorityRoadClass()
        {
            return priorityRoadClass_;
        }

        public zserio.runtime.array.DeltaContext getComplexIntersectionType()
        {
            return complexIntersectionType_;
        }

        public nds.characteristics.types.RoadLocationAssignment.ZserioPackingContext getRoadLocationId()
        {
            return roadLocationId_;
        }

        public nds.core.types.RoadType.ZserioPackingContext getRoadType()
        {
            return roadType_;
        }

        public zserio.runtime.array.DeltaContext getFerryType()
        {
            return ferryType_;
        }

        private zserio.runtime.array.DeltaContext metricLaneWidth_;
        private zserio.runtime.array.DeltaContext pavementType_;
        private zserio.runtime.array.DeltaContext stationPlazaType_;
        private zserio.runtime.array.DeltaContext averageSpeed_;
        private zserio.runtime.array.DeltaContext functionalRoadClass_;
        private zserio.runtime.array.DeltaContext priorityRoadClass_;
        private zserio.runtime.array.DeltaContext complexIntersectionType_;
        private nds.characteristics.types.RoadLocationAssignment.ZserioPackingContext roadLocationId_;
        private nds.core.types.RoadType.ZserioPackingContext roadType_;
        private zserio.runtime.array.DeltaContext ferryType_;
    };

    public CharacsDisplayLineRangeAttributeValue(
            nds.characteristics.attributes.CharacsDisplayLineRangeAttributeType type_)
    {
        this.type_ = type_;
    }

    public CharacsDisplayLineRangeAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.characteristics.attributes.CharacsDisplayLineRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public CharacsDisplayLineRangeAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.characteristics.attributes.CharacsDisplayLineRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            return CHOICE_metricLaneWidth;
        case TYPE_OF_PAVEMENT:
            return CHOICE_pavementType;
        case MOVABLE_BRIDGE:
            return CHOICE_movableBridge;
        case HAS_SIDEWALK:
            return CHOICE_hasSidewalk;
        case STATION_PLAZA_TYPE:
            return CHOICE_stationPlazaType;
        case AVERAGE_SPEED:
            return CHOICE_averageSpeed;
        case FUNCTIONAL_ROAD_CLASS:
            return CHOICE_functionalRoadClass;
        case PRIORITY_ROAD_CLASS:
            return CHOICE_priorityRoadClass;
        case COMPLEX_INTERSECTION_TYPE:
            return CHOICE_complexIntersectionType;
        case ROAD_LOCATION_ID:
            return CHOICE_roadLocationId;
        case HAS_STREET_LIGHTS:
            return CHOICE_hasStreetLights;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            return CHOICE_sharedRoadSurfaceWithPedestrians;
        case IN_BUSINESS_DISTRICT:
            return CHOICE_inBusinessDistrict;
        case ROAD_TYPE:
            return CHOICE_roadType;
        case COMPLETE_CARPOOL_ROAD:
            return CHOICE_completeCarpoolRoad;
        case PARTIAL_CARPOOL_ROAD:
            return CHOICE_partialCarpoolRoad;
        case FERRY_TYPE:
            return CHOICE_ferryType;
        case GLOBAL_SOURCE_ID:
            return CHOICE_globalSourceId;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            zserioContext.getMetricLaneWidth().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getMetricLaneWidth()));
            break;
        case TYPE_OF_PAVEMENT:
            getPavementType().initPackingContext(zserioContext.getPavementType());
            break;
        case MOVABLE_BRIDGE:
            break;
        case HAS_SIDEWALK:
            break;
        case STATION_PLAZA_TYPE:
            getStationPlazaType().initPackingContext(zserioContext.getStationPlazaType());
            break;
        case AVERAGE_SPEED:
            zserioContext.getAverageSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAverageSpeed()));
            break;
        case FUNCTIONAL_ROAD_CLASS:
            zserioContext.getFunctionalRoadClass().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getFunctionalRoadClass()));
            break;
        case PRIORITY_ROAD_CLASS:
            zserioContext.getPriorityRoadClass().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getPriorityRoadClass()));
            break;
        case COMPLEX_INTERSECTION_TYPE:
            getComplexIntersectionType().initPackingContext(zserioContext.getComplexIntersectionType());
            break;
        case ROAD_LOCATION_ID:
            getRoadLocationId().initPackingContext(zserioContext.getRoadLocationId());
            break;
        case HAS_STREET_LIGHTS:
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            break;
        case IN_BUSINESS_DISTRICT:
            break;
        case ROAD_TYPE:
            getRoadType().initPackingContext(zserioContext.getRoadType());
            break;
        case COMPLETE_CARPOOL_ROAD:
            break;
        case PARTIAL_CARPOOL_ROAD:
            break;
        case FERRY_TYPE:
            getFerryType().initPackingContext(zserioContext.getFerryType());
            break;
        case GLOBAL_SOURCE_ID:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getMetricLaneWidth());
            break;
        case TYPE_OF_PAVEMENT:
            endBitPosition += getPavementType().bitSizeOf(endBitPosition);
            break;
        case MOVABLE_BRIDGE:
            endBitPosition += getMovableBridge().bitSizeOf(endBitPosition);
            break;
        case HAS_SIDEWALK:
            endBitPosition += getHasSidewalk().bitSizeOf(endBitPosition);
            break;
        case STATION_PLAZA_TYPE:
            endBitPosition += getStationPlazaType().bitSizeOf(endBitPosition);
            break;
        case AVERAGE_SPEED:
            endBitPosition += 8;
            break;
        case FUNCTIONAL_ROAD_CLASS:
            endBitPosition += 3;
            break;
        case PRIORITY_ROAD_CLASS:
            endBitPosition += 4;
            break;
        case COMPLEX_INTERSECTION_TYPE:
            endBitPosition += getComplexIntersectionType().bitSizeOf(endBitPosition);
            break;
        case ROAD_LOCATION_ID:
            endBitPosition += getRoadLocationId().bitSizeOf(endBitPosition);
            break;
        case HAS_STREET_LIGHTS:
            endBitPosition += getHasStreetLights().bitSizeOf(endBitPosition);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            endBitPosition += getSharedRoadSurfaceWithPedestrians().bitSizeOf(endBitPosition);
            break;
        case IN_BUSINESS_DISTRICT:
            endBitPosition += getInBusinessDistrict().bitSizeOf(endBitPosition);
            break;
        case ROAD_TYPE:
            endBitPosition += getRoadType().bitSizeOf(endBitPosition);
            break;
        case COMPLETE_CARPOOL_ROAD:
            endBitPosition += getCompleteCarpoolRoad().bitSizeOf(endBitPosition);
            break;
        case PARTIAL_CARPOOL_ROAD:
            endBitPosition += getPartialCarpoolRoad().bitSizeOf(endBitPosition);
            break;
        case FERRY_TYPE:
            endBitPosition += getFerryType().bitSizeOf(endBitPosition);
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            endBitPosition += zserioContext.getMetricLaneWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getMetricLaneWidth()));
            break;
        case TYPE_OF_PAVEMENT:
            endBitPosition += getPavementType().bitSizeOf(zserioContext.getPavementType(), endBitPosition);
            break;
        case MOVABLE_BRIDGE:
            endBitPosition += getMovableBridge().bitSizeOf(endBitPosition);
            break;
        case HAS_SIDEWALK:
            endBitPosition += getHasSidewalk().bitSizeOf(endBitPosition);
            break;
        case STATION_PLAZA_TYPE:
            endBitPosition += getStationPlazaType().bitSizeOf(zserioContext.getStationPlazaType(), endBitPosition);
            break;
        case AVERAGE_SPEED:
            endBitPosition += zserioContext.getAverageSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAverageSpeed()));
            break;
        case FUNCTIONAL_ROAD_CLASS:
            endBitPosition += zserioContext.getFunctionalRoadClass().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getFunctionalRoadClass()));
            break;
        case PRIORITY_ROAD_CLASS:
            endBitPosition += zserioContext.getPriorityRoadClass().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getPriorityRoadClass()));
            break;
        case COMPLEX_INTERSECTION_TYPE:
            endBitPosition += getComplexIntersectionType().bitSizeOf(zserioContext.getComplexIntersectionType(), endBitPosition);
            break;
        case ROAD_LOCATION_ID:
            endBitPosition += getRoadLocationId().bitSizeOf(zserioContext.getRoadLocationId(), endBitPosition);
            break;
        case HAS_STREET_LIGHTS:
            endBitPosition += getHasStreetLights().bitSizeOf(endBitPosition);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            endBitPosition += getSharedRoadSurfaceWithPedestrians().bitSizeOf(endBitPosition);
            break;
        case IN_BUSINESS_DISTRICT:
            endBitPosition += getInBusinessDistrict().bitSizeOf(endBitPosition);
            break;
        case ROAD_TYPE:
            endBitPosition += getRoadType().bitSizeOf(zserioContext.getRoadType(), endBitPosition);
            break;
        case COMPLETE_CARPOOL_ROAD:
            endBitPosition += getCompleteCarpoolRoad().bitSizeOf(endBitPosition);
            break;
        case PARTIAL_CARPOOL_ROAD:
            endBitPosition += getPartialCarpoolRoad().bitSizeOf(endBitPosition);
            break;
        case FERRY_TYPE:
            endBitPosition += getFerryType().bitSizeOf(zserioContext.getFerryType(), endBitPosition);
            break;
        case GLOBAL_SOURCE_ID:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.characteristics.attributes.CharacsDisplayLineRangeAttributeType getType()
    {
        return this.type_;
    }

    public int getMetricLaneWidth()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setMetricLaneWidth(int metricLaneWidth_)
    {
        objectChoice = metricLaneWidth_;
    }

    public nds.characteristics.types.PavementType getPavementType()
    {
        return (nds.characteristics.types.PavementType)objectChoice;
    }

    public void setPavementType(nds.characteristics.types.PavementType pavementType_)
    {
        objectChoice = pavementType_;
    }

    public nds.core.types.Flag getMovableBridge()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setMovableBridge(nds.core.types.Flag movableBridge_)
    {
        objectChoice = movableBridge_;
    }

    public nds.core.types.Flag getHasSidewalk()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setHasSidewalk(nds.core.types.Flag hasSidewalk_)
    {
        objectChoice = hasSidewalk_;
    }

    public nds.characteristics.types.StationPlazaType getStationPlazaType()
    {
        return (nds.characteristics.types.StationPlazaType)objectChoice;
    }

    public void setStationPlazaType(nds.characteristics.types.StationPlazaType stationPlazaType_)
    {
        objectChoice = stationPlazaType_;
    }

    public short getAverageSpeed()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setAverageSpeed(short averageSpeed_)
    {
        objectChoice = averageSpeed_;
    }

    public byte getFunctionalRoadClass()
    {
        return (java.lang.Byte)objectChoice;
    }

    public void setFunctionalRoadClass(byte functionalRoadClass_)
    {
        objectChoice = functionalRoadClass_;
    }

    public byte getPriorityRoadClass()
    {
        return (java.lang.Byte)objectChoice;
    }

    public void setPriorityRoadClass(byte priorityRoadClass_)
    {
        objectChoice = priorityRoadClass_;
    }

    public nds.characteristics.types.ComplexIntersectionType getComplexIntersectionType()
    {
        return (nds.characteristics.types.ComplexIntersectionType)objectChoice;
    }

    public void setComplexIntersectionType(nds.characteristics.types.ComplexIntersectionType complexIntersectionType_)
    {
        objectChoice = complexIntersectionType_;
    }

    public nds.characteristics.types.RoadLocationAssignment getRoadLocationId()
    {
        return (nds.characteristics.types.RoadLocationAssignment)objectChoice;
    }

    public void setRoadLocationId(nds.characteristics.types.RoadLocationAssignment roadLocationId_)
    {
        objectChoice = roadLocationId_;
    }

    public nds.core.types.Flag getHasStreetLights()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setHasStreetLights(nds.core.types.Flag hasStreetLights_)
    {
        objectChoice = hasStreetLights_;
    }

    public nds.core.types.Flag getSharedRoadSurfaceWithPedestrians()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setSharedRoadSurfaceWithPedestrians(nds.core.types.Flag sharedRoadSurfaceWithPedestrians_)
    {
        objectChoice = sharedRoadSurfaceWithPedestrians_;
    }

    public nds.core.types.Flag getInBusinessDistrict()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setInBusinessDistrict(nds.core.types.Flag inBusinessDistrict_)
    {
        objectChoice = inBusinessDistrict_;
    }

    public nds.core.types.RoadType getRoadType()
    {
        return (nds.core.types.RoadType)objectChoice;
    }

    public void setRoadType(nds.core.types.RoadType roadType_)
    {
        objectChoice = roadType_;
    }

    public nds.core.types.Flag getCompleteCarpoolRoad()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setCompleteCarpoolRoad(nds.core.types.Flag completeCarpoolRoad_)
    {
        objectChoice = completeCarpoolRoad_;
    }

    public nds.core.types.Flag getPartialCarpoolRoad()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setPartialCarpoolRoad(nds.core.types.Flag partialCarpoolRoad_)
    {
        objectChoice = partialCarpoolRoad_;
    }

    public nds.characteristics.types.FerryType getFerryType()
    {
        return (nds.characteristics.types.FerryType)objectChoice;
    }

    public void setFerryType(nds.characteristics.types.FerryType ferryType_)
    {
        objectChoice = ferryType_;
    }

    public java.lang.String getGlobalSourceId()
    {
        return (java.lang.String)objectChoice;
    }

    public void setGlobalSourceId(java.lang.String globalSourceId_)
    {
        objectChoice = globalSourceId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CharacsDisplayLineRangeAttributeValue)
        {
            final CharacsDisplayLineRangeAttributeValue that = (CharacsDisplayLineRangeAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PHYSICAL_WIDTH_METRIC:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case TYPE_OF_PAVEMENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.PavementType)objectChoice);
                break;
            case MOVABLE_BRIDGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case HAS_SIDEWALK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case STATION_PLAZA_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.StationPlazaType)objectChoice);
                break;
            case AVERAGE_SPEED:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case FUNCTIONAL_ROAD_CLASS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Byte)objectChoice);
                break;
            case PRIORITY_ROAD_CLASS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Byte)objectChoice);
                break;
            case COMPLEX_INTERSECTION_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.ComplexIntersectionType)objectChoice);
                break;
            case ROAD_LOCATION_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.RoadLocationAssignment)objectChoice);
                break;
            case HAS_STREET_LIGHTS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case IN_BUSINESS_DISTRICT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case ROAD_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.RoadType)objectChoice);
                break;
            case COMPLETE_CARPOOL_ROAD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PARTIAL_CARPOOL_ROAD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case FERRY_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.characteristics.types.FerryType)objectChoice);
                break;
            case GLOBAL_SOURCE_ID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            objectChoice = in.readVarUInt32();
            break;
        case TYPE_OF_PAVEMENT:
            objectChoice = nds.characteristics.types.PavementType.readEnum(in);
            break;
        case MOVABLE_BRIDGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case HAS_SIDEWALK:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION_PLAZA_TYPE:
            objectChoice = nds.characteristics.types.StationPlazaType.readEnum(in);
            break;
        case AVERAGE_SPEED:
            objectChoice = in.readUnsignedByte();
            break;
        case FUNCTIONAL_ROAD_CLASS:
            objectChoice = (byte)in.readBits(3);
            break;
        case PRIORITY_ROAD_CLASS:
            objectChoice = (byte)in.readBits(4);
            break;
        case COMPLEX_INTERSECTION_TYPE:
            objectChoice = nds.characteristics.types.ComplexIntersectionType.readEnum(in);
            break;
        case ROAD_LOCATION_ID:
            objectChoice = new nds.characteristics.types.RoadLocationAssignment(in);
            break;
        case HAS_STREET_LIGHTS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case IN_BUSINESS_DISTRICT:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ROAD_TYPE:
            objectChoice = new nds.core.types.RoadType(in);
            break;
        case COMPLETE_CARPOOL_ROAD:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARTIAL_CARPOOL_ROAD:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FERRY_TYPE:
            objectChoice = nds.characteristics.types.FerryType.readEnum(in);
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getMetricLaneWidth().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
            break;
        case TYPE_OF_PAVEMENT:
            objectChoice = nds.characteristics.types.PavementType.readEnum(zserioContext.getPavementType(), in);
            break;
        case MOVABLE_BRIDGE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case HAS_SIDEWALK:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case STATION_PLAZA_TYPE:
            objectChoice = nds.characteristics.types.StationPlazaType.readEnum(zserioContext.getStationPlazaType(), in);
            break;
        case AVERAGE_SPEED:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getAverageSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case FUNCTIONAL_ROAD_CLASS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getFunctionalRoadClass().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), in)).get();
            break;
        case PRIORITY_ROAD_CLASS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getPriorityRoadClass().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), in)).get();
            break;
        case COMPLEX_INTERSECTION_TYPE:
            objectChoice = nds.characteristics.types.ComplexIntersectionType.readEnum(zserioContext.getComplexIntersectionType(), in);
            break;
        case ROAD_LOCATION_ID:
            objectChoice = new nds.characteristics.types.RoadLocationAssignment(zserioContext.getRoadLocationId(), in);
            break;
        case HAS_STREET_LIGHTS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case IN_BUSINESS_DISTRICT:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case ROAD_TYPE:
            objectChoice = new nds.core.types.RoadType(zserioContext.getRoadType(), in);
            break;
        case COMPLETE_CARPOOL_ROAD:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARTIAL_CARPOOL_ROAD:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case FERRY_TYPE:
            objectChoice = nds.characteristics.types.FerryType.readEnum(zserioContext.getFerryType(), in);
            break;
        case GLOBAL_SOURCE_ID:
            objectChoice = in.readString();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(getMetricLaneWidth());
            }
            break;
        case TYPE_OF_PAVEMENT:
            {
                endBitPosition += getPavementType().bitSizeOf(endBitPosition);
            }
            break;
        case MOVABLE_BRIDGE:
            {
                endBitPosition = getMovableBridge().initializeOffsets(endBitPosition);
            }
            break;
        case HAS_SIDEWALK:
            {
                endBitPosition = getHasSidewalk().initializeOffsets(endBitPosition);
            }
            break;
        case STATION_PLAZA_TYPE:
            {
                endBitPosition += getStationPlazaType().bitSizeOf(endBitPosition);
            }
            break;
        case AVERAGE_SPEED:
            {
                endBitPosition += 8;
            }
            break;
        case FUNCTIONAL_ROAD_CLASS:
            {
                endBitPosition += 3;
            }
            break;
        case PRIORITY_ROAD_CLASS:
            {
                endBitPosition += 4;
            }
            break;
        case COMPLEX_INTERSECTION_TYPE:
            {
                endBitPosition += getComplexIntersectionType().bitSizeOf(endBitPosition);
            }
            break;
        case ROAD_LOCATION_ID:
            {
                endBitPosition = getRoadLocationId().initializeOffsets(endBitPosition);
            }
            break;
        case HAS_STREET_LIGHTS:
            {
                endBitPosition = getHasStreetLights().initializeOffsets(endBitPosition);
            }
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            {
                endBitPosition = getSharedRoadSurfaceWithPedestrians().initializeOffsets(endBitPosition);
            }
            break;
        case IN_BUSINESS_DISTRICT:
            {
                endBitPosition = getInBusinessDistrict().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_TYPE:
            {
                endBitPosition = getRoadType().initializeOffsets(endBitPosition);
            }
            break;
        case COMPLETE_CARPOOL_ROAD:
            {
                endBitPosition = getCompleteCarpoolRoad().initializeOffsets(endBitPosition);
            }
            break;
        case PARTIAL_CARPOOL_ROAD:
            {
                endBitPosition = getPartialCarpoolRoad().initializeOffsets(endBitPosition);
            }
            break;
        case FERRY_TYPE:
            {
                endBitPosition += getFerryType().bitSizeOf(endBitPosition);
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            {
                endBitPosition += zserioContext.getMetricLaneWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getMetricLaneWidth()));
            }
            break;
        case TYPE_OF_PAVEMENT:
            {
                endBitPosition = getPavementType().initializeOffsets(zserioContext.getPavementType(), endBitPosition);
            }
            break;
        case MOVABLE_BRIDGE:
            {
                endBitPosition = getMovableBridge().initializeOffsets(endBitPosition);
            }
            break;
        case HAS_SIDEWALK:
            {
                endBitPosition = getHasSidewalk().initializeOffsets(endBitPosition);
            }
            break;
        case STATION_PLAZA_TYPE:
            {
                endBitPosition = getStationPlazaType().initializeOffsets(zserioContext.getStationPlazaType(), endBitPosition);
            }
            break;
        case AVERAGE_SPEED:
            {
                endBitPosition += zserioContext.getAverageSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getAverageSpeed()));
            }
            break;
        case FUNCTIONAL_ROAD_CLASS:
            {
                endBitPosition += zserioContext.getFunctionalRoadClass().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)),
                        new zserio.runtime.array.ArrayElement.ByteArrayElement(getFunctionalRoadClass()));
            }
            break;
        case PRIORITY_ROAD_CLASS:
            {
                endBitPosition += zserioContext.getPriorityRoadClass().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)),
                        new zserio.runtime.array.ArrayElement.ByteArrayElement(getPriorityRoadClass()));
            }
            break;
        case COMPLEX_INTERSECTION_TYPE:
            {
                endBitPosition = getComplexIntersectionType().initializeOffsets(zserioContext.getComplexIntersectionType(), endBitPosition);
            }
            break;
        case ROAD_LOCATION_ID:
            {
                endBitPosition = getRoadLocationId().initializeOffsets(zserioContext.getRoadLocationId(), endBitPosition);
            }
            break;
        case HAS_STREET_LIGHTS:
            {
                endBitPosition = getHasStreetLights().initializeOffsets(endBitPosition);
            }
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            {
                endBitPosition = getSharedRoadSurfaceWithPedestrians().initializeOffsets(endBitPosition);
            }
            break;
        case IN_BUSINESS_DISTRICT:
            {
                endBitPosition = getInBusinessDistrict().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_TYPE:
            {
                endBitPosition = getRoadType().initializeOffsets(zserioContext.getRoadType(), endBitPosition);
            }
            break;
        case COMPLETE_CARPOOL_ROAD:
            {
                endBitPosition = getCompleteCarpoolRoad().initializeOffsets(endBitPosition);
            }
            break;
        case PARTIAL_CARPOOL_ROAD:
            {
                endBitPosition = getPartialCarpoolRoad().initializeOffsets(endBitPosition);
            }
            break;
        case FERRY_TYPE:
            {
                endBitPosition = getFerryType().initializeOffsets(zserioContext.getFerryType(), endBitPosition);
            }
            break;
        case GLOBAL_SOURCE_ID:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getGlobalSourceId());
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            out.writeVarUInt32(getMetricLaneWidth());
            break;
        case TYPE_OF_PAVEMENT:
            getPavementType().write(out);
            break;
        case MOVABLE_BRIDGE:
            getMovableBridge().write(out);
            break;
        case HAS_SIDEWALK:
            getHasSidewalk().write(out);
            break;
        case STATION_PLAZA_TYPE:
            getStationPlazaType().write(out);
            break;
        case AVERAGE_SPEED:
            out.writeUnsignedByte(getAverageSpeed());
            break;
        case FUNCTIONAL_ROAD_CLASS:
            out.writeBits(getFunctionalRoadClass(), 3);
            break;
        case PRIORITY_ROAD_CLASS:
            out.writeBits(getPriorityRoadClass(), 4);
            break;
        case COMPLEX_INTERSECTION_TYPE:
            getComplexIntersectionType().write(out);
            break;
        case ROAD_LOCATION_ID:
            getRoadLocationId().write(out);
            break;
        case HAS_STREET_LIGHTS:
            getHasStreetLights().write(out);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            getSharedRoadSurfaceWithPedestrians().write(out);
            break;
        case IN_BUSINESS_DISTRICT:
            getInBusinessDistrict().write(out);
            break;
        case ROAD_TYPE:
            getRoadType().write(out);
            break;
        case COMPLETE_CARPOOL_ROAD:
            getCompleteCarpoolRoad().write(out);
            break;
        case PARTIAL_CARPOOL_ROAD:
            getPartialCarpoolRoad().write(out);
            break;
        case FERRY_TYPE:
            getFerryType().write(out);
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PHYSICAL_WIDTH_METRIC:
            zserioContext.getMetricLaneWidth().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getMetricLaneWidth()));
            break;
        case TYPE_OF_PAVEMENT:
            getPavementType().write(zserioContext.getPavementType(), out);
            break;
        case MOVABLE_BRIDGE:
            getMovableBridge().write(out);
            break;
        case HAS_SIDEWALK:
            getHasSidewalk().write(out);
            break;
        case STATION_PLAZA_TYPE:
            getStationPlazaType().write(zserioContext.getStationPlazaType(), out);
            break;
        case AVERAGE_SPEED:
            zserioContext.getAverageSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getAverageSpeed()));
            break;
        case FUNCTIONAL_ROAD_CLASS:
            zserioContext.getFunctionalRoadClass().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(3)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getFunctionalRoadClass()));
            break;
        case PRIORITY_ROAD_CLASS:
            zserioContext.getPriorityRoadClass().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(4)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getPriorityRoadClass()));
            break;
        case COMPLEX_INTERSECTION_TYPE:
            getComplexIntersectionType().write(zserioContext.getComplexIntersectionType(), out);
            break;
        case ROAD_LOCATION_ID:
            getRoadLocationId().write(zserioContext.getRoadLocationId(), out);
            break;
        case HAS_STREET_LIGHTS:
            getHasStreetLights().write(out);
            break;
        case SHARED_ROAD_SURFACE_WITH_PEDESTRIANS:
            getSharedRoadSurfaceWithPedestrians().write(out);
            break;
        case IN_BUSINESS_DISTRICT:
            getInBusinessDistrict().write(out);
            break;
        case ROAD_TYPE:
            getRoadType().write(zserioContext.getRoadType(), out);
            break;
        case COMPLETE_CARPOOL_ROAD:
            getCompleteCarpoolRoad().write(out);
            break;
        case PARTIAL_CARPOOL_ROAD:
            getPartialCarpoolRoad().write(out);
            break;
        case FERRY_TYPE:
            getFerryType().write(zserioContext.getFerryType(), out);
            break;
        case GLOBAL_SOURCE_ID:
            out.writeString(getGlobalSourceId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice CharacsDisplayLineRangeAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_metricLaneWidth = 0;
    public static final int CHOICE_pavementType = 1;
    public static final int CHOICE_movableBridge = 2;
    public static final int CHOICE_hasSidewalk = 3;
    public static final int CHOICE_stationPlazaType = 4;
    public static final int CHOICE_averageSpeed = 5;
    public static final int CHOICE_functionalRoadClass = 6;
    public static final int CHOICE_priorityRoadClass = 7;
    public static final int CHOICE_complexIntersectionType = 8;
    public static final int CHOICE_roadLocationId = 9;
    public static final int CHOICE_hasStreetLights = 10;
    public static final int CHOICE_sharedRoadSurfaceWithPedestrians = 11;
    public static final int CHOICE_inBusinessDistrict = 12;
    public static final int CHOICE_roadType = 13;
    public static final int CHOICE_completeCarpoolRoad = 14;
    public static final int CHOICE_partialCarpoolRoad = 15;
    public static final int CHOICE_ferryType = 16;
    public static final int CHOICE_globalSourceId = 17;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.characteristics.attributes.CharacsDisplayLineRangeAttributeType type_;
    private java.lang.Object objectChoice;
}
