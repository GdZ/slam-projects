/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.topics;

public class LaneGeometryOnPathTopic implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            stamp_ = new nds.core.types.TimeStamp.ZserioPackingContext();
            pathId_ = new zserio.runtime.array.DeltaContext();
            centerLineGeometryLayer_ = new nds.lane.instantiations.CenterLineGeometryLayer.ZserioPackingContext();
        }

        public nds.core.types.TimeStamp.ZserioPackingContext getStamp()
        {
            return stamp_;
        }

        public zserio.runtime.array.DeltaContext getPathId()
        {
            return pathId_;
        }

        public nds.lane.instantiations.CenterLineGeometryLayer.ZserioPackingContext getCenterLineGeometryLayer()
        {
            return centerLineGeometryLayer_;
        }

        private nds.core.types.TimeStamp.ZserioPackingContext stamp_;
        private zserio.runtime.array.DeltaContext pathId_;
        private nds.lane.instantiations.CenterLineGeometryLayer.ZserioPackingContext centerLineGeometryLayer_;
    };

    public LaneGeometryOnPathTopic()
    {
    }

    public LaneGeometryOnPathTopic(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGeometryOnPathTopic(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGeometryOnPathTopic(
            nds.core.types.TimeStamp stamp_,
            int pathId_,
            nds.lane.instantiations.CenterLineGeometryLayer centerLineGeometryLayer_)
    {
        setStamp(stamp_);
        setPathId(pathId_);
        setCenterLineGeometryLayer(centerLineGeometryLayer_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_.initPackingContext(zserioContext.getStamp());
        zserioContext.getPathId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(pathId_));
        centerLineGeometryLayer_.initPackingContext(zserioContext.getCenterLineGeometryLayer());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += stamp_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(pathId_);
        endBitPosition += centerLineGeometryLayer_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += stamp_.bitSizeOf(zserioContext.getStamp(), endBitPosition);
        endBitPosition += zserioContext.getPathId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(pathId_));
        endBitPosition += centerLineGeometryLayer_.bitSizeOf(zserioContext.getCenterLineGeometryLayer(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.TimeStamp getStamp()
    {
        return stamp_;
    }

    public void setStamp(nds.core.types.TimeStamp stamp_)
    {
        this.stamp_ = stamp_;
    }

    public int getPathId()
    {
        return pathId_;
    }

    public void setPathId(int pathId_)
    {
        this.pathId_ = pathId_;
    }

    public nds.lane.instantiations.CenterLineGeometryLayer getCenterLineGeometryLayer()
    {
        return centerLineGeometryLayer_;
    }

    public void setCenterLineGeometryLayer(nds.lane.instantiations.CenterLineGeometryLayer centerLineGeometryLayer_)
    {
        this.centerLineGeometryLayer_ = centerLineGeometryLayer_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGeometryOnPathTopic)
        {
            final LaneGeometryOnPathTopic that = (LaneGeometryOnPathTopic)obj;

            return
                    ((stamp_ == null) ? that.stamp_ == null : stamp_.equals(that.stamp_)) &&
                    pathId_ == that.pathId_ &&
                    ((centerLineGeometryLayer_ == null) ? that.centerLineGeometryLayer_ == null : centerLineGeometryLayer_.equals(that.centerLineGeometryLayer_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, stamp_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, pathId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, centerLineGeometryLayer_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        stamp_ = new nds.core.types.TimeStamp(in);

        pathId_ = in.readVarUInt32();

        centerLineGeometryLayer_ = new nds.lane.instantiations.CenterLineGeometryLayer(in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)(true), (boolean)(false));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_ = new nds.core.types.TimeStamp(zserioContext.getStamp(), in);

        pathId_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getPathId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        centerLineGeometryLayer_ = new nds.lane.instantiations.CenterLineGeometryLayer(zserioContext.getCenterLineGeometryLayer(), in, nds.core.geometry.GeometryLayerType.LINE_3D, (boolean)(true), (boolean)(false));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = stamp_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(pathId_);
        endBitPosition = centerLineGeometryLayer_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = stamp_.initializeOffsets(zserioContext.getStamp(), endBitPosition);
        endBitPosition += zserioContext.getPathId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(pathId_));
        endBitPosition = centerLineGeometryLayer_.initializeOffsets(zserioContext.getCenterLineGeometryLayer(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        stamp_.write(out);

        out.writeVarUInt32(pathId_);

        // check parameters
        if (centerLineGeometryLayer_.getType() != (nds.core.geometry.GeometryLayerType.LINE_3D))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field LaneGeometryOnPathTopic.centerLineGeometryLayer!");
        }
        if (centerLineGeometryLayer_.getHasIds() != (boolean)(true))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field LaneGeometryOnPathTopic.centerLineGeometryLayer: " +
                    centerLineGeometryLayer_.getHasIds() + " != " + (boolean)(true) + "!");
        }
        if (centerLineGeometryLayer_.getHasTypes() != (boolean)(false))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field LaneGeometryOnPathTopic.centerLineGeometryLayer: " +
                    centerLineGeometryLayer_.getHasTypes() + " != " + (boolean)(false) + "!");
        }
        centerLineGeometryLayer_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_.write(zserioContext.getStamp(), out);

        zserioContext.getPathId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(pathId_));

        centerLineGeometryLayer_.write(zserioContext.getCenterLineGeometryLayer(), out);
    }

    private nds.core.types.TimeStamp stamp_;
    private int pathId_;
    private nds.lane.instantiations.CenterLineGeometryLayer centerLineGeometryLayer_;
}
