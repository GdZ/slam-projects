/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.roadsurface;

public enum RoadSurfacePolygonMarkingType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    UNKNOWN(0),
    DASH(1),
    TEXT(2),
    ARROW_STRAIGHT(3),
    ARROW_LEFT(4),
    ARROW_RIGHT(5),
    ARROW_STRAIGHT_AND_LEFT(6),
    ARROW_STRAIGHT_AND_RIGHT(7),
    ARROW_LEFT_AND_RIGHT(8),
    ARROW_SLIGHT_LEFT(9),
    ARROW_SLIGHT_RIGHT(10),
    ARROW_U_TURN(11),
    ARROW_STRAIGHT_AND_U_TURN(12),
    ARROW_LEFT_AND_U_TURN(13),
    ARROW_RIGHT_AND_U_TURN(14),
    SIGN(15),
    YIELD_INDICATION(16),
    VISUAL_SPEED_BUMP(17),
    SHADED_AREA(18);

    private RoadSurfacePolygonMarkingType(int value)
    {
        this.value = value;
    }

    public int getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(value));
    }

    public static RoadSurfacePolygonMarkingType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt32());
    }

    public static RoadSurfacePolygonMarkingType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.IntArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get());
    }

    public static RoadSurfacePolygonMarkingType toEnum(int value)
    {
        switch (value)
        {
            case 0:
                return UNKNOWN;
            case 1:
                return DASH;
            case 2:
                return TEXT;
            case 3:
                return ARROW_STRAIGHT;
            case 4:
                return ARROW_LEFT;
            case 5:
                return ARROW_RIGHT;
            case 6:
                return ARROW_STRAIGHT_AND_LEFT;
            case 7:
                return ARROW_STRAIGHT_AND_RIGHT;
            case 8:
                return ARROW_LEFT_AND_RIGHT;
            case 9:
                return ARROW_SLIGHT_LEFT;
            case 10:
                return ARROW_SLIGHT_RIGHT;
            case 11:
                return ARROW_U_TURN;
            case 12:
                return ARROW_STRAIGHT_AND_U_TURN;
            case 13:
                return ARROW_LEFT_AND_U_TURN;
            case 14:
                return ARROW_RIGHT_AND_U_TURN;
            case 15:
                return SIGN;
            case 16:
                return YIELD_INDICATION;
            case 17:
                return VISUAL_SPEED_BUMP;
            case 18:
                return SHADED_AREA;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RoadSurfacePolygonMarkingType: " + value + "!");
        }
    }

    public static RoadSurfacePolygonMarkingType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("UNKNOWN"))
            return UNKNOWN;
        if (itemName.equals("DASH"))
            return DASH;
        if (itemName.equals("TEXT"))
            return TEXT;
        if (itemName.equals("ARROW_STRAIGHT"))
            return ARROW_STRAIGHT;
        if (itemName.equals("ARROW_LEFT"))
            return ARROW_LEFT;
        if (itemName.equals("ARROW_RIGHT"))
            return ARROW_RIGHT;
        if (itemName.equals("ARROW_STRAIGHT_AND_LEFT"))
            return ARROW_STRAIGHT_AND_LEFT;
        if (itemName.equals("ARROW_STRAIGHT_AND_RIGHT"))
            return ARROW_STRAIGHT_AND_RIGHT;
        if (itemName.equals("ARROW_LEFT_AND_RIGHT"))
            return ARROW_LEFT_AND_RIGHT;
        if (itemName.equals("ARROW_SLIGHT_LEFT"))
            return ARROW_SLIGHT_LEFT;
        if (itemName.equals("ARROW_SLIGHT_RIGHT"))
            return ARROW_SLIGHT_RIGHT;
        if (itemName.equals("ARROW_U_TURN"))
            return ARROW_U_TURN;
        if (itemName.equals("ARROW_STRAIGHT_AND_U_TURN"))
            return ARROW_STRAIGHT_AND_U_TURN;
        if (itemName.equals("ARROW_LEFT_AND_U_TURN"))
            return ARROW_LEFT_AND_U_TURN;
        if (itemName.equals("ARROW_RIGHT_AND_U_TURN"))
            return ARROW_RIGHT_AND_U_TURN;
        if (itemName.equals("SIGN"))
            return SIGN;
        if (itemName.equals("YIELD_INDICATION"))
            return YIELD_INDICATION;
        if (itemName.equals("VISUAL_SPEED_BUMP"))
            return VISUAL_SPEED_BUMP;
        if (itemName.equals("SHADED_AREA"))
            return SHADED_AREA;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RoadSurfacePolygonMarkingType!");
    }

    private int value;
}
