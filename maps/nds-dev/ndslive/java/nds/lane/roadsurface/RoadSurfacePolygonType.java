/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.roadsurface;

public class RoadSurfacePolygonType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            physicalType_ = new zserio.runtime.array.DeltaContext();
            logicalType_ = new zserio.runtime.array.DeltaContext();
            markingDetails_ = new nds.lane.roadsurface.RoadSurfacePolygonMarking.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getPhysicalType()
        {
            return physicalType_;
        }

        public zserio.runtime.array.DeltaContext getLogicalType()
        {
            return logicalType_;
        }

        public nds.lane.roadsurface.RoadSurfacePolygonMarking.ZserioPackingContext getMarkingDetails()
        {
            return markingDetails_;
        }

        private zserio.runtime.array.DeltaContext physicalType_;
        private zserio.runtime.array.DeltaContext logicalType_;
        private nds.lane.roadsurface.RoadSurfacePolygonMarking.ZserioPackingContext markingDetails_;
    };

    public RoadSurfacePolygonType()
    {
    }

    public RoadSurfacePolygonType(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadSurfacePolygonType(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadSurfacePolygonType(
            nds.lane.roadsurface.RoadSurfacePolygonPhysicalType physicalType_,
            nds.lane.roadsurface.RoadSurfacePolygonLogicalType logicalType_,
            nds.lane.roadsurface.RoadSurfacePolygonMarking markingDetails_)
    {
        setPhysicalType(physicalType_);
        setLogicalType(logicalType_);
        setMarkingDetails(markingDetails_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        physicalType_.initPackingContext(zserioContext.getPhysicalType());
        logicalType_.initPackingContext(zserioContext.getLogicalType());
        if (isMarkingDetailsUsed())
        {
            markingDetails_.initPackingContext(zserioContext.getMarkingDetails());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += physicalType_.bitSizeOf(endBitPosition);
        endBitPosition += logicalType_.bitSizeOf(endBitPosition);
        if (isMarkingDetailsUsed())
        {
            endBitPosition += markingDetails_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += physicalType_.bitSizeOf(zserioContext.getPhysicalType(), endBitPosition);
        endBitPosition += logicalType_.bitSizeOf(zserioContext.getLogicalType(), endBitPosition);
        if (isMarkingDetailsUsed())
        {
            endBitPosition += markingDetails_.bitSizeOf(zserioContext.getMarkingDetails(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.roadsurface.RoadSurfacePolygonPhysicalType getPhysicalType()
    {
        return physicalType_;
    }

    public void setPhysicalType(nds.lane.roadsurface.RoadSurfacePolygonPhysicalType physicalType_)
    {
        this.physicalType_ = physicalType_;
    }

    public nds.lane.roadsurface.RoadSurfacePolygonLogicalType getLogicalType()
    {
        return logicalType_;
    }

    public void setLogicalType(nds.lane.roadsurface.RoadSurfacePolygonLogicalType logicalType_)
    {
        this.logicalType_ = logicalType_;
    }

    public nds.lane.roadsurface.RoadSurfacePolygonMarking getMarkingDetails()
    {
        return markingDetails_;
    }

    public void setMarkingDetails(nds.lane.roadsurface.RoadSurfacePolygonMarking markingDetails_)
    {
        this.markingDetails_ = markingDetails_;
    }

    public boolean isMarkingDetailsUsed()
    {
        return (getLogicalType() == nds.lane.roadsurface.RoadSurfacePolygonLogicalType.MARKING_POLYGON);
    }

    public boolean isMarkingDetailsSet()
    {
        return (markingDetails_ != null);
    }

    public void resetMarkingDetails()
    {
        this.markingDetails_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadSurfacePolygonType)
        {
            final RoadSurfacePolygonType that = (RoadSurfacePolygonType)obj;

            return
                    ((physicalType_ == null) ? that.physicalType_ == null : physicalType_.getValue() == that.physicalType_.getValue()) &&
                    ((logicalType_ == null) ? that.logicalType_ == null : logicalType_.getValue() == that.logicalType_.getValue()) &&
                    ((!isMarkingDetailsUsed()) ? !that.isMarkingDetailsUsed() :
                        ((markingDetails_ == null) ? that.markingDetails_ == null : markingDetails_.equals(that.markingDetails_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, physicalType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, logicalType_);
        if (isMarkingDetailsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, markingDetails_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        physicalType_ = nds.lane.roadsurface.RoadSurfacePolygonPhysicalType.readEnum(in);

        logicalType_ = nds.lane.roadsurface.RoadSurfacePolygonLogicalType.readEnum(in);

        if (getLogicalType() == nds.lane.roadsurface.RoadSurfacePolygonLogicalType.MARKING_POLYGON)
        {
            markingDetails_ = new nds.lane.roadsurface.RoadSurfacePolygonMarking(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        physicalType_ = nds.lane.roadsurface.RoadSurfacePolygonPhysicalType.readEnum(zserioContext.getPhysicalType(), in);

        logicalType_ = nds.lane.roadsurface.RoadSurfacePolygonLogicalType.readEnum(zserioContext.getLogicalType(), in);

        if (getLogicalType() == nds.lane.roadsurface.RoadSurfacePolygonLogicalType.MARKING_POLYGON)
        {
            markingDetails_ = new nds.lane.roadsurface.RoadSurfacePolygonMarking(zserioContext.getMarkingDetails(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += physicalType_.bitSizeOf(endBitPosition);
        endBitPosition += logicalType_.bitSizeOf(endBitPosition);
        if (isMarkingDetailsUsed())
        {
            endBitPosition = markingDetails_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = physicalType_.initializeOffsets(zserioContext.getPhysicalType(), endBitPosition);
        endBitPosition = logicalType_.initializeOffsets(zserioContext.getLogicalType(), endBitPosition);
        if (isMarkingDetailsUsed())
        {
            endBitPosition = markingDetails_.initializeOffsets(zserioContext.getMarkingDetails(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        physicalType_.write(out);

        logicalType_.write(out);

        if (isMarkingDetailsUsed())
        {
            markingDetails_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        physicalType_.write(zserioContext.getPhysicalType(), out);

        logicalType_.write(zserioContext.getLogicalType(), out);

        if (isMarkingDetailsUsed())
        {
            markingDetails_.write(zserioContext.getMarkingDetails(), out);
        }
    }

    private nds.lane.roadsurface.RoadSurfacePolygonPhysicalType physicalType_;
    private nds.lane.roadsurface.RoadSurfacePolygonLogicalType logicalType_;
    private nds.lane.roadsurface.RoadSurfacePolygonMarking markingDetails_;
}
