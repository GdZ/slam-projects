/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.roadsurface;

public class RoadSurfaceLineMarking implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            markingType_ = new zserio.runtime.array.DeltaContext();
            markingColor_ = new zserio.runtime.array.DeltaContext();
            markingMaterial_ = new zserio.runtime.array.DeltaContext();
            markingWidth_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getMarkingType()
        {
            return markingType_;
        }

        public zserio.runtime.array.DeltaContext getMarkingColor()
        {
            return markingColor_;
        }

        public zserio.runtime.array.DeltaContext getMarkingMaterial()
        {
            return markingMaterial_;
        }

        public zserio.runtime.array.DeltaContext getMarkingWidth()
        {
            return markingWidth_;
        }

        private zserio.runtime.array.DeltaContext markingType_;
        private zserio.runtime.array.DeltaContext markingColor_;
        private zserio.runtime.array.DeltaContext markingMaterial_;
        private zserio.runtime.array.DeltaContext markingWidth_;
    };

    public RoadSurfaceLineMarking()
    {
    }

    public RoadSurfaceLineMarking(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadSurfaceLineMarking(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadSurfaceLineMarking(
            nds.lane.roadsurface.RoadSurfaceLineMarkingType markingType_,
            nds.lane.reference.types.MarkingColor markingColor_,
            nds.lane.types.MarkingMaterial markingMaterial_,
            int markingWidth_)
    {
        setMarkingType(markingType_);
        setMarkingColor(markingColor_);
        setMarkingMaterial(markingMaterial_);
        setMarkingWidth(markingWidth_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        markingType_.initPackingContext(zserioContext.getMarkingType());
        markingColor_.initPackingContext(zserioContext.getMarkingColor());
        markingMaterial_.initPackingContext(zserioContext.getMarkingMaterial());
        zserioContext.getMarkingWidth().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(markingWidth_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += markingType_.bitSizeOf(endBitPosition);
        endBitPosition += markingColor_.bitSizeOf(endBitPosition);
        endBitPosition += markingMaterial_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(markingWidth_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += markingType_.bitSizeOf(zserioContext.getMarkingType(), endBitPosition);
        endBitPosition += markingColor_.bitSizeOf(zserioContext.getMarkingColor(), endBitPosition);
        endBitPosition += markingMaterial_.bitSizeOf(zserioContext.getMarkingMaterial(), endBitPosition);
        endBitPosition += zserioContext.getMarkingWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(markingWidth_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.roadsurface.RoadSurfaceLineMarkingType getMarkingType()
    {
        return markingType_;
    }

    public void setMarkingType(nds.lane.roadsurface.RoadSurfaceLineMarkingType markingType_)
    {
        this.markingType_ = markingType_;
    }

    public nds.lane.reference.types.MarkingColor getMarkingColor()
    {
        return markingColor_;
    }

    public void setMarkingColor(nds.lane.reference.types.MarkingColor markingColor_)
    {
        this.markingColor_ = markingColor_;
    }

    public nds.lane.types.MarkingMaterial getMarkingMaterial()
    {
        return markingMaterial_;
    }

    public void setMarkingMaterial(nds.lane.types.MarkingMaterial markingMaterial_)
    {
        this.markingMaterial_ = markingMaterial_;
    }

    public int getMarkingWidth()
    {
        return markingWidth_;
    }

    public void setMarkingWidth(int markingWidth_)
    {
        this.markingWidth_ = markingWidth_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadSurfaceLineMarking)
        {
            final RoadSurfaceLineMarking that = (RoadSurfaceLineMarking)obj;

            return
                    ((markingType_ == null) ? that.markingType_ == null : markingType_.getValue() == that.markingType_.getValue()) &&
                    ((markingColor_ == null) ? that.markingColor_ == null : markingColor_.getValue() == that.markingColor_.getValue()) &&
                    ((markingMaterial_ == null) ? that.markingMaterial_ == null : markingMaterial_.getValue() == that.markingMaterial_.getValue()) &&
                    markingWidth_ == that.markingWidth_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, markingType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, markingColor_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, markingMaterial_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, markingWidth_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        markingType_ = nds.lane.roadsurface.RoadSurfaceLineMarkingType.readEnum(in);

        markingColor_ = nds.lane.reference.types.MarkingColor.readEnum(in);

        markingMaterial_ = nds.lane.types.MarkingMaterial.readEnum(in);

        markingWidth_ = in.readVarUInt32();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        markingType_ = nds.lane.roadsurface.RoadSurfaceLineMarkingType.readEnum(zserioContext.getMarkingType(), in);

        markingColor_ = nds.lane.reference.types.MarkingColor.readEnum(zserioContext.getMarkingColor(), in);

        markingMaterial_ = nds.lane.types.MarkingMaterial.readEnum(zserioContext.getMarkingMaterial(), in);

        markingWidth_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getMarkingWidth().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += markingType_.bitSizeOf(endBitPosition);
        endBitPosition += markingColor_.bitSizeOf(endBitPosition);
        endBitPosition += markingMaterial_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(markingWidth_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = markingType_.initializeOffsets(zserioContext.getMarkingType(), endBitPosition);
        endBitPosition = markingColor_.initializeOffsets(zserioContext.getMarkingColor(), endBitPosition);
        endBitPosition = markingMaterial_.initializeOffsets(zserioContext.getMarkingMaterial(), endBitPosition);
        endBitPosition += zserioContext.getMarkingWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(markingWidth_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        markingType_.write(out);

        markingColor_.write(out);

        markingMaterial_.write(out);

        out.writeVarUInt32(markingWidth_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        markingType_.write(zserioContext.getMarkingType(), out);

        markingColor_.write(zserioContext.getMarkingColor(), out);

        markingMaterial_.write(zserioContext.getMarkingMaterial(), out);

        zserioContext.getMarkingWidth().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(markingWidth_));
    }

    private nds.lane.roadsurface.RoadSurfaceLineMarkingType markingType_;
    private nds.lane.reference.types.MarkingColor markingColor_;
    private nds.lane.types.MarkingMaterial markingMaterial_;
    private int markingWidth_;
}
