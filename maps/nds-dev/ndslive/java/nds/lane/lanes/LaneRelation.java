/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanes;

public class LaneRelation implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            laneRelationType_ = new zserio.runtime.array.DeltaContext();
            range_ = new nds.core.geometry.LineRangeUnchecked.ZserioPackingContext();
            otherLane_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            otherLaneRange_ = new nds.core.geometry.LineRangeUnchecked.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLaneRelationType()
        {
            return laneRelationType_;
        }

        public nds.core.geometry.LineRangeUnchecked.ZserioPackingContext getRange()
        {
            return range_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getOtherLane()
        {
            return otherLane_;
        }

        public nds.core.geometry.LineRangeUnchecked.ZserioPackingContext getOtherLaneRange()
        {
            return otherLaneRange_;
        }

        private zserio.runtime.array.DeltaContext laneRelationType_;
        private nds.core.geometry.LineRangeUnchecked.ZserioPackingContext range_;
        private nds.core.types.Var4ByteId.ZserioPackingContext otherLane_;
        private nds.core.geometry.LineRangeUnchecked.ZserioPackingContext otherLaneRange_;
    };

    public LaneRelation()
    {
    }

    public LaneRelation(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneRelation(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneRelation(
            nds.lane.lanes.LaneRelationType laneRelationType_,
            nds.core.geometry.LineRangeUnchecked range_,
            nds.core.types.Var4ByteId otherLane_,
            nds.core.geometry.LineRangeUnchecked otherLaneRange_,
            java.lang.Boolean otherLaneSameDigitizationDirection_)
    {
        setLaneRelationType(laneRelationType_);
        setRange(range_);
        setOtherLane(otherLane_);
        setOtherLaneRange(otherLaneRange_);
        setOtherLaneSameDigitizationDirection(otherLaneSameDigitizationDirection_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneRelationType_.initPackingContext(zserioContext.getLaneRelationType());
        range_.initPackingContext(zserioContext.getRange());
        otherLane_.initPackingContext(zserioContext.getOtherLane());
        otherLaneRange_.initPackingContext(zserioContext.getOtherLaneRange());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += laneRelationType_.bitSizeOf(endBitPosition);
        endBitPosition += range_.bitSizeOf(endBitPosition);
        endBitPosition += otherLane_.bitSizeOf(endBitPosition);
        endBitPosition += otherLaneRange_.bitSizeOf(endBitPosition);
        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            endBitPosition += 1;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += laneRelationType_.bitSizeOf(zserioContext.getLaneRelationType(), endBitPosition);
        endBitPosition += range_.bitSizeOf(zserioContext.getRange(), endBitPosition);
        endBitPosition += otherLane_.bitSizeOf(zserioContext.getOtherLane(), endBitPosition);
        endBitPosition += otherLaneRange_.bitSizeOf(zserioContext.getOtherLaneRange(), endBitPosition);
        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            endBitPosition += 1;
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.lanes.LaneRelationType getLaneRelationType()
    {
        return laneRelationType_;
    }

    public void setLaneRelationType(nds.lane.lanes.LaneRelationType laneRelationType_)
    {
        this.laneRelationType_ = laneRelationType_;
    }

    public nds.core.geometry.LineRangeUnchecked getRange()
    {
        return range_;
    }

    public void setRange(nds.core.geometry.LineRangeUnchecked range_)
    {
        this.range_ = range_;
    }

    public nds.core.types.Var4ByteId getOtherLane()
    {
        return otherLane_;
    }

    public void setOtherLane(nds.core.types.Var4ByteId otherLane_)
    {
        this.otherLane_ = otherLane_;
    }

    public nds.core.geometry.LineRangeUnchecked getOtherLaneRange()
    {
        return otherLaneRange_;
    }

    public void setOtherLaneRange(nds.core.geometry.LineRangeUnchecked otherLaneRange_)
    {
        this.otherLaneRange_ = otherLaneRange_;
    }

    public java.lang.Boolean getOtherLaneSameDigitizationDirection()
    {
        return otherLaneSameDigitizationDirection_;
    }

    public void setOtherLaneSameDigitizationDirection(java.lang.Boolean otherLaneSameDigitizationDirection_)
    {
        this.otherLaneSameDigitizationDirection_ = otherLaneSameDigitizationDirection_;
    }

    public boolean isOtherLaneSameDigitizationDirectionUsed()
    {
        return (getLaneRelationType() != nds.lane.lanes.LaneRelationType.CROSSING);
    }

    public boolean isOtherLaneSameDigitizationDirectionSet()
    {
        return (otherLaneSameDigitizationDirection_ != null);
    }

    public void resetOtherLaneSameDigitizationDirection()
    {
        this.otherLaneSameDigitizationDirection_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneRelation)
        {
            final LaneRelation that = (LaneRelation)obj;

            return
                    ((laneRelationType_ == null) ? that.laneRelationType_ == null : laneRelationType_.getValue() == that.laneRelationType_.getValue()) &&
                    ((range_ == null) ? that.range_ == null : range_.equals(that.range_)) &&
                    ((otherLane_ == null) ? that.otherLane_ == null : otherLane_.equals(that.otherLane_)) &&
                    ((otherLaneRange_ == null) ? that.otherLaneRange_ == null : otherLaneRange_.equals(that.otherLaneRange_)) &&
                    ((!isOtherLaneSameDigitizationDirectionUsed()) ? !that.isOtherLaneSameDigitizationDirectionUsed() :
                        ((otherLaneSameDigitizationDirection_ == null) ? that.otherLaneSameDigitizationDirection_ == null : otherLaneSameDigitizationDirection_.equals(that.otherLaneSameDigitizationDirection_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRelationType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, range_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, otherLane_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, otherLaneRange_);
        if (isOtherLaneSameDigitizationDirectionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, otherLaneSameDigitizationDirection_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        laneRelationType_ = nds.lane.lanes.LaneRelationType.readEnum(in);

        range_ = new nds.core.geometry.LineRangeUnchecked(in);

        otherLane_ = new nds.core.types.Var4ByteId(in);

        otherLaneRange_ = new nds.core.geometry.LineRangeUnchecked(in);

        if (getLaneRelationType() != nds.lane.lanes.LaneRelationType.CROSSING)
        {
            otherLaneSameDigitizationDirection_ = in.readBool();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneRelationType_ = nds.lane.lanes.LaneRelationType.readEnum(zserioContext.getLaneRelationType(), in);

        range_ = new nds.core.geometry.LineRangeUnchecked(zserioContext.getRange(), in);

        otherLane_ = new nds.core.types.Var4ByteId(zserioContext.getOtherLane(), in);

        otherLaneRange_ = new nds.core.geometry.LineRangeUnchecked(zserioContext.getOtherLaneRange(), in);

        if (getLaneRelationType() != nds.lane.lanes.LaneRelationType.CROSSING)
        {
            otherLaneSameDigitizationDirection_ = in.readBool();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += laneRelationType_.bitSizeOf(endBitPosition);
        endBitPosition = range_.initializeOffsets(endBitPosition);
        endBitPosition = otherLane_.initializeOffsets(endBitPosition);
        endBitPosition = otherLaneRange_.initializeOffsets(endBitPosition);
        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            endBitPosition += 1;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = laneRelationType_.initializeOffsets(zserioContext.getLaneRelationType(), endBitPosition);
        endBitPosition = range_.initializeOffsets(zserioContext.getRange(), endBitPosition);
        endBitPosition = otherLane_.initializeOffsets(zserioContext.getOtherLane(), endBitPosition);
        endBitPosition = otherLaneRange_.initializeOffsets(zserioContext.getOtherLaneRange(), endBitPosition);
        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            endBitPosition += 1;
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        laneRelationType_.write(out);

        range_.write(out);

        otherLane_.write(out);

        otherLaneRange_.write(out);

        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            out.writeBool(otherLaneSameDigitizationDirection_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneRelationType_.write(zserioContext.getLaneRelationType(), out);

        range_.write(zserioContext.getRange(), out);

        otherLane_.write(zserioContext.getOtherLane(), out);

        otherLaneRange_.write(zserioContext.getOtherLaneRange(), out);

        if (isOtherLaneSameDigitizationDirectionUsed())
        {
            out.writeBool(otherLaneSameDigitizationDirection_);
        }
    }

    private nds.lane.lanes.LaneRelationType laneRelationType_;
    private nds.core.geometry.LineRangeUnchecked range_;
    private nds.core.types.Var4ByteId otherLane_;
    private nds.core.geometry.LineRangeUnchecked otherLaneRange_;
    private java.lang.Boolean otherLaneSameDigitizationDirection_;
}
