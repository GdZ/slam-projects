/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanes;

public class LaneConnector implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            priority_ = new zserio.runtime.array.DeltaContext();
            connectedLaneId_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getPriority()
        {
            return priority_;
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getConnectedLaneId()
        {
            return connectedLaneId_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext priority_;
        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext connectedLaneId_;
    };

    public LaneConnector()
    {
    }

    public LaneConnector(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneConnector(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneConnector(
            nds.lane.lanes.LaneConnectionType type_,
            nds.lane.lanes.LaneSplitMergePriority priority_,
            nds.core.types.Var4ByteDirectedReference connectedLaneId_)
    {
        setType(type_);
        setPriority(priority_);
        setConnectedLaneId(connectedLaneId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        priority_.initPackingContext(zserioContext.getPriority());
        if (isConnectedLaneIdUsed())
        {
            connectedLaneId_.initPackingContext(zserioContext.getConnectedLaneId());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += priority_.bitSizeOf(endBitPosition);
        if (isConnectedLaneIdUsed())
        {
            endBitPosition += connectedLaneId_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += priority_.bitSizeOf(zserioContext.getPriority(), endBitPosition);
        if (isConnectedLaneIdUsed())
        {
            endBitPosition += connectedLaneId_.bitSizeOf(zserioContext.getConnectedLaneId(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.lanes.LaneConnectionType getType()
    {
        return type_;
    }

    public void setType(nds.lane.lanes.LaneConnectionType type_)
    {
        this.type_ = type_;
    }

    public nds.lane.lanes.LaneSplitMergePriority getPriority()
    {
        return priority_;
    }

    public void setPriority(nds.lane.lanes.LaneSplitMergePriority priority_)
    {
        this.priority_ = priority_;
    }

    public nds.core.types.Var4ByteDirectedReference getConnectedLaneId()
    {
        return connectedLaneId_;
    }

    public void setConnectedLaneId(nds.core.types.Var4ByteDirectedReference connectedLaneId_)
    {
        this.connectedLaneId_ = connectedLaneId_;
    }

    public boolean isConnectedLaneIdUsed()
    {
        return (getType() == nds.lane.lanes.LaneConnectionType.BY_IDENTIFIER);
    }

    public boolean isConnectedLaneIdSet()
    {
        return (connectedLaneId_ != null);
    }

    public void resetConnectedLaneId()
    {
        this.connectedLaneId_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneConnector)
        {
            final LaneConnector that = (LaneConnector)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((priority_ == null) ? that.priority_ == null : priority_.getValue() == that.priority_.getValue()) &&
                    ((!isConnectedLaneIdUsed()) ? !that.isConnectedLaneIdUsed() :
                        ((connectedLaneId_ == null) ? that.connectedLaneId_ == null : connectedLaneId_.equals(that.connectedLaneId_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, priority_);
        if (isConnectedLaneIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectedLaneId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.lane.lanes.LaneConnectionType.readEnum(in);

        priority_ = nds.lane.lanes.LaneSplitMergePriority.readEnum(in);

        if (getType() == nds.lane.lanes.LaneConnectionType.BY_IDENTIFIER)
        {
            connectedLaneId_ = new nds.core.types.Var4ByteDirectedReference(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.lane.lanes.LaneConnectionType.readEnum(zserioContext.getType(), in);

        priority_ = nds.lane.lanes.LaneSplitMergePriority.readEnum(zserioContext.getPriority(), in);

        if (getType() == nds.lane.lanes.LaneConnectionType.BY_IDENTIFIER)
        {
            connectedLaneId_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getConnectedLaneId(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += priority_.bitSizeOf(endBitPosition);
        if (isConnectedLaneIdUsed())
        {
            endBitPosition = connectedLaneId_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = priority_.initializeOffsets(zserioContext.getPriority(), endBitPosition);
        if (isConnectedLaneIdUsed())
        {
            endBitPosition = connectedLaneId_.initializeOffsets(zserioContext.getConnectedLaneId(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        priority_.write(out);

        if (isConnectedLaneIdUsed())
        {
            connectedLaneId_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        priority_.write(zserioContext.getPriority(), out);

        if (isConnectedLaneIdUsed())
        {
            connectedLaneId_.write(zserioContext.getConnectedLaneId(), out);
        }
    }

    private nds.lane.lanes.LaneConnectionType type_;
    private nds.lane.lanes.LaneSplitMergePriority priority_ = nds.lane.lanes.LaneSplitMergePriority.MAJOR;
    private nds.core.types.Var4ByteDirectedReference connectedLaneId_;
}
