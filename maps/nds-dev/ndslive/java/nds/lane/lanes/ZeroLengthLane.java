/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanes;

public class ZeroLengthLane implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            laneId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getLaneId()
        {
            return laneId_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext laneId_;
    };

    public ZeroLengthLane(
            boolean onBorder_)
    {
        this.onBorder_ = onBorder_;
    }

    public ZeroLengthLane(zserio.runtime.io.BitStreamReader in,
            boolean onBorder_)
            throws java.io.IOException
    {
        this.onBorder_ = onBorder_;

        read(in);
    }

    public ZeroLengthLane(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            boolean onBorder_)
            throws java.io.IOException
    {
        this.onBorder_ = onBorder_;

        read(context, in);
    }

    public ZeroLengthLane(
            boolean onBorder_,
            nds.core.types.Var4ByteId laneId_,
            nds.lane.lanes.LaneConnector[] previousLanes_,
            nds.lane.lanes.LaneConnector[] nextLanes_)
    {
        this(onBorder_);

        setLaneId(laneId_);
        setPreviousLanes(previousLanes_);
        setNextLanes(nextLanes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneId_.initPackingContext(zserioContext.getLaneId());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += laneId_.bitSizeOf(endBitPosition);
        endBitPosition += previousLanes_.bitSizeOf(endBitPosition);
        if (isNextLanesUsed())
        {
            endBitPosition += nextLanes_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += laneId_.bitSizeOf(zserioContext.getLaneId(), endBitPosition);
        endBitPosition += previousLanes_.bitSizeOfPacked(endBitPosition);
        if (isNextLanesUsed())
        {
            endBitPosition += nextLanes_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getOnBorder()
    {
        return this.onBorder_;
    }

    public nds.core.types.Var4ByteId getLaneId()
    {
        return laneId_;
    }

    public void setLaneId(nds.core.types.Var4ByteId laneId_)
    {
        this.laneId_ = laneId_;
    }

    public nds.lane.lanes.LaneConnector[] getPreviousLanes()
    {
        return (previousLanes_ == null) ? null : previousLanes_.getRawArray();
    }

    public void setPreviousLanes(nds.lane.lanes.LaneConnector[] previousLanes_)
    {
        this.previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class, previousLanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.lane.lanes.LaneConnector[] getNextLanes()
    {
        return (nextLanes_ == null) ? null : nextLanes_.getRawArray();
    }

    public void setNextLanes(nds.lane.lanes.LaneConnector[] nextLanes_)
    {
        if (nextLanes_ == null)
        {
            this.nextLanes_ = null;
        }
        else
        {
            this.nextLanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class, nextLanes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isNextLanesUsed()
    {
        return (!getOnBorder());
    }

    public boolean isNextLanesSet()
    {
        return (nextLanes_ != null);
    }

    public void resetNextLanes()
    {
        this.nextLanes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ZeroLengthLane)
        {
            final ZeroLengthLane that = (ZeroLengthLane)obj;

            return
                    this.onBorder_ == that.onBorder_ &&
                    ((laneId_ == null) ? that.laneId_ == null : laneId_.equals(that.laneId_)) &&
                    ((previousLanes_ == null) ? that.previousLanes_ == null : previousLanes_.equals(that.previousLanes_)) &&
                    ((!isNextLanesUsed()) ? !that.isNextLanesUsed() :
                        ((nextLanes_ == null) ? that.nextLanes_ == null : nextLanes_.equals(that.nextLanes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getOnBorder());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, previousLanes_);
        if (isNextLanesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, nextLanes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        laneId_ = new nds.core.types.Var4ByteId(in);

        previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        previousLanes_.read(in);

        if (!getOnBorder())
        {
            nextLanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                    zserio.runtime.array.ArrayType.AUTO);
            nextLanes_.read(in);
        }

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneId_ = new nds.core.types.Var4ByteId(zserioContext.getLaneId(), in);

        previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        previousLanes_.readPacked(in);

        if (!getOnBorder())
        {
            nextLanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                    zserio.runtime.array.ArrayType.AUTO);
            nextLanes_.readPacked(in);
        }

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = laneId_.initializeOffsets(endBitPosition);
        endBitPosition = previousLanes_.initializeOffsets(endBitPosition);
        if (isNextLanesUsed())
        {
            endBitPosition = nextLanes_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = laneId_.initializeOffsets(zserioContext.getLaneId(), endBitPosition);
        endBitPosition = previousLanes_.initializeOffsetsPacked(endBitPosition);
        if (isNextLanesUsed())
        {
            endBitPosition = nextLanes_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        laneId_.write(out);

        previousLanes_.write(out);

        if (isNextLanesUsed())
        {
            nextLanes_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        laneId_.write(zserioContext.getLaneId(), out);

        previousLanes_.writePacked(out);

        if (isNextLanesUsed())
        {
            nextLanes_.writePacked(out);
        }
    }

    private void checkConstraints()
    {
        if (!(getPreviousLanes().length > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at ZeroLengthLane.previousLanes!");
        if (isNextLanesUsed() && !(getNextLanes().length > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at ZeroLengthLane.nextLanes!");
    }

    private static final class ZserioElementFactory_previousLanes implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.LaneConnector>
    {
        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.LaneConnector.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(context, in);
        }
    }

    private static final class ZserioElementFactory_nextLanes implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.LaneConnector>
    {
        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.LaneConnector.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(context, in);
        }
    }

    private final boolean onBorder_;
    private nds.core.types.Var4ByteId laneId_;
    private zserio.runtime.array.Array previousLanes_;
    private zserio.runtime.array.Array nextLanes_;
}
