/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanes;

public class Lane implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            directedLaneId_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
            laneId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            length_ = new zserio.runtime.array.DeltaContext();
            centerLineGeometryRef_ = new zserio.runtime.array.DeltaContext();
            openToLeft_ = new nds.lane.lanes.LaneTraversability.ZserioPackingContext();
            openToRight_ = new nds.lane.lanes.LaneTraversability.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getDirectedLaneId()
        {
            return directedLaneId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getLaneId()
        {
            return laneId_;
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        public zserio.runtime.array.DeltaContext getCenterLineGeometryRef()
        {
            return centerLineGeometryRef_;
        }

        public nds.lane.lanes.LaneTraversability.ZserioPackingContext getOpenToLeft()
        {
            return openToLeft_;
        }

        public nds.lane.lanes.LaneTraversability.ZserioPackingContext getOpenToRight()
        {
            return openToRight_;
        }

        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext directedLaneId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext laneId_;
        private zserio.runtime.array.DeltaContext length_;
        private zserio.runtime.array.DeltaContext centerLineGeometryRef_;
        private nds.lane.lanes.LaneTraversability.ZserioPackingContext openToLeft_;
        private nds.lane.lanes.LaneTraversability.ZserioPackingContext openToRight_;
    };

    public Lane(
            nds.lane.types.LaneLayoutType layout_,
            boolean hasBoundaryGeometry_)
    {
        this.layout_ = layout_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;
    }

    public Lane(zserio.runtime.io.BitStreamReader in,
            nds.lane.types.LaneLayoutType layout_,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.layout_ = layout_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(in);
    }

    public Lane(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.lane.types.LaneLayoutType layout_,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.layout_ = layout_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(context, in);
    }

    public Lane(
            nds.lane.types.LaneLayoutType layout_,
            boolean hasBoundaryGeometry_,
            nds.core.types.Var4ByteDirectedReference directedLaneId_,
            nds.core.types.Var4ByteId laneId_,
            nds.lane.lanes.LaneConnector[] previousLanes_,
            nds.lane.lanes.LaneConnector[] nextLanes_,
            int length_,
            int centerLineGeometryRef_,
            nds.lane.lanes.LaneRelation[] laneRelations_,
            nds.lane.lanes.LaneTraversability openToLeft_,
            nds.lane.lanes.LaneTraversability openToRight_,
            nds.lane.boundaries.BoundarySet[] boundariesLeft_,
            nds.lane.boundaries.BoundarySet[] boundariesRight_)
    {
        this(layout_, hasBoundaryGeometry_);

        setDirectedLaneId(directedLaneId_);
        setLaneId(laneId_);
        setPreviousLanes(previousLanes_);
        setNextLanes(nextLanes_);
        setLength(length_);
        setCenterLineGeometryRef(centerLineGeometryRef_);
        setLaneRelations(laneRelations_);
        setOpenToLeft(openToLeft_);
        setOpenToRight(openToRight_);
        setBoundariesLeft(boundariesLeft_);
        setBoundariesRight(boundariesRight_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isDirectedLaneIdUsed())
        {
            directedLaneId_.initPackingContext(zserioContext.getDirectedLaneId());
        }
        if (isLaneIdUsed())
        {
            laneId_.initPackingContext(zserioContext.getLaneId());
        }
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        zserioContext.getCenterLineGeometryRef().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(centerLineGeometryRef_));
        openToLeft_.initPackingContext(zserioContext.getOpenToLeft());
        openToRight_.initPackingContext(zserioContext.getOpenToRight());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isDirectedLaneIdUsed())
        {
            endBitPosition += directedLaneId_.bitSizeOf(endBitPosition);
        }
        if (isLaneIdUsed())
        {
            endBitPosition += laneId_.bitSizeOf(endBitPosition);
        }
        endBitPosition += previousLanes_.bitSizeOf(endBitPosition);
        endBitPosition += nextLanes_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(centerLineGeometryRef_);
        if (isLaneRelationsUsed())
        {
            endBitPosition += laneRelations_.bitSizeOf(endBitPosition);
        }
        endBitPosition += openToLeft_.bitSizeOf(endBitPosition);
        endBitPosition += openToRight_.bitSizeOf(endBitPosition);
        endBitPosition += boundariesLeft_.bitSizeOf(endBitPosition);
        endBitPosition += boundariesRight_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isDirectedLaneIdUsed())
        {
            endBitPosition += directedLaneId_.bitSizeOf(zserioContext.getDirectedLaneId(), endBitPosition);
        }
        if (isLaneIdUsed())
        {
            endBitPosition += laneId_.bitSizeOf(zserioContext.getLaneId(), endBitPosition);
        }
        endBitPosition += previousLanes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += nextLanes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += zserioContext.getCenterLineGeometryRef().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(centerLineGeometryRef_));
        if (isLaneRelationsUsed())
        {
            endBitPosition += laneRelations_.bitSizeOfPacked(endBitPosition);
        }
        endBitPosition += openToLeft_.bitSizeOf(zserioContext.getOpenToLeft(), endBitPosition);
        endBitPosition += openToRight_.bitSizeOf(zserioContext.getOpenToRight(), endBitPosition);
        endBitPosition += boundariesLeft_.bitSizeOfPacked(endBitPosition);
        endBitPosition += boundariesRight_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.types.LaneLayoutType getLayout()
    {
        return this.layout_;
    }

    public boolean getHasBoundaryGeometry()
    {
        return this.hasBoundaryGeometry_;
    }

    public nds.core.types.Var4ByteDirectedReference getDirectedLaneId()
    {
        return directedLaneId_;
    }

    public void setDirectedLaneId(nds.core.types.Var4ByteDirectedReference directedLaneId_)
    {
        this.directedLaneId_ = directedLaneId_;
    }

    public boolean isDirectedLaneIdUsed()
    {
        return (getLayout() == nds.lane.types.LaneLayoutType.ORDERED);
    }

    public boolean isDirectedLaneIdSet()
    {
        return (directedLaneId_ != null);
    }

    public void resetDirectedLaneId()
    {
        this.directedLaneId_ = null;
    }

    public nds.core.types.Var4ByteId getLaneId()
    {
        return laneId_;
    }

    public void setLaneId(nds.core.types.Var4ByteId laneId_)
    {
        this.laneId_ = laneId_;
    }

    public boolean isLaneIdUsed()
    {
        return (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED);
    }

    public boolean isLaneIdSet()
    {
        return (laneId_ != null);
    }

    public void resetLaneId()
    {
        this.laneId_ = null;
    }

    public nds.lane.lanes.LaneConnector[] getPreviousLanes()
    {
        return (previousLanes_ == null) ? null : previousLanes_.getRawArray();
    }

    public void setPreviousLanes(nds.lane.lanes.LaneConnector[] previousLanes_)
    {
        this.previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class, previousLanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.lane.lanes.LaneConnector[] getNextLanes()
    {
        return (nextLanes_ == null) ? null : nextLanes_.getRawArray();
    }

    public void setNextLanes(nds.lane.lanes.LaneConnector[] nextLanes_)
    {
        this.nextLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class, nextLanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    public int getCenterLineGeometryRef()
    {
        return centerLineGeometryRef_;
    }

    public void setCenterLineGeometryRef(int centerLineGeometryRef_)
    {
        this.centerLineGeometryRef_ = centerLineGeometryRef_;
    }

    public nds.lane.lanes.LaneRelation[] getLaneRelations()
    {
        return (laneRelations_ == null) ? null : laneRelations_.getRawArray();
    }

    public void setLaneRelations(nds.lane.lanes.LaneRelation[] laneRelations_)
    {
        if (laneRelations_ == null)
        {
            this.laneRelations_ = null;
        }
        else
        {
            this.laneRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneRelation.class, laneRelations_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneRelation>(new ZserioElementFactory_laneRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isLaneRelationsUsed()
    {
        return (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED);
    }

    public boolean isLaneRelationsSet()
    {
        return (laneRelations_ != null);
    }

    public void resetLaneRelations()
    {
        this.laneRelations_ = null;
    }

    public nds.lane.lanes.LaneTraversability getOpenToLeft()
    {
        return openToLeft_;
    }

    public void setOpenToLeft(nds.lane.lanes.LaneTraversability openToLeft_)
    {
        this.openToLeft_ = openToLeft_;
    }

    public nds.lane.lanes.LaneTraversability getOpenToRight()
    {
        return openToRight_;
    }

    public void setOpenToRight(nds.lane.lanes.LaneTraversability openToRight_)
    {
        this.openToRight_ = openToRight_;
    }

    public nds.lane.boundaries.BoundarySet[] getBoundariesLeft()
    {
        return (boundariesLeft_ == null) ? null : boundariesLeft_.getRawArray();
    }

    public void setBoundariesLeft(nds.lane.boundaries.BoundarySet[] boundariesLeft_)
    {
        this.boundariesLeft_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class, boundariesLeft_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesLeft()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.lane.boundaries.BoundarySet[] getBoundariesRight()
    {
        return (boundariesRight_ == null) ? null : boundariesRight_.getRawArray();
    }

    public void setBoundariesRight(nds.lane.boundaries.BoundarySet[] boundariesRight_)
    {
        this.boundariesRight_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class, boundariesRight_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesRight()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Lane)
        {
            final Lane that = (Lane)obj;

            return
                    ((this.layout_ == null) ? that.layout_ == null : this.layout_.getValue() == that.layout_.getValue()) &&
                    this.hasBoundaryGeometry_ == that.hasBoundaryGeometry_ &&
                    ((!isDirectedLaneIdUsed()) ? !that.isDirectedLaneIdUsed() :
                        ((directedLaneId_ == null) ? that.directedLaneId_ == null : directedLaneId_.equals(that.directedLaneId_))) &&
                    ((!isLaneIdUsed()) ? !that.isLaneIdUsed() :
                        ((laneId_ == null) ? that.laneId_ == null : laneId_.equals(that.laneId_))) &&
                    ((previousLanes_ == null) ? that.previousLanes_ == null : previousLanes_.equals(that.previousLanes_)) &&
                    ((nextLanes_ == null) ? that.nextLanes_ == null : nextLanes_.equals(that.nextLanes_)) &&
                    length_ == that.length_ &&
                    centerLineGeometryRef_ == that.centerLineGeometryRef_ &&
                    ((!isLaneRelationsUsed()) ? !that.isLaneRelationsUsed() :
                        ((laneRelations_ == null) ? that.laneRelations_ == null : laneRelations_.equals(that.laneRelations_))) &&
                    ((openToLeft_ == null) ? that.openToLeft_ == null : openToLeft_.equals(that.openToLeft_)) &&
                    ((openToRight_ == null) ? that.openToRight_ == null : openToRight_.equals(that.openToRight_)) &&
                    ((boundariesLeft_ == null) ? that.boundariesLeft_ == null : boundariesLeft_.equals(that.boundariesLeft_)) &&
                    ((boundariesRight_ == null) ? that.boundariesRight_ == null : boundariesRight_.equals(that.boundariesRight_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getLayout());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasBoundaryGeometry());
        if (isDirectedLaneIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, directedLaneId_);
        if (isLaneIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, previousLanes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, nextLanes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, centerLineGeometryRef_);
        if (isLaneRelationsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneRelations_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, openToLeft_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, openToRight_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundariesLeft_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundariesRight_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        if (getLayout() == nds.lane.types.LaneLayoutType.ORDERED)
        {
            directedLaneId_ = new nds.core.types.Var4ByteDirectedReference(in);
        }

        if (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED)
        {
            laneId_ = new nds.core.types.Var4ByteId(in);
        }

        previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        previousLanes_.read(in);

        nextLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        nextLanes_.read(in);

        length_ = in.readVarUInt32();

        centerLineGeometryRef_ = in.readVarUInt32();

        if (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED)
        {
            laneRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneRelation>(new ZserioElementFactory_laneRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            laneRelations_.read(in);
        }

        openToLeft_ = new nds.lane.lanes.LaneTraversability(in);

        openToRight_ = new nds.lane.lanes.LaneTraversability(in);

        boundariesLeft_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesLeft()),
                zserio.runtime.array.ArrayType.AUTO);
        boundariesLeft_.read(in);

        boundariesRight_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesRight()),
                zserio.runtime.array.ArrayType.AUTO);
        boundariesRight_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (getLayout() == nds.lane.types.LaneLayoutType.ORDERED)
        {
            directedLaneId_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getDirectedLaneId(), in);
        }

        if (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED)
        {
            laneId_ = new nds.core.types.Var4ByteId(zserioContext.getLaneId(), in);
        }

        previousLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_previousLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        previousLanes_.readPacked(in);

        nextLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneConnector.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneConnector>(new ZserioElementFactory_nextLanes()),
                zserio.runtime.array.ArrayType.AUTO);
        nextLanes_.readPacked(in);

        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        centerLineGeometryRef_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getCenterLineGeometryRef().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (getLayout() == nds.lane.types.LaneLayoutType.UNORDERED)
        {
            laneRelations_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.LaneRelation.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.LaneRelation>(new ZserioElementFactory_laneRelations()),
                    zserio.runtime.array.ArrayType.AUTO);
            laneRelations_.readPacked(in);
        }

        openToLeft_ = new nds.lane.lanes.LaneTraversability(zserioContext.getOpenToLeft(), in);

        openToRight_ = new nds.lane.lanes.LaneTraversability(zserioContext.getOpenToRight(), in);

        boundariesLeft_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesLeft()),
                zserio.runtime.array.ArrayType.AUTO);
        boundariesLeft_.readPacked(in);

        boundariesRight_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundarySet.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundarySet>(new ZserioElementFactory_boundariesRight()),
                zserio.runtime.array.ArrayType.AUTO);
        boundariesRight_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        if (isDirectedLaneIdUsed())
        {
            endBitPosition = directedLaneId_.initializeOffsets(endBitPosition);
        }
        if (isLaneIdUsed())
        {
            endBitPosition = laneId_.initializeOffsets(endBitPosition);
        }
        endBitPosition = previousLanes_.initializeOffsets(endBitPosition);
        endBitPosition = nextLanes_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(centerLineGeometryRef_);
        if (isLaneRelationsUsed())
        {
            endBitPosition = laneRelations_.initializeOffsets(endBitPosition);
        }
        endBitPosition = openToLeft_.initializeOffsets(endBitPosition);
        endBitPosition = openToRight_.initializeOffsets(endBitPosition);
        endBitPosition = boundariesLeft_.initializeOffsets(endBitPosition);
        endBitPosition = boundariesRight_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        if (isDirectedLaneIdUsed())
        {
            endBitPosition = directedLaneId_.initializeOffsets(zserioContext.getDirectedLaneId(), endBitPosition);
        }
        if (isLaneIdUsed())
        {
            endBitPosition = laneId_.initializeOffsets(zserioContext.getLaneId(), endBitPosition);
        }
        endBitPosition = previousLanes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = nextLanes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += zserioContext.getCenterLineGeometryRef().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(centerLineGeometryRef_));
        if (isLaneRelationsUsed())
        {
            endBitPosition = laneRelations_.initializeOffsetsPacked(endBitPosition);
        }
        endBitPosition = openToLeft_.initializeOffsets(zserioContext.getOpenToLeft(), endBitPosition);
        endBitPosition = openToRight_.initializeOffsets(zserioContext.getOpenToRight(), endBitPosition);
        endBitPosition = boundariesLeft_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = boundariesRight_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        if (isDirectedLaneIdUsed())
        {
            directedLaneId_.write(out);
        }

        if (isLaneIdUsed())
        {
            laneId_.write(out);
        }

        previousLanes_.write(out);

        nextLanes_.write(out);

        out.writeVarUInt32(length_);

        out.writeVarUInt32(centerLineGeometryRef_);

        if (isLaneRelationsUsed())
        {
            laneRelations_.write(out);
        }

        openToLeft_.write(out);

        openToRight_.write(out);

        boundariesLeft_.write(out);

        boundariesRight_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isDirectedLaneIdUsed())
        {
            directedLaneId_.write(zserioContext.getDirectedLaneId(), out);
        }

        if (isLaneIdUsed())
        {
            laneId_.write(zserioContext.getLaneId(), out);
        }

        previousLanes_.writePacked(out);

        nextLanes_.writePacked(out);

        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        zserioContext.getCenterLineGeometryRef().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(centerLineGeometryRef_));

        if (isLaneRelationsUsed())
        {
            laneRelations_.writePacked(out);
        }

        openToLeft_.write(zserioContext.getOpenToLeft(), out);

        openToRight_.write(zserioContext.getOpenToRight(), out);

        boundariesLeft_.writePacked(out);

        boundariesRight_.writePacked(out);
    }

    private static final class ZserioElementFactory_previousLanes implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.LaneConnector>
    {
        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.LaneConnector.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(context, in);
        }
    }

    private static final class ZserioElementFactory_nextLanes implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.LaneConnector>
    {
        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.LaneConnector.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.LaneConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.LaneConnector(context, in);
        }
    }

    private static final class ZserioElementFactory_laneRelations implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.LaneRelation>
    {
        @Override
        public nds.lane.lanes.LaneRelation create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.LaneRelation(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.LaneRelation.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.LaneRelation create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.LaneRelation(context, in);
        }
    }

    private final class ZserioElementFactory_boundariesLeft implements zserio.runtime.array.PackableElementFactory<nds.lane.boundaries.BoundarySet>
    {
        @Override
        public nds.lane.boundaries.BoundarySet create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundarySet(in, (boolean)(getHasBoundaryGeometry()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.boundaries.BoundarySet.ZserioPackingContext();
        }

        @Override
        public nds.lane.boundaries.BoundarySet create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundarySet(context, in, (boolean)(getHasBoundaryGeometry()));
        }
    }

    private final class ZserioElementFactory_boundariesRight implements zserio.runtime.array.PackableElementFactory<nds.lane.boundaries.BoundarySet>
    {
        @Override
        public nds.lane.boundaries.BoundarySet create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundarySet(in, (boolean)(getHasBoundaryGeometry()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.boundaries.BoundarySet.ZserioPackingContext();
        }

        @Override
        public nds.lane.boundaries.BoundarySet create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundarySet(context, in, (boolean)(getHasBoundaryGeometry()));
        }
    }

    private final nds.lane.types.LaneLayoutType layout_;
    private final boolean hasBoundaryGeometry_;
    private nds.core.types.Var4ByteDirectedReference directedLaneId_;
    private nds.core.types.Var4ByteId laneId_;
    private zserio.runtime.array.Array previousLanes_;
    private zserio.runtime.array.Array nextLanes_;
    private int length_;
    private int centerLineGeometryRef_;
    private zserio.runtime.array.Array laneRelations_;
    private nds.lane.lanes.LaneTraversability openToLeft_;
    private nds.lane.lanes.LaneTraversability openToRight_;
    private zserio.runtime.array.Array boundariesLeft_;
    private zserio.runtime.array.Array boundariesRight_;
}
