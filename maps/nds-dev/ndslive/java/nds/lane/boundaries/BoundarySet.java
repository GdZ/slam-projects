/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class BoundarySet implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            startPosition_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getStartPosition()
        {
            return startPosition_;
        }

        private zserio.runtime.array.DeltaContext startPosition_;
    };

    public BoundarySet(
            boolean hasGeometry_)
    {
        this.hasGeometry_ = hasGeometry_;
    }

    public BoundarySet(zserio.runtime.io.BitStreamReader in,
            boolean hasGeometry_)
            throws java.io.IOException
    {
        this.hasGeometry_ = hasGeometry_;

        read(in);
    }

    public BoundarySet(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            boolean hasGeometry_)
            throws java.io.IOException
    {
        this.hasGeometry_ = hasGeometry_;

        read(context, in);
    }

    public BoundarySet(
            boolean hasGeometry_,
            int startPosition_,
            nds.lane.boundaries.BoundaryReferenceWithPosition[] boundariesWithStartPosition_,
            short[] boundaryTypes_)
    {
        this(hasGeometry_);

        setStartPosition(startPosition_);
        setBoundariesWithStartPosition(boundariesWithStartPosition_);
        setBoundaryTypes(boundaryTypes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getStartPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startPosition_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(startPosition_);
        if (isBoundariesWithStartPositionUsed())
        {
            endBitPosition += boundariesWithStartPosition_.bitSizeOf(endBitPosition);
        }
        if (isBoundaryTypesUsed())
        {
            endBitPosition += boundaryTypes_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getStartPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startPosition_));
        if (isBoundariesWithStartPositionUsed())
        {
            endBitPosition += boundariesWithStartPosition_.bitSizeOfPacked(endBitPosition);
        }
        if (isBoundaryTypesUsed())
        {
            endBitPosition += boundaryTypes_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasGeometry()
    {
        return this.hasGeometry_;
    }

    public int getStartPosition()
    {
        return startPosition_;
    }

    public void setStartPosition(int startPosition_)
    {
        this.startPosition_ = startPosition_;
    }

    public nds.lane.boundaries.BoundaryReferenceWithPosition[] getBoundariesWithStartPosition()
    {
        return (boundariesWithStartPosition_ == null) ? null : boundariesWithStartPosition_.getRawArray();
    }

    public void setBoundariesWithStartPosition(nds.lane.boundaries.BoundaryReferenceWithPosition[] boundariesWithStartPosition_)
    {
        if (boundariesWithStartPosition_ == null)
        {
            this.boundariesWithStartPosition_ = null;
        }
        else
        {
            this.boundariesWithStartPosition_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryReferenceWithPosition.class, boundariesWithStartPosition_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryReferenceWithPosition>(new ZserioElementFactory_boundariesWithStartPosition()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isBoundariesWithStartPositionUsed()
    {
        return (getHasGeometry());
    }

    public boolean isBoundariesWithStartPositionSet()
    {
        return (boundariesWithStartPosition_ != null);
    }

    public void resetBoundariesWithStartPosition()
    {
        this.boundariesWithStartPosition_ = null;
    }

    public short[] getBoundaryTypes()
    {
        return (boundaryTypes_ == null) ? null : boundaryTypes_.getRawArray();
    }

    public void setBoundaryTypes(short[] boundaryTypes_)
    {
        if (boundaryTypes_ == null)
        {
            this.boundaryTypes_ = null;
        }
        else
        {
            this.boundaryTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(boundaryTypes_),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isBoundaryTypesUsed()
    {
        return (!getHasGeometry());
    }

    public boolean isBoundaryTypesSet()
    {
        return (boundaryTypes_ != null);
    }

    public void resetBoundaryTypes()
    {
        this.boundaryTypes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BoundarySet)
        {
            final BoundarySet that = (BoundarySet)obj;

            return
                    this.hasGeometry_ == that.hasGeometry_ &&
                    startPosition_ == that.startPosition_ &&
                    ((!isBoundariesWithStartPositionUsed()) ? !that.isBoundariesWithStartPositionUsed() :
                        ((boundariesWithStartPosition_ == null) ? that.boundariesWithStartPosition_ == null : boundariesWithStartPosition_.equals(that.boundariesWithStartPosition_))) &&
                    ((!isBoundaryTypesUsed()) ? !that.isBoundaryTypesUsed() :
                        ((boundaryTypes_ == null) ? that.boundaryTypes_ == null : boundaryTypes_.equals(that.boundaryTypes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasGeometry());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startPosition_);
        if (isBoundariesWithStartPositionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundariesWithStartPosition_);
        if (isBoundaryTypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundaryTypes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        startPosition_ = in.readVarSize();

        if (getHasGeometry())
        {
            boundariesWithStartPosition_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryReferenceWithPosition.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryReferenceWithPosition>(new ZserioElementFactory_boundariesWithStartPosition()),
                    zserio.runtime.array.ArrayType.AUTO);
            boundariesWithStartPosition_.read(in);
        }

        if (!getHasGeometry())
        {
            boundaryTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            boundaryTypes_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startPosition_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getStartPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        if (getHasGeometry())
        {
            boundariesWithStartPosition_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryReferenceWithPosition.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryReferenceWithPosition>(new ZserioElementFactory_boundariesWithStartPosition()),
                    zserio.runtime.array.ArrayType.AUTO);
            boundariesWithStartPosition_.readPacked(in);
        }

        if (!getHasGeometry())
        {
            boundaryTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.AUTO);
            boundaryTypes_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(startPosition_);
        if (isBoundariesWithStartPositionUsed())
        {
            endBitPosition = boundariesWithStartPosition_.initializeOffsets(endBitPosition);
        }
        if (isBoundaryTypesUsed())
        {
            endBitPosition = boundaryTypes_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getStartPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(startPosition_));
        if (isBoundariesWithStartPositionUsed())
        {
            endBitPosition = boundariesWithStartPosition_.initializeOffsetsPacked(endBitPosition);
        }
        if (isBoundaryTypesUsed())
        {
            endBitPosition = boundaryTypes_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(startPosition_);

        if (isBoundariesWithStartPositionUsed())
        {
            boundariesWithStartPosition_.write(out);
        }

        if (isBoundaryTypesUsed())
        {
            boundaryTypes_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getStartPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(startPosition_));

        if (isBoundariesWithStartPositionUsed())
        {
            boundariesWithStartPosition_.writePacked(out);
        }

        if (isBoundaryTypesUsed())
        {
            boundaryTypes_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_boundariesWithStartPosition implements zserio.runtime.array.PackableElementFactory<nds.lane.boundaries.BoundaryReferenceWithPosition>
    {
        @Override
        public nds.lane.boundaries.BoundaryReferenceWithPosition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundaryReferenceWithPosition(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.boundaries.BoundaryReferenceWithPosition.ZserioPackingContext();
        }

        @Override
        public nds.lane.boundaries.BoundaryReferenceWithPosition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundaryReferenceWithPosition(context, in);
        }
    }

    private final boolean hasGeometry_;
    private int startPosition_;
    private zserio.runtime.array.Array boundariesWithStartPosition_;
    private zserio.runtime.array.Array boundaryTypes_;
}
