/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class BoundaryElementRange implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            boundaryElementId_ = new zserio.runtime.array.DeltaContext();
            range_ = new nds.core.geometry.LineRangeUnchecked.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getBoundaryElementId()
        {
            return boundaryElementId_;
        }

        public nds.core.geometry.LineRangeUnchecked.ZserioPackingContext getRange()
        {
            return range_;
        }

        private zserio.runtime.array.DeltaContext boundaryElementId_;
        private nds.core.geometry.LineRangeUnchecked.ZserioPackingContext range_;
    };

    public BoundaryElementRange()
    {
    }

    public BoundaryElementRange(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public BoundaryElementRange(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public BoundaryElementRange(
            short boundaryElementId_,
            nds.core.geometry.LineRangeUnchecked range_)
    {
        setBoundaryElementId(boundaryElementId_);
        setRange(range_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getBoundaryElementId().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(boundaryElementId_));
        range_.initPackingContext(zserioContext.getRange());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(boundaryElementId_);
        endBitPosition += range_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getBoundaryElementId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(boundaryElementId_));
        endBitPosition += range_.bitSizeOf(zserioContext.getRange(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getBoundaryElementId()
    {
        return boundaryElementId_;
    }

    public void setBoundaryElementId(short boundaryElementId_)
    {
        this.boundaryElementId_ = boundaryElementId_;
    }

    public nds.core.geometry.LineRangeUnchecked getRange()
    {
        return range_;
    }

    public void setRange(nds.core.geometry.LineRangeUnchecked range_)
    {
        this.range_ = range_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BoundaryElementRange)
        {
            final BoundaryElementRange that = (BoundaryElementRange)obj;

            return
                    boundaryElementId_ == that.boundaryElementId_ &&
                    ((range_ == null) ? that.range_ == null : range_.equals(that.range_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundaryElementId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, range_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        boundaryElementId_ = in.readVarUInt16();

        range_ = new nds.core.geometry.LineRangeUnchecked(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        boundaryElementId_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getBoundaryElementId().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        range_ = new nds.core.geometry.LineRangeUnchecked(zserioContext.getRange(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(boundaryElementId_);
        endBitPosition = range_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getBoundaryElementId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(boundaryElementId_));
        endBitPosition = range_.initializeOffsets(zserioContext.getRange(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(boundaryElementId_);

        range_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getBoundaryElementId().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(boundaryElementId_));

        range_.write(zserioContext.getRange(), out);
    }

    private short boundaryElementId_;
    private nds.core.geometry.LineRangeUnchecked range_;
}
