/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class Boundary implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            geometryReference_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getId()
        {
            return id_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getGeometryReference()
        {
            return geometryReference_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext id_;
        private nds.core.types.Var4ByteId.ZserioPackingContext geometryReference_;
    };

    public Boundary()
    {
    }

    public Boundary(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Boundary(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Boundary(
            nds.core.types.Var4ByteId id_,
            nds.core.types.Var4ByteId geometryReference_,
            nds.lane.boundaries.BoundaryElementRange[] boundaryElementRanges_)
    {
        setId(id_);
        setGeometryReference(geometryReference_);
        setBoundaryElementRanges(boundaryElementRanges_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.initPackingContext(zserioContext.getId());
        geometryReference_.initPackingContext(zserioContext.getGeometryReference());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(endBitPosition);
        endBitPosition += geometryReference_.bitSizeOf(endBitPosition);
        endBitPosition += boundaryElementRanges_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(zserioContext.getId(), endBitPosition);
        endBitPosition += geometryReference_.bitSizeOf(zserioContext.getGeometryReference(), endBitPosition);
        endBitPosition += boundaryElementRanges_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getId()
    {
        return id_;
    }

    public void setId(nds.core.types.Var4ByteId id_)
    {
        this.id_ = id_;
    }

    public nds.core.types.Var4ByteId getGeometryReference()
    {
        return geometryReference_;
    }

    public void setGeometryReference(nds.core.types.Var4ByteId geometryReference_)
    {
        this.geometryReference_ = geometryReference_;
    }

    public nds.lane.boundaries.BoundaryElementRange[] getBoundaryElementRanges()
    {
        return (boundaryElementRanges_ == null) ? null : boundaryElementRanges_.getRawArray();
    }

    public void setBoundaryElementRanges(nds.lane.boundaries.BoundaryElementRange[] boundaryElementRanges_)
    {
        this.boundaryElementRanges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryElementRange.class, boundaryElementRanges_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryElementRange>(new ZserioElementFactory_boundaryElementRanges()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Boundary)
        {
            final Boundary that = (Boundary)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    ((geometryReference_ == null) ? that.geometryReference_ == null : geometryReference_.equals(that.geometryReference_)) &&
                    ((boundaryElementRanges_ == null) ? that.boundaryElementRanges_ == null : boundaryElementRanges_.equals(that.boundaryElementRanges_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, geometryReference_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, boundaryElementRanges_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = new nds.core.types.Var4ByteId(in);

        geometryReference_ = new nds.core.types.Var4ByteId(in);

        boundaryElementRanges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryElementRange.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryElementRange>(new ZserioElementFactory_boundaryElementRanges()),
                zserio.runtime.array.ArrayType.AUTO);
        boundaryElementRanges_.read(in);

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = new nds.core.types.Var4ByteId(zserioContext.getId(), in);

        geometryReference_ = new nds.core.types.Var4ByteId(zserioContext.getGeometryReference(), in);

        boundaryElementRanges_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.boundaries.BoundaryElementRange.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.boundaries.BoundaryElementRange>(new ZserioElementFactory_boundaryElementRanges()),
                zserio.runtime.array.ArrayType.AUTO);
        boundaryElementRanges_.readPacked(in);

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(endBitPosition);
        endBitPosition = geometryReference_.initializeOffsets(endBitPosition);
        endBitPosition = boundaryElementRanges_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(zserioContext.getId(), endBitPosition);
        endBitPosition = geometryReference_.initializeOffsets(zserioContext.getGeometryReference(), endBitPosition);
        endBitPosition = boundaryElementRanges_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        id_.write(out);

        geometryReference_.write(out);

        boundaryElementRanges_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        id_.write(zserioContext.getId(), out);

        geometryReference_.write(zserioContext.getGeometryReference(), out);

        boundaryElementRanges_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!(getBoundaryElementRanges().length > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at Boundary.boundaryElementRanges!");
    }

    private static final class ZserioElementFactory_boundaryElementRanges implements zserio.runtime.array.PackableElementFactory<nds.lane.boundaries.BoundaryElementRange>
    {
        @Override
        public nds.lane.boundaries.BoundaryElementRange create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundaryElementRange(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.boundaries.BoundaryElementRange.ZserioPackingContext();
        }

        @Override
        public nds.lane.boundaries.BoundaryElementRange create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.boundaries.BoundaryElementRange(context, in);
        }
    }

    private nds.core.types.Var4ByteId id_;
    private nds.core.types.Var4ByteId geometryReference_;
    private zserio.runtime.array.Array boundaryElementRanges_;
}
