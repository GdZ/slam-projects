/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class BoundaryMarkingDashDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            dashLength_ = new zserio.runtime.array.DeltaContext();
            dashSpacing_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getDashLength()
        {
            return dashLength_;
        }

        public zserio.runtime.array.DeltaContext getDashSpacing()
        {
            return dashSpacing_;
        }

        private zserio.runtime.array.DeltaContext dashLength_;
        private zserio.runtime.array.DeltaContext dashSpacing_;
    };

    public BoundaryMarkingDashDetails()
    {
    }

    public BoundaryMarkingDashDetails(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public BoundaryMarkingDashDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public BoundaryMarkingDashDetails(
            int dashLength_,
            int dashSpacing_,
            java.lang.Boolean spaceAtStart_,
            java.lang.Boolean spaceAtEnd_)
    {
        setDashLength(dashLength_);
        setDashSpacing(dashSpacing_);
        setSpaceAtStart(spaceAtStart_);
        setSpaceAtEnd(spaceAtEnd_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getDashLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashLength_));
        zserioContext.getDashSpacing().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashSpacing_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(dashLength_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(dashSpacing_);
        if (isSpaceAtStartUsed())
        {
            endBitPosition += 1;
        }
        if (isSpaceAtEndUsed())
        {
            endBitPosition += 1;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDashLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashLength_));
        endBitPosition += zserioContext.getDashSpacing().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashSpacing_));
        if (isSpaceAtStartUsed())
        {
            endBitPosition += 1;
        }
        if (isSpaceAtEndUsed())
        {
            endBitPosition += 1;
        }

        return (int)(endBitPosition - bitPosition);
    }

    public int getDashLength()
    {
        return dashLength_;
    }

    public void setDashLength(int dashLength_)
    {
        this.dashLength_ = dashLength_;
    }

    public int getDashSpacing()
    {
        return dashSpacing_;
    }

    public void setDashSpacing(int dashSpacing_)
    {
        this.dashSpacing_ = dashSpacing_;
    }

    public java.lang.Boolean getSpaceAtStart()
    {
        return spaceAtStart_;
    }

    public void setSpaceAtStart(java.lang.Boolean spaceAtStart_)
    {
        this.spaceAtStart_ = spaceAtStart_;
    }

    public boolean isSpaceAtStartUsed()
    {
        return (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING);
    }

    public boolean isSpaceAtStartSet()
    {
        return (spaceAtStart_ != null);
    }

    public void resetSpaceAtStart()
    {
        this.spaceAtStart_ = null;
    }

    public java.lang.Boolean getSpaceAtEnd()
    {
        return spaceAtEnd_;
    }

    public void setSpaceAtEnd(java.lang.Boolean spaceAtEnd_)
    {
        this.spaceAtEnd_ = spaceAtEnd_;
    }

    public boolean isSpaceAtEndUsed()
    {
        return (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING);
    }

    public boolean isSpaceAtEndSet()
    {
        return (spaceAtEnd_ != null);
    }

    public void resetSpaceAtEnd()
    {
        this.spaceAtEnd_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BoundaryMarkingDashDetails)
        {
            final BoundaryMarkingDashDetails that = (BoundaryMarkingDashDetails)obj;

            return
                    dashLength_ == that.dashLength_ &&
                    dashSpacing_ == that.dashSpacing_ &&
                    ((!isSpaceAtStartUsed()) ? !that.isSpaceAtStartUsed() :
                        ((spaceAtStart_ == null) ? that.spaceAtStart_ == null : spaceAtStart_.equals(that.spaceAtStart_))) &&
                    ((!isSpaceAtEndUsed()) ? !that.isSpaceAtEndUsed() :
                        ((spaceAtEnd_ == null) ? that.spaceAtEnd_ == null : spaceAtEnd_.equals(that.spaceAtEnd_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, dashLength_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, dashSpacing_);
        if (isSpaceAtStartUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, spaceAtStart_);
        if (isSpaceAtEndUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, spaceAtEnd_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        dashLength_ = in.readVarUInt32();

        dashSpacing_ = in.readVarUInt32();

        if (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING)
        {
            spaceAtStart_ = in.readBool();
        }

        if (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING)
        {
            spaceAtEnd_ = in.readBool();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        dashLength_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getDashLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        dashSpacing_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getDashSpacing().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING)
        {
            spaceAtStart_ = in.readBool();
        }

        if (getDashSpacing() != nds.lane.boundaries.UNKNOWN_MARKING_DASH_SPACING.UNKNOWN_MARKING_DASH_SPACING)
        {
            spaceAtEnd_ = in.readBool();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(dashLength_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(dashSpacing_);
        if (isSpaceAtStartUsed())
        {
            endBitPosition += 1;
        }
        if (isSpaceAtEndUsed())
        {
            endBitPosition += 1;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getDashLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashLength_));
        endBitPosition += zserioContext.getDashSpacing().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashSpacing_));
        if (isSpaceAtStartUsed())
        {
            endBitPosition += 1;
        }
        if (isSpaceAtEndUsed())
        {
            endBitPosition += 1;
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(dashLength_);

        out.writeVarUInt32(dashSpacing_);

        if (isSpaceAtStartUsed())
        {
            out.writeBool(spaceAtStart_);
        }

        if (isSpaceAtEndUsed())
        {
            out.writeBool(spaceAtEnd_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getDashLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashLength_));

        zserioContext.getDashSpacing().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(dashSpacing_));

        if (isSpaceAtStartUsed())
        {
            out.writeBool(spaceAtStart_);
        }

        if (isSpaceAtEndUsed())
        {
            out.writeBool(spaceAtEnd_);
        }
    }

    private int dashLength_;
    private int dashSpacing_;
    private java.lang.Boolean spaceAtStart_;
    private java.lang.Boolean spaceAtEnd_;
}
