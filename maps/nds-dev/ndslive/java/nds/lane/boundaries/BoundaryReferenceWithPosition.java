/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class BoundaryReferenceWithPosition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            reference_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
            position_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getReference()
        {
            return reference_;
        }

        public zserio.runtime.array.DeltaContext getPosition()
        {
            return position_;
        }

        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext reference_;
        private zserio.runtime.array.DeltaContext position_;
    };

    public BoundaryReferenceWithPosition()
    {
    }

    public BoundaryReferenceWithPosition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public BoundaryReferenceWithPosition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public BoundaryReferenceWithPosition(
            nds.core.types.Var4ByteDirectedReference reference_,
            int position_)
    {
        setReference(reference_);
        setPosition(position_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        reference_.initPackingContext(zserioContext.getReference());
        zserioContext.getPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += reference_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(position_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += reference_.bitSizeOf(zserioContext.getReference(), endBitPosition);
        endBitPosition += zserioContext.getPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteDirectedReference getReference()
    {
        return reference_;
    }

    public void setReference(nds.core.types.Var4ByteDirectedReference reference_)
    {
        this.reference_ = reference_;
    }

    public int getPosition()
    {
        return position_;
    }

    public void setPosition(int position_)
    {
        this.position_ = position_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BoundaryReferenceWithPosition)
        {
            final BoundaryReferenceWithPosition that = (BoundaryReferenceWithPosition)obj;

            return
                    ((reference_ == null) ? that.reference_ == null : reference_.equals(that.reference_)) &&
                    position_ == that.position_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, reference_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        reference_ = new nds.core.types.Var4ByteDirectedReference(in);

        position_ = in.readVarSize();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        reference_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getReference(), in);

        position_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = reference_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(position_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = reference_.initializeOffsets(zserioContext.getReference(), endBitPosition);
        endBitPosition += zserioContext.getPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        reference_.write(out);

        out.writeVarSize(position_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        reference_.write(zserioContext.getReference(), out);

        zserioContext.getPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));
    }

    private nds.core.types.Var4ByteDirectedReference reference_;
    private int position_;
}
