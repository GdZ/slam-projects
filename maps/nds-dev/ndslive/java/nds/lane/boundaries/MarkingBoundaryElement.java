/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class MarkingBoundaryElement implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            material_ = new zserio.runtime.array.DeltaContext();
            color_ = new zserio.runtime.array.DeltaContext();
            width_ = new zserio.runtime.array.DeltaContext();
            dashDetails_ = new nds.lane.boundaries.BoundaryMarkingDashDetails.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getMaterial()
        {
            return material_;
        }

        public zserio.runtime.array.DeltaContext getColor()
        {
            return color_;
        }

        public zserio.runtime.array.DeltaContext getWidth()
        {
            return width_;
        }

        public nds.lane.boundaries.BoundaryMarkingDashDetails.ZserioPackingContext getDashDetails()
        {
            return dashDetails_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext material_;
        private zserio.runtime.array.DeltaContext color_;
        private zserio.runtime.array.DeltaContext width_;
        private nds.lane.boundaries.BoundaryMarkingDashDetails.ZserioPackingContext dashDetails_;
    };

    public MarkingBoundaryElement()
    {
    }

    public MarkingBoundaryElement(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MarkingBoundaryElement(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MarkingBoundaryElement(
            nds.lane.types.MarkingBoundaryType type_,
            nds.lane.types.MarkingMaterial material_,
            nds.lane.reference.types.MarkingColor color_,
            int width_,
            nds.lane.boundaries.BoundaryMarkingDashDetails dashDetails_)
    {
        setType(type_);
        setMaterial(material_);
        setColor(color_);
        setWidth(width_);
        setDashDetails(dashDetails_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        material_.initPackingContext(zserioContext.getMaterial());
        color_.initPackingContext(zserioContext.getColor());
        zserioContext.getWidth().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(width_));
        if (isDashDetailsUsed())
        {
            dashDetails_.initPackingContext(zserioContext.getDashDetails());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += material_.bitSizeOf(endBitPosition);
        endBitPosition += color_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(width_);
        if (isDashDetailsUsed())
        {
            endBitPosition += dashDetails_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += material_.bitSizeOf(zserioContext.getMaterial(), endBitPosition);
        endBitPosition += color_.bitSizeOf(zserioContext.getColor(), endBitPosition);
        endBitPosition += zserioContext.getWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(width_));
        if (isDashDetailsUsed())
        {
            endBitPosition += dashDetails_.bitSizeOf(zserioContext.getDashDetails(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.types.MarkingBoundaryType getType()
    {
        return type_;
    }

    public void setType(nds.lane.types.MarkingBoundaryType type_)
    {
        this.type_ = type_;
    }

    public nds.lane.types.MarkingMaterial getMaterial()
    {
        return material_;
    }

    public void setMaterial(nds.lane.types.MarkingMaterial material_)
    {
        this.material_ = material_;
    }

    public nds.lane.reference.types.MarkingColor getColor()
    {
        return color_;
    }

    public void setColor(nds.lane.reference.types.MarkingColor color_)
    {
        this.color_ = color_;
    }

    public int getWidth()
    {
        return width_;
    }

    public void setWidth(int width_)
    {
        this.width_ = width_;
    }

    public nds.lane.boundaries.BoundaryMarkingDashDetails getDashDetails()
    {
        return dashDetails_;
    }

    public void setDashDetails(nds.lane.boundaries.BoundaryMarkingDashDetails dashDetails_)
    {
        this.dashDetails_ = dashDetails_;
    }

    public boolean isDashDetailsUsed()
    {
        return (getType() == nds.lane.types.MarkingBoundaryType.DASHED_LINE || getType() == nds.lane.types.MarkingBoundaryType.DASHED_BLOCKS);
    }

    public boolean isDashDetailsSet()
    {
        return (dashDetails_ != null);
    }

    public void resetDashDetails()
    {
        this.dashDetails_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MarkingBoundaryElement)
        {
            final MarkingBoundaryElement that = (MarkingBoundaryElement)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((material_ == null) ? that.material_ == null : material_.getValue() == that.material_.getValue()) &&
                    ((color_ == null) ? that.color_ == null : color_.getValue() == that.color_.getValue()) &&
                    width_ == that.width_ &&
                    ((!isDashDetailsUsed()) ? !that.isDashDetailsUsed() :
                        ((dashDetails_ == null) ? that.dashDetails_ == null : dashDetails_.equals(that.dashDetails_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, material_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, color_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, width_);
        if (isDashDetailsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, dashDetails_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.lane.types.MarkingBoundaryType.readEnum(in);

        material_ = nds.lane.types.MarkingMaterial.readEnum(in);

        color_ = nds.lane.reference.types.MarkingColor.readEnum(in);

        width_ = in.readVarUInt32();

        if (getType() == nds.lane.types.MarkingBoundaryType.DASHED_LINE || getType() == nds.lane.types.MarkingBoundaryType.DASHED_BLOCKS)
        {
            dashDetails_ = new nds.lane.boundaries.BoundaryMarkingDashDetails(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.lane.types.MarkingBoundaryType.readEnum(zserioContext.getType(), in);

        material_ = nds.lane.types.MarkingMaterial.readEnum(zserioContext.getMaterial(), in);

        color_ = nds.lane.reference.types.MarkingColor.readEnum(zserioContext.getColor(), in);

        width_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getWidth().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (getType() == nds.lane.types.MarkingBoundaryType.DASHED_LINE || getType() == nds.lane.types.MarkingBoundaryType.DASHED_BLOCKS)
        {
            dashDetails_ = new nds.lane.boundaries.BoundaryMarkingDashDetails(zserioContext.getDashDetails(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += material_.bitSizeOf(endBitPosition);
        endBitPosition += color_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(width_);
        if (isDashDetailsUsed())
        {
            endBitPosition = dashDetails_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition = material_.initializeOffsets(zserioContext.getMaterial(), endBitPosition);
        endBitPosition = color_.initializeOffsets(zserioContext.getColor(), endBitPosition);
        endBitPosition += zserioContext.getWidth().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(width_));
        if (isDashDetailsUsed())
        {
            endBitPosition = dashDetails_.initializeOffsets(zserioContext.getDashDetails(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        material_.write(out);

        color_.write(out);

        out.writeVarUInt32(width_);

        if (isDashDetailsUsed())
        {
            dashDetails_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        material_.write(zserioContext.getMaterial(), out);

        color_.write(zserioContext.getColor(), out);

        zserioContext.getWidth().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(width_));

        if (isDashDetailsUsed())
        {
            dashDetails_.write(zserioContext.getDashDetails(), out);
        }
    }

    private nds.lane.types.MarkingBoundaryType type_;
    private nds.lane.types.MarkingMaterial material_;
    private nds.lane.reference.types.MarkingColor color_;
    private int width_;
    private nds.lane.boundaries.BoundaryMarkingDashDetails dashDetails_;
}
