/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.boundaries;

public class BoundaryElementDetails implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            logicalElement_ = new nds.lane.boundaries.LogicalBoundaryElement.ZserioPackingContext();
            markingElement_ = new nds.lane.boundaries.MarkingBoundaryElement.ZserioPackingContext();
            physicalDividerElement_ = new nds.lane.boundaries.PhysicalDividerBoundaryElement.ZserioPackingContext();
            physicalMarkingElement_ = new nds.lane.boundaries.PhysicalMarkingBoundaryElement.ZserioPackingContext();
        }

        public nds.lane.boundaries.LogicalBoundaryElement.ZserioPackingContext getLogicalElement()
        {
            return logicalElement_;
        }

        public nds.lane.boundaries.MarkingBoundaryElement.ZserioPackingContext getMarkingElement()
        {
            return markingElement_;
        }

        public nds.lane.boundaries.PhysicalDividerBoundaryElement.ZserioPackingContext getPhysicalDividerElement()
        {
            return physicalDividerElement_;
        }

        public nds.lane.boundaries.PhysicalMarkingBoundaryElement.ZserioPackingContext getPhysicalMarkingElement()
        {
            return physicalMarkingElement_;
        }

        private nds.lane.boundaries.LogicalBoundaryElement.ZserioPackingContext logicalElement_;
        private nds.lane.boundaries.MarkingBoundaryElement.ZserioPackingContext markingElement_;
        private nds.lane.boundaries.PhysicalDividerBoundaryElement.ZserioPackingContext physicalDividerElement_;
        private nds.lane.boundaries.PhysicalMarkingBoundaryElement.ZserioPackingContext physicalMarkingElement_;
    };

    public BoundaryElementDetails(
            nds.lane.types.BoundaryElementType type_)
    {
        this.type_ = type_;
    }

    public BoundaryElementDetails(zserio.runtime.io.BitStreamReader in,
            nds.lane.types.BoundaryElementType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public BoundaryElementDetails(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.lane.types.BoundaryElementType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case LOGICAL:
            return CHOICE_logicalElement;
        case MARKING:
            return CHOICE_markingElement;
        case PHYSICAL_DIVIDER:
            return CHOICE_physicalDividerElement;
        case PHYSICAL_MARKING:
            return CHOICE_physicalMarkingElement;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case LOGICAL:
            getLogicalElement().initPackingContext(zserioContext.getLogicalElement());
            break;
        case MARKING:
            getMarkingElement().initPackingContext(zserioContext.getMarkingElement());
            break;
        case PHYSICAL_DIVIDER:
            getPhysicalDividerElement().initPackingContext(zserioContext.getPhysicalDividerElement());
            break;
        case PHYSICAL_MARKING:
            getPhysicalMarkingElement().initPackingContext(zserioContext.getPhysicalMarkingElement());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case LOGICAL:
            endBitPosition += getLogicalElement().bitSizeOf(endBitPosition);
            break;
        case MARKING:
            endBitPosition += getMarkingElement().bitSizeOf(endBitPosition);
            break;
        case PHYSICAL_DIVIDER:
            endBitPosition += getPhysicalDividerElement().bitSizeOf(endBitPosition);
            break;
        case PHYSICAL_MARKING:
            endBitPosition += getPhysicalMarkingElement().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case LOGICAL:
            endBitPosition += getLogicalElement().bitSizeOf(zserioContext.getLogicalElement(), endBitPosition);
            break;
        case MARKING:
            endBitPosition += getMarkingElement().bitSizeOf(zserioContext.getMarkingElement(), endBitPosition);
            break;
        case PHYSICAL_DIVIDER:
            endBitPosition += getPhysicalDividerElement().bitSizeOf(zserioContext.getPhysicalDividerElement(), endBitPosition);
            break;
        case PHYSICAL_MARKING:
            endBitPosition += getPhysicalMarkingElement().bitSizeOf(zserioContext.getPhysicalMarkingElement(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.types.BoundaryElementType getType()
    {
        return this.type_;
    }

    public nds.lane.boundaries.LogicalBoundaryElement getLogicalElement()
    {
        return (nds.lane.boundaries.LogicalBoundaryElement)objectChoice;
    }

    public void setLogicalElement(nds.lane.boundaries.LogicalBoundaryElement logicalElement_)
    {
        objectChoice = logicalElement_;
    }

    public nds.lane.boundaries.MarkingBoundaryElement getMarkingElement()
    {
        return (nds.lane.boundaries.MarkingBoundaryElement)objectChoice;
    }

    public void setMarkingElement(nds.lane.boundaries.MarkingBoundaryElement markingElement_)
    {
        objectChoice = markingElement_;
    }

    public nds.lane.boundaries.PhysicalDividerBoundaryElement getPhysicalDividerElement()
    {
        return (nds.lane.boundaries.PhysicalDividerBoundaryElement)objectChoice;
    }

    public void setPhysicalDividerElement(nds.lane.boundaries.PhysicalDividerBoundaryElement physicalDividerElement_)
    {
        objectChoice = physicalDividerElement_;
    }

    public nds.lane.boundaries.PhysicalMarkingBoundaryElement getPhysicalMarkingElement()
    {
        return (nds.lane.boundaries.PhysicalMarkingBoundaryElement)objectChoice;
    }

    public void setPhysicalMarkingElement(nds.lane.boundaries.PhysicalMarkingBoundaryElement physicalMarkingElement_)
    {
        objectChoice = physicalMarkingElement_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof BoundaryElementDetails)
        {
            final BoundaryElementDetails that = (BoundaryElementDetails)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case LOGICAL:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.boundaries.LogicalBoundaryElement)objectChoice);
                break;
            case MARKING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.boundaries.MarkingBoundaryElement)objectChoice);
                break;
            case PHYSICAL_DIVIDER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.boundaries.PhysicalDividerBoundaryElement)objectChoice);
                break;
            case PHYSICAL_MARKING:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.boundaries.PhysicalMarkingBoundaryElement)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case LOGICAL:
            objectChoice = new nds.lane.boundaries.LogicalBoundaryElement(in);
            break;
        case MARKING:
            objectChoice = new nds.lane.boundaries.MarkingBoundaryElement(in);
            break;
        case PHYSICAL_DIVIDER:
            objectChoice = new nds.lane.boundaries.PhysicalDividerBoundaryElement(in);
            break;
        case PHYSICAL_MARKING:
            objectChoice = new nds.lane.boundaries.PhysicalMarkingBoundaryElement(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case LOGICAL:
            objectChoice = new nds.lane.boundaries.LogicalBoundaryElement(zserioContext.getLogicalElement(), in);
            break;
        case MARKING:
            objectChoice = new nds.lane.boundaries.MarkingBoundaryElement(zserioContext.getMarkingElement(), in);
            break;
        case PHYSICAL_DIVIDER:
            objectChoice = new nds.lane.boundaries.PhysicalDividerBoundaryElement(zserioContext.getPhysicalDividerElement(), in);
            break;
        case PHYSICAL_MARKING:
            objectChoice = new nds.lane.boundaries.PhysicalMarkingBoundaryElement(zserioContext.getPhysicalMarkingElement(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case LOGICAL:
            {
                endBitPosition = getLogicalElement().initializeOffsets(endBitPosition);
            }
            break;
        case MARKING:
            {
                endBitPosition = getMarkingElement().initializeOffsets(endBitPosition);
            }
            break;
        case PHYSICAL_DIVIDER:
            {
                endBitPosition = getPhysicalDividerElement().initializeOffsets(endBitPosition);
            }
            break;
        case PHYSICAL_MARKING:
            {
                endBitPosition = getPhysicalMarkingElement().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case LOGICAL:
            {
                endBitPosition = getLogicalElement().initializeOffsets(zserioContext.getLogicalElement(), endBitPosition);
            }
            break;
        case MARKING:
            {
                endBitPosition = getMarkingElement().initializeOffsets(zserioContext.getMarkingElement(), endBitPosition);
            }
            break;
        case PHYSICAL_DIVIDER:
            {
                endBitPosition = getPhysicalDividerElement().initializeOffsets(zserioContext.getPhysicalDividerElement(), endBitPosition);
            }
            break;
        case PHYSICAL_MARKING:
            {
                endBitPosition = getPhysicalMarkingElement().initializeOffsets(zserioContext.getPhysicalMarkingElement(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case LOGICAL:
            getLogicalElement().write(out);
            break;
        case MARKING:
            getMarkingElement().write(out);
            break;
        case PHYSICAL_DIVIDER:
            getPhysicalDividerElement().write(out);
            break;
        case PHYSICAL_MARKING:
            getPhysicalMarkingElement().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case LOGICAL:
            getLogicalElement().write(zserioContext.getLogicalElement(), out);
            break;
        case MARKING:
            getMarkingElement().write(zserioContext.getMarkingElement(), out);
            break;
        case PHYSICAL_DIVIDER:
            getPhysicalDividerElement().write(zserioContext.getPhysicalDividerElement(), out);
            break;
        case PHYSICAL_MARKING:
            getPhysicalMarkingElement().write(zserioContext.getPhysicalMarkingElement(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice BoundaryElementDetails: " + getType() + "!");
        }
    }

    public static final int CHOICE_logicalElement = 0;
    public static final int CHOICE_markingElement = 1;
    public static final int CHOICE_physicalDividerElement = 2;
    public static final int CHOICE_physicalMarkingElement = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.lane.types.BoundaryElementType type_;
    private java.lang.Object objectChoice;
}
