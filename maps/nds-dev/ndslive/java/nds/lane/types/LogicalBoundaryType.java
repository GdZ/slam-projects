/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.types;

public enum LogicalBoundaryType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    PURE_VIRTUAL((short)0),
    GORE((short)1),
    WALKING_AREA((short)2),
    SHADED_AREA((short)3),
    CLIFF((short)4),
    END_OF_ROAD_SURFACE((short)5),
    PARKING_AREA((short)6),
    DRIVEWAY((short)7),
    PUBLIC_TRANSPORT_WAITING_AREA((short)8),
    CONSTRUCTION_AREA((short)9),
    BICYCLE_AREA((short)10);

    private LogicalBoundaryType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static LogicalBoundaryType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static LogicalBoundaryType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static LogicalBoundaryType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return PURE_VIRTUAL;
            case (short)1:
                return GORE;
            case (short)2:
                return WALKING_AREA;
            case (short)3:
                return SHADED_AREA;
            case (short)4:
                return CLIFF;
            case (short)5:
                return END_OF_ROAD_SURFACE;
            case (short)6:
                return PARKING_AREA;
            case (short)7:
                return DRIVEWAY;
            case (short)8:
                return PUBLIC_TRANSPORT_WAITING_AREA;
            case (short)9:
                return CONSTRUCTION_AREA;
            case (short)10:
                return BICYCLE_AREA;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration LogicalBoundaryType: " + value + "!");
        }
    }

    public static LogicalBoundaryType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("PURE_VIRTUAL"))
            return PURE_VIRTUAL;
        if (itemName.equals("GORE"))
            return GORE;
        if (itemName.equals("WALKING_AREA"))
            return WALKING_AREA;
        if (itemName.equals("SHADED_AREA"))
            return SHADED_AREA;
        if (itemName.equals("CLIFF"))
            return CLIFF;
        if (itemName.equals("END_OF_ROAD_SURFACE"))
            return END_OF_ROAD_SURFACE;
        if (itemName.equals("PARKING_AREA"))
            return PARKING_AREA;
        if (itemName.equals("DRIVEWAY"))
            return DRIVEWAY;
        if (itemName.equals("PUBLIC_TRANSPORT_WAITING_AREA"))
            return PUBLIC_TRANSPORT_WAITING_AREA;
        if (itemName.equals("CONSTRUCTION_AREA"))
            return CONSTRUCTION_AREA;
        if (itemName.equals("BICYCLE_AREA"))
            return BICYCLE_AREA;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration LogicalBoundaryType!");
    }

    private short value;
}
