/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupReferenceIndirect implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            referenceGeometry_ = new nds.core.location.LocationGeometry.ZserioPackingContext();
        }

        public nds.core.location.LocationGeometry.ZserioPackingContext getReferenceGeometry()
        {
            return referenceGeometry_;
        }

        private nds.core.location.LocationGeometry.ZserioPackingContext referenceGeometry_;
    };

    public LaneGroupReferenceIndirect()
    {
    }

    public LaneGroupReferenceIndirect(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGroupReferenceIndirect(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGroupReferenceIndirect(
            nds.core.location.LocationGeometry referenceGeometry_,
            nds.lane.reference.types.LaneGroupLocationSegment[] referenceSegments_)
    {
        setReferenceGeometry(referenceGeometry_);
        setReferenceSegments(referenceSegments_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        referenceGeometry_.initPackingContext(zserioContext.getReferenceGeometry());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += referenceGeometry_.bitSizeOf(endBitPosition);
        endBitPosition += referenceSegments_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += referenceGeometry_.bitSizeOf(zserioContext.getReferenceGeometry(), endBitPosition);
        endBitPosition += referenceSegments_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.location.LocationGeometry getReferenceGeometry()
    {
        return referenceGeometry_;
    }

    public void setReferenceGeometry(nds.core.location.LocationGeometry referenceGeometry_)
    {
        this.referenceGeometry_ = referenceGeometry_;
    }

    public nds.lane.reference.types.LaneGroupLocationSegment[] getReferenceSegments()
    {
        return (referenceSegments_ == null) ? null : referenceSegments_.getRawArray();
    }

    public void setReferenceSegments(nds.lane.reference.types.LaneGroupLocationSegment[] referenceSegments_)
    {
        this.referenceSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupLocationSegment.class, referenceSegments_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupLocationSegment>(new ZserioElementFactory_referenceSegments()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupReferenceIndirect)
        {
            final LaneGroupReferenceIndirect that = (LaneGroupReferenceIndirect)obj;

            return
                    ((referenceGeometry_ == null) ? that.referenceGeometry_ == null : referenceGeometry_.equals(that.referenceGeometry_)) &&
                    ((referenceSegments_ == null) ? that.referenceSegments_ == null : referenceSegments_.equals(that.referenceSegments_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, referenceGeometry_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, referenceSegments_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        referenceGeometry_ = new nds.core.location.LocationGeometry(in);

        referenceSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupLocationSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupLocationSegment>(new ZserioElementFactory_referenceSegments()),
                zserio.runtime.array.ArrayType.AUTO);
        referenceSegments_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        referenceGeometry_ = new nds.core.location.LocationGeometry(zserioContext.getReferenceGeometry(), in);

        referenceSegments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupLocationSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupLocationSegment>(new ZserioElementFactory_referenceSegments()),
                zserio.runtime.array.ArrayType.AUTO);
        referenceSegments_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = referenceGeometry_.initializeOffsets(endBitPosition);
        endBitPosition = referenceSegments_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = referenceGeometry_.initializeOffsets(zserioContext.getReferenceGeometry(), endBitPosition);
        endBitPosition = referenceSegments_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        referenceGeometry_.write(out);

        referenceSegments_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        referenceGeometry_.write(zserioContext.getReferenceGeometry(), out);

        referenceSegments_.writePacked(out);
    }

    private final class ZserioElementFactory_referenceSegments implements zserio.runtime.array.PackableElementFactory<nds.lane.reference.types.LaneGroupLocationSegment>
    {
        @Override
        public nds.lane.reference.types.LaneGroupLocationSegment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneGroupLocationSegment(in, getReferenceGeometry());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.reference.types.LaneGroupLocationSegment.ZserioPackingContext();
        }

        @Override
        public nds.lane.reference.types.LaneGroupLocationSegment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneGroupLocationSegment(context, in, getReferenceGeometry());
        }
    }

    private nds.core.location.LocationGeometry referenceGeometry_;
    private zserio.runtime.array.Array referenceSegments_;
}
