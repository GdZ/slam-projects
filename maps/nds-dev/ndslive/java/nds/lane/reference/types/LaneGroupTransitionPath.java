/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupTransitionPath implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numLaneGroups_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumLaneGroups()
        {
            return numLaneGroups_;
        }

        private zserio.runtime.array.DeltaContext numLaneGroups_;
    };

    public LaneGroupTransitionPath()
    {
    }

    public LaneGroupTransitionPath(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGroupTransitionPath(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGroupTransitionPath(
            short numLaneGroups_,
            nds.lane.reference.types.LaneGroupTransition[] laneGroupTransition_)
    {
        setNumLaneGroups(numLaneGroups_);
        setLaneGroupTransition(laneGroupTransition_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLaneGroups().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLaneGroups_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += laneGroupTransition_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLaneGroups().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLaneGroups_));
        endBitPosition += laneGroupTransition_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumLaneGroups()
    {
        return numLaneGroups_;
    }

    public void setNumLaneGroups(short numLaneGroups_)
    {
        this.numLaneGroups_ = numLaneGroups_;
    }

    public nds.lane.reference.types.LaneGroupTransition[] getLaneGroupTransition()
    {
        return (laneGroupTransition_ == null) ? null : laneGroupTransition_.getRawArray();
    }

    public void setLaneGroupTransition(nds.lane.reference.types.LaneGroupTransition[] laneGroupTransition_)
    {
        this.laneGroupTransition_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupTransition.class, laneGroupTransition_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupTransition>(new ZserioElementFactory_laneGroupTransition()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupTransitionPath)
        {
            final LaneGroupTransitionPath that = (LaneGroupTransitionPath)obj;

            return
                    numLaneGroups_ == that.numLaneGroups_ &&
                    ((laneGroupTransition_ == null) ? that.laneGroupTransition_ == null : laneGroupTransition_.equals(that.laneGroupTransition_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLaneGroups_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneGroupTransition_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numLaneGroups_ = in.readUnsignedByte();

        laneGroupTransition_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupTransition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupTransition>(new ZserioElementFactory_laneGroupTransition()),
                zserio.runtime.array.ArrayType.NORMAL);
        laneGroupTransition_.read(in, (int)(getNumLaneGroups()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numLaneGroups_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumLaneGroups().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        laneGroupTransition_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneGroupTransition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneGroupTransition>(new ZserioElementFactory_laneGroupTransition()),
                zserio.runtime.array.ArrayType.NORMAL);
        laneGroupTransition_.readPacked(in, (int)(getNumLaneGroups()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = laneGroupTransition_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLaneGroups().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLaneGroups_));
        endBitPosition = laneGroupTransition_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numLaneGroups_);

        if (laneGroupTransition_.size() != (int)(getNumLaneGroups()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupTransitionPath.laneGroupTransition: " +
                    laneGroupTransition_.size() + " != " + (int)(getNumLaneGroups()) + "!");
        }
        laneGroupTransition_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLaneGroups().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLaneGroups_));

        if (laneGroupTransition_.size() != (int)(getNumLaneGroups()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupTransitionPath.laneGroupTransition: " +
                    laneGroupTransition_.size() + " != " + (int)(getNumLaneGroups()) + "!");
        }
        laneGroupTransition_.writePacked(out);
    }

    private static final class ZserioElementFactory_laneGroupTransition implements zserio.runtime.array.PackableElementFactory<nds.lane.reference.types.LaneGroupTransition>
    {
        @Override
        public nds.lane.reference.types.LaneGroupTransition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneGroupTransition(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.reference.types.LaneGroupTransition.ZserioPackingContext();
        }

        @Override
        public nds.lane.reference.types.LaneGroupTransition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneGroupTransition(context, in);
        }
    }

    private short numLaneGroups_;
    private zserio.runtime.array.Array laneGroupTransition_;
}
