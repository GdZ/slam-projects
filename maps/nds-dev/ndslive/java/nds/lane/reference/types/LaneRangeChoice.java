/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneRangeChoice implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            validityRange_ = new nds.lane.reference.types.LaneValidityRange.ZserioPackingContext();
            lengthRange_ = new nds.lane.reference.types.LaneLengthRange.ZserioPackingContext();
            geometryRange_ = new nds.core.geometry.LineRangeUnchecked.ZserioPackingContext();
            geometryRangeOffset_ = new nds.core.geometry.LineRangeOffset3D.ZserioPackingContext();
            percentageRange_ = new nds.core.types.PercentageRange.ZserioPackingContext();
        }

        public nds.lane.reference.types.LaneValidityRange.ZserioPackingContext getValidityRange()
        {
            return validityRange_;
        }

        public nds.lane.reference.types.LaneLengthRange.ZserioPackingContext getLengthRange()
        {
            return lengthRange_;
        }

        public nds.core.geometry.LineRangeUnchecked.ZserioPackingContext getGeometryRange()
        {
            return geometryRange_;
        }

        public nds.core.geometry.LineRangeOffset3D.ZserioPackingContext getGeometryRangeOffset()
        {
            return geometryRangeOffset_;
        }

        public nds.core.types.PercentageRange.ZserioPackingContext getPercentageRange()
        {
            return percentageRange_;
        }

        private nds.lane.reference.types.LaneValidityRange.ZserioPackingContext validityRange_;
        private nds.lane.reference.types.LaneLengthRange.ZserioPackingContext lengthRange_;
        private nds.core.geometry.LineRangeUnchecked.ZserioPackingContext geometryRange_;
        private nds.core.geometry.LineRangeOffset3D.ZserioPackingContext geometryRangeOffset_;
        private nds.core.types.PercentageRange.ZserioPackingContext percentageRange_;
    };

    public LaneRangeChoice(
            nds.lane.reference.types.LaneValidityType type_)
    {
        this.type_ = type_;
    }

    public LaneRangeChoice(zserio.runtime.io.BitStreamReader in,
            nds.lane.reference.types.LaneValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public LaneRangeChoice(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.lane.reference.types.LaneValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case NONE:
            return UNDEFINED_CHOICE;
        case COMPLETE:
            return UNDEFINED_CHOICE;
        case POSITION:
            return CHOICE_validityRange;
        case LENGTH:
            return CHOICE_lengthRange;
        case GEOMETRY:
            return CHOICE_geometryRange;
        case GEOMETRY_OFFSET:
            return CHOICE_geometryRangeOffset;
        case PERCENTAGE:
            return CHOICE_percentageRange;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityRange().initPackingContext(zserioContext.getValidityRange());
            break;
        case LENGTH:
            getLengthRange().initPackingContext(zserioContext.getLengthRange());
            break;
        case GEOMETRY:
            getGeometryRange().initPackingContext(zserioContext.getGeometryRange());
            break;
        case GEOMETRY_OFFSET:
            getGeometryRangeOffset().initPackingContext(zserioContext.getGeometryRangeOffset());
            break;
        case PERCENTAGE:
            getPercentageRange().initPackingContext(zserioContext.getPercentageRange());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityRange().bitSizeOf(endBitPosition);
            break;
        case LENGTH:
            endBitPosition += getLengthRange().bitSizeOf(endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += getGeometryRange().bitSizeOf(endBitPosition);
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryRangeOffset().bitSizeOf(endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentageRange().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityRange().bitSizeOf(zserioContext.getValidityRange(), endBitPosition);
            break;
        case LENGTH:
            endBitPosition += getLengthRange().bitSizeOf(zserioContext.getLengthRange(), endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += getGeometryRange().bitSizeOf(zserioContext.getGeometryRange(), endBitPosition);
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryRangeOffset().bitSizeOf(zserioContext.getGeometryRangeOffset(), endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentageRange().bitSizeOf(zserioContext.getPercentageRange(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.reference.types.LaneValidityType getType()
    {
        return this.type_;
    }

    public nds.lane.reference.types.LaneValidityRange getValidityRange()
    {
        return (nds.lane.reference.types.LaneValidityRange)objectChoice;
    }

    public void setValidityRange(nds.lane.reference.types.LaneValidityRange validityRange_)
    {
        objectChoice = validityRange_;
    }

    public nds.lane.reference.types.LaneLengthRange getLengthRange()
    {
        return (nds.lane.reference.types.LaneLengthRange)objectChoice;
    }

    public void setLengthRange(nds.lane.reference.types.LaneLengthRange lengthRange_)
    {
        objectChoice = lengthRange_;
    }

    public nds.core.geometry.LineRangeUnchecked getGeometryRange()
    {
        return (nds.core.geometry.LineRangeUnchecked)objectChoice;
    }

    public void setGeometryRange(nds.core.geometry.LineRangeUnchecked geometryRange_)
    {
        objectChoice = geometryRange_;
    }

    public nds.core.geometry.LineRangeOffset3D getGeometryRangeOffset()
    {
        return (nds.core.geometry.LineRangeOffset3D)objectChoice;
    }

    public void setGeometryRangeOffset(nds.core.geometry.LineRangeOffset3D geometryRangeOffset_)
    {
        objectChoice = geometryRangeOffset_;
    }

    public nds.core.types.PercentageRange getPercentageRange()
    {
        return (nds.core.types.PercentageRange)objectChoice;
    }

    public void setPercentageRange(nds.core.types.PercentageRange percentageRange_)
    {
        objectChoice = percentageRange_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneRangeChoice)
        {
            final LaneRangeChoice that = (LaneRangeChoice)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case NONE:
                // empty
                break;
            case COMPLETE:
                // empty
                break;
            case POSITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.reference.types.LaneValidityRange)objectChoice);
                break;
            case LENGTH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.reference.types.LaneLengthRange)objectChoice);
                break;
            case GEOMETRY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.LineRangeUnchecked)objectChoice);
                break;
            case GEOMETRY_OFFSET:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.LineRangeOffset3D)objectChoice);
                break;
            case PERCENTAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.PercentageRange)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.lane.reference.types.LaneValidityRange(in);
            break;
        case LENGTH:
            objectChoice = new nds.lane.reference.types.LaneLengthRange(in);
            break;
        case GEOMETRY:
            objectChoice = new nds.core.geometry.LineRangeUnchecked(in);
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LineRangeOffset3D(in, (byte)(0), (byte)(0));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentageRange(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.lane.reference.types.LaneValidityRange(zserioContext.getValidityRange(), in);
            break;
        case LENGTH:
            objectChoice = new nds.lane.reference.types.LaneLengthRange(zserioContext.getLengthRange(), in);
            break;
        case GEOMETRY:
            objectChoice = new nds.core.geometry.LineRangeUnchecked(zserioContext.getGeometryRange(), in);
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LineRangeOffset3D(zserioContext.getGeometryRangeOffset(), in, (byte)(0), (byte)(0));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentageRange(zserioContext.getPercentageRange(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityRange().initializeOffsets(endBitPosition);
            }
            break;
        case LENGTH:
            {
                endBitPosition = getLengthRange().initializeOffsets(endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition = getGeometryRange().initializeOffsets(endBitPosition);
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryRangeOffset().initializeOffsets(endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentageRange().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityRange().initializeOffsets(zserioContext.getValidityRange(), endBitPosition);
            }
            break;
        case LENGTH:
            {
                endBitPosition = getLengthRange().initializeOffsets(zserioContext.getLengthRange(), endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition = getGeometryRange().initializeOffsets(zserioContext.getGeometryRange(), endBitPosition);
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryRangeOffset().initializeOffsets(zserioContext.getGeometryRangeOffset(), endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentageRange().initializeOffsets(zserioContext.getPercentageRange(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityRange().write(out);
            break;
        case LENGTH:
            getLengthRange().write(out);
            break;
        case GEOMETRY:
            getGeometryRange().write(out);
            break;
        case GEOMETRY_OFFSET:
            // check parameters
            if (getGeometryRangeOffset().getShiftXY() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field LaneRangeChoice.geometryRangeOffset: " +
                        getGeometryRangeOffset().getShiftXY() + " != " + (byte)(0) + "!");
            }
            if (getGeometryRangeOffset().getShiftZ() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field LaneRangeChoice.geometryRangeOffset: " +
                        getGeometryRangeOffset().getShiftZ() + " != " + (byte)(0) + "!");
            }
            getGeometryRangeOffset().write(out);
            break;
        case PERCENTAGE:
            getPercentageRange().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityRange().write(zserioContext.getValidityRange(), out);
            break;
        case LENGTH:
            getLengthRange().write(zserioContext.getLengthRange(), out);
            break;
        case GEOMETRY:
            getGeometryRange().write(zserioContext.getGeometryRange(), out);
            break;
        case GEOMETRY_OFFSET:
            getGeometryRangeOffset().write(zserioContext.getGeometryRangeOffset(), out);
            break;
        case PERCENTAGE:
            getPercentageRange().write(zserioContext.getPercentageRange(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneRangeChoice: " + getType() + "!");
        }
    }

    public static final int CHOICE_validityRange = 0;
    public static final int CHOICE_lengthRange = 1;
    public static final int CHOICE_geometryRange = 2;
    public static final int CHOICE_geometryRangeOffset = 3;
    public static final int CHOICE_percentageRange = 4;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.lane.reference.types.LaneValidityType type_;
    private java.lang.Object objectChoice;
}
