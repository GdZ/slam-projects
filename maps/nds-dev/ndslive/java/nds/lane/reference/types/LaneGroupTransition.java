/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupTransition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            laneGroupId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            numLanes_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getLaneGroupId()
        {
            return laneGroupId_;
        }

        public zserio.runtime.array.DeltaContext getNumLanes()
        {
            return numLanes_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext laneGroupId_;
        private zserio.runtime.array.DeltaContext numLanes_;
    };

    public LaneGroupTransition()
    {
    }

    public LaneGroupTransition(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGroupTransition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGroupTransition(
            nds.core.types.Var4ByteId laneGroupId_,
            short numLanes_,
            nds.core.types.Var4ByteId[] transitionLanes_)
    {
        setLaneGroupId(laneGroupId_);
        setNumLanes(numLanes_);
        setTransitionLanes(transitionLanes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneGroupId_.initPackingContext(zserioContext.getLaneGroupId());
        zserioContext.getNumLanes().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += laneGroupId_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition += transitionLanes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += laneGroupId_.bitSizeOf(zserioContext.getLaneGroupId(), endBitPosition);
        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition += transitionLanes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getLaneGroupId()
    {
        return laneGroupId_;
    }

    public void setLaneGroupId(nds.core.types.Var4ByteId laneGroupId_)
    {
        this.laneGroupId_ = laneGroupId_;
    }

    public short getNumLanes()
    {
        return numLanes_;
    }

    public void setNumLanes(short numLanes_)
    {
        this.numLanes_ = numLanes_;
    }

    public nds.core.types.Var4ByteId[] getTransitionLanes()
    {
        return (transitionLanes_ == null) ? null : transitionLanes_.getRawArray();
    }

    public void setTransitionLanes(nds.core.types.Var4ByteId[] transitionLanes_)
    {
        this.transitionLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteId.class, transitionLanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteId>(new ZserioElementFactory_transitionLanes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupTransition)
        {
            final LaneGroupTransition that = (LaneGroupTransition)obj;

            return
                    ((laneGroupId_ == null) ? that.laneGroupId_ == null : laneGroupId_.equals(that.laneGroupId_)) &&
                    numLanes_ == that.numLanes_ &&
                    ((transitionLanes_ == null) ? that.transitionLanes_ == null : transitionLanes_.equals(that.transitionLanes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneGroupId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLanes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionLanes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        laneGroupId_ = new nds.core.types.Var4ByteId(in);

        numLanes_ = in.readVarUInt16();

        transitionLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteId.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteId>(new ZserioElementFactory_transitionLanes()),
                zserio.runtime.array.ArrayType.NORMAL);
        transitionLanes_.read(in, (int)(getNumLanes()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneGroupId_ = new nds.core.types.Var4ByteId(zserioContext.getLaneGroupId(), in);

        numLanes_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumLanes().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        transitionLanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteId.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteId>(new ZserioElementFactory_transitionLanes()),
                zserio.runtime.array.ArrayType.NORMAL);
        transitionLanes_.readPacked(in, (int)(getNumLanes()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = laneGroupId_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition = transitionLanes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = laneGroupId_.initializeOffsets(zserioContext.getLaneGroupId(), endBitPosition);
        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition = transitionLanes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        laneGroupId_.write(out);

        out.writeVarUInt16(numLanes_);

        if (transitionLanes_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupTransition.transitionLanes: " +
                    transitionLanes_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        transitionLanes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        laneGroupId_.write(zserioContext.getLaneGroupId(), out);

        zserioContext.getNumLanes().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));

        if (transitionLanes_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupTransition.transitionLanes: " +
                    transitionLanes_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        transitionLanes_.writePacked(out);
    }

    private static final class ZserioElementFactory_transitionLanes implements zserio.runtime.array.PackableElementFactory<nds.core.types.Var4ByteId>
    {
        @Override
        public nds.core.types.Var4ByteId create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.Var4ByteId(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        @Override
        public nds.core.types.Var4ByteId create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.Var4ByteId(context, in);
        }
    }

    private nds.core.types.Var4ByteId laneGroupId_;
    private short numLanes_;
    private zserio.runtime.array.Array transitionLanes_;
}
