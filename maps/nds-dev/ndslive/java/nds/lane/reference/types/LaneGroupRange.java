/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupRange implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            range_ = new nds.lane.reference.types.LaneRange.ZserioPackingContext();
            referenceLaneIdx_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.lane.reference.types.LaneRange.ZserioPackingContext getRange()
        {
            return range_;
        }

        public zserio.runtime.array.DeltaContext getReferenceLaneIdx()
        {
            return referenceLaneIdx_;
        }

        private nds.lane.reference.types.LaneRange.ZserioPackingContext range_;
        private zserio.runtime.array.DeltaContext referenceLaneIdx_;
    };

    public LaneGroupRange()
    {
    }

    public LaneGroupRange(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGroupRange(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGroupRange(
            nds.lane.reference.types.LaneRange range_,
            java.lang.Short referenceLaneIdx_)
    {
        setRange(range_);
        setReferenceLaneIdx(referenceLaneIdx_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_.initPackingContext(zserioContext.getRange());
        if (isReferenceLaneIdxUsed())
        {
            zserioContext.getReferenceLaneIdx().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(referenceLaneIdx_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += range_.bitSizeOf(endBitPosition);
        if (isReferenceLaneIdxUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(referenceLaneIdx_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += range_.bitSizeOf(zserioContext.getRange(), endBitPosition);
        if (isReferenceLaneIdxUsed())
        {
            endBitPosition += zserioContext.getReferenceLaneIdx().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(referenceLaneIdx_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.reference.types.LaneRange getRange()
    {
        return range_;
    }

    public void setRange(nds.lane.reference.types.LaneRange range_)
    {
        this.range_ = range_;
    }

    public java.lang.Short getReferenceLaneIdx()
    {
        return referenceLaneIdx_;
    }

    public void setReferenceLaneIdx(java.lang.Short referenceLaneIdx_)
    {
        this.referenceLaneIdx_ = referenceLaneIdx_;
    }

    public boolean isReferenceLaneIdxUsed()
    {
        return (getRange().getType() != nds.lane.reference.types.LaneValidityType.COMPLETE);
    }

    public boolean isReferenceLaneIdxSet()
    {
        return (referenceLaneIdx_ != null);
    }

    public void resetReferenceLaneIdx()
    {
        this.referenceLaneIdx_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupRange)
        {
            final LaneGroupRange that = (LaneGroupRange)obj;

            return
                    ((range_ == null) ? that.range_ == null : range_.equals(that.range_)) &&
                    ((!isReferenceLaneIdxUsed()) ? !that.isReferenceLaneIdxUsed() :
                        ((referenceLaneIdx_ == null) ? that.referenceLaneIdx_ == null : referenceLaneIdx_.equals(that.referenceLaneIdx_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, range_);
        if (isReferenceLaneIdxUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, referenceLaneIdx_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        range_ = new nds.lane.reference.types.LaneRange(in);

        if (getRange().getType() != nds.lane.reference.types.LaneValidityType.COMPLETE)
        {
            referenceLaneIdx_ = in.readVarUInt16();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_ = new nds.lane.reference.types.LaneRange(zserioContext.getRange(), in);

        if (getRange().getType() != nds.lane.reference.types.LaneValidityType.COMPLETE)
        {
            referenceLaneIdx_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getReferenceLaneIdx().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = range_.initializeOffsets(endBitPosition);
        if (isReferenceLaneIdxUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(referenceLaneIdx_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = range_.initializeOffsets(zserioContext.getRange(), endBitPosition);
        if (isReferenceLaneIdxUsed())
        {
            endBitPosition += zserioContext.getReferenceLaneIdx().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(referenceLaneIdx_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        range_.write(out);

        if (isReferenceLaneIdxUsed())
        {
            out.writeVarUInt16(referenceLaneIdx_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        range_.write(zserioContext.getRange(), out);

        if (isReferenceLaneIdxUsed())
        {
            zserioContext.getReferenceLaneIdx().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(referenceLaneIdx_));
        }
    }

    private nds.lane.reference.types.LaneRange range_;
    private java.lang.Short referenceLaneIdx_;
}
