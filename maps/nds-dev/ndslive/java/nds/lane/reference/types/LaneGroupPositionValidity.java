/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupPositionValidity implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numLanes_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumLanes()
        {
            return numLanes_;
        }

        private zserio.runtime.array.DeltaContext numLanes_;
    };

    public LaneGroupPositionValidity(
            byte coordShift_)
    {
        this.coordShift_ = coordShift_;
    }

    public LaneGroupPositionValidity(zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(in);
    }

    public LaneGroupPositionValidity(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(context, in);
    }

    public LaneGroupPositionValidity(
            byte coordShift_,
            short numLanes_,
            nds.lane.reference.types.LanePosition[] lanes_,
            nds.core.types.Direction[] directions_)
    {
        this(coordShift_);

        setNumLanes(numLanes_);
        setLanes(lanes_);
        setDirections(directions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLanes().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition += lanes_.bitSizeOf(endBitPosition);
        endBitPosition += directions_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition += lanes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += directions_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getCoordShift()
    {
        return this.coordShift_;
    }

    public short getNumLanes()
    {
        return numLanes_;
    }

    public void setNumLanes(short numLanes_)
    {
        this.numLanes_ = numLanes_;
    }

    public nds.lane.reference.types.LanePosition[] getLanes()
    {
        return (lanes_ == null) ? null : lanes_.getRawArray();
    }

    public void setLanes(nds.lane.reference.types.LanePosition[] lanes_)
    {
        this.lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LanePosition.class, lanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LanePosition>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public nds.core.types.Direction[] getDirections()
    {
        return (directions_ == null) ? null : directions_.getRawArray();
    }

    public void setDirections(nds.core.types.Direction[] directions_)
    {
        this.directions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class, directions_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupPositionValidity)
        {
            final LaneGroupPositionValidity that = (LaneGroupPositionValidity)obj;

            return
                    this.coordShift_ == that.coordShift_ &&
                    numLanes_ == that.numLanes_ &&
                    ((lanes_ == null) ? that.lanes_ == null : lanes_.equals(that.lanes_)) &&
                    ((directions_ == null) ? that.directions_ == null : directions_.equals(that.directions_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getCoordShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLanes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, directions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numLanes_ = in.readVarUInt16();

        lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LanePosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LanePosition>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.NORMAL);
        lanes_.read(in, (int)(getNumLanes()));

        directions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                zserio.runtime.array.ArrayType.NORMAL);
        directions_.read(in, (int)(getNumLanes()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numLanes_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumLanes().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LanePosition.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LanePosition>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.NORMAL);
        lanes_.readPacked(in, (int)(getNumLanes()));

        directions_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                zserio.runtime.array.ArrayType.NORMAL);
        directions_.readPacked(in, (int)(getNumLanes()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition = lanes_.initializeOffsets(endBitPosition);
        endBitPosition = directions_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition = lanes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = directions_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numLanes_);

        if (lanes_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupPositionValidity.lanes: " +
                    lanes_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        lanes_.write(out);

        if (directions_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupPositionValidity.directions: " +
                    directions_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        directions_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumLanes().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));

        if (lanes_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupPositionValidity.lanes: " +
                    lanes_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        lanes_.writePacked(out);

        if (directions_.size() != (int)(getNumLanes()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupPositionValidity.directions: " +
                    directions_.size() + " != " + (int)(getNumLanes()) + "!");
        }
        directions_.writePacked(out);
    }

    private static final class ZserioElementFactory_lanes implements zserio.runtime.array.PackableElementFactory<nds.lane.reference.types.LanePosition>
    {
        @Override
        public nds.lane.reference.types.LanePosition create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.reference.types.LanePosition(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.reference.types.LanePosition.ZserioPackingContext();
        }

        @Override
        public nds.lane.reference.types.LanePosition create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.reference.types.LanePosition(context, in);
        }
    }

    private static final class ZserioElementFactory_directions implements zserio.runtime.array.PackableElementFactory<nds.core.types.Direction>
    {
        @Override
        public nds.core.types.Direction create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.core.types.Direction.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.types.Direction create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.core.types.Direction.readEnum(context, in);
        }
    }

    private final byte coordShift_;
    private short numLanes_;
    private zserio.runtime.array.Array lanes_;
    private zserio.runtime.array.Array directions_;
}
