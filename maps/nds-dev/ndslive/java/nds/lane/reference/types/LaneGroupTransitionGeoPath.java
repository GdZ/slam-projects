/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupTransitionGeoPath implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            startTransition_ = new nds.lane.reference.types.LaneGroupTransition.ZserioPackingContext();
            transitionPath_ = new nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext();
        }

        public nds.lane.reference.types.LaneGroupTransition.ZserioPackingContext getStartTransition()
        {
            return startTransition_;
        }

        public nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext getTransitionPath()
        {
            return transitionPath_;
        }

        private nds.lane.reference.types.LaneGroupTransition.ZserioPackingContext startTransition_;
        private nds.lane.reference.types.LaneGroupReferenceIndirect.ZserioPackingContext transitionPath_;
    };

    public LaneGroupTransitionGeoPath()
    {
    }

    public LaneGroupTransitionGeoPath(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneGroupTransitionGeoPath(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneGroupTransitionGeoPath(
            nds.lane.reference.types.LaneGroupTransition startTransition_,
            nds.lane.reference.types.LaneGroupReferenceIndirect transitionPath_)
    {
        setStartTransition(startTransition_);
        setTransitionPath(transitionPath_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        startTransition_.initPackingContext(zserioContext.getStartTransition());
        transitionPath_.initPackingContext(zserioContext.getTransitionPath());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += startTransition_.bitSizeOf(endBitPosition);
        endBitPosition += transitionPath_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += startTransition_.bitSizeOf(zserioContext.getStartTransition(), endBitPosition);
        endBitPosition += transitionPath_.bitSizeOf(zserioContext.getTransitionPath(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.reference.types.LaneGroupTransition getStartTransition()
    {
        return startTransition_;
    }

    public void setStartTransition(nds.lane.reference.types.LaneGroupTransition startTransition_)
    {
        this.startTransition_ = startTransition_;
    }

    public nds.lane.reference.types.LaneGroupReferenceIndirect getTransitionPath()
    {
        return transitionPath_;
    }

    public void setTransitionPath(nds.lane.reference.types.LaneGroupReferenceIndirect transitionPath_)
    {
        this.transitionPath_ = transitionPath_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupTransitionGeoPath)
        {
            final LaneGroupTransitionGeoPath that = (LaneGroupTransitionGeoPath)obj;

            return
                    ((startTransition_ == null) ? that.startTransition_ == null : startTransition_.equals(that.startTransition_)) &&
                    ((transitionPath_ == null) ? that.transitionPath_ == null : transitionPath_.equals(that.transitionPath_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startTransition_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionPath_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        startTransition_ = new nds.lane.reference.types.LaneGroupTransition(in);

        transitionPath_ = new nds.lane.reference.types.LaneGroupReferenceIndirect(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startTransition_ = new nds.lane.reference.types.LaneGroupTransition(zserioContext.getStartTransition(), in);

        transitionPath_ = new nds.lane.reference.types.LaneGroupReferenceIndirect(zserioContext.getTransitionPath(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = startTransition_.initializeOffsets(endBitPosition);
        endBitPosition = transitionPath_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = startTransition_.initializeOffsets(zserioContext.getStartTransition(), endBitPosition);
        endBitPosition = transitionPath_.initializeOffsets(zserioContext.getTransitionPath(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        startTransition_.write(out);

        transitionPath_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startTransition_.write(zserioContext.getStartTransition(), out);

        transitionPath_.write(zserioContext.getTransitionPath(), out);
    }

    private nds.lane.reference.types.LaneGroupTransition startTransition_;
    private nds.lane.reference.types.LaneGroupReferenceIndirect transitionPath_;
}
