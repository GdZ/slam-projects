/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupLocationSegment implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            locationSegment_ = new nds.core.location.LocationSegment.ZserioPackingContext();
            numLanes_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.location.LocationSegment.ZserioPackingContext getLocationSegment()
        {
            return locationSegment_;
        }

        public zserio.runtime.array.DeltaContext getNumLanes()
        {
            return numLanes_;
        }

        private nds.core.location.LocationSegment.ZserioPackingContext locationSegment_;
        private zserio.runtime.array.DeltaContext numLanes_;
    };

    public LaneGroupLocationSegment(
            nds.core.location.LocationGeometry pathGeometry_)
    {
        this.pathGeometry_ = pathGeometry_;
    }

    public LaneGroupLocationSegment(zserio.runtime.io.BitStreamReader in,
            nds.core.location.LocationGeometry pathGeometry_)
            throws java.io.IOException
    {
        this.pathGeometry_ = pathGeometry_;

        read(in);
    }

    public LaneGroupLocationSegment(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.core.location.LocationGeometry pathGeometry_)
            throws java.io.IOException
    {
        this.pathGeometry_ = pathGeometry_;

        read(context, in);
    }

    public LaneGroupLocationSegment(
            nds.core.location.LocationGeometry pathGeometry_,
            nds.core.location.LocationSegment locationSegment_,
            short numLanes_,
            nds.core.types.LaneType[] laneTypes_)
    {
        this(pathGeometry_);

        setLocationSegment(locationSegment_);
        setNumLanes(numLanes_);
        setLaneTypes(laneTypes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        locationSegment_.initPackingContext(zserioContext.getLocationSegment());
        zserioContext.getNumLanes().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += locationSegment_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition += 1;
        if (isLaneTypesUsed())
        {
            endBitPosition += laneTypes_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += locationSegment_.bitSizeOf(zserioContext.getLocationSegment(), endBitPosition);
        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition += 1;
        if (isLaneTypesUsed())
        {
            endBitPosition += laneTypes_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.location.LocationGeometry getPathGeometry()
    {
        return this.pathGeometry_;
    }

    public nds.core.location.LocationSegment getLocationSegment()
    {
        return locationSegment_;
    }

    public void setLocationSegment(nds.core.location.LocationSegment locationSegment_)
    {
        this.locationSegment_ = locationSegment_;
    }

    public short getNumLanes()
    {
        return numLanes_;
    }

    public void setNumLanes(short numLanes_)
    {
        this.numLanes_ = numLanes_;
    }

    public nds.core.types.LaneType[] getLaneTypes()
    {
        return (laneTypes_ == null) ? null : laneTypes_.getRawArray();
    }

    public void setLaneTypes(nds.core.types.LaneType[] laneTypes_)
    {
        if (laneTypes_ == null)
        {
            this.laneTypes_ = null;
        }
        else
        {
            this.laneTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class, laneTypes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_laneTypes()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isLaneTypesUsed()
    {
        return isLaneTypesSet();
    }

    public boolean isLaneTypesSet()
    {
        return (laneTypes_ != null);
    }

    public void resetLaneTypes()
    {
        this.laneTypes_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupLocationSegment)
        {
            final LaneGroupLocationSegment that = (LaneGroupLocationSegment)obj;

            return
                    ((this.pathGeometry_ == null) ? that.pathGeometry_ == null : this.pathGeometry_.equals(that.pathGeometry_)) &&
                    ((locationSegment_ == null) ? that.locationSegment_ == null : locationSegment_.equals(that.locationSegment_)) &&
                    numLanes_ == that.numLanes_ &&
                    ((!isLaneTypesUsed()) ? !that.isLaneTypesUsed() :
                        ((laneTypes_ == null) ? that.laneTypes_ == null : laneTypes_.equals(that.laneTypes_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getPathGeometry());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationSegment_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLanes_);
        if (isLaneTypesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, laneTypes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        locationSegment_ = new nds.core.location.LocationSegment(in, getPathGeometry());

        numLanes_ = in.readVarUInt16();

        if (in.readBool())
        {
            laneTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_laneTypes()),
                    zserio.runtime.array.ArrayType.NORMAL);
            laneTypes_.read(in, (int)(getNumLanes()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        locationSegment_ = new nds.core.location.LocationSegment(zserioContext.getLocationSegment(), in, getPathGeometry());

        numLanes_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumLanes().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        if (in.readBool())
        {
            laneTypes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.LaneType.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.LaneType>(new ZserioElementFactory_laneTypes()),
                    zserio.runtime.array.ArrayType.NORMAL);
            laneTypes_.readPacked(in, (int)(getNumLanes()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = locationSegment_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        endBitPosition += 1;
        if (isLaneTypesUsed())
        {
            endBitPosition = laneTypes_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = locationSegment_.initializeOffsets(zserioContext.getLocationSegment(), endBitPosition);
        endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        endBitPosition += 1;
        if (isLaneTypesUsed())
        {
            endBitPosition = laneTypes_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (locationSegment_.getPathGeometry() != (getPathGeometry()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter pathGeometry for field LaneGroupLocationSegment.locationSegment!");
        }
        locationSegment_.write(out);

        out.writeVarUInt16(numLanes_);

        if (isLaneTypesUsed())
        {
            out.writeBool(true);
            if (laneTypes_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupLocationSegment.laneTypes: " +
                        laneTypes_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            laneTypes_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        locationSegment_.write(zserioContext.getLocationSegment(), out);

        zserioContext.getNumLanes().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));

        if (isLaneTypesUsed())
        {
            out.writeBool(true);
            if (laneTypes_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupLocationSegment.laneTypes: " +
                        laneTypes_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            laneTypes_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_laneTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.LaneType>
    {
        @Override
        public nds.core.types.LaneType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.LaneType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.LaneType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.LaneType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.LaneType(context, in);
        }
    }

    private final nds.core.location.LocationGeometry pathGeometry_;
    private nds.core.location.LocationSegment locationSegment_;
    private short numLanes_;
    private zserio.runtime.array.Array laneTypes_;
}
