/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneGroupRangeValidity implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            completeGroupRange_ = new nds.lane.reference.types.LaneGroupRange.ZserioPackingContext();
            numLanes_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.lane.reference.types.LaneGroupRange.ZserioPackingContext getCompleteGroupRange()
        {
            return completeGroupRange_;
        }

        public zserio.runtime.array.DeltaContext getNumLanes()
        {
            return numLanes_;
        }

        private nds.lane.reference.types.LaneGroupRange.ZserioPackingContext completeGroupRange_;
        private zserio.runtime.array.DeltaContext numLanes_;
    };

    public LaneGroupRangeValidity(
            byte coordShift_)
    {
        this.coordShift_ = coordShift_;
    }

    public LaneGroupRangeValidity(zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(in);
    }

    public LaneGroupRangeValidity(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(context, in);
    }

    public LaneGroupRangeValidity(
            byte coordShift_,
            boolean completeGroup_,
            nds.lane.reference.types.LaneGroupRange completeGroupRange_,
            java.lang.Short numLanes_,
            nds.lane.reference.types.LaneRange[] lanes_,
            nds.core.types.Direction[] directions_)
    {
        this(coordShift_);

        setCompleteGroup(completeGroup_);
        setCompleteGroupRange(completeGroupRange_);
        setNumLanes(numLanes_);
        setLanes(lanes_);
        setDirections(directions_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isCompleteGroupRangeUsed())
        {
            completeGroupRange_.initPackingContext(zserioContext.getCompleteGroupRange());
        }
        if (isNumLanesUsed())
        {
            zserioContext.getNumLanes().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCompleteGroupRangeUsed())
        {
            endBitPosition += completeGroupRange_.bitSizeOf(endBitPosition);
        }
        if (isNumLanesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        }
        if (isLanesUsed())
        {
            endBitPosition += lanes_.bitSizeOf(endBitPosition);
        }
        if (isDirectionsUsed())
        {
            endBitPosition += directions_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCompleteGroupRangeUsed())
        {
            endBitPosition += completeGroupRange_.bitSizeOf(zserioContext.getCompleteGroupRange(), endBitPosition);
        }
        if (isNumLanesUsed())
        {
            endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        }
        if (isLanesUsed())
        {
            endBitPosition += lanes_.bitSizeOfPacked(endBitPosition);
        }
        if (isDirectionsUsed())
        {
            endBitPosition += directions_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getCoordShift()
    {
        return this.coordShift_;
    }

    public boolean getCompleteGroup()
    {
        return completeGroup_;
    }

    public void setCompleteGroup(boolean completeGroup_)
    {
        this.completeGroup_ = completeGroup_;
    }

    public nds.lane.reference.types.LaneGroupRange getCompleteGroupRange()
    {
        return completeGroupRange_;
    }

    public void setCompleteGroupRange(nds.lane.reference.types.LaneGroupRange completeGroupRange_)
    {
        this.completeGroupRange_ = completeGroupRange_;
    }

    public boolean isCompleteGroupRangeUsed()
    {
        return (getCompleteGroup());
    }

    public boolean isCompleteGroupRangeSet()
    {
        return (completeGroupRange_ != null);
    }

    public void resetCompleteGroupRange()
    {
        this.completeGroupRange_ = null;
    }

    public java.lang.Short getNumLanes()
    {
        return numLanes_;
    }

    public void setNumLanes(java.lang.Short numLanes_)
    {
        this.numLanes_ = numLanes_;
    }

    public boolean isNumLanesUsed()
    {
        return (!getCompleteGroup());
    }

    public boolean isNumLanesSet()
    {
        return (numLanes_ != null);
    }

    public void resetNumLanes()
    {
        this.numLanes_ = null;
    }

    public nds.lane.reference.types.LaneRange[] getLanes()
    {
        return (lanes_ == null) ? null : lanes_.getRawArray();
    }

    public void setLanes(nds.lane.reference.types.LaneRange[] lanes_)
    {
        if (lanes_ == null)
        {
            this.lanes_ = null;
        }
        else
        {
            this.lanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneRange.class, lanes_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneRange>(new ZserioElementFactory_lanes()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isLanesUsed()
    {
        return (!getCompleteGroup());
    }

    public boolean isLanesSet()
    {
        return (lanes_ != null);
    }

    public void resetLanes()
    {
        this.lanes_ = null;
    }

    public nds.core.types.Direction[] getDirections()
    {
        return (directions_ == null) ? null : directions_.getRawArray();
    }

    public void setDirections(nds.core.types.Direction[] directions_)
    {
        if (directions_ == null)
        {
            this.directions_ = null;
        }
        else
        {
            this.directions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class, directions_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isDirectionsUsed()
    {
        return (!getCompleteGroup());
    }

    public boolean isDirectionsSet()
    {
        return (directions_ != null);
    }

    public void resetDirections()
    {
        this.directions_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupRangeValidity)
        {
            final LaneGroupRangeValidity that = (LaneGroupRangeValidity)obj;

            return
                    this.coordShift_ == that.coordShift_ &&
                    completeGroup_ == that.completeGroup_ &&
                    ((!isCompleteGroupRangeUsed()) ? !that.isCompleteGroupRangeUsed() :
                        ((completeGroupRange_ == null) ? that.completeGroupRange_ == null : completeGroupRange_.equals(that.completeGroupRange_))) &&
                    ((!isNumLanesUsed()) ? !that.isNumLanesUsed() :
                        ((numLanes_ == null) ? that.numLanes_ == null : numLanes_.equals(that.numLanes_))) &&
                    ((!isLanesUsed()) ? !that.isLanesUsed() :
                        ((lanes_ == null) ? that.lanes_ == null : lanes_.equals(that.lanes_))) &&
                    ((!isDirectionsUsed()) ? !that.isDirectionsUsed() :
                        ((directions_ == null) ? that.directions_ == null : directions_.equals(that.directions_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getCoordShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, completeGroup_);
        if (isCompleteGroupRangeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, completeGroupRange_);
        if (isNumLanesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numLanes_);
        if (isLanesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanes_);
        if (isDirectionsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, directions_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        completeGroup_ = in.readBool();

        if (getCompleteGroup())
        {
            completeGroupRange_ = new nds.lane.reference.types.LaneGroupRange(in);
        }

        if (!getCompleteGroup())
        {
            numLanes_ = in.readVarUInt16();
        }

        if (!getCompleteGroup())
        {
            lanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneRange.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneRange>(new ZserioElementFactory_lanes()),
                    zserio.runtime.array.ArrayType.NORMAL);
            lanes_.read(in, (int)(getNumLanes()));
        }

        if (!getCompleteGroup())
        {
            directions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                    zserio.runtime.array.ArrayType.NORMAL);
            directions_.read(in, (int)(getNumLanes()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        completeGroup_ = in.readBool();

        if (getCompleteGroup())
        {
            completeGroupRange_ = new nds.lane.reference.types.LaneGroupRange(zserioContext.getCompleteGroupRange(), in);
        }

        if (!getCompleteGroup())
        {
            numLanes_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumLanes().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
        }

        if (!getCompleteGroup())
        {
            lanes_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.reference.types.LaneRange.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.reference.types.LaneRange>(new ZserioElementFactory_lanes()),
                    zserio.runtime.array.ArrayType.NORMAL);
            lanes_.readPacked(in, (int)(getNumLanes()));
        }

        if (!getCompleteGroup())
        {
            directions_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.EnumRawArray<>(nds.core.types.Direction.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Direction>(new ZserioElementFactory_directions()),
                    zserio.runtime.array.ArrayType.NORMAL);
            directions_.readPacked(in, (int)(getNumLanes()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCompleteGroupRangeUsed())
        {
            endBitPosition = completeGroupRange_.initializeOffsets(endBitPosition);
        }
        if (isNumLanesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numLanes_);
        }
        if (isLanesUsed())
        {
            endBitPosition = lanes_.initializeOffsets(endBitPosition);
        }
        if (isDirectionsUsed())
        {
            endBitPosition = directions_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isCompleteGroupRangeUsed())
        {
            endBitPosition = completeGroupRange_.initializeOffsets(zserioContext.getCompleteGroupRange(), endBitPosition);
        }
        if (isNumLanesUsed())
        {
            endBitPosition += zserioContext.getNumLanes().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        }
        if (isLanesUsed())
        {
            endBitPosition = lanes_.initializeOffsetsPacked(endBitPosition);
        }
        if (isDirectionsUsed())
        {
            endBitPosition = directions_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(completeGroup_);

        if (isCompleteGroupRangeUsed())
        {
            completeGroupRange_.write(out);
        }

        if (isNumLanesUsed())
        {
            out.writeVarUInt16(numLanes_);
        }

        if (isLanesUsed())
        {
            if (lanes_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupRangeValidity.lanes: " +
                        lanes_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            lanes_.write(out);
        }

        if (isDirectionsUsed())
        {
            if (directions_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupRangeValidity.directions: " +
                        directions_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            directions_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(completeGroup_);

        if (isCompleteGroupRangeUsed())
        {
            completeGroupRange_.write(zserioContext.getCompleteGroupRange(), out);
        }

        if (isNumLanesUsed())
        {
            zserioContext.getNumLanes().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(numLanes_));
        }

        if (isLanesUsed())
        {
            if (lanes_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupRangeValidity.lanes: " +
                        lanes_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            lanes_.writePacked(out);
        }

        if (isDirectionsUsed())
        {
            if (directions_.size() != (int)(getNumLanes()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field LaneGroupRangeValidity.directions: " +
                        directions_.size() + " != " + (int)(getNumLanes()) + "!");
            }
            directions_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_lanes implements zserio.runtime.array.PackableElementFactory<nds.lane.reference.types.LaneRange>
    {
        @Override
        public nds.lane.reference.types.LaneRange create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneRange(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.reference.types.LaneRange.ZserioPackingContext();
        }

        @Override
        public nds.lane.reference.types.LaneRange create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.reference.types.LaneRange(context, in);
        }
    }

    private static final class ZserioElementFactory_directions implements zserio.runtime.array.PackableElementFactory<nds.core.types.Direction>
    {
        @Override
        public nds.core.types.Direction create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return nds.core.types.Direction.readEnum(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new zserio.runtime.array.DeltaContext();
        }

        @Override
        public nds.core.types.Direction create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return nds.core.types.Direction.readEnum(context, in);
        }
    }

    private final byte coordShift_;
    private boolean completeGroup_;
    private nds.lane.reference.types.LaneGroupRange completeGroupRange_;
    private java.lang.Short numLanes_;
    private zserio.runtime.array.Array lanes_;
    private zserio.runtime.array.Array directions_;
}
