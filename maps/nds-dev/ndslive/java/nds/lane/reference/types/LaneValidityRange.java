/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LaneValidityRange implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            start_ = new nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext();
            end_ = new nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext();
        }

        public nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext getStart()
        {
            return start_;
        }

        public nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext getEnd()
        {
            return end_;
        }

        private nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext start_;
        private nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext end_;
    };

    public LaneValidityRange()
    {
    }

    public LaneValidityRange(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneValidityRange(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneValidityRange(
            nds.lane.reference.types.LaneValidityPosition start_,
            nds.lane.reference.types.LaneValidityPosition end_)
    {
        setStart(start_);
        setEnd(end_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        start_.initPackingContext(zserioContext.getStart());
        end_.initPackingContext(zserioContext.getEnd());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += start_.bitSizeOf(endBitPosition);
        endBitPosition += end_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += start_.bitSizeOf(zserioContext.getStart(), endBitPosition);
        endBitPosition += end_.bitSizeOf(zserioContext.getEnd(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.reference.types.LaneValidityPosition getStart()
    {
        return start_;
    }

    public void setStart(nds.lane.reference.types.LaneValidityPosition start_)
    {
        this.start_ = start_;
    }

    public nds.lane.reference.types.LaneValidityPosition getEnd()
    {
        return end_;
    }

    public void setEnd(nds.lane.reference.types.LaneValidityPosition end_)
    {
        this.end_ = end_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneValidityRange)
        {
            final LaneValidityRange that = (LaneValidityRange)obj;

            return
                    ((start_ == null) ? that.start_ == null : start_.equals(that.start_)) &&
                    ((end_ == null) ? that.end_ == null : end_.equals(that.end_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, start_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, end_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        start_ = new nds.lane.reference.types.LaneValidityPosition(in);

        end_ = new nds.lane.reference.types.LaneValidityPosition(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        start_ = new nds.lane.reference.types.LaneValidityPosition(zserioContext.getStart(), in);

        end_ = new nds.lane.reference.types.LaneValidityPosition(zserioContext.getEnd(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = start_.initializeOffsets(endBitPosition);
        endBitPosition = end_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = start_.initializeOffsets(zserioContext.getStart(), endBitPosition);
        endBitPosition = end_.initializeOffsets(zserioContext.getEnd(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        start_.write(out);

        end_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        start_.write(zserioContext.getStart(), out);

        end_.write(zserioContext.getEnd(), out);
    }

    private nds.lane.reference.types.LaneValidityPosition start_;
    private nds.lane.reference.types.LaneValidityPosition end_;
}
