/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.reference.types;

public class LanePositionChoice implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            validityPosition_ = new nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext();
            lengthPosition_ = new nds.lane.reference.types.LaneLengthPosition.ZserioPackingContext();
            geometryPosition_ = new zserio.runtime.array.DeltaContext();
            geometryPositionOffset_ = new nds.core.geometry.LinePositionOffset3D.ZserioPackingContext();
            percentagePosition_ = new nds.core.types.PercentagePosition.ZserioPackingContext();
        }

        public nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext getValidityPosition()
        {
            return validityPosition_;
        }

        public nds.lane.reference.types.LaneLengthPosition.ZserioPackingContext getLengthPosition()
        {
            return lengthPosition_;
        }

        public zserio.runtime.array.DeltaContext getGeometryPosition()
        {
            return geometryPosition_;
        }

        public nds.core.geometry.LinePositionOffset3D.ZserioPackingContext getGeometryPositionOffset()
        {
            return geometryPositionOffset_;
        }

        public nds.core.types.PercentagePosition.ZserioPackingContext getPercentagePosition()
        {
            return percentagePosition_;
        }

        private nds.lane.reference.types.LaneValidityPosition.ZserioPackingContext validityPosition_;
        private nds.lane.reference.types.LaneLengthPosition.ZserioPackingContext lengthPosition_;
        private zserio.runtime.array.DeltaContext geometryPosition_;
        private nds.core.geometry.LinePositionOffset3D.ZserioPackingContext geometryPositionOffset_;
        private nds.core.types.PercentagePosition.ZserioPackingContext percentagePosition_;
    };

    public LanePositionChoice(
            nds.lane.reference.types.LaneValidityType type_)
    {
        this.type_ = type_;
    }

    public LanePositionChoice(zserio.runtime.io.BitStreamReader in,
            nds.lane.reference.types.LaneValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public LanePositionChoice(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.lane.reference.types.LaneValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case NONE:
            return UNDEFINED_CHOICE;
        case COMPLETE:
            return UNDEFINED_CHOICE;
        case POSITION:
            return CHOICE_validityPosition;
        case LENGTH:
            return CHOICE_lengthPosition;
        case GEOMETRY:
            return CHOICE_geometryPosition;
        case GEOMETRY_OFFSET:
            return CHOICE_geometryPositionOffset;
        case PERCENTAGE:
            return CHOICE_percentagePosition;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityPosition().initPackingContext(zserioContext.getValidityPosition());
            break;
        case LENGTH:
            getLengthPosition().initPackingContext(zserioContext.getLengthPosition());
            break;
        case GEOMETRY:
            zserioContext.getGeometryPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            getGeometryPositionOffset().initPackingContext(zserioContext.getGeometryPositionOffset());
            break;
        case PERCENTAGE:
            getPercentagePosition().initPackingContext(zserioContext.getPercentagePosition());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityPosition().bitSizeOf(endBitPosition);
            break;
        case LENGTH:
            endBitPosition += getLengthPosition().bitSizeOf(endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(getGeometryPosition());
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryPositionOffset().bitSizeOf(endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentagePosition().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            endBitPosition += getValidityPosition().bitSizeOf(zserioContext.getValidityPosition(), endBitPosition);
            break;
        case LENGTH:
            endBitPosition += getLengthPosition().bitSizeOf(zserioContext.getLengthPosition(), endBitPosition);
            break;
        case GEOMETRY:
            endBitPosition += zserioContext.getGeometryPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            endBitPosition += getGeometryPositionOffset().bitSizeOf(zserioContext.getGeometryPositionOffset(), endBitPosition);
            break;
        case PERCENTAGE:
            endBitPosition += getPercentagePosition().bitSizeOf(zserioContext.getPercentagePosition(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.reference.types.LaneValidityType getType()
    {
        return this.type_;
    }

    public nds.lane.reference.types.LaneValidityPosition getValidityPosition()
    {
        return (nds.lane.reference.types.LaneValidityPosition)objectChoice;
    }

    public void setValidityPosition(nds.lane.reference.types.LaneValidityPosition validityPosition_)
    {
        objectChoice = validityPosition_;
    }

    public nds.lane.reference.types.LaneLengthPosition getLengthPosition()
    {
        return (nds.lane.reference.types.LaneLengthPosition)objectChoice;
    }

    public void setLengthPosition(nds.lane.reference.types.LaneLengthPosition lengthPosition_)
    {
        objectChoice = lengthPosition_;
    }

    public int getGeometryPosition()
    {
        return (java.lang.Integer)objectChoice;
    }

    public void setGeometryPosition(int geometryPosition_)
    {
        objectChoice = geometryPosition_;
    }

    public nds.core.geometry.LinePositionOffset3D getGeometryPositionOffset()
    {
        return (nds.core.geometry.LinePositionOffset3D)objectChoice;
    }

    public void setGeometryPositionOffset(nds.core.geometry.LinePositionOffset3D geometryPositionOffset_)
    {
        objectChoice = geometryPositionOffset_;
    }

    public nds.core.types.PercentagePosition getPercentagePosition()
    {
        return (nds.core.types.PercentagePosition)objectChoice;
    }

    public void setPercentagePosition(nds.core.types.PercentagePosition percentagePosition_)
    {
        objectChoice = percentagePosition_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LanePositionChoice)
        {
            final LanePositionChoice that = (LanePositionChoice)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case NONE:
                // empty
                break;
            case COMPLETE:
                // empty
                break;
            case POSITION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.reference.types.LaneValidityPosition)objectChoice);
                break;
            case LENGTH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.reference.types.LaneLengthPosition)objectChoice);
                break;
            case GEOMETRY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Integer)objectChoice);
                break;
            case GEOMETRY_OFFSET:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.geometry.LinePositionOffset3D)objectChoice);
                break;
            case PERCENTAGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.PercentagePosition)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.lane.reference.types.LaneValidityPosition(in);
            break;
        case LENGTH:
            objectChoice = new nds.lane.reference.types.LaneLengthPosition(in);
            break;
        case GEOMETRY:
            objectChoice = in.readVarSize();
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LinePositionOffset3D(in, (byte)(0), (byte)(0));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentagePosition(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            objectChoice = new nds.lane.reference.types.LaneValidityPosition(zserioContext.getValidityPosition(), in);
            break;
        case LENGTH:
            objectChoice = new nds.lane.reference.types.LaneLengthPosition(zserioContext.getLengthPosition(), in);
            break;
        case GEOMETRY:
            objectChoice = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getGeometryPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
            break;
        case GEOMETRY_OFFSET:
            objectChoice = new nds.core.geometry.LinePositionOffset3D(zserioContext.getGeometryPositionOffset(), in, (byte)(0), (byte)(0));
            break;
        case PERCENTAGE:
            objectChoice = new nds.core.types.PercentagePosition(zserioContext.getPercentagePosition(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityPosition().initializeOffsets(endBitPosition);
            }
            break;
        case LENGTH:
            {
                endBitPosition = getLengthPosition().initializeOffsets(endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(getGeometryPosition());
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryPositionOffset().initializeOffsets(endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentagePosition().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            {
                endBitPosition = getValidityPosition().initializeOffsets(zserioContext.getValidityPosition(), endBitPosition);
            }
            break;
        case LENGTH:
            {
                endBitPosition = getLengthPosition().initializeOffsets(zserioContext.getLengthPosition(), endBitPosition);
            }
            break;
        case GEOMETRY:
            {
                endBitPosition += zserioContext.getGeometryPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                        new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            }
            break;
        case GEOMETRY_OFFSET:
            {
                endBitPosition = getGeometryPositionOffset().initializeOffsets(zserioContext.getGeometryPositionOffset(), endBitPosition);
            }
            break;
        case PERCENTAGE:
            {
                endBitPosition = getPercentagePosition().initializeOffsets(zserioContext.getPercentagePosition(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityPosition().write(out);
            break;
        case LENGTH:
            getLengthPosition().write(out);
            break;
        case GEOMETRY:
            out.writeVarSize(getGeometryPosition());
            break;
        case GEOMETRY_OFFSET:
            // check parameters
            if (getGeometryPositionOffset().getShiftXY() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftXY for field LanePositionChoice.geometryPositionOffset: " +
                        getGeometryPositionOffset().getShiftXY() + " != " + (byte)(0) + "!");
            }
            if (getGeometryPositionOffset().getShiftZ() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter shiftZ for field LanePositionChoice.geometryPositionOffset: " +
                        getGeometryPositionOffset().getShiftZ() + " != " + (byte)(0) + "!");
            }
            getGeometryPositionOffset().write(out);
            break;
        case PERCENTAGE:
            getPercentagePosition().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case NONE:
            // empty
            break;
        case COMPLETE:
            // empty
            break;
        case POSITION:
            getValidityPosition().write(zserioContext.getValidityPosition(), out);
            break;
        case LENGTH:
            getLengthPosition().write(zserioContext.getLengthPosition(), out);
            break;
        case GEOMETRY:
            zserioContext.getGeometryPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(getGeometryPosition()));
            break;
        case GEOMETRY_OFFSET:
            getGeometryPositionOffset().write(zserioContext.getGeometryPositionOffset(), out);
            break;
        case PERCENTAGE:
            getPercentagePosition().write(zserioContext.getPercentagePosition(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LanePositionChoice: " + getType() + "!");
        }
    }

    public static final int CHOICE_validityPosition = 0;
    public static final int CHOICE_lengthPosition = 1;
    public static final int CHOICE_geometryPosition = 2;
    public static final int CHOICE_geometryPositionOffset = 3;
    public static final int CHOICE_percentagePosition = 4;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.lane.reference.types.LaneValidityType type_;
    private java.lang.Object objectChoice;
}
