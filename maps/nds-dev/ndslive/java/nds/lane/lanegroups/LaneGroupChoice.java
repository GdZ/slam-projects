/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanegroups;

public class LaneGroupChoice implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            road_ = new nds.lane.lanegroups.RoadLaneGroup.ZserioPackingContext();
            intersection_ = new nds.lane.lanegroups.IntersectionLaneGroup.ZserioPackingContext();
            border_ = new nds.lane.lanegroups.BorderLaneGroup.ZserioPackingContext();
            fork_ = new nds.lane.lanegroups.ForkLaneGroup.ZserioPackingContext();
            artificialRoad_ = new nds.lane.lanegroups.ArtificialRoadLaneGroup.ZserioPackingContext();
            artificialIntersection_ = new nds.lane.lanegroups.ArtificialIntersectionLaneGroup.ZserioPackingContext();
        }

        public nds.lane.lanegroups.RoadLaneGroup.ZserioPackingContext getRoad()
        {
            return road_;
        }

        public nds.lane.lanegroups.IntersectionLaneGroup.ZserioPackingContext getIntersection()
        {
            return intersection_;
        }

        public nds.lane.lanegroups.BorderLaneGroup.ZserioPackingContext getBorder()
        {
            return border_;
        }

        public nds.lane.lanegroups.ForkLaneGroup.ZserioPackingContext getFork()
        {
            return fork_;
        }

        public nds.lane.lanegroups.ArtificialRoadLaneGroup.ZserioPackingContext getArtificialRoad()
        {
            return artificialRoad_;
        }

        public nds.lane.lanegroups.ArtificialIntersectionLaneGroup.ZserioPackingContext getArtificialIntersection()
        {
            return artificialIntersection_;
        }

        private nds.lane.lanegroups.RoadLaneGroup.ZserioPackingContext road_;
        private nds.lane.lanegroups.IntersectionLaneGroup.ZserioPackingContext intersection_;
        private nds.lane.lanegroups.BorderLaneGroup.ZserioPackingContext border_;
        private nds.lane.lanegroups.ForkLaneGroup.ZserioPackingContext fork_;
        private nds.lane.lanegroups.ArtificialRoadLaneGroup.ZserioPackingContext artificialRoad_;
        private nds.lane.lanegroups.ArtificialIntersectionLaneGroup.ZserioPackingContext artificialIntersection_;
    };

    public LaneGroupChoice(
            nds.lane.lanegroups.LaneGroupType type_,
            boolean hasBoundaryGeometry_)
    {
        this.type_ = type_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;
    }

    public LaneGroupChoice(zserio.runtime.io.BitStreamReader in,
            nds.lane.lanegroups.LaneGroupType type_,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(in);
    }

    public LaneGroupChoice(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.lane.lanegroups.LaneGroupType type_,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.type_ = type_;
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case ROAD:
            return CHOICE_road;
        case INTERSECTION:
            return CHOICE_intersection;
        case BORDER:
            return CHOICE_border;
        case FORK:
            return CHOICE_fork;
        case ARTIFICIAL_ROAD:
            return CHOICE_artificialRoad;
        case ARTIFICIAL_INTERSECTION:
            return CHOICE_artificialIntersection;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD:
            getRoad().initPackingContext(zserioContext.getRoad());
            break;
        case INTERSECTION:
            getIntersection().initPackingContext(zserioContext.getIntersection());
            break;
        case BORDER:
            getBorder().initPackingContext(zserioContext.getBorder());
            break;
        case FORK:
            getFork().initPackingContext(zserioContext.getFork());
            break;
        case ARTIFICIAL_ROAD:
            getArtificialRoad().initPackingContext(zserioContext.getArtificialRoad());
            break;
        case ARTIFICIAL_INTERSECTION:
            getArtificialIntersection().initPackingContext(zserioContext.getArtificialIntersection());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD:
            endBitPosition += getRoad().bitSizeOf(endBitPosition);
            break;
        case INTERSECTION:
            endBitPosition += getIntersection().bitSizeOf(endBitPosition);
            break;
        case BORDER:
            endBitPosition += getBorder().bitSizeOf(endBitPosition);
            break;
        case FORK:
            endBitPosition += getFork().bitSizeOf(endBitPosition);
            break;
        case ARTIFICIAL_ROAD:
            endBitPosition += getArtificialRoad().bitSizeOf(endBitPosition);
            break;
        case ARTIFICIAL_INTERSECTION:
            endBitPosition += getArtificialIntersection().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD:
            endBitPosition += getRoad().bitSizeOf(zserioContext.getRoad(), endBitPosition);
            break;
        case INTERSECTION:
            endBitPosition += getIntersection().bitSizeOf(zserioContext.getIntersection(), endBitPosition);
            break;
        case BORDER:
            endBitPosition += getBorder().bitSizeOf(zserioContext.getBorder(), endBitPosition);
            break;
        case FORK:
            endBitPosition += getFork().bitSizeOf(zserioContext.getFork(), endBitPosition);
            break;
        case ARTIFICIAL_ROAD:
            endBitPosition += getArtificialRoad().bitSizeOf(zserioContext.getArtificialRoad(), endBitPosition);
            break;
        case ARTIFICIAL_INTERSECTION:
            endBitPosition += getArtificialIntersection().bitSizeOf(zserioContext.getArtificialIntersection(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.lane.lanegroups.LaneGroupType getType()
    {
        return this.type_;
    }

    public boolean getHasBoundaryGeometry()
    {
        return this.hasBoundaryGeometry_;
    }

    public nds.lane.lanegroups.RoadLaneGroup getRoad()
    {
        return (nds.lane.lanegroups.RoadLaneGroup)objectChoice;
    }

    public void setRoad(nds.lane.lanegroups.RoadLaneGroup road_)
    {
        objectChoice = road_;
    }

    public nds.lane.lanegroups.IntersectionLaneGroup getIntersection()
    {
        return (nds.lane.lanegroups.IntersectionLaneGroup)objectChoice;
    }

    public void setIntersection(nds.lane.lanegroups.IntersectionLaneGroup intersection_)
    {
        objectChoice = intersection_;
    }

    public nds.lane.lanegroups.BorderLaneGroup getBorder()
    {
        return (nds.lane.lanegroups.BorderLaneGroup)objectChoice;
    }

    public void setBorder(nds.lane.lanegroups.BorderLaneGroup border_)
    {
        objectChoice = border_;
    }

    public nds.lane.lanegroups.ForkLaneGroup getFork()
    {
        return (nds.lane.lanegroups.ForkLaneGroup)objectChoice;
    }

    public void setFork(nds.lane.lanegroups.ForkLaneGroup fork_)
    {
        objectChoice = fork_;
    }

    public nds.lane.lanegroups.ArtificialRoadLaneGroup getArtificialRoad()
    {
        return (nds.lane.lanegroups.ArtificialRoadLaneGroup)objectChoice;
    }

    public void setArtificialRoad(nds.lane.lanegroups.ArtificialRoadLaneGroup artificialRoad_)
    {
        objectChoice = artificialRoad_;
    }

    public nds.lane.lanegroups.ArtificialIntersectionLaneGroup getArtificialIntersection()
    {
        return (nds.lane.lanegroups.ArtificialIntersectionLaneGroup)objectChoice;
    }

    public void setArtificialIntersection(nds.lane.lanegroups.ArtificialIntersectionLaneGroup artificialIntersection_)
    {
        objectChoice = artificialIntersection_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneGroupChoice)
        {
            final LaneGroupChoice that = (LaneGroupChoice)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    this.hasBoundaryGeometry_ == that.hasBoundaryGeometry_ &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasBoundaryGeometry());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case ROAD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.RoadLaneGroup)objectChoice);
                break;
            case INTERSECTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.IntersectionLaneGroup)objectChoice);
                break;
            case BORDER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.BorderLaneGroup)objectChoice);
                break;
            case FORK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.ForkLaneGroup)objectChoice);
                break;
            case ARTIFICIAL_ROAD:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.ArtificialRoadLaneGroup)objectChoice);
                break;
            case ARTIFICIAL_INTERSECTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.lane.lanegroups.ArtificialIntersectionLaneGroup)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case ROAD:
            objectChoice = new nds.lane.lanegroups.RoadLaneGroup(in, (boolean)(getHasBoundaryGeometry()));
            break;
        case INTERSECTION:
            objectChoice = new nds.lane.lanegroups.IntersectionLaneGroup(in, (boolean)(getHasBoundaryGeometry()));
            break;
        case BORDER:
            objectChoice = new nds.lane.lanegroups.BorderLaneGroup(in);
            break;
        case FORK:
            objectChoice = new nds.lane.lanegroups.ForkLaneGroup(in);
            break;
        case ARTIFICIAL_ROAD:
            objectChoice = new nds.lane.lanegroups.ArtificialRoadLaneGroup(in, (boolean)(getHasBoundaryGeometry()));
            break;
        case ARTIFICIAL_INTERSECTION:
            objectChoice = new nds.lane.lanegroups.ArtificialIntersectionLaneGroup(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD:
            objectChoice = new nds.lane.lanegroups.RoadLaneGroup(zserioContext.getRoad(), in, (boolean)(getHasBoundaryGeometry()));
            break;
        case INTERSECTION:
            objectChoice = new nds.lane.lanegroups.IntersectionLaneGroup(zserioContext.getIntersection(), in, (boolean)(getHasBoundaryGeometry()));
            break;
        case BORDER:
            objectChoice = new nds.lane.lanegroups.BorderLaneGroup(zserioContext.getBorder(), in);
            break;
        case FORK:
            objectChoice = new nds.lane.lanegroups.ForkLaneGroup(zserioContext.getFork(), in);
            break;
        case ARTIFICIAL_ROAD:
            objectChoice = new nds.lane.lanegroups.ArtificialRoadLaneGroup(zserioContext.getArtificialRoad(), in, (boolean)(getHasBoundaryGeometry()));
            break;
        case ARTIFICIAL_INTERSECTION:
            objectChoice = new nds.lane.lanegroups.ArtificialIntersectionLaneGroup(zserioContext.getArtificialIntersection(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD:
            {
                endBitPosition = getRoad().initializeOffsets(endBitPosition);
            }
            break;
        case INTERSECTION:
            {
                endBitPosition = getIntersection().initializeOffsets(endBitPosition);
            }
            break;
        case BORDER:
            {
                endBitPosition = getBorder().initializeOffsets(endBitPosition);
            }
            break;
        case FORK:
            {
                endBitPosition = getFork().initializeOffsets(endBitPosition);
            }
            break;
        case ARTIFICIAL_ROAD:
            {
                endBitPosition = getArtificialRoad().initializeOffsets(endBitPosition);
            }
            break;
        case ARTIFICIAL_INTERSECTION:
            {
                endBitPosition = getArtificialIntersection().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ROAD:
            {
                endBitPosition = getRoad().initializeOffsets(zserioContext.getRoad(), endBitPosition);
            }
            break;
        case INTERSECTION:
            {
                endBitPosition = getIntersection().initializeOffsets(zserioContext.getIntersection(), endBitPosition);
            }
            break;
        case BORDER:
            {
                endBitPosition = getBorder().initializeOffsets(zserioContext.getBorder(), endBitPosition);
            }
            break;
        case FORK:
            {
                endBitPosition = getFork().initializeOffsets(zserioContext.getFork(), endBitPosition);
            }
            break;
        case ARTIFICIAL_ROAD:
            {
                endBitPosition = getArtificialRoad().initializeOffsets(zserioContext.getArtificialRoad(), endBitPosition);
            }
            break;
        case ARTIFICIAL_INTERSECTION:
            {
                endBitPosition = getArtificialIntersection().initializeOffsets(zserioContext.getArtificialIntersection(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case ROAD:
            // check parameters
            if (getRoad().getHasBoundaryGeometry() != (boolean)(getHasBoundaryGeometry()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.road: " +
                        getRoad().getHasBoundaryGeometry() + " != " + (boolean)(getHasBoundaryGeometry()) + "!");
            }
            getRoad().write(out);
            break;
        case INTERSECTION:
            // check parameters
            if (getIntersection().getHasBoundaryGeometry() != (boolean)(getHasBoundaryGeometry()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.intersection: " +
                        getIntersection().getHasBoundaryGeometry() + " != " + (boolean)(getHasBoundaryGeometry()) + "!");
            }
            getIntersection().write(out);
            break;
        case BORDER:
            getBorder().write(out);
            break;
        case FORK:
            getFork().write(out);
            break;
        case ARTIFICIAL_ROAD:
            // check parameters
            if (getArtificialRoad().getHasBoundaryGeometry() != (boolean)(getHasBoundaryGeometry()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter hasBoundaryGeometry for field LaneGroupChoice.artificialRoad: " +
                        getArtificialRoad().getHasBoundaryGeometry() + " != " + (boolean)(getHasBoundaryGeometry()) + "!");
            }
            getArtificialRoad().write(out);
            break;
        case ARTIFICIAL_INTERSECTION:
            getArtificialIntersection().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ROAD:
            getRoad().write(zserioContext.getRoad(), out);
            break;
        case INTERSECTION:
            getIntersection().write(zserioContext.getIntersection(), out);
            break;
        case BORDER:
            getBorder().write(zserioContext.getBorder(), out);
            break;
        case FORK:
            getFork().write(zserioContext.getFork(), out);
            break;
        case ARTIFICIAL_ROAD:
            getArtificialRoad().write(zserioContext.getArtificialRoad(), out);
            break;
        case ARTIFICIAL_INTERSECTION:
            getArtificialIntersection().write(zserioContext.getArtificialIntersection(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice LaneGroupChoice: " + getType() + "!");
        }
    }

    public static final int CHOICE_road = 0;
    public static final int CHOICE_intersection = 1;
    public static final int CHOICE_border = 2;
    public static final int CHOICE_fork = 3;
    public static final int CHOICE_artificialRoad = 4;
    public static final int CHOICE_artificialIntersection = 5;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.lane.lanegroups.LaneGroupType type_;
    private final boolean hasBoundaryGeometry_;
    private java.lang.Object objectChoice;
}
