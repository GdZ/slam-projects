/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.lane.lanegroups;

public class RoadLaneGroup implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            startConnector_ = new nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext();
            endConnector_ = new nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext();
        }

        public nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext getStartConnector()
        {
            return startConnector_;
        }

        public nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext getEndConnector()
        {
            return endConnector_;
        }

        private nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext startConnector_;
        private nds.lane.lanegroups.LaneGroupConnector.ZserioPackingContext endConnector_;
    };

    public RoadLaneGroup(
            boolean hasBoundaryGeometry_)
    {
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;
    }

    public RoadLaneGroup(zserio.runtime.io.BitStreamReader in,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(in);
    }

    public RoadLaneGroup(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            boolean hasBoundaryGeometry_)
            throws java.io.IOException
    {
        this.hasBoundaryGeometry_ = hasBoundaryGeometry_;

        read(context, in);
    }

    public RoadLaneGroup(
            boolean hasBoundaryGeometry_,
            boolean startOnBorder_,
            boolean endOnBorder_,
            nds.lane.lanegroups.LaneGroupConnector startConnector_,
            nds.lane.lanegroups.LaneGroupConnector endConnector_,
            nds.lane.lanes.Lane[] lanes_)
    {
        this(hasBoundaryGeometry_);

        setStartOnBorder(startOnBorder_);
        setEndOnBorder(endOnBorder_);
        setStartConnector(startConnector_);
        setEndConnector(endConnector_);
        setLanes(lanes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        startConnector_.initPackingContext(zserioContext.getStartConnector());
        endConnector_.initPackingContext(zserioContext.getEndConnector());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += startConnector_.bitSizeOf(endBitPosition);
        endBitPosition += endConnector_.bitSizeOf(endBitPosition);
        endBitPosition += lanes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += startConnector_.bitSizeOf(zserioContext.getStartConnector(), endBitPosition);
        endBitPosition += endConnector_.bitSizeOf(zserioContext.getEndConnector(), endBitPosition);
        endBitPosition += lanes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasBoundaryGeometry()
    {
        return this.hasBoundaryGeometry_;
    }

    public boolean getStartOnBorder()
    {
        return startOnBorder_;
    }

    public void setStartOnBorder(boolean startOnBorder_)
    {
        this.startOnBorder_ = startOnBorder_;
    }

    public boolean getEndOnBorder()
    {
        return endOnBorder_;
    }

    public void setEndOnBorder(boolean endOnBorder_)
    {
        this.endOnBorder_ = endOnBorder_;
    }

    public nds.lane.lanegroups.LaneGroupConnector getStartConnector()
    {
        return startConnector_;
    }

    public void setStartConnector(nds.lane.lanegroups.LaneGroupConnector startConnector_)
    {
        this.startConnector_ = startConnector_;
    }

    public nds.lane.lanegroups.LaneGroupConnector getEndConnector()
    {
        return endConnector_;
    }

    public void setEndConnector(nds.lane.lanegroups.LaneGroupConnector endConnector_)
    {
        this.endConnector_ = endConnector_;
    }

    public nds.lane.lanes.Lane[] getLanes()
    {
        return (lanes_ == null) ? null : lanes_.getRawArray();
    }

    public void setLanes(nds.lane.lanes.Lane[] lanes_)
    {
        this.lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.Lane.class, lanes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.Lane>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLaneGroup)
        {
            final RoadLaneGroup that = (RoadLaneGroup)obj;

            return
                    this.hasBoundaryGeometry_ == that.hasBoundaryGeometry_ &&
                    startOnBorder_ == that.startOnBorder_ &&
                    endOnBorder_ == that.endOnBorder_ &&
                    ((startConnector_ == null) ? that.startConnector_ == null : startConnector_.equals(that.startConnector_)) &&
                    ((endConnector_ == null) ? that.endConnector_ == null : endConnector_.equals(that.endConnector_)) &&
                    ((lanes_ == null) ? that.lanes_ == null : lanes_.equals(that.lanes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getHasBoundaryGeometry());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startOnBorder_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endOnBorder_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, startConnector_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, endConnector_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, lanes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        startOnBorder_ = in.readBool();

        endOnBorder_ = in.readBool();

        startConnector_ = new nds.lane.lanegroups.LaneGroupConnector(in, (boolean)(getStartOnBorder()));

        endConnector_ = new nds.lane.lanegroups.LaneGroupConnector(in, (boolean)(getEndOnBorder()));

        lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.Lane.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.Lane>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.AUTO);
        lanes_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        startOnBorder_ = in.readBool();

        endOnBorder_ = in.readBool();

        startConnector_ = new nds.lane.lanegroups.LaneGroupConnector(zserioContext.getStartConnector(), in, (boolean)(getStartOnBorder()));

        endConnector_ = new nds.lane.lanegroups.LaneGroupConnector(zserioContext.getEndConnector(), in, (boolean)(getEndOnBorder()));

        lanes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.lane.lanes.Lane.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.lane.lanes.Lane>(new ZserioElementFactory_lanes()),
                zserio.runtime.array.ArrayType.AUTO);
        lanes_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = startConnector_.initializeOffsets(endBitPosition);
        endBitPosition = endConnector_.initializeOffsets(endBitPosition);
        endBitPosition = lanes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition = startConnector_.initializeOffsets(zserioContext.getStartConnector(), endBitPosition);
        endBitPosition = endConnector_.initializeOffsets(zserioContext.getEndConnector(), endBitPosition);
        endBitPosition = lanes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(startOnBorder_);

        out.writeBool(endOnBorder_);

        // check parameters
        if (startConnector_.getOnBorder() != (boolean)(getStartOnBorder()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter onBorder for field RoadLaneGroup.startConnector: " +
                    startConnector_.getOnBorder() + " != " + (boolean)(getStartOnBorder()) + "!");
        }
        startConnector_.write(out);

        // check parameters
        if (endConnector_.getOnBorder() != (boolean)(getEndOnBorder()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter onBorder for field RoadLaneGroup.endConnector: " +
                    endConnector_.getOnBorder() + " != " + (boolean)(getEndOnBorder()) + "!");
        }
        endConnector_.write(out);

        lanes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(startOnBorder_);

        out.writeBool(endOnBorder_);

        startConnector_.write(zserioContext.getStartConnector(), out);

        endConnector_.write(zserioContext.getEndConnector(), out);

        lanes_.writePacked(out);
    }

    private final class ZserioElementFactory_lanes implements zserio.runtime.array.PackableElementFactory<nds.lane.lanes.Lane>
    {
        @Override
        public nds.lane.lanes.Lane create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.lane.lanes.Lane(in, nds.lane.types.LaneLayoutType.ORDERED, (boolean)(getHasBoundaryGeometry()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.lane.lanes.Lane.ZserioPackingContext();
        }

        @Override
        public nds.lane.lanes.Lane create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.lane.lanes.Lane(context, in, nds.lane.types.LaneLayoutType.ORDERED, (boolean)(getHasBoundaryGeometry()));
        }
    }

    private final boolean hasBoundaryGeometry_;
    private boolean startOnBorder_;
    private boolean endOnBorder_;
    private nds.lane.lanegroups.LaneGroupConnector startConnector_;
    private nds.lane.lanegroups.LaneGroupConnector endConnector_;
    private zserio.runtime.array.Array lanes_;
}
