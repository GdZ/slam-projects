/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.topics;

public class GeoRoadNetworkTopic implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            stamp_ = new nds.core.types.TimeStamp.ZserioPackingContext();
            roadNetwork_ = new nds.vehicle.types.Horizon.ZserioPackingContext();
        }

        public nds.core.types.TimeStamp.ZserioPackingContext getStamp()
        {
            return stamp_;
        }

        public nds.vehicle.types.Horizon.ZserioPackingContext getRoadNetwork()
        {
            return roadNetwork_;
        }

        private nds.core.types.TimeStamp.ZserioPackingContext stamp_;
        private nds.vehicle.types.Horizon.ZserioPackingContext roadNetwork_;
    };

    public GeoRoadNetworkTopic()
    {
    }

    public GeoRoadNetworkTopic(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public GeoRoadNetworkTopic(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public GeoRoadNetworkTopic(
            nds.core.types.TimeStamp stamp_,
            nds.vehicle.types.Horizon roadNetwork_)
    {
        setStamp(stamp_);
        setRoadNetwork(roadNetwork_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_.initPackingContext(zserioContext.getStamp());
        roadNetwork_.initPackingContext(zserioContext.getRoadNetwork());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += stamp_.bitSizeOf(endBitPosition);
        endBitPosition += roadNetwork_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += stamp_.bitSizeOf(zserioContext.getStamp(), endBitPosition);
        endBitPosition += roadNetwork_.bitSizeOf(zserioContext.getRoadNetwork(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.TimeStamp getStamp()
    {
        return stamp_;
    }

    public void setStamp(nds.core.types.TimeStamp stamp_)
    {
        this.stamp_ = stamp_;
    }

    public nds.vehicle.types.Horizon getRoadNetwork()
    {
        return roadNetwork_;
    }

    public void setRoadNetwork(nds.vehicle.types.Horizon roadNetwork_)
    {
        this.roadNetwork_ = roadNetwork_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GeoRoadNetworkTopic)
        {
            final GeoRoadNetworkTopic that = (GeoRoadNetworkTopic)obj;

            return
                    ((stamp_ == null) ? that.stamp_ == null : stamp_.equals(that.stamp_)) &&
                    ((roadNetwork_ == null) ? that.roadNetwork_ == null : roadNetwork_.equals(that.roadNetwork_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, stamp_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadNetwork_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        stamp_ = new nds.core.types.TimeStamp(in);

        roadNetwork_ = new nds.vehicle.types.Horizon(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_ = new nds.core.types.TimeStamp(zserioContext.getStamp(), in);

        roadNetwork_ = new nds.vehicle.types.Horizon(zserioContext.getRoadNetwork(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = stamp_.initializeOffsets(endBitPosition);
        endBitPosition = roadNetwork_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = stamp_.initializeOffsets(zserioContext.getStamp(), endBitPosition);
        endBitPosition = roadNetwork_.initializeOffsets(zserioContext.getRoadNetwork(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        stamp_.write(out);

        roadNetwork_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        stamp_.write(zserioContext.getStamp(), out);

        roadNetwork_.write(zserioContext.getRoadNetwork(), out);
    }

    private nds.core.types.TimeStamp stamp_;
    private nds.vehicle.types.Horizon roadNetwork_;
}
