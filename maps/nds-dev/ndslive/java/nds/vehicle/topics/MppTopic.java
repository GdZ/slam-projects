/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.topics;

public class MppTopic implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            time_ = new nds.core.types.TimeStamp.ZserioPackingContext();
        }

        public nds.core.types.TimeStamp.ZserioPackingContext getTime()
        {
            return time_;
        }

        private nds.core.types.TimeStamp.ZserioPackingContext time_;
    };

    public MppTopic()
    {
    }

    public MppTopic(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MppTopic(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MppTopic(
            nds.core.types.TimeStamp time_,
            int[] mpp_)
    {
        setTime(time_);
        setMpp(mpp_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        time_.initPackingContext(zserioContext.getTime());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += time_.bitSizeOf(endBitPosition);
        endBitPosition += mpp_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += time_.bitSizeOf(zserioContext.getTime(), endBitPosition);
        endBitPosition += mpp_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.TimeStamp getTime()
    {
        return time_;
    }

    public void setTime(nds.core.types.TimeStamp time_)
    {
        this.time_ = time_;
    }

    public int[] getMpp()
    {
        return (mpp_ == null) ? null : mpp_.getRawArray();
    }

    public void setMpp(int[] mpp_)
    {
        this.mpp_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(mpp_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MppTopic)
        {
            final MppTopic that = (MppTopic)obj;

            return
                    ((time_ == null) ? that.time_ == null : time_.equals(that.time_)) &&
                    ((mpp_ == null) ? that.mpp_ == null : mpp_.equals(that.mpp_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, time_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, mpp_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        time_ = new nds.core.types.TimeStamp(in);

        mpp_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        mpp_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        time_ = new nds.core.types.TimeStamp(zserioContext.getTime(), in);

        mpp_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        mpp_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = time_.initializeOffsets(endBitPosition);
        endBitPosition = mpp_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = time_.initializeOffsets(zserioContext.getTime(), endBitPosition);
        endBitPosition = mpp_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        time_.write(out);

        mpp_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        time_.write(zserioContext.getTime(), out);

        mpp_.writePacked(out);
    }

    private nds.core.types.TimeStamp time_;
    private zserio.runtime.array.Array mpp_;
}
