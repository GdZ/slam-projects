/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.services;

public class HorizonRequest implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            horizonLength_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getHorizonLength()
        {
            return horizonLength_;
        }

        private zserio.runtime.array.DeltaContext horizonLength_;
    };

    public HorizonRequest()
    {
    }

    public HorizonRequest(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public HorizonRequest(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public HorizonRequest(
            nds.core.vehicle.VehiclePose[] pose_,
            int horizonLength_)
    {
        setPose(pose_);
        setHorizonLength(horizonLength_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getHorizonLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(horizonLength_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += pose_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(horizonLength_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += pose_.bitSizeOfPacked(endBitPosition);
        endBitPosition += zserioContext.getHorizonLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(horizonLength_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.vehicle.VehiclePose[] getPose()
    {
        return (pose_ == null) ? null : pose_.getRawArray();
    }

    public void setPose(nds.core.vehicle.VehiclePose[] pose_)
    {
        this.pose_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.VehiclePose.class, pose_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.VehiclePose>(new ZserioElementFactory_pose()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public int getHorizonLength()
    {
        return horizonLength_;
    }

    public void setHorizonLength(int horizonLength_)
    {
        this.horizonLength_ = horizonLength_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof HorizonRequest)
        {
            final HorizonRequest that = (HorizonRequest)obj;

            return
                    ((pose_ == null) ? that.pose_ == null : pose_.equals(that.pose_)) &&
                    horizonLength_ == that.horizonLength_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, pose_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, horizonLength_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        pose_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.VehiclePose.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.VehiclePose>(new ZserioElementFactory_pose()),
                zserio.runtime.array.ArrayType.AUTO);
        pose_.read(in);

        horizonLength_ = in.readVarUInt32();

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        pose_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.vehicle.VehiclePose.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.vehicle.VehiclePose>(new ZserioElementFactory_pose()),
                zserio.runtime.array.ArrayType.AUTO);
        pose_.readPacked(in);

        horizonLength_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getHorizonLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = pose_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(horizonLength_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = pose_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += zserioContext.getHorizonLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(horizonLength_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        pose_.write(out);

        out.writeVarUInt32(horizonLength_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        pose_.writePacked(out);

        zserioContext.getHorizonLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(horizonLength_));
    }

    private void checkConstraints()
    {
        if (!(getPose().length >= 1))
            throw new zserio.runtime.ConstraintError("Constraint violated at HorizonRequest.pose!");
    }

    private static final class ZserioElementFactory_pose implements zserio.runtime.array.PackableElementFactory<nds.core.vehicle.VehiclePose>
    {
        @Override
        public nds.core.vehicle.VehiclePose create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.vehicle.VehiclePose(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.vehicle.VehiclePose.ZserioPackingContext();
        }

        @Override
        public nds.core.vehicle.VehiclePose create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.vehicle.VehiclePose(context, in);
        }
    }

    private zserio.runtime.array.Array pose_;
    private int horizonLength_;
}
