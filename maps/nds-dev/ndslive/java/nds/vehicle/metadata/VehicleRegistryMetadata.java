/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.metadata;

public class VehicleRegistryMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            vehicleServiceType_ = new zserio.runtime.array.DeltaContext();
            capabilities_ = new nds.vehicle.metadata.VehicleServiceCapabilities.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getVehicleServiceType()
        {
            return vehicleServiceType_;
        }

        public nds.vehicle.metadata.VehicleServiceCapabilities.ZserioPackingContext getCapabilities()
        {
            return capabilities_;
        }

        private zserio.runtime.array.DeltaContext vehicleServiceType_;
        private nds.vehicle.metadata.VehicleServiceCapabilities.ZserioPackingContext capabilities_;
    };

    public VehicleRegistryMetadata()
    {
    }

    public VehicleRegistryMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public VehicleRegistryMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public VehicleRegistryMetadata(
            nds.vehicle.metadata.VehicleServiceType vehicleServiceType_,
            nds.vehicle.metadata.VehicleServiceCapabilities capabilities_)
    {
        setVehicleServiceType(vehicleServiceType_);
        setCapabilities(capabilities_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        vehicleServiceType_.initPackingContext(zserioContext.getVehicleServiceType());
        capabilities_.initPackingContext(zserioContext.getCapabilities());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += vehicleServiceType_.bitSizeOf(endBitPosition);
        endBitPosition += capabilities_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += vehicleServiceType_.bitSizeOf(zserioContext.getVehicleServiceType(), endBitPosition);
        endBitPosition += capabilities_.bitSizeOf(zserioContext.getCapabilities(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.vehicle.metadata.VehicleServiceType getVehicleServiceType()
    {
        return vehicleServiceType_;
    }

    public void setVehicleServiceType(nds.vehicle.metadata.VehicleServiceType vehicleServiceType_)
    {
        this.vehicleServiceType_ = vehicleServiceType_;
    }

    public nds.vehicle.metadata.VehicleServiceCapabilities getCapabilities()
    {
        return capabilities_;
    }

    public void setCapabilities(nds.vehicle.metadata.VehicleServiceCapabilities capabilities_)
    {
        this.capabilities_ = capabilities_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof VehicleRegistryMetadata)
        {
            final VehicleRegistryMetadata that = (VehicleRegistryMetadata)obj;

            return
                    ((vehicleServiceType_ == null) ? that.vehicleServiceType_ == null : vehicleServiceType_.getValue() == that.vehicleServiceType_.getValue()) &&
                    ((capabilities_ == null) ? that.capabilities_ == null : capabilities_.equals(that.capabilities_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, vehicleServiceType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, capabilities_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        vehicleServiceType_ = nds.vehicle.metadata.VehicleServiceType.readEnum(in);

        capabilities_ = new nds.vehicle.metadata.VehicleServiceCapabilities(in, getVehicleServiceType());
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        vehicleServiceType_ = nds.vehicle.metadata.VehicleServiceType.readEnum(zserioContext.getVehicleServiceType(), in);

        capabilities_ = new nds.vehicle.metadata.VehicleServiceCapabilities(zserioContext.getCapabilities(), in, getVehicleServiceType());
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += vehicleServiceType_.bitSizeOf(endBitPosition);
        endBitPosition = capabilities_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = vehicleServiceType_.initializeOffsets(zserioContext.getVehicleServiceType(), endBitPosition);
        endBitPosition = capabilities_.initializeOffsets(zserioContext.getCapabilities(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        vehicleServiceType_.write(out);

        // check parameters
        if (capabilities_.getType() != (getVehicleServiceType()))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field VehicleRegistryMetadata.capabilities!");
        }
        capabilities_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        vehicleServiceType_.write(zserioContext.getVehicleServiceType(), out);

        capabilities_.write(zserioContext.getCapabilities(), out);
    }

    private nds.vehicle.metadata.VehicleServiceType vehicleServiceType_;
    private nds.vehicle.metadata.VehicleServiceCapabilities capabilities_;
}
