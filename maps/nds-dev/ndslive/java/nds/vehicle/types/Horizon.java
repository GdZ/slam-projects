/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.types;

public class Horizon implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numPaths_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumPaths()
        {
            return numPaths_;
        }

        private zserio.runtime.array.DeltaContext numPaths_;
    };

    public Horizon()
    {
    }

    public Horizon(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Horizon(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Horizon(
            int numPaths_,
            nds.vehicle.types.HorizonPath[] horizon_,
            int[] mostProbablePath_)
    {
        setNumPaths(numPaths_);
        setHorizon(horizon_);
        setMostProbablePath(mostProbablePath_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPaths().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPaths_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPaths_);
        endBitPosition += horizon_.bitSizeOf(endBitPosition);
        endBitPosition += mostProbablePath_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPaths().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPaths_));
        endBitPosition += horizon_.bitSizeOfPacked(endBitPosition);
        endBitPosition += mostProbablePath_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getNumPaths()
    {
        return numPaths_;
    }

    public void setNumPaths(int numPaths_)
    {
        this.numPaths_ = numPaths_;
    }

    public nds.vehicle.types.HorizonPath[] getHorizon()
    {
        return (horizon_ == null) ? null : horizon_.getRawArray();
    }

    public void setHorizon(nds.vehicle.types.HorizonPath[] horizon_)
    {
        this.horizon_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.vehicle.types.HorizonPath.class, horizon_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.vehicle.types.HorizonPath>(new ZserioElementFactory_horizon()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int[] getMostProbablePath()
    {
        return (mostProbablePath_ == null) ? null : mostProbablePath_.getRawArray();
    }

    public void setMostProbablePath(int[] mostProbablePath_)
    {
        this.mostProbablePath_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(mostProbablePath_),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Horizon)
        {
            final Horizon that = (Horizon)obj;

            return
                    numPaths_ == that.numPaths_ &&
                    ((horizon_ == null) ? that.horizon_ == null : horizon_.equals(that.horizon_)) &&
                    ((mostProbablePath_ == null) ? that.mostProbablePath_ == null : mostProbablePath_.equals(that.mostProbablePath_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numPaths_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, horizon_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, mostProbablePath_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numPaths_ = in.readVarSize();

        horizon_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.vehicle.types.HorizonPath.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.vehicle.types.HorizonPath>(new ZserioElementFactory_horizon()),
                zserio.runtime.array.ArrayType.NORMAL);
        horizon_.read(in, (int)(getNumPaths()));

        mostProbablePath_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        mostProbablePath_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numPaths_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumPaths().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        horizon_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.vehicle.types.HorizonPath.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.vehicle.types.HorizonPath>(new ZserioElementFactory_horizon()),
                zserio.runtime.array.ArrayType.NORMAL);
        horizon_.readPacked(in, (int)(getNumPaths()));

        mostProbablePath_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.AUTO);
        mostProbablePath_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numPaths_);
        endBitPosition = horizon_.initializeOffsets(endBitPosition);
        endBitPosition = mostProbablePath_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumPaths().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPaths_));
        endBitPosition = horizon_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = mostProbablePath_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(numPaths_);

        if (horizon_.size() != (int)(getNumPaths()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Horizon.horizon: " +
                    horizon_.size() + " != " + (int)(getNumPaths()) + "!");
        }
        horizon_.write(out);

        mostProbablePath_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumPaths().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numPaths_));

        if (horizon_.size() != (int)(getNumPaths()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Horizon.horizon: " +
                    horizon_.size() + " != " + (int)(getNumPaths()) + "!");
        }
        horizon_.writePacked(out);

        mostProbablePath_.writePacked(out);
    }

    private static final class ZserioElementFactory_horizon implements zserio.runtime.array.PackableElementFactory<nds.vehicle.types.HorizonPath>
    {
        @Override
        public nds.vehicle.types.HorizonPath create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.vehicle.types.HorizonPath(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.vehicle.types.HorizonPath.ZserioPackingContext();
        }

        @Override
        public nds.vehicle.types.HorizonPath create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.vehicle.types.HorizonPath(context, in);
        }
    }

    private int numPaths_;
    private zserio.runtime.array.Array horizon_;
    private zserio.runtime.array.Array mostProbablePath_;
}
