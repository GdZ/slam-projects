/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.vehicle.types;

public class PoseRoadPathMatched implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
            offset_ = new zserio.runtime.array.DeltaContext();
            altitude_ = new zserio.runtime.array.DeltaContext();
            heading_ = new zserio.runtime.array.DeltaContext();
            speed_ = new zserio.runtime.array.DeltaContext();
            probability_ = new nds.core.vehicle.MatchProbability.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getOffset()
        {
            return offset_;
        }

        public zserio.runtime.array.DeltaContext getAltitude()
        {
            return altitude_;
        }

        public zserio.runtime.array.DeltaContext getHeading()
        {
            return heading_;
        }

        public zserio.runtime.array.DeltaContext getSpeed()
        {
            return speed_;
        }

        public nds.core.vehicle.MatchProbability.ZserioPackingContext getProbability()
        {
            return probability_;
        }

        private zserio.runtime.array.DeltaContext id_;
        private zserio.runtime.array.DeltaContext offset_;
        private zserio.runtime.array.DeltaContext altitude_;
        private zserio.runtime.array.DeltaContext heading_;
        private zserio.runtime.array.DeltaContext speed_;
        private nds.core.vehicle.MatchProbability.ZserioPackingContext probability_;
    };

    public PoseRoadPathMatched()
    {
    }

    public PoseRoadPathMatched(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public PoseRoadPathMatched(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public PoseRoadPathMatched(
            int id_,
            int offset_,
            java.lang.Integer altitude_,
            java.lang.Short heading_,
            java.lang.Short speed_,
            nds.core.vehicle.MatchProbability probability_)
    {
        setId(id_);
        setOffset(offset_);
        setAltitude(altitude_);
        setHeading(heading_);
        setSpeed(speed_);
        setProbability(probability_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        zserioContext.getOffset().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(offset_));
        if (isAltitudeUsed())
        {
            zserioContext.getAltitude().init(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(altitude_));
        }
        if (isHeadingUsed())
        {
            zserioContext.getHeading().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        if (isSpeedUsed())
        {
            zserioContext.getSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        if (isProbabilityUsed())
        {
            probability_.initPackingContext(zserioContext.getProbability());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(offset_);
        endBitPosition += 1;
        if (isAltitudeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(altitude_);
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition += probability_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        endBitPosition += zserioContext.getOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(offset_));
        endBitPosition += 1;
        if (isAltitudeUsed())
        {
            endBitPosition += zserioContext.getAltitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(altitude_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition += probability_.bitSizeOf(zserioContext.getProbability(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public int getId()
    {
        return id_;
    }

    public void setId(int id_)
    {
        this.id_ = id_;
    }

    public int getOffset()
    {
        return offset_;
    }

    public void setOffset(int offset_)
    {
        this.offset_ = offset_;
    }

    public java.lang.Integer getAltitude()
    {
        return altitude_;
    }

    public void setAltitude(java.lang.Integer altitude_)
    {
        this.altitude_ = altitude_;
    }

    public boolean isAltitudeUsed()
    {
        return isAltitudeSet();
    }

    public boolean isAltitudeSet()
    {
        return (altitude_ != null);
    }

    public void resetAltitude()
    {
        this.altitude_ = null;
    }

    public java.lang.Short getHeading()
    {
        return heading_;
    }

    public void setHeading(java.lang.Short heading_)
    {
        this.heading_ = heading_;
    }

    public boolean isHeadingUsed()
    {
        return isHeadingSet();
    }

    public boolean isHeadingSet()
    {
        return (heading_ != null);
    }

    public void resetHeading()
    {
        this.heading_ = null;
    }

    public java.lang.Short getSpeed()
    {
        return speed_;
    }

    public void setSpeed(java.lang.Short speed_)
    {
        this.speed_ = speed_;
    }

    public boolean isSpeedUsed()
    {
        return isSpeedSet();
    }

    public boolean isSpeedSet()
    {
        return (speed_ != null);
    }

    public void resetSpeed()
    {
        this.speed_ = null;
    }

    public nds.core.vehicle.MatchProbability getProbability()
    {
        return probability_;
    }

    public void setProbability(nds.core.vehicle.MatchProbability probability_)
    {
        this.probability_ = probability_;
    }

    public boolean isProbabilityUsed()
    {
        return isProbabilitySet();
    }

    public boolean isProbabilitySet()
    {
        return (probability_ != null);
    }

    public void resetProbability()
    {
        this.probability_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PoseRoadPathMatched)
        {
            final PoseRoadPathMatched that = (PoseRoadPathMatched)obj;

            return
                    id_ == that.id_ &&
                    offset_ == that.offset_ &&
                    ((!isAltitudeUsed()) ? !that.isAltitudeUsed() :
                        ((altitude_ == null) ? that.altitude_ == null : altitude_.equals(that.altitude_))) &&
                    ((!isHeadingUsed()) ? !that.isHeadingUsed() :
                        ((heading_ == null) ? that.heading_ == null : heading_.equals(that.heading_))) &&
                    ((!isSpeedUsed()) ? !that.isSpeedUsed() :
                        ((speed_ == null) ? that.speed_ == null : speed_.equals(that.speed_))) &&
                    ((!isProbabilityUsed()) ? !that.isProbabilityUsed() :
                        ((probability_ == null) ? that.probability_ == null : probability_.equals(that.probability_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, offset_);
        if (isAltitudeUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, altitude_);
        if (isHeadingUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, heading_);
        if (isSpeedUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, speed_);
        if (isProbabilityUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, probability_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt32();

        offset_ = in.readVarUInt32();

        if (in.readBool())
        {
            altitude_ = in.readVarInt32();
        }

        if (in.readBool())
        {
            heading_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            speed_ = in.readUnsignedByte();
        }

        if (in.readBool())
        {
            probability_ = new nds.core.vehicle.MatchProbability(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        offset_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getOffset().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (in.readBool())
        {
            altitude_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getAltitude().read(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), in)).get();
        }

        if (in.readBool())
        {
            heading_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getHeading().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            speed_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }

        if (in.readBool())
        {
            probability_ = new nds.core.vehicle.MatchProbability(zserioContext.getProbability(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(id_);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(offset_);
        endBitPosition += 1;
        if (isAltitudeUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarInt32(altitude_);
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += 8;
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition = probability_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        endBitPosition += zserioContext.getOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(offset_));
        endBitPosition += 1;
        if (isAltitudeUsed())
        {
            endBitPosition += zserioContext.getAltitude().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(altitude_));
        }
        endBitPosition += 1;
        if (isHeadingUsed())
        {
            endBitPosition += zserioContext.getHeading().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        endBitPosition += 1;
        if (isSpeedUsed())
        {
            endBitPosition += zserioContext.getSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        endBitPosition += 1;
        if (isProbabilityUsed())
        {
            endBitPosition = probability_.initializeOffsets(zserioContext.getProbability(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(id_);

        out.writeVarUInt32(offset_);

        if (isAltitudeUsed())
        {
            out.writeBool(true);
            out.writeVarInt32(altitude_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(heading_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            out.writeUnsignedByte(speed_);
        }
        else
        {
            out.writeBool(false);
        }

        if (isProbabilityUsed())
        {
            out.writeBool(true);
            probability_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));

        zserioContext.getOffset().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(offset_));

        if (isAltitudeUsed())
        {
            out.writeBool(true);
            zserioContext.getAltitude().write(new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(altitude_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isHeadingUsed())
        {
            out.writeBool(true);
            zserioContext.getHeading().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(heading_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isSpeedUsed())
        {
            out.writeBool(true);
            zserioContext.getSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(speed_));
        }
        else
        {
            out.writeBool(false);
        }

        if (isProbabilityUsed())
        {
            out.writeBool(true);
            probability_.write(zserioContext.getProbability(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private int id_;
    private int offset_;
    private java.lang.Integer altitude_;
    private java.lang.Short heading_;
    private java.lang.Short speed_;
    private nds.core.vehicle.MatchProbability probability_;
}
