/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.search.services;

public class GeneralSearchResponse implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numResults_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumResults()
        {
            return numResults_;
        }

        private zserio.runtime.array.DeltaContext numResults_;
    };

    public GeneralSearchResponse()
    {
    }

    public GeneralSearchResponse(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public GeneralSearchResponse(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public GeneralSearchResponse(
            boolean hasDistanceInfo_,
            nds.search.types.Suggestions suggestionList_,
            nds.search.types.NextValidCharacterList nvcList_,
            int numResults_,
            nds.search.types.SearchResult[] results_)
    {
        setHasDistanceInfo(hasDistanceInfo_);
        setSuggestionList(suggestionList_);
        setNvcList(nvcList_);
        setNumResults(numResults_);
        setResults(results_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumResults().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numResults_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        if (isSuggestionListUsed())
        {
            endBitPosition += suggestionList_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isNvcListUsed())
        {
            endBitPosition += nvcList_.bitSizeOf(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(numResults_);
        endBitPosition += results_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        if (isSuggestionListUsed())
        {
            endBitPosition += suggestionList_.bitSizeOf(endBitPosition);
        }
        endBitPosition += 1;
        if (isNvcListUsed())
        {
            endBitPosition += nvcList_.bitSizeOf(endBitPosition);
        }
        endBitPosition += zserioContext.getNumResults().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numResults_));
        endBitPosition += results_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasDistanceInfo()
    {
        return hasDistanceInfo_;
    }

    public void setHasDistanceInfo(boolean hasDistanceInfo_)
    {
        this.hasDistanceInfo_ = hasDistanceInfo_;
    }

    public nds.search.types.Suggestions getSuggestionList()
    {
        return suggestionList_;
    }

    public void setSuggestionList(nds.search.types.Suggestions suggestionList_)
    {
        this.suggestionList_ = suggestionList_;
    }

    public boolean isSuggestionListUsed()
    {
        return isSuggestionListSet();
    }

    public boolean isSuggestionListSet()
    {
        return (suggestionList_ != null);
    }

    public void resetSuggestionList()
    {
        this.suggestionList_ = null;
    }

    public nds.search.types.NextValidCharacterList getNvcList()
    {
        return nvcList_;
    }

    public void setNvcList(nds.search.types.NextValidCharacterList nvcList_)
    {
        this.nvcList_ = nvcList_;
    }

    public boolean isNvcListUsed()
    {
        return isNvcListSet();
    }

    public boolean isNvcListSet()
    {
        return (nvcList_ != null);
    }

    public void resetNvcList()
    {
        this.nvcList_ = null;
    }

    public int getNumResults()
    {
        return numResults_;
    }

    public void setNumResults(int numResults_)
    {
        this.numResults_ = numResults_;
    }

    public nds.search.types.SearchResult[] getResults()
    {
        return (results_ == null) ? null : results_.getRawArray();
    }

    public void setResults(nds.search.types.SearchResult[] results_)
    {
        this.results_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.search.types.SearchResult.class, results_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.search.types.SearchResult>(new ZserioElementFactory_results()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GeneralSearchResponse)
        {
            final GeneralSearchResponse that = (GeneralSearchResponse)obj;

            return
                    hasDistanceInfo_ == that.hasDistanceInfo_ &&
                    ((!isSuggestionListUsed()) ? !that.isSuggestionListUsed() :
                        ((suggestionList_ == null) ? that.suggestionList_ == null : suggestionList_.equals(that.suggestionList_))) &&
                    ((!isNvcListUsed()) ? !that.isNvcListUsed() :
                        ((nvcList_ == null) ? that.nvcList_ == null : nvcList_.equals(that.nvcList_))) &&
                    numResults_ == that.numResults_ &&
                    ((results_ == null) ? that.results_ == null : results_.equals(that.results_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasDistanceInfo_);
        if (isSuggestionListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, suggestionList_);
        if (isNvcListUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, nvcList_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numResults_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, results_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasDistanceInfo_ = in.readBool();

        if (in.readBool())
        {
            suggestionList_ = new nds.search.types.Suggestions(in);
        }

        if (in.readBool())
        {
            nvcList_ = new nds.search.types.NextValidCharacterList(in);
        }

        numResults_ = in.readVarUInt32();

        results_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.search.types.SearchResult.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.search.types.SearchResult>(new ZserioElementFactory_results()),
                zserio.runtime.array.ArrayType.NORMAL);
        results_.read(in, (int)(getNumResults()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        hasDistanceInfo_ = in.readBool();

        if (in.readBool())
        {
            suggestionList_ = new nds.search.types.Suggestions(in);
        }

        if (in.readBool())
        {
            nvcList_ = new nds.search.types.NextValidCharacterList(in);
        }

        numResults_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getNumResults().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        results_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.search.types.SearchResult.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.search.types.SearchResult>(new ZserioElementFactory_results()),
                zserio.runtime.array.ArrayType.NORMAL);
        results_.readPacked(in, (int)(getNumResults()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        if (isSuggestionListUsed())
        {
            endBitPosition = suggestionList_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isNvcListUsed())
        {
            endBitPosition = nvcList_.initializeOffsets(endBitPosition);
        }
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(numResults_);
        endBitPosition = results_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += 1;
        if (isSuggestionListUsed())
        {
            endBitPosition = suggestionList_.initializeOffsets(endBitPosition);
        }
        endBitPosition += 1;
        if (isNvcListUsed())
        {
            endBitPosition = nvcList_.initializeOffsets(endBitPosition);
        }
        endBitPosition += zserioContext.getNumResults().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(numResults_));
        endBitPosition = results_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasDistanceInfo_);

        if (isSuggestionListUsed())
        {
            out.writeBool(true);
            suggestionList_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isNvcListUsed())
        {
            out.writeBool(true);
            nvcList_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        out.writeVarUInt32(numResults_);

        if (results_.size() != (int)(getNumResults()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field GeneralSearchResponse.results: " +
                    results_.size() + " != " + (int)(getNumResults()) + "!");
        }
        results_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(hasDistanceInfo_);

        if (isSuggestionListUsed())
        {
            out.writeBool(true);
            suggestionList_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        if (isNvcListUsed())
        {
            out.writeBool(true);
            nvcList_.write(out);
        }
        else
        {
            out.writeBool(false);
        }

        zserioContext.getNumResults().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(numResults_));

        if (results_.size() != (int)(getNumResults()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field GeneralSearchResponse.results: " +
                    results_.size() + " != " + (int)(getNumResults()) + "!");
        }
        results_.writePacked(out);
    }

    private final class ZserioElementFactory_results implements zserio.runtime.array.PackableElementFactory<nds.search.types.SearchResult>
    {
        @Override
        public nds.search.types.SearchResult create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.search.types.SearchResult(in, (boolean)(getHasDistanceInfo()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.search.types.SearchResult.ZserioPackingContext();
        }

        @Override
        public nds.search.types.SearchResult create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.search.types.SearchResult(context, in, (boolean)(getHasDistanceInfo()));
        }
    }

    private boolean hasDistanceInfo_;
    private nds.search.types.Suggestions suggestionList_;
    private nds.search.types.NextValidCharacterList nvcList_;
    private int numResults_;
    private zserio.runtime.array.Array results_;
}
