/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.metadata;

public class FeatureLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            layerType_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getLayerType()
        {
            return layerType_;
        }

        private zserio.runtime.array.DeltaContext layerType_;
    };

    public FeatureLayerMetadata()
    {
    }

    public FeatureLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public FeatureLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public FeatureLayerMetadata(
            nds.road.metadata.FeatureLayerType layerType_,
            nds.core.types.RoadType[] includedRoadTypes_)
    {
        setLayerType(layerType_);
        setIncludedRoadTypes(includedRoadTypes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        layerType_.initPackingContext(zserioContext.getLayerType());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += layerType_.bitSizeOf(endBitPosition);
        endBitPosition += includedRoadTypes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += layerType_.bitSizeOf(zserioContext.getLayerType(), endBitPosition);
        endBitPosition += includedRoadTypes_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.road.metadata.FeatureLayerType getLayerType()
    {
        return layerType_;
    }

    public void setLayerType(nds.road.metadata.FeatureLayerType layerType_)
    {
        this.layerType_ = layerType_;
    }

    public nds.core.types.RoadType[] getIncludedRoadTypes()
    {
        return (includedRoadTypes_ == null) ? null : includedRoadTypes_.getRawArray();
    }

    public void setIncludedRoadTypes(nds.core.types.RoadType[] includedRoadTypes_)
    {
        this.includedRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class, includedRoadTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_includedRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof FeatureLayerMetadata)
        {
            final FeatureLayerMetadata that = (FeatureLayerMetadata)obj;

            return
                    ((layerType_ == null) ? that.layerType_ == null : layerType_.getValue() == that.layerType_.getValue()) &&
                    ((includedRoadTypes_ == null) ? that.includedRoadTypes_ == null : includedRoadTypes_.equals(that.includedRoadTypes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, layerType_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, includedRoadTypes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        layerType_ = nds.road.metadata.FeatureLayerType.readEnum(in);

        includedRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_includedRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        includedRoadTypes_.read(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        layerType_ = nds.road.metadata.FeatureLayerType.readEnum(zserioContext.getLayerType(), in);

        includedRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_includedRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        includedRoadTypes_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += layerType_.bitSizeOf(endBitPosition);
        endBitPosition = includedRoadTypes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = layerType_.initializeOffsets(zserioContext.getLayerType(), endBitPosition);
        endBitPosition = includedRoadTypes_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        layerType_.write(out);

        includedRoadTypes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        layerType_.write(zserioContext.getLayerType(), out);

        includedRoadTypes_.writePacked(out);
    }

    private static final class ZserioElementFactory_includedRoadTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.RoadType>
    {
        @Override
        public nds.core.types.RoadType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.RoadType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.RoadType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.RoadType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.RoadType(context, in);
        }
    }

    private nds.road.metadata.FeatureLayerType layerType_;
    private zserio.runtime.array.Array includedRoadTypes_;
}
