/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.road;

public class Road implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            length_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext id_;
        private zserio.runtime.array.DeltaContext length_;
    };

    public Road()
    {
    }

    public Road(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public Road(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public Road(
            nds.core.types.Var4ByteId id_,
            int length_)
    {
        setId(id_);
        setLength(length_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.initPackingContext(zserioContext.getId());
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(zserioContext.getId(), endBitPosition);
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getId()
    {
        return id_;
    }

    public void setId(nds.core.types.Var4ByteId id_)
    {
        this.id_ = id_;
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Road)
        {
            final Road that = (Road)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    length_ == that.length_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = new nds.core.types.Var4ByteId(in);

        length_ = in.readVarUInt32();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = new nds.core.types.Var4ByteId(zserioContext.getId(), in);

        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(endBitPosition);
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(zserioContext.getId(), endBitPosition);
        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        id_.write(out);

        out.writeVarUInt32(length_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.write(zserioContext.getId(), out);

        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
    }

    private nds.core.types.Var4ByteId id_;
    private int length_;
}
