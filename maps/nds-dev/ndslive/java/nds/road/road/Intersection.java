/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.road;

public class Intersection implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new zserio.runtime.array.DeltaContext();
            zLevel_ = new zserio.runtime.array.DeltaContext();
            numRoads_ = new zserio.runtime.array.DeltaContext();
            position_ = new nds.core.geometry.Position2D.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getId()
        {
            return id_;
        }

        public zserio.runtime.array.DeltaContext getZLevel()
        {
            return zLevel_;
        }

        public zserio.runtime.array.DeltaContext getNumRoads()
        {
            return numRoads_;
        }

        public nds.core.geometry.Position2D.ZserioPackingContext getPosition()
        {
            return position_;
        }

        private zserio.runtime.array.DeltaContext id_;
        private zserio.runtime.array.DeltaContext zLevel_;
        private zserio.runtime.array.DeltaContext numRoads_;
        private nds.core.geometry.Position2D.ZserioPackingContext position_;
    };

    public Intersection(
            byte coordShift_)
    {
        this.coordShift_ = coordShift_;
    }

    public Intersection(zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(in);
    }

    public Intersection(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte coordShift_)
            throws java.io.IOException
    {
        this.coordShift_ = coordShift_;

        read(context, in);
    }

    public Intersection(
            byte coordShift_,
            int id_,
            boolean isArtificial_,
            byte zLevel_,
            short numRoads_,
            nds.core.geometry.Position2D position_,
            nds.road.reference.types.IntersectionRoadReference[] connectedRoads_)
    {
        this(coordShift_);

        setId(id_);
        setIsArtificial(isArtificial_);
        setZLevel(zLevel_);
        setNumRoads(numRoads_);
        setPosition(position_);
        setConnectedRoads(connectedRoads_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        zserioContext.getZLevel().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        zserioContext.getNumRoads().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
        position_.initPackingContext(zserioContext.getPosition());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(id_);
        endBitPosition += 1;
        endBitPosition += 7;
        endBitPosition += 8;
        endBitPosition += position_.bitSizeOf(endBitPosition);
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += connectedRoads_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        endBitPosition += 1;
        endBitPosition += zserioContext.getZLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        endBitPosition += zserioContext.getNumRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
        endBitPosition += position_.bitSizeOf(zserioContext.getPosition(), endBitPosition);
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition += connectedRoads_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getCoordShift()
    {
        return this.coordShift_;
    }

    public int getId()
    {
        return id_;
    }

    public void setId(int id_)
    {
        this.id_ = id_;
    }

    public boolean getIsArtificial()
    {
        return isArtificial_;
    }

    public void setIsArtificial(boolean isArtificial_)
    {
        this.isArtificial_ = isArtificial_;
    }

    public byte getZLevel()
    {
        return zLevel_;
    }

    public void setZLevel(byte zLevel_)
    {
        this.zLevel_ = zLevel_;
    }

    public short getNumRoads()
    {
        return numRoads_;
    }

    public void setNumRoads(short numRoads_)
    {
        this.numRoads_ = numRoads_;
    }

    public nds.core.geometry.Position2D getPosition()
    {
        return position_;
    }

    public void setPosition(nds.core.geometry.Position2D position_)
    {
        this.position_ = position_;
    }

    public nds.road.reference.types.IntersectionRoadReference[] getConnectedRoads()
    {
        return (connectedRoads_ == null) ? null : connectedRoads_.getRawArray();
    }

    public void setConnectedRoads(nds.road.reference.types.IntersectionRoadReference[] connectedRoads_)
    {
        this.connectedRoads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.IntersectionRoadReference.class, connectedRoads_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.IntersectionRoadReference>(new ZserioElementFactory_connectedRoads()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof Intersection)
        {
            final Intersection that = (Intersection)obj;

            return
                    this.coordShift_ == that.coordShift_ &&
                    id_ == that.id_ &&
                    isArtificial_ == that.isArtificial_ &&
                    zLevel_ == that.zLevel_ &&
                    numRoads_ == that.numRoads_ &&
                    ((position_ == null) ? that.position_ == null : position_.equals(that.position_)) &&
                    ((connectedRoads_ == null) ? that.connectedRoads_ == null : connectedRoads_.equals(that.connectedRoads_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getCoordShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isArtificial_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, zLevel_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRoads_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectedRoads_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = in.readVarUInt32();

        isArtificial_ = in.readBool();

        zLevel_ = (byte)in.readBits(7);

        numRoads_ = in.readUnsignedByte();

        position_ = new nds.core.geometry.Position2D(in, (byte)(getCoordShift()));

        in.alignTo(8);
        connectedRoads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.IntersectionRoadReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.IntersectionRoadReference>(new ZserioElementFactory_connectedRoads()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectedRoads_.read(in, (int)(getNumRoads()));

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        isArtificial_ = in.readBool();

        zLevel_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getZLevel().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)), in)).get();

        numRoads_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumRoads().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        position_ = new nds.core.geometry.Position2D(zserioContext.getPosition(), in, (byte)(getCoordShift()));

        in.alignTo(8);
        connectedRoads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.types.IntersectionRoadReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.types.IntersectionRoadReference>(new ZserioElementFactory_connectedRoads()),
                zserio.runtime.array.ArrayType.NORMAL);
        connectedRoads_.readPacked(in, (int)(getNumRoads()));

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(id_);
        endBitPosition += 1;
        endBitPosition += 7;
        endBitPosition += 8;
        endBitPosition = position_.initializeOffsets(endBitPosition);
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition = connectedRoads_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));
        endBitPosition += 1;
        endBitPosition += zserioContext.getZLevel().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));
        endBitPosition += zserioContext.getNumRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
        endBitPosition = position_.initializeOffsets(zserioContext.getPosition(), endBitPosition);
        endBitPosition = zserio.runtime.BitPositionUtil.alignTo(8, endBitPosition);
        endBitPosition = connectedRoads_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt32(id_);

        out.writeBool(isArtificial_);

        out.writeBits(zLevel_, 7);

        out.writeUnsignedByte(numRoads_);

        // check parameters
        if (position_.getShift() != (byte)(getCoordShift()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field Intersection.position: " +
                    position_.getShift() + " != " + (byte)(getCoordShift()) + "!");
        }
        position_.write(out);

        out.alignTo(8);
        if (connectedRoads_.size() != (int)(getNumRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Intersection.connectedRoads: " +
                    connectedRoads_.size() + " != " + (int)(getNumRoads()) + "!");
        }
        connectedRoads_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(id_));

        out.writeBool(isArtificial_);

        zserioContext.getZLevel().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(zLevel_));

        zserioContext.getNumRoads().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));

        position_.write(zserioContext.getPosition(), out);

        out.alignTo(8);
        if (connectedRoads_.size() != (int)(getNumRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field Intersection.connectedRoads: " +
                    connectedRoads_.size() + " != " + (int)(getNumRoads()) + "!");
        }
        connectedRoads_.writePacked(out);
    }

    private void checkConstraints()
    {
        if (!((getNumRoads() < 181) && (getNumRoads() > 0 || getIsArtificial())))
            throw new zserio.runtime.ConstraintError("Constraint violated at Intersection.numRoads!");
    }

    private final class ZserioElementFactory_connectedRoads implements zserio.runtime.array.PackableElementFactory<nds.road.reference.types.IntersectionRoadReference>
    {
        @Override
        public nds.road.reference.types.IntersectionRoadReference create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.reference.types.IntersectionRoadReference(in, (boolean)(getIsArtificial()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.reference.types.IntersectionRoadReference.ZserioPackingContext();
        }

        @Override
        public nds.road.reference.types.IntersectionRoadReference create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.reference.types.IntersectionRoadReference(context, in, (boolean)(getIsArtificial()));
        }
    }

    private final byte coordShift_;
    private int id_;
    private boolean isArtificial_;
    private byte zLevel_;
    private short numRoads_;
    private nds.core.geometry.Position2D position_;
    private zserio.runtime.array.Array connectedRoads_;
}
