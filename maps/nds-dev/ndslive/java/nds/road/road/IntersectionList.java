/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.road;

public class IntersectionList implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
    };

    public IntersectionList(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public IntersectionList(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public IntersectionList(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public IntersectionList(
            byte shift_,
            nds.road.road.Intersection[] intersections_)
    {
        this(shift_);

        setIntersections(intersections_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += intersections_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += intersections_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.road.road.Intersection[] getIntersections()
    {
        return (intersections_ == null) ? null : intersections_.getRawArray();
    }

    public void setIntersections(nds.road.road.Intersection[] intersections_)
    {
        this.intersections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.Intersection.class, intersections_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.Intersection>(new ZserioElementFactory_intersections()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IntersectionList)
        {
            final IntersectionList that = (IntersectionList)obj;

            return
                    this.shift_ == that.shift_ &&
                    ((intersections_ == null) ? that.intersections_ == null : intersections_.equals(that.intersections_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, intersections_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        intersections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.Intersection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.Intersection>(new ZserioElementFactory_intersections()),
                zserio.runtime.array.ArrayType.AUTO);
        intersections_.readPacked(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        intersections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.Intersection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.Intersection>(new ZserioElementFactory_intersections()),
                zserio.runtime.array.ArrayType.AUTO);
        intersections_.readPacked(in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = intersections_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = intersections_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        intersections_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        intersections_.writePacked(out);
    }

    private final class ZserioElementFactory_intersections implements zserio.runtime.array.PackableElementFactory<nds.road.road.Intersection>
    {
        @Override
        public nds.road.road.Intersection create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.road.Intersection(in, (byte)(getShift()));
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.road.Intersection.ZserioPackingContext();
        }

        @Override
        public nds.road.road.Intersection create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.road.Intersection(context, in, (byte)(getShift()));
        }
    }

    private final byte shift_;
    private zserio.runtime.array.Array intersections_;
}
