/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.layer;

public class MatchedRoadPathLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numSegments_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumSegments()
        {
            return numSegments_;
        }

        private zserio.runtime.array.DeltaContext numSegments_;
    };

    public MatchedRoadPathLayer()
    {
    }

    public MatchedRoadPathLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public MatchedRoadPathLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public MatchedRoadPathLayer(
            short numSegments_,
            nds.road.road.MatchedRoadSegment[] segments_,
            boolean pathEnds_)
    {
        setNumSegments(numSegments_);
        setSegments(segments_);
        setPathEnds(pathEnds_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumSegments().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSegments_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numSegments_);
        endBitPosition += segments_.bitSizeOf(endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSegments_));
        endBitPosition += segments_.bitSizeOfPacked(endBitPosition);
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumSegments()
    {
        return numSegments_;
    }

    public void setNumSegments(short numSegments_)
    {
        this.numSegments_ = numSegments_;
    }

    public nds.road.road.MatchedRoadSegment[] getSegments()
    {
        return (segments_ == null) ? null : segments_.getRawArray();
    }

    public void setSegments(nds.road.road.MatchedRoadSegment[] segments_)
    {
        this.segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.MatchedRoadSegment.class, segments_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.MatchedRoadSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public boolean getPathEnds()
    {
        return pathEnds_;
    }

    public void setPathEnds(boolean pathEnds_)
    {
        this.pathEnds_ = pathEnds_;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.FEATURE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof MatchedRoadPathLayer)
        {
            final MatchedRoadPathLayer that = (MatchedRoadPathLayer)obj;

            return
                    numSegments_ == that.numSegments_ &&
                    ((segments_ == null) ? that.segments_ == null : segments_.equals(that.segments_)) &&
                    pathEnds_ == that.pathEnds_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numSegments_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, segments_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, pathEnds_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numSegments_ = in.readVarUInt16();

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.MatchedRoadSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.MatchedRoadSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.read(in, (int)(getNumSegments()));

        pathEnds_ = in.readBool();

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numSegments_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumSegments().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        segments_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.road.MatchedRoadSegment.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.road.MatchedRoadSegment>(new ZserioElementFactory_segments()),
                zserio.runtime.array.ArrayType.NORMAL);
        segments_.readPacked(in, (int)(getNumSegments()));

        pathEnds_ = in.readBool();

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numSegments_);
        endBitPosition = segments_.initializeOffsets(endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumSegments().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSegments_));
        endBitPosition = segments_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeVarUInt16(numSegments_);

        if (segments_.size() != (int)(getNumSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field MatchedRoadPathLayer.segments: " +
                    segments_.size() + " != " + (int)(getNumSegments()) + "!");
        }
        segments_.write(out);

        out.writeBool(pathEnds_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        zserioContext.getNumSegments().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numSegments_));

        if (segments_.size() != (int)(getNumSegments()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field MatchedRoadPathLayer.segments: " +
                    segments_.size() + " != " + (int)(getNumSegments()) + "!");
        }
        segments_.writePacked(out);

        out.writeBool(pathEnds_);
    }

    private void checkConstraints()
    {
        if (!(getNumSegments() > 0))
            throw new zserio.runtime.ConstraintError("Constraint violated at MatchedRoadPathLayer.numSegments!");
    }

    private static final class ZserioElementFactory_segments implements zserio.runtime.array.PackableElementFactory<nds.road.road.MatchedRoadSegment>
    {
        @Override
        public nds.road.road.MatchedRoadSegment create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.road.MatchedRoadSegment(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.road.MatchedRoadSegment.ZserioPackingContext();
        }

        @Override
        public nds.road.road.MatchedRoadSegment create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.road.MatchedRoadSegment(context, in);
        }
    }

    private short numSegments_;
    private zserio.runtime.array.Array segments_;
    private boolean pathEnds_;
}
