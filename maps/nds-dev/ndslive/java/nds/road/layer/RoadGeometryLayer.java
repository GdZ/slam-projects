/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.layer;

public class RoadGeometryLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            roadShapes_ = new nds.road.instantiations.RoadShapesLayer.ZserioPackingContext();
        }

        public nds.road.instantiations.RoadShapesLayer.ZserioPackingContext getRoadShapes()
        {
            return roadShapes_;
        }

        private nds.road.instantiations.RoadShapesLayer.ZserioPackingContext roadShapes_;
    };

    public RoadGeometryLayer()
    {
    }

    public RoadGeometryLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadGeometryLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadGeometryLayer(
            nds.road.instantiations.RoadShapesLayer roadShapes_)
    {
        setRoadShapes(roadShapes_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        roadShapes_.initPackingContext(zserioContext.getRoadShapes());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += roadShapes_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += roadShapes_.bitSizeOf(zserioContext.getRoadShapes(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.road.instantiations.RoadShapesLayer getRoadShapes()
    {
        return roadShapes_;
    }

    public void setRoadShapes(nds.road.instantiations.RoadShapesLayer roadShapes_)
    {
        this.roadShapes_ = roadShapes_;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.GEOMETRY);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadGeometryLayer)
        {
            final RoadGeometryLayer that = (RoadGeometryLayer)obj;

            return
                    ((roadShapes_ == null) ? that.roadShapes_ == null : roadShapes_.equals(that.roadShapes_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadShapes_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        roadShapes_ = new nds.road.instantiations.RoadShapesLayer(in, nds.core.geometry.GeometryLayerType.LINE_2D, (boolean)(true), (boolean)(false));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        roadShapes_ = new nds.road.instantiations.RoadShapesLayer(zserioContext.getRoadShapes(), in, nds.core.geometry.GeometryLayerType.LINE_2D, (boolean)(true), (boolean)(false));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = roadShapes_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = roadShapes_.initializeOffsets(zserioContext.getRoadShapes(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        // check parameters
        if (roadShapes_.getType() != (nds.core.geometry.GeometryLayerType.LINE_2D))
        {
            throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field RoadGeometryLayer.roadShapes!");
        }
        if (roadShapes_.getHasIds() != (boolean)(true))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasIds for field RoadGeometryLayer.roadShapes: " +
                    roadShapes_.getHasIds() + " != " + (boolean)(true) + "!");
        }
        if (roadShapes_.getHasTypes() != (boolean)(false))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter hasTypes for field RoadGeometryLayer.roadShapes: " +
                    roadShapes_.getHasTypes() + " != " + (boolean)(false) + "!");
        }
        roadShapes_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        roadShapes_.write(zserioContext.getRoadShapes(), out);
    }

    private nds.road.instantiations.RoadShapesLayer roadShapes_;
}
