/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class TransitionReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            intersectionTransition_ = new nds.road.reference.types.IntersectionTransition.ZserioPackingContext();
            transitionPathReference_ = new nds.road.reference.types.TransitionPathReference.ZserioPackingContext();
            transitionGeoPathReference_ = new nds.road.reference.types.TransitionGeoPathReference.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.road.reference.types.IntersectionTransition.ZserioPackingContext getIntersectionTransition()
        {
            return intersectionTransition_;
        }

        public nds.road.reference.types.TransitionPathReference.ZserioPackingContext getTransitionPathReference()
        {
            return transitionPathReference_;
        }

        public nds.road.reference.types.TransitionGeoPathReference.ZserioPackingContext getTransitionGeoPathReference()
        {
            return transitionGeoPathReference_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private nds.road.reference.types.IntersectionTransition.ZserioPackingContext intersectionTransition_;
        private nds.road.reference.types.TransitionPathReference.ZserioPackingContext transitionPathReference_;
        private nds.road.reference.types.TransitionGeoPathReference.ZserioPackingContext transitionGeoPathReference_;
    };

    public TransitionReference()
    {
    }

    public TransitionReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TransitionReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TransitionReference(
            nds.road.reference.types.TransitionReferenceType type_,
            nds.road.reference.types.IntersectionTransition intersectionTransition_,
            nds.road.reference.types.TransitionPathReference transitionPathReference_,
            nds.road.reference.types.TransitionGeoPathReference transitionGeoPathReference_)
    {
        setType(type_);
        setIntersectionTransition(intersectionTransition_);
        setTransitionPathReference(transitionPathReference_);
        setTransitionGeoPathReference(transitionGeoPathReference_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        if (isIntersectionTransitionUsed())
        {
            intersectionTransition_.initPackingContext(zserioContext.getIntersectionTransition());
        }
        if (isTransitionPathReferenceUsed())
        {
            transitionPathReference_.initPackingContext(zserioContext.getTransitionPathReference());
        }
        if (isTransitionGeoPathReferenceUsed())
        {
            transitionGeoPathReference_.initPackingContext(zserioContext.getTransitionGeoPathReference());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isIntersectionTransitionUsed())
        {
            endBitPosition += intersectionTransition_.bitSizeOf(endBitPosition);
        }
        if (isTransitionPathReferenceUsed())
        {
            endBitPosition += transitionPathReference_.bitSizeOf(endBitPosition);
        }
        if (isTransitionGeoPathReferenceUsed())
        {
            endBitPosition += transitionGeoPathReference_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        if (isIntersectionTransitionUsed())
        {
            endBitPosition += intersectionTransition_.bitSizeOf(zserioContext.getIntersectionTransition(), endBitPosition);
        }
        if (isTransitionPathReferenceUsed())
        {
            endBitPosition += transitionPathReference_.bitSizeOf(zserioContext.getTransitionPathReference(), endBitPosition);
        }
        if (isTransitionGeoPathReferenceUsed())
        {
            endBitPosition += transitionGeoPathReference_.bitSizeOf(zserioContext.getTransitionGeoPathReference(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.road.reference.types.TransitionReferenceType getType()
    {
        return type_;
    }

    public void setType(nds.road.reference.types.TransitionReferenceType type_)
    {
        this.type_ = type_;
    }

    public nds.road.reference.types.IntersectionTransition getIntersectionTransition()
    {
        return intersectionTransition_;
    }

    public void setIntersectionTransition(nds.road.reference.types.IntersectionTransition intersectionTransition_)
    {
        this.intersectionTransition_ = intersectionTransition_;
    }

    public boolean isIntersectionTransitionUsed()
    {
        return (getType() == nds.road.reference.types.TransitionReferenceType.INTERSECTION || getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION);
    }

    public boolean isIntersectionTransitionSet()
    {
        return (intersectionTransition_ != null);
    }

    public void resetIntersectionTransition()
    {
        this.intersectionTransition_ = null;
    }

    public nds.road.reference.types.TransitionPathReference getTransitionPathReference()
    {
        return transitionPathReference_;
    }

    public void setTransitionPathReference(nds.road.reference.types.TransitionPathReference transitionPathReference_)
    {
        this.transitionPathReference_ = transitionPathReference_;
    }

    public boolean isTransitionPathReferenceUsed()
    {
        return (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_PATH);
    }

    public boolean isTransitionPathReferenceSet()
    {
        return (transitionPathReference_ != null);
    }

    public void resetTransitionPathReference()
    {
        this.transitionPathReference_ = null;
    }

    public nds.road.reference.types.TransitionGeoPathReference getTransitionGeoPathReference()
    {
        return transitionGeoPathReference_;
    }

    public void setTransitionGeoPathReference(nds.road.reference.types.TransitionGeoPathReference transitionGeoPathReference_)
    {
        this.transitionGeoPathReference_ = transitionGeoPathReference_;
    }

    public boolean isTransitionGeoPathReferenceUsed()
    {
        return (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_GEO_PATH);
    }

    public boolean isTransitionGeoPathReferenceSet()
    {
        return (transitionGeoPathReference_ != null);
    }

    public void resetTransitionGeoPathReference()
    {
        this.transitionGeoPathReference_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TransitionReference)
        {
            final TransitionReference that = (TransitionReference)obj;

            return
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((!isIntersectionTransitionUsed()) ? !that.isIntersectionTransitionUsed() :
                        ((intersectionTransition_ == null) ? that.intersectionTransition_ == null : intersectionTransition_.equals(that.intersectionTransition_))) &&
                    ((!isTransitionPathReferenceUsed()) ? !that.isTransitionPathReferenceUsed() :
                        ((transitionPathReference_ == null) ? that.transitionPathReference_ == null : transitionPathReference_.equals(that.transitionPathReference_))) &&
                    ((!isTransitionGeoPathReferenceUsed()) ? !that.isTransitionGeoPathReferenceUsed() :
                        ((transitionGeoPathReference_ == null) ? that.transitionGeoPathReference_ == null : transitionGeoPathReference_.equals(that.transitionGeoPathReference_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isIntersectionTransitionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, intersectionTransition_);
        if (isTransitionPathReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionPathReference_);
        if (isTransitionGeoPathReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionGeoPathReference_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.road.reference.types.TransitionReferenceType.readEnum(in);

        if (getType() == nds.road.reference.types.TransitionReferenceType.INTERSECTION || getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            intersectionTransition_ = new nds.road.reference.types.IntersectionTransition(in, getType());
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_PATH)
        {
            transitionPathReference_ = new nds.road.reference.types.TransitionPathReference(in);
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_GEO_PATH)
        {
            transitionGeoPathReference_ = new nds.road.reference.types.TransitionGeoPathReference(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.road.reference.types.TransitionReferenceType.readEnum(zserioContext.getType(), in);

        if (getType() == nds.road.reference.types.TransitionReferenceType.INTERSECTION || getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            intersectionTransition_ = new nds.road.reference.types.IntersectionTransition(zserioContext.getIntersectionTransition(), in, getType());
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_PATH)
        {
            transitionPathReference_ = new nds.road.reference.types.TransitionPathReference(zserioContext.getTransitionPathReference(), in);
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION_GEO_PATH)
        {
            transitionGeoPathReference_ = new nds.road.reference.types.TransitionGeoPathReference(zserioContext.getTransitionGeoPathReference(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isIntersectionTransitionUsed())
        {
            endBitPosition = intersectionTransition_.initializeOffsets(endBitPosition);
        }
        if (isTransitionPathReferenceUsed())
        {
            endBitPosition = transitionPathReference_.initializeOffsets(endBitPosition);
        }
        if (isTransitionGeoPathReferenceUsed())
        {
            endBitPosition = transitionGeoPathReference_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        if (isIntersectionTransitionUsed())
        {
            endBitPosition = intersectionTransition_.initializeOffsets(zserioContext.getIntersectionTransition(), endBitPosition);
        }
        if (isTransitionPathReferenceUsed())
        {
            endBitPosition = transitionPathReference_.initializeOffsets(zserioContext.getTransitionPathReference(), endBitPosition);
        }
        if (isTransitionGeoPathReferenceUsed())
        {
            endBitPosition = transitionGeoPathReference_.initializeOffsets(zserioContext.getTransitionGeoPathReference(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        if (isIntersectionTransitionUsed())
        {
            // check parameters
            if (intersectionTransition_.getType() != (getType()))
            {
                throw new zserio.runtime.ZserioError("Write: Inconsistent parameter type for field TransitionReference.intersectionTransition!");
            }
            intersectionTransition_.write(out);
        }

        if (isTransitionPathReferenceUsed())
        {
            transitionPathReference_.write(out);
        }

        if (isTransitionGeoPathReferenceUsed())
        {
            transitionGeoPathReference_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        if (isIntersectionTransitionUsed())
        {
            intersectionTransition_.write(zserioContext.getIntersectionTransition(), out);
        }

        if (isTransitionPathReferenceUsed())
        {
            transitionPathReference_.write(zserioContext.getTransitionPathReference(), out);
        }

        if (isTransitionGeoPathReferenceUsed())
        {
            transitionGeoPathReference_.write(zserioContext.getTransitionGeoPathReference(), out);
        }
    }

    private nds.road.reference.types.TransitionReferenceType type_;
    private nds.road.reference.types.IntersectionTransition intersectionTransition_;
    private nds.road.reference.types.TransitionPathReference transitionPathReference_;
    private nds.road.reference.types.TransitionGeoPathReference transitionGeoPathReference_;
}
