/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class ReferenceGeometryIntersectionZLevel implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            value_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getValue()
        {
            return value_;
        }

        private zserio.runtime.array.DeltaContext value_;
    };

    public ReferenceGeometryIntersectionZLevel()
    {
    }

    public ReferenceGeometryIntersectionZLevel(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ReferenceGeometryIntersectionZLevel(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ReferenceGeometryIntersectionZLevel(
            boolean hasValue_,
            java.lang.Byte value_)
    {
        setHasValue(hasValue_);
        setValue(value_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isValueUsed())
        {
            zserioContext.getValue().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(value_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isValueUsed())
        {
            endBitPosition += 7;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isValueUsed())
        {
            endBitPosition += zserioContext.getValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(value_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasValue()
    {
        return hasValue_;
    }

    public void setHasValue(boolean hasValue_)
    {
        this.hasValue_ = hasValue_;
    }

    public java.lang.Byte getValue()
    {
        return value_;
    }

    public void setValue(java.lang.Byte value_)
    {
        this.value_ = value_;
    }

    public boolean isValueUsed()
    {
        return (getHasValue());
    }

    public boolean isValueSet()
    {
        return (value_ != null);
    }

    public void resetValue()
    {
        this.value_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ReferenceGeometryIntersectionZLevel)
        {
            final ReferenceGeometryIntersectionZLevel that = (ReferenceGeometryIntersectionZLevel)obj;

            return
                    hasValue_ == that.hasValue_ &&
                    ((!isValueUsed()) ? !that.isValueUsed() :
                        ((value_ == null) ? that.value_ == null : value_.equals(that.value_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasValue_);
        if (isValueUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, value_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasValue_ = in.readBool();

        if (getHasValue())
        {
            value_ = (byte)in.readBits(7);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        hasValue_ = in.readBool();

        if (getHasValue())
        {
            value_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getValue().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isValueUsed())
        {
            endBitPosition += 7;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isValueUsed())
        {
            endBitPosition += zserioContext.getValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(value_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasValue_);

        if (isValueUsed())
        {
            out.writeBits(value_, 7);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(hasValue_);

        if (isValueUsed())
        {
            zserioContext.getValue().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(7)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(value_));
        }
    }

    private boolean hasValue_;
    private java.lang.Byte value_;
}
