/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class IntersectionTransition implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            intersectionId_ = new zserio.runtime.array.DeltaContext();
            numTransitions_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getIntersectionId()
        {
            return intersectionId_;
        }

        public zserio.runtime.array.DeltaContext getNumTransitions()
        {
            return numTransitions_;
        }

        private zserio.runtime.array.DeltaContext intersectionId_;
        private zserio.runtime.array.DeltaContext numTransitions_;
    };

    public IntersectionTransition(
            nds.road.reference.types.TransitionReferenceType type_)
    {
        this.type_ = type_;
    }

    public IntersectionTransition(zserio.runtime.io.BitStreamReader in,
            nds.road.reference.types.TransitionReferenceType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public IntersectionTransition(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.road.reference.types.TransitionReferenceType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public IntersectionTransition(
            nds.road.reference.types.TransitionReferenceType type_,
            int intersectionId_,
            java.lang.Integer numTransitions_,
            short[] transitionNumber_)
    {
        this(type_);

        setIntersectionId(intersectionId_);
        setNumTransitions(numTransitions_);
        setTransitionNumber(transitionNumber_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIntersectionId().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(intersectionId_));
        if (isNumTransitionsUsed())
        {
            zserioContext.getNumTransitions().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTransitions_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(intersectionId_);
        if (isNumTransitionsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTransitions_);
        }
        if (isTransitionNumberUsed())
        {
            endBitPosition += transitionNumber_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIntersectionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(intersectionId_));
        if (isNumTransitionsUsed())
        {
            endBitPosition += zserioContext.getNumTransitions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTransitions_));
        }
        if (isTransitionNumberUsed())
        {
            endBitPosition += transitionNumber_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.road.reference.types.TransitionReferenceType getType()
    {
        return this.type_;
    }

    public int getIntersectionId()
    {
        return intersectionId_;
    }

    public void setIntersectionId(int intersectionId_)
    {
        this.intersectionId_ = intersectionId_;
    }

    public java.lang.Integer getNumTransitions()
    {
        return numTransitions_;
    }

    public void setNumTransitions(java.lang.Integer numTransitions_)
    {
        this.numTransitions_ = numTransitions_;
    }

    public boolean isNumTransitionsUsed()
    {
        return (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION);
    }

    public boolean isNumTransitionsSet()
    {
        return (numTransitions_ != null);
    }

    public void resetNumTransitions()
    {
        this.numTransitions_ = null;
    }

    public short[] getTransitionNumber()
    {
        return (transitionNumber_ == null) ? null : transitionNumber_.getRawArray();
    }

    public void setTransitionNumber(short[] transitionNumber_)
    {
        if (transitionNumber_ == null)
        {
            this.transitionNumber_ = null;
        }
        else
        {
            this.transitionNumber_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(transitionNumber_),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isTransitionNumberUsed()
    {
        return (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION);
    }

    public boolean isTransitionNumberSet()
    {
        return (transitionNumber_ != null);
    }

    public void resetTransitionNumber()
    {
        this.transitionNumber_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof IntersectionTransition)
        {
            final IntersectionTransition that = (IntersectionTransition)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    intersectionId_ == that.intersectionId_ &&
                    ((!isNumTransitionsUsed()) ? !that.isNumTransitionsUsed() :
                        ((numTransitions_ == null) ? that.numTransitions_ == null : numTransitions_.equals(that.numTransitions_))) &&
                    ((!isTransitionNumberUsed()) ? !that.isTransitionNumberUsed() :
                        ((transitionNumber_ == null) ? that.transitionNumber_ == null : transitionNumber_.equals(that.transitionNumber_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, intersectionId_);
        if (isNumTransitionsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numTransitions_);
        if (isTransitionNumberUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionNumber_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        intersectionId_ = in.readVarUInt32();

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            numTransitions_ = in.readVarSize();
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            transitionNumber_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            transitionNumber_.read(in, (int)(getNumTransitions()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        intersectionId_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getIntersectionId().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            numTransitions_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumTransitions().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        if (getType() == nds.road.reference.types.TransitionReferenceType.TRANSITION)
        {
            transitionNumber_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ShortRawArray(),
                    new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    zserio.runtime.array.ArrayType.NORMAL);
            transitionNumber_.readPacked(in, (int)(getNumTransitions()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(intersectionId_);
        if (isNumTransitionsUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numTransitions_);
        }
        if (isTransitionNumberUsed())
        {
            endBitPosition = transitionNumber_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getIntersectionId().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(intersectionId_));
        if (isNumTransitionsUsed())
        {
            endBitPosition += zserioContext.getNumTransitions().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTransitions_));
        }
        if (isTransitionNumberUsed())
        {
            endBitPosition = transitionNumber_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(intersectionId_);

        if (isNumTransitionsUsed())
        {
            out.writeVarSize(numTransitions_);
        }

        if (isTransitionNumberUsed())
        {
            if (transitionNumber_.size() != (int)(getNumTransitions()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field IntersectionTransition.transitionNumber: " +
                        transitionNumber_.size() + " != " + (int)(getNumTransitions()) + "!");
            }
            transitionNumber_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getIntersectionId().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(intersectionId_));

        if (isNumTransitionsUsed())
        {
            zserioContext.getNumTransitions().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numTransitions_));
        }

        if (isTransitionNumberUsed())
        {
            if (transitionNumber_.size() != (int)(getNumTransitions()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field IntersectionTransition.transitionNumber: " +
                        transitionNumber_.size() + " != " + (int)(getNumTransitions()) + "!");
            }
            transitionNumber_.writePacked(out);
        }
    }

    private final nds.road.reference.types.TransitionReferenceType type_;
    private int intersectionId_;
    private java.lang.Integer numTransitions_;
    private zserio.runtime.array.Array transitionNumber_;
}
