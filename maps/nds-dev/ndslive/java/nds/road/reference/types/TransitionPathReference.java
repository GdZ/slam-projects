/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class TransitionPathReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numRoads_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumRoads()
        {
            return numRoads_;
        }

        private zserio.runtime.array.DeltaContext numRoads_;
    };

    public TransitionPathReference()
    {
    }

    public TransitionPathReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public TransitionPathReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public TransitionPathReference(
            short numRoads_,
            nds.core.types.Var4ByteDirectedReference[] roads_)
    {
        setNumRoads(numRoads_);
        setRoads(roads_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumRoads().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += roads_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
        endBitPosition += roads_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumRoads()
    {
        return numRoads_;
    }

    public void setNumRoads(short numRoads_)
    {
        this.numRoads_ = numRoads_;
    }

    public nds.core.types.Var4ByteDirectedReference[] getRoads()
    {
        return (roads_ == null) ? null : roads_.getRawArray();
    }

    public void setRoads(nds.core.types.Var4ByteDirectedReference[] roads_)
    {
        this.roads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteDirectedReference.class, roads_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteDirectedReference>(new ZserioElementFactory_roads()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof TransitionPathReference)
        {
            final TransitionPathReference that = (TransitionPathReference)obj;

            return
                    numRoads_ == that.numRoads_ &&
                    ((roads_ == null) ? that.roads_ == null : roads_.equals(that.roads_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRoads_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roads_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numRoads_ = in.readUnsignedByte();

        roads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteDirectedReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteDirectedReference>(new ZserioElementFactory_roads()),
                zserio.runtime.array.ArrayType.NORMAL);
        roads_.read(in, (int)(getNumRoads()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numRoads_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumRoads().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        roads_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.Var4ByteDirectedReference.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.Var4ByteDirectedReference>(new ZserioElementFactory_roads()),
                zserio.runtime.array.ArrayType.NORMAL);
        roads_.readPacked(in, (int)(getNumRoads()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = roads_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));
        endBitPosition = roads_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numRoads_);

        if (roads_.size() != (int)(getNumRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TransitionPathReference.roads: " +
                    roads_.size() + " != " + (int)(getNumRoads()) + "!");
        }
        roads_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumRoads().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numRoads_));

        if (roads_.size() != (int)(getNumRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field TransitionPathReference.roads: " +
                    roads_.size() + " != " + (int)(getNumRoads()) + "!");
        }
        roads_.writePacked(out);
    }

    private static final class ZserioElementFactory_roads implements zserio.runtime.array.PackableElementFactory<nds.core.types.Var4ByteDirectedReference>
    {
        @Override
        public nds.core.types.Var4ByteDirectedReference create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.Var4ByteDirectedReference(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
        }

        @Override
        public nds.core.types.Var4ByteDirectedReference create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.Var4ByteDirectedReference(context, in);
        }
    }

    private short numRoads_;
    private zserio.runtime.array.Array roads_;
}
