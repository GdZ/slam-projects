/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class RoadReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            directedRoadReference_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
            roadId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getDirectedRoadReference()
        {
            return directedRoadReference_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getRoadId()
        {
            return roadId_;
        }

        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext directedRoadReference_;
        private nds.core.types.Var4ByteId.ZserioPackingContext roadId_;
    };

    public RoadReference()
    {
    }

    public RoadReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadReference(
            boolean isDirected_,
            nds.core.types.Var4ByteDirectedReference directedRoadReference_,
            nds.core.types.Var4ByteId roadId_)
    {
        setIsDirected(isDirected_);
        setDirectedRoadReference(directedRoadReference_);
        setRoadId(roadId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        if (isDirectedRoadReferenceUsed())
        {
            directedRoadReference_.initPackingContext(zserioContext.getDirectedRoadReference());
        }
        if (isRoadIdUsed())
        {
            roadId_.initPackingContext(zserioContext.getRoadId());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedRoadReferenceUsed())
        {
            endBitPosition += directedRoadReference_.bitSizeOf(endBitPosition);
        }
        if (isRoadIdUsed())
        {
            endBitPosition += roadId_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedRoadReferenceUsed())
        {
            endBitPosition += directedRoadReference_.bitSizeOf(zserioContext.getDirectedRoadReference(), endBitPosition);
        }
        if (isRoadIdUsed())
        {
            endBitPosition += roadId_.bitSizeOf(zserioContext.getRoadId(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getIsDirected()
    {
        return isDirected_;
    }

    public void setIsDirected(boolean isDirected_)
    {
        this.isDirected_ = isDirected_;
    }

    public nds.core.types.Var4ByteDirectedReference getDirectedRoadReference()
    {
        return directedRoadReference_;
    }

    public void setDirectedRoadReference(nds.core.types.Var4ByteDirectedReference directedRoadReference_)
    {
        this.directedRoadReference_ = directedRoadReference_;
    }

    public boolean isDirectedRoadReferenceUsed()
    {
        return (getIsDirected());
    }

    public boolean isDirectedRoadReferenceSet()
    {
        return (directedRoadReference_ != null);
    }

    public void resetDirectedRoadReference()
    {
        this.directedRoadReference_ = null;
    }

    public nds.core.types.Var4ByteId getRoadId()
    {
        return roadId_;
    }

    public void setRoadId(nds.core.types.Var4ByteId roadId_)
    {
        this.roadId_ = roadId_;
    }

    public boolean isRoadIdUsed()
    {
        return (!getIsDirected());
    }

    public boolean isRoadIdSet()
    {
        return (roadId_ != null);
    }

    public void resetRoadId()
    {
        this.roadId_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadReference)
        {
            final RoadReference that = (RoadReference)obj;

            return
                    isDirected_ == that.isDirected_ &&
                    ((!isDirectedRoadReferenceUsed()) ? !that.isDirectedRoadReferenceUsed() :
                        ((directedRoadReference_ == null) ? that.directedRoadReference_ == null : directedRoadReference_.equals(that.directedRoadReference_))) &&
                    ((!isRoadIdUsed()) ? !that.isRoadIdUsed() :
                        ((roadId_ == null) ? that.roadId_ == null : roadId_.equals(that.roadId_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, isDirected_);
        if (isDirectedRoadReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, directedRoadReference_);
        if (isRoadIdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        isDirected_ = in.readBool();

        if (getIsDirected())
        {
            directedRoadReference_ = new nds.core.types.Var4ByteDirectedReference(in);
        }

        if (!getIsDirected())
        {
            roadId_ = new nds.core.types.Var4ByteId(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        isDirected_ = in.readBool();

        if (getIsDirected())
        {
            directedRoadReference_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getDirectedRoadReference(), in);
        }

        if (!getIsDirected())
        {
            roadId_ = new nds.core.types.Var4ByteId(zserioContext.getRoadId(), in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedRoadReferenceUsed())
        {
            endBitPosition = directedRoadReference_.initializeOffsets(endBitPosition);
        }
        if (isRoadIdUsed())
        {
            endBitPosition = roadId_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        if (isDirectedRoadReferenceUsed())
        {
            endBitPosition = directedRoadReference_.initializeOffsets(zserioContext.getDirectedRoadReference(), endBitPosition);
        }
        if (isRoadIdUsed())
        {
            endBitPosition = roadId_.initializeOffsets(zserioContext.getRoadId(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(isDirected_);

        if (isDirectedRoadReferenceUsed())
        {
            directedRoadReference_.write(out);
        }

        if (isRoadIdUsed())
        {
            roadId_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(isDirected_);

        if (isDirectedRoadReferenceUsed())
        {
            directedRoadReference_.write(zserioContext.getDirectedRoadReference(), out);
        }

        if (isRoadIdUsed())
        {
            roadId_.write(zserioContext.getRoadId(), out);
        }
    }

    private boolean isDirected_;
    private nds.core.types.Var4ByteDirectedReference directedRoadReference_;
    private nds.core.types.Var4ByteId roadId_;
}
