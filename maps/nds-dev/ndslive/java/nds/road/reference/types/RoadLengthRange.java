/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.types;

public class RoadLengthRange implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            length_ = new zserio.runtime.array.DeltaContext();
            range_ = new nds.core.types.Range.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getLength()
        {
            return length_;
        }

        public nds.core.types.Range.ZserioPackingContext getRange()
        {
            return range_;
        }

        private zserio.runtime.array.DeltaContext length_;
        private nds.core.types.Range.ZserioPackingContext range_;
    };

    public RoadLengthRange()
    {
    }

    public RoadLengthRange(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadLengthRange(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadLengthRange(
            int length_,
            nds.core.types.Range range_)
    {
        setLength(length_);
        setRange(range_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLength().init(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        range_.initPackingContext(zserioContext.getRange());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition += range_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition += range_.bitSizeOf(zserioContext.getRange(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public int getLength()
    {
        return length_;
    }

    public void setLength(int length_)
    {
        this.length_ = length_;
    }

    public nds.core.types.Range getRange()
    {
        return range_;
    }

    public void setRange(nds.core.types.Range range_)
    {
        this.range_ = range_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLengthRange)
        {
            final RoadLengthRange that = (RoadLengthRange)obj;

            return
                    length_ == that.length_ &&
                    ((range_ == null) ? that.range_ == null : range_.equals(that.range_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, length_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, range_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        length_ = in.readVarUInt32();

        range_ = new nds.core.types.Range(in, (int)(getLength()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        length_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getLength().read(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), in)).get();

        range_ = new nds.core.types.Range(zserioContext.getRange(), in, (int)(getLength()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt32(length_);
        endBitPosition = range_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getLength().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));
        endBitPosition = range_.initializeOffsets(zserioContext.getRange(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt32(length_);

        // check parameters
        if (range_.getLength() != (int)(getLength()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter length for field RoadLengthRange.range: " +
                    range_.getLength() + " != " + (int)(getLength()) + "!");
        }
        range_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getLength().write(new zserio.runtime.array.ArrayTraits.VarUInt32ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(length_));

        range_.write(zserioContext.getRange(), out);
    }

    private int length_;
    private nds.core.types.Range range_;
}
