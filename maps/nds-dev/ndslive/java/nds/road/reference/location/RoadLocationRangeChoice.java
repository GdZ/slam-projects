/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.location;

public class RoadLocationRangeChoice implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            range_ = new nds.core.location.RoadLocationIdRange.ZserioPackingContext();
        }

        public nds.core.location.RoadLocationIdRange.ZserioPackingContext getRange()
        {
            return range_;
        }

        private nds.core.location.RoadLocationIdRange.ZserioPackingContext range_;
    };

    public RoadLocationRangeChoice(
            nds.road.reference.location.RoadLocationRangeValidityType type_)
    {
        this.type_ = type_;
    }

    public RoadLocationRangeChoice(zserio.runtime.io.BitStreamReader in,
            nds.road.reference.location.RoadLocationRangeValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RoadLocationRangeChoice(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.road.reference.location.RoadLocationRangeValidityType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case COMPLETE:
            return UNDEFINED_CHOICE;
        case RANGE:
            return CHOICE_range;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            getRange().initPackingContext(zserioContext.getRange());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            endBitPosition += getRange().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            endBitPosition += getRange().bitSizeOf(zserioContext.getRange(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.road.reference.location.RoadLocationRangeValidityType getType()
    {
        return this.type_;
    }

    public nds.core.location.RoadLocationIdRange getRange()
    {
        return (nds.core.location.RoadLocationIdRange)objectChoice;
    }

    public void setRange(nds.core.location.RoadLocationIdRange range_)
    {
        objectChoice = range_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationRangeChoice)
        {
            final RoadLocationRangeChoice that = (RoadLocationRangeChoice)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case COMPLETE:
                // empty
                break;
            case RANGE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.location.RoadLocationIdRange)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            objectChoice = new nds.core.location.RoadLocationIdRange(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            objectChoice = new nds.core.location.RoadLocationIdRange(zserioContext.getRange(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            {
                endBitPosition = getRange().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            {
                endBitPosition = getRange().initializeOffsets(zserioContext.getRange(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            getRange().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case COMPLETE:
            // empty
            break;
        case RANGE:
            getRange().write(zserioContext.getRange(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoadLocationRangeChoice: " + getType() + "!");
        }
    }

    public static final int CHOICE_range = 0;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.road.reference.location.RoadLocationRangeValidityType type_;
    private java.lang.Object objectChoice;
}
