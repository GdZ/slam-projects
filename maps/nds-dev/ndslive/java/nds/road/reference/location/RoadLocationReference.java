/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.location;

public class RoadLocationReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            direction_ = new zserio.runtime.array.DeltaContext();
            locationId_ = new nds.core.location.RoadLocationId.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getDirection()
        {
            return direction_;
        }

        public nds.core.location.RoadLocationId.ZserioPackingContext getLocationId()
        {
            return locationId_;
        }

        private zserio.runtime.array.DeltaContext direction_;
        private nds.core.location.RoadLocationId.ZserioPackingContext locationId_;
    };

    public RoadLocationReference()
    {
    }

    public RoadLocationReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadLocationReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadLocationReference(
            nds.core.types.Direction direction_,
            nds.core.location.RoadLocationId locationId_)
    {
        setDirection(direction_);
        setLocationId(locationId_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        direction_.initPackingContext(zserioContext.getDirection());
        locationId_.initPackingContext(zserioContext.getLocationId());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += direction_.bitSizeOf(endBitPosition);
        endBitPosition += locationId_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += direction_.bitSizeOf(zserioContext.getDirection(), endBitPosition);
        endBitPosition += locationId_.bitSizeOf(zserioContext.getLocationId(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Direction getDirection()
    {
        return direction_;
    }

    public void setDirection(nds.core.types.Direction direction_)
    {
        this.direction_ = direction_;
    }

    public nds.core.location.RoadLocationId getLocationId()
    {
        return locationId_;
    }

    public void setLocationId(nds.core.location.RoadLocationId locationId_)
    {
        this.locationId_ = locationId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationReference)
        {
            final RoadLocationReference that = (RoadLocationReference)obj;

            return
                    ((direction_ == null) ? that.direction_ == null : direction_.getValue() == that.direction_.getValue()) &&
                    ((locationId_ == null) ? that.locationId_ == null : locationId_.equals(that.locationId_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, direction_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, locationId_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        direction_ = nds.core.types.Direction.readEnum(in);

        locationId_ = new nds.core.location.RoadLocationId(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        direction_ = nds.core.types.Direction.readEnum(zserioContext.getDirection(), in);

        locationId_ = new nds.core.location.RoadLocationId(zserioContext.getLocationId(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += direction_.bitSizeOf(endBitPosition);
        endBitPosition = locationId_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = direction_.initializeOffsets(zserioContext.getDirection(), endBitPosition);
        endBitPosition = locationId_.initializeOffsets(zserioContext.getLocationId(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        direction_.write(out);

        locationId_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        direction_.write(zserioContext.getDirection(), out);

        locationId_.write(zserioContext.getLocationId(), out);
    }

    private nds.core.types.Direction direction_;
    private nds.core.location.RoadLocationId locationId_;
}
