/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.road.reference.location;

public class RoadLocationRangeValidity implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            type_ = new zserio.runtime.array.DeltaContext();
            numRanges_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public zserio.runtime.array.DeltaContext getNumRanges()
        {
            return numRanges_;
        }

        private zserio.runtime.array.DeltaContext type_;
        private zserio.runtime.array.DeltaContext numRanges_;
    };

    public RoadLocationRangeValidity(
            byte shift_)
    {
        this.shift_ = shift_;
    }

    public RoadLocationRangeValidity(zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(in);
    }

    public RoadLocationRangeValidity(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            byte shift_)
            throws java.io.IOException
    {
        this.shift_ = shift_;

        read(context, in);
    }

    public RoadLocationRangeValidity(
            byte shift_,
            nds.road.reference.location.RoadLocationRangeValidityType type_,
            java.lang.Integer numRanges_,
            nds.road.reference.location.RoadLocationRangeChoice[] ranges_)
    {
        this(shift_);

        setType(type_);
        setNumRanges(numRanges_);
        setRanges(ranges_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.initPackingContext(zserioContext.getType());
        if (isNumRangesUsed())
        {
            zserioContext.getNumRanges().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numRanges_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isNumRangesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRanges_);
        }
        if (isRangesUsed())
        {
            endBitPosition += ranges_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        if (isNumRangesUsed())
        {
            endBitPosition += zserioContext.getNumRanges().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numRanges_));
        }
        if (isRangesUsed())
        {
            endBitPosition += ranges_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return this.shift_;
    }

    public nds.road.reference.location.RoadLocationRangeValidityType getType()
    {
        return type_;
    }

    public void setType(nds.road.reference.location.RoadLocationRangeValidityType type_)
    {
        this.type_ = type_;
    }

    public java.lang.Integer getNumRanges()
    {
        return numRanges_;
    }

    public void setNumRanges(java.lang.Integer numRanges_)
    {
        this.numRanges_ = numRanges_;
    }

    public boolean isNumRangesUsed()
    {
        return (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE);
    }

    public boolean isNumRangesSet()
    {
        return (numRanges_ != null);
    }

    public void resetNumRanges()
    {
        this.numRanges_ = null;
    }

    public nds.road.reference.location.RoadLocationRangeChoice[] getRanges()
    {
        return (ranges_ == null) ? null : ranges_.getRawArray();
    }

    public void setRanges(nds.road.reference.location.RoadLocationRangeChoice[] ranges_)
    {
        if (ranges_ == null)
        {
            this.ranges_ = null;
        }
        else
        {
            this.ranges_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.location.RoadLocationRangeChoice.class, ranges_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.location.RoadLocationRangeChoice>(new ZserioElementFactory_ranges()),
                    zserio.runtime.array.ArrayType.NORMAL);
        }
    }

    public boolean isRangesUsed()
    {
        return (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE);
    }

    public boolean isRangesSet()
    {
        return (ranges_ != null);
    }

    public void resetRanges()
    {
        this.ranges_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadLocationRangeValidity)
        {
            final RoadLocationRangeValidity that = (RoadLocationRangeValidity)obj;

            return
                    this.shift_ == that.shift_ &&
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    ((!isNumRangesUsed()) ? !that.isNumRangesUsed() :
                        ((numRanges_ == null) ? that.numRanges_ == null : numRanges_.equals(that.numRanges_))) &&
                    ((!isRangesUsed()) ? !that.isRangesUsed() :
                        ((ranges_ == null) ? that.ranges_ == null : ranges_.equals(that.ranges_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getShift());
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        if (isNumRangesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, numRanges_);
        if (isRangesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, ranges_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        type_ = nds.road.reference.location.RoadLocationRangeValidityType.readEnum(in);

        if (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE)
        {
            numRanges_ = in.readVarSize();
        }

        if (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE)
        {
            ranges_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.location.RoadLocationRangeChoice.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.location.RoadLocationRangeChoice>(new ZserioElementFactory_ranges()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ranges_.read(in, (int)(getNumRanges()));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_ = nds.road.reference.location.RoadLocationRangeValidityType.readEnum(zserioContext.getType(), in);

        if (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE)
        {
            numRanges_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getNumRanges().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        if (getType() != nds.road.reference.location.RoadLocationRangeValidityType.COMPLETE)
        {
            ranges_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.road.reference.location.RoadLocationRangeChoice.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.road.reference.location.RoadLocationRangeChoice>(new ZserioElementFactory_ranges()),
                    zserio.runtime.array.ArrayType.NORMAL);
            ranges_.readPacked(in, (int)(getNumRanges()));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += type_.bitSizeOf(endBitPosition);
        if (isNumRangesUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(numRanges_);
        }
        if (isRangesUsed())
        {
            endBitPosition = ranges_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        if (isNumRangesUsed())
        {
            endBitPosition += zserioContext.getNumRanges().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numRanges_));
        }
        if (isRangesUsed())
        {
            endBitPosition = ranges_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        type_.write(out);

        if (isNumRangesUsed())
        {
            out.writeVarSize(numRanges_);
        }

        if (isRangesUsed())
        {
            if (ranges_.size() != (int)(getNumRanges()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field RoadLocationRangeValidity.ranges: " +
                        ranges_.size() + " != " + (int)(getNumRanges()) + "!");
            }
            ranges_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        type_.write(zserioContext.getType(), out);

        if (isNumRangesUsed())
        {
            zserioContext.getNumRanges().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(numRanges_));
        }

        if (isRangesUsed())
        {
            if (ranges_.size() != (int)(getNumRanges()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong array length for field RoadLocationRangeValidity.ranges: " +
                        ranges_.size() + " != " + (int)(getNumRanges()) + "!");
            }
            ranges_.writePacked(out);
        }
    }

    private final class ZserioElementFactory_ranges implements zserio.runtime.array.PackableElementFactory<nds.road.reference.location.RoadLocationRangeChoice>
    {
        @Override
        public nds.road.reference.location.RoadLocationRangeChoice create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.road.reference.location.RoadLocationRangeChoice(in, getType());
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.road.reference.location.RoadLocationRangeChoice.ZserioPackingContext();
        }

        @Override
        public nds.road.reference.location.RoadLocationRangeChoice create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.road.reference.location.RoadLocationRangeChoice(context, in, getType());
        }
    }

    private final byte shift_;
    private nds.road.reference.location.RoadLocationRangeValidityType type_;
    private java.lang.Integer numRanges_;
    private zserio.runtime.array.Array ranges_;
}
