/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.signs.warning;

public enum SupplementaryWarningSign implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    LEFT_TURN((short)0),
    RIGHT_TURN((short)1),
    RIGHT((short)2),
    LEFT((short)3),
    FOR_DISTANCE((short)4),
    IN_DISTANCE((short)5),
    TIME_RANGE((short)6),
    ATTENTION((short)7),
    ALL_WAY_STOP((short)8);

    private SupplementaryWarningSign(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static SupplementaryWarningSign readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static SupplementaryWarningSign readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static SupplementaryWarningSign toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return LEFT_TURN;
            case (short)1:
                return RIGHT_TURN;
            case (short)2:
                return RIGHT;
            case (short)3:
                return LEFT;
            case (short)4:
                return FOR_DISTANCE;
            case (short)5:
                return IN_DISTANCE;
            case (short)6:
                return TIME_RANGE;
            case (short)7:
                return ATTENTION;
            case (short)8:
                return ALL_WAY_STOP;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration SupplementaryWarningSign: " + value + "!");
        }
    }

    public static SupplementaryWarningSign toEnum(java.lang.String itemName)
    {
        if (itemName.equals("LEFT_TURN"))
            return LEFT_TURN;
        if (itemName.equals("RIGHT_TURN"))
            return RIGHT_TURN;
        if (itemName.equals("RIGHT"))
            return RIGHT;
        if (itemName.equals("LEFT"))
            return LEFT;
        if (itemName.equals("FOR_DISTANCE"))
            return FOR_DISTANCE;
        if (itemName.equals("IN_DISTANCE"))
            return IN_DISTANCE;
        if (itemName.equals("TIME_RANGE"))
            return TIME_RANGE;
        if (itemName.equals("ATTENTION"))
            return ATTENTION;
        if (itemName.equals("ALL_WAY_STOP"))
            return ALL_WAY_STOP;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration SupplementaryWarningSign!");
    }

    private short value;
}
