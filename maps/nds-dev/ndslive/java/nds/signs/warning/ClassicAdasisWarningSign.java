/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.signs.warning;

public enum ClassicAdasisWarningSign implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    GENERAL_HAZARD((short)0),
    PASS_LEFT_OR_RIGHT_OF_OBSTACLE((short)1),
    PASS_LEFT_OF_OBSTACLE((short)2),
    PASS_RIGHT_OF_OBSTACLE((short)3),
    CATTLE((short)4),
    ANIMALS((short)5),
    ROAD_WORKS((short)6),
    LIVING_STREET_ENTRY((short)7),
    LIVING_STREET_EXIT((short)8),
    CURVE_RIGHT((short)9),
    CURVE_LEFT((short)10),
    TRUCK_ROLLOVER((short)11),
    FOG_AREA((short)12),
    CURVE_RIGHT_THEN_LEFT((short)13),
    CURVE_LEFT_THEN_RIGHT((short)14),
    TIRE_CHAINS_MANDATORY((short)15),
    HIJACKING_HOTSPOT((short)16),
    CURVY_ROAD((short)17),
    REVERSE_BENDS((short)18),
    ROUNDABOUT_AHEAD((short)19),
    NO_OVERTAKING_FOR_TRUCKS((short)20),
    NO_OVERTAKING_FOR_TRUCKS_END((short)21),
    DANGEROUS_INTERSECTION((short)22),
    OVERPASS_AHEAD((short)23),
    TUNNEL((short)24),
    FERRY_TERMINAL((short)25),
    NARROW_BRIDGE((short)26),
    NO_IDLING((short)27),
    HUMPBACK_BRIDGE((short)28),
    EMBANKMENT_ON_THE_RIGHT((short)29),
    EMBANKMENT_ON_THE_LEFT((short)30),
    LIGHT_SIGNALS((short)31),
    YIELD((short)32),
    STOP((short)33),
    PRIORITY_ROAD((short)34),
    INTERSECTION((short)35),
    CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD((short)36),
    CROSSING_WITH_PRIORITY_TO_THE_RIGHT((short)37),
    BRANCH_TO_THE_RIGHT((short)38),
    BRANCH_TO_THE_LEFT((short)39),
    CARRIAGEWAY_NARROWS((short)40),
    CARRIAGEWAY_NARROWS_RIGHT((short)41),
    CARRIAGEWAY_NARROWS_LEFT((short)42),
    LANE_MERGE_FROM_RIGHT((short)43),
    LANE_MERGE_FROM_LEFT((short)44),
    LANE_MERGE_CENTER((short)45),
    NO_OVERTAKING((short)46),
    NO_OVERTAKING_END((short)47),
    PROTECTED_PASSING_END((short)48),
    PROTECTED_PASSING((short)49),
    PEDESTRIANS((short)50),
    PEDESTRIAN_CROSSING((short)51),
    CHILDREN((short)52),
    SCHOOL_ZONE((short)53),
    CYCLISTS((short)54),
    TWO_WAY_TRAFFIC((short)55),
    RAILROAD_CROSSING_WITH_GATES((short)56),
    RAILROAD_CROSSING_WITHOUT_GATES((short)57),
    RAILROAD_CROSSING((short)58),
    TRAMWAY_CROSSING((short)59),
    FALLING_ROCKS((short)60),
    FALLING_ROCKS_ON_THE_LEFT((short)61),
    FALLING_ROCKS_ON_THE_RIGHT((short)62),
    STEEP_DROP_ON_LEFT((short)63),
    STEEP_DROP_ON_RIGHT((short)64),
    SLIPPERY_ROAD((short)66),
    STEEP_INCLINE((short)67),
    STEEP_DECLINE((short)68),
    UNEVEN_ROAD((short)69),
    BUMP((short)70),
    DIP((short)71),
    ROAD_FLOODS((short)72),
    ICY_ROAD((short)73),
    WIND((short)74),
    TRAFFIC_CONGESTION((short)75),
    HIGH_ACCIDENT_AREA((short)76),
    CITY_ENTRY((short)77),
    AUDIBLE_WARNING((short)78),
    END_OF_ALL_RESTRICTIONS((short)79),
    PRIORITY_OVER_ONCOMING((short)81),
    YIELD_TO_ONCOMING((short)82),
    CITY_EXIT((short)83),
    VILLAGE_AHEAD((short)84),
    SPEED_CAMERA((short)85),
    TRAFFIC_ENFORCEMENT_CAMERA((short)86),
    SPEED_LIMIT((short)87),
    SPEED_LIMIT_END((short)88),
    MOVABLE_BRIDGE((short)89),
    SLOW_DOWN((short)90),
    INTERSECTION_T_RIGHT((short)91),
    INTERSECTION_T_LEFT((short)92),
    INTERSECTION_T_LEFT_RIGHT((short)93),
    INTERSECTION_Y((short)94),
    PRIORITY_ROAD_END((short)95),
    USE_LOW_GEAR((short)96),
    NO_COMPRESSION_BRAKING((short)97),
    WAITING_LINE((short)98),
    DONT_STOP_ZONE((short)99),
    LANE_USED_IN_BOTH_DIRECTIONS((short)100),
    HONKING_PROHIBITED((short)101),
    FASTEN_SEAT_BELT((short)102),
    DEAD_END((short)103),
    ADVISORY_SPEED_LIMIT((short)104),
    SPEED_LIMIT_NIGHT((short)105),
    MINIMUM_SPEED((short)106),
    VARIABLE_SPEED_LIMIT((short)107),
    VARIABLE((short)108),
    UNPROTECTED_LEFT_TURN((short)109),
    USE_LOW_GEAR_END((short)110),
    NO_COMPRESSION_BRAKING_END((short)111),
    DOUBLE_HAIRPIN_CURVE((short)112),
    TRIPLE_HAIRPIN_CURVE((short)113),
    EMBANKMENT((short)114),
    HILL((short)115),
    PROTECTED_PASSING_LEFT((short)116),
    PROTECTED_PASSING_RIGHT((short)117),
    RISK_OF_GROUNDING((short)118),
    CURVY_ROAD_LEFT((short)119),
    CURVY_ROAD_RIGHT((short)120),
    ADVISORY_SPEED_LIMIT_END((short)122),
    MOTORWAY((short)123),
    MOTORWAY_END((short)124),
    ONEWAY((short)125),
    BICYCLE_PATH((short)126),
    BICYCLE_PATH_END((short)127),
    HEIGHT_RESTRICTION((short)128),
    LENGTH_RESTRICTION((short)129),
    WIDTH_RESTRICTION((short)130),
    WEIGHT_RESTRICTION((short)131),
    PASSING_RESTRICTION((short)132),
    TURN_RESTRICTION((short)133),
    CARS_PROHIBITED((short)134),
    VEHICLES_PROHIBITED((short)135),
    PEDESTRIANS_PROHIBITED((short)136),
    PEDESTRIAN_ZONE((short)137),
    PEDESTRIAN_ZONE_END((short)138),
    DO_NOT_ENTER((short)139),
    TRUCK_SPEED_LIMIT((short)140),
    TRUCK_SPEED_LIMIT_END((short)141),
    MINIMUM_SPEED_END((short)142),
    HAMLET_ENTRY((short)143),
    HAMLET_EXIT((short)144),
    MOTOR_VEHICLE_ROAD((short)145),
    MOTOR_VEHICLE_ROAD_END((short)146),
    PEDESTRIAN_PATH((short)147),
    PEDESTRIAN_PATH_END((short)148),
    GOOD_LUCK((short)255);

    private ClassicAdasisWarningSign(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 8;
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static ClassicAdasisWarningSign readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readUnsignedByte());
    }

    public static ClassicAdasisWarningSign readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits(8), in)).get());
    }

    public static ClassicAdasisWarningSign toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return GENERAL_HAZARD;
            case (short)1:
                return PASS_LEFT_OR_RIGHT_OF_OBSTACLE;
            case (short)2:
                return PASS_LEFT_OF_OBSTACLE;
            case (short)3:
                return PASS_RIGHT_OF_OBSTACLE;
            case (short)4:
                return CATTLE;
            case (short)5:
                return ANIMALS;
            case (short)6:
                return ROAD_WORKS;
            case (short)7:
                return LIVING_STREET_ENTRY;
            case (short)8:
                return LIVING_STREET_EXIT;
            case (short)9:
                return CURVE_RIGHT;
            case (short)10:
                return CURVE_LEFT;
            case (short)11:
                return TRUCK_ROLLOVER;
            case (short)12:
                return FOG_AREA;
            case (short)13:
                return CURVE_RIGHT_THEN_LEFT;
            case (short)14:
                return CURVE_LEFT_THEN_RIGHT;
            case (short)15:
                return TIRE_CHAINS_MANDATORY;
            case (short)16:
                return HIJACKING_HOTSPOT;
            case (short)17:
                return CURVY_ROAD;
            case (short)18:
                return REVERSE_BENDS;
            case (short)19:
                return ROUNDABOUT_AHEAD;
            case (short)20:
                return NO_OVERTAKING_FOR_TRUCKS;
            case (short)21:
                return NO_OVERTAKING_FOR_TRUCKS_END;
            case (short)22:
                return DANGEROUS_INTERSECTION;
            case (short)23:
                return OVERPASS_AHEAD;
            case (short)24:
                return TUNNEL;
            case (short)25:
                return FERRY_TERMINAL;
            case (short)26:
                return NARROW_BRIDGE;
            case (short)27:
                return NO_IDLING;
            case (short)28:
                return HUMPBACK_BRIDGE;
            case (short)29:
                return EMBANKMENT_ON_THE_RIGHT;
            case (short)30:
                return EMBANKMENT_ON_THE_LEFT;
            case (short)31:
                return LIGHT_SIGNALS;
            case (short)32:
                return YIELD;
            case (short)33:
                return STOP;
            case (short)34:
                return PRIORITY_ROAD;
            case (short)35:
                return INTERSECTION;
            case (short)36:
                return CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD;
            case (short)37:
                return CROSSING_WITH_PRIORITY_TO_THE_RIGHT;
            case (short)38:
                return BRANCH_TO_THE_RIGHT;
            case (short)39:
                return BRANCH_TO_THE_LEFT;
            case (short)40:
                return CARRIAGEWAY_NARROWS;
            case (short)41:
                return CARRIAGEWAY_NARROWS_RIGHT;
            case (short)42:
                return CARRIAGEWAY_NARROWS_LEFT;
            case (short)43:
                return LANE_MERGE_FROM_RIGHT;
            case (short)44:
                return LANE_MERGE_FROM_LEFT;
            case (short)45:
                return LANE_MERGE_CENTER;
            case (short)46:
                return NO_OVERTAKING;
            case (short)47:
                return NO_OVERTAKING_END;
            case (short)48:
                return PROTECTED_PASSING_END;
            case (short)49:
                return PROTECTED_PASSING;
            case (short)50:
                return PEDESTRIANS;
            case (short)51:
                return PEDESTRIAN_CROSSING;
            case (short)52:
                return CHILDREN;
            case (short)53:
                return SCHOOL_ZONE;
            case (short)54:
                return CYCLISTS;
            case (short)55:
                return TWO_WAY_TRAFFIC;
            case (short)56:
                return RAILROAD_CROSSING_WITH_GATES;
            case (short)57:
                return RAILROAD_CROSSING_WITHOUT_GATES;
            case (short)58:
                return RAILROAD_CROSSING;
            case (short)59:
                return TRAMWAY_CROSSING;
            case (short)60:
                return FALLING_ROCKS;
            case (short)61:
                return FALLING_ROCKS_ON_THE_LEFT;
            case (short)62:
                return FALLING_ROCKS_ON_THE_RIGHT;
            case (short)63:
                return STEEP_DROP_ON_LEFT;
            case (short)64:
                return STEEP_DROP_ON_RIGHT;
            case (short)66:
                return SLIPPERY_ROAD;
            case (short)67:
                return STEEP_INCLINE;
            case (short)68:
                return STEEP_DECLINE;
            case (short)69:
                return UNEVEN_ROAD;
            case (short)70:
                return BUMP;
            case (short)71:
                return DIP;
            case (short)72:
                return ROAD_FLOODS;
            case (short)73:
                return ICY_ROAD;
            case (short)74:
                return WIND;
            case (short)75:
                return TRAFFIC_CONGESTION;
            case (short)76:
                return HIGH_ACCIDENT_AREA;
            case (short)77:
                return CITY_ENTRY;
            case (short)78:
                return AUDIBLE_WARNING;
            case (short)79:
                return END_OF_ALL_RESTRICTIONS;
            case (short)81:
                return PRIORITY_OVER_ONCOMING;
            case (short)82:
                return YIELD_TO_ONCOMING;
            case (short)83:
                return CITY_EXIT;
            case (short)84:
                return VILLAGE_AHEAD;
            case (short)85:
                return SPEED_CAMERA;
            case (short)86:
                return TRAFFIC_ENFORCEMENT_CAMERA;
            case (short)87:
                return SPEED_LIMIT;
            case (short)88:
                return SPEED_LIMIT_END;
            case (short)89:
                return MOVABLE_BRIDGE;
            case (short)90:
                return SLOW_DOWN;
            case (short)91:
                return INTERSECTION_T_RIGHT;
            case (short)92:
                return INTERSECTION_T_LEFT;
            case (short)93:
                return INTERSECTION_T_LEFT_RIGHT;
            case (short)94:
                return INTERSECTION_Y;
            case (short)95:
                return PRIORITY_ROAD_END;
            case (short)96:
                return USE_LOW_GEAR;
            case (short)97:
                return NO_COMPRESSION_BRAKING;
            case (short)98:
                return WAITING_LINE;
            case (short)99:
                return DONT_STOP_ZONE;
            case (short)100:
                return LANE_USED_IN_BOTH_DIRECTIONS;
            case (short)101:
                return HONKING_PROHIBITED;
            case (short)102:
                return FASTEN_SEAT_BELT;
            case (short)103:
                return DEAD_END;
            case (short)104:
                return ADVISORY_SPEED_LIMIT;
            case (short)105:
                return SPEED_LIMIT_NIGHT;
            case (short)106:
                return MINIMUM_SPEED;
            case (short)107:
                return VARIABLE_SPEED_LIMIT;
            case (short)108:
                return VARIABLE;
            case (short)109:
                return UNPROTECTED_LEFT_TURN;
            case (short)110:
                return USE_LOW_GEAR_END;
            case (short)111:
                return NO_COMPRESSION_BRAKING_END;
            case (short)112:
                return DOUBLE_HAIRPIN_CURVE;
            case (short)113:
                return TRIPLE_HAIRPIN_CURVE;
            case (short)114:
                return EMBANKMENT;
            case (short)115:
                return HILL;
            case (short)116:
                return PROTECTED_PASSING_LEFT;
            case (short)117:
                return PROTECTED_PASSING_RIGHT;
            case (short)118:
                return RISK_OF_GROUNDING;
            case (short)119:
                return CURVY_ROAD_LEFT;
            case (short)120:
                return CURVY_ROAD_RIGHT;
            case (short)122:
                return ADVISORY_SPEED_LIMIT_END;
            case (short)123:
                return MOTORWAY;
            case (short)124:
                return MOTORWAY_END;
            case (short)125:
                return ONEWAY;
            case (short)126:
                return BICYCLE_PATH;
            case (short)127:
                return BICYCLE_PATH_END;
            case (short)128:
                return HEIGHT_RESTRICTION;
            case (short)129:
                return LENGTH_RESTRICTION;
            case (short)130:
                return WIDTH_RESTRICTION;
            case (short)131:
                return WEIGHT_RESTRICTION;
            case (short)132:
                return PASSING_RESTRICTION;
            case (short)133:
                return TURN_RESTRICTION;
            case (short)134:
                return CARS_PROHIBITED;
            case (short)135:
                return VEHICLES_PROHIBITED;
            case (short)136:
                return PEDESTRIANS_PROHIBITED;
            case (short)137:
                return PEDESTRIAN_ZONE;
            case (short)138:
                return PEDESTRIAN_ZONE_END;
            case (short)139:
                return DO_NOT_ENTER;
            case (short)140:
                return TRUCK_SPEED_LIMIT;
            case (short)141:
                return TRUCK_SPEED_LIMIT_END;
            case (short)142:
                return MINIMUM_SPEED_END;
            case (short)143:
                return HAMLET_ENTRY;
            case (short)144:
                return HAMLET_EXIT;
            case (short)145:
                return MOTOR_VEHICLE_ROAD;
            case (short)146:
                return MOTOR_VEHICLE_ROAD_END;
            case (short)147:
                return PEDESTRIAN_PATH;
            case (short)148:
                return PEDESTRIAN_PATH_END;
            case (short)255:
                return GOOD_LUCK;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration ClassicAdasisWarningSign: " + value + "!");
        }
    }

    public static ClassicAdasisWarningSign toEnum(java.lang.String itemName)
    {
        if (itemName.equals("GENERAL_HAZARD"))
            return GENERAL_HAZARD;
        if (itemName.equals("PASS_LEFT_OR_RIGHT_OF_OBSTACLE"))
            return PASS_LEFT_OR_RIGHT_OF_OBSTACLE;
        if (itemName.equals("PASS_LEFT_OF_OBSTACLE"))
            return PASS_LEFT_OF_OBSTACLE;
        if (itemName.equals("PASS_RIGHT_OF_OBSTACLE"))
            return PASS_RIGHT_OF_OBSTACLE;
        if (itemName.equals("CATTLE"))
            return CATTLE;
        if (itemName.equals("ANIMALS"))
            return ANIMALS;
        if (itemName.equals("ROAD_WORKS"))
            return ROAD_WORKS;
        if (itemName.equals("LIVING_STREET_ENTRY"))
            return LIVING_STREET_ENTRY;
        if (itemName.equals("LIVING_STREET_EXIT"))
            return LIVING_STREET_EXIT;
        if (itemName.equals("CURVE_RIGHT"))
            return CURVE_RIGHT;
        if (itemName.equals("CURVE_LEFT"))
            return CURVE_LEFT;
        if (itemName.equals("TRUCK_ROLLOVER"))
            return TRUCK_ROLLOVER;
        if (itemName.equals("FOG_AREA"))
            return FOG_AREA;
        if (itemName.equals("CURVE_RIGHT_THEN_LEFT"))
            return CURVE_RIGHT_THEN_LEFT;
        if (itemName.equals("CURVE_LEFT_THEN_RIGHT"))
            return CURVE_LEFT_THEN_RIGHT;
        if (itemName.equals("TIRE_CHAINS_MANDATORY"))
            return TIRE_CHAINS_MANDATORY;
        if (itemName.equals("HIJACKING_HOTSPOT"))
            return HIJACKING_HOTSPOT;
        if (itemName.equals("CURVY_ROAD"))
            return CURVY_ROAD;
        if (itemName.equals("REVERSE_BENDS"))
            return REVERSE_BENDS;
        if (itemName.equals("ROUNDABOUT_AHEAD"))
            return ROUNDABOUT_AHEAD;
        if (itemName.equals("NO_OVERTAKING_FOR_TRUCKS"))
            return NO_OVERTAKING_FOR_TRUCKS;
        if (itemName.equals("NO_OVERTAKING_FOR_TRUCKS_END"))
            return NO_OVERTAKING_FOR_TRUCKS_END;
        if (itemName.equals("DANGEROUS_INTERSECTION"))
            return DANGEROUS_INTERSECTION;
        if (itemName.equals("OVERPASS_AHEAD"))
            return OVERPASS_AHEAD;
        if (itemName.equals("TUNNEL"))
            return TUNNEL;
        if (itemName.equals("FERRY_TERMINAL"))
            return FERRY_TERMINAL;
        if (itemName.equals("NARROW_BRIDGE"))
            return NARROW_BRIDGE;
        if (itemName.equals("NO_IDLING"))
            return NO_IDLING;
        if (itemName.equals("HUMPBACK_BRIDGE"))
            return HUMPBACK_BRIDGE;
        if (itemName.equals("EMBANKMENT_ON_THE_RIGHT"))
            return EMBANKMENT_ON_THE_RIGHT;
        if (itemName.equals("EMBANKMENT_ON_THE_LEFT"))
            return EMBANKMENT_ON_THE_LEFT;
        if (itemName.equals("LIGHT_SIGNALS"))
            return LIGHT_SIGNALS;
        if (itemName.equals("YIELD"))
            return YIELD;
        if (itemName.equals("STOP"))
            return STOP;
        if (itemName.equals("PRIORITY_ROAD"))
            return PRIORITY_ROAD;
        if (itemName.equals("INTERSECTION"))
            return INTERSECTION;
        if (itemName.equals("CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD"))
            return CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD;
        if (itemName.equals("CROSSING_WITH_PRIORITY_TO_THE_RIGHT"))
            return CROSSING_WITH_PRIORITY_TO_THE_RIGHT;
        if (itemName.equals("BRANCH_TO_THE_RIGHT"))
            return BRANCH_TO_THE_RIGHT;
        if (itemName.equals("BRANCH_TO_THE_LEFT"))
            return BRANCH_TO_THE_LEFT;
        if (itemName.equals("CARRIAGEWAY_NARROWS"))
            return CARRIAGEWAY_NARROWS;
        if (itemName.equals("CARRIAGEWAY_NARROWS_RIGHT"))
            return CARRIAGEWAY_NARROWS_RIGHT;
        if (itemName.equals("CARRIAGEWAY_NARROWS_LEFT"))
            return CARRIAGEWAY_NARROWS_LEFT;
        if (itemName.equals("LANE_MERGE_FROM_RIGHT"))
            return LANE_MERGE_FROM_RIGHT;
        if (itemName.equals("LANE_MERGE_FROM_LEFT"))
            return LANE_MERGE_FROM_LEFT;
        if (itemName.equals("LANE_MERGE_CENTER"))
            return LANE_MERGE_CENTER;
        if (itemName.equals("NO_OVERTAKING"))
            return NO_OVERTAKING;
        if (itemName.equals("NO_OVERTAKING_END"))
            return NO_OVERTAKING_END;
        if (itemName.equals("PROTECTED_PASSING_END"))
            return PROTECTED_PASSING_END;
        if (itemName.equals("PROTECTED_PASSING"))
            return PROTECTED_PASSING;
        if (itemName.equals("PEDESTRIANS"))
            return PEDESTRIANS;
        if (itemName.equals("PEDESTRIAN_CROSSING"))
            return PEDESTRIAN_CROSSING;
        if (itemName.equals("CHILDREN"))
            return CHILDREN;
        if (itemName.equals("SCHOOL_ZONE"))
            return SCHOOL_ZONE;
        if (itemName.equals("CYCLISTS"))
            return CYCLISTS;
        if (itemName.equals("TWO_WAY_TRAFFIC"))
            return TWO_WAY_TRAFFIC;
        if (itemName.equals("RAILROAD_CROSSING_WITH_GATES"))
            return RAILROAD_CROSSING_WITH_GATES;
        if (itemName.equals("RAILROAD_CROSSING_WITHOUT_GATES"))
            return RAILROAD_CROSSING_WITHOUT_GATES;
        if (itemName.equals("RAILROAD_CROSSING"))
            return RAILROAD_CROSSING;
        if (itemName.equals("TRAMWAY_CROSSING"))
            return TRAMWAY_CROSSING;
        if (itemName.equals("FALLING_ROCKS"))
            return FALLING_ROCKS;
        if (itemName.equals("FALLING_ROCKS_ON_THE_LEFT"))
            return FALLING_ROCKS_ON_THE_LEFT;
        if (itemName.equals("FALLING_ROCKS_ON_THE_RIGHT"))
            return FALLING_ROCKS_ON_THE_RIGHT;
        if (itemName.equals("STEEP_DROP_ON_LEFT"))
            return STEEP_DROP_ON_LEFT;
        if (itemName.equals("STEEP_DROP_ON_RIGHT"))
            return STEEP_DROP_ON_RIGHT;
        if (itemName.equals("SLIPPERY_ROAD"))
            return SLIPPERY_ROAD;
        if (itemName.equals("STEEP_INCLINE"))
            return STEEP_INCLINE;
        if (itemName.equals("STEEP_DECLINE"))
            return STEEP_DECLINE;
        if (itemName.equals("UNEVEN_ROAD"))
            return UNEVEN_ROAD;
        if (itemName.equals("BUMP"))
            return BUMP;
        if (itemName.equals("DIP"))
            return DIP;
        if (itemName.equals("ROAD_FLOODS"))
            return ROAD_FLOODS;
        if (itemName.equals("ICY_ROAD"))
            return ICY_ROAD;
        if (itemName.equals("WIND"))
            return WIND;
        if (itemName.equals("TRAFFIC_CONGESTION"))
            return TRAFFIC_CONGESTION;
        if (itemName.equals("HIGH_ACCIDENT_AREA"))
            return HIGH_ACCIDENT_AREA;
        if (itemName.equals("CITY_ENTRY"))
            return CITY_ENTRY;
        if (itemName.equals("AUDIBLE_WARNING"))
            return AUDIBLE_WARNING;
        if (itemName.equals("END_OF_ALL_RESTRICTIONS"))
            return END_OF_ALL_RESTRICTIONS;
        if (itemName.equals("PRIORITY_OVER_ONCOMING"))
            return PRIORITY_OVER_ONCOMING;
        if (itemName.equals("YIELD_TO_ONCOMING"))
            return YIELD_TO_ONCOMING;
        if (itemName.equals("CITY_EXIT"))
            return CITY_EXIT;
        if (itemName.equals("VILLAGE_AHEAD"))
            return VILLAGE_AHEAD;
        if (itemName.equals("SPEED_CAMERA"))
            return SPEED_CAMERA;
        if (itemName.equals("TRAFFIC_ENFORCEMENT_CAMERA"))
            return TRAFFIC_ENFORCEMENT_CAMERA;
        if (itemName.equals("SPEED_LIMIT"))
            return SPEED_LIMIT;
        if (itemName.equals("SPEED_LIMIT_END"))
            return SPEED_LIMIT_END;
        if (itemName.equals("MOVABLE_BRIDGE"))
            return MOVABLE_BRIDGE;
        if (itemName.equals("SLOW_DOWN"))
            return SLOW_DOWN;
        if (itemName.equals("INTERSECTION_T_RIGHT"))
            return INTERSECTION_T_RIGHT;
        if (itemName.equals("INTERSECTION_T_LEFT"))
            return INTERSECTION_T_LEFT;
        if (itemName.equals("INTERSECTION_T_LEFT_RIGHT"))
            return INTERSECTION_T_LEFT_RIGHT;
        if (itemName.equals("INTERSECTION_Y"))
            return INTERSECTION_Y;
        if (itemName.equals("PRIORITY_ROAD_END"))
            return PRIORITY_ROAD_END;
        if (itemName.equals("USE_LOW_GEAR"))
            return USE_LOW_GEAR;
        if (itemName.equals("NO_COMPRESSION_BRAKING"))
            return NO_COMPRESSION_BRAKING;
        if (itemName.equals("WAITING_LINE"))
            return WAITING_LINE;
        if (itemName.equals("DONT_STOP_ZONE"))
            return DONT_STOP_ZONE;
        if (itemName.equals("LANE_USED_IN_BOTH_DIRECTIONS"))
            return LANE_USED_IN_BOTH_DIRECTIONS;
        if (itemName.equals("HONKING_PROHIBITED"))
            return HONKING_PROHIBITED;
        if (itemName.equals("FASTEN_SEAT_BELT"))
            return FASTEN_SEAT_BELT;
        if (itemName.equals("DEAD_END"))
            return DEAD_END;
        if (itemName.equals("ADVISORY_SPEED_LIMIT"))
            return ADVISORY_SPEED_LIMIT;
        if (itemName.equals("SPEED_LIMIT_NIGHT"))
            return SPEED_LIMIT_NIGHT;
        if (itemName.equals("MINIMUM_SPEED"))
            return MINIMUM_SPEED;
        if (itemName.equals("VARIABLE_SPEED_LIMIT"))
            return VARIABLE_SPEED_LIMIT;
        if (itemName.equals("VARIABLE"))
            return VARIABLE;
        if (itemName.equals("UNPROTECTED_LEFT_TURN"))
            return UNPROTECTED_LEFT_TURN;
        if (itemName.equals("USE_LOW_GEAR_END"))
            return USE_LOW_GEAR_END;
        if (itemName.equals("NO_COMPRESSION_BRAKING_END"))
            return NO_COMPRESSION_BRAKING_END;
        if (itemName.equals("DOUBLE_HAIRPIN_CURVE"))
            return DOUBLE_HAIRPIN_CURVE;
        if (itemName.equals("TRIPLE_HAIRPIN_CURVE"))
            return TRIPLE_HAIRPIN_CURVE;
        if (itemName.equals("EMBANKMENT"))
            return EMBANKMENT;
        if (itemName.equals("HILL"))
            return HILL;
        if (itemName.equals("PROTECTED_PASSING_LEFT"))
            return PROTECTED_PASSING_LEFT;
        if (itemName.equals("PROTECTED_PASSING_RIGHT"))
            return PROTECTED_PASSING_RIGHT;
        if (itemName.equals("RISK_OF_GROUNDING"))
            return RISK_OF_GROUNDING;
        if (itemName.equals("CURVY_ROAD_LEFT"))
            return CURVY_ROAD_LEFT;
        if (itemName.equals("CURVY_ROAD_RIGHT"))
            return CURVY_ROAD_RIGHT;
        if (itemName.equals("ADVISORY_SPEED_LIMIT_END"))
            return ADVISORY_SPEED_LIMIT_END;
        if (itemName.equals("MOTORWAY"))
            return MOTORWAY;
        if (itemName.equals("MOTORWAY_END"))
            return MOTORWAY_END;
        if (itemName.equals("ONEWAY"))
            return ONEWAY;
        if (itemName.equals("BICYCLE_PATH"))
            return BICYCLE_PATH;
        if (itemName.equals("BICYCLE_PATH_END"))
            return BICYCLE_PATH_END;
        if (itemName.equals("HEIGHT_RESTRICTION"))
            return HEIGHT_RESTRICTION;
        if (itemName.equals("LENGTH_RESTRICTION"))
            return LENGTH_RESTRICTION;
        if (itemName.equals("WIDTH_RESTRICTION"))
            return WIDTH_RESTRICTION;
        if (itemName.equals("WEIGHT_RESTRICTION"))
            return WEIGHT_RESTRICTION;
        if (itemName.equals("PASSING_RESTRICTION"))
            return PASSING_RESTRICTION;
        if (itemName.equals("TURN_RESTRICTION"))
            return TURN_RESTRICTION;
        if (itemName.equals("CARS_PROHIBITED"))
            return CARS_PROHIBITED;
        if (itemName.equals("VEHICLES_PROHIBITED"))
            return VEHICLES_PROHIBITED;
        if (itemName.equals("PEDESTRIANS_PROHIBITED"))
            return PEDESTRIANS_PROHIBITED;
        if (itemName.equals("PEDESTRIAN_ZONE"))
            return PEDESTRIAN_ZONE;
        if (itemName.equals("PEDESTRIAN_ZONE_END"))
            return PEDESTRIAN_ZONE_END;
        if (itemName.equals("DO_NOT_ENTER"))
            return DO_NOT_ENTER;
        if (itemName.equals("TRUCK_SPEED_LIMIT"))
            return TRUCK_SPEED_LIMIT;
        if (itemName.equals("TRUCK_SPEED_LIMIT_END"))
            return TRUCK_SPEED_LIMIT_END;
        if (itemName.equals("MINIMUM_SPEED_END"))
            return MINIMUM_SPEED_END;
        if (itemName.equals("HAMLET_ENTRY"))
            return HAMLET_ENTRY;
        if (itemName.equals("HAMLET_EXIT"))
            return HAMLET_EXIT;
        if (itemName.equals("MOTOR_VEHICLE_ROAD"))
            return MOTOR_VEHICLE_ROAD;
        if (itemName.equals("MOTOR_VEHICLE_ROAD_END"))
            return MOTOR_VEHICLE_ROAD_END;
        if (itemName.equals("PEDESTRIAN_PATH"))
            return PEDESTRIAN_PATH;
        if (itemName.equals("PEDESTRIAN_PATH_END"))
            return PEDESTRIAN_PATH_END;
        if (itemName.equals("GOOD_LUCK"))
            return GOOD_LUCK;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration ClassicAdasisWarningSign!");
    }

    private short value;
}
