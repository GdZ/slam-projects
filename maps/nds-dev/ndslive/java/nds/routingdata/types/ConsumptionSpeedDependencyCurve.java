/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.types;

public class ConsumptionSpeedDependencyCurve implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numberOfSpeedValuesAlongRoad_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumberOfSpeedValuesAlongRoad()
        {
            return numberOfSpeedValuesAlongRoad_;
        }

        private zserio.runtime.array.DeltaContext numberOfSpeedValuesAlongRoad_;
    };

    public ConsumptionSpeedDependencyCurve()
    {
    }

    public ConsumptionSpeedDependencyCurve(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ConsumptionSpeedDependencyCurve(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ConsumptionSpeedDependencyCurve(
            short numberOfSpeedValuesAlongRoad_,
            nds.routingdata.types.ConsumptionSpeedValue[] consumptionSpeedValue_)
    {
        setNumberOfSpeedValuesAlongRoad(numberOfSpeedValuesAlongRoad_);
        setConsumptionSpeedValue(consumptionSpeedValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumberOfSpeedValuesAlongRoad().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSpeedValuesAlongRoad_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += consumptionSpeedValue_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumberOfSpeedValuesAlongRoad().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSpeedValuesAlongRoad_));
        endBitPosition += consumptionSpeedValue_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumberOfSpeedValuesAlongRoad()
    {
        return numberOfSpeedValuesAlongRoad_;
    }

    public void setNumberOfSpeedValuesAlongRoad(short numberOfSpeedValuesAlongRoad_)
    {
        this.numberOfSpeedValuesAlongRoad_ = numberOfSpeedValuesAlongRoad_;
    }

    public nds.routingdata.types.ConsumptionSpeedValue[] getConsumptionSpeedValue()
    {
        return (consumptionSpeedValue_ == null) ? null : consumptionSpeedValue_.getRawArray();
    }

    public void setConsumptionSpeedValue(nds.routingdata.types.ConsumptionSpeedValue[] consumptionSpeedValue_)
    {
        this.consumptionSpeedValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.ConsumptionSpeedValue.class, consumptionSpeedValue_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.ConsumptionSpeedValue>(new ZserioElementFactory_consumptionSpeedValue()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ConsumptionSpeedDependencyCurve)
        {
            final ConsumptionSpeedDependencyCurve that = (ConsumptionSpeedDependencyCurve)obj;

            return
                    numberOfSpeedValuesAlongRoad_ == that.numberOfSpeedValuesAlongRoad_ &&
                    ((consumptionSpeedValue_ == null) ? that.consumptionSpeedValue_ == null : consumptionSpeedValue_.equals(that.consumptionSpeedValue_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numberOfSpeedValuesAlongRoad_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, consumptionSpeedValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numberOfSpeedValuesAlongRoad_ = in.readUnsignedByte();

        consumptionSpeedValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.ConsumptionSpeedValue.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.ConsumptionSpeedValue>(new ZserioElementFactory_consumptionSpeedValue()),
                zserio.runtime.array.ArrayType.NORMAL);
        consumptionSpeedValue_.read(in, (int)(getNumberOfSpeedValuesAlongRoad()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numberOfSpeedValuesAlongRoad_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumberOfSpeedValuesAlongRoad().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        consumptionSpeedValue_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.ConsumptionSpeedValue.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.ConsumptionSpeedValue>(new ZserioElementFactory_consumptionSpeedValue()),
                zserio.runtime.array.ArrayType.NORMAL);
        consumptionSpeedValue_.readPacked(in, (int)(getNumberOfSpeedValuesAlongRoad()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = consumptionSpeedValue_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumberOfSpeedValuesAlongRoad().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSpeedValuesAlongRoad_));
        endBitPosition = consumptionSpeedValue_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numberOfSpeedValuesAlongRoad_);

        if (consumptionSpeedValue_.size() != (int)(getNumberOfSpeedValuesAlongRoad()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ConsumptionSpeedDependencyCurve.consumptionSpeedValue: " +
                    consumptionSpeedValue_.size() + " != " + (int)(getNumberOfSpeedValuesAlongRoad()) + "!");
        }
        consumptionSpeedValue_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumberOfSpeedValuesAlongRoad().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSpeedValuesAlongRoad_));

        if (consumptionSpeedValue_.size() != (int)(getNumberOfSpeedValuesAlongRoad()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ConsumptionSpeedDependencyCurve.consumptionSpeedValue: " +
                    consumptionSpeedValue_.size() + " != " + (int)(getNumberOfSpeedValuesAlongRoad()) + "!");
        }
        consumptionSpeedValue_.writePacked(out);
    }

    private static final class ZserioElementFactory_consumptionSpeedValue implements zserio.runtime.array.PackableElementFactory<nds.routingdata.types.ConsumptionSpeedValue>
    {
        @Override
        public nds.routingdata.types.ConsumptionSpeedValue create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routingdata.types.ConsumptionSpeedValue(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routingdata.types.ConsumptionSpeedValue.ZserioPackingContext();
        }

        @Override
        public nds.routingdata.types.ConsumptionSpeedValue create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routingdata.types.ConsumptionSpeedValue(context, in);
        }
    }

    private short numberOfSpeedValuesAlongRoad_;
    private zserio.runtime.array.Array consumptionSpeedValue_;
}
