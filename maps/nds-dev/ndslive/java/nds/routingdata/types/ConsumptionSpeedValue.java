/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.types;

public class ConsumptionSpeedValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            averageSpeed_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getAverageSpeed()
        {
            return averageSpeed_;
        }

        private zserio.runtime.array.DeltaContext averageSpeed_;
    };

    public ConsumptionSpeedValue()
    {
    }

    public ConsumptionSpeedValue(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ConsumptionSpeedValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ConsumptionSpeedValue(
            float roadPercentage_,
            short averageSpeed_)
    {
        setRoadPercentage(roadPercentage_);
        setAverageSpeed(averageSpeed_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getAverageSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(averageSpeed_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserioContext.getAverageSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(averageSpeed_));

        return (int)(endBitPosition - bitPosition);
    }

    public float getRoadPercentage()
    {
        return roadPercentage_;
    }

    public void setRoadPercentage(float roadPercentage_)
    {
        this.roadPercentage_ = roadPercentage_;
    }

    public short getAverageSpeed()
    {
        return averageSpeed_;
    }

    public void setAverageSpeed(short averageSpeed_)
    {
        this.averageSpeed_ = averageSpeed_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ConsumptionSpeedValue)
        {
            final ConsumptionSpeedValue that = (ConsumptionSpeedValue)obj;

            return
                    java.lang.Float.floatToIntBits(roadPercentage_) == java.lang.Float.floatToIntBits(that.roadPercentage_) &&
                    averageSpeed_ == that.averageSpeed_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadPercentage_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, averageSpeed_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        roadPercentage_ = in.readFloat16();

        averageSpeed_ = in.readUnsignedByte();

        checkConstraints();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        roadPercentage_ = in.readFloat16();

        averageSpeed_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getAverageSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        checkConstraints();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 16;
        endBitPosition += zserioContext.getAverageSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(averageSpeed_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        checkConstraints();

        out.writeFloat16(roadPercentage_);

        out.writeUnsignedByte(averageSpeed_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        checkConstraints();

        out.writeFloat16(roadPercentage_);

        zserioContext.getAverageSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(averageSpeed_));
    }

    private void checkConstraints()
    {
        if (!(getAverageSpeed() > nds.core.types.SPEED_UNDEFINED.SPEED_UNDEFINED))
            throw new zserio.runtime.ConstraintError("Constraint violated at ConsumptionSpeedValue.averageSpeed!");
    }

    private float roadPercentage_;
    private short averageSpeed_;
}
