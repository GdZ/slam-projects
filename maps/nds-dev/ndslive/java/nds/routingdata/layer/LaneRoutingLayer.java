/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.layer;

public class LaneRoutingLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            routingLaneRangeMaps_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList.ZserioPackingContext();
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList.ZserioPackingContext();
            routingLaneRangeSets_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList.ZserioPackingContext();
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList.ZserioPackingContext getRoutingLaneRangeMaps()
        {
            return routingLaneRangeMaps_;
        }

        public nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList.ZserioPackingContext getRoutingTransitionMaps()
        {
            return routingTransitionMaps_;
        }

        public nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList.ZserioPackingContext getRoutingLaneRangeSets()
        {
            return routingLaneRangeSets_;
        }

        public nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList.ZserioPackingContext getRoutingTransitionSets()
        {
            return routingTransitionSets_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList.ZserioPackingContext routingLaneRangeMaps_;
        private nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList.ZserioPackingContext routingTransitionMaps_;
        private nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList.ZserioPackingContext routingLaneRangeSets_;
        private nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList.ZserioPackingContext routingTransitionSets_;
    };

    public LaneRoutingLayer()
    {
    }

    public LaneRoutingLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public LaneRoutingLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public LaneRoutingLayer(
            nds.routingdata.metadata.LaneRoutingLayerContent content_,
            nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList routingLaneRangeMaps_,
            nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList routingTransitionMaps_,
            nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList routingLaneRangeSets_,
            nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList routingTransitionSets_,
            nds.routingdata.types.SpeedProfile[] profiles_)
    {
        setContent(content_);
        setRoutingLaneRangeMaps(routingLaneRangeMaps_);
        setRoutingTransitionMaps(routingTransitionMaps_);
        setRoutingLaneRangeSets(routingLaneRangeSets_);
        setRoutingTransitionSets(routingTransitionSets_);
        setProfiles(profiles_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isRoutingLaneRangeMapsUsed())
        {
            routingLaneRangeMaps_.initPackingContext(zserioContext.getRoutingLaneRangeMaps());
        }
        if (isRoutingTransitionMapsUsed())
        {
            routingTransitionMaps_.initPackingContext(zserioContext.getRoutingTransitionMaps());
        }
        if (isRoutingLaneRangeSetsUsed())
        {
            routingLaneRangeSets_.initPackingContext(zserioContext.getRoutingLaneRangeSets());
        }
        if (isRoutingTransitionSetsUsed())
        {
            routingTransitionSets_.initPackingContext(zserioContext.getRoutingTransitionSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoutingLaneRangeMapsUsed())
        {
            endBitPosition += routingLaneRangeMaps_.bitSizeOf(endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition += routingTransitionMaps_.bitSizeOf(endBitPosition);
        }
        if (isRoutingLaneRangeSetsUsed())
        {
            endBitPosition += routingLaneRangeSets_.bitSizeOf(endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition += routingTransitionSets_.bitSizeOf(endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition += profiles_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isRoutingLaneRangeMapsUsed())
        {
            endBitPosition += routingLaneRangeMaps_.bitSizeOf(zserioContext.getRoutingLaneRangeMaps(), endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition += routingTransitionMaps_.bitSizeOf(zserioContext.getRoutingTransitionMaps(), endBitPosition);
        }
        if (isRoutingLaneRangeSetsUsed())
        {
            endBitPosition += routingLaneRangeSets_.bitSizeOf(zserioContext.getRoutingLaneRangeSets(), endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition += routingTransitionSets_.bitSizeOf(zserioContext.getRoutingTransitionSets(), endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition += profiles_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routingdata.metadata.LaneRoutingLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.routingdata.metadata.LaneRoutingLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList getRoutingLaneRangeMaps()
    {
        return routingLaneRangeMaps_;
    }

    public void setRoutingLaneRangeMaps(nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList routingLaneRangeMaps_)
    {
        this.routingLaneRangeMaps_ = routingLaneRangeMaps_;
    }

    public boolean isRoutingLaneRangeMapsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS));
    }

    public boolean isRoutingLaneRangeMapsSet()
    {
        return (routingLaneRangeMaps_ != null);
    }

    public void resetRoutingLaneRangeMaps()
    {
        this.routingLaneRangeMaps_ = null;
    }

    public nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList getRoutingTransitionMaps()
    {
        return routingTransitionMaps_;
    }

    public void setRoutingTransitionMaps(nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList routingTransitionMaps_)
    {
        this.routingTransitionMaps_ = routingTransitionMaps_;
    }

    public boolean isRoutingTransitionMapsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS));
    }

    public boolean isRoutingTransitionMapsSet()
    {
        return (routingTransitionMaps_ != null);
    }

    public void resetRoutingTransitionMaps()
    {
        this.routingTransitionMaps_ = null;
    }

    public nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList getRoutingLaneRangeSets()
    {
        return routingLaneRangeSets_;
    }

    public void setRoutingLaneRangeSets(nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList routingLaneRangeSets_)
    {
        this.routingLaneRangeSets_ = routingLaneRangeSets_;
    }

    public boolean isRoutingLaneRangeSetsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS));
    }

    public boolean isRoutingLaneRangeSetsSet()
    {
        return (routingLaneRangeSets_ != null);
    }

    public void resetRoutingLaneRangeSets()
    {
        this.routingLaneRangeSets_ = null;
    }

    public nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList getRoutingTransitionSets()
    {
        return routingTransitionSets_;
    }

    public void setRoutingTransitionSets(nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList routingTransitionSets_)
    {
        this.routingTransitionSets_ = routingTransitionSets_;
    }

    public boolean isRoutingTransitionSetsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS));
    }

    public boolean isRoutingTransitionSetsSet()
    {
        return (routingTransitionSets_ != null);
    }

    public void resetRoutingTransitionSets()
    {
        this.routingTransitionSets_ = null;
    }

    public nds.routingdata.types.SpeedProfile[] getProfiles()
    {
        return (profiles_ == null) ? null : profiles_.getRawArray();
    }

    public void setProfiles(nds.routingdata.types.SpeedProfile[] profiles_)
    {
        if (profiles_ == null)
        {
            this.profiles_ = null;
        }
        else
        {
            this.profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class, profiles_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isProfilesUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES));
    }

    public boolean isProfilesSet()
    {
        return (profiles_ != null);
    }

    public void resetProfiles()
    {
        this.profiles_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof LaneRoutingLayer)
        {
            final LaneRoutingLayer that = (LaneRoutingLayer)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isRoutingLaneRangeMapsUsed()) ? !that.isRoutingLaneRangeMapsUsed() :
                        ((routingLaneRangeMaps_ == null) ? that.routingLaneRangeMaps_ == null : routingLaneRangeMaps_.equals(that.routingLaneRangeMaps_))) &&
                    ((!isRoutingTransitionMapsUsed()) ? !that.isRoutingTransitionMapsUsed() :
                        ((routingTransitionMaps_ == null) ? that.routingTransitionMaps_ == null : routingTransitionMaps_.equals(that.routingTransitionMaps_))) &&
                    ((!isRoutingLaneRangeSetsUsed()) ? !that.isRoutingLaneRangeSetsUsed() :
                        ((routingLaneRangeSets_ == null) ? that.routingLaneRangeSets_ == null : routingLaneRangeSets_.equals(that.routingLaneRangeSets_))) &&
                    ((!isRoutingTransitionSetsUsed()) ? !that.isRoutingTransitionSetsUsed() :
                        ((routingTransitionSets_ == null) ? that.routingTransitionSets_ == null : routingTransitionSets_.equals(that.routingTransitionSets_))) &&
                    ((!isProfilesUsed()) ? !that.isProfilesUsed() :
                        ((profiles_ == null) ? that.profiles_ == null : profiles_.equals(that.profiles_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isRoutingLaneRangeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingLaneRangeMaps_);
        if (isRoutingTransitionMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingTransitionMaps_);
        if (isRoutingLaneRangeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingLaneRangeSets_);
        if (isRoutingTransitionSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingTransitionSets_);
        if (isProfilesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, profiles_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.routingdata.metadata.LaneRoutingLayerContent(in);

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS))
        {
            routingLaneRangeMaps_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList(in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS))
        {
            routingLaneRangeSets_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList(in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS))
        {
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList(in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES))
        {
            profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
            profiles_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.routingdata.metadata.LaneRoutingLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_MAPS))
        {
            routingLaneRangeMaps_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList(zserioContext.getRoutingLaneRangeMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_MAPS))
        {
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList(zserioContext.getRoutingTransitionMaps(), in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_RANGE_SETS))
        {
            routingLaneRangeSets_ = new nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList(zserioContext.getRoutingLaneRangeSets(), in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.LANE_TRANSITION_SETS))
        {
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList(zserioContext.getRoutingTransitionSets(), in, (byte)(0));
        }

        if ((getContent().and(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.LaneRoutingLayerContent.Values.SPEED_PROFILES))
        {
            profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
            profiles_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoutingLaneRangeMapsUsed())
        {
            endBitPosition = routingLaneRangeMaps_.initializeOffsets(endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition = routingTransitionMaps_.initializeOffsets(endBitPosition);
        }
        if (isRoutingLaneRangeSetsUsed())
        {
            endBitPosition = routingLaneRangeSets_.initializeOffsets(endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition = routingTransitionSets_.initializeOffsets(endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition = profiles_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isRoutingLaneRangeMapsUsed())
        {
            endBitPosition = routingLaneRangeMaps_.initializeOffsets(zserioContext.getRoutingLaneRangeMaps(), endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition = routingTransitionMaps_.initializeOffsets(zserioContext.getRoutingTransitionMaps(), endBitPosition);
        }
        if (isRoutingLaneRangeSetsUsed())
        {
            endBitPosition = routingLaneRangeSets_.initializeOffsets(zserioContext.getRoutingLaneRangeSets(), endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition = routingTransitionSets_.initializeOffsets(zserioContext.getRoutingTransitionSets(), endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition = profiles_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isRoutingLaneRangeMapsUsed())
        {
            // check parameters
            if (routingLaneRangeMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeMaps: " +
                        routingLaneRangeMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            routingLaneRangeMaps_.write(out);
        }

        if (isRoutingTransitionMapsUsed())
        {
            // check parameters
            if (routingTransitionMaps_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionMaps: " +
                        routingTransitionMaps_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            routingTransitionMaps_.write(out);
        }

        if (isRoutingLaneRangeSetsUsed())
        {
            // check parameters
            if (routingLaneRangeSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingLaneRangeSets: " +
                        routingLaneRangeSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            routingLaneRangeSets_.write(out);
        }

        if (isRoutingTransitionSetsUsed())
        {
            // check parameters
            if (routingTransitionSets_.getCoordShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field LaneRoutingLayer.routingTransitionSets: " +
                        routingTransitionSets_.getCoordShift() + " != " + (byte)(0) + "!");
            }
            routingTransitionSets_.write(out);
        }

        if (isProfilesUsed())
        {
            profiles_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isRoutingLaneRangeMapsUsed())
        {
            routingLaneRangeMaps_.write(zserioContext.getRoutingLaneRangeMaps(), out);
        }

        if (isRoutingTransitionMapsUsed())
        {
            routingTransitionMaps_.write(zserioContext.getRoutingTransitionMaps(), out);
        }

        if (isRoutingLaneRangeSetsUsed())
        {
            routingLaneRangeSets_.write(zserioContext.getRoutingLaneRangeSets(), out);
        }

        if (isRoutingTransitionSetsUsed())
        {
            routingTransitionSets_.write(zserioContext.getRoutingTransitionSets(), out);
        }

        if (isProfilesUsed())
        {
            profiles_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_profiles implements zserio.runtime.array.PackableElementFactory<nds.routingdata.types.SpeedProfile>
    {
        @Override
        public nds.routingdata.types.SpeedProfile create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routingdata.types.SpeedProfile(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routingdata.types.SpeedProfile.ZserioPackingContext();
        }

        @Override
        public nds.routingdata.types.SpeedProfile create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routingdata.types.SpeedProfile(context, in);
        }
    }

    private nds.routingdata.metadata.LaneRoutingLayerContent content_;
    private nds.routingdata.instantiations.RoutingLaneRangeAttributeMapList routingLaneRangeMaps_;
    private nds.routingdata.instantiations.RoutingLaneTransitionAttributeMapList routingTransitionMaps_;
    private nds.routingdata.instantiations.RoutingLaneRangeAttributeSetList routingLaneRangeSets_;
    private nds.routingdata.instantiations.RoutingLaneTransitionAttributeSetList routingTransitionSets_;
    private zserio.runtime.array.Array profiles_;
}
