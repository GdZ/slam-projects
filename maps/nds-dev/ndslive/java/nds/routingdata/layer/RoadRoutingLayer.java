/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.layer;

public class RoadRoutingLayer implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            shift_ = new zserio.runtime.array.DeltaContext();
            content_ = new zserio.runtime.array.DeltaContext();
            routingRoadRangeMaps_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList.ZserioPackingContext();
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList.ZserioPackingContext();
            routingRoadRangeSets_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList.ZserioPackingContext();
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getShift()
        {
            return shift_;
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList.ZserioPackingContext getRoutingRoadRangeMaps()
        {
            return routingRoadRangeMaps_;
        }

        public nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList.ZserioPackingContext getRoutingTransitionMaps()
        {
            return routingTransitionMaps_;
        }

        public nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList.ZserioPackingContext getRoutingRoadRangeSets()
        {
            return routingRoadRangeSets_;
        }

        public nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList.ZserioPackingContext getRoutingTransitionSets()
        {
            return routingTransitionSets_;
        }

        private zserio.runtime.array.DeltaContext shift_;
        private zserio.runtime.array.DeltaContext content_;
        private nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList.ZserioPackingContext routingRoadRangeMaps_;
        private nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList.ZserioPackingContext routingTransitionMaps_;
        private nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList.ZserioPackingContext routingRoadRangeSets_;
        private nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList.ZserioPackingContext routingTransitionSets_;
    };

    public RoadRoutingLayer()
    {
    }

    public RoadRoutingLayer(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadRoutingLayer(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadRoutingLayer(
            byte shift_,
            nds.routingdata.metadata.RoadRoutingLayerContent content_,
            nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList routingRoadRangeMaps_,
            nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList routingTransitionMaps_,
            nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList routingRoadRangeSets_,
            nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList routingTransitionSets_,
            nds.routingdata.types.SpeedProfile[] profiles_)
    {
        setShift(shift_);
        setContent(content_);
        setRoutingRoadRangeMaps(routingRoadRangeMaps_);
        setRoutingTransitionMaps(routingTransitionMaps_);
        setRoutingRoadRangeSets(routingRoadRangeSets_);
        setRoutingTransitionSets(routingTransitionSets_);
        setProfiles(profiles_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getShift().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        content_.initPackingContext(zserioContext.getContent());
        if (isRoutingRoadRangeMapsUsed())
        {
            routingRoadRangeMaps_.initPackingContext(zserioContext.getRoutingRoadRangeMaps());
        }
        if (isRoutingTransitionMapsUsed())
        {
            routingTransitionMaps_.initPackingContext(zserioContext.getRoutingTransitionMaps());
        }
        if (isRoutingRoadRangeSetsUsed())
        {
            routingRoadRangeSets_.initPackingContext(zserioContext.getRoutingRoadRangeSets());
        }
        if (isRoutingTransitionSetsUsed())
        {
            routingTransitionSets_.initPackingContext(zserioContext.getRoutingTransitionSets());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoutingRoadRangeMapsUsed())
        {
            endBitPosition += routingRoadRangeMaps_.bitSizeOf(endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition += routingTransitionMaps_.bitSizeOf(endBitPosition);
        }
        if (isRoutingRoadRangeSetsUsed())
        {
            endBitPosition += routingRoadRangeSets_.bitSizeOf(endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition += routingTransitionSets_.bitSizeOf(endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition += profiles_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isRoutingRoadRangeMapsUsed())
        {
            endBitPosition += routingRoadRangeMaps_.bitSizeOf(zserioContext.getRoutingRoadRangeMaps(), endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition += routingTransitionMaps_.bitSizeOf(zserioContext.getRoutingTransitionMaps(), endBitPosition);
        }
        if (isRoutingRoadRangeSetsUsed())
        {
            endBitPosition += routingRoadRangeSets_.bitSizeOf(zserioContext.getRoutingRoadRangeSets(), endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition += routingTransitionSets_.bitSizeOf(zserioContext.getRoutingTransitionSets(), endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition += profiles_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public byte getShift()
    {
        return shift_;
    }

    public void setShift(byte shift_)
    {
        this.shift_ = shift_;
    }

    public nds.routingdata.metadata.RoadRoutingLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.routingdata.metadata.RoadRoutingLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList getRoutingRoadRangeMaps()
    {
        return routingRoadRangeMaps_;
    }

    public void setRoutingRoadRangeMaps(nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList routingRoadRangeMaps_)
    {
        this.routingRoadRangeMaps_ = routingRoadRangeMaps_;
    }

    public boolean isRoutingRoadRangeMapsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS));
    }

    public boolean isRoutingRoadRangeMapsSet()
    {
        return (routingRoadRangeMaps_ != null);
    }

    public void resetRoutingRoadRangeMaps()
    {
        this.routingRoadRangeMaps_ = null;
    }

    public nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList getRoutingTransitionMaps()
    {
        return routingTransitionMaps_;
    }

    public void setRoutingTransitionMaps(nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList routingTransitionMaps_)
    {
        this.routingTransitionMaps_ = routingTransitionMaps_;
    }

    public boolean isRoutingTransitionMapsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS));
    }

    public boolean isRoutingTransitionMapsSet()
    {
        return (routingTransitionMaps_ != null);
    }

    public void resetRoutingTransitionMaps()
    {
        this.routingTransitionMaps_ = null;
    }

    public nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList getRoutingRoadRangeSets()
    {
        return routingRoadRangeSets_;
    }

    public void setRoutingRoadRangeSets(nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList routingRoadRangeSets_)
    {
        this.routingRoadRangeSets_ = routingRoadRangeSets_;
    }

    public boolean isRoutingRoadRangeSetsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS));
    }

    public boolean isRoutingRoadRangeSetsSet()
    {
        return (routingRoadRangeSets_ != null);
    }

    public void resetRoutingRoadRangeSets()
    {
        this.routingRoadRangeSets_ = null;
    }

    public nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList getRoutingTransitionSets()
    {
        return routingTransitionSets_;
    }

    public void setRoutingTransitionSets(nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList routingTransitionSets_)
    {
        this.routingTransitionSets_ = routingTransitionSets_;
    }

    public boolean isRoutingTransitionSetsUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS));
    }

    public boolean isRoutingTransitionSetsSet()
    {
        return (routingTransitionSets_ != null);
    }

    public void resetRoutingTransitionSets()
    {
        this.routingTransitionSets_ = null;
    }

    public nds.routingdata.types.SpeedProfile[] getProfiles()
    {
        return (profiles_ == null) ? null : profiles_.getRawArray();
    }

    public void setProfiles(nds.routingdata.types.SpeedProfile[] profiles_)
    {
        if (profiles_ == null)
        {
            this.profiles_ = null;
        }
        else
        {
            this.profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class, profiles_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isProfilesUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES));
    }

    public boolean isProfilesSet()
    {
        return (profiles_ != null);
    }

    public void resetProfiles()
    {
        this.profiles_ = null;
    }

    public nds.system.types.LayerType funcGetLayerType()
    {
        return (nds.system.types.LayerType)(nds.system.types.LayerType.ATTRIBUTE);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadRoutingLayer)
        {
            final RoadRoutingLayer that = (RoadRoutingLayer)obj;

            return
                    shift_ == that.shift_ &&
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isRoutingRoadRangeMapsUsed()) ? !that.isRoutingRoadRangeMapsUsed() :
                        ((routingRoadRangeMaps_ == null) ? that.routingRoadRangeMaps_ == null : routingRoadRangeMaps_.equals(that.routingRoadRangeMaps_))) &&
                    ((!isRoutingTransitionMapsUsed()) ? !that.isRoutingTransitionMapsUsed() :
                        ((routingTransitionMaps_ == null) ? that.routingTransitionMaps_ == null : routingTransitionMaps_.equals(that.routingTransitionMaps_))) &&
                    ((!isRoutingRoadRangeSetsUsed()) ? !that.isRoutingRoadRangeSetsUsed() :
                        ((routingRoadRangeSets_ == null) ? that.routingRoadRangeSets_ == null : routingRoadRangeSets_.equals(that.routingRoadRangeSets_))) &&
                    ((!isRoutingTransitionSetsUsed()) ? !that.isRoutingTransitionSetsUsed() :
                        ((routingTransitionSets_ == null) ? that.routingTransitionSets_ == null : routingTransitionSets_.equals(that.routingTransitionSets_))) &&
                    ((!isProfilesUsed()) ? !that.isProfilesUsed() :
                        ((profiles_ == null) ? that.profiles_ == null : profiles_.equals(that.profiles_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, shift_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isRoutingRoadRangeMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingRoadRangeMaps_);
        if (isRoutingTransitionMapsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingTransitionMaps_);
        if (isRoutingRoadRangeSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingRoadRangeSets_);
        if (isRoutingTransitionSetsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, routingTransitionSets_);
        if (isProfilesUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, profiles_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        shift_ = (byte)in.readBits(5);

        content_ = new nds.routingdata.metadata.RoadRoutingLayerContent(in);

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS))
        {
            routingRoadRangeMaps_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList(in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS))
        {
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList(in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS))
        {
            routingRoadRangeSets_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList(in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS))
        {
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList(in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES))
        {
            profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
            profiles_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        shift_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getShift().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        content_ = new nds.routingdata.metadata.RoadRoutingLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS))
        {
            routingRoadRangeMaps_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList(zserioContext.getRoutingRoadRangeMaps(), in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS))
        {
            routingTransitionMaps_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList(zserioContext.getRoutingTransitionMaps(), in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS))
        {
            routingRoadRangeSets_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList(zserioContext.getRoutingRoadRangeSets(), in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS))
        {
            routingTransitionSets_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList(zserioContext.getRoutingTransitionSets(), in, (byte)(getShift()));
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.SPEED_PROFILES))
        {
            profiles_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.routingdata.types.SpeedProfile.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.routingdata.types.SpeedProfile>(new ZserioElementFactory_profiles()),
                    zserio.runtime.array.ArrayType.AUTO);
            profiles_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 5;
        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoutingRoadRangeMapsUsed())
        {
            endBitPosition = routingRoadRangeMaps_.initializeOffsets(endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition = routingTransitionMaps_.initializeOffsets(endBitPosition);
        }
        if (isRoutingRoadRangeSetsUsed())
        {
            endBitPosition = routingRoadRangeSets_.initializeOffsets(endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition = routingTransitionSets_.initializeOffsets(endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition = profiles_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getShift().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));
        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isRoutingRoadRangeMapsUsed())
        {
            endBitPosition = routingRoadRangeMaps_.initializeOffsets(zserioContext.getRoutingRoadRangeMaps(), endBitPosition);
        }
        if (isRoutingTransitionMapsUsed())
        {
            endBitPosition = routingTransitionMaps_.initializeOffsets(zserioContext.getRoutingTransitionMaps(), endBitPosition);
        }
        if (isRoutingRoadRangeSetsUsed())
        {
            endBitPosition = routingRoadRangeSets_.initializeOffsets(zserioContext.getRoutingRoadRangeSets(), endBitPosition);
        }
        if (isRoutingTransitionSetsUsed())
        {
            endBitPosition = routingTransitionSets_.initializeOffsets(zserioContext.getRoutingTransitionSets(), endBitPosition);
        }
        if (isProfilesUsed())
        {
            endBitPosition = profiles_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBits(shift_, 5);

        content_.write(out);

        if (isRoutingRoadRangeMapsUsed())
        {
            // check parameters
            if (routingRoadRangeMaps_.getCoordShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeMaps: " +
                        routingRoadRangeMaps_.getCoordShift() + " != " + (byte)(getShift()) + "!");
            }
            routingRoadRangeMaps_.write(out);
        }

        if (isRoutingTransitionMapsUsed())
        {
            // check parameters
            if (routingTransitionMaps_.getCoordShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionMaps: " +
                        routingTransitionMaps_.getCoordShift() + " != " + (byte)(getShift()) + "!");
            }
            routingTransitionMaps_.write(out);
        }

        if (isRoutingRoadRangeSetsUsed())
        {
            // check parameters
            if (routingRoadRangeSets_.getCoordShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingRoadRangeSets: " +
                        routingRoadRangeSets_.getCoordShift() + " != " + (byte)(getShift()) + "!");
            }
            routingRoadRangeSets_.write(out);
        }

        if (isRoutingTransitionSetsUsed())
        {
            // check parameters
            if (routingTransitionSets_.getCoordShift() != (byte)(getShift()))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter coordShift for field RoadRoutingLayer.routingTransitionSets: " +
                        routingTransitionSets_.getCoordShift() + " != " + (byte)(getShift()) + "!");
            }
            routingTransitionSets_.write(out);
        }

        if (isProfilesUsed())
        {
            profiles_.write(out);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getShift().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(shift_));

        content_.write(zserioContext.getContent(), out);

        if (isRoutingRoadRangeMapsUsed())
        {
            routingRoadRangeMaps_.write(zserioContext.getRoutingRoadRangeMaps(), out);
        }

        if (isRoutingTransitionMapsUsed())
        {
            routingTransitionMaps_.write(zserioContext.getRoutingTransitionMaps(), out);
        }

        if (isRoutingRoadRangeSetsUsed())
        {
            routingRoadRangeSets_.write(zserioContext.getRoutingRoadRangeSets(), out);
        }

        if (isRoutingTransitionSetsUsed())
        {
            routingTransitionSets_.write(zserioContext.getRoutingTransitionSets(), out);
        }

        if (isProfilesUsed())
        {
            profiles_.writePacked(out);
        }
    }

    private static final class ZserioElementFactory_profiles implements zserio.runtime.array.PackableElementFactory<nds.routingdata.types.SpeedProfile>
    {
        @Override
        public nds.routingdata.types.SpeedProfile create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.routingdata.types.SpeedProfile(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.routingdata.types.SpeedProfile.ZserioPackingContext();
        }

        @Override
        public nds.routingdata.types.SpeedProfile create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.routingdata.types.SpeedProfile(context, in);
        }
    }

    private byte shift_;
    private nds.routingdata.metadata.RoadRoutingLayerContent content_;
    private nds.routingdata.instantiations.RoutingRoadRangeAttributeMapList routingRoadRangeMaps_;
    private nds.routingdata.instantiations.RoutingRoadTransitionAttributeMapList routingTransitionMaps_;
    private nds.routingdata.instantiations.RoutingRoadRangeAttributeSetList routingRoadRangeSets_;
    private nds.routingdata.instantiations.RoutingRoadTransitionAttributeSetList routingTransitionSets_;
    private zserio.runtime.array.Array profiles_;
}
