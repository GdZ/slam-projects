/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.attributes;

public enum RoutingLaneRangeAttributeType implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioEnum
{
    PLURAL_JUNCTION((short)0),
    CONSUMPTION_UP_EXCESS_SLOPE((short)1),
    CONSUMPTION_DOWN_EXCESS_SLOPE((short)2),
    CONSUMPTION_SPEED_VARIATION((short)3),
    CONSUMPTION_SPEED_DEPENDENCY((short)4),
    CONSUMPTION_AVERAGE_SLOPE((short)5),
    TOURIST_ROUTE_TYPE((short)6),
    NUM_TOLL_GATES((short)7),
    NUM_TRAFFIC_LIGHTS((short)8),
    NUM_GIVE_RIGHT_OF_WAY((short)9),
    NUM_SPEED_CAMERAS((short)10),
    NUM_SPEED_ZONES((short)11),
    NUM_RAILWAY_CROSSINGS((short)12),
    NUM_STATIONS((short)13),
    SPEED_PROFILES_WEEK((short)14),
    SPEED_PROFILES_DAYS((short)15);

    private RoutingLaneRangeAttributeType(short value)
    {
        this.value = value;
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition) throws zserio.runtime.ZserioError
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(getValue());
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public static RoutingLaneRangeAttributeType readEnum(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        return toEnum(in.readVarUInt16());
    }

    public static RoutingLaneRangeAttributeType readEnum(zserio.runtime.array.PackingContext context,
            zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return toEnum(((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get());
    }

    public static RoutingLaneRangeAttributeType toEnum(short value)
    {
        switch (value)
        {
            case (short)0:
                return PLURAL_JUNCTION;
            case (short)1:
                return CONSUMPTION_UP_EXCESS_SLOPE;
            case (short)2:
                return CONSUMPTION_DOWN_EXCESS_SLOPE;
            case (short)3:
                return CONSUMPTION_SPEED_VARIATION;
            case (short)4:
                return CONSUMPTION_SPEED_DEPENDENCY;
            case (short)5:
                return CONSUMPTION_AVERAGE_SLOPE;
            case (short)6:
                return TOURIST_ROUTE_TYPE;
            case (short)7:
                return NUM_TOLL_GATES;
            case (short)8:
                return NUM_TRAFFIC_LIGHTS;
            case (short)9:
                return NUM_GIVE_RIGHT_OF_WAY;
            case (short)10:
                return NUM_SPEED_CAMERAS;
            case (short)11:
                return NUM_SPEED_ZONES;
            case (short)12:
                return NUM_RAILWAY_CROSSINGS;
            case (short)13:
                return NUM_STATIONS;
            case (short)14:
                return SPEED_PROFILES_WEEK;
            case (short)15:
                return SPEED_PROFILES_DAYS;
            default:
                throw new java.lang.IllegalArgumentException(
                        "Unknown value for enumeration RoutingLaneRangeAttributeType: " + value + "!");
        }
    }

    public static RoutingLaneRangeAttributeType toEnum(java.lang.String itemName)
    {
        if (itemName.equals("PLURAL_JUNCTION"))
            return PLURAL_JUNCTION;
        if (itemName.equals("CONSUMPTION_UP_EXCESS_SLOPE"))
            return CONSUMPTION_UP_EXCESS_SLOPE;
        if (itemName.equals("CONSUMPTION_DOWN_EXCESS_SLOPE"))
            return CONSUMPTION_DOWN_EXCESS_SLOPE;
        if (itemName.equals("CONSUMPTION_SPEED_VARIATION"))
            return CONSUMPTION_SPEED_VARIATION;
        if (itemName.equals("CONSUMPTION_SPEED_DEPENDENCY"))
            return CONSUMPTION_SPEED_DEPENDENCY;
        if (itemName.equals("CONSUMPTION_AVERAGE_SLOPE"))
            return CONSUMPTION_AVERAGE_SLOPE;
        if (itemName.equals("TOURIST_ROUTE_TYPE"))
            return TOURIST_ROUTE_TYPE;
        if (itemName.equals("NUM_TOLL_GATES"))
            return NUM_TOLL_GATES;
        if (itemName.equals("NUM_TRAFFIC_LIGHTS"))
            return NUM_TRAFFIC_LIGHTS;
        if (itemName.equals("NUM_GIVE_RIGHT_OF_WAY"))
            return NUM_GIVE_RIGHT_OF_WAY;
        if (itemName.equals("NUM_SPEED_CAMERAS"))
            return NUM_SPEED_CAMERAS;
        if (itemName.equals("NUM_SPEED_ZONES"))
            return NUM_SPEED_ZONES;
        if (itemName.equals("NUM_RAILWAY_CROSSINGS"))
            return NUM_RAILWAY_CROSSINGS;
        if (itemName.equals("NUM_STATIONS"))
            return NUM_STATIONS;
        if (itemName.equals("SPEED_PROFILES_WEEK"))
            return SPEED_PROFILES_WEEK;
        if (itemName.equals("SPEED_PROFILES_DAYS"))
            return SPEED_PROFILES_DAYS;
        throw new java.lang.IllegalArgumentException(
                "Enum item '" + itemName + "' doesn't exist in enumeration RoutingLaneRangeAttributeType!");
    }

    private short value;
}
