/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.attributes;

public class RoutingLaneTransitionAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            specialTransitionCode_ = new zserio.runtime.array.DeltaContext();
            speedVariation_ = new zserio.runtime.array.DeltaContext();
            transitionDuration_ = new zserio.runtime.array.DeltaContext();
            transitionAngle_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getSpecialTransitionCode()
        {
            return specialTransitionCode_;
        }

        public zserio.runtime.array.DeltaContext getSpeedVariation()
        {
            return speedVariation_;
        }

        public zserio.runtime.array.DeltaContext getTransitionDuration()
        {
            return transitionDuration_;
        }

        public zserio.runtime.array.DeltaContext getTransitionAngle()
        {
            return transitionAngle_;
        }

        private zserio.runtime.array.DeltaContext specialTransitionCode_;
        private zserio.runtime.array.DeltaContext speedVariation_;
        private zserio.runtime.array.DeltaContext transitionDuration_;
        private zserio.runtime.array.DeltaContext transitionAngle_;
    };

    public RoutingLaneTransitionAttributeValue(
            nds.routingdata.attributes.RoutingLaneTransitionAttributeType type_)
    {
        this.type_ = type_;
    }

    public RoutingLaneTransitionAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.routingdata.attributes.RoutingLaneTransitionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RoutingLaneTransitionAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.routingdata.attributes.RoutingLaneTransitionAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            return CHOICE_specialTransitionCode;
        case CONSUMPTION_SPEED_VARIATION:
            return CHOICE_speedVariation;
        case TRANSITION_DURATION:
            return CHOICE_transitionDuration;
        case TRANSITION_ANGLE:
            return CHOICE_transitionAngle;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            getSpecialTransitionCode().initPackingContext(zserioContext.getSpecialTransitionCode());
            break;
        case CONSUMPTION_SPEED_VARIATION:
            zserioContext.getSpeedVariation().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case TRANSITION_DURATION:
            zserioContext.getTransitionDuration().init(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getTransitionDuration()));
            break;
        case TRANSITION_ANGLE:
            zserioContext.getTransitionAngle().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getTransitionAngle()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            endBitPosition += getSpecialTransitionCode().bitSizeOf(endBitPosition);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            endBitPosition += 8;
            break;
        case TRANSITION_DURATION:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getTransitionDuration());
            break;
        case TRANSITION_ANGLE:
            endBitPosition += 8;
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            endBitPosition += getSpecialTransitionCode().bitSizeOf(zserioContext.getSpecialTransitionCode(), endBitPosition);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            endBitPosition += zserioContext.getSpeedVariation().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case TRANSITION_DURATION:
            endBitPosition += zserioContext.getTransitionDuration().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getTransitionDuration()));
            break;
        case TRANSITION_ANGLE:
            endBitPosition += zserioContext.getTransitionAngle().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getTransitionAngle()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routingdata.attributes.RoutingLaneTransitionAttributeType getType()
    {
        return this.type_;
    }

    public nds.routingdata.types.SpecialTransitionCode getSpecialTransitionCode()
    {
        return (nds.routingdata.types.SpecialTransitionCode)objectChoice;
    }

    public void setSpecialTransitionCode(nds.routingdata.types.SpecialTransitionCode specialTransitionCode_)
    {
        objectChoice = specialTransitionCode_;
    }

    public short getSpeedVariation()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setSpeedVariation(short speedVariation_)
    {
        objectChoice = speedVariation_;
    }

    public java.math.BigInteger getTransitionDuration()
    {
        return (java.math.BigInteger)objectChoice;
    }

    public void setTransitionDuration(java.math.BigInteger transitionDuration_)
    {
        objectChoice = transitionDuration_;
    }

    public short getTransitionAngle()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setTransitionAngle(short transitionAngle_)
    {
        objectChoice = transitionAngle_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoutingLaneTransitionAttributeValue)
        {
            final RoutingLaneTransitionAttributeValue that = (RoutingLaneTransitionAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case SPECIAL_TRANSITION_CODE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.SpecialTransitionCode)objectChoice);
                break;
            case CONSUMPTION_SPEED_VARIATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case TRANSITION_DURATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.math.BigInteger)objectChoice);
                break;
            case TRANSITION_ANGLE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            objectChoice = nds.routingdata.types.SpecialTransitionCode.readEnum(in);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            objectChoice = in.readUnsignedByte();
            break;
        case TRANSITION_DURATION:
            objectChoice = in.readVarUInt();
            break;
        case TRANSITION_ANGLE:
            objectChoice = in.readUnsignedByte();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            objectChoice = nds.routingdata.types.SpecialTransitionCode.readEnum(zserioContext.getSpecialTransitionCode(), in);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeedVariation().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case TRANSITION_DURATION:
            objectChoice = ((zserio.runtime.array.ArrayElement.BigIntegerArrayElement)
                    zserioContext.getTransitionDuration().read(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), in)).get();
            break;
        case TRANSITION_ANGLE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getTransitionAngle().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            {
                endBitPosition += getSpecialTransitionCode().bitSizeOf(endBitPosition);
            }
            break;
        case CONSUMPTION_SPEED_VARIATION:
            {
                endBitPosition += 8;
            }
            break;
        case TRANSITION_DURATION:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt(getTransitionDuration());
            }
            break;
        case TRANSITION_ANGLE:
            {
                endBitPosition += 8;
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            {
                endBitPosition = getSpecialTransitionCode().initializeOffsets(zserioContext.getSpecialTransitionCode(), endBitPosition);
            }
            break;
        case CONSUMPTION_SPEED_VARIATION:
            {
                endBitPosition += zserioContext.getSpeedVariation().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            }
            break;
        case TRANSITION_DURATION:
            {
                endBitPosition += zserioContext.getTransitionDuration().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(),
                        new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getTransitionDuration()));
            }
            break;
        case TRANSITION_ANGLE:
            {
                endBitPosition += zserioContext.getTransitionAngle().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getTransitionAngle()));
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            getSpecialTransitionCode().write(out);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            out.writeUnsignedByte(getSpeedVariation());
            break;
        case TRANSITION_DURATION:
            out.writeVarUInt(getTransitionDuration());
            break;
        case TRANSITION_ANGLE:
            out.writeUnsignedByte(getTransitionAngle());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SPECIAL_TRANSITION_CODE:
            getSpecialTransitionCode().write(zserioContext.getSpecialTransitionCode(), out);
            break;
        case CONSUMPTION_SPEED_VARIATION:
            zserioContext.getSpeedVariation().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case TRANSITION_DURATION:
            zserioContext.getTransitionDuration().write(new zserio.runtime.array.ArrayTraits.VarUIntArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.BigIntegerArrayElement(getTransitionDuration()));
            break;
        case TRANSITION_ANGLE:
            zserioContext.getTransitionAngle().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getTransitionAngle()));
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneTransitionAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_specialTransitionCode = 0;
    public static final int CHOICE_speedVariation = 1;
    public static final int CHOICE_transitionDuration = 2;
    public static final int CHOICE_transitionAngle = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.routingdata.attributes.RoutingLaneTransitionAttributeType type_;
    private java.lang.Object objectChoice;
}
