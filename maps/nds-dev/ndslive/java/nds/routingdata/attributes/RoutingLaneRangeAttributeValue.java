/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.attributes;

public class RoutingLaneRangeAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            pluralJunction_ = new zserio.runtime.array.DeltaContext();
            upExcessSlope_ = new zserio.runtime.array.DeltaContext();
            downExcessSlope_ = new zserio.runtime.array.DeltaContext();
            speedVariation_ = new zserio.runtime.array.DeltaContext();
            consumptionSpeedDependencyCurve_ = new nds.routingdata.types.ConsumptionSpeedDependencyCurve.ZserioPackingContext();
            averageSlope_ = new zserio.runtime.array.DeltaContext();
            touristRouteType_ = new zserio.runtime.array.DeltaContext();
            numTollGates_ = new zserio.runtime.array.DeltaContext();
            numTrafficLights_ = new zserio.runtime.array.DeltaContext();
            numGiveRightOfWay_ = new zserio.runtime.array.DeltaContext();
            numSpeedCameras_ = new zserio.runtime.array.DeltaContext();
            numSpeedZones_ = new zserio.runtime.array.DeltaContext();
            numRailwayCrossings_ = new zserio.runtime.array.DeltaContext();
            numStations_ = new zserio.runtime.array.DeltaContext();
            speedProfilesWeek_ = new nds.routingdata.types.SpeedProfilesWeek.ZserioPackingContext();
            speedProfilesDays_ = new nds.routingdata.types.SpeedProfilesDays.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getPluralJunction()
        {
            return pluralJunction_;
        }

        public zserio.runtime.array.DeltaContext getUpExcessSlope()
        {
            return upExcessSlope_;
        }

        public zserio.runtime.array.DeltaContext getDownExcessSlope()
        {
            return downExcessSlope_;
        }

        public zserio.runtime.array.DeltaContext getSpeedVariation()
        {
            return speedVariation_;
        }

        public nds.routingdata.types.ConsumptionSpeedDependencyCurve.ZserioPackingContext getConsumptionSpeedDependencyCurve()
        {
            return consumptionSpeedDependencyCurve_;
        }

        public zserio.runtime.array.DeltaContext getAverageSlope()
        {
            return averageSlope_;
        }

        public zserio.runtime.array.DeltaContext getTouristRouteType()
        {
            return touristRouteType_;
        }

        public zserio.runtime.array.DeltaContext getNumTollGates()
        {
            return numTollGates_;
        }

        public zserio.runtime.array.DeltaContext getNumTrafficLights()
        {
            return numTrafficLights_;
        }

        public zserio.runtime.array.DeltaContext getNumGiveRightOfWay()
        {
            return numGiveRightOfWay_;
        }

        public zserio.runtime.array.DeltaContext getNumSpeedCameras()
        {
            return numSpeedCameras_;
        }

        public zserio.runtime.array.DeltaContext getNumSpeedZones()
        {
            return numSpeedZones_;
        }

        public zserio.runtime.array.DeltaContext getNumRailwayCrossings()
        {
            return numRailwayCrossings_;
        }

        public zserio.runtime.array.DeltaContext getNumStations()
        {
            return numStations_;
        }

        public nds.routingdata.types.SpeedProfilesWeek.ZserioPackingContext getSpeedProfilesWeek()
        {
            return speedProfilesWeek_;
        }

        public nds.routingdata.types.SpeedProfilesDays.ZserioPackingContext getSpeedProfilesDays()
        {
            return speedProfilesDays_;
        }

        private zserio.runtime.array.DeltaContext pluralJunction_;
        private zserio.runtime.array.DeltaContext upExcessSlope_;
        private zserio.runtime.array.DeltaContext downExcessSlope_;
        private zserio.runtime.array.DeltaContext speedVariation_;
        private nds.routingdata.types.ConsumptionSpeedDependencyCurve.ZserioPackingContext consumptionSpeedDependencyCurve_;
        private zserio.runtime.array.DeltaContext averageSlope_;
        private zserio.runtime.array.DeltaContext touristRouteType_;
        private zserio.runtime.array.DeltaContext numTollGates_;
        private zserio.runtime.array.DeltaContext numTrafficLights_;
        private zserio.runtime.array.DeltaContext numGiveRightOfWay_;
        private zserio.runtime.array.DeltaContext numSpeedCameras_;
        private zserio.runtime.array.DeltaContext numSpeedZones_;
        private zserio.runtime.array.DeltaContext numRailwayCrossings_;
        private zserio.runtime.array.DeltaContext numStations_;
        private nds.routingdata.types.SpeedProfilesWeek.ZserioPackingContext speedProfilesWeek_;
        private nds.routingdata.types.SpeedProfilesDays.ZserioPackingContext speedProfilesDays_;
    };

    public RoutingLaneRangeAttributeValue(
            nds.routingdata.attributes.RoutingLaneRangeAttributeType type_)
    {
        this.type_ = type_;
    }

    public RoutingLaneRangeAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.routingdata.attributes.RoutingLaneRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public RoutingLaneRangeAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.routingdata.attributes.RoutingLaneRangeAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PLURAL_JUNCTION:
            return CHOICE_pluralJunction;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            return CHOICE_upExcessSlope;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            return CHOICE_downExcessSlope;
        case CONSUMPTION_SPEED_VARIATION:
            return CHOICE_speedVariation;
        case CONSUMPTION_SPEED_DEPENDENCY:
            return CHOICE_consumptionSpeedDependencyCurve;
        case CONSUMPTION_AVERAGE_SLOPE:
            return CHOICE_averageSlope;
        case TOURIST_ROUTE_TYPE:
            return CHOICE_touristRouteType;
        case NUM_TOLL_GATES:
            return CHOICE_numTollGates;
        case NUM_TRAFFIC_LIGHTS:
            return CHOICE_numTrafficLights;
        case NUM_GIVE_RIGHT_OF_WAY:
            return CHOICE_numGiveRightOfWay;
        case NUM_SPEED_CAMERAS:
            return CHOICE_numSpeedCameras;
        case NUM_SPEED_ZONES:
            return CHOICE_numSpeedZones;
        case NUM_RAILWAY_CROSSINGS:
            return CHOICE_numRailwayCrossings;
        case NUM_STATIONS:
            return CHOICE_numStations;
        case SPEED_PROFILES_WEEK:
            return CHOICE_speedProfilesWeek;
        case SPEED_PROFILES_DAYS:
            return CHOICE_speedProfilesDays;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PLURAL_JUNCTION:
            getPluralJunction().initPackingContext(zserioContext.getPluralJunction());
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            zserioContext.getUpExcessSlope().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getUpExcessSlope()));
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            zserioContext.getDownExcessSlope().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getDownExcessSlope()));
            break;
        case CONSUMPTION_SPEED_VARIATION:
            zserioContext.getSpeedVariation().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            getConsumptionSpeedDependencyCurve().initPackingContext(zserioContext.getConsumptionSpeedDependencyCurve());
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            zserioContext.getAverageSlope().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getAverageSlope()));
            break;
        case TOURIST_ROUTE_TYPE:
            getTouristRouteType().initPackingContext(zserioContext.getTouristRouteType());
            break;
        case NUM_TOLL_GATES:
            zserioContext.getNumTollGates().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTollGates()));
            break;
        case NUM_TRAFFIC_LIGHTS:
            zserioContext.getNumTrafficLights().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTrafficLights()));
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            zserioContext.getNumGiveRightOfWay().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumGiveRightOfWay()));
            break;
        case NUM_SPEED_CAMERAS:
            zserioContext.getNumSpeedCameras().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedCameras()));
            break;
        case NUM_SPEED_ZONES:
            zserioContext.getNumSpeedZones().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedZones()));
            break;
        case NUM_RAILWAY_CROSSINGS:
            zserioContext.getNumRailwayCrossings().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumRailwayCrossings()));
            break;
        case NUM_STATIONS:
            zserioContext.getNumStations().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumStations()));
            break;
        case SPEED_PROFILES_WEEK:
            getSpeedProfilesWeek().initPackingContext(zserioContext.getSpeedProfilesWeek());
            break;
        case SPEED_PROFILES_DAYS:
            getSpeedProfilesDays().initPackingContext(zserioContext.getSpeedProfilesDays());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PLURAL_JUNCTION:
            endBitPosition += getPluralJunction().bitSizeOf(endBitPosition);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            endBitPosition += 8;
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            endBitPosition += 8;
            break;
        case CONSUMPTION_SPEED_VARIATION:
            endBitPosition += 8;
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            endBitPosition += getConsumptionSpeedDependencyCurve().bitSizeOf(endBitPosition);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            endBitPosition += 8;
            break;
        case TOURIST_ROUTE_TYPE:
            endBitPosition += getTouristRouteType().bitSizeOf(endBitPosition);
            break;
        case NUM_TOLL_GATES:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumTollGates());
            break;
        case NUM_TRAFFIC_LIGHTS:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumTrafficLights());
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumGiveRightOfWay());
            break;
        case NUM_SPEED_CAMERAS:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumSpeedCameras());
            break;
        case NUM_SPEED_ZONES:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumSpeedZones());
            break;
        case NUM_RAILWAY_CROSSINGS:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumRailwayCrossings());
            break;
        case NUM_STATIONS:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumStations());
            break;
        case SPEED_PROFILES_WEEK:
            endBitPosition += getSpeedProfilesWeek().bitSizeOf(endBitPosition);
            break;
        case SPEED_PROFILES_DAYS:
            endBitPosition += getSpeedProfilesDays().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PLURAL_JUNCTION:
            endBitPosition += getPluralJunction().bitSizeOf(zserioContext.getPluralJunction(), endBitPosition);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            endBitPosition += zserioContext.getUpExcessSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getUpExcessSlope()));
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            endBitPosition += zserioContext.getDownExcessSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getDownExcessSlope()));
            break;
        case CONSUMPTION_SPEED_VARIATION:
            endBitPosition += zserioContext.getSpeedVariation().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            endBitPosition += getConsumptionSpeedDependencyCurve().bitSizeOf(zserioContext.getConsumptionSpeedDependencyCurve(), endBitPosition);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            endBitPosition += zserioContext.getAverageSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getAverageSlope()));
            break;
        case TOURIST_ROUTE_TYPE:
            endBitPosition += getTouristRouteType().bitSizeOf(zserioContext.getTouristRouteType(), endBitPosition);
            break;
        case NUM_TOLL_GATES:
            endBitPosition += zserioContext.getNumTollGates().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTollGates()));
            break;
        case NUM_TRAFFIC_LIGHTS:
            endBitPosition += zserioContext.getNumTrafficLights().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTrafficLights()));
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            endBitPosition += zserioContext.getNumGiveRightOfWay().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumGiveRightOfWay()));
            break;
        case NUM_SPEED_CAMERAS:
            endBitPosition += zserioContext.getNumSpeedCameras().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedCameras()));
            break;
        case NUM_SPEED_ZONES:
            endBitPosition += zserioContext.getNumSpeedZones().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedZones()));
            break;
        case NUM_RAILWAY_CROSSINGS:
            endBitPosition += zserioContext.getNumRailwayCrossings().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumRailwayCrossings()));
            break;
        case NUM_STATIONS:
            endBitPosition += zserioContext.getNumStations().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumStations()));
            break;
        case SPEED_PROFILES_WEEK:
            endBitPosition += getSpeedProfilesWeek().bitSizeOf(zserioContext.getSpeedProfilesWeek(), endBitPosition);
            break;
        case SPEED_PROFILES_DAYS:
            endBitPosition += getSpeedProfilesDays().bitSizeOf(zserioContext.getSpeedProfilesDays(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routingdata.attributes.RoutingLaneRangeAttributeType getType()
    {
        return this.type_;
    }

    public nds.routingdata.types.PluralJunction getPluralJunction()
    {
        return (nds.routingdata.types.PluralJunction)objectChoice;
    }

    public void setPluralJunction(nds.routingdata.types.PluralJunction pluralJunction_)
    {
        objectChoice = pluralJunction_;
    }

    public short getUpExcessSlope()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setUpExcessSlope(short upExcessSlope_)
    {
        objectChoice = upExcessSlope_;
    }

    public short getDownExcessSlope()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setDownExcessSlope(short downExcessSlope_)
    {
        objectChoice = downExcessSlope_;
    }

    public short getSpeedVariation()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setSpeedVariation(short speedVariation_)
    {
        objectChoice = speedVariation_;
    }

    public nds.routingdata.types.ConsumptionSpeedDependencyCurve getConsumptionSpeedDependencyCurve()
    {
        return (nds.routingdata.types.ConsumptionSpeedDependencyCurve)objectChoice;
    }

    public void setConsumptionSpeedDependencyCurve(nds.routingdata.types.ConsumptionSpeedDependencyCurve consumptionSpeedDependencyCurve_)
    {
        objectChoice = consumptionSpeedDependencyCurve_;
    }

    public byte getAverageSlope()
    {
        return (java.lang.Byte)objectChoice;
    }

    public void setAverageSlope(byte averageSlope_)
    {
        objectChoice = averageSlope_;
    }

    public nds.routingdata.types.TouristRouteType getTouristRouteType()
    {
        return (nds.routingdata.types.TouristRouteType)objectChoice;
    }

    public void setTouristRouteType(nds.routingdata.types.TouristRouteType touristRouteType_)
    {
        objectChoice = touristRouteType_;
    }

    public short getNumTollGates()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumTollGates(short numTollGates_)
    {
        objectChoice = numTollGates_;
    }

    public short getNumTrafficLights()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumTrafficLights(short numTrafficLights_)
    {
        objectChoice = numTrafficLights_;
    }

    public short getNumGiveRightOfWay()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumGiveRightOfWay(short numGiveRightOfWay_)
    {
        objectChoice = numGiveRightOfWay_;
    }

    public short getNumSpeedCameras()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumSpeedCameras(short numSpeedCameras_)
    {
        objectChoice = numSpeedCameras_;
    }

    public short getNumSpeedZones()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumSpeedZones(short numSpeedZones_)
    {
        objectChoice = numSpeedZones_;
    }

    public short getNumRailwayCrossings()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumRailwayCrossings(short numRailwayCrossings_)
    {
        objectChoice = numRailwayCrossings_;
    }

    public short getNumStations()
    {
        return (java.lang.Short)objectChoice;
    }

    public void setNumStations(short numStations_)
    {
        objectChoice = numStations_;
    }

    public nds.routingdata.types.SpeedProfilesWeek getSpeedProfilesWeek()
    {
        return (nds.routingdata.types.SpeedProfilesWeek)objectChoice;
    }

    public void setSpeedProfilesWeek(nds.routingdata.types.SpeedProfilesWeek speedProfilesWeek_)
    {
        objectChoice = speedProfilesWeek_;
    }

    public nds.routingdata.types.SpeedProfilesDays getSpeedProfilesDays()
    {
        return (nds.routingdata.types.SpeedProfilesDays)objectChoice;
    }

    public void setSpeedProfilesDays(nds.routingdata.types.SpeedProfilesDays speedProfilesDays_)
    {
        objectChoice = speedProfilesDays_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoutingLaneRangeAttributeValue)
        {
            final RoutingLaneRangeAttributeValue that = (RoutingLaneRangeAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PLURAL_JUNCTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.PluralJunction)objectChoice);
                break;
            case CONSUMPTION_UP_EXCESS_SLOPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case CONSUMPTION_DOWN_EXCESS_SLOPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case CONSUMPTION_SPEED_VARIATION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case CONSUMPTION_SPEED_DEPENDENCY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.ConsumptionSpeedDependencyCurve)objectChoice);
                break;
            case CONSUMPTION_AVERAGE_SLOPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Byte)objectChoice);
                break;
            case TOURIST_ROUTE_TYPE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.TouristRouteType)objectChoice);
                break;
            case NUM_TOLL_GATES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_TRAFFIC_LIGHTS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_GIVE_RIGHT_OF_WAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_SPEED_CAMERAS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_SPEED_ZONES:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_RAILWAY_CROSSINGS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case NUM_STATIONS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.Short)objectChoice);
                break;
            case SPEED_PROFILES_WEEK:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.SpeedProfilesWeek)objectChoice);
                break;
            case SPEED_PROFILES_DAYS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.routingdata.types.SpeedProfilesDays)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PLURAL_JUNCTION:
            objectChoice = nds.routingdata.types.PluralJunction.readEnum(in);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            objectChoice = in.readUnsignedByte();
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            objectChoice = in.readUnsignedByte();
            break;
        case CONSUMPTION_SPEED_VARIATION:
            objectChoice = in.readUnsignedByte();
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            objectChoice = new nds.routingdata.types.ConsumptionSpeedDependencyCurve(in);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            objectChoice = in.readByte();
            break;
        case TOURIST_ROUTE_TYPE:
            objectChoice = nds.routingdata.types.TouristRouteType.readEnum(in);
            break;
        case NUM_TOLL_GATES:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_TRAFFIC_LIGHTS:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_SPEED_CAMERAS:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_SPEED_ZONES:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_RAILWAY_CROSSINGS:
            objectChoice = in.readVarUInt16();
            break;
        case NUM_STATIONS:
            objectChoice = in.readVarUInt16();
            break;
        case SPEED_PROFILES_WEEK:
            objectChoice = new nds.routingdata.types.SpeedProfilesWeek(in);
            break;
        case SPEED_PROFILES_DAYS:
            objectChoice = new nds.routingdata.types.SpeedProfilesDays(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PLURAL_JUNCTION:
            objectChoice = nds.routingdata.types.PluralJunction.readEnum(zserioContext.getPluralJunction(), in);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getUpExcessSlope().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getDownExcessSlope().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case CONSUMPTION_SPEED_VARIATION:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getSpeedVariation().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            objectChoice = new nds.routingdata.types.ConsumptionSpeedDependencyCurve(zserioContext.getConsumptionSpeedDependencyCurve(), in);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            objectChoice = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                    zserioContext.getAverageSlope().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();
            break;
        case TOURIST_ROUTE_TYPE:
            objectChoice = nds.routingdata.types.TouristRouteType.readEnum(zserioContext.getTouristRouteType(), in);
            break;
        case NUM_TOLL_GATES:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumTollGates().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_TRAFFIC_LIGHTS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumTrafficLights().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumGiveRightOfWay().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_SPEED_CAMERAS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumSpeedCameras().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_SPEED_ZONES:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumSpeedZones().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_RAILWAY_CROSSINGS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumRailwayCrossings().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case NUM_STATIONS:
            objectChoice = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getNumStations().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
            break;
        case SPEED_PROFILES_WEEK:
            objectChoice = new nds.routingdata.types.SpeedProfilesWeek(zserioContext.getSpeedProfilesWeek(), in);
            break;
        case SPEED_PROFILES_DAYS:
            objectChoice = new nds.routingdata.types.SpeedProfilesDays(zserioContext.getSpeedProfilesDays(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PLURAL_JUNCTION:
            {
                endBitPosition += getPluralJunction().bitSizeOf(endBitPosition);
            }
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            {
                endBitPosition += 8;
            }
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            {
                endBitPosition += 8;
            }
            break;
        case CONSUMPTION_SPEED_VARIATION:
            {
                endBitPosition += 8;
            }
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            {
                endBitPosition = getConsumptionSpeedDependencyCurve().initializeOffsets(endBitPosition);
            }
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            {
                endBitPosition += 8;
            }
            break;
        case TOURIST_ROUTE_TYPE:
            {
                endBitPosition += getTouristRouteType().bitSizeOf(endBitPosition);
            }
            break;
        case NUM_TOLL_GATES:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumTollGates());
            }
            break;
        case NUM_TRAFFIC_LIGHTS:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumTrafficLights());
            }
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumGiveRightOfWay());
            }
            break;
        case NUM_SPEED_CAMERAS:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumSpeedCameras());
            }
            break;
        case NUM_SPEED_ZONES:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumSpeedZones());
            }
            break;
        case NUM_RAILWAY_CROSSINGS:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumRailwayCrossings());
            }
            break;
        case NUM_STATIONS:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(getNumStations());
            }
            break;
        case SPEED_PROFILES_WEEK:
            {
                endBitPosition = getSpeedProfilesWeek().initializeOffsets(endBitPosition);
            }
            break;
        case SPEED_PROFILES_DAYS:
            {
                endBitPosition = getSpeedProfilesDays().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PLURAL_JUNCTION:
            {
                endBitPosition = getPluralJunction().initializeOffsets(zserioContext.getPluralJunction(), endBitPosition);
            }
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            {
                endBitPosition += zserioContext.getUpExcessSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getUpExcessSlope()));
            }
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            {
                endBitPosition += zserioContext.getDownExcessSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getDownExcessSlope()));
            }
            break;
        case CONSUMPTION_SPEED_VARIATION:
            {
                endBitPosition += zserioContext.getSpeedVariation().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            }
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            {
                endBitPosition = getConsumptionSpeedDependencyCurve().initializeOffsets(zserioContext.getConsumptionSpeedDependencyCurve(), endBitPosition);
            }
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            {
                endBitPosition += zserioContext.getAverageSlope().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                        new zserio.runtime.array.ArrayElement.ByteArrayElement(getAverageSlope()));
            }
            break;
        case TOURIST_ROUTE_TYPE:
            {
                endBitPosition = getTouristRouteType().initializeOffsets(zserioContext.getTouristRouteType(), endBitPosition);
            }
            break;
        case NUM_TOLL_GATES:
            {
                endBitPosition += zserioContext.getNumTollGates().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTollGates()));
            }
            break;
        case NUM_TRAFFIC_LIGHTS:
            {
                endBitPosition += zserioContext.getNumTrafficLights().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTrafficLights()));
            }
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            {
                endBitPosition += zserioContext.getNumGiveRightOfWay().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumGiveRightOfWay()));
            }
            break;
        case NUM_SPEED_CAMERAS:
            {
                endBitPosition += zserioContext.getNumSpeedCameras().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedCameras()));
            }
            break;
        case NUM_SPEED_ZONES:
            {
                endBitPosition += zserioContext.getNumSpeedZones().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedZones()));
            }
            break;
        case NUM_RAILWAY_CROSSINGS:
            {
                endBitPosition += zserioContext.getNumRailwayCrossings().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumRailwayCrossings()));
            }
            break;
        case NUM_STATIONS:
            {
                endBitPosition += zserioContext.getNumStations().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                        new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumStations()));
            }
            break;
        case SPEED_PROFILES_WEEK:
            {
                endBitPosition = getSpeedProfilesWeek().initializeOffsets(zserioContext.getSpeedProfilesWeek(), endBitPosition);
            }
            break;
        case SPEED_PROFILES_DAYS:
            {
                endBitPosition = getSpeedProfilesDays().initializeOffsets(zserioContext.getSpeedProfilesDays(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PLURAL_JUNCTION:
            getPluralJunction().write(out);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            out.writeUnsignedByte(getUpExcessSlope());
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            out.writeUnsignedByte(getDownExcessSlope());
            break;
        case CONSUMPTION_SPEED_VARIATION:
            out.writeUnsignedByte(getSpeedVariation());
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            getConsumptionSpeedDependencyCurve().write(out);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            out.writeByte(getAverageSlope());
            break;
        case TOURIST_ROUTE_TYPE:
            getTouristRouteType().write(out);
            break;
        case NUM_TOLL_GATES:
            out.writeVarUInt16(getNumTollGates());
            break;
        case NUM_TRAFFIC_LIGHTS:
            out.writeVarUInt16(getNumTrafficLights());
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            out.writeVarUInt16(getNumGiveRightOfWay());
            break;
        case NUM_SPEED_CAMERAS:
            out.writeVarUInt16(getNumSpeedCameras());
            break;
        case NUM_SPEED_ZONES:
            out.writeVarUInt16(getNumSpeedZones());
            break;
        case NUM_RAILWAY_CROSSINGS:
            out.writeVarUInt16(getNumRailwayCrossings());
            break;
        case NUM_STATIONS:
            out.writeVarUInt16(getNumStations());
            break;
        case SPEED_PROFILES_WEEK:
            getSpeedProfilesWeek().write(out);
            break;
        case SPEED_PROFILES_DAYS:
            getSpeedProfilesDays().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PLURAL_JUNCTION:
            getPluralJunction().write(zserioContext.getPluralJunction(), out);
            break;
        case CONSUMPTION_UP_EXCESS_SLOPE:
            zserioContext.getUpExcessSlope().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getUpExcessSlope()));
            break;
        case CONSUMPTION_DOWN_EXCESS_SLOPE:
            zserioContext.getDownExcessSlope().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getDownExcessSlope()));
            break;
        case CONSUMPTION_SPEED_VARIATION:
            zserioContext.getSpeedVariation().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getSpeedVariation()));
            break;
        case CONSUMPTION_SPEED_DEPENDENCY:
            getConsumptionSpeedDependencyCurve().write(zserioContext.getConsumptionSpeedDependencyCurve(), out);
            break;
        case CONSUMPTION_AVERAGE_SLOPE:
            zserioContext.getAverageSlope().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ByteArrayElement(getAverageSlope()));
            break;
        case TOURIST_ROUTE_TYPE:
            getTouristRouteType().write(zserioContext.getTouristRouteType(), out);
            break;
        case NUM_TOLL_GATES:
            zserioContext.getNumTollGates().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTollGates()));
            break;
        case NUM_TRAFFIC_LIGHTS:
            zserioContext.getNumTrafficLights().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumTrafficLights()));
            break;
        case NUM_GIVE_RIGHT_OF_WAY:
            zserioContext.getNumGiveRightOfWay().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumGiveRightOfWay()));
            break;
        case NUM_SPEED_CAMERAS:
            zserioContext.getNumSpeedCameras().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedCameras()));
            break;
        case NUM_SPEED_ZONES:
            zserioContext.getNumSpeedZones().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumSpeedZones()));
            break;
        case NUM_RAILWAY_CROSSINGS:
            zserioContext.getNumRailwayCrossings().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumRailwayCrossings()));
            break;
        case NUM_STATIONS:
            zserioContext.getNumStations().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(getNumStations()));
            break;
        case SPEED_PROFILES_WEEK:
            getSpeedProfilesWeek().write(zserioContext.getSpeedProfilesWeek(), out);
            break;
        case SPEED_PROFILES_DAYS:
            getSpeedProfilesDays().write(zserioContext.getSpeedProfilesDays(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice RoutingLaneRangeAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_pluralJunction = 0;
    public static final int CHOICE_upExcessSlope = 1;
    public static final int CHOICE_downExcessSlope = 2;
    public static final int CHOICE_speedVariation = 3;
    public static final int CHOICE_consumptionSpeedDependencyCurve = 4;
    public static final int CHOICE_averageSlope = 5;
    public static final int CHOICE_touristRouteType = 6;
    public static final int CHOICE_numTollGates = 7;
    public static final int CHOICE_numTrafficLights = 8;
    public static final int CHOICE_numGiveRightOfWay = 9;
    public static final int CHOICE_numSpeedCameras = 10;
    public static final int CHOICE_numSpeedZones = 11;
    public static final int CHOICE_numRailwayCrossings = 12;
    public static final int CHOICE_numStations = 13;
    public static final int CHOICE_speedProfilesWeek = 14;
    public static final int CHOICE_speedProfilesDays = 15;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.routingdata.attributes.RoutingLaneRangeAttributeType type_;
    private java.lang.Object objectChoice;
}
