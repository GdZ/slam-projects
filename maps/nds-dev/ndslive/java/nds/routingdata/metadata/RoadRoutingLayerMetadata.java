/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.routingdata.metadata;

public class RoadRoutingLayerMetadata implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            content_ = new zserio.runtime.array.DeltaContext();
            roadRangeAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata.ZserioPackingContext();
            roadTransitionAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata.ZserioPackingContext();
            excessSlopeThreshold_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getContent()
        {
            return content_;
        }

        public nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata.ZserioPackingContext getRoadRangeAttributeMetadata()
        {
            return roadRangeAttributeMetadata_;
        }

        public nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata.ZserioPackingContext getRoadTransitionAttributeMetadata()
        {
            return roadTransitionAttributeMetadata_;
        }

        public zserio.runtime.array.DeltaContext getExcessSlopeThreshold()
        {
            return excessSlopeThreshold_;
        }

        private zserio.runtime.array.DeltaContext content_;
        private nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata.ZserioPackingContext roadRangeAttributeMetadata_;
        private nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata.ZserioPackingContext roadTransitionAttributeMetadata_;
        private zserio.runtime.array.DeltaContext excessSlopeThreshold_;
    };

    public RoadRoutingLayerMetadata()
    {
    }

    public RoadRoutingLayerMetadata(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadRoutingLayerMetadata(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadRoutingLayerMetadata(
            nds.routingdata.metadata.RoadRoutingLayerContent content_,
            nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata roadRangeAttributeMetadata_,
            nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata roadTransitionAttributeMetadata_,
            nds.core.types.RoadType[] coveredRoadTypes_,
            boolean hasEcoRoutingAttributes_,
            java.lang.Short excessSlopeThreshold_)
    {
        setContent(content_);
        setRoadRangeAttributeMetadata(roadRangeAttributeMetadata_);
        setRoadTransitionAttributeMetadata(roadTransitionAttributeMetadata_);
        setCoveredRoadTypes(coveredRoadTypes_);
        setHasEcoRoutingAttributes(hasEcoRoutingAttributes_);
        setExcessSlopeThreshold(excessSlopeThreshold_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.initPackingContext(zserioContext.getContent());
        if (isRoadRangeAttributeMetadataUsed())
        {
            roadRangeAttributeMetadata_.initPackingContext(zserioContext.getRoadRangeAttributeMetadata());
        }
        if (isRoadTransitionAttributeMetadataUsed())
        {
            roadTransitionAttributeMetadata_.initPackingContext(zserioContext.getRoadTransitionAttributeMetadata());
        }
        if (isExcessSlopeThresholdUsed())
        {
            zserioContext.getExcessSlopeThreshold().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(excessSlopeThreshold_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoadRangeAttributeMetadataUsed())
        {
            endBitPosition += roadRangeAttributeMetadata_.bitSizeOf(endBitPosition);
        }
        if (isRoadTransitionAttributeMetadataUsed())
        {
            endBitPosition += roadTransitionAttributeMetadata_.bitSizeOf(endBitPosition);
        }
        endBitPosition += coveredRoadTypes_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isExcessSlopeThresholdUsed())
        {
            endBitPosition += 8;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(zserioContext.getContent(), endBitPosition);
        if (isRoadRangeAttributeMetadataUsed())
        {
            endBitPosition += roadRangeAttributeMetadata_.bitSizeOf(zserioContext.getRoadRangeAttributeMetadata(), endBitPosition);
        }
        if (isRoadTransitionAttributeMetadataUsed())
        {
            endBitPosition += roadTransitionAttributeMetadata_.bitSizeOf(zserioContext.getRoadTransitionAttributeMetadata(), endBitPosition);
        }
        endBitPosition += coveredRoadTypes_.bitSizeOfPacked(endBitPosition);
        endBitPosition += 1;
        if (isExcessSlopeThresholdUsed())
        {
            endBitPosition += zserioContext.getExcessSlopeThreshold().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(excessSlopeThreshold_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.routingdata.metadata.RoadRoutingLayerContent getContent()
    {
        return content_;
    }

    public void setContent(nds.routingdata.metadata.RoadRoutingLayerContent content_)
    {
        this.content_ = content_;
    }

    public nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata getRoadRangeAttributeMetadata()
    {
        return roadRangeAttributeMetadata_;
    }

    public void setRoadRangeAttributeMetadata(nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata roadRangeAttributeMetadata_)
    {
        this.roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
    }

    public boolean isRoadRangeAttributeMetadataUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS));
    }

    public boolean isRoadRangeAttributeMetadataSet()
    {
        return (roadRangeAttributeMetadata_ != null);
    }

    public void resetRoadRangeAttributeMetadata()
    {
        this.roadRangeAttributeMetadata_ = null;
    }

    public nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata getRoadTransitionAttributeMetadata()
    {
        return roadTransitionAttributeMetadata_;
    }

    public void setRoadTransitionAttributeMetadata(nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata roadTransitionAttributeMetadata_)
    {
        this.roadTransitionAttributeMetadata_ = roadTransitionAttributeMetadata_;
    }

    public boolean isRoadTransitionAttributeMetadataUsed()
    {
        return ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS));
    }

    public boolean isRoadTransitionAttributeMetadataSet()
    {
        return (roadTransitionAttributeMetadata_ != null);
    }

    public void resetRoadTransitionAttributeMetadata()
    {
        this.roadTransitionAttributeMetadata_ = null;
    }

    public nds.core.types.RoadType[] getCoveredRoadTypes()
    {
        return (coveredRoadTypes_ == null) ? null : coveredRoadTypes_.getRawArray();
    }

    public void setCoveredRoadTypes(nds.core.types.RoadType[] coveredRoadTypes_)
    {
        this.coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class, coveredRoadTypes_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public boolean getHasEcoRoutingAttributes()
    {
        return hasEcoRoutingAttributes_;
    }

    public void setHasEcoRoutingAttributes(boolean hasEcoRoutingAttributes_)
    {
        this.hasEcoRoutingAttributes_ = hasEcoRoutingAttributes_;
    }

    public java.lang.Short getExcessSlopeThreshold()
    {
        return excessSlopeThreshold_;
    }

    public void setExcessSlopeThreshold(java.lang.Short excessSlopeThreshold_)
    {
        this.excessSlopeThreshold_ = excessSlopeThreshold_;
    }

    public boolean isExcessSlopeThresholdUsed()
    {
        return (getHasEcoRoutingAttributes());
    }

    public boolean isExcessSlopeThresholdSet()
    {
        return (excessSlopeThreshold_ != null);
    }

    public void resetExcessSlopeThreshold()
    {
        this.excessSlopeThreshold_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadRoutingLayerMetadata)
        {
            final RoadRoutingLayerMetadata that = (RoadRoutingLayerMetadata)obj;

            return
                    ((content_ == null) ? that.content_ == null : content_.equals(that.content_)) &&
                    ((!isRoadRangeAttributeMetadataUsed()) ? !that.isRoadRangeAttributeMetadataUsed() :
                        ((roadRangeAttributeMetadata_ == null) ? that.roadRangeAttributeMetadata_ == null : roadRangeAttributeMetadata_.equals(that.roadRangeAttributeMetadata_))) &&
                    ((!isRoadTransitionAttributeMetadataUsed()) ? !that.isRoadTransitionAttributeMetadataUsed() :
                        ((roadTransitionAttributeMetadata_ == null) ? that.roadTransitionAttributeMetadata_ == null : roadTransitionAttributeMetadata_.equals(that.roadTransitionAttributeMetadata_))) &&
                    ((coveredRoadTypes_ == null) ? that.coveredRoadTypes_ == null : coveredRoadTypes_.equals(that.coveredRoadTypes_)) &&
                    hasEcoRoutingAttributes_ == that.hasEcoRoutingAttributes_ &&
                    ((!isExcessSlopeThresholdUsed()) ? !that.isExcessSlopeThresholdUsed() :
                        ((excessSlopeThreshold_ == null) ? that.excessSlopeThreshold_ == null : excessSlopeThreshold_.equals(that.excessSlopeThreshold_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, content_);
        if (isRoadRangeAttributeMetadataUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadRangeAttributeMetadata_);
        if (isRoadTransitionAttributeMetadataUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, roadTransitionAttributeMetadata_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, coveredRoadTypes_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasEcoRoutingAttributes_);
        if (isExcessSlopeThresholdUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, excessSlopeThreshold_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        content_ = new nds.routingdata.metadata.RoadRoutingLayerContent(in);

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS))
        {
            roadRangeAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata(in);
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS))
        {
            roadTransitionAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata(in);
        }

        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.read(in);

        hasEcoRoutingAttributes_ = in.readBool();

        if (getHasEcoRoutingAttributes())
        {
            excessSlopeThreshold_ = in.readUnsignedByte();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_ = new nds.routingdata.metadata.RoadRoutingLayerContent(zserioContext.getContent(), in);

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_RANGE_SETS))
        {
            roadRangeAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata(zserioContext.getRoadRangeAttributeMetadata(), in);
        }

        if ((getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_MAPS) || (getContent().and(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS)).equals(nds.routingdata.metadata.RoadRoutingLayerContent.Values.ROAD_TRANSITION_SETS))
        {
            roadTransitionAttributeMetadata_ = new nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata(zserioContext.getRoadTransitionAttributeMetadata(), in);
        }

        coveredRoadTypes_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.core.types.RoadType.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.core.types.RoadType>(new ZserioElementFactory_coveredRoadTypes()),
                zserio.runtime.array.ArrayType.AUTO);
        coveredRoadTypes_.readPacked(in);

        hasEcoRoutingAttributes_ = in.readBool();

        if (getHasEcoRoutingAttributes())
        {
            excessSlopeThreshold_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getExcessSlopeThreshold().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += content_.bitSizeOf(endBitPosition);
        if (isRoadRangeAttributeMetadataUsed())
        {
            endBitPosition = roadRangeAttributeMetadata_.initializeOffsets(endBitPosition);
        }
        if (isRoadTransitionAttributeMetadataUsed())
        {
            endBitPosition = roadTransitionAttributeMetadata_.initializeOffsets(endBitPosition);
        }
        endBitPosition = coveredRoadTypes_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isExcessSlopeThresholdUsed())
        {
            endBitPosition += 8;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = content_.initializeOffsets(zserioContext.getContent(), endBitPosition);
        if (isRoadRangeAttributeMetadataUsed())
        {
            endBitPosition = roadRangeAttributeMetadata_.initializeOffsets(zserioContext.getRoadRangeAttributeMetadata(), endBitPosition);
        }
        if (isRoadTransitionAttributeMetadataUsed())
        {
            endBitPosition = roadTransitionAttributeMetadata_.initializeOffsets(zserioContext.getRoadTransitionAttributeMetadata(), endBitPosition);
        }
        endBitPosition = coveredRoadTypes_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += 1;
        if (isExcessSlopeThresholdUsed())
        {
            endBitPosition += zserioContext.getExcessSlopeThreshold().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(excessSlopeThreshold_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        content_.write(out);

        if (isRoadRangeAttributeMetadataUsed())
        {
            roadRangeAttributeMetadata_.write(out);
        }

        if (isRoadTransitionAttributeMetadataUsed())
        {
            roadTransitionAttributeMetadata_.write(out);
        }

        coveredRoadTypes_.write(out);

        out.writeBool(hasEcoRoutingAttributes_);

        if (isExcessSlopeThresholdUsed())
        {
            out.writeUnsignedByte(excessSlopeThreshold_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        content_.write(zserioContext.getContent(), out);

        if (isRoadRangeAttributeMetadataUsed())
        {
            roadRangeAttributeMetadata_.write(zserioContext.getRoadRangeAttributeMetadata(), out);
        }

        if (isRoadTransitionAttributeMetadataUsed())
        {
            roadTransitionAttributeMetadata_.write(zserioContext.getRoadTransitionAttributeMetadata(), out);
        }

        coveredRoadTypes_.writePacked(out);

        out.writeBool(hasEcoRoutingAttributes_);

        if (isExcessSlopeThresholdUsed())
        {
            zserioContext.getExcessSlopeThreshold().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(excessSlopeThreshold_));
        }
    }

    private static final class ZserioElementFactory_coveredRoadTypes implements zserio.runtime.array.PackableElementFactory<nds.core.types.RoadType>
    {
        @Override
        public nds.core.types.RoadType create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.core.types.RoadType(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.core.types.RoadType.ZserioPackingContext();
        }

        @Override
        public nds.core.types.RoadType create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.core.types.RoadType(context, in);
        }
    }

    private nds.routingdata.metadata.RoadRoutingLayerContent content_;
    private nds.routingdata.instantiations.RoutingRoadRangeAttributeMetadata roadRangeAttributeMetadata_;
    private nds.routingdata.instantiations.RoutingRoadTransitionAttributeMetadata roadTransitionAttributeMetadata_;
    private zserio.runtime.array.Array coveredRoadTypes_;
    private boolean hasEcoRoutingAttributes_;
    private java.lang.Short excessSlopeThreshold_;
}
