/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.attributes;

public class AdasLaneAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            slopeArray_ = new nds.adas.types.SlopeArray.ZserioPackingContext();
            curvaturePointList_ = new nds.adas.types.CurvaturePointList.ZserioPackingContext();
            comfortableSpeedCurve_ = new nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext();
        }

        public nds.adas.types.SlopeArray.ZserioPackingContext getSlopeArray()
        {
            return slopeArray_;
        }

        public nds.adas.types.CurvaturePointList.ZserioPackingContext getCurvaturePointList()
        {
            return curvaturePointList_;
        }

        public nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext getComfortableSpeedCurve()
        {
            return comfortableSpeedCurve_;
        }

        private nds.adas.types.SlopeArray.ZserioPackingContext slopeArray_;
        private nds.adas.types.CurvaturePointList.ZserioPackingContext curvaturePointList_;
        private nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext comfortableSpeedCurve_;
    };

    public AdasLaneAttributeValue(
            nds.adas.attributes.AdasLaneAttributeType type_)
    {
        this.type_ = type_;
    }

    public AdasLaneAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.adas.attributes.AdasLaneAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public AdasLaneAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.adas.attributes.AdasLaneAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            return CHOICE_slopeArray;
        case CURVATURE:
            return CHOICE_curvaturePointList;
        case COMFORTABLE_SPEED_CURVE:
            return CHOICE_comfortableSpeedCurve;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().initPackingContext(zserioContext.getSlopeArray());
            break;
        case CURVATURE:
            getCurvaturePointList().initPackingContext(zserioContext.getCurvaturePointList());
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().initPackingContext(zserioContext.getComfortableSpeedCurve());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            endBitPosition += getSlopeArray().bitSizeOf(endBitPosition);
            break;
        case CURVATURE:
            endBitPosition += getCurvaturePointList().bitSizeOf(endBitPosition);
            break;
        case COMFORTABLE_SPEED_CURVE:
            endBitPosition += getComfortableSpeedCurve().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            endBitPosition += getSlopeArray().bitSizeOf(zserioContext.getSlopeArray(), endBitPosition);
            break;
        case CURVATURE:
            endBitPosition += getCurvaturePointList().bitSizeOf(zserioContext.getCurvaturePointList(), endBitPosition);
            break;
        case COMFORTABLE_SPEED_CURVE:
            endBitPosition += getComfortableSpeedCurve().bitSizeOf(zserioContext.getComfortableSpeedCurve(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.adas.attributes.AdasLaneAttributeType getType()
    {
        return this.type_;
    }

    public nds.adas.types.SlopeArray getSlopeArray()
    {
        return (nds.adas.types.SlopeArray)objectChoice;
    }

    public void setSlopeArray(nds.adas.types.SlopeArray slopeArray_)
    {
        objectChoice = slopeArray_;
    }

    public nds.adas.types.CurvaturePointList getCurvaturePointList()
    {
        return (nds.adas.types.CurvaturePointList)objectChoice;
    }

    public void setCurvaturePointList(nds.adas.types.CurvaturePointList curvaturePointList_)
    {
        objectChoice = curvaturePointList_;
    }

    public nds.adas.types.ComfortableSpeedPointList getComfortableSpeedCurve()
    {
        return (nds.adas.types.ComfortableSpeedPointList)objectChoice;
    }

    public void setComfortableSpeedCurve(nds.adas.types.ComfortableSpeedPointList comfortableSpeedCurve_)
    {
        objectChoice = comfortableSpeedCurve_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AdasLaneAttributeValue)
        {
            final AdasLaneAttributeValue that = (AdasLaneAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case SLOPE_ARRAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.SlopeArray)objectChoice);
                break;
            case CURVATURE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.CurvaturePointList)objectChoice);
                break;
            case COMFORTABLE_SPEED_CURVE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.ComfortableSpeedPointList)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            objectChoice = new nds.adas.types.SlopeArray(in);
            break;
        case CURVATURE:
            objectChoice = new nds.adas.types.CurvaturePointList(in);
            break;
        case COMFORTABLE_SPEED_CURVE:
            objectChoice = new nds.adas.types.ComfortableSpeedPointList(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            objectChoice = new nds.adas.types.SlopeArray(zserioContext.getSlopeArray(), in);
            break;
        case CURVATURE:
            objectChoice = new nds.adas.types.CurvaturePointList(zserioContext.getCurvaturePointList(), in);
            break;
        case COMFORTABLE_SPEED_CURVE:
            objectChoice = new nds.adas.types.ComfortableSpeedPointList(zserioContext.getComfortableSpeedCurve(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            {
                endBitPosition = getSlopeArray().initializeOffsets(endBitPosition);
            }
            break;
        case CURVATURE:
            {
                endBitPosition = getCurvaturePointList().initializeOffsets(endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_CURVE:
            {
                endBitPosition = getComfortableSpeedCurve().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            {
                endBitPosition = getSlopeArray().initializeOffsets(zserioContext.getSlopeArray(), endBitPosition);
            }
            break;
        case CURVATURE:
            {
                endBitPosition = getCurvaturePointList().initializeOffsets(zserioContext.getCurvaturePointList(), endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_CURVE:
            {
                endBitPosition = getComfortableSpeedCurve().initializeOffsets(zserioContext.getComfortableSpeedCurve(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().write(out);
            break;
        case CURVATURE:
            getCurvaturePointList().write(out);
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().write(zserioContext.getSlopeArray(), out);
            break;
        case CURVATURE:
            getCurvaturePointList().write(zserioContext.getCurvaturePointList(), out);
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().write(zserioContext.getComfortableSpeedCurve(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasLaneAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_slopeArray = 0;
    public static final int CHOICE_curvaturePointList = 1;
    public static final int CHOICE_comfortableSpeedCurve = 2;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.adas.attributes.AdasLaneAttributeType type_;
    private java.lang.Object objectChoice;
}
