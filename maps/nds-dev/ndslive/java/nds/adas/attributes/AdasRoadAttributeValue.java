/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.attributes;

public class AdasRoadAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            slopeArray_ = new nds.adas.types.SlopeArray.ZserioPackingContext();
            clothoid_ = new nds.adas.types.Clothoid.ZserioPackingContext();
            gradient_ = new nds.adas.types.Gradient.ZserioPackingContext();
            curvaturePointList_ = new nds.adas.types.CurvaturePointList.ZserioPackingContext();
            curvaturePath_ = new nds.adas.types.CurvaturePath.ZserioPackingContext();
            comfortableSpeedCurve_ = new nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext();
            comfortableSpeedPath_ = new nds.adas.types.ComfortableSpeedPath.ZserioPackingContext();
            elevationArray_ = new nds.adas.types.ElevationArray.ZserioPackingContext();
        }

        public nds.adas.types.SlopeArray.ZserioPackingContext getSlopeArray()
        {
            return slopeArray_;
        }

        public nds.adas.types.Clothoid.ZserioPackingContext getClothoid()
        {
            return clothoid_;
        }

        public nds.adas.types.Gradient.ZserioPackingContext getGradient()
        {
            return gradient_;
        }

        public nds.adas.types.CurvaturePointList.ZserioPackingContext getCurvaturePointList()
        {
            return curvaturePointList_;
        }

        public nds.adas.types.CurvaturePath.ZserioPackingContext getCurvaturePath()
        {
            return curvaturePath_;
        }

        public nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext getComfortableSpeedCurve()
        {
            return comfortableSpeedCurve_;
        }

        public nds.adas.types.ComfortableSpeedPath.ZserioPackingContext getComfortableSpeedPath()
        {
            return comfortableSpeedPath_;
        }

        public nds.adas.types.ElevationArray.ZserioPackingContext getElevationArray()
        {
            return elevationArray_;
        }

        private nds.adas.types.SlopeArray.ZserioPackingContext slopeArray_;
        private nds.adas.types.Clothoid.ZserioPackingContext clothoid_;
        private nds.adas.types.Gradient.ZserioPackingContext gradient_;
        private nds.adas.types.CurvaturePointList.ZserioPackingContext curvaturePointList_;
        private nds.adas.types.CurvaturePath.ZserioPackingContext curvaturePath_;
        private nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext comfortableSpeedCurve_;
        private nds.adas.types.ComfortableSpeedPath.ZserioPackingContext comfortableSpeedPath_;
        private nds.adas.types.ElevationArray.ZserioPackingContext elevationArray_;
    };

    public AdasRoadAttributeValue(
            nds.adas.attributes.AdasRoadAttributeType type_)
    {
        this.type_ = type_;
    }

    public AdasRoadAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.adas.attributes.AdasRoadAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public AdasRoadAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.adas.attributes.AdasRoadAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            return CHOICE_slopeArray;
        case CLOTHOID:
            return CHOICE_clothoid;
        case GRADIENT:
            return CHOICE_gradient;
        case ENHANCED_GEOMETRY:
            return CHOICE_enhancedGeometry;
        case CURVATURE:
            return CHOICE_curvaturePointList;
        case CURVATURE_PATH:
            return CHOICE_curvaturePath;
        case COMFORTABLE_SPEED_CURVE:
            return CHOICE_comfortableSpeedCurve;
        case COMFORTABLE_SPEED_PATH:
            return CHOICE_comfortableSpeedPath;
        case ELEVATION_ARRAY:
            return CHOICE_elevationArray;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().initPackingContext(zserioContext.getSlopeArray());
            break;
        case CLOTHOID:
            getClothoid().initPackingContext(zserioContext.getClothoid());
            break;
        case GRADIENT:
            getGradient().initPackingContext(zserioContext.getGradient());
            break;
        case ENHANCED_GEOMETRY:
            break;
        case CURVATURE:
            getCurvaturePointList().initPackingContext(zserioContext.getCurvaturePointList());
            break;
        case CURVATURE_PATH:
            getCurvaturePath().initPackingContext(zserioContext.getCurvaturePath());
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().initPackingContext(zserioContext.getComfortableSpeedCurve());
            break;
        case COMFORTABLE_SPEED_PATH:
            getComfortableSpeedPath().initPackingContext(zserioContext.getComfortableSpeedPath());
            break;
        case ELEVATION_ARRAY:
            getElevationArray().initPackingContext(zserioContext.getElevationArray());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            endBitPosition += getSlopeArray().bitSizeOf(endBitPosition);
            break;
        case CLOTHOID:
            endBitPosition += getClothoid().bitSizeOf(endBitPosition);
            break;
        case GRADIENT:
            endBitPosition += getGradient().bitSizeOf(endBitPosition);
            break;
        case ENHANCED_GEOMETRY:
            endBitPosition += getEnhancedGeometry().bitSizeOf(endBitPosition);
            break;
        case CURVATURE:
            endBitPosition += getCurvaturePointList().bitSizeOf(endBitPosition);
            break;
        case CURVATURE_PATH:
            endBitPosition += getCurvaturePath().bitSizeOf(endBitPosition);
            break;
        case COMFORTABLE_SPEED_CURVE:
            endBitPosition += getComfortableSpeedCurve().bitSizeOf(endBitPosition);
            break;
        case COMFORTABLE_SPEED_PATH:
            endBitPosition += getComfortableSpeedPath().bitSizeOf(endBitPosition);
            break;
        case ELEVATION_ARRAY:
            endBitPosition += getElevationArray().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            endBitPosition += getSlopeArray().bitSizeOf(zserioContext.getSlopeArray(), endBitPosition);
            break;
        case CLOTHOID:
            endBitPosition += getClothoid().bitSizeOf(zserioContext.getClothoid(), endBitPosition);
            break;
        case GRADIENT:
            endBitPosition += getGradient().bitSizeOf(zserioContext.getGradient(), endBitPosition);
            break;
        case ENHANCED_GEOMETRY:
            endBitPosition += getEnhancedGeometry().bitSizeOf(endBitPosition);
            break;
        case CURVATURE:
            endBitPosition += getCurvaturePointList().bitSizeOf(zserioContext.getCurvaturePointList(), endBitPosition);
            break;
        case CURVATURE_PATH:
            endBitPosition += getCurvaturePath().bitSizeOf(zserioContext.getCurvaturePath(), endBitPosition);
            break;
        case COMFORTABLE_SPEED_CURVE:
            endBitPosition += getComfortableSpeedCurve().bitSizeOf(zserioContext.getComfortableSpeedCurve(), endBitPosition);
            break;
        case COMFORTABLE_SPEED_PATH:
            endBitPosition += getComfortableSpeedPath().bitSizeOf(zserioContext.getComfortableSpeedPath(), endBitPosition);
            break;
        case ELEVATION_ARRAY:
            endBitPosition += getElevationArray().bitSizeOf(zserioContext.getElevationArray(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.adas.attributes.AdasRoadAttributeType getType()
    {
        return this.type_;
    }

    public nds.adas.types.SlopeArray getSlopeArray()
    {
        return (nds.adas.types.SlopeArray)objectChoice;
    }

    public void setSlopeArray(nds.adas.types.SlopeArray slopeArray_)
    {
        objectChoice = slopeArray_;
    }

    public nds.adas.types.Clothoid getClothoid()
    {
        return (nds.adas.types.Clothoid)objectChoice;
    }

    public void setClothoid(nds.adas.types.Clothoid clothoid_)
    {
        objectChoice = clothoid_;
    }

    public nds.adas.types.Gradient getGradient()
    {
        return (nds.adas.types.Gradient)objectChoice;
    }

    public void setGradient(nds.adas.types.Gradient gradient_)
    {
        objectChoice = gradient_;
    }

    public nds.core.types.Flag getEnhancedGeometry()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setEnhancedGeometry(nds.core.types.Flag enhancedGeometry_)
    {
        objectChoice = enhancedGeometry_;
    }

    public nds.adas.types.CurvaturePointList getCurvaturePointList()
    {
        return (nds.adas.types.CurvaturePointList)objectChoice;
    }

    public void setCurvaturePointList(nds.adas.types.CurvaturePointList curvaturePointList_)
    {
        objectChoice = curvaturePointList_;
    }

    public nds.adas.types.CurvaturePath getCurvaturePath()
    {
        return (nds.adas.types.CurvaturePath)objectChoice;
    }

    public void setCurvaturePath(nds.adas.types.CurvaturePath curvaturePath_)
    {
        objectChoice = curvaturePath_;
    }

    public nds.adas.types.ComfortableSpeedPointList getComfortableSpeedCurve()
    {
        return (nds.adas.types.ComfortableSpeedPointList)objectChoice;
    }

    public void setComfortableSpeedCurve(nds.adas.types.ComfortableSpeedPointList comfortableSpeedCurve_)
    {
        objectChoice = comfortableSpeedCurve_;
    }

    public nds.adas.types.ComfortableSpeedPath getComfortableSpeedPath()
    {
        return (nds.adas.types.ComfortableSpeedPath)objectChoice;
    }

    public void setComfortableSpeedPath(nds.adas.types.ComfortableSpeedPath comfortableSpeedPath_)
    {
        objectChoice = comfortableSpeedPath_;
    }

    public nds.adas.types.ElevationArray getElevationArray()
    {
        return (nds.adas.types.ElevationArray)objectChoice;
    }

    public void setElevationArray(nds.adas.types.ElevationArray elevationArray_)
    {
        objectChoice = elevationArray_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof AdasRoadAttributeValue)
        {
            final AdasRoadAttributeValue that = (AdasRoadAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case SLOPE_ARRAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.SlopeArray)objectChoice);
                break;
            case CLOTHOID:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.Clothoid)objectChoice);
                break;
            case GRADIENT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.Gradient)objectChoice);
                break;
            case ENHANCED_GEOMETRY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case CURVATURE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.CurvaturePointList)objectChoice);
                break;
            case CURVATURE_PATH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.CurvaturePath)objectChoice);
                break;
            case COMFORTABLE_SPEED_CURVE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.ComfortableSpeedPointList)objectChoice);
                break;
            case COMFORTABLE_SPEED_PATH:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.ComfortableSpeedPath)objectChoice);
                break;
            case ELEVATION_ARRAY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.ElevationArray)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            objectChoice = new nds.adas.types.SlopeArray(in);
            break;
        case CLOTHOID:
            objectChoice = new nds.adas.types.Clothoid(in);
            break;
        case GRADIENT:
            objectChoice = new nds.adas.types.Gradient(in);
            break;
        case ENHANCED_GEOMETRY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case CURVATURE:
            objectChoice = new nds.adas.types.CurvaturePointList(in);
            break;
        case CURVATURE_PATH:
            objectChoice = new nds.adas.types.CurvaturePath(in);
            break;
        case COMFORTABLE_SPEED_CURVE:
            objectChoice = new nds.adas.types.ComfortableSpeedPointList(in);
            break;
        case COMFORTABLE_SPEED_PATH:
            objectChoice = new nds.adas.types.ComfortableSpeedPath(in);
            break;
        case ELEVATION_ARRAY:
            objectChoice = new nds.adas.types.ElevationArray(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            objectChoice = new nds.adas.types.SlopeArray(zserioContext.getSlopeArray(), in);
            break;
        case CLOTHOID:
            objectChoice = new nds.adas.types.Clothoid(zserioContext.getClothoid(), in);
            break;
        case GRADIENT:
            objectChoice = new nds.adas.types.Gradient(zserioContext.getGradient(), in);
            break;
        case ENHANCED_GEOMETRY:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case CURVATURE:
            objectChoice = new nds.adas.types.CurvaturePointList(zserioContext.getCurvaturePointList(), in);
            break;
        case CURVATURE_PATH:
            objectChoice = new nds.adas.types.CurvaturePath(zserioContext.getCurvaturePath(), in);
            break;
        case COMFORTABLE_SPEED_CURVE:
            objectChoice = new nds.adas.types.ComfortableSpeedPointList(zserioContext.getComfortableSpeedCurve(), in);
            break;
        case COMFORTABLE_SPEED_PATH:
            objectChoice = new nds.adas.types.ComfortableSpeedPath(zserioContext.getComfortableSpeedPath(), in);
            break;
        case ELEVATION_ARRAY:
            objectChoice = new nds.adas.types.ElevationArray(zserioContext.getElevationArray(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            {
                endBitPosition = getSlopeArray().initializeOffsets(endBitPosition);
            }
            break;
        case CLOTHOID:
            {
                endBitPosition = getClothoid().initializeOffsets(endBitPosition);
            }
            break;
        case GRADIENT:
            {
                endBitPosition = getGradient().initializeOffsets(endBitPosition);
            }
            break;
        case ENHANCED_GEOMETRY:
            {
                endBitPosition = getEnhancedGeometry().initializeOffsets(endBitPosition);
            }
            break;
        case CURVATURE:
            {
                endBitPosition = getCurvaturePointList().initializeOffsets(endBitPosition);
            }
            break;
        case CURVATURE_PATH:
            {
                endBitPosition = getCurvaturePath().initializeOffsets(endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_CURVE:
            {
                endBitPosition = getComfortableSpeedCurve().initializeOffsets(endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_PATH:
            {
                endBitPosition = getComfortableSpeedPath().initializeOffsets(endBitPosition);
            }
            break;
        case ELEVATION_ARRAY:
            {
                endBitPosition = getElevationArray().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case SLOPE_ARRAY:
            {
                endBitPosition = getSlopeArray().initializeOffsets(zserioContext.getSlopeArray(), endBitPosition);
            }
            break;
        case CLOTHOID:
            {
                endBitPosition = getClothoid().initializeOffsets(zserioContext.getClothoid(), endBitPosition);
            }
            break;
        case GRADIENT:
            {
                endBitPosition = getGradient().initializeOffsets(zserioContext.getGradient(), endBitPosition);
            }
            break;
        case ENHANCED_GEOMETRY:
            {
                endBitPosition = getEnhancedGeometry().initializeOffsets(endBitPosition);
            }
            break;
        case CURVATURE:
            {
                endBitPosition = getCurvaturePointList().initializeOffsets(zserioContext.getCurvaturePointList(), endBitPosition);
            }
            break;
        case CURVATURE_PATH:
            {
                endBitPosition = getCurvaturePath().initializeOffsets(zserioContext.getCurvaturePath(), endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_CURVE:
            {
                endBitPosition = getComfortableSpeedCurve().initializeOffsets(zserioContext.getComfortableSpeedCurve(), endBitPosition);
            }
            break;
        case COMFORTABLE_SPEED_PATH:
            {
                endBitPosition = getComfortableSpeedPath().initializeOffsets(zserioContext.getComfortableSpeedPath(), endBitPosition);
            }
            break;
        case ELEVATION_ARRAY:
            {
                endBitPosition = getElevationArray().initializeOffsets(zserioContext.getElevationArray(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().write(out);
            break;
        case CLOTHOID:
            getClothoid().write(out);
            break;
        case GRADIENT:
            getGradient().write(out);
            break;
        case ENHANCED_GEOMETRY:
            getEnhancedGeometry().write(out);
            break;
        case CURVATURE:
            getCurvaturePointList().write(out);
            break;
        case CURVATURE_PATH:
            getCurvaturePath().write(out);
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().write(out);
            break;
        case COMFORTABLE_SPEED_PATH:
            getComfortableSpeedPath().write(out);
            break;
        case ELEVATION_ARRAY:
            getElevationArray().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case SLOPE_ARRAY:
            getSlopeArray().write(zserioContext.getSlopeArray(), out);
            break;
        case CLOTHOID:
            getClothoid().write(zserioContext.getClothoid(), out);
            break;
        case GRADIENT:
            getGradient().write(zserioContext.getGradient(), out);
            break;
        case ENHANCED_GEOMETRY:
            getEnhancedGeometry().write(out);
            break;
        case CURVATURE:
            getCurvaturePointList().write(zserioContext.getCurvaturePointList(), out);
            break;
        case CURVATURE_PATH:
            getCurvaturePath().write(zserioContext.getCurvaturePath(), out);
            break;
        case COMFORTABLE_SPEED_CURVE:
            getComfortableSpeedCurve().write(zserioContext.getComfortableSpeedCurve(), out);
            break;
        case COMFORTABLE_SPEED_PATH:
            getComfortableSpeedPath().write(zserioContext.getComfortableSpeedPath(), out);
            break;
        case ELEVATION_ARRAY:
            getElevationArray().write(zserioContext.getElevationArray(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice AdasRoadAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_slopeArray = 0;
    public static final int CHOICE_clothoid = 1;
    public static final int CHOICE_gradient = 2;
    public static final int CHOICE_enhancedGeometry = 3;
    public static final int CHOICE_curvaturePointList = 4;
    public static final int CHOICE_curvaturePath = 5;
    public static final int CHOICE_comfortableSpeedCurve = 6;
    public static final int CHOICE_comfortableSpeedPath = 7;
    public static final int CHOICE_elevationArray = 8;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.adas.attributes.AdasRoadAttributeType type_;
    private java.lang.Object objectChoice;
}
