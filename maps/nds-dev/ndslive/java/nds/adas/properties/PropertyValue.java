/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.properties;

public class PropertyValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            adasAccuracy_ = new zserio.runtime.array.DeltaContext();
            clothoidMetaData_ = new nds.adas.types.ClothoidMetaData.ZserioPackingContext();
            gradientMetaData_ = new nds.adas.types.GradientMetaData.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getAdasAccuracy()
        {
            return adasAccuracy_;
        }

        public nds.adas.types.ClothoidMetaData.ZserioPackingContext getClothoidMetaData()
        {
            return clothoidMetaData_;
        }

        public nds.adas.types.GradientMetaData.ZserioPackingContext getGradientMetaData()
        {
            return gradientMetaData_;
        }

        private zserio.runtime.array.DeltaContext adasAccuracy_;
        private nds.adas.types.ClothoidMetaData.ZserioPackingContext clothoidMetaData_;
        private nds.adas.types.GradientMetaData.ZserioPackingContext gradientMetaData_;
    };

    public PropertyValue(
            nds.adas.properties.PropertyType type_)
    {
        this.type_ = type_;
    }

    public PropertyValue(zserio.runtime.io.BitStreamReader in,
            nds.adas.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public PropertyValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.adas.properties.PropertyType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case ADAS_ACCURACY:
            return CHOICE_adasAccuracy;
        case CLOTHOID_META_DATA:
            return CHOICE_clothoidMetaData;
        case GRADIENT_META_DATA:
            return CHOICE_gradientMetaData;
        case CORE:
            return UNDEFINED_CHOICE;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ADAS_ACCURACY:
            getAdasAccuracy().initPackingContext(zserioContext.getAdasAccuracy());
            break;
        case CLOTHOID_META_DATA:
            getClothoidMetaData().initPackingContext(zserioContext.getClothoidMetaData());
            break;
        case GRADIENT_META_DATA:
            getGradientMetaData().initPackingContext(zserioContext.getGradientMetaData());
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ADAS_ACCURACY:
            endBitPosition += getAdasAccuracy().bitSizeOf(endBitPosition);
            break;
        case CLOTHOID_META_DATA:
            endBitPosition += getClothoidMetaData().bitSizeOf(endBitPosition);
            break;
        case GRADIENT_META_DATA:
            endBitPosition += getGradientMetaData().bitSizeOf(endBitPosition);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ADAS_ACCURACY:
            endBitPosition += getAdasAccuracy().bitSizeOf(zserioContext.getAdasAccuracy(), endBitPosition);
            break;
        case CLOTHOID_META_DATA:
            endBitPosition += getClothoidMetaData().bitSizeOf(zserioContext.getClothoidMetaData(), endBitPosition);
            break;
        case GRADIENT_META_DATA:
            endBitPosition += getGradientMetaData().bitSizeOf(zserioContext.getGradientMetaData(), endBitPosition);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.adas.properties.PropertyType getType()
    {
        return this.type_;
    }

    public nds.adas.types.AdasAccuracy getAdasAccuracy()
    {
        return (nds.adas.types.AdasAccuracy)objectChoice;
    }

    public void setAdasAccuracy(nds.adas.types.AdasAccuracy adasAccuracy_)
    {
        objectChoice = adasAccuracy_;
    }

    public nds.adas.types.ClothoidMetaData getClothoidMetaData()
    {
        return (nds.adas.types.ClothoidMetaData)objectChoice;
    }

    public void setClothoidMetaData(nds.adas.types.ClothoidMetaData clothoidMetaData_)
    {
        objectChoice = clothoidMetaData_;
    }

    public nds.adas.types.GradientMetaData getGradientMetaData()
    {
        return (nds.adas.types.GradientMetaData)objectChoice;
    }

    public void setGradientMetaData(nds.adas.types.GradientMetaData gradientMetaData_)
    {
        objectChoice = gradientMetaData_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof PropertyValue)
        {
            final PropertyValue that = (PropertyValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case ADAS_ACCURACY:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.AdasAccuracy)objectChoice);
                break;
            case CLOTHOID_META_DATA:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.ClothoidMetaData)objectChoice);
                break;
            case GRADIENT_META_DATA:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.adas.types.GradientMetaData)objectChoice);
                break;
            case CORE:
                // empty
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case ADAS_ACCURACY:
            objectChoice = nds.adas.types.AdasAccuracy.readEnum(in);
            break;
        case CLOTHOID_META_DATA:
            objectChoice = new nds.adas.types.ClothoidMetaData(in);
            break;
        case GRADIENT_META_DATA:
            objectChoice = new nds.adas.types.GradientMetaData(in);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ADAS_ACCURACY:
            objectChoice = nds.adas.types.AdasAccuracy.readEnum(zserioContext.getAdasAccuracy(), in);
            break;
        case CLOTHOID_META_DATA:
            objectChoice = new nds.adas.types.ClothoidMetaData(zserioContext.getClothoidMetaData(), in);
            break;
        case GRADIENT_META_DATA:
            objectChoice = new nds.adas.types.GradientMetaData(zserioContext.getGradientMetaData(), in);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ADAS_ACCURACY:
            {
                endBitPosition += getAdasAccuracy().bitSizeOf(endBitPosition);
            }
            break;
        case CLOTHOID_META_DATA:
            {
                endBitPosition = getClothoidMetaData().initializeOffsets(endBitPosition);
            }
            break;
        case GRADIENT_META_DATA:
            {
                endBitPosition = getGradientMetaData().initializeOffsets(endBitPosition);
            }
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case ADAS_ACCURACY:
            {
                endBitPosition = getAdasAccuracy().initializeOffsets(zserioContext.getAdasAccuracy(), endBitPosition);
            }
            break;
        case CLOTHOID_META_DATA:
            {
                endBitPosition = getClothoidMetaData().initializeOffsets(zserioContext.getClothoidMetaData(), endBitPosition);
            }
            break;
        case GRADIENT_META_DATA:
            {
                endBitPosition = getGradientMetaData().initializeOffsets(zserioContext.getGradientMetaData(), endBitPosition);
            }
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case ADAS_ACCURACY:
            getAdasAccuracy().write(out);
            break;
        case CLOTHOID_META_DATA:
            getClothoidMetaData().write(out);
            break;
        case GRADIENT_META_DATA:
            getGradientMetaData().write(out);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case ADAS_ACCURACY:
            getAdasAccuracy().write(zserioContext.getAdasAccuracy(), out);
            break;
        case CLOTHOID_META_DATA:
            getClothoidMetaData().write(zserioContext.getClothoidMetaData(), out);
            break;
        case GRADIENT_META_DATA:
            getGradientMetaData().write(zserioContext.getGradientMetaData(), out);
            break;
        case CORE:
            // empty
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice PropertyValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_adasAccuracy = 0;
    public static final int CHOICE_clothoidMetaData = 1;
    public static final int CHOICE_gradientMetaData = 2;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.adas.properties.PropertyType type_;
    private java.lang.Object objectChoice;
}
