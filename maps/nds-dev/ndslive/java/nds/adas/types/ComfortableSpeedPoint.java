/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class ComfortableSpeedPoint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            position_ = new zserio.runtime.array.DeltaContext();
            comfortableSpeed_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getPosition()
        {
            return position_;
        }

        public zserio.runtime.array.DeltaContext getComfortableSpeed()
        {
            return comfortableSpeed_;
        }

        private zserio.runtime.array.DeltaContext position_;
        private zserio.runtime.array.DeltaContext comfortableSpeed_;
    };

    public ComfortableSpeedPoint()
    {
    }

    public ComfortableSpeedPoint(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ComfortableSpeedPoint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ComfortableSpeedPoint(
            int position_,
            short comfortableSpeed_)
    {
        setPosition(position_);
        setComfortableSpeed(comfortableSpeed_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));
        zserioContext.getComfortableSpeed().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(comfortableSpeed_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(position_);
        endBitPosition += 8;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));
        endBitPosition += zserioContext.getComfortableSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(comfortableSpeed_));

        return (int)(endBitPosition - bitPosition);
    }

    public int getPosition()
    {
        return position_;
    }

    public void setPosition(int position_)
    {
        this.position_ = position_;
    }

    public short getComfortableSpeed()
    {
        return comfortableSpeed_;
    }

    public void setComfortableSpeed(short comfortableSpeed_)
    {
        this.comfortableSpeed_ = comfortableSpeed_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ComfortableSpeedPoint)
        {
            final ComfortableSpeedPoint that = (ComfortableSpeedPoint)obj;

            return
                    position_ == that.position_ &&
                    comfortableSpeed_ == that.comfortableSpeed_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, position_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, comfortableSpeed_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        position_ = in.readVarSize();

        comfortableSpeed_ = in.readUnsignedByte();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        position_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        comfortableSpeed_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getComfortableSpeed().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(position_);
        endBitPosition += 8;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));
        endBitPosition += zserioContext.getComfortableSpeed().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(comfortableSpeed_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(position_);

        out.writeUnsignedByte(comfortableSpeed_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(position_));

        zserioContext.getComfortableSpeed().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(comfortableSpeed_));
    }

    private int position_;
    private short comfortableSpeed_;
}
