/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class CurvaturePath implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numOfRoads_ = new zserio.runtime.array.DeltaContext();
            curvaturePoints_ = new nds.adas.types.CurvaturePointList.ZserioPackingContext();
        }

        public zserio.runtime.array.DeltaContext getNumOfRoads()
        {
            return numOfRoads_;
        }

        public nds.adas.types.CurvaturePointList.ZserioPackingContext getCurvaturePoints()
        {
            return curvaturePoints_;
        }

        private zserio.runtime.array.DeltaContext numOfRoads_;
        private nds.adas.types.CurvaturePointList.ZserioPackingContext curvaturePoints_;
    };

    public CurvaturePath()
    {
    }

    public CurvaturePath(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public CurvaturePath(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public CurvaturePath(
            short numOfRoads_,
            nds.adas.types.CurvaturePointList curvaturePoints_,
            nds.adas.types.CurvaturePathRoad[] road_)
    {
        setNumOfRoads(numOfRoads_);
        setCurvaturePoints(curvaturePoints_);
        setRoad(road_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumOfRoads().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfRoads_));
        curvaturePoints_.initPackingContext(zserioContext.getCurvaturePoints());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition += curvaturePoints_.bitSizeOf(endBitPosition);
        endBitPosition += road_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumOfRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfRoads_));
        endBitPosition += curvaturePoints_.bitSizeOf(zserioContext.getCurvaturePoints(), endBitPosition);
        endBitPosition += road_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumOfRoads()
    {
        return numOfRoads_;
    }

    public void setNumOfRoads(short numOfRoads_)
    {
        this.numOfRoads_ = numOfRoads_;
    }

    public nds.adas.types.CurvaturePointList getCurvaturePoints()
    {
        return curvaturePoints_;
    }

    public void setCurvaturePoints(nds.adas.types.CurvaturePointList curvaturePoints_)
    {
        this.curvaturePoints_ = curvaturePoints_;
    }

    public nds.adas.types.CurvaturePathRoad[] getRoad()
    {
        return (road_ == null) ? null : road_.getRawArray();
    }

    public void setRoad(nds.adas.types.CurvaturePathRoad[] road_)
    {
        this.road_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.CurvaturePathRoad.class, road_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.CurvaturePathRoad>(new ZserioElementFactory_road()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CurvaturePath)
        {
            final CurvaturePath that = (CurvaturePath)obj;

            return
                    numOfRoads_ == that.numOfRoads_ &&
                    ((curvaturePoints_ == null) ? that.curvaturePoints_ == null : curvaturePoints_.equals(that.curvaturePoints_)) &&
                    ((road_ == null) ? that.road_ == null : road_.equals(that.road_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numOfRoads_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, curvaturePoints_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, road_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numOfRoads_ = in.readUnsignedByte();

        curvaturePoints_ = new nds.adas.types.CurvaturePointList(in);

        road_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.CurvaturePathRoad.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.CurvaturePathRoad>(new ZserioElementFactory_road()),
                zserio.runtime.array.ArrayType.NORMAL);
        road_.read(in, (int)(getNumOfRoads()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numOfRoads_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumOfRoads().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();

        curvaturePoints_ = new nds.adas.types.CurvaturePointList(zserioContext.getCurvaturePoints(), in);

        road_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.CurvaturePathRoad.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.CurvaturePathRoad>(new ZserioElementFactory_road()),
                zserio.runtime.array.ArrayType.NORMAL);
        road_.readPacked(in, (int)(getNumOfRoads()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 8;
        endBitPosition = curvaturePoints_.initializeOffsets(endBitPosition);
        endBitPosition = road_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumOfRoads().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfRoads_));
        endBitPosition = curvaturePoints_.initializeOffsets(zserioContext.getCurvaturePoints(), endBitPosition);
        endBitPosition = road_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedByte(numOfRoads_);

        curvaturePoints_.write(out);

        if (road_.size() != (int)(getNumOfRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field CurvaturePath.road: " +
                    road_.size() + " != " + (int)(getNumOfRoads()) + "!");
        }
        road_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumOfRoads().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfRoads_));

        curvaturePoints_.write(zserioContext.getCurvaturePoints(), out);

        if (road_.size() != (int)(getNumOfRoads()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field CurvaturePath.road: " +
                    road_.size() + " != " + (int)(getNumOfRoads()) + "!");
        }
        road_.writePacked(out);
    }

    private static final class ZserioElementFactory_road implements zserio.runtime.array.PackableElementFactory<nds.adas.types.CurvaturePathRoad>
    {
        @Override
        public nds.adas.types.CurvaturePathRoad create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.adas.types.CurvaturePathRoad(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.adas.types.CurvaturePathRoad.ZserioPackingContext();
        }

        @Override
        public nds.adas.types.CurvaturePathRoad create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.adas.types.CurvaturePathRoad(context, in);
        }
    }

    private short numOfRoads_;
    private nds.adas.types.CurvaturePointList curvaturePoints_;
    private zserio.runtime.array.Array road_;
}
