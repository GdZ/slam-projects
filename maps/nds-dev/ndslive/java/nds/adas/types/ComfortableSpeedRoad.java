/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class ComfortableSpeedRoad implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            featureReference_ = new nds.core.types.Var4ByteDirectedReference.ZserioPackingContext();
            speedPoints_ = new nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteDirectedReference.ZserioPackingContext getFeatureReference()
        {
            return featureReference_;
        }

        public nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext getSpeedPoints()
        {
            return speedPoints_;
        }

        private nds.core.types.Var4ByteDirectedReference.ZserioPackingContext featureReference_;
        private nds.adas.types.ComfortableSpeedPointList.ZserioPackingContext speedPoints_;
    };

    public ComfortableSpeedRoad()
    {
    }

    public ComfortableSpeedRoad(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ComfortableSpeedRoad(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ComfortableSpeedRoad(
            nds.core.types.Var4ByteDirectedReference featureReference_,
            nds.adas.types.ComfortableSpeedPointList speedPoints_)
    {
        setFeatureReference(featureReference_);
        setSpeedPoints(speedPoints_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        featureReference_.initPackingContext(zserioContext.getFeatureReference());
        speedPoints_.initPackingContext(zserioContext.getSpeedPoints());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += featureReference_.bitSizeOf(endBitPosition);
        endBitPosition += speedPoints_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += featureReference_.bitSizeOf(zserioContext.getFeatureReference(), endBitPosition);
        endBitPosition += speedPoints_.bitSizeOf(zserioContext.getSpeedPoints(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteDirectedReference getFeatureReference()
    {
        return featureReference_;
    }

    public void setFeatureReference(nds.core.types.Var4ByteDirectedReference featureReference_)
    {
        this.featureReference_ = featureReference_;
    }

    public nds.adas.types.ComfortableSpeedPointList getSpeedPoints()
    {
        return speedPoints_;
    }

    public void setSpeedPoints(nds.adas.types.ComfortableSpeedPointList speedPoints_)
    {
        this.speedPoints_ = speedPoints_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ComfortableSpeedRoad)
        {
            final ComfortableSpeedRoad that = (ComfortableSpeedRoad)obj;

            return
                    ((featureReference_ == null) ? that.featureReference_ == null : featureReference_.equals(that.featureReference_)) &&
                    ((speedPoints_ == null) ? that.speedPoints_ == null : speedPoints_.equals(that.speedPoints_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, featureReference_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, speedPoints_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        featureReference_ = new nds.core.types.Var4ByteDirectedReference(in);

        speedPoints_ = new nds.adas.types.ComfortableSpeedPointList(in);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        featureReference_ = new nds.core.types.Var4ByteDirectedReference(zserioContext.getFeatureReference(), in);

        speedPoints_ = new nds.adas.types.ComfortableSpeedPointList(zserioContext.getSpeedPoints(), in);
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = featureReference_.initializeOffsets(endBitPosition);
        endBitPosition = speedPoints_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = featureReference_.initializeOffsets(zserioContext.getFeatureReference(), endBitPosition);
        endBitPosition = speedPoints_.initializeOffsets(zserioContext.getSpeedPoints(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        featureReference_.write(out);

        speedPoints_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        featureReference_.write(zserioContext.getFeatureReference(), out);

        speedPoints_.write(zserioContext.getSpeedPoints(), out);
    }

    private nds.core.types.Var4ByteDirectedReference featureReference_;
    private nds.adas.types.ComfortableSpeedPointList speedPoints_;
}
