/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class ClothoidDataDescription implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numberOfSteps_ = new zserio.runtime.array.DeltaContext();
            numBits_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumberOfSteps()
        {
            return numberOfSteps_;
        }

        public zserio.runtime.array.DeltaContext getNumBits()
        {
            return numBits_;
        }

        private zserio.runtime.array.DeltaContext numberOfSteps_;
        private zserio.runtime.array.DeltaContext numBits_;
    };

    public ClothoidDataDescription()
    {
    }

    public ClothoidDataDescription(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ClothoidDataDescription(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ClothoidDataDescription(
            short numberOfSteps_,
            byte numBits_,
            boolean hasCoordDiff_,
            boolean hasTStart_,
            boolean hasTEnd_,
            boolean hasCStart_,
            boolean hasCEnd_,
            boolean hasChainageDiff_)
    {
        setNumberOfSteps(numberOfSteps_);
        setNumBits(numBits_);
        setHasCoordDiff(hasCoordDiff_);
        setHasTStart(hasTStart_);
        setHasTEnd(hasTEnd_);
        setHasCStart(hasCStart_);
        setHasCEnd(hasCEnd_);
        setHasChainageDiff(hasChainageDiff_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumberOfSteps().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSteps_));
        zserioContext.getNumBits().init(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numberOfSteps_);
        endBitPosition += 5;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumberOfSteps().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSteps_));
        endBitPosition += zserioContext.getNumBits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumberOfSteps()
    {
        return numberOfSteps_;
    }

    public void setNumberOfSteps(short numberOfSteps_)
    {
        this.numberOfSteps_ = numberOfSteps_;
    }

    public byte getNumBits()
    {
        return numBits_;
    }

    public void setNumBits(byte numBits_)
    {
        this.numBits_ = numBits_;
    }

    public boolean getHasCoordDiff()
    {
        return hasCoordDiff_;
    }

    public void setHasCoordDiff(boolean hasCoordDiff_)
    {
        this.hasCoordDiff_ = hasCoordDiff_;
    }

    public boolean getHasTStart()
    {
        return hasTStart_;
    }

    public void setHasTStart(boolean hasTStart_)
    {
        this.hasTStart_ = hasTStart_;
    }

    public boolean getHasTEnd()
    {
        return hasTEnd_;
    }

    public void setHasTEnd(boolean hasTEnd_)
    {
        this.hasTEnd_ = hasTEnd_;
    }

    public boolean getHasCStart()
    {
        return hasCStart_;
    }

    public void setHasCStart(boolean hasCStart_)
    {
        this.hasCStart_ = hasCStart_;
    }

    public boolean getHasCEnd()
    {
        return hasCEnd_;
    }

    public void setHasCEnd(boolean hasCEnd_)
    {
        this.hasCEnd_ = hasCEnd_;
    }

    public boolean getHasChainageDiff()
    {
        return hasChainageDiff_;
    }

    public void setHasChainageDiff(boolean hasChainageDiff_)
    {
        this.hasChainageDiff_ = hasChainageDiff_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ClothoidDataDescription)
        {
            final ClothoidDataDescription that = (ClothoidDataDescription)obj;

            return
                    numberOfSteps_ == that.numberOfSteps_ &&
                    numBits_ == that.numBits_ &&
                    hasCoordDiff_ == that.hasCoordDiff_ &&
                    hasTStart_ == that.hasTStart_ &&
                    hasTEnd_ == that.hasTEnd_ &&
                    hasCStart_ == that.hasCStart_ &&
                    hasCEnd_ == that.hasCEnd_ &&
                    hasChainageDiff_ == that.hasChainageDiff_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numberOfSteps_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numBits_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasCoordDiff_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTStart_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasTEnd_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasCStart_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasCEnd_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasChainageDiff_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numberOfSteps_ = in.readVarUInt16();

        numBits_ = (byte)in.readBits(5);

        hasCoordDiff_ = in.readBool();

        hasTStart_ = in.readBool();

        hasTEnd_ = in.readBool();

        hasCStart_ = in.readBool();

        hasCEnd_ = in.readBool();

        hasChainageDiff_ = in.readBool();
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numberOfSteps_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumberOfSteps().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        numBits_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getNumBits().read(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), in)).get();

        hasCoordDiff_ = in.readBool();

        hasTStart_ = in.readBool();

        hasTEnd_ = in.readBool();

        hasCStart_ = in.readBool();

        hasCEnd_ = in.readBool();

        hasChainageDiff_ = in.readBool();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numberOfSteps_);
        endBitPosition += 5;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumberOfSteps().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSteps_));
        endBitPosition += zserioContext.getNumBits().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;
        endBitPosition += 1;

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numberOfSteps_);

        out.writeBits(numBits_, 5);

        out.writeBool(hasCoordDiff_);

        out.writeBool(hasTStart_);

        out.writeBool(hasTEnd_);

        out.writeBool(hasCStart_);

        out.writeBool(hasCEnd_);

        out.writeBool(hasChainageDiff_);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumberOfSteps().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numberOfSteps_));

        zserioContext.getNumBits().write(new zserio.runtime.array.ArrayTraits.BitFieldByteArrayTraits((int)(5)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(numBits_));

        out.writeBool(hasCoordDiff_);

        out.writeBool(hasTStart_);

        out.writeBool(hasTEnd_);

        out.writeBool(hasCStart_);

        out.writeBool(hasCEnd_);

        out.writeBool(hasChainageDiff_);
    }

    private short numberOfSteps_;
    private byte numBits_;
    private boolean hasCoordDiff_;
    private boolean hasTStart_;
    private boolean hasTEnd_;
    private boolean hasCStart_;
    private boolean hasCEnd_;
    private boolean hasChainageDiff_;
}
