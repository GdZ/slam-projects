/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class CurvaturePoint implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            point_ = new zserio.runtime.array.DeltaContext();
            curvature_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getPoint()
        {
            return point_;
        }

        public zserio.runtime.array.DeltaContext getCurvature()
        {
            return curvature_;
        }

        private zserio.runtime.array.DeltaContext point_;
        private zserio.runtime.array.DeltaContext curvature_;
    };

    public CurvaturePoint()
    {
    }

    public CurvaturePoint(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public CurvaturePoint(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public CurvaturePoint(
            int point_,
            short curvature_)
    {
        setPoint(point_);
        setCurvature(curvature_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getPoint().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(point_));
        zserioContext.getCurvature().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(curvature_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(point_);
        endBitPosition += 10;

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPoint().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(point_));
        endBitPosition += zserioContext.getCurvature().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(curvature_));

        return (int)(endBitPosition - bitPosition);
    }

    public int getPoint()
    {
        return point_;
    }

    public void setPoint(int point_)
    {
        this.point_ = point_;
    }

    public short getCurvature()
    {
        return curvature_;
    }

    public void setCurvature(short curvature_)
    {
        this.curvature_ = curvature_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof CurvaturePoint)
        {
            final CurvaturePoint that = (CurvaturePoint)obj;

            return
                    point_ == that.point_ &&
                    curvature_ == that.curvature_;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, point_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, curvature_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        point_ = in.readVarSize();

        curvature_ = (short)in.readBits(10);
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        point_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getPoint().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        curvature_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getCurvature().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), in)).get();
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(point_);
        endBitPosition += 10;

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getPoint().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(point_));
        endBitPosition += zserioContext.getCurvature().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(curvature_));

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarSize(point_);

        out.writeBits(curvature_, 10);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getPoint().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(point_));

        zserioContext.getCurvature().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(curvature_));
    }

    private int point_;
    private short curvature_;
}
