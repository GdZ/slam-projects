/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class ClothoidData implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            clothoidDataDescription_ = new nds.adas.types.ClothoidDataDescription.ZserioPackingContext();
            clothoidPosition_ = new zserio.runtime.array.DeltaContext();
            tangentArcStart_ = new zserio.runtime.array.DeltaContext();
            tangentArcEnd_ = new zserio.runtime.array.DeltaContext();
            curvatureStart_ = new zserio.runtime.array.DeltaContext();
            curvatureEnd_ = new zserio.runtime.array.DeltaContext();
            deltaChainage_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.adas.types.ClothoidDataDescription.ZserioPackingContext getClothoidDataDescription()
        {
            return clothoidDataDescription_;
        }

        public zserio.runtime.array.DeltaContext getClothoidPosition()
        {
            return clothoidPosition_;
        }

        public zserio.runtime.array.DeltaContext getTangentArcStart()
        {
            return tangentArcStart_;
        }

        public zserio.runtime.array.DeltaContext getTangentArcEnd()
        {
            return tangentArcEnd_;
        }

        public zserio.runtime.array.DeltaContext getCurvatureStart()
        {
            return curvatureStart_;
        }

        public zserio.runtime.array.DeltaContext getCurvatureEnd()
        {
            return curvatureEnd_;
        }

        public zserio.runtime.array.DeltaContext getDeltaChainage()
        {
            return deltaChainage_;
        }

        private nds.adas.types.ClothoidDataDescription.ZserioPackingContext clothoidDataDescription_;
        private zserio.runtime.array.DeltaContext clothoidPosition_;
        private zserio.runtime.array.DeltaContext tangentArcStart_;
        private zserio.runtime.array.DeltaContext tangentArcEnd_;
        private zserio.runtime.array.DeltaContext curvatureStart_;
        private zserio.runtime.array.DeltaContext curvatureEnd_;
        private zserio.runtime.array.DeltaContext deltaChainage_;
    };

    public ClothoidData()
    {
    }

    public ClothoidData(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ClothoidData(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ClothoidData(
            nds.adas.types.ClothoidDataDescription clothoidDataDescription_,
            java.lang.Integer clothoidPosition_,
            java.lang.Integer tangentArcStart_,
            java.lang.Integer tangentArcEnd_,
            java.lang.Short curvatureStart_,
            java.lang.Short curvatureEnd_,
            java.lang.Integer deltaChainage_)
    {
        setClothoidDataDescription(clothoidDataDescription_);
        setClothoidPosition(clothoidPosition_);
        setTangentArcStart(tangentArcStart_);
        setTangentArcEnd(tangentArcEnd_);
        setCurvatureStart(curvatureStart_);
        setCurvatureEnd(curvatureEnd_);
        setDeltaChainage(deltaChainage_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        clothoidDataDescription_.initPackingContext(zserioContext.getClothoidDataDescription());
        if (isClothoidPositionUsed())
        {
            zserioContext.getClothoidPosition().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(clothoidPosition_));
        }
        if (isTangentArcStartUsed())
        {
            zserioContext.getTangentArcStart().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcStart_));
        }
        if (isTangentArcEndUsed())
        {
            zserioContext.getTangentArcEnd().init(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcEnd_));
        }
        if (isCurvatureStartUsed())
        {
            zserioContext.getCurvatureStart().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureStart_));
        }
        if (isCurvatureEndUsed())
        {
            zserioContext.getCurvatureEnd().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureEnd_));
        }
        if (isDeltaChainageUsed())
        {
            zserioContext.getDeltaChainage().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(deltaChainage_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += clothoidDataDescription_.bitSizeOf(endBitPosition);
        if (isClothoidPositionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(clothoidPosition_);
        }
        if (isTangentArcStartUsed())
        {
            endBitPosition += 16;
        }
        if (isTangentArcEndUsed())
        {
            endBitPosition += 16;
        }
        if (isCurvatureStartUsed())
        {
            endBitPosition += 10;
        }
        if (isCurvatureEndUsed())
        {
            endBitPosition += 10;
        }
        if (isDeltaChainageUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(deltaChainage_);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += clothoidDataDescription_.bitSizeOf(zserioContext.getClothoidDataDescription(), endBitPosition);
        if (isClothoidPositionUsed())
        {
            endBitPosition += zserioContext.getClothoidPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(clothoidPosition_));
        }
        if (isTangentArcStartUsed())
        {
            endBitPosition += zserioContext.getTangentArcStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcStart_));
        }
        if (isTangentArcEndUsed())
        {
            endBitPosition += zserioContext.getTangentArcEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcEnd_));
        }
        if (isCurvatureStartUsed())
        {
            endBitPosition += zserioContext.getCurvatureStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureStart_));
        }
        if (isCurvatureEndUsed())
        {
            endBitPosition += zserioContext.getCurvatureEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureEnd_));
        }
        if (isDeltaChainageUsed())
        {
            endBitPosition += zserioContext.getDeltaChainage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(deltaChainage_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.adas.types.ClothoidDataDescription getClothoidDataDescription()
    {
        return clothoidDataDescription_;
    }

    public void setClothoidDataDescription(nds.adas.types.ClothoidDataDescription clothoidDataDescription_)
    {
        this.clothoidDataDescription_ = clothoidDataDescription_;
    }

    public java.lang.Integer getClothoidPosition()
    {
        return clothoidPosition_;
    }

    public void setClothoidPosition(java.lang.Integer clothoidPosition_)
    {
        this.clothoidPosition_ = clothoidPosition_;
    }

    public boolean isClothoidPositionUsed()
    {
        return (getClothoidDataDescription().getHasCoordDiff() == true);
    }

    public boolean isClothoidPositionSet()
    {
        return (clothoidPosition_ != null);
    }

    public void resetClothoidPosition()
    {
        this.clothoidPosition_ = null;
    }

    public java.lang.Integer getTangentArcStart()
    {
        return tangentArcStart_;
    }

    public void setTangentArcStart(java.lang.Integer tangentArcStart_)
    {
        this.tangentArcStart_ = tangentArcStart_;
    }

    public boolean isTangentArcStartUsed()
    {
        return (getClothoidDataDescription().getHasTStart() == true);
    }

    public boolean isTangentArcStartSet()
    {
        return (tangentArcStart_ != null);
    }

    public void resetTangentArcStart()
    {
        this.tangentArcStart_ = null;
    }

    public java.lang.Integer getTangentArcEnd()
    {
        return tangentArcEnd_;
    }

    public void setTangentArcEnd(java.lang.Integer tangentArcEnd_)
    {
        this.tangentArcEnd_ = tangentArcEnd_;
    }

    public boolean isTangentArcEndUsed()
    {
        return (getClothoidDataDescription().getHasTEnd() == true);
    }

    public boolean isTangentArcEndSet()
    {
        return (tangentArcEnd_ != null);
    }

    public void resetTangentArcEnd()
    {
        this.tangentArcEnd_ = null;
    }

    public java.lang.Short getCurvatureStart()
    {
        return curvatureStart_;
    }

    public void setCurvatureStart(java.lang.Short curvatureStart_)
    {
        this.curvatureStart_ = curvatureStart_;
    }

    public boolean isCurvatureStartUsed()
    {
        return (getClothoidDataDescription().getHasCStart() == true);
    }

    public boolean isCurvatureStartSet()
    {
        return (curvatureStart_ != null);
    }

    public void resetCurvatureStart()
    {
        this.curvatureStart_ = null;
    }

    public java.lang.Short getCurvatureEnd()
    {
        return curvatureEnd_;
    }

    public void setCurvatureEnd(java.lang.Short curvatureEnd_)
    {
        this.curvatureEnd_ = curvatureEnd_;
    }

    public boolean isCurvatureEndUsed()
    {
        return (getClothoidDataDescription().getHasCEnd() == true);
    }

    public boolean isCurvatureEndSet()
    {
        return (curvatureEnd_ != null);
    }

    public void resetCurvatureEnd()
    {
        this.curvatureEnd_ = null;
    }

    public java.lang.Integer getDeltaChainage()
    {
        return deltaChainage_;
    }

    public void setDeltaChainage(java.lang.Integer deltaChainage_)
    {
        this.deltaChainage_ = deltaChainage_;
    }

    public boolean isDeltaChainageUsed()
    {
        return (getClothoidDataDescription().getHasChainageDiff() == true);
    }

    public boolean isDeltaChainageSet()
    {
        return (deltaChainage_ != null);
    }

    public void resetDeltaChainage()
    {
        this.deltaChainage_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ClothoidData)
        {
            final ClothoidData that = (ClothoidData)obj;

            return
                    ((clothoidDataDescription_ == null) ? that.clothoidDataDescription_ == null : clothoidDataDescription_.equals(that.clothoidDataDescription_)) &&
                    ((!isClothoidPositionUsed()) ? !that.isClothoidPositionUsed() :
                        ((clothoidPosition_ == null) ? that.clothoidPosition_ == null : clothoidPosition_.equals(that.clothoidPosition_))) &&
                    ((!isTangentArcStartUsed()) ? !that.isTangentArcStartUsed() :
                        ((tangentArcStart_ == null) ? that.tangentArcStart_ == null : tangentArcStart_.equals(that.tangentArcStart_))) &&
                    ((!isTangentArcEndUsed()) ? !that.isTangentArcEndUsed() :
                        ((tangentArcEnd_ == null) ? that.tangentArcEnd_ == null : tangentArcEnd_.equals(that.tangentArcEnd_))) &&
                    ((!isCurvatureStartUsed()) ? !that.isCurvatureStartUsed() :
                        ((curvatureStart_ == null) ? that.curvatureStart_ == null : curvatureStart_.equals(that.curvatureStart_))) &&
                    ((!isCurvatureEndUsed()) ? !that.isCurvatureEndUsed() :
                        ((curvatureEnd_ == null) ? that.curvatureEnd_ == null : curvatureEnd_.equals(that.curvatureEnd_))) &&
                    ((!isDeltaChainageUsed()) ? !that.isDeltaChainageUsed() :
                        ((deltaChainage_ == null) ? that.deltaChainage_ == null : deltaChainage_.equals(that.deltaChainage_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, clothoidDataDescription_);
        if (isClothoidPositionUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, clothoidPosition_);
        if (isTangentArcStartUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, tangentArcStart_);
        if (isTangentArcEndUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, tangentArcEnd_);
        if (isCurvatureStartUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, curvatureStart_);
        if (isCurvatureEndUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, curvatureEnd_);
        if (isDeltaChainageUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, deltaChainage_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        clothoidDataDescription_ = new nds.adas.types.ClothoidDataDescription(in);

        if (getClothoidDataDescription().getHasCoordDiff() == true)
        {
            clothoidPosition_ = in.readVarSize();
        }

        if (getClothoidDataDescription().getHasTStart() == true)
        {
            tangentArcStart_ = in.readUnsignedShort();
        }

        if (getClothoidDataDescription().getHasTEnd() == true)
        {
            tangentArcEnd_ = in.readUnsignedShort();
        }

        if (getClothoidDataDescription().getHasCStart() == true)
        {
            curvatureStart_ = (short)in.readBits(10);
        }

        if (getClothoidDataDescription().getHasCEnd() == true)
        {
            curvatureEnd_ = (short)in.readBits(10);
        }

        if (getClothoidDataDescription().getHasChainageDiff() == true)
        {
            deltaChainage_ = in.readVarSize();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        clothoidDataDescription_ = new nds.adas.types.ClothoidDataDescription(zserioContext.getClothoidDataDescription(), in);

        if (getClothoidDataDescription().getHasCoordDiff() == true)
        {
            clothoidPosition_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getClothoidPosition().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }

        if (getClothoidDataDescription().getHasTStart() == true)
        {
            tangentArcStart_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getTangentArcStart().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();
        }

        if (getClothoidDataDescription().getHasTEnd() == true)
        {
            tangentArcEnd_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getTangentArcEnd().read(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), in)).get();
        }

        if (getClothoidDataDescription().getHasCStart() == true)
        {
            curvatureStart_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getCurvatureStart().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), in)).get();
        }

        if (getClothoidDataDescription().getHasCEnd() == true)
        {
            curvatureEnd_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getCurvatureEnd().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), in)).get();
        }

        if (getClothoidDataDescription().getHasChainageDiff() == true)
        {
            deltaChainage_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                    zserioContext.getDeltaChainage().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = clothoidDataDescription_.initializeOffsets(endBitPosition);
        if (isClothoidPositionUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(clothoidPosition_);
        }
        if (isTangentArcStartUsed())
        {
            endBitPosition += 16;
        }
        if (isTangentArcEndUsed())
        {
            endBitPosition += 16;
        }
        if (isCurvatureStartUsed())
        {
            endBitPosition += 10;
        }
        if (isCurvatureEndUsed())
        {
            endBitPosition += 10;
        }
        if (isDeltaChainageUsed())
        {
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(deltaChainage_);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = clothoidDataDescription_.initializeOffsets(zserioContext.getClothoidDataDescription(), endBitPosition);
        if (isClothoidPositionUsed())
        {
            endBitPosition += zserioContext.getClothoidPosition().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(clothoidPosition_));
        }
        if (isTangentArcStartUsed())
        {
            endBitPosition += zserioContext.getTangentArcStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcStart_));
        }
        if (isTangentArcEndUsed())
        {
            endBitPosition += zserioContext.getTangentArcEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcEnd_));
        }
        if (isCurvatureStartUsed())
        {
            endBitPosition += zserioContext.getCurvatureStart().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureStart_));
        }
        if (isCurvatureEndUsed())
        {
            endBitPosition += zserioContext.getCurvatureEnd().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureEnd_));
        }
        if (isDeltaChainageUsed())
        {
            endBitPosition += zserioContext.getDeltaChainage().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                    new zserio.runtime.array.ArrayElement.IntArrayElement(deltaChainage_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        clothoidDataDescription_.write(out);

        if (isClothoidPositionUsed())
        {
            out.writeVarSize(clothoidPosition_);
        }

        if (isTangentArcStartUsed())
        {
            out.writeUnsignedShort(tangentArcStart_);
        }

        if (isTangentArcEndUsed())
        {
            out.writeUnsignedShort(tangentArcEnd_);
        }

        if (isCurvatureStartUsed())
        {
            out.writeBits(curvatureStart_, 10);
        }

        if (isCurvatureEndUsed())
        {
            out.writeBits(curvatureEnd_, 10);
        }

        if (isDeltaChainageUsed())
        {
            out.writeVarSize(deltaChainage_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        clothoidDataDescription_.write(zserioContext.getClothoidDataDescription(), out);

        if (isClothoidPositionUsed())
        {
            zserioContext.getClothoidPosition().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(clothoidPosition_));
        }

        if (isTangentArcStartUsed())
        {
            zserioContext.getTangentArcStart().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcStart_));
        }

        if (isTangentArcEndUsed())
        {
            zserioContext.getTangentArcEnd().write(new zserio.runtime.array.ArrayTraits.BitFieldIntArrayTraits((int)(16)), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(tangentArcEnd_));
        }

        if (isCurvatureStartUsed())
        {
            zserioContext.getCurvatureStart().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureStart_));
        }

        if (isCurvatureEndUsed())
        {
            zserioContext.getCurvatureEnd().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(10)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(curvatureEnd_));
        }

        if (isDeltaChainageUsed())
        {
            zserioContext.getDeltaChainage().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                    new zserio.runtime.array.ArrayElement.IntArrayElement(deltaChainage_));
        }
    }

    private nds.adas.types.ClothoidDataDescription clothoidDataDescription_;
    private java.lang.Integer clothoidPosition_;
    private java.lang.Integer tangentArcStart_;
    private java.lang.Integer tangentArcEnd_;
    private java.lang.Short curvatureStart_;
    private java.lang.Short curvatureEnd_;
    private java.lang.Integer deltaChainage_;
}
