/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class GradientData implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            chainageOffset_ = new zserio.runtime.array.DeltaContext();
            relativeGradeLineElevation_ = new zserio.runtime.array.DeltaContext();
            radiusValue_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getChainageOffset()
        {
            return chainageOffset_;
        }

        public zserio.runtime.array.DeltaContext getRelativeGradeLineElevation()
        {
            return relativeGradeLineElevation_;
        }

        public zserio.runtime.array.DeltaContext getRadiusValue()
        {
            return radiusValue_;
        }

        private zserio.runtime.array.DeltaContext chainageOffset_;
        private zserio.runtime.array.DeltaContext relativeGradeLineElevation_;
        private zserio.runtime.array.DeltaContext radiusValue_;
    };

    public GradientData()
    {
    }

    public GradientData(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public GradientData(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public GradientData(
            boolean hasRadiusValue_,
            int chainageOffset_,
            byte relativeGradeLineElevation_,
            java.lang.Short radiusValue_)
    {
        setHasRadiusValue(hasRadiusValue_);
        setChainageOffset(chainageOffset_);
        setRelativeGradeLineElevation(relativeGradeLineElevation_);
        setRadiusValue(radiusValue_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getChainageOffset().init(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(chainageOffset_));
        zserioContext.getRelativeGradeLineElevation().init(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(relativeGradeLineElevation_));
        if (isRadiusValueUsed())
        {
            zserioContext.getRadiusValue().init(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(radiusValue_));
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(chainageOffset_);
        endBitPosition += 8;
        if (isRadiusValueUsed())
        {
            endBitPosition += 8;
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserioContext.getChainageOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(chainageOffset_));
        endBitPosition += zserioContext.getRelativeGradeLineElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(relativeGradeLineElevation_));
        if (isRadiusValueUsed())
        {
            endBitPosition += zserioContext.getRadiusValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(radiusValue_));
        }

        return (int)(endBitPosition - bitPosition);
    }

    public boolean getHasRadiusValue()
    {
        return hasRadiusValue_;
    }

    public void setHasRadiusValue(boolean hasRadiusValue_)
    {
        this.hasRadiusValue_ = hasRadiusValue_;
    }

    public int getChainageOffset()
    {
        return chainageOffset_;
    }

    public void setChainageOffset(int chainageOffset_)
    {
        this.chainageOffset_ = chainageOffset_;
    }

    public byte getRelativeGradeLineElevation()
    {
        return relativeGradeLineElevation_;
    }

    public void setRelativeGradeLineElevation(byte relativeGradeLineElevation_)
    {
        this.relativeGradeLineElevation_ = relativeGradeLineElevation_;
    }

    public java.lang.Short getRadiusValue()
    {
        return radiusValue_;
    }

    public void setRadiusValue(java.lang.Short radiusValue_)
    {
        this.radiusValue_ = radiusValue_;
    }

    public boolean isRadiusValueUsed()
    {
        return (getHasRadiusValue() == true);
    }

    public boolean isRadiusValueSet()
    {
        return (radiusValue_ != null);
    }

    public void resetRadiusValue()
    {
        this.radiusValue_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof GradientData)
        {
            final GradientData that = (GradientData)obj;

            return
                    hasRadiusValue_ == that.hasRadiusValue_ &&
                    chainageOffset_ == that.chainageOffset_ &&
                    relativeGradeLineElevation_ == that.relativeGradeLineElevation_ &&
                    ((!isRadiusValueUsed()) ? !that.isRadiusValueUsed() :
                        ((radiusValue_ == null) ? that.radiusValue_ == null : radiusValue_.equals(that.radiusValue_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasRadiusValue_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, chainageOffset_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, relativeGradeLineElevation_);
        if (isRadiusValueUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, radiusValue_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        hasRadiusValue_ = in.readBool();

        chainageOffset_ = in.readVarSize();

        relativeGradeLineElevation_ = in.readByte();

        if (getHasRadiusValue() == true)
        {
            radiusValue_ = in.readUnsignedByte();
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        hasRadiusValue_ = in.readBool();

        chainageOffset_ = ((zserio.runtime.array.ArrayElement.IntArrayElement)
                zserioContext.getChainageOffset().read(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), in)).get();

        relativeGradeLineElevation_ = ((zserio.runtime.array.ArrayElement.ByteArrayElement)
                zserioContext.getRelativeGradeLineElevation().read(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), in)).get();

        if (getHasRadiusValue() == true)
        {
            radiusValue_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                    zserioContext.getRadiusValue().read(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), in)).get();
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarSize(chainageOffset_);
        endBitPosition += 8;
        if (isRadiusValueUsed())
        {
            endBitPosition += 8;
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += 1;
        endBitPosition += zserioContext.getChainageOffset().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                new zserio.runtime.array.ArrayElement.IntArrayElement(chainageOffset_));
        endBitPosition += zserioContext.getRelativeGradeLineElevation().bitSizeOf(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)),
                new zserio.runtime.array.ArrayElement.ByteArrayElement(relativeGradeLineElevation_));
        if (isRadiusValueUsed())
        {
            endBitPosition += zserioContext.getRadiusValue().bitSizeOf(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)),
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(radiusValue_));
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeBool(hasRadiusValue_);

        out.writeVarSize(chainageOffset_);

        out.writeByte(relativeGradeLineElevation_);

        if (isRadiusValueUsed())
        {
            out.writeUnsignedByte(radiusValue_);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        out.writeBool(hasRadiusValue_);

        zserioContext.getChainageOffset().write(new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.IntArrayElement(chainageOffset_));

        zserioContext.getRelativeGradeLineElevation().write(new zserio.runtime.array.ArrayTraits.SignedBitFieldByteArrayTraits((int)(8)), out,
                new zserio.runtime.array.ArrayElement.ByteArrayElement(relativeGradeLineElevation_));

        if (isRadiusValueUsed())
        {
            zserioContext.getRadiusValue().write(new zserio.runtime.array.ArrayTraits.BitFieldShortArrayTraits((int)(8)), out,
                    new zserio.runtime.array.ArrayElement.ShortArrayElement(radiusValue_));
        }
    }

    private boolean hasRadiusValue_;
    private int chainageOffset_;
    private byte relativeGradeLineElevation_;
    private java.lang.Short radiusValue_;
}
