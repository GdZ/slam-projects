/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class SlopeArray implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numOfValues_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumOfValues()
        {
            return numOfValues_;
        }

        private zserio.runtime.array.DeltaContext numOfValues_;
    };

    public SlopeArray()
    {
    }

    public SlopeArray(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public SlopeArray(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public SlopeArray(
            short numOfValues_,
            nds.adas.types.SlopePoint[] slopePoint_)
    {
        setNumOfValues(numOfValues_);
        setSlopePoint(slopePoint_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumOfValues().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfValues_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numOfValues_);
        endBitPosition += slopePoint_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumOfValues().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfValues_));
        endBitPosition += slopePoint_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumOfValues()
    {
        return numOfValues_;
    }

    public void setNumOfValues(short numOfValues_)
    {
        this.numOfValues_ = numOfValues_;
    }

    public nds.adas.types.SlopePoint[] getSlopePoint()
    {
        return (slopePoint_ == null) ? null : slopePoint_.getRawArray();
    }

    public void setSlopePoint(nds.adas.types.SlopePoint[] slopePoint_)
    {
        this.slopePoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.SlopePoint.class, slopePoint_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.SlopePoint>(new ZserioElementFactory_slopePoint()),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof SlopeArray)
        {
            final SlopeArray that = (SlopeArray)obj;

            return
                    numOfValues_ == that.numOfValues_ &&
                    ((slopePoint_ == null) ? that.slopePoint_ == null : slopePoint_.equals(that.slopePoint_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numOfValues_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, slopePoint_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numOfValues_ = in.readVarUInt16();

        slopePoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.SlopePoint.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.SlopePoint>(new ZserioElementFactory_slopePoint()),
                zserio.runtime.array.ArrayType.NORMAL);
        slopePoint_.read(in, (int)(getNumOfValues()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numOfValues_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumOfValues().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        slopePoint_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.adas.types.SlopePoint.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.adas.types.SlopePoint>(new ZserioElementFactory_slopePoint()),
                zserio.runtime.array.ArrayType.NORMAL);
        slopePoint_.readPacked(in, (int)(getNumOfValues()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numOfValues_);
        endBitPosition = slopePoint_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumOfValues().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfValues_));
        endBitPosition = slopePoint_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numOfValues_);

        if (slopePoint_.size() != (int)(getNumOfValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SlopeArray.slopePoint: " +
                    slopePoint_.size() + " != " + (int)(getNumOfValues()) + "!");
        }
        slopePoint_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumOfValues().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numOfValues_));

        if (slopePoint_.size() != (int)(getNumOfValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field SlopeArray.slopePoint: " +
                    slopePoint_.size() + " != " + (int)(getNumOfValues()) + "!");
        }
        slopePoint_.writePacked(out);
    }

    private static final class ZserioElementFactory_slopePoint implements zserio.runtime.array.PackableElementFactory<nds.adas.types.SlopePoint>
    {
        @Override
        public nds.adas.types.SlopePoint create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.adas.types.SlopePoint(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.adas.types.SlopePoint.ZserioPackingContext();
        }

        @Override
        public nds.adas.types.SlopePoint create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.adas.types.SlopePoint(context, in);
        }
    }

    private short numOfValues_;
    private zserio.runtime.array.Array slopePoint_;
}
