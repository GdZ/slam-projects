/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.adas.types;

public class ElevationArray implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            numValues_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getNumValues()
        {
            return numValues_;
        }

        private zserio.runtime.array.DeltaContext numValues_;
    };

    public ElevationArray()
    {
    }

    public ElevationArray(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ElevationArray(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ElevationArray(
            short numValues_,
            int[] point_,
            int[] elevation_)
    {
        setNumValues(numValues_);
        setPoint(point_);
        setElevation(elevation_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumValues().init(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numValues_));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numValues_);
        endBitPosition += point_.bitSizeOfPacked(endBitPosition);
        endBitPosition += elevation_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumValues().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numValues_));
        endBitPosition += point_.bitSizeOfPacked(endBitPosition);
        endBitPosition += elevation_.bitSizeOfPacked(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public short getNumValues()
    {
        return numValues_;
    }

    public void setNumValues(short numValues_)
    {
        this.numValues_ = numValues_;
    }

    public int[] getPoint()
    {
        return (point_ == null) ? null : point_.getRawArray();
    }

    public void setPoint(int[] point_)
    {
        this.point_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(point_),
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    public int[] getElevation()
    {
        return (elevation_ == null) ? null : elevation_.getRawArray();
    }

    public void setElevation(int[] elevation_)
    {
        this.elevation_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(elevation_),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ElevationArray)
        {
            final ElevationArray that = (ElevationArray)obj;

            return
                    numValues_ == that.numValues_ &&
                    ((point_ == null) ? that.point_ == null : point_.equals(that.point_)) &&
                    ((elevation_ == null) ? that.elevation_ == null : elevation_.equals(that.elevation_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, numValues_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, point_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, elevation_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        numValues_ = in.readVarUInt16();

        point_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        point_.readPacked(in, (int)(getNumValues()));

        elevation_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        elevation_.readPacked(in, (int)(getNumValues()));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        numValues_ = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                zserioContext.getNumValues().read(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();

        point_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarSizeArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        point_.readPacked(in, (int)(getNumValues()));

        elevation_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.IntRawArray(),
                new zserio.runtime.array.ArrayTraits.VarInt32ArrayTraits(),
                zserio.runtime.array.ArrayType.NORMAL);
        elevation_.readPacked(in, (int)(getNumValues()));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(numValues_);
        endBitPosition = point_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = elevation_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += zserioContext.getNumValues().bitSizeOf(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numValues_));
        endBitPosition = point_.initializeOffsetsPacked(endBitPosition);
        endBitPosition = elevation_.initializeOffsetsPacked(endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(numValues_);

        if (point_.size() != (int)(getNumValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ElevationArray.point: " +
                    point_.size() + " != " + (int)(getNumValues()) + "!");
        }
        point_.writePacked(out);

        if (elevation_.size() != (int)(getNumValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ElevationArray.elevation: " +
                    elevation_.size() + " != " + (int)(getNumValues()) + "!");
        }
        elevation_.writePacked(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        zserioContext.getNumValues().write(new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(numValues_));

        if (point_.size() != (int)(getNumValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ElevationArray.point: " +
                    point_.size() + " != " + (int)(getNumValues()) + "!");
        }
        point_.writePacked(out);

        if (elevation_.size() != (int)(getNumValues()))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong array length for field ElevationArray.elevation: " +
                    elevation_.size() + " != " + (int)(getNumValues()) + "!");
        }
        elevation_.writePacked(out);
    }

    private short numValues_;
    private zserio.runtime.array.Array point_;
    private zserio.runtime.array.Array elevation_;
}
