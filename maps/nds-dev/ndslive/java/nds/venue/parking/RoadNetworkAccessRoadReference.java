/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.parking;

public class RoadNetworkAccessRoadReference implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            facilityId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            type_ = new zserio.runtime.array.DeltaContext();
            indirectReference_ = new nds.road.reference.types.RoadReferenceIndirect.ZserioPackingContext();
            reference_ = new nds.road.reference.types.RoadReference.ZserioPackingContext();
            validity_ = new nds.road.reference.types.RoadPositionValidity.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getFacilityId()
        {
            return facilityId_;
        }

        public zserio.runtime.array.DeltaContext getType()
        {
            return type_;
        }

        public nds.road.reference.types.RoadReferenceIndirect.ZserioPackingContext getIndirectReference()
        {
            return indirectReference_;
        }

        public nds.road.reference.types.RoadReference.ZserioPackingContext getReference()
        {
            return reference_;
        }

        public nds.road.reference.types.RoadPositionValidity.ZserioPackingContext getValidity()
        {
            return validity_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext facilityId_;
        private zserio.runtime.array.DeltaContext type_;
        private nds.road.reference.types.RoadReferenceIndirect.ZserioPackingContext indirectReference_;
        private nds.road.reference.types.RoadReference.ZserioPackingContext reference_;
        private nds.road.reference.types.RoadPositionValidity.ZserioPackingContext validity_;
    };

    public RoadNetworkAccessRoadReference()
    {
    }

    public RoadNetworkAccessRoadReference(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public RoadNetworkAccessRoadReference(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public RoadNetworkAccessRoadReference(
            nds.core.types.Var4ByteId facilityId_,
            nds.venue.parking.RoadNetworkAccessType type_,
            boolean hasIndirectReference_,
            nds.road.reference.types.RoadReferenceIndirect indirectReference_,
            nds.road.reference.types.RoadReference reference_,
            nds.road.reference.types.RoadPositionValidity validity_)
    {
        setFacilityId(facilityId_);
        setType(type_);
        setHasIndirectReference(hasIndirectReference_);
        setIndirectReference(indirectReference_);
        setReference(reference_);
        setValidity(validity_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        facilityId_.initPackingContext(zserioContext.getFacilityId());
        type_.initPackingContext(zserioContext.getType());
        if (isIndirectReferenceUsed())
        {
            indirectReference_.initPackingContext(zserioContext.getIndirectReference());
        }
        if (isReferenceUsed())
        {
            reference_.initPackingContext(zserioContext.getReference());
        }
        validity_.initPackingContext(zserioContext.getValidity());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += facilityId_.bitSizeOf(endBitPosition);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isIndirectReferenceUsed())
        {
            endBitPosition += indirectReference_.bitSizeOf(endBitPosition);
        }
        if (isReferenceUsed())
        {
            endBitPosition += reference_.bitSizeOf(endBitPosition);
        }
        endBitPosition += validity_.bitSizeOf(endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += facilityId_.bitSizeOf(zserioContext.getFacilityId(), endBitPosition);
        endBitPosition += type_.bitSizeOf(zserioContext.getType(), endBitPosition);
        endBitPosition += 1;
        if (isIndirectReferenceUsed())
        {
            endBitPosition += indirectReference_.bitSizeOf(zserioContext.getIndirectReference(), endBitPosition);
        }
        if (isReferenceUsed())
        {
            endBitPosition += reference_.bitSizeOf(zserioContext.getReference(), endBitPosition);
        }
        endBitPosition += validity_.bitSizeOf(zserioContext.getValidity(), endBitPosition);

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getFacilityId()
    {
        return facilityId_;
    }

    public void setFacilityId(nds.core.types.Var4ByteId facilityId_)
    {
        this.facilityId_ = facilityId_;
    }

    public nds.venue.parking.RoadNetworkAccessType getType()
    {
        return type_;
    }

    public void setType(nds.venue.parking.RoadNetworkAccessType type_)
    {
        this.type_ = type_;
    }

    public boolean getHasIndirectReference()
    {
        return hasIndirectReference_;
    }

    public void setHasIndirectReference(boolean hasIndirectReference_)
    {
        this.hasIndirectReference_ = hasIndirectReference_;
    }

    public nds.road.reference.types.RoadReferenceIndirect getIndirectReference()
    {
        return indirectReference_;
    }

    public void setIndirectReference(nds.road.reference.types.RoadReferenceIndirect indirectReference_)
    {
        this.indirectReference_ = indirectReference_;
    }

    public boolean isIndirectReferenceUsed()
    {
        return (getHasIndirectReference());
    }

    public boolean isIndirectReferenceSet()
    {
        return (indirectReference_ != null);
    }

    public void resetIndirectReference()
    {
        this.indirectReference_ = null;
    }

    public nds.road.reference.types.RoadReference getReference()
    {
        return reference_;
    }

    public void setReference(nds.road.reference.types.RoadReference reference_)
    {
        this.reference_ = reference_;
    }

    public boolean isReferenceUsed()
    {
        return (!getHasIndirectReference());
    }

    public boolean isReferenceSet()
    {
        return (reference_ != null);
    }

    public void resetReference()
    {
        this.reference_ = null;
    }

    public nds.road.reference.types.RoadPositionValidity getValidity()
    {
        return validity_;
    }

    public void setValidity(nds.road.reference.types.RoadPositionValidity validity_)
    {
        this.validity_ = validity_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof RoadNetworkAccessRoadReference)
        {
            final RoadNetworkAccessRoadReference that = (RoadNetworkAccessRoadReference)obj;

            return
                    ((facilityId_ == null) ? that.facilityId_ == null : facilityId_.equals(that.facilityId_)) &&
                    ((type_ == null) ? that.type_ == null : type_.getValue() == that.type_.getValue()) &&
                    hasIndirectReference_ == that.hasIndirectReference_ &&
                    ((!isIndirectReferenceUsed()) ? !that.isIndirectReferenceUsed() :
                        ((indirectReference_ == null) ? that.indirectReference_ == null : indirectReference_.equals(that.indirectReference_))) &&
                    ((!isReferenceUsed()) ? !that.isReferenceUsed() :
                        ((reference_ == null) ? that.reference_ == null : reference_.equals(that.reference_))) &&
                    ((validity_ == null) ? that.validity_ == null : validity_.equals(that.validity_));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, facilityId_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, type_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, hasIndirectReference_);
        if (isIndirectReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, indirectReference_);
        if (isReferenceUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, reference_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, validity_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        facilityId_ = new nds.core.types.Var4ByteId(in);

        type_ = nds.venue.parking.RoadNetworkAccessType.readEnum(in);

        hasIndirectReference_ = in.readBool();

        if (getHasIndirectReference())
        {
            indirectReference_ = new nds.road.reference.types.RoadReferenceIndirect(in);
        }

        if (!getHasIndirectReference())
        {
            reference_ = new nds.road.reference.types.RoadReference(in);
        }

        validity_ = new nds.road.reference.types.RoadPositionValidity(in, (byte)(0));
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        facilityId_ = new nds.core.types.Var4ByteId(zserioContext.getFacilityId(), in);

        type_ = nds.venue.parking.RoadNetworkAccessType.readEnum(zserioContext.getType(), in);

        hasIndirectReference_ = in.readBool();

        if (getHasIndirectReference())
        {
            indirectReference_ = new nds.road.reference.types.RoadReferenceIndirect(zserioContext.getIndirectReference(), in);
        }

        if (!getHasIndirectReference())
        {
            reference_ = new nds.road.reference.types.RoadReference(zserioContext.getReference(), in);
        }

        validity_ = new nds.road.reference.types.RoadPositionValidity(zserioContext.getValidity(), in, (byte)(0));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = facilityId_.initializeOffsets(endBitPosition);
        endBitPosition += type_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isIndirectReferenceUsed())
        {
            endBitPosition = indirectReference_.initializeOffsets(endBitPosition);
        }
        if (isReferenceUsed())
        {
            endBitPosition = reference_.initializeOffsets(endBitPosition);
        }
        endBitPosition = validity_.initializeOffsets(endBitPosition);

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = facilityId_.initializeOffsets(zserioContext.getFacilityId(), endBitPosition);
        endBitPosition = type_.initializeOffsets(zserioContext.getType(), endBitPosition);
        endBitPosition += 1;
        if (isIndirectReferenceUsed())
        {
            endBitPosition = indirectReference_.initializeOffsets(zserioContext.getIndirectReference(), endBitPosition);
        }
        if (isReferenceUsed())
        {
            endBitPosition = reference_.initializeOffsets(zserioContext.getReference(), endBitPosition);
        }
        endBitPosition = validity_.initializeOffsets(zserioContext.getValidity(), endBitPosition);

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        facilityId_.write(out);

        type_.write(out);

        out.writeBool(hasIndirectReference_);

        if (isIndirectReferenceUsed())
        {
            indirectReference_.write(out);
        }

        if (isReferenceUsed())
        {
            reference_.write(out);
        }

        // check parameters
        if (validity_.getShift() != (byte)(0))
        {
            throw new zserio.runtime.ZserioError("Write: Wrong parameter shift for field RoadNetworkAccessRoadReference.validity: " +
                    validity_.getShift() + " != " + (byte)(0) + "!");
        }
        validity_.write(out);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        facilityId_.write(zserioContext.getFacilityId(), out);

        type_.write(zserioContext.getType(), out);

        out.writeBool(hasIndirectReference_);

        if (isIndirectReferenceUsed())
        {
            indirectReference_.write(zserioContext.getIndirectReference(), out);
        }

        if (isReferenceUsed())
        {
            reference_.write(zserioContext.getReference(), out);
        }

        validity_.write(zserioContext.getValidity(), out);
    }

    private nds.core.types.Var4ByteId facilityId_;
    private nds.venue.parking.RoadNetworkAccessType type_;
    private boolean hasIndirectReference_;
    private nds.road.reference.types.RoadReferenceIndirect indirectReference_;
    private nds.road.reference.types.RoadReference reference_;
    private nds.road.reference.types.RoadPositionValidity validity_;
}
