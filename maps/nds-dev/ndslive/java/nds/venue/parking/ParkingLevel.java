/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.parking;

public class ParkingLevel implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            id_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getId()
        {
            return id_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext id_;
    };

    public ParkingLevel()
    {
    }

    public ParkingLevel(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ParkingLevel(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ParkingLevel(
            nds.core.types.Var4ByteId id_,
            nds.venue.parking.ParkingSection[] sections_,
            nds.venue.parking.ParkingLevelConnector[] connectedLevels_)
    {
        setId(id_);
        setSections(sections_);
        setConnectedLevels(connectedLevels_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.initPackingContext(zserioContext.getId());
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(endBitPosition);
        endBitPosition += sections_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isConnectedLevelsUsed())
        {
            endBitPosition += connectedLevels_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += id_.bitSizeOf(zserioContext.getId(), endBitPosition);
        endBitPosition += sections_.bitSizeOfPacked(endBitPosition);
        endBitPosition += 1;
        if (isConnectedLevelsUsed())
        {
            endBitPosition += connectedLevels_.bitSizeOfPacked(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getId()
    {
        return id_;
    }

    public void setId(nds.core.types.Var4ByteId id_)
    {
        this.id_ = id_;
    }

    public nds.venue.parking.ParkingSection[] getSections()
    {
        return (sections_ == null) ? null : sections_.getRawArray();
    }

    public void setSections(nds.venue.parking.ParkingSection[] sections_)
    {
        this.sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingSection.class, sections_),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.AUTO);
    }

    public nds.venue.parking.ParkingLevelConnector[] getConnectedLevels()
    {
        return (connectedLevels_ == null) ? null : connectedLevels_.getRawArray();
    }

    public void setConnectedLevels(nds.venue.parking.ParkingLevelConnector[] connectedLevels_)
    {
        if (connectedLevels_ == null)
        {
            this.connectedLevels_ = null;
        }
        else
        {
            this.connectedLevels_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingLevelConnector.class, connectedLevels_),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingLevelConnector>(new ZserioElementFactory_connectedLevels()),
                    zserio.runtime.array.ArrayType.AUTO);
        }
    }

    public boolean isConnectedLevelsUsed()
    {
        return isConnectedLevelsSet();
    }

    public boolean isConnectedLevelsSet()
    {
        return (connectedLevels_ != null);
    }

    public void resetConnectedLevels()
    {
        this.connectedLevels_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingLevel)
        {
            final ParkingLevel that = (ParkingLevel)obj;

            return
                    ((id_ == null) ? that.id_ == null : id_.equals(that.id_)) &&
                    ((sections_ == null) ? that.sections_ == null : sections_.equals(that.sections_)) &&
                    ((!isConnectedLevelsUsed()) ? !that.isConnectedLevelsUsed() :
                        ((connectedLevels_ == null) ? that.connectedLevels_ == null : connectedLevels_.equals(that.connectedLevels_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, id_);
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, sections_);
        if (isConnectedLevelsUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, connectedLevels_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        id_ = new nds.core.types.Var4ByteId(in);

        sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingSection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.AUTO);
        sections_.read(in);

        if (in.readBool())
        {
            connectedLevels_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingLevelConnector.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingLevelConnector>(new ZserioElementFactory_connectedLevels()),
                    zserio.runtime.array.ArrayType.AUTO);
            connectedLevels_.read(in);
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_ = new nds.core.types.Var4ByteId(zserioContext.getId(), in);

        sections_ = new zserio.runtime.array.Array(
                new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingSection.class),
                new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingSection>(new ZserioElementFactory_sections()),
                zserio.runtime.array.ArrayType.AUTO);
        sections_.readPacked(in);

        if (in.readBool())
        {
            connectedLevels_ = new zserio.runtime.array.Array(
                    new zserio.runtime.array.RawArray.ObjectRawArray<>(nds.venue.parking.ParkingLevelConnector.class),
                    new zserio.runtime.array.ArrayTraits.WritePackableObjectArrayTraits<nds.venue.parking.ParkingLevelConnector>(new ZserioElementFactory_connectedLevels()),
                    zserio.runtime.array.ArrayType.AUTO);
            connectedLevels_.readPacked(in);
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(endBitPosition);
        endBitPosition = sections_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isConnectedLevelsUsed())
        {
            endBitPosition = connectedLevels_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = id_.initializeOffsets(zserioContext.getId(), endBitPosition);
        endBitPosition = sections_.initializeOffsetsPacked(endBitPosition);
        endBitPosition += 1;
        if (isConnectedLevelsUsed())
        {
            endBitPosition = connectedLevels_.initializeOffsetsPacked(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        id_.write(out);

        sections_.write(out);

        if (isConnectedLevelsUsed())
        {
            out.writeBool(true);
            connectedLevels_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        id_.write(zserioContext.getId(), out);

        sections_.writePacked(out);

        if (isConnectedLevelsUsed())
        {
            out.writeBool(true);
            connectedLevels_.writePacked(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private static final class ZserioElementFactory_sections implements zserio.runtime.array.PackableElementFactory<nds.venue.parking.ParkingSection>
    {
        @Override
        public nds.venue.parking.ParkingSection create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.venue.parking.ParkingSection(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.venue.parking.ParkingSection.ZserioPackingContext();
        }

        @Override
        public nds.venue.parking.ParkingSection create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.venue.parking.ParkingSection(context, in);
        }
    }

    private static final class ZserioElementFactory_connectedLevels implements zserio.runtime.array.PackableElementFactory<nds.venue.parking.ParkingLevelConnector>
    {
        @Override
        public nds.venue.parking.ParkingLevelConnector create(zserio.runtime.io.BitStreamReader in, int index)
                throws java.io.IOException
        {
            return new nds.venue.parking.ParkingLevelConnector(in);
        }

        @Override
        public zserio.runtime.array.PackingContext createPackingContext()
        {
            return new nds.venue.parking.ParkingLevelConnector.ZserioPackingContext();
        }

        @Override
        public nds.venue.parking.ParkingLevelConnector create(zserio.runtime.array.PackingContext context,
                zserio.runtime.io.BitStreamReader in, int index) throws java.io.IOException
        {
            return new nds.venue.parking.ParkingLevelConnector(context, in);
        }
    }

    private nds.core.types.Var4ByteId id_;
    private zserio.runtime.array.Array sections_;
    private zserio.runtime.array.Array connectedLevels_;
}
