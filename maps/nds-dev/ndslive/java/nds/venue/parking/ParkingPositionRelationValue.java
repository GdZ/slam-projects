/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.parking;

public class ParkingPositionRelationValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            sectionId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            parkingSpotId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            outsideRoadReference_ = new nds.venue.parking.RoadNetworkAccessRoadReference.ZserioPackingContext();
            outsideLaneReference_ = new nds.venue.parking.RoadNetworkAccessLaneReference.ZserioPackingContext();
            roadNetworkAccess_ = new nds.venue.parking.RoadNetworkAccess.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getSectionId()
        {
            return sectionId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getParkingSpotId()
        {
            return parkingSpotId_;
        }

        public nds.venue.parking.RoadNetworkAccessRoadReference.ZserioPackingContext getOutsideRoadReference()
        {
            return outsideRoadReference_;
        }

        public nds.venue.parking.RoadNetworkAccessLaneReference.ZserioPackingContext getOutsideLaneReference()
        {
            return outsideLaneReference_;
        }

        public nds.venue.parking.RoadNetworkAccess.ZserioPackingContext getRoadNetworkAccess()
        {
            return roadNetworkAccess_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext sectionId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext parkingSpotId_;
        private nds.venue.parking.RoadNetworkAccessRoadReference.ZserioPackingContext outsideRoadReference_;
        private nds.venue.parking.RoadNetworkAccessLaneReference.ZserioPackingContext outsideLaneReference_;
        private nds.venue.parking.RoadNetworkAccess.ZserioPackingContext roadNetworkAccess_;
    };

    public ParkingPositionRelationValue(
            nds.venue.parking.ParkingPositionRelationType type_)
    {
        this.type_ = type_;
    }

    public ParkingPositionRelationValue(zserio.runtime.io.BitStreamReader in,
            nds.venue.parking.ParkingPositionRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public ParkingPositionRelationValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.venue.parking.ParkingPositionRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            return CHOICE_sectionId;
        case ACCESS_PARKING_SPOT:
            return CHOICE_parkingSpotId;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            return CHOICE_outsideRoadReference;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            return CHOICE_outsideLaneReference;
        case ROAD_NETWORK_ACCESS:
            return CHOICE_roadNetworkAccess;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            getSectionId().initPackingContext(zserioContext.getSectionId());
            break;
        case ACCESS_PARKING_SPOT:
            getParkingSpotId().initPackingContext(zserioContext.getParkingSpotId());
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            getOutsideRoadReference().initPackingContext(zserioContext.getOutsideRoadReference());
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            getOutsideLaneReference().initPackingContext(zserioContext.getOutsideLaneReference());
            break;
        case ROAD_NETWORK_ACCESS:
            getRoadNetworkAccess().initPackingContext(zserioContext.getRoadNetworkAccess());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            endBitPosition += getSectionId().bitSizeOf(endBitPosition);
            break;
        case ACCESS_PARKING_SPOT:
            endBitPosition += getParkingSpotId().bitSizeOf(endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            endBitPosition += getOutsideRoadReference().bitSizeOf(endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            endBitPosition += getOutsideLaneReference().bitSizeOf(endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS:
            endBitPosition += getRoadNetworkAccess().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            endBitPosition += getSectionId().bitSizeOf(zserioContext.getSectionId(), endBitPosition);
            break;
        case ACCESS_PARKING_SPOT:
            endBitPosition += getParkingSpotId().bitSizeOf(zserioContext.getParkingSpotId(), endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            endBitPosition += getOutsideRoadReference().bitSizeOf(zserioContext.getOutsideRoadReference(), endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            endBitPosition += getOutsideLaneReference().bitSizeOf(zserioContext.getOutsideLaneReference(), endBitPosition);
            break;
        case ROAD_NETWORK_ACCESS:
            endBitPosition += getRoadNetworkAccess().bitSizeOf(zserioContext.getRoadNetworkAccess(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.venue.parking.ParkingPositionRelationType getType()
    {
        return this.type_;
    }

    public nds.core.types.Var4ByteId getSectionId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setSectionId(nds.core.types.Var4ByteId sectionId_)
    {
        objectChoice = sectionId_;
    }

    public nds.core.types.Var4ByteId getParkingSpotId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setParkingSpotId(nds.core.types.Var4ByteId parkingSpotId_)
    {
        objectChoice = parkingSpotId_;
    }

    public nds.venue.parking.RoadNetworkAccessRoadReference getOutsideRoadReference()
    {
        return (nds.venue.parking.RoadNetworkAccessRoadReference)objectChoice;
    }

    public void setOutsideRoadReference(nds.venue.parking.RoadNetworkAccessRoadReference outsideRoadReference_)
    {
        objectChoice = outsideRoadReference_;
    }

    public nds.venue.parking.RoadNetworkAccessLaneReference getOutsideLaneReference()
    {
        return (nds.venue.parking.RoadNetworkAccessLaneReference)objectChoice;
    }

    public void setOutsideLaneReference(nds.venue.parking.RoadNetworkAccessLaneReference outsideLaneReference_)
    {
        objectChoice = outsideLaneReference_;
    }

    public nds.venue.parking.RoadNetworkAccess getRoadNetworkAccess()
    {
        return (nds.venue.parking.RoadNetworkAccess)objectChoice;
    }

    public void setRoadNetworkAccess(nds.venue.parking.RoadNetworkAccess roadNetworkAccess_)
    {
        objectChoice = roadNetworkAccess_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingPositionRelationValue)
        {
            final ParkingPositionRelationValue that = (ParkingPositionRelationValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PART_OF_SECTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case ACCESS_PARKING_SPOT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.parking.RoadNetworkAccessRoadReference)objectChoice);
                break;
            case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.parking.RoadNetworkAccessLaneReference)objectChoice);
                break;
            case ROAD_NETWORK_ACCESS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.parking.RoadNetworkAccess)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case ACCESS_PARKING_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            objectChoice = new nds.venue.parking.RoadNetworkAccessRoadReference(in);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            objectChoice = new nds.venue.parking.RoadNetworkAccessLaneReference(in);
            break;
        case ROAD_NETWORK_ACCESS:
            objectChoice = new nds.venue.parking.RoadNetworkAccess(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getSectionId(), in);
            break;
        case ACCESS_PARKING_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getParkingSpotId(), in);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            objectChoice = new nds.venue.parking.RoadNetworkAccessRoadReference(zserioContext.getOutsideRoadReference(), in);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            objectChoice = new nds.venue.parking.RoadNetworkAccessLaneReference(zserioContext.getOutsideLaneReference(), in);
            break;
        case ROAD_NETWORK_ACCESS:
            objectChoice = new nds.venue.parking.RoadNetworkAccess(zserioContext.getRoadNetworkAccess(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            {
                endBitPosition = getSectionId().initializeOffsets(endBitPosition);
            }
            break;
        case ACCESS_PARKING_SPOT:
            {
                endBitPosition = getParkingSpotId().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            {
                endBitPosition = getOutsideRoadReference().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            {
                endBitPosition = getOutsideLaneReference().initializeOffsets(endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS:
            {
                endBitPosition = getRoadNetworkAccess().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            {
                endBitPosition = getSectionId().initializeOffsets(zserioContext.getSectionId(), endBitPosition);
            }
            break;
        case ACCESS_PARKING_SPOT:
            {
                endBitPosition = getParkingSpotId().initializeOffsets(zserioContext.getParkingSpotId(), endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            {
                endBitPosition = getOutsideRoadReference().initializeOffsets(zserioContext.getOutsideRoadReference(), endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            {
                endBitPosition = getOutsideLaneReference().initializeOffsets(zserioContext.getOutsideLaneReference(), endBitPosition);
            }
            break;
        case ROAD_NETWORK_ACCESS:
            {
                endBitPosition = getRoadNetworkAccess().initializeOffsets(zserioContext.getRoadNetworkAccess(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            getSectionId().write(out);
            break;
        case ACCESS_PARKING_SPOT:
            getParkingSpotId().write(out);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            getOutsideRoadReference().write(out);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            getOutsideLaneReference().write(out);
            break;
        case ROAD_NETWORK_ACCESS:
            getRoadNetworkAccess().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            getSectionId().write(zserioContext.getSectionId(), out);
            break;
        case ACCESS_PARKING_SPOT:
            getParkingSpotId().write(zserioContext.getParkingSpotId(), out);
            break;
        case ROAD_NETWORK_ACCESS_ROAD_REFERENCE:
            getOutsideRoadReference().write(zserioContext.getOutsideRoadReference(), out);
            break;
        case ROAD_NETWORK_ACCESS_LANE_REFERENCE:
            getOutsideLaneReference().write(zserioContext.getOutsideLaneReference(), out);
            break;
        case ROAD_NETWORK_ACCESS:
            getRoadNetworkAccess().write(zserioContext.getRoadNetworkAccess(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingPositionRelationValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_sectionId = 0;
    public static final int CHOICE_parkingSpotId = 1;
    public static final int CHOICE_outsideRoadReference = 2;
    public static final int CHOICE_outsideLaneReference = 3;
    public static final int CHOICE_roadNetworkAccess = 4;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.venue.parking.ParkingPositionRelationType type_;
    private java.lang.Object objectChoice;
}
