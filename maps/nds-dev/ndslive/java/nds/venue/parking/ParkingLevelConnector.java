/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.parking;

public class ParkingLevelConnector implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            levelId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            transitionPolygon_ = new nds.core.geometry.BoundingPolygon3D.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getLevelId()
        {
            return levelId_;
        }

        public nds.core.geometry.BoundingPolygon3D.ZserioPackingContext getTransitionPolygon()
        {
            return transitionPolygon_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext levelId_;
        private nds.core.geometry.BoundingPolygon3D.ZserioPackingContext transitionPolygon_;
    };

    public ParkingLevelConnector()
    {
    }

    public ParkingLevelConnector(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(in);
    }

    public ParkingLevelConnector(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        read(context, in);
    }

    public ParkingLevelConnector(
            nds.core.types.Var4ByteId levelId_,
            nds.core.geometry.BoundingPolygon3D transitionPolygon_)
    {
        setLevelId(levelId_);
        setTransitionPolygon(transitionPolygon_);
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        levelId_.initPackingContext(zserioContext.getLevelId());
        if (isTransitionPolygonUsed())
        {
            transitionPolygon_.initPackingContext(zserioContext.getTransitionPolygon());
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition += levelId_.bitSizeOf(endBitPosition);
        endBitPosition += 1;
        if (isTransitionPolygonUsed())
        {
            endBitPosition += transitionPolygon_.bitSizeOf(endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition += levelId_.bitSizeOf(zserioContext.getLevelId(), endBitPosition);
        endBitPosition += 1;
        if (isTransitionPolygonUsed())
        {
            endBitPosition += transitionPolygon_.bitSizeOf(zserioContext.getTransitionPolygon(), endBitPosition);
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.core.types.Var4ByteId getLevelId()
    {
        return levelId_;
    }

    public void setLevelId(nds.core.types.Var4ByteId levelId_)
    {
        this.levelId_ = levelId_;
    }

    public nds.core.geometry.BoundingPolygon3D getTransitionPolygon()
    {
        return transitionPolygon_;
    }

    public void setTransitionPolygon(nds.core.geometry.BoundingPolygon3D transitionPolygon_)
    {
        this.transitionPolygon_ = transitionPolygon_;
    }

    public boolean isTransitionPolygonUsed()
    {
        return isTransitionPolygonSet();
    }

    public boolean isTransitionPolygonSet()
    {
        return (transitionPolygon_ != null);
    }

    public void resetTransitionPolygon()
    {
        this.transitionPolygon_ = null;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingLevelConnector)
        {
            final ParkingLevelConnector that = (ParkingLevelConnector)obj;

            return
                    ((levelId_ == null) ? that.levelId_ == null : levelId_.equals(that.levelId_)) &&
                    ((!isTransitionPolygonUsed()) ? !that.isTransitionPolygonUsed() :
                        ((transitionPolygon_ == null) ? that.transitionPolygon_ == null : transitionPolygon_.equals(that.transitionPolygon_)));
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, levelId_);
        if (isTransitionPolygonUsed())
            result = zserio.runtime.HashCodeUtil.calcHashCode(result, transitionPolygon_);

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        levelId_ = new nds.core.types.Var4ByteId(in);

        if (in.readBool())
        {
            transitionPolygon_ = new nds.core.geometry.BoundingPolygon3D(in, (byte)(0), (byte)(0));
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        levelId_ = new nds.core.types.Var4ByteId(zserioContext.getLevelId(), in);

        if (in.readBool())
        {
            transitionPolygon_ = new nds.core.geometry.BoundingPolygon3D(zserioContext.getTransitionPolygon(), in, (byte)(0), (byte)(0));
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        endBitPosition = levelId_.initializeOffsets(endBitPosition);
        endBitPosition += 1;
        if (isTransitionPolygonUsed())
        {
            endBitPosition = transitionPolygon_.initializeOffsets(endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        endBitPosition = levelId_.initializeOffsets(zserioContext.getLevelId(), endBitPosition);
        endBitPosition += 1;
        if (isTransitionPolygonUsed())
        {
            endBitPosition = transitionPolygon_.initializeOffsets(zserioContext.getTransitionPolygon(), endBitPosition);
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        levelId_.write(out);

        if (isTransitionPolygonUsed())
        {
            out.writeBool(true);
            // check parameters
            if (transitionPolygon_.getXyShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter xyShift for field ParkingLevelConnector.transitionPolygon: " +
                        transitionPolygon_.getXyShift() + " != " + (byte)(0) + "!");
            }
            if (transitionPolygon_.getZShift() != (byte)(0))
            {
                throw new zserio.runtime.ZserioError("Write: Wrong parameter zShift for field ParkingLevelConnector.transitionPolygon: " +
                        transitionPolygon_.getZShift() + " != " + (byte)(0) + "!");
            }
            transitionPolygon_.write(out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        levelId_.write(zserioContext.getLevelId(), out);

        if (isTransitionPolygonUsed())
        {
            out.writeBool(true);
            transitionPolygon_.write(zserioContext.getTransitionPolygon(), out);
        }
        else
        {
            out.writeBool(false);
        }
    }

    private nds.core.types.Var4ByteId levelId_;
    private nds.core.geometry.BoundingPolygon3D transitionPolygon_;
}
