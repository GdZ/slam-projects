/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.parking;

public class ParkingRelationValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            partOfSectionId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            partOfRowId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            partOfSpotId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            sectionId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            rowId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
            spotId_ = new nds.core.types.Var4ByteId.ZserioPackingContext();
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getPartOfSectionId()
        {
            return partOfSectionId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getPartOfRowId()
        {
            return partOfRowId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getPartOfSpotId()
        {
            return partOfSpotId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getSectionId()
        {
            return sectionId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getRowId()
        {
            return rowId_;
        }

        public nds.core.types.Var4ByteId.ZserioPackingContext getSpotId()
        {
            return spotId_;
        }

        private nds.core.types.Var4ByteId.ZserioPackingContext partOfSectionId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext partOfRowId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext partOfSpotId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext sectionId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext rowId_;
        private nds.core.types.Var4ByteId.ZserioPackingContext spotId_;
    };

    public ParkingRelationValue(
            nds.venue.parking.ParkingRelationType type_)
    {
        this.type_ = type_;
    }

    public ParkingRelationValue(zserio.runtime.io.BitStreamReader in,
            nds.venue.parking.ParkingRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public ParkingRelationValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.venue.parking.ParkingRelationType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            return CHOICE_partOfSectionId;
        case PART_OF_ROW:
            return CHOICE_partOfRowId;
        case PART_OF_SPOT:
            return CHOICE_partOfSpotId;
        case IS_SECTION:
            return CHOICE_sectionId;
        case IS_ROW:
            return CHOICE_rowId;
        case IS_SPOT:
            return CHOICE_spotId;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            getPartOfSectionId().initPackingContext(zserioContext.getPartOfSectionId());
            break;
        case PART_OF_ROW:
            getPartOfRowId().initPackingContext(zserioContext.getPartOfRowId());
            break;
        case PART_OF_SPOT:
            getPartOfSpotId().initPackingContext(zserioContext.getPartOfSpotId());
            break;
        case IS_SECTION:
            getSectionId().initPackingContext(zserioContext.getSectionId());
            break;
        case IS_ROW:
            getRowId().initPackingContext(zserioContext.getRowId());
            break;
        case IS_SPOT:
            getSpotId().initPackingContext(zserioContext.getSpotId());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            endBitPosition += getPartOfSectionId().bitSizeOf(endBitPosition);
            break;
        case PART_OF_ROW:
            endBitPosition += getPartOfRowId().bitSizeOf(endBitPosition);
            break;
        case PART_OF_SPOT:
            endBitPosition += getPartOfSpotId().bitSizeOf(endBitPosition);
            break;
        case IS_SECTION:
            endBitPosition += getSectionId().bitSizeOf(endBitPosition);
            break;
        case IS_ROW:
            endBitPosition += getRowId().bitSizeOf(endBitPosition);
            break;
        case IS_SPOT:
            endBitPosition += getSpotId().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            endBitPosition += getPartOfSectionId().bitSizeOf(zserioContext.getPartOfSectionId(), endBitPosition);
            break;
        case PART_OF_ROW:
            endBitPosition += getPartOfRowId().bitSizeOf(zserioContext.getPartOfRowId(), endBitPosition);
            break;
        case PART_OF_SPOT:
            endBitPosition += getPartOfSpotId().bitSizeOf(zserioContext.getPartOfSpotId(), endBitPosition);
            break;
        case IS_SECTION:
            endBitPosition += getSectionId().bitSizeOf(zserioContext.getSectionId(), endBitPosition);
            break;
        case IS_ROW:
            endBitPosition += getRowId().bitSizeOf(zserioContext.getRowId(), endBitPosition);
            break;
        case IS_SPOT:
            endBitPosition += getSpotId().bitSizeOf(zserioContext.getSpotId(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.venue.parking.ParkingRelationType getType()
    {
        return this.type_;
    }

    public nds.core.types.Var4ByteId getPartOfSectionId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setPartOfSectionId(nds.core.types.Var4ByteId partOfSectionId_)
    {
        objectChoice = partOfSectionId_;
    }

    public nds.core.types.Var4ByteId getPartOfRowId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setPartOfRowId(nds.core.types.Var4ByteId partOfRowId_)
    {
        objectChoice = partOfRowId_;
    }

    public nds.core.types.Var4ByteId getPartOfSpotId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setPartOfSpotId(nds.core.types.Var4ByteId partOfSpotId_)
    {
        objectChoice = partOfSpotId_;
    }

    public nds.core.types.Var4ByteId getSectionId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setSectionId(nds.core.types.Var4ByteId sectionId_)
    {
        objectChoice = sectionId_;
    }

    public nds.core.types.Var4ByteId getRowId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setRowId(nds.core.types.Var4ByteId rowId_)
    {
        objectChoice = rowId_;
    }

    public nds.core.types.Var4ByteId getSpotId()
    {
        return (nds.core.types.Var4ByteId)objectChoice;
    }

    public void setSpotId(nds.core.types.Var4ByteId spotId_)
    {
        objectChoice = spotId_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingRelationValue)
        {
            final ParkingRelationValue that = (ParkingRelationValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PART_OF_SECTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case PART_OF_ROW:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case PART_OF_SPOT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case IS_SECTION:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case IS_ROW:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            case IS_SPOT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Var4ByteId)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case PART_OF_ROW:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case PART_OF_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case IS_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case IS_ROW:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        case IS_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getPartOfSectionId(), in);
            break;
        case PART_OF_ROW:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getPartOfRowId(), in);
            break;
        case PART_OF_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getPartOfSpotId(), in);
            break;
        case IS_SECTION:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getSectionId(), in);
            break;
        case IS_ROW:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getRowId(), in);
            break;
        case IS_SPOT:
            objectChoice = new nds.core.types.Var4ByteId(zserioContext.getSpotId(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            {
                endBitPosition = getPartOfSectionId().initializeOffsets(endBitPosition);
            }
            break;
        case PART_OF_ROW:
            {
                endBitPosition = getPartOfRowId().initializeOffsets(endBitPosition);
            }
            break;
        case PART_OF_SPOT:
            {
                endBitPosition = getPartOfSpotId().initializeOffsets(endBitPosition);
            }
            break;
        case IS_SECTION:
            {
                endBitPosition = getSectionId().initializeOffsets(endBitPosition);
            }
            break;
        case IS_ROW:
            {
                endBitPosition = getRowId().initializeOffsets(endBitPosition);
            }
            break;
        case IS_SPOT:
            {
                endBitPosition = getSpotId().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PART_OF_SECTION:
            {
                endBitPosition = getPartOfSectionId().initializeOffsets(zserioContext.getPartOfSectionId(), endBitPosition);
            }
            break;
        case PART_OF_ROW:
            {
                endBitPosition = getPartOfRowId().initializeOffsets(zserioContext.getPartOfRowId(), endBitPosition);
            }
            break;
        case PART_OF_SPOT:
            {
                endBitPosition = getPartOfSpotId().initializeOffsets(zserioContext.getPartOfSpotId(), endBitPosition);
            }
            break;
        case IS_SECTION:
            {
                endBitPosition = getSectionId().initializeOffsets(zserioContext.getSectionId(), endBitPosition);
            }
            break;
        case IS_ROW:
            {
                endBitPosition = getRowId().initializeOffsets(zserioContext.getRowId(), endBitPosition);
            }
            break;
        case IS_SPOT:
            {
                endBitPosition = getSpotId().initializeOffsets(zserioContext.getSpotId(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PART_OF_SECTION:
            getPartOfSectionId().write(out);
            break;
        case PART_OF_ROW:
            getPartOfRowId().write(out);
            break;
        case PART_OF_SPOT:
            getPartOfSpotId().write(out);
            break;
        case IS_SECTION:
            getSectionId().write(out);
            break;
        case IS_ROW:
            getRowId().write(out);
            break;
        case IS_SPOT:
            getSpotId().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PART_OF_SECTION:
            getPartOfSectionId().write(zserioContext.getPartOfSectionId(), out);
            break;
        case PART_OF_ROW:
            getPartOfRowId().write(zserioContext.getPartOfRowId(), out);
            break;
        case PART_OF_SPOT:
            getPartOfSpotId().write(zserioContext.getPartOfSpotId(), out);
            break;
        case IS_SECTION:
            getSectionId().write(zserioContext.getSectionId(), out);
            break;
        case IS_ROW:
            getRowId().write(zserioContext.getRowId(), out);
            break;
        case IS_SPOT:
            getSpotId().write(zserioContext.getSpotId(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRelationValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_partOfSectionId = 0;
    public static final int CHOICE_partOfRowId = 1;
    public static final int CHOICE_partOfSpotId = 2;
    public static final int CHOICE_sectionId = 3;
    public static final int CHOICE_rowId = 4;
    public static final int CHOICE_spotId = 5;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.venue.parking.ParkingRelationType type_;
    private java.lang.Object objectChoice;
}
