/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.details.attributes;

public class ParkingRowAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            parkingRowLayout_ = new nds.venue.details.types.ParkingRowLayout.ZserioPackingContext();
            parkingRowRestrictions_ = new zserio.runtime.array.DeltaContext();
        }

        public nds.venue.details.types.ParkingRowLayout.ZserioPackingContext getParkingRowLayout()
        {
            return parkingRowLayout_;
        }

        public zserio.runtime.array.DeltaContext getParkingRowRestrictions()
        {
            return parkingRowRestrictions_;
        }

        private nds.venue.details.types.ParkingRowLayout.ZserioPackingContext parkingRowLayout_;
        private zserio.runtime.array.DeltaContext parkingRowRestrictions_;
    };

    public ParkingRowAttributeValue(
            nds.venue.details.attributes.ParkingRowAttributeType type_)
    {
        this.type_ = type_;
    }

    public ParkingRowAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.venue.details.attributes.ParkingRowAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public ParkingRowAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.venue.details.attributes.ParkingRowAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PARKING_ROW_NAME:
            return CHOICE_parkingRowName;
        case PARKING_ROW_LAYOUT:
            return CHOICE_parkingRowLayout;
        case PARKING_RESTRICTIONS:
            return CHOICE_parkingRowRestrictions;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_ROW_NAME:
            break;
        case PARKING_ROW_LAYOUT:
            getParkingRowLayout().initPackingContext(zserioContext.getParkingRowLayout());
            break;
        case PARKING_RESTRICTIONS:
            getParkingRowRestrictions().initPackingContext(zserioContext.getParkingRowRestrictions());
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_ROW_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingRowName());
            break;
        case PARKING_ROW_LAYOUT:
            endBitPosition += getParkingRowLayout().bitSizeOf(endBitPosition);
            break;
        case PARKING_RESTRICTIONS:
            endBitPosition += getParkingRowRestrictions().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_ROW_NAME:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingRowName());
            break;
        case PARKING_ROW_LAYOUT:
            endBitPosition += getParkingRowLayout().bitSizeOf(zserioContext.getParkingRowLayout(), endBitPosition);
            break;
        case PARKING_RESTRICTIONS:
            endBitPosition += getParkingRowRestrictions().bitSizeOf(zserioContext.getParkingRowRestrictions(), endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.venue.details.attributes.ParkingRowAttributeType getType()
    {
        return this.type_;
    }

    public java.lang.String getParkingRowName()
    {
        return (java.lang.String)objectChoice;
    }

    public void setParkingRowName(java.lang.String parkingRowName_)
    {
        objectChoice = parkingRowName_;
    }

    public nds.venue.details.types.ParkingRowLayout getParkingRowLayout()
    {
        return (nds.venue.details.types.ParkingRowLayout)objectChoice;
    }

    public void setParkingRowLayout(nds.venue.details.types.ParkingRowLayout parkingRowLayout_)
    {
        objectChoice = parkingRowLayout_;
    }

    public nds.venue.details.types.ParkingRestrictions getParkingRowRestrictions()
    {
        return (nds.venue.details.types.ParkingRestrictions)objectChoice;
    }

    public void setParkingRowRestrictions(nds.venue.details.types.ParkingRestrictions parkingRowRestrictions_)
    {
        objectChoice = parkingRowRestrictions_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingRowAttributeValue)
        {
            final ParkingRowAttributeValue that = (ParkingRowAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PARKING_ROW_NAME:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case PARKING_ROW_LAYOUT:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.details.types.ParkingRowLayout)objectChoice);
                break;
            case PARKING_RESTRICTIONS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.details.types.ParkingRestrictions)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PARKING_ROW_NAME:
            objectChoice = in.readString();
            break;
        case PARKING_ROW_LAYOUT:
            objectChoice = new nds.venue.details.types.ParkingRowLayout(in);
            break;
        case PARKING_RESTRICTIONS:
            objectChoice = new nds.venue.details.types.ParkingRestrictions(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_ROW_NAME:
            objectChoice = in.readString();
            break;
        case PARKING_ROW_LAYOUT:
            objectChoice = new nds.venue.details.types.ParkingRowLayout(zserioContext.getParkingRowLayout(), in);
            break;
        case PARKING_RESTRICTIONS:
            objectChoice = new nds.venue.details.types.ParkingRestrictions(zserioContext.getParkingRowRestrictions(), in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_ROW_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingRowName());
            }
            break;
        case PARKING_ROW_LAYOUT:
            {
                endBitPosition = getParkingRowLayout().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_RESTRICTIONS:
            {
                endBitPosition += getParkingRowRestrictions().bitSizeOf(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_ROW_NAME:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingRowName());
            }
            break;
        case PARKING_ROW_LAYOUT:
            {
                endBitPosition = getParkingRowLayout().initializeOffsets(zserioContext.getParkingRowLayout(), endBitPosition);
            }
            break;
        case PARKING_RESTRICTIONS:
            {
                endBitPosition = getParkingRowRestrictions().initializeOffsets(zserioContext.getParkingRowRestrictions(), endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PARKING_ROW_NAME:
            out.writeString(getParkingRowName());
            break;
        case PARKING_ROW_LAYOUT:
            getParkingRowLayout().write(out);
            break;
        case PARKING_RESTRICTIONS:
            getParkingRowRestrictions().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_ROW_NAME:
            out.writeString(getParkingRowName());
            break;
        case PARKING_ROW_LAYOUT:
            getParkingRowLayout().write(zserioContext.getParkingRowLayout(), out);
            break;
        case PARKING_RESTRICTIONS:
            getParkingRowRestrictions().write(zserioContext.getParkingRowRestrictions(), out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingRowAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_parkingRowName = 0;
    public static final int CHOICE_parkingRowLayout = 1;
    public static final int CHOICE_parkingRowRestrictions = 2;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.venue.details.attributes.ParkingRowAttributeType type_;
    private java.lang.Object objectChoice;
}
