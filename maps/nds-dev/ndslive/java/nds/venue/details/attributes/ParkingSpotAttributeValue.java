/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.details.attributes;

public class ParkingSpotAttributeValue implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf
{
    public static final class ZserioPackingContext extends zserio.runtime.array.PackingContext
    {
        public ZserioPackingContext()
        {
            parkingSpotRestrictions_ = new zserio.runtime.array.DeltaContext();
        }

        public zserio.runtime.array.DeltaContext getParkingSpotRestrictions()
        {
            return parkingSpotRestrictions_;
        }

        private zserio.runtime.array.DeltaContext parkingSpotRestrictions_;
    };

    public ParkingSpotAttributeValue(
            nds.venue.details.attributes.ParkingSpotAttributeType type_)
    {
        this.type_ = type_;
    }

    public ParkingSpotAttributeValue(zserio.runtime.io.BitStreamReader in,
            nds.venue.details.attributes.ParkingSpotAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(in);
    }

    public ParkingSpotAttributeValue(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in,
            nds.venue.details.attributes.ParkingSpotAttributeType type_)
            throws java.io.IOException
    {
        this.type_ = type_;

        read(context, in);
    }

    public int choiceTag()
    {
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            return CHOICE_parkingSpotNumber;
        case PARKING_SPOT_AVAILABLE:
            return CHOICE_available;
        case PARKING_RESTRICTIONS:
            return CHOICE_parkingSpotRestrictions;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            return CHOICE_privateParkingDetails;
        default:
            return UNDEFINED_CHOICE;
        }
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            break;
        case PARKING_SPOT_AVAILABLE:
            break;
        case PARKING_RESTRICTIONS:
            getParkingSpotRestrictions().initPackingContext(zserioContext.getParkingSpotRestrictions());
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingSpotNumber());
            break;
        case PARKING_SPOT_AVAILABLE:
            endBitPosition += getAvailable().bitSizeOf(endBitPosition);
            break;
        case PARKING_RESTRICTIONS:
            endBitPosition += getParkingSpotRestrictions().bitSizeOf(endBitPosition);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            endBitPosition += getPrivateParkingDetails().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingSpotNumber());
            break;
        case PARKING_SPOT_AVAILABLE:
            endBitPosition += getAvailable().bitSizeOf(endBitPosition);
            break;
        case PARKING_RESTRICTIONS:
            endBitPosition += getParkingSpotRestrictions().bitSizeOf(zserioContext.getParkingSpotRestrictions(), endBitPosition);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            endBitPosition += getPrivateParkingDetails().bitSizeOf(endBitPosition);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }

        return (int)(endBitPosition - bitPosition);
    }

    public nds.venue.details.attributes.ParkingSpotAttributeType getType()
    {
        return this.type_;
    }

    public java.lang.String getParkingSpotNumber()
    {
        return (java.lang.String)objectChoice;
    }

    public void setParkingSpotNumber(java.lang.String parkingSpotNumber_)
    {
        objectChoice = parkingSpotNumber_;
    }

    public nds.core.types.Flag getAvailable()
    {
        return (nds.core.types.Flag)objectChoice;
    }

    public void setAvailable(nds.core.types.Flag available_)
    {
        objectChoice = available_;
    }

    public nds.venue.details.types.ParkingRestrictions getParkingSpotRestrictions()
    {
        return (nds.venue.details.types.ParkingRestrictions)objectChoice;
    }

    public void setParkingSpotRestrictions(nds.venue.details.types.ParkingRestrictions parkingSpotRestrictions_)
    {
        objectChoice = parkingSpotRestrictions_;
    }

    public nds.venue.details.types.PrivateParkingDetails getPrivateParkingDetails()
    {
        return (nds.venue.details.types.PrivateParkingDetails)objectChoice;
    }

    public void setPrivateParkingDetails(nds.venue.details.types.PrivateParkingDetails privateParkingDetails_)
    {
        objectChoice = privateParkingDetails_;
    }

    @Override
    public boolean equals(java.lang.Object obj)
    {
        if (obj instanceof ParkingSpotAttributeValue)
        {
            final ParkingSpotAttributeValue that = (ParkingSpotAttributeValue)obj;

            return
                    ((this.type_ == null) ? that.type_ == null : this.type_.getValue() == that.type_.getValue()) &&
                    (
                        (objectChoice == null && that.objectChoice == null) ||
                        (objectChoice != null && objectChoice.equals(that.objectChoice))
                    );
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;

        result = zserio.runtime.HashCodeUtil.calcHashCode(result, getType());
        if (objectChoice != null)
        {
            switch (getType())
            {
            case PARKING_SPOT_NUMBER:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (java.lang.String)objectChoice);
                break;
            case PARKING_SPOT_AVAILABLE:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.core.types.Flag)objectChoice);
                break;
            case PARKING_RESTRICTIONS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.details.types.ParkingRestrictions)objectChoice);
                break;
            case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
                result = zserio.runtime.HashCodeUtil.calcHashCode(result, (nds.venue.details.types.PrivateParkingDetails)objectChoice);
                break;
            default:
                break;
            }
        }

        return result;
    }

    public void read(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            objectChoice = in.readString();
            break;
        case PARKING_SPOT_AVAILABLE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_RESTRICTIONS:
            objectChoice = new nds.venue.details.types.ParkingRestrictions(in);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            objectChoice = new nds.venue.details.types.PrivateParkingDetails(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }
    }

    public void read(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            objectChoice = in.readString();
            break;
        case PARKING_SPOT_AVAILABLE:
            objectChoice = new nds.core.types.Flag(in);
            break;
        case PARKING_RESTRICTIONS:
            objectChoice = new nds.venue.details.types.ParkingRestrictions(zserioContext.getParkingSpotRestrictions(), in);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            objectChoice = new nds.venue.details.types.PrivateParkingDetails(in);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingSpotNumber());
            }
            break;
        case PARKING_SPOT_AVAILABLE:
            {
                endBitPosition = getAvailable().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_RESTRICTIONS:
            {
                endBitPosition += getParkingSpotRestrictions().bitSizeOf(endBitPosition);
            }
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            {
                endBitPosition = getPrivateParkingDetails().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final ZserioPackingContext zserioContext = context.cast();
        long endBitPosition = bitPosition;

        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            {
                endBitPosition += zserio.runtime.BitSizeOfCalculator.getBitSizeOfString(getParkingSpotNumber());
            }
            break;
        case PARKING_SPOT_AVAILABLE:
            {
                endBitPosition = getAvailable().initializeOffsets(endBitPosition);
            }
            break;
        case PARKING_RESTRICTIONS:
            {
                endBitPosition = getParkingSpotRestrictions().initializeOffsets(zserioContext.getParkingSpotRestrictions(), endBitPosition);
            }
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            {
                endBitPosition = getPrivateParkingDetails().initializeOffsets(endBitPosition);
            }
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }

        return endBitPosition;
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            out.writeString(getParkingSpotNumber());
            break;
        case PARKING_SPOT_AVAILABLE:
            getAvailable().write(out);
            break;
        case PARKING_RESTRICTIONS:
            getParkingSpotRestrictions().write(out);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            getPrivateParkingDetails().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final ZserioPackingContext zserioContext = context.cast();
        switch (getType())
        {
        case PARKING_SPOT_NUMBER:
            out.writeString(getParkingSpotNumber());
            break;
        case PARKING_SPOT_AVAILABLE:
            getAvailable().write(out);
            break;
        case PARKING_RESTRICTIONS:
            getParkingSpotRestrictions().write(zserioContext.getParkingSpotRestrictions(), out);
            break;
        case PARKING_SPOT_PRIVATE_PARKING_DETAILS:
            getPrivateParkingDetails().write(out);
            break;
        default:
            throw new zserio.runtime.ZserioError("No match in choice ParkingSpotAttributeValue: " + getType() + "!");
        }
    }

    public static final int CHOICE_parkingSpotNumber = 0;
    public static final int CHOICE_available = 1;
    public static final int CHOICE_parkingSpotRestrictions = 2;
    public static final int CHOICE_privateParkingDetails = 3;
    public static final int UNDEFINED_CHOICE = -1;

    private final nds.venue.details.attributes.ParkingSpotAttributeType type_;
    private java.lang.Object objectChoice;
}
