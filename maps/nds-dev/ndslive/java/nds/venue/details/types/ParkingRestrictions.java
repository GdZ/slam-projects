/**
 * Automatically generated by Zserio Java extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode.
 */

package nds.venue.details.types;

public class ParkingRestrictions implements zserio.runtime.io.PackableWriter, zserio.runtime.PackableSizeOf,
        zserio.runtime.ZserioBitmask
{
    public ParkingRestrictions()
    {
        this((short)0);
    }

    public ParkingRestrictions(short value)
    {
        if (value < (short)0)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'ParkingRestrictions' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public ParkingRestrictions(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readVarUInt16();
    }

    public ParkingRestrictions(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamReader in)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        value = ((zserio.runtime.array.ArrayElement.ShortArrayElement)
                deltaContext.read(
                        new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), in)).get();
    }

    @Override
    public void initPackingContext(zserio.runtime.array.PackingContext context)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.init(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return zserio.runtime.BitSizeOfCalculator.getBitSizeOfVarUInt16(value);
    }

    @Override
    public int bitSizeOf(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        return deltaContext.bitSizeOf(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(),
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public long initializeOffsets(zserio.runtime.array.PackingContext context, long bitPosition)
    {
        return bitPosition + bitSizeOf(context, bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof ParkingRestrictions))
            return false;

        final ParkingRestrictions otherParkingRestrictions = (ParkingRestrictions)other;
        return value == otherParkingRestrictions.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(ParkingRestrictions.Values.ACCESSIBLE).equals(ParkingRestrictions.Values.ACCESSIBLE))
            builder.append(builder.length() == 0 ? "ACCESSIBLE" : " | ACCESSIBLE");
        if (this.and(ParkingRestrictions.Values.ELECTRIC_VEHICLE).equals(ParkingRestrictions.Values.ELECTRIC_VEHICLE))
            builder.append(builder.length() == 0 ? "ELECTRIC_VEHICLE" : " | ELECTRIC_VEHICLE");
        if (this.and(ParkingRestrictions.Values.FAMILY).equals(ParkingRestrictions.Values.FAMILY))
            builder.append(builder.length() == 0 ? "FAMILY" : " | FAMILY");
        if (this.and(ParkingRestrictions.Values.WOMEN).equals(ParkingRestrictions.Values.WOMEN))
            builder.append(builder.length() == 0 ? "WOMEN" : " | WOMEN");
        if (this.and(ParkingRestrictions.Values.PRIVATE).equals(ParkingRestrictions.Values.PRIVATE))
            builder.append(builder.length() == 0 ? "PRIVATE" : " | PRIVATE");
        if (this.and(ParkingRestrictions.Values.VISITOR).equals(ParkingRestrictions.Values.VISITOR))
            builder.append(builder.length() == 0 ? "VISITOR" : " | VISITOR");
        if (builder.length() == 0 && value == 0)
            builder.append("CONDITIONAL_ONLY");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeVarUInt16(value);
    }

    @Override
    public void write(zserio.runtime.array.PackingContext context, zserio.runtime.io.BitStreamWriter out)
            throws java.io.IOException
    {
        final zserio.runtime.array.DeltaContext deltaContext = context.cast();
        deltaContext.write(
                new zserio.runtime.array.ArrayTraits.VarUInt16ArrayTraits(), out,
                new zserio.runtime.array.ArrayElement.ShortArrayElement(value));
    }

    public short getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public ParkingRestrictions or(ParkingRestrictions other)
    {
        return new ParkingRestrictions((short)(value | other.value));
    }

    public ParkingRestrictions and(ParkingRestrictions other)
    {
        return new ParkingRestrictions((short)(value & other.value));
    }

    public ParkingRestrictions xor(ParkingRestrictions other)
    {
        return new ParkingRestrictions((short)(value ^ other.value));
    }

    public ParkingRestrictions not()
    {
        return new ParkingRestrictions((short)(~value & (short)32767));
    }

    public static final class Values
    {
        public static final ParkingRestrictions CONDITIONAL_ONLY = new ParkingRestrictions((short)0);
        public static final ParkingRestrictions ACCESSIBLE = new ParkingRestrictions((short)2);
        public static final ParkingRestrictions ELECTRIC_VEHICLE = new ParkingRestrictions((short)4);
        public static final ParkingRestrictions FAMILY = new ParkingRestrictions((short)8);
        public static final ParkingRestrictions WOMEN = new ParkingRestrictions((short)16);
        public static final ParkingRestrictions PRIVATE = new ParkingRestrictions((short)32);
        public static final ParkingRestrictions VISITOR = new ParkingRestrictions((short)64);
    }

    private short value;
}
