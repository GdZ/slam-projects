/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SYSTEM_TYPES_NDS_NODE_TOKEN_H
#define NDS_SYSTEM_TYPES_NDS_NODE_TOKEN_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/system/types/UUID.h>

namespace nds
{
namespace system
{
namespace types
{

class NdsNodeToken
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::system::types::UUID::ZserioPackingContext& getNodeId()
        {
            return m_nodeId_;
        }

    private:
        ::nds::system::types::UUID::ZserioPackingContext m_nodeId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    NdsNodeToken() noexcept :
            NdsNodeToken(allocator_type())
    {}

    explicit NdsNodeToken(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_nodeId = ::nds::system::types::UUID,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_nodeId, NdsNodeToken, allocator_type> = 0>
    explicit NdsNodeToken(
            ZSERIO_T_nodeId&& nodeId_,
            const allocator_type& allocator = allocator_type()) :
            NdsNodeToken(allocator)
    {
        m_nodeId_ = ::std::forward<ZSERIO_T_nodeId>(nodeId_);
    }

    explicit NdsNodeToken(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit NdsNodeToken(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~NdsNodeToken() = default;

    NdsNodeToken(const NdsNodeToken&) = default;
    NdsNodeToken& operator=(const NdsNodeToken&) = default;

    NdsNodeToken(NdsNodeToken&&) = default;
    NdsNodeToken& operator=(NdsNodeToken&&) = default;

    NdsNodeToken(::zserio::PropagateAllocatorT,
            const NdsNodeToken& other, const allocator_type& allocator);

    const ::nds::system::types::UUID& getNodeId() const;
    ::nds::system::types::UUID& getNodeId();
    void setNodeId(const ::nds::system::types::UUID& nodeId_);
    void setNodeId(::nds::system::types::UUID&& nodeId_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const NdsNodeToken& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::system::types::UUID readNodeId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::UUID readNodeId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::system::types::UUID m_nodeId_;
};

} // namespace types
} // namespace system
} // namespace nds

#endif // NDS_SYSTEM_TYPES_NDS_NODE_TOKEN_H
