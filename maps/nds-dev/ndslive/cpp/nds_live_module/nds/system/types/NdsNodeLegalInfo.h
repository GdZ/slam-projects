/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_SYSTEM_TYPES_NDS_NODE_LEGAL_INFO_H
#define NDS_SYSTEM_TYPES_NDS_NODE_LEGAL_INFO_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/system/types/NdsNodeToken.h>

namespace nds
{
namespace system
{
namespace types
{

class NdsNodeLegalInfo
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::system::types::NdsNodeToken::ZserioPackingContext& getNodeId()
        {
            return m_nodeId_;
        }

    private:
        ::nds::system::types::NdsNodeToken::ZserioPackingContext m_nodeId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    NdsNodeLegalInfo() noexcept :
            NdsNodeLegalInfo(allocator_type())
    {}

    explicit NdsNodeLegalInfo(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_nodeId = ::nds::system::types::NdsNodeToken,
            typename ZSERIO_T_providerName = ::zserio::string<>,
            typename ZSERIO_T_contentName = ::zserio::string<>,
            typename ZSERIO_T_contentVersion = ::zserio::string<>,
            typename ZSERIO_T_contentTimestamp = ::zserio::string<>,
            typename ZSERIO_T_copyright = ::zserio::string<>,
            typename ZSERIO_T_licenses = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_nodeId, NdsNodeLegalInfo, allocator_type> = 0>
    NdsNodeLegalInfo(
            ZSERIO_T_nodeId&& nodeId_,
            ZSERIO_T_providerName&& providerName_,
            ZSERIO_T_contentName&& contentName_,
            ZSERIO_T_contentVersion&& contentVersion_,
            ZSERIO_T_contentTimestamp&& contentTimestamp_,
            ZSERIO_T_copyright&& copyright_,
            ZSERIO_T_licenses&& licenses_,
            const allocator_type& allocator = allocator_type()) :
            NdsNodeLegalInfo(allocator)
    {
        m_nodeId_ = ::std::forward<ZSERIO_T_nodeId>(nodeId_);
        m_providerName_ = ::std::forward<ZSERIO_T_providerName>(providerName_);
        m_contentName_ = ::std::forward<ZSERIO_T_contentName>(contentName_);
        m_contentVersion_ = ::std::forward<ZSERIO_T_contentVersion>(contentVersion_);
        m_contentTimestamp_ = ::std::forward<ZSERIO_T_contentTimestamp>(contentTimestamp_);
        m_copyright_ = ::std::forward<ZSERIO_T_copyright>(copyright_);
        m_licenses_ = ::std::forward<ZSERIO_T_licenses>(licenses_);
    }

    explicit NdsNodeLegalInfo(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit NdsNodeLegalInfo(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~NdsNodeLegalInfo() = default;

    NdsNodeLegalInfo(const NdsNodeLegalInfo&) = default;
    NdsNodeLegalInfo& operator=(const NdsNodeLegalInfo&) = default;

    NdsNodeLegalInfo(NdsNodeLegalInfo&&) = default;
    NdsNodeLegalInfo& operator=(NdsNodeLegalInfo&&) = default;

    NdsNodeLegalInfo(::zserio::PropagateAllocatorT,
            const NdsNodeLegalInfo& other, const allocator_type& allocator);

    const ::nds::system::types::NdsNodeToken& getNodeId() const;
    ::nds::system::types::NdsNodeToken& getNodeId();
    void setNodeId(const ::nds::system::types::NdsNodeToken& nodeId_);
    void setNodeId(::nds::system::types::NdsNodeToken&& nodeId_);

    const ::zserio::string<>& getProviderName() const;
    ::zserio::string<>& getProviderName();
    void setProviderName(const ::zserio::string<>& providerName_);
    void setProviderName(::zserio::string<>&& providerName_);

    const ::zserio::string<>& getContentName() const;
    ::zserio::string<>& getContentName();
    void setContentName(const ::zserio::string<>& contentName_);
    void setContentName(::zserio::string<>&& contentName_);

    const ::zserio::string<>& getContentVersion() const;
    ::zserio::string<>& getContentVersion();
    void setContentVersion(const ::zserio::string<>& contentVersion_);
    void setContentVersion(::zserio::string<>&& contentVersion_);

    const ::zserio::string<>& getContentTimestamp() const;
    ::zserio::string<>& getContentTimestamp();
    void setContentTimestamp(const ::zserio::string<>& contentTimestamp_);
    void setContentTimestamp(::zserio::string<>&& contentTimestamp_);

    const ::zserio::string<>& getCopyright() const;
    ::zserio::string<>& getCopyright();
    void setCopyright(const ::zserio::string<>& copyright_);
    void setCopyright(::zserio::string<>&& copyright_);

    const ::zserio::string<>& getLicenses() const;
    ::zserio::string<>& getLicenses();
    void setLicenses(const ::zserio::string<>& licenses_);
    void setLicenses(::zserio::string<>&& licenses_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const NdsNodeLegalInfo& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::system::types::NdsNodeToken readNodeId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::system::types::NdsNodeToken readNodeId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::string<> readProviderName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readContentName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readContentVersion(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readContentTimestamp(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readCopyright(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readLicenses(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::system::types::NdsNodeToken m_nodeId_;
    ::zserio::string<> m_providerName_;
    ::zserio::string<> m_contentName_;
    ::zserio::string<> m_contentVersion_;
    ::zserio::string<> m_contentTimestamp_;
    ::zserio::string<> m_copyright_;
    ::zserio::string<> m_licenses_;
};

} // namespace types
} // namespace system
} // namespace nds

#endif // NDS_SYSTEM_TYPES_NDS_NODE_LEGAL_INFO_H
