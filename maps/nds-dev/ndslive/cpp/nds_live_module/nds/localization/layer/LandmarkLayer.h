/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_LAYER_LANDMARK_LAYER_H
#define NDS_LOCALIZATION_LAYER_LANDMARK_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/GeometryLayerType.h>
#include <nds/localization/instantiations/LandmarkLineGeometryLayer.h>
#include <nds/localization/instantiations/LandmarkMeshGeometryLayer.h>
#include <nds/localization/instantiations/LandmarkPolygonGeometryLayer.h>
#include <nds/localization/layer/LandmarkLayerHeader.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace localization
{
namespace layer
{

class LandmarkLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::localization::layer::LandmarkLayerHeader::ZserioPackingContext& getHeader()
        {
            return m_header_;
        }

        ::nds::localization::instantiations::LandmarkLineGeometryLayer::ZserioPackingContext& getLineGeometryLayer()
        {
            return m_lineGeometryLayer_;
        }

        ::nds::localization::instantiations::LandmarkPolygonGeometryLayer::ZserioPackingContext& getPolygonGeometryLayer()
        {
            return m_polygonGeometryLayer_;
        }

        ::nds::localization::instantiations::LandmarkMeshGeometryLayer::ZserioPackingContext& getMeshGeometryLayer()
        {
            return m_meshGeometryLayer_;
        }

    private:
        ::nds::localization::layer::LandmarkLayerHeader::ZserioPackingContext m_header_;
        ::nds::localization::instantiations::LandmarkLineGeometryLayer::ZserioPackingContext m_lineGeometryLayer_;
        ::nds::localization::instantiations::LandmarkPolygonGeometryLayer::ZserioPackingContext m_polygonGeometryLayer_;
        ::nds::localization::instantiations::LandmarkMeshGeometryLayer::ZserioPackingContext m_meshGeometryLayer_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LandmarkLayer() noexcept :
            LandmarkLayer(allocator_type())
    {}

    explicit LandmarkLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_header = ::nds::localization::layer::LandmarkLayerHeader,
            typename ZSERIO_T_lineGeometryLayer = ::nds::localization::instantiations::LandmarkLineGeometryLayer,
            typename ZSERIO_T_polygonGeometryLayer = ::nds::localization::instantiations::LandmarkPolygonGeometryLayer,
            typename ZSERIO_T_meshGeometryLayer = ::nds::localization::instantiations::LandmarkMeshGeometryLayer,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_header, LandmarkLayer, allocator_type> = 0>
    LandmarkLayer(
            ZSERIO_T_header&& header_,
            ZSERIO_T_lineGeometryLayer&& lineGeometryLayer_,
            ZSERIO_T_polygonGeometryLayer&& polygonGeometryLayer_,
            ZSERIO_T_meshGeometryLayer&& meshGeometryLayer_,
            const allocator_type& allocator = allocator_type()) :
            LandmarkLayer(allocator)
    {
        m_header_ = ::std::forward<ZSERIO_T_header>(header_);
        m_lineGeometryLayer_ = ::std::forward<ZSERIO_T_lineGeometryLayer>(lineGeometryLayer_);
        m_polygonGeometryLayer_ = ::std::forward<ZSERIO_T_polygonGeometryLayer>(polygonGeometryLayer_);
        m_meshGeometryLayer_ = ::std::forward<ZSERIO_T_meshGeometryLayer>(meshGeometryLayer_);
    }

    explicit LandmarkLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LandmarkLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LandmarkLayer() = default;

    LandmarkLayer(const LandmarkLayer& other);
    LandmarkLayer& operator=(const LandmarkLayer& other);

    LandmarkLayer(LandmarkLayer&& other);
    LandmarkLayer& operator=(LandmarkLayer&& other);

    LandmarkLayer(::zserio::PropagateAllocatorT,
            const LandmarkLayer& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::localization::layer::LandmarkLayerHeader& getHeader() const;
    ::nds::localization::layer::LandmarkLayerHeader& getHeader();
    void setHeader(const ::nds::localization::layer::LandmarkLayerHeader& header_);
    void setHeader(::nds::localization::layer::LandmarkLayerHeader&& header_);

    const ::nds::localization::instantiations::LandmarkLineGeometryLayer& getLineGeometryLayer() const;
    ::nds::localization::instantiations::LandmarkLineGeometryLayer& getLineGeometryLayer();
    void setLineGeometryLayer(const ::nds::localization::instantiations::LandmarkLineGeometryLayer& lineGeometryLayer_);
    void setLineGeometryLayer(::nds::localization::instantiations::LandmarkLineGeometryLayer&& lineGeometryLayer_);
    bool isLineGeometryLayerUsed() const;
    bool isLineGeometryLayerSet() const;
    void resetLineGeometryLayer();

    const ::nds::localization::instantiations::LandmarkPolygonGeometryLayer& getPolygonGeometryLayer() const;
    ::nds::localization::instantiations::LandmarkPolygonGeometryLayer& getPolygonGeometryLayer();
    void setPolygonGeometryLayer(const ::nds::localization::instantiations::LandmarkPolygonGeometryLayer& polygonGeometryLayer_);
    void setPolygonGeometryLayer(::nds::localization::instantiations::LandmarkPolygonGeometryLayer&& polygonGeometryLayer_);
    bool isPolygonGeometryLayerUsed() const;
    bool isPolygonGeometryLayerSet() const;
    void resetPolygonGeometryLayer();

    const ::nds::localization::instantiations::LandmarkMeshGeometryLayer& getMeshGeometryLayer() const;
    ::nds::localization::instantiations::LandmarkMeshGeometryLayer& getMeshGeometryLayer();
    void setMeshGeometryLayer(const ::nds::localization::instantiations::LandmarkMeshGeometryLayer& meshGeometryLayer_);
    void setMeshGeometryLayer(::nds::localization::instantiations::LandmarkMeshGeometryLayer&& meshGeometryLayer_);
    bool isMeshGeometryLayerUsed() const;
    bool isMeshGeometryLayerSet() const;
    void resetMeshGeometryLayer();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LandmarkLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::localization::layer::LandmarkLayerHeader readHeader(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::localization::layer::LandmarkLayerHeader readHeader(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkLineGeometryLayer> readLineGeometryLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkLineGeometryLayer> readLineGeometryLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkPolygonGeometryLayer> readPolygonGeometryLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkPolygonGeometryLayer> readPolygonGeometryLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkMeshGeometryLayer> readMeshGeometryLayer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkMeshGeometryLayer> readMeshGeometryLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::localization::layer::LandmarkLayerHeader m_header_;
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkLineGeometryLayer> m_lineGeometryLayer_;
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkPolygonGeometryLayer> m_polygonGeometryLayer_;
    ::zserio::InplaceOptionalHolder<::nds::localization::instantiations::LandmarkMeshGeometryLayer> m_meshGeometryLayer_;
};

} // namespace layer
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_LAYER_LANDMARK_LAYER_H
