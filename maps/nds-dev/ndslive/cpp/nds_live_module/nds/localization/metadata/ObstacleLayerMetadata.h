/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_METADATA_OBSTACLE_LAYER_METADATA_H
#define NDS_LOCALIZATION_METADATA_OBSTACLE_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/localization/types/ObstacleType.h>

namespace nds
{
namespace localization
{
namespace metadata
{

class ObstacleLayerMetadata
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ObstacleLayerMetadata() noexcept :
            ObstacleLayerMetadata(allocator_type())
    {}

    explicit ObstacleLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableObstacleTypes = ::zserio::vector<::nds::localization::types::ObstacleType>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_availableObstacleTypes, ObstacleLayerMetadata, allocator_type> = 0>
    explicit ObstacleLayerMetadata(
            ZSERIO_T_availableObstacleTypes&& availableObstacleTypes_,
            const allocator_type& allocator = allocator_type()) :
            ObstacleLayerMetadata(allocator)
    {
        m_availableObstacleTypes_ = ZserioArrayType_availableObstacleTypes(::std::forward<ZSERIO_T_availableObstacleTypes>(availableObstacleTypes_));
    }

    explicit ObstacleLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ObstacleLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ObstacleLayerMetadata() = default;

    ObstacleLayerMetadata(const ObstacleLayerMetadata&) = default;
    ObstacleLayerMetadata& operator=(const ObstacleLayerMetadata&) = default;

    ObstacleLayerMetadata(ObstacleLayerMetadata&&) = default;
    ObstacleLayerMetadata& operator=(ObstacleLayerMetadata&&) = default;

    ObstacleLayerMetadata(::zserio::PropagateAllocatorT,
            const ObstacleLayerMetadata& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::localization::types::ObstacleType>& getAvailableObstacleTypes() const;
    ::zserio::vector<::nds::localization::types::ObstacleType>& getAvailableObstacleTypes();
    void setAvailableObstacleTypes(const ::zserio::vector<::nds::localization::types::ObstacleType>& availableObstacleTypes_);
    void setAvailableObstacleTypes(::zserio::vector<::nds::localization::types::ObstacleType>&& availableObstacleTypes_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ObstacleLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_availableObstacleTypes = ::zserio::Array<::zserio::vector<::nds::localization::types::ObstacleType>, ::zserio::EnumArrayTraits<::nds::localization::types::ObstacleType>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_availableObstacleTypes readAvailableObstacleTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableObstacleTypes readAvailableObstacleTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_availableObstacleTypes m_availableObstacleTypes_;
};

} // namespace metadata
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_METADATA_OBSTACLE_LAYER_METADATA_H
