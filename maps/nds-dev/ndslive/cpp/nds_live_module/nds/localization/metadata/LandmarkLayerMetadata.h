/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_METADATA_LANDMARK_LAYER_METADATA_H
#define NDS_LOCALIZATION_METADATA_LANDMARK_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/localization/types/LandmarkLineType.h>
#include <nds/localization/types/LandmarkMeshType.h>
#include <nds/localization/types/LandmarkPolygonType.h>

namespace nds
{
namespace localization
{
namespace metadata
{

class LandmarkLayerMetadata
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LandmarkLayerMetadata() noexcept :
            LandmarkLayerMetadata(allocator_type())
    {}

    explicit LandmarkLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_availableLineTypes = ::zserio::vector<::nds::localization::types::LandmarkLineType>,
            typename ZSERIO_T_availablePolygonTypes = ::zserio::vector<::nds::localization::types::LandmarkPolygonType>,
            typename ZSERIO_T_availableMeshTypes = ::zserio::vector<::nds::localization::types::LandmarkMeshType>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_availableLineTypes, LandmarkLayerMetadata, allocator_type> = 0>
    LandmarkLayerMetadata(
            ZSERIO_T_availableLineTypes&& availableLineTypes_,
            ZSERIO_T_availablePolygonTypes&& availablePolygonTypes_,
            ZSERIO_T_availableMeshTypes&& availableMeshTypes_,
            bool hasRelations_,
            bool hasDetails_,
            const allocator_type& allocator = allocator_type()) :
            LandmarkLayerMetadata(allocator)
    {
        m_availableLineTypes_ = ZserioArrayType_availableLineTypes(::std::forward<ZSERIO_T_availableLineTypes>(availableLineTypes_));
        m_availablePolygonTypes_ = ZserioArrayType_availablePolygonTypes(::std::forward<ZSERIO_T_availablePolygonTypes>(availablePolygonTypes_));
        m_availableMeshTypes_ = ZserioArrayType_availableMeshTypes(::std::forward<ZSERIO_T_availableMeshTypes>(availableMeshTypes_));
        m_hasRelations_ = hasRelations_;
        m_hasDetails_ = hasDetails_;
    }

    explicit LandmarkLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LandmarkLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LandmarkLayerMetadata() = default;

    LandmarkLayerMetadata(const LandmarkLayerMetadata&) = default;
    LandmarkLayerMetadata& operator=(const LandmarkLayerMetadata&) = default;

    LandmarkLayerMetadata(LandmarkLayerMetadata&&) = default;
    LandmarkLayerMetadata& operator=(LandmarkLayerMetadata&&) = default;

    LandmarkLayerMetadata(::zserio::PropagateAllocatorT,
            const LandmarkLayerMetadata& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::localization::types::LandmarkLineType>& getAvailableLineTypes() const;
    ::zserio::vector<::nds::localization::types::LandmarkLineType>& getAvailableLineTypes();
    void setAvailableLineTypes(const ::zserio::vector<::nds::localization::types::LandmarkLineType>& availableLineTypes_);
    void setAvailableLineTypes(::zserio::vector<::nds::localization::types::LandmarkLineType>&& availableLineTypes_);

    const ::zserio::vector<::nds::localization::types::LandmarkPolygonType>& getAvailablePolygonTypes() const;
    ::zserio::vector<::nds::localization::types::LandmarkPolygonType>& getAvailablePolygonTypes();
    void setAvailablePolygonTypes(const ::zserio::vector<::nds::localization::types::LandmarkPolygonType>& availablePolygonTypes_);
    void setAvailablePolygonTypes(::zserio::vector<::nds::localization::types::LandmarkPolygonType>&& availablePolygonTypes_);

    const ::zserio::vector<::nds::localization::types::LandmarkMeshType>& getAvailableMeshTypes() const;
    ::zserio::vector<::nds::localization::types::LandmarkMeshType>& getAvailableMeshTypes();
    void setAvailableMeshTypes(const ::zserio::vector<::nds::localization::types::LandmarkMeshType>& availableMeshTypes_);
    void setAvailableMeshTypes(::zserio::vector<::nds::localization::types::LandmarkMeshType>&& availableMeshTypes_);

    bool getHasRelations() const;
    void setHasRelations(bool hasRelations_);

    bool getHasDetails() const;
    void setHasDetails(bool hasDetails_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LandmarkLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_availableLineTypes = ::zserio::Array<::zserio::vector<::nds::localization::types::LandmarkLineType>, ::zserio::EnumArrayTraits<::nds::localization::types::LandmarkLineType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_availablePolygonTypes = ::zserio::Array<::zserio::vector<::nds::localization::types::LandmarkPolygonType>, ::zserio::EnumArrayTraits<::nds::localization::types::LandmarkPolygonType>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_availableMeshTypes = ::zserio::Array<::zserio::vector<::nds::localization::types::LandmarkMeshType>, ::zserio::EnumArrayTraits<::nds::localization::types::LandmarkMeshType>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_availableLineTypes readAvailableLineTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableLineTypes readAvailableLineTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_availablePolygonTypes readAvailablePolygonTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availablePolygonTypes readAvailablePolygonTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_availableMeshTypes readAvailableMeshTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_availableMeshTypes readAvailableMeshTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readHasRelations(::zserio::BitStreamReader& in);
    bool readHasDetails(::zserio::BitStreamReader& in);

    ZserioArrayType_availableLineTypes m_availableLineTypes_;
    ZserioArrayType_availablePolygonTypes m_availablePolygonTypes_;
    ZserioArrayType_availableMeshTypes m_availableMeshTypes_;
    bool m_hasRelations_;
    bool m_hasDetails_;
};

} // namespace metadata
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_METADATA_LANDMARK_LAYER_METADATA_H
