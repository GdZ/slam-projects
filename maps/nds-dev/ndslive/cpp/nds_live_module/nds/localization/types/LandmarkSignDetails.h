/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_TYPES_LANDMARK_SIGN_DETAILS_H
#define NDS_LOCALIZATION_TYPES_LANDMARK_SIGN_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <nds/core/types/WidthCentimeters.h>
#include <nds/localization/types/LandmarkSignDetailsType.h>
#include <nds/signs/warning/WarningSign.h>

namespace nds
{
namespace localization
{
namespace types
{

class LandmarkSignDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getDetailType()
        {
            return m_detailType_;
        }

        ::zserio::DeltaContext& getMeaning()
        {
            return m_meaning_;
        }

        ::zserio::DeltaContext& getDiameter()
        {
            return m_diameter_;
        }

        ::zserio::DeltaContext& getNumber()
        {
            return m_number_;
        }

    private:
        ::zserio::DeltaContext m_detailType_;
        ::zserio::DeltaContext m_meaning_;
        ::zserio::DeltaContext m_diameter_;
        ::zserio::DeltaContext m_number_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LandmarkSignDetails() noexcept :
            LandmarkSignDetails(allocator_type())
    {}

    explicit LandmarkSignDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_meaning = ::nds::signs::warning::WarningSign,
            typename ZSERIO_T_diameter = ::nds::core::types::WidthCentimeters,
            typename ZSERIO_T_number = uint64_t,
            typename ZSERIO_T_text = ::zserio::string<>>
    LandmarkSignDetails(
            ::nds::localization::types::LandmarkSignDetailsType detailType_,
            ZSERIO_T_meaning&& meaning_,
            ZSERIO_T_diameter&& diameter_,
            ZSERIO_T_number&& number_,
            ZSERIO_T_text&& text_,
            const allocator_type& allocator = allocator_type()) :
            LandmarkSignDetails(allocator)
    {
        m_detailType_ = detailType_;
        m_meaning_ = ::std::forward<ZSERIO_T_meaning>(meaning_);
        m_diameter_ = ::std::forward<ZSERIO_T_diameter>(diameter_);
        m_number_ = ::std::forward<ZSERIO_T_number>(number_);
        m_text_ = ::std::forward<ZSERIO_T_text>(text_);
    }

    explicit LandmarkSignDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LandmarkSignDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LandmarkSignDetails() = default;

    LandmarkSignDetails(const LandmarkSignDetails&) = default;
    LandmarkSignDetails& operator=(const LandmarkSignDetails&) = default;

    LandmarkSignDetails(LandmarkSignDetails&&) = default;
    LandmarkSignDetails& operator=(LandmarkSignDetails&&) = default;

    LandmarkSignDetails(::zserio::PropagateAllocatorT,
            const LandmarkSignDetails& other, const allocator_type& allocator);

    ::nds::localization::types::LandmarkSignDetailsType getDetailType() const;
    void setDetailType(::nds::localization::types::LandmarkSignDetailsType detailType_);

    ::nds::signs::warning::WarningSign getMeaning() const;
    void setMeaning(::nds::signs::warning::WarningSign meaning_);
    bool isMeaningUsed() const;
    bool isMeaningSet() const;
    void resetMeaning();

    ::nds::core::types::WidthCentimeters getDiameter() const;
    void setDiameter(::nds::core::types::WidthCentimeters diameter_);
    bool isDiameterUsed() const;
    bool isDiameterSet() const;
    void resetDiameter();

    uint64_t getNumber() const;
    void setNumber(uint64_t number_);
    bool isNumberUsed() const;
    bool isNumberSet() const;
    void resetNumber();

    const ::zserio::string<>& getText() const;
    ::zserio::string<>& getText();
    void setText(const ::zserio::string<>& text_);
    void setText(::zserio::string<>&& text_);
    bool isTextUsed() const;
    bool isTextSet() const;
    void resetText();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LandmarkSignDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::localization::types::LandmarkSignDetailsType readDetailType(::zserio::BitStreamReader& in);
    ::nds::localization::types::LandmarkSignDetailsType readDetailType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::signs::warning::WarningSign> readMeaning(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::signs::warning::WarningSign> readMeaning(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> readDiameter(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> readDiameter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readNumber(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint64_t> readNumber(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readText(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::localization::types::LandmarkSignDetailsType m_detailType_;
    ::zserio::InplaceOptionalHolder<::nds::signs::warning::WarningSign> m_meaning_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> m_diameter_;
    ::zserio::InplaceOptionalHolder<uint64_t> m_number_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_text_;
};

} // namespace types
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_TYPES_LANDMARK_SIGN_DETAILS_H
