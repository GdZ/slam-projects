/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_TYPES_LANDMARK_POLYGON_H
#define NDS_LOCALIZATION_TYPES_LANDMARK_POLYGON_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/localization/types/FiducialMarkerDetails.h>
#include <nds/localization/types/LandmarkColor.h>
#include <nds/localization/types/LandmarkConfidence.h>
#include <nds/localization/types/LandmarkPolygonType.h>
#include <nds/localization/types/LandmarkSignDetails.h>
#include <nds/localization/types/LandmarkSignType.h>

namespace nds
{
namespace localization
{
namespace types
{

class LandmarkPolygon
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getSignType()
        {
            return m_signType_;
        }

        ::nds::localization::types::LandmarkSignDetails::ZserioPackingContext& getSignDetails()
        {
            return m_signDetails_;
        }

        ::nds::localization::types::FiducialMarkerDetails::ZserioPackingContext& getMarkerDetails()
        {
            return m_markerDetails_;
        }

        ::nds::localization::types::LandmarkColor::ZserioPackingContext& getColor()
        {
            return m_color_;
        }

        ::zserio::DeltaContext& getConfidence()
        {
            return m_confidence_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_signType_;
        ::nds::localization::types::LandmarkSignDetails::ZserioPackingContext m_signDetails_;
        ::nds::localization::types::FiducialMarkerDetails::ZserioPackingContext m_markerDetails_;
        ::nds::localization::types::LandmarkColor::ZserioPackingContext m_color_;
        ::zserio::DeltaContext m_confidence_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LandmarkPolygon() noexcept :
            LandmarkPolygon(allocator_type())
    {}

    explicit LandmarkPolygon(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_signType = ::nds::localization::types::LandmarkSignType,
            typename ZSERIO_T_hasSignDetails = bool,
            typename ZSERIO_T_signDetails = ::nds::localization::types::LandmarkSignDetails,
            typename ZSERIO_T_markerDetails = ::nds::localization::types::FiducialMarkerDetails,
            typename ZSERIO_T_color = ::nds::localization::types::LandmarkColor,
            typename ZSERIO_T_confidence = ::nds::localization::types::LandmarkConfidence>
    LandmarkPolygon(
            ::nds::localization::types::LandmarkPolygonType type_,
            ZSERIO_T_signType&& signType_,
            ZSERIO_T_hasSignDetails&& hasSignDetails_,
            ZSERIO_T_signDetails&& signDetails_,
            ZSERIO_T_markerDetails&& markerDetails_,
            ZSERIO_T_color&& color_,
            ZSERIO_T_confidence&& confidence_,
            const allocator_type& allocator = allocator_type()) :
            LandmarkPolygon(allocator)
    {
        m_type_ = type_;
        m_signType_ = ::std::forward<ZSERIO_T_signType>(signType_);
        m_hasSignDetails_ = ::std::forward<ZSERIO_T_hasSignDetails>(hasSignDetails_);
        m_signDetails_ = ::std::forward<ZSERIO_T_signDetails>(signDetails_);
        m_markerDetails_ = ::std::forward<ZSERIO_T_markerDetails>(markerDetails_);
        m_color_ = ::std::forward<ZSERIO_T_color>(color_);
        m_confidence_ = ::std::forward<ZSERIO_T_confidence>(confidence_);
    }

    explicit LandmarkPolygon(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LandmarkPolygon(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LandmarkPolygon() = default;

    LandmarkPolygon(const LandmarkPolygon&) = default;
    LandmarkPolygon& operator=(const LandmarkPolygon&) = default;

    LandmarkPolygon(LandmarkPolygon&&) = default;
    LandmarkPolygon& operator=(LandmarkPolygon&&) = default;

    LandmarkPolygon(::zserio::PropagateAllocatorT,
            const LandmarkPolygon& other, const allocator_type& allocator);

    ::nds::localization::types::LandmarkPolygonType getType() const;
    void setType(::nds::localization::types::LandmarkPolygonType type_);

    ::nds::localization::types::LandmarkSignType getSignType() const;
    void setSignType(::nds::localization::types::LandmarkSignType signType_);
    bool isSignTypeUsed() const;
    bool isSignTypeSet() const;
    void resetSignType();

    bool getHasSignDetails() const;
    void setHasSignDetails(bool hasSignDetails_);
    bool isHasSignDetailsUsed() const;
    bool isHasSignDetailsSet() const;
    void resetHasSignDetails();

    const ::nds::localization::types::LandmarkSignDetails& getSignDetails() const;
    ::nds::localization::types::LandmarkSignDetails& getSignDetails();
    void setSignDetails(const ::nds::localization::types::LandmarkSignDetails& signDetails_);
    void setSignDetails(::nds::localization::types::LandmarkSignDetails&& signDetails_);
    bool isSignDetailsUsed() const;
    bool isSignDetailsSet() const;
    void resetSignDetails();

    const ::nds::localization::types::FiducialMarkerDetails& getMarkerDetails() const;
    ::nds::localization::types::FiducialMarkerDetails& getMarkerDetails();
    void setMarkerDetails(const ::nds::localization::types::FiducialMarkerDetails& markerDetails_);
    void setMarkerDetails(::nds::localization::types::FiducialMarkerDetails&& markerDetails_);
    bool isMarkerDetailsUsed() const;
    bool isMarkerDetailsSet() const;
    void resetMarkerDetails();

    const ::nds::localization::types::LandmarkColor& getColor() const;
    ::nds::localization::types::LandmarkColor& getColor();
    void setColor(const ::nds::localization::types::LandmarkColor& color_);
    void setColor(::nds::localization::types::LandmarkColor&& color_);
    bool isColorUsed() const;
    bool isColorSet() const;
    void resetColor();

    ::nds::localization::types::LandmarkConfidence getConfidence() const;
    void setConfidence(::nds::localization::types::LandmarkConfidence confidence_);
    bool isConfidenceUsed() const;
    bool isConfidenceSet() const;
    void resetConfidence();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LandmarkPolygon& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::localization::types::LandmarkPolygonType readType(::zserio::BitStreamReader& in);
    ::nds::localization::types::LandmarkPolygonType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignType> readSignType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignType> readSignType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<bool> readHasSignDetails(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignDetails> readSignDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignDetails> readSignDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::FiducialMarkerDetails> readMarkerDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::FiducialMarkerDetails> readMarkerDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkColor> readColor(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkColor> readColor(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> readConfidence(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> readConfidence(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::localization::types::LandmarkPolygonType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignType> m_signType_;
    ::zserio::InplaceOptionalHolder<bool> m_hasSignDetails_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkSignDetails> m_signDetails_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::FiducialMarkerDetails> m_markerDetails_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkColor> m_color_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> m_confidence_;
};

} // namespace types
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_TYPES_LANDMARK_POLYGON_H
