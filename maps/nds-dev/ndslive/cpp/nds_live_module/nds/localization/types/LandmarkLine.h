/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_LOCALIZATION_TYPES_LANDMARK_LINE_H
#define NDS_LOCALIZATION_TYPES_LANDMARK_LINE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/WidthCentimeters.h>
#include <nds/localization/types/LandmarkConfidence.h>
#include <nds/localization/types/LandmarkLineType.h>

namespace nds
{
namespace localization
{
namespace types
{

class LandmarkLine
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getDiameter()
        {
            return m_diameter_;
        }

        ::zserio::DeltaContext& getConfidence()
        {
            return m_confidence_;
        }

    private:
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_diameter_;
        ::zserio::DeltaContext m_confidence_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LandmarkLine() noexcept :
            LandmarkLine(allocator_type())
    {}

    explicit LandmarkLine(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_diameter = ::nds::core::types::WidthCentimeters,
            typename ZSERIO_T_confidence = ::nds::localization::types::LandmarkConfidence>
    LandmarkLine(
            ::nds::localization::types::LandmarkLineType type_,
            ZSERIO_T_diameter&& diameter_,
            ZSERIO_T_confidence&& confidence_,
            const allocator_type& allocator = allocator_type()) :
            LandmarkLine(allocator)
    {
        m_type_ = type_;
        m_diameter_ = ::std::forward<ZSERIO_T_diameter>(diameter_);
        m_confidence_ = ::std::forward<ZSERIO_T_confidence>(confidence_);
    }

    explicit LandmarkLine(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LandmarkLine(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LandmarkLine() = default;

    LandmarkLine(const LandmarkLine&) = default;
    LandmarkLine& operator=(const LandmarkLine&) = default;

    LandmarkLine(LandmarkLine&&) = default;
    LandmarkLine& operator=(LandmarkLine&&) = default;

    LandmarkLine(::zserio::PropagateAllocatorT,
            const LandmarkLine& other, const allocator_type& allocator);

    ::nds::localization::types::LandmarkLineType getType() const;
    void setType(::nds::localization::types::LandmarkLineType type_);

    ::nds::core::types::WidthCentimeters getDiameter() const;
    void setDiameter(::nds::core::types::WidthCentimeters diameter_);
    bool isDiameterUsed() const;
    bool isDiameterSet() const;
    void resetDiameter();

    ::nds::localization::types::LandmarkConfidence getConfidence() const;
    void setConfidence(::nds::localization::types::LandmarkConfidence confidence_);
    bool isConfidenceUsed() const;
    bool isConfidenceSet() const;
    void resetConfidence();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LandmarkLine& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::localization::types::LandmarkLineType readType(::zserio::BitStreamReader& in);
    ::nds::localization::types::LandmarkLineType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> readDiameter(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> readDiameter(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> readConfidence(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> readConfidence(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::localization::types::LandmarkLineType m_type_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::WidthCentimeters> m_diameter_;
    ::zserio::InplaceOptionalHolder<::nds::localization::types::LandmarkConfidence> m_confidence_;
};

} // namespace types
} // namespace localization
} // namespace nds

#endif // NDS_LOCALIZATION_TYPES_LANDMARK_LINE_H
