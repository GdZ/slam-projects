/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/localization/attributes/LandmarkRelationAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for LandmarkRelationAttributeType enumeration.
constexpr ::std::array<const char*, 1> EnumTraits<::nds::localization::attributes::LandmarkRelationAttributeType>::names;
constexpr ::std::array<::nds::localization::attributes::LandmarkRelationAttributeType, 1> EnumTraits<::nds::localization::attributes::LandmarkRelationAttributeType>::values;
constexpr const char* EnumTraits<::nds::localization::attributes::LandmarkRelationAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    switch (value)
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return 0;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration LandmarkRelationAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::localization::attributes::LandmarkRelationAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
        return static_cast<::nds::localization::attributes::LandmarkRelationAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration LandmarkRelationAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::localization::attributes::LandmarkRelationAttributeType>(::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::localization::attributes::LandmarkRelationAttributeType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::localization::attributes::LandmarkRelationAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::localization::attributes::LandmarkRelationAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::localization::attributes::LandmarkRelationAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::localization::attributes::LandmarkRelationAttributeType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::localization::attributes::LandmarkRelationAttributeType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::LandmarkRelationAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/localization/attributes/OccupancyGridRelationAttributeType.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for OccupancyGridRelationAttributeType enumeration.
constexpr ::std::array<const char*, 1> EnumTraits<::nds::localization::attributes::OccupancyGridRelationAttributeType>::names;
constexpr ::std::array<::nds::localization::attributes::OccupancyGridRelationAttributeType, 1> EnumTraits<::nds::localization::attributes::OccupancyGridRelationAttributeType>::values;
constexpr const char* EnumTraits<::nds::localization::attributes::OccupancyGridRelationAttributeType>::enumName;

template <>
size_t enumToOrdinal(::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    switch (value)
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return 0;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration OccupancyGridRelationAttributeType: ") <<
                static_cast<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>(value) << "!";
    }
}

template <>
::nds::localization::attributes::OccupancyGridRelationAttributeType valueToEnum(
        typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
        return static_cast<::nds::localization::attributes::OccupancyGridRelationAttributeType>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration OccupancyGridRelationAttributeType: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::localization::attributes::OccupancyGridRelationAttributeType>(::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::localization::attributes::OccupancyGridRelationAttributeType)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::localization::attributes::OccupancyGridRelationAttributeType read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::localization::attributes::OccupancyGridRelationAttributeType>(
            static_cast<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::localization::attributes::OccupancyGridRelationAttributeType read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::localization::attributes::OccupancyGridRelationAttributeType>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::localization::attributes::OccupancyGridRelationAttributeType value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::localization::attributes::OccupancyGridRelationAttributeType>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/localization/attributes/LandmarkRelationAttributeValue.h>

namespace nds
{
namespace localization
{
namespace attributes
{

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(::zserio::BitStreamReader& in,
        ::nds::localization::attributes::LandmarkRelationAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(LandmarkRelationAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::localization::attributes::LandmarkRelationAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(const LandmarkRelationAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

LandmarkRelationAttributeValue& LandmarkRelationAttributeValue::operator=(const LandmarkRelationAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(LandmarkRelationAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

LandmarkRelationAttributeValue& LandmarkRelationAttributeValue::operator=(LandmarkRelationAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

LandmarkRelationAttributeValue::LandmarkRelationAttributeValue(::zserio::PropagateAllocatorT,
        const LandmarkRelationAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void LandmarkRelationAttributeValue::initialize(
        ::nds::localization::attributes::LandmarkRelationAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool LandmarkRelationAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::localization::attributes::LandmarkRelationAttributeType LandmarkRelationAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'LandmarkRelationAttributeValue' is not initialized!");

    return m_type_;
}

::nds::localization::types::LandmarkId LandmarkRelationAttributeValue::getId() const
{
    return m_objectChoice.get<::nds::localization::types::LandmarkId>();
}

void LandmarkRelationAttributeValue::setId(::nds::localization::types::LandmarkId id_)
{
    m_objectChoice = id_;
}

LandmarkRelationAttributeValue::ChoiceTag LandmarkRelationAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return CHOICE_id;
    default:
        return UNDEFINED_CHOICE;
    }
}

void LandmarkRelationAttributeValue::initPackingContext(LandmarkRelationAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        context.getId().init<::zserio::VarIntNNArrayTraits<::nds::localization::types::LandmarkId>>(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

size_t LandmarkRelationAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t LandmarkRelationAttributeValue::bitSizeOf(LandmarkRelationAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::localization::types::LandmarkId>>(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t LandmarkRelationAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }

    return endBitPosition;
}

size_t LandmarkRelationAttributeValue::initializeOffsets(LandmarkRelationAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::localization::types::LandmarkId>>(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }

    return endBitPosition;
}

bool LandmarkRelationAttributeValue::operator==(const LandmarkRelationAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::localization::types::LandmarkId>() == other.m_objectChoice.get<::nds::localization::types::LandmarkId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

uint32_t LandmarkRelationAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::localization::types::LandmarkId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void LandmarkRelationAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        out.writeVarUInt32(m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

void LandmarkRelationAttributeValue::write(LandmarkRelationAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        context.getId().write<::zserio::VarIntNNArrayTraits<::nds::localization::types::LandmarkId>>(out, m_objectChoice.get<::nds::localization::types::LandmarkId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> LandmarkRelationAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return ::zserio::AnyHolder<>(static_cast<::nds::localization::types::LandmarkId>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> LandmarkRelationAttributeValue::readObject(LandmarkRelationAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return ::zserio::AnyHolder<>(context.getId().read<::zserio::VarIntNNArrayTraits<::nds::localization::types::LandmarkId>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> LandmarkRelationAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::LandmarkRelationAttributeType::LANDMARK_VISIBILITY:
        return ::zserio::allocatorPropagatingCopy<::nds::localization::types::LandmarkId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice LandmarkRelationAttributeValue!");
    }
}

} // namespace attributes
} // namespace localization
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/localization/attributes/OccupancyGridRelationAttributeValue.h>

namespace nds
{
namespace localization
{
namespace attributes
{

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_objectChoice(allocator)
{
}

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(::zserio::BitStreamReader& in,
        ::nds::localization::attributes::OccupancyGridRelationAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(in, allocator), allocator)
{
}

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(OccupancyGridRelationAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::localization::attributes::OccupancyGridRelationAttributeType type_, const allocator_type& allocator) :
        m_type_(type_),
        m_isInitialized(true),
        m_objectChoice(readObject(context, in, allocator), allocator)
{
}

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(const OccupancyGridRelationAttributeValue& other) :
        m_objectChoice(other.m_objectChoice)
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

OccupancyGridRelationAttributeValue& OccupancyGridRelationAttributeValue::operator=(const OccupancyGridRelationAttributeValue& other)
{
    m_objectChoice = other.m_objectChoice;
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(OccupancyGridRelationAttributeValue&& other) :
        m_objectChoice(::std::move(other.m_objectChoice))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

OccupancyGridRelationAttributeValue& OccupancyGridRelationAttributeValue::operator=(OccupancyGridRelationAttributeValue&& other)
{
    m_objectChoice = ::std::move(other.m_objectChoice);
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;

    return *this;
}

OccupancyGridRelationAttributeValue::OccupancyGridRelationAttributeValue(::zserio::PropagateAllocatorT,
        const OccupancyGridRelationAttributeValue& other, const allocator_type& allocator) :
        m_objectChoice(other.copyObject(allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_type_);
    else
        m_isInitialized = false;
}

void OccupancyGridRelationAttributeValue::initialize(
        ::nds::localization::attributes::OccupancyGridRelationAttributeType type_)
{
    m_type_ = type_;
    m_isInitialized = true;
}

bool OccupancyGridRelationAttributeValue::isInitialized() const
{
    return m_isInitialized;
}

::nds::localization::attributes::OccupancyGridRelationAttributeType OccupancyGridRelationAttributeValue::getType() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'type' of compound 'OccupancyGridRelationAttributeValue' is not initialized!");

    return m_type_;
}

::nds::localization::types::OccupancyGridId OccupancyGridRelationAttributeValue::getId() const
{
    return m_objectChoice.get<::nds::localization::types::OccupancyGridId>();
}

void OccupancyGridRelationAttributeValue::setId(::nds::localization::types::OccupancyGridId id_)
{
    m_objectChoice = id_;
}

OccupancyGridRelationAttributeValue::ChoiceTag OccupancyGridRelationAttributeValue::choiceTag() const
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return CHOICE_id;
    default:
        return UNDEFINED_CHOICE;
    }
}

void OccupancyGridRelationAttributeValue::initPackingContext(OccupancyGridRelationAttributeValue::ZserioPackingContext& context) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        context.getId().init<::zserio::VarIntNNArrayTraits<::nds::localization::types::OccupancyGridId>>(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

size_t OccupancyGridRelationAttributeValue::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t OccupancyGridRelationAttributeValue::bitSizeOf(OccupancyGridRelationAttributeValue::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::localization::types::OccupancyGridId>>(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }

    return endBitPosition - bitPosition;
}

size_t OccupancyGridRelationAttributeValue::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        endBitPosition += ::zserio::bitSizeOfVarUInt32(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }

    return endBitPosition;
}

size_t OccupancyGridRelationAttributeValue::initializeOffsets(OccupancyGridRelationAttributeValue::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        endBitPosition += context.getId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::localization::types::OccupancyGridId>>(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }

    return endBitPosition;
}

bool OccupancyGridRelationAttributeValue::operator==(const OccupancyGridRelationAttributeValue& other) const
{
    if (this == &other)
        return true;

    if (!(getType() == other.getType()))
        return false;

    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return (!m_objectChoice.hasValue() && !other.m_objectChoice.hasValue()) ||
                (m_objectChoice.hasValue() && other.m_objectChoice.hasValue() &&
                m_objectChoice.get<::nds::localization::types::OccupancyGridId>() == other.m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

uint32_t OccupancyGridRelationAttributeValue::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getType());
    if (m_objectChoice.hasValue())
    {
        switch (getType())
        {
        case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
            break;
        default:
            break;
        }
    }

    return result;
}

void OccupancyGridRelationAttributeValue::write(::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        out.writeVarUInt32(m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

void OccupancyGridRelationAttributeValue::write(OccupancyGridRelationAttributeValue::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        context.getId().write<::zserio::VarIntNNArrayTraits<::nds::localization::types::OccupancyGridId>>(out, m_objectChoice.get<::nds::localization::types::OccupancyGridId>());
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> OccupancyGridRelationAttributeValue::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return ::zserio::AnyHolder<>(static_cast<::nds::localization::types::OccupancyGridId>(in.readVarUInt32()), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> OccupancyGridRelationAttributeValue::readObject(OccupancyGridRelationAttributeValue::ZserioPackingContext& context,
        ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return ::zserio::AnyHolder<>(context.getId().read<::zserio::VarIntNNArrayTraits<::nds::localization::types::OccupancyGridId>>(in), allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

::zserio::AnyHolder<> OccupancyGridRelationAttributeValue::copyObject(const allocator_type& allocator) const
{
    switch (getType())
    {
    case ::nds::localization::attributes::OccupancyGridRelationAttributeType::OCCUPANCY_GRID_VISIBILITY:
        return ::zserio::allocatorPropagatingCopy<::nds::localization::types::OccupancyGridId>(m_objectChoice, allocator);
    default:
        throw ::zserio::CppRuntimeException("No match in choice OccupancyGridRelationAttributeValue!");
    }
}

} // namespace attributes
} // namespace localization
} // namespace nds
