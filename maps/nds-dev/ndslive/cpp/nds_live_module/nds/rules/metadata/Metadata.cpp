/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/rules/metadata/RegionRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RegionRulesLayerContent::RegionRulesLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RegionRulesLayerContent::RegionRulesLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RegionRulesLayerContent::RegionRulesLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT16_C(32767))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RegionRulesLayerContent' out of bounds: ") << value << "!";
}

void RegionRulesLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RegionRulesLayerContent::underlying_type>>(m_value);
}

size_t RegionRulesLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt16(m_value);
}

size_t RegionRulesLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RegionRulesLayerContent::underlying_type>>(m_value);
}

size_t RegionRulesLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RegionRulesLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RegionRulesLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RegionRulesLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_value);
}

void RegionRulesLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RegionRulesLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RegionRulesLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RegionRulesLayerContent::Values::REGION_MAPS) == RegionRulesLayerContent::Values::REGION_MAPS)
        result += result.empty() ? "REGION_MAPS" : " | REGION_MAPS";
    if ((*this & RegionRulesLayerContent::Values::REGION_SETS) == RegionRulesLayerContent::Values::REGION_SETS)
        result += result.empty() ? "REGION_SETS" : " | REGION_SETS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RegionRulesLayerContent::underlying_type RegionRulesLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt16());
}

RegionRulesLayerContent::underlying_type RegionRulesLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RegionRulesLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/rules/metadata/RoadRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RoadRulesLayerContent::RoadRulesLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadRulesLayerContent::RoadRulesLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadRulesLayerContent::RoadRulesLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadRulesLayerContent' out of bounds: ") << value << "!";
}

void RoadRulesLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadRulesLayerContent::underlying_type>>(m_value);
}

size_t RoadRulesLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadRulesLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadRulesLayerContent::underlying_type>>(m_value);
}

size_t RoadRulesLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadRulesLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadRulesLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadRulesLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadRulesLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadRulesLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadRulesLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
        result += result.empty() ? "ROAD_RANGE_MAPS" : " | ROAD_RANGE_MAPS";
    if ((*this & RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
        result += result.empty() ? "ROAD_RANGE_SETS" : " | ROAD_RANGE_SETS";
    if ((*this & RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
        result += result.empty() ? "ROAD_POSITION_MAPS" : " | ROAD_POSITION_MAPS";
    if ((*this & RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
        result += result.empty() ? "ROAD_POSITION_SETS" : " | ROAD_POSITION_SETS";
    if ((*this & RoadRulesLayerContent::Values::TRANSITION_MAPS) == RoadRulesLayerContent::Values::TRANSITION_MAPS)
        result += result.empty() ? "TRANSITION_MAPS" : " | TRANSITION_MAPS";
    if ((*this & RoadRulesLayerContent::Values::TRANSITION_SETS) == RoadRulesLayerContent::Values::TRANSITION_SETS)
        result += result.empty() ? "TRANSITION_SETS" : " | TRANSITION_SETS";
    if ((*this & RoadRulesLayerContent::Values::LANGUAGES) == RoadRulesLayerContent::Values::LANGUAGES)
        result += result.empty() ? "LANGUAGES" : " | LANGUAGES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadRulesLayerContent::underlying_type RoadRulesLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadRulesLayerContent::underlying_type RoadRulesLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadRulesLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/rules/metadata/RoadLocationRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RoadLocationRulesLayerContent::RoadLocationRulesLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

RoadLocationRulesLayerContent::RoadLocationRulesLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

RoadLocationRulesLayerContent::RoadLocationRulesLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'RoadLocationRulesLayerContent' out of bounds: ") << value << "!";
}

void RoadLocationRulesLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadLocationRulesLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationRulesLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t RoadLocationRulesLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadLocationRulesLayerContent::underlying_type>>(m_value);
}

size_t RoadLocationRulesLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t RoadLocationRulesLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t RoadLocationRulesLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void RoadLocationRulesLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void RoadLocationRulesLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadLocationRulesLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> RoadLocationRulesLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_MAPS" : " | ROAD_LOCATION_MAPS";
    if ((*this & RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
        result += result.empty() ? "ROAD_LOCATION_SETS" : " | ROAD_LOCATION_SETS";
    if ((*this & RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_MAPS" : " | ROAD_LOCATION_TRANSITION_MAPS";
    if ((*this & RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        result += result.empty() ? "ROAD_LOCATION_TRANSITION_SETS" : " | ROAD_LOCATION_TRANSITION_SETS";
    if ((*this & RoadLocationRulesLayerContent::Values::LANGUAGES) == RoadLocationRulesLayerContent::Values::LANGUAGES)
        result += result.empty() ? "LANGUAGES" : " | LANGUAGES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

RoadLocationRulesLayerContent::underlying_type RoadLocationRulesLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

RoadLocationRulesLayerContent::underlying_type RoadLocationRulesLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::RoadLocationRulesLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/rules/metadata/LaneRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

LaneRulesLayerContent::LaneRulesLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

LaneRulesLayerContent::LaneRulesLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

LaneRulesLayerContent::LaneRulesLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'LaneRulesLayerContent' out of bounds: ") << value << "!";
}

void LaneRulesLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::LaneRulesLayerContent::underlying_type>>(m_value);
}

size_t LaneRulesLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t LaneRulesLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::LaneRulesLayerContent::underlying_type>>(m_value);
}

size_t LaneRulesLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t LaneRulesLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t LaneRulesLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void LaneRulesLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void LaneRulesLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::LaneRulesLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> LaneRulesLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
        result += result.empty() ? "LANE_RANGE_MAPS" : " | LANE_RANGE_MAPS";
    if ((*this & LaneRulesLayerContent::Values::LANE_RANGE_SETS) == LaneRulesLayerContent::Values::LANE_RANGE_SETS)
        result += result.empty() ? "LANE_RANGE_SETS" : " | LANE_RANGE_SETS";
    if ((*this & LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
        result += result.empty() ? "LANE_POSITION_MAPS" : " | LANE_POSITION_MAPS";
    if ((*this & LaneRulesLayerContent::Values::LANE_POSITION_SETS) == LaneRulesLayerContent::Values::LANE_POSITION_SETS)
        result += result.empty() ? "LANE_POSITION_SETS" : " | LANE_POSITION_SETS";
    if ((*this & LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
        result += result.empty() ? "LANE_TRANSITION_MAPS" : " | LANE_TRANSITION_MAPS";
    if ((*this & LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
        result += result.empty() ? "LANE_TRANSITION_SETS" : " | LANE_TRANSITION_SETS";
    if ((*this & LaneRulesLayerContent::Values::LANGUAGES) == LaneRulesLayerContent::Values::LANGUAGES)
        result += result.empty() ? "LANGUAGES" : " | LANGUAGES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

LaneRulesLayerContent::underlying_type LaneRulesLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

LaneRulesLayerContent::underlying_type LaneRulesLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::LaneRulesLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/rules/metadata/DisplayLineRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

DisplayLineRulesLayerContent::DisplayLineRulesLayerContent(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

DisplayLineRulesLayerContent::DisplayLineRulesLayerContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

DisplayLineRulesLayerContent::DisplayLineRulesLayerContent(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT32_C(536870911))
        throw ::zserio::CppRuntimeException("Value for bitmask 'DisplayLineRulesLayerContent' out of bounds: ") << value << "!";
}

void DisplayLineRulesLayerContent::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::DisplayLineRulesLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineRulesLayerContent::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt32(m_value);
}

size_t DisplayLineRulesLayerContent::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::DisplayLineRulesLayerContent::underlying_type>>(m_value);
}

size_t DisplayLineRulesLayerContent::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t DisplayLineRulesLayerContent::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t DisplayLineRulesLayerContent::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void DisplayLineRulesLayerContent::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_value);
}

void DisplayLineRulesLayerContent::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::DisplayLineRulesLayerContent::underlying_type>>(out, m_value);
}

::zserio::string<> DisplayLineRulesLayerContent::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_MAPS" : " | DISPLAY_LINE_RANGE_MAPS";
    if ((*this & DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        result += result.empty() ? "DISPLAY_LINE_RANGE_SETS" : " | DISPLAY_LINE_RANGE_SETS";
    if ((*this & DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
        result += result.empty() ? "DISPLAY_LINE_POSITION_MAPS" : " | DISPLAY_LINE_POSITION_MAPS";
    if ((*this & DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
        result += result.empty() ? "DISPLAY_LINE_POSITION_SETS" : " | DISPLAY_LINE_POSITION_SETS";
    if ((*this & DisplayLineRulesLayerContent::Values::LANGUAGES) == DisplayLineRulesLayerContent::Values::LANGUAGES)
        result += result.empty() ? "LANGUAGES" : " | LANGUAGES";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

DisplayLineRulesLayerContent::underlying_type DisplayLineRulesLayerContent::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt32());
}

DisplayLineRulesLayerContent::underlying_type DisplayLineRulesLayerContent::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::rules::metadata::DisplayLineRulesLayerContent::underlying_type>>(
            in);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/RegionRulesLayerMetadata.h>
#include <nds/rules/metadata/RegionRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RegionRulesLayerMetadata::RegionRulesLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::RegionRulesLayerContent()),
        m_regionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_availableLanguages_(allocator)
{
}

RegionRulesLayerMetadata::RegionRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_regionAttributeMetadata_(readRegionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

RegionRulesLayerMetadata::RegionRulesLayerMetadata(RegionRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_regionAttributeMetadata_(readRegionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

RegionRulesLayerMetadata::RegionRulesLayerMetadata(::zserio::PropagateAllocatorT,
        const RegionRulesLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_regionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_regionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerMetadata::getContent() const
{
    return m_content_;
}

void RegionRulesLayerMetadata::setContent(::nds::rules::metadata::RegionRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRegionAttributeMetadata& RegionRulesLayerMetadata::getRegionAttributeMetadata()
{
    return m_regionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRegionAttributeMetadata& RegionRulesLayerMetadata::getRegionAttributeMetadata() const
{
    return m_regionAttributeMetadata_.value();
}

void RegionRulesLayerMetadata::setRegionAttributeMetadata(const ::nds::rules::instantiations::RulesRegionAttributeMetadata& regionAttributeMetadata_)
{
    m_regionAttributeMetadata_ = regionAttributeMetadata_;
}

void RegionRulesLayerMetadata::setRegionAttributeMetadata(::nds::rules::instantiations::RulesRegionAttributeMetadata&& regionAttributeMetadata_)
{
    m_regionAttributeMetadata_ = ::std::move(regionAttributeMetadata_);
}

bool RegionRulesLayerMetadata::isRegionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS);
}

bool RegionRulesLayerMetadata::isRegionAttributeMetadataSet() const
{
    return m_regionAttributeMetadata_.hasValue();
}

void RegionRulesLayerMetadata::resetRegionAttributeMetadata()
{
    m_regionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RegionRulesLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RegionRulesLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RegionRulesLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RegionRulesLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::core::language::AvailableLanguages& RegionRulesLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_;
}

const ::nds::core::language::AvailableLanguages& RegionRulesLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_;
}

void RegionRulesLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void RegionRulesLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

void RegionRulesLayerMetadata::initPackingContext(RegionRulesLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        m_regionAttributeMetadata_.value().initPackingContext(context.getRegionAttributeMetadata());
    }
    m_availableLanguages_.initPackingContext(context.getAvailableLanguages());
}

size_t RegionRulesLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerMetadata::bitSizeOf(RegionRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionAttributeMetadata_.value().bitSizeOf(context.getRegionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_availableLanguages_.bitSizeOf(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t RegionRulesLayerMetadata::initializeOffsets(RegionRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionAttributeMetadata_.value().initializeOffsets(context.getRegionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_availableLanguages_.initializeOffsets(context.getAvailableLanguages(), endBitPosition);

    return endBitPosition;
}

bool RegionRulesLayerMetadata::operator==(const RegionRulesLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRegionAttributeMetadataUsed() ? !other.isRegionAttributeMetadataUsed() : (m_regionAttributeMetadata_ == other.m_regionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (m_availableLanguages_ == other.m_availableLanguages_);
    }

    return true;
}

uint32_t RegionRulesLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRegionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_regionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void RegionRulesLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        m_regionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    m_availableLanguages_.write(out);
}

void RegionRulesLayerMetadata::write(RegionRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        m_regionAttributeMetadata_.value().write(context.getRegionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    m_availableLanguages_.write(context.getAvailableLanguages(), out);
}

void RegionRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RegionRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RegionRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RegionRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(in);
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerMetadata::readContent(RegionRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata> RegionRulesLayerMetadata::readRegionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata>(::nds::rules::instantiations::RulesRegionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata> RegionRulesLayerMetadata::readRegionAttributeMetadata(RegionRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS || (getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata>(::nds::rules::instantiations::RulesRegionAttributeMetadata(context.getRegionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata>(::zserio::NullOpt);
}
RegionRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RegionRulesLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RegionRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RegionRulesLayerMetadata::readCoveredRoadTypes(RegionRulesLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::nds::core::language::AvailableLanguages RegionRulesLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(in, allocator);
}

::nds::core::language::AvailableLanguages RegionRulesLayerMetadata::readAvailableLanguages(RegionRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/RoadRulesLayerMetadata.h>
#include <nds/rules/metadata/RoadRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RoadRulesLayerMetadata::RoadRulesLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::RoadRulesLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadPositionAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

RoadRulesLayerMetadata::RoadRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

RoadRulesLayerMetadata::RoadRulesLayerMetadata(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

RoadRulesLayerMetadata::RoadRulesLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadRulesLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadPositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadRulesLayerMetadata::setContent(::nds::rules::metadata::RoadRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadRulesLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadRulesLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadRulesLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadRulesLayerMetadata::setRoadRangeAttributeMetadata(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadRulesLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRulesLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadRulesLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& RoadRulesLayerMetadata::getRoadPositionAttributeMetadata()
{
    return m_roadPositionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& RoadRulesLayerMetadata::getRoadPositionAttributeMetadata() const
{
    return m_roadPositionAttributeMetadata_.value();
}

void RoadRulesLayerMetadata::setRoadPositionAttributeMetadata(const ::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = roadPositionAttributeMetadata_;
}

void RoadRulesLayerMetadata::setRoadPositionAttributeMetadata(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = ::std::move(roadPositionAttributeMetadata_);
}

bool RoadRulesLayerMetadata::isRoadPositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadRulesLayerMetadata::isRoadPositionAttributeMetadataSet() const
{
    return m_roadPositionAttributeMetadata_.hasValue();
}

void RoadRulesLayerMetadata::resetRoadPositionAttributeMetadata()
{
    m_roadPositionAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadRulesLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadRulesLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadRulesLayerMetadata::setTransitionAttributeMetadata(const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadRulesLayerMetadata::setTransitionAttributeMetadata(::nds::rules::instantiations::RulesTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadRulesLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS);
}

bool RoadRulesLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadRulesLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadRulesLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadRulesLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadRulesLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadRulesLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::core::language::AvailableLanguages& RoadRulesLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& RoadRulesLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void RoadRulesLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void RoadRulesLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool RoadRulesLayerMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES);
}

bool RoadRulesLayerMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void RoadRulesLayerMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void RoadRulesLayerMetadata::initPackingContext(RoadRulesLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().initPackingContext(context.getRoadPositionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t RoadRulesLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerMetadata::bitSizeOf(RoadRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadRulesLayerMetadata::initializeOffsets(RoadRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadRulesLayerMetadata::operator==(const RoadRulesLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadPositionAttributeMetadataUsed() ? !other.isRoadPositionAttributeMetadataUsed() : (m_roadPositionAttributeMetadata_ == other.m_roadPositionAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t RoadRulesLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadPositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void RoadRulesLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void RoadRulesLayerMetadata::write(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(context.getRoadPositionAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void RoadRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(in);
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerMetadata::readContent(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadRulesLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadRulesLayerMetadata::readRoadRangeAttributeMetadata(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata> RoadRulesLayerMetadata::readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata> RoadRulesLayerMetadata::readRoadPositionAttributeMetadata(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata(context.getRoadPositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadRulesLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadRulesLayerMetadata::readTransitionAttributeMetadata(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RoadRulesLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RoadRulesLayerMetadata::readCoveredRoadTypes(RoadRulesLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadRulesLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadRulesLayerMetadata::readAvailableLanguages(RoadRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/RoadRulesLayerIndirectMetadata.h>
#include <nds/rules/metadata/RoadRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RoadRulesLayerIndirectMetadata::RoadRulesLayerIndirectMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::RoadRulesLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_roadPositionAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

RoadRulesLayerIndirectMetadata::RoadRulesLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

RoadRulesLayerIndirectMetadata::RoadRulesLayerIndirectMetadata(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_roadPositionAttributeMetadata_(readRoadPositionAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

RoadRulesLayerIndirectMetadata::RoadRulesLayerIndirectMetadata(::zserio::PropagateAllocatorT,
        const RoadRulesLayerIndirectMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_roadPositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirectMetadata::getContent() const
{
    return m_content_;
}

void RoadRulesLayerIndirectMetadata::setContent(::nds::rules::metadata::RoadRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadRulesLayerIndirectMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadRulesLayerIndirectMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadRulesLayerIndirectMetadata::setRoadRangeAttributeMetadata(const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadRulesLayerIndirectMetadata::setRoadRangeAttributeMetadata(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadRulesLayerIndirectMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRulesLayerIndirectMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadRulesLayerIndirectMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& RoadRulesLayerIndirectMetadata::getRoadPositionAttributeMetadata()
{
    return m_roadPositionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& RoadRulesLayerIndirectMetadata::getRoadPositionAttributeMetadata() const
{
    return m_roadPositionAttributeMetadata_.value();
}

void RoadRulesLayerIndirectMetadata::setRoadPositionAttributeMetadata(const ::nds::rules::instantiations::RulesRoadPositionAttributeMetadata& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = roadPositionAttributeMetadata_;
}

void RoadRulesLayerIndirectMetadata::setRoadPositionAttributeMetadata(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata&& roadPositionAttributeMetadata_)
{
    m_roadPositionAttributeMetadata_ = ::std::move(roadPositionAttributeMetadata_);
}

bool RoadRulesLayerIndirectMetadata::isRoadPositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadRulesLayerIndirectMetadata::isRoadPositionAttributeMetadataSet() const
{
    return m_roadPositionAttributeMetadata_.hasValue();
}

void RoadRulesLayerIndirectMetadata::resetRoadPositionAttributeMetadata()
{
    m_roadPositionAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadRulesLayerIndirectMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadRulesLayerIndirectMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadRulesLayerIndirectMetadata::setTransitionAttributeMetadata(const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadRulesLayerIndirectMetadata::setTransitionAttributeMetadata(::nds::rules::instantiations::RulesTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadRulesLayerIndirectMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS);
}

bool RoadRulesLayerIndirectMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadRulesLayerIndirectMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadRulesLayerIndirectMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadRulesLayerIndirectMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadRulesLayerIndirectMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadRulesLayerIndirectMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::core::language::AvailableLanguages& RoadRulesLayerIndirectMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& RoadRulesLayerIndirectMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void RoadRulesLayerIndirectMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void RoadRulesLayerIndirectMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool RoadRulesLayerIndirectMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES);
}

bool RoadRulesLayerIndirectMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void RoadRulesLayerIndirectMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void RoadRulesLayerIndirectMetadata::initPackingContext(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().initPackingContext(context.getRoadPositionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t RoadRulesLayerIndirectMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerIndirectMetadata::bitSizeOf(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeMetadata_.value().bitSizeOf(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerIndirectMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadRulesLayerIndirectMetadata::initializeOffsets(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeMetadata_.value().initializeOffsets(context.getRoadPositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadRulesLayerIndirectMetadata::operator==(const RoadRulesLayerIndirectMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isRoadPositionAttributeMetadataUsed() ? !other.isRoadPositionAttributeMetadataUsed() : (m_roadPositionAttributeMetadata_ == other.m_roadPositionAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t RoadRulesLayerIndirectMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isRoadPositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void RoadRulesLayerIndirectMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void RoadRulesLayerIndirectMetadata::write(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeMetadata_.value().write(context.getRoadPositionAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void RoadRulesLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRulesLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadRulesLayerIndirectMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadRulesLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirectMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(in);
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirectMetadata::readContent(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadRulesLayerIndirectMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadRulesLayerIndirectMetadata::readRoadRangeAttributeMetadata(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata> RoadRulesLayerIndirectMetadata::readRoadPositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata> RoadRulesLayerIndirectMetadata::readRoadPositionAttributeMetadata(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::nds::rules::instantiations::RulesRoadPositionAttributeMetadata(context.getRoadPositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadRulesLayerIndirectMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadRulesLayerIndirectMetadata::readTransitionAttributeMetadata(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadRulesLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadRulesLayerIndirectMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadRulesLayerIndirectMetadata::ZserioArrayType_coveredRoadTypes RoadRulesLayerIndirectMetadata::readCoveredRoadTypes(RoadRulesLayerIndirectMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadRulesLayerIndirectMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadRulesLayerIndirectMetadata::readAvailableLanguages(RoadRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/RoadLocationRulesLayerMetadata.h>
#include <nds/rules/metadata/RoadLocationRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

RoadLocationRulesLayerMetadata::RoadLocationRulesLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::RoadLocationRulesLayerContent()),
        m_roadRangeAttributeMetadata_(::zserio::NullOpt),
        m_transitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

RoadLocationRulesLayerMetadata::RoadLocationRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

RoadLocationRulesLayerMetadata::RoadLocationRulesLayerMetadata(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_roadRangeAttributeMetadata_(readRoadRangeAttributeMetadata(context, in, allocator)),
        m_transitionAttributeMetadata_(readTransitionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

RoadLocationRulesLayerMetadata::RoadLocationRulesLayerMetadata(::zserio::PropagateAllocatorT,
        const RoadLocationRulesLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_roadRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMetadata_, allocator)),
        m_transitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayerMetadata::getContent() const
{
    return m_content_;
}

void RoadLocationRulesLayerMetadata::setContent(::nds::rules::metadata::RoadLocationRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadLocationRulesLayerMetadata::getRoadRangeAttributeMetadata()
{
    return m_roadRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& RoadLocationRulesLayerMetadata::getRoadRangeAttributeMetadata() const
{
    return m_roadRangeAttributeMetadata_.value();
}

void RoadLocationRulesLayerMetadata::setRoadRangeAttributeMetadata(const ::nds::rules::instantiations::RulesRoadRangeAttributeMetadata& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = roadRangeAttributeMetadata_;
}

void RoadLocationRulesLayerMetadata::setRoadRangeAttributeMetadata(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata&& roadRangeAttributeMetadata_)
{
    m_roadRangeAttributeMetadata_ = ::std::move(roadRangeAttributeMetadata_);
}

bool RoadLocationRulesLayerMetadata::isRoadRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS);
}

bool RoadLocationRulesLayerMetadata::isRoadRangeAttributeMetadataSet() const
{
    return m_roadRangeAttributeMetadata_.hasValue();
}

void RoadLocationRulesLayerMetadata::resetRoadRangeAttributeMetadata()
{
    m_roadRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadLocationRulesLayerMetadata::getTransitionAttributeMetadata()
{
    return m_transitionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& RoadLocationRulesLayerMetadata::getTransitionAttributeMetadata() const
{
    return m_transitionAttributeMetadata_.value();
}

void RoadLocationRulesLayerMetadata::setTransitionAttributeMetadata(const ::nds::rules::instantiations::RulesTransitionAttributeMetadata& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = transitionAttributeMetadata_;
}

void RoadLocationRulesLayerMetadata::setTransitionAttributeMetadata(::nds::rules::instantiations::RulesTransitionAttributeMetadata&& transitionAttributeMetadata_)
{
    m_transitionAttributeMetadata_ = ::std::move(transitionAttributeMetadata_);
}

bool RoadLocationRulesLayerMetadata::isTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool RoadLocationRulesLayerMetadata::isTransitionAttributeMetadataSet() const
{
    return m_transitionAttributeMetadata_.hasValue();
}

void RoadLocationRulesLayerMetadata::resetTransitionAttributeMetadata()
{
    m_transitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& RoadLocationRulesLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& RoadLocationRulesLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void RoadLocationRulesLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void RoadLocationRulesLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::core::language::AvailableLanguages& RoadLocationRulesLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& RoadLocationRulesLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void RoadLocationRulesLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void RoadLocationRulesLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool RoadLocationRulesLayerMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES);
}

bool RoadLocationRulesLayerMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void RoadLocationRulesLayerMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void RoadLocationRulesLayerMetadata::initPackingContext(RoadLocationRulesLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().initPackingContext(context.getRoadRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().initPackingContext(context.getTransitionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t RoadLocationRulesLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationRulesLayerMetadata::bitSizeOf(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadRangeAttributeMetadata_.value().bitSizeOf(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeMetadata_.value().bitSizeOf(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationRulesLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadLocationRulesLayerMetadata::initializeOffsets(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadRangeAttributeMetadata_.value().initializeOffsets(context.getRoadRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeMetadata_.value().initializeOffsets(context.getTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadLocationRulesLayerMetadata::operator==(const RoadLocationRulesLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isRoadRangeAttributeMetadataUsed() ? !other.isRoadRangeAttributeMetadataUsed() : (m_roadRangeAttributeMetadata_ == other.m_roadRangeAttributeMetadata_)) &&
                (!isTransitionAttributeMetadataUsed() ? !other.isTransitionAttributeMetadataUsed() : (m_transitionAttributeMetadata_ == other.m_transitionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t RoadLocationRulesLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isRoadRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMetadata_);
    if (isTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void RoadLocationRulesLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void RoadLocationRulesLayerMetadata::write(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadRangeAttributeMetadata_.value().write(context.getRoadRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_transitionAttributeMetadata_.value().write(context.getTransitionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void RoadLocationRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RoadLocationRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(RoadLocationRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadLocationRulesLayerContent(in);
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayerMetadata::readContent(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadLocationRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadLocationRulesLayerMetadata::readRoadRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata> RoadLocationRulesLayerMetadata::readRoadRangeAttributeMetadata(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::nds::rules::instantiations::RulesRoadRangeAttributeMetadata(context.getRoadRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadLocationRulesLayerMetadata::readTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata> RoadLocationRulesLayerMetadata::readTransitionAttributeMetadata(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::nds::rules::instantiations::RulesTransitionAttributeMetadata(context.getTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMetadata>(::zserio::NullOpt);
}
RoadLocationRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationRulesLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

RoadLocationRulesLayerMetadata::ZserioArrayType_coveredRoadTypes RoadLocationRulesLayerMetadata::readCoveredRoadTypes(RoadLocationRulesLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadLocationRulesLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> RoadLocationRulesLayerMetadata::readAvailableLanguages(RoadLocationRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/LaneRulesLayerMetadata.h>
#include <nds/rules/metadata/LaneRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

LaneRulesLayerMetadata::LaneRulesLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::LaneRulesLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_lanePositionAttributeMetadata_(::zserio::NullOpt),
        m_laneTransitionAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

LaneRulesLayerMetadata::LaneRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(in, allocator)),
        m_laneTransitionAttributeMetadata_(readLaneTransitionAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

LaneRulesLayerMetadata::LaneRulesLayerMetadata(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(context, in, allocator)),
        m_laneTransitionAttributeMetadata_(readLaneTransitionAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

LaneRulesLayerMetadata::LaneRulesLayerMetadata(::zserio::PropagateAllocatorT,
        const LaneRulesLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_lanePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMetadata_, allocator)),
        m_laneTransitionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerMetadata::getContent() const
{
    return m_content_;
}

void LaneRulesLayerMetadata::setContent(::nds::rules::metadata::LaneRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& LaneRulesLayerMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& LaneRulesLayerMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneRulesLayerMetadata::setLaneRangeAttributeMetadata(const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneRulesLayerMetadata::setLaneRangeAttributeMetadata(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneRulesLayerMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRulesLayerMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneRulesLayerMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesLanePositionAttributeMetadata& LaneRulesLayerMetadata::getLanePositionAttributeMetadata()
{
    return m_lanePositionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& LaneRulesLayerMetadata::getLanePositionAttributeMetadata() const
{
    return m_lanePositionAttributeMetadata_.value();
}

void LaneRulesLayerMetadata::setLanePositionAttributeMetadata(const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = lanePositionAttributeMetadata_;
}

void LaneRulesLayerMetadata::setLanePositionAttributeMetadata(::nds::rules::instantiations::RulesLanePositionAttributeMetadata&& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = ::std::move(lanePositionAttributeMetadata_);
}

bool LaneRulesLayerMetadata::isLanePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneRulesLayerMetadata::isLanePositionAttributeMetadataSet() const
{
    return m_lanePositionAttributeMetadata_.hasValue();
}

void LaneRulesLayerMetadata::resetLanePositionAttributeMetadata()
{
    m_lanePositionAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata& LaneRulesLayerMetadata::getLaneTransitionAttributeMetadata()
{
    return m_laneTransitionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata& LaneRulesLayerMetadata::getLaneTransitionAttributeMetadata() const
{
    return m_laneTransitionAttributeMetadata_.value();
}

void LaneRulesLayerMetadata::setLaneTransitionAttributeMetadata(const ::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata& laneTransitionAttributeMetadata_)
{
    m_laneTransitionAttributeMetadata_ = laneTransitionAttributeMetadata_;
}

void LaneRulesLayerMetadata::setLaneTransitionAttributeMetadata(::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata&& laneTransitionAttributeMetadata_)
{
    m_laneTransitionAttributeMetadata_ = ::std::move(laneTransitionAttributeMetadata_);
}

bool LaneRulesLayerMetadata::isLaneTransitionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS);
}

bool LaneRulesLayerMetadata::isLaneTransitionAttributeMetadataSet() const
{
    return m_laneTransitionAttributeMetadata_.hasValue();
}

void LaneRulesLayerMetadata::resetLaneTransitionAttributeMetadata()
{
    m_laneTransitionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneRulesLayerMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneRulesLayerMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneRulesLayerMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneRulesLayerMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

::nds::core::language::AvailableLanguages& LaneRulesLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& LaneRulesLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void LaneRulesLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void LaneRulesLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool LaneRulesLayerMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES);
}

bool LaneRulesLayerMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void LaneRulesLayerMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void LaneRulesLayerMetadata::initPackingContext(LaneRulesLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().initPackingContext(context.getLanePositionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().initPackingContext(context.getLaneTransitionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t LaneRulesLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerMetadata::bitSizeOf(LaneRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeMetadata_.value().bitSizeOf(context.getLaneTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneRulesLayerMetadata::initializeOffsets(LaneRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeMetadata_.value().initializeOffsets(context.getLaneTransitionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneRulesLayerMetadata::operator==(const LaneRulesLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (!isLanePositionAttributeMetadataUsed() ? !other.isLanePositionAttributeMetadataUsed() : (m_lanePositionAttributeMetadata_ == other.m_lanePositionAttributeMetadata_)) &&
                (!isLaneTransitionAttributeMetadataUsed() ? !other.isLaneTransitionAttributeMetadataUsed() : (m_laneTransitionAttributeMetadata_ == other.m_laneTransitionAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t LaneRulesLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    if (isLanePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMetadata_);
    if (isLaneTransitionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void LaneRulesLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void LaneRulesLayerMetadata::write(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(context.getLanePositionAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeMetadata_.value().write(context.getLaneTransitionAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void LaneRulesLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneRulesLayerMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(in);
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerMetadata::readContent(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> LaneRulesLayerMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> LaneRulesLayerMetadata::readLaneRangeAttributeMetadata(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> LaneRulesLayerMetadata::readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::nds::rules::instantiations::RulesLanePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> LaneRulesLayerMetadata::readLanePositionAttributeMetadata(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::nds::rules::instantiations::RulesLanePositionAttributeMetadata(context.getLanePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata> LaneRulesLayerMetadata::readLaneTransitionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata>(::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata> LaneRulesLayerMetadata::readLaneTransitionAttributeMetadata(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata>(::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata(context.getLaneTransitionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMetadata>(::zserio::NullOpt);
}
LaneRulesLayerMetadata::ZserioArrayType_coveredLaneTypes LaneRulesLayerMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneRulesLayerMetadata::ZserioArrayType_coveredLaneTypes LaneRulesLayerMetadata::readCoveredLaneTypes(LaneRulesLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> LaneRulesLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> LaneRulesLayerMetadata::readAvailableLanguages(LaneRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/LaneRulesLayerIndirectMetadata.h>
#include <nds/rules/metadata/LaneRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

LaneRulesLayerIndirectMetadata::LaneRulesLayerIndirectMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::LaneRulesLayerContent()),
        m_laneRangeAttributeMetadata_(::zserio::NullOpt),
        m_lanePositionAttributeMetadata_(::zserio::NullOpt),
        m_coveredLaneTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

LaneRulesLayerIndirectMetadata::LaneRulesLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

LaneRulesLayerIndirectMetadata::LaneRulesLayerIndirectMetadata(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMetadata_(readLaneRangeAttributeMetadata(context, in, allocator)),
        m_lanePositionAttributeMetadata_(readLanePositionAttributeMetadata(context, in, allocator)),
        m_coveredLaneTypes_(readCoveredLaneTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

LaneRulesLayerIndirectMetadata::LaneRulesLayerIndirectMetadata(::zserio::PropagateAllocatorT,
        const LaneRulesLayerIndirectMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMetadata_, allocator)),
        m_lanePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMetadata_, allocator)),
        m_coveredLaneTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredLaneTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirectMetadata::getContent() const
{
    return m_content_;
}

void LaneRulesLayerIndirectMetadata::setContent(::nds::rules::metadata::LaneRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& LaneRulesLayerIndirectMetadata::getLaneRangeAttributeMetadata()
{
    return m_laneRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& LaneRulesLayerIndirectMetadata::getLaneRangeAttributeMetadata() const
{
    return m_laneRangeAttributeMetadata_.value();
}

void LaneRulesLayerIndirectMetadata::setLaneRangeAttributeMetadata(const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = laneRangeAttributeMetadata_;
}

void LaneRulesLayerIndirectMetadata::setLaneRangeAttributeMetadata(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_)
{
    m_laneRangeAttributeMetadata_ = ::std::move(laneRangeAttributeMetadata_);
}

bool LaneRulesLayerIndirectMetadata::isLaneRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRulesLayerIndirectMetadata::isLaneRangeAttributeMetadataSet() const
{
    return m_laneRangeAttributeMetadata_.hasValue();
}

void LaneRulesLayerIndirectMetadata::resetLaneRangeAttributeMetadata()
{
    m_laneRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesLanePositionAttributeMetadata& LaneRulesLayerIndirectMetadata::getLanePositionAttributeMetadata()
{
    return m_lanePositionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& LaneRulesLayerIndirectMetadata::getLanePositionAttributeMetadata() const
{
    return m_lanePositionAttributeMetadata_.value();
}

void LaneRulesLayerIndirectMetadata::setLanePositionAttributeMetadata(const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = lanePositionAttributeMetadata_;
}

void LaneRulesLayerIndirectMetadata::setLanePositionAttributeMetadata(::nds::rules::instantiations::RulesLanePositionAttributeMetadata&& lanePositionAttributeMetadata_)
{
    m_lanePositionAttributeMetadata_ = ::std::move(lanePositionAttributeMetadata_);
}

bool LaneRulesLayerIndirectMetadata::isLanePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneRulesLayerIndirectMetadata::isLanePositionAttributeMetadataSet() const
{
    return m_lanePositionAttributeMetadata_.hasValue();
}

void LaneRulesLayerIndirectMetadata::resetLanePositionAttributeMetadata()
{
    m_lanePositionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::LaneType>& LaneRulesLayerIndirectMetadata::getCoveredLaneTypes()
{
    return m_coveredLaneTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::LaneType>& LaneRulesLayerIndirectMetadata::getCoveredLaneTypes() const
{
    return m_coveredLaneTypes_.getRawArray();
}

void LaneRulesLayerIndirectMetadata::setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(coveredLaneTypes_);
}

void LaneRulesLayerIndirectMetadata::setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_)
{
    m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(std::move(coveredLaneTypes_));
}

::nds::core::language::AvailableLanguages& LaneRulesLayerIndirectMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& LaneRulesLayerIndirectMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void LaneRulesLayerIndirectMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void LaneRulesLayerIndirectMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool LaneRulesLayerIndirectMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES);
}

bool LaneRulesLayerIndirectMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void LaneRulesLayerIndirectMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void LaneRulesLayerIndirectMetadata::initPackingContext(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().initPackingContext(context.getLaneRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().initPackingContext(context.getLanePositionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t LaneRulesLayerIndirectMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerIndirectMetadata::bitSizeOf(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeMetadata_.value().bitSizeOf(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeMetadata_.value().bitSizeOf(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredLaneTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerIndirectMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneRulesLayerIndirectMetadata::initializeOffsets(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeMetadata_.value().initializeOffsets(context.getLaneRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeMetadata_.value().initializeOffsets(context.getLanePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredLaneTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneRulesLayerIndirectMetadata::operator==(const LaneRulesLayerIndirectMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMetadataUsed() ? !other.isLaneRangeAttributeMetadataUsed() : (m_laneRangeAttributeMetadata_ == other.m_laneRangeAttributeMetadata_)) &&
                (!isLanePositionAttributeMetadataUsed() ? !other.isLanePositionAttributeMetadataUsed() : (m_lanePositionAttributeMetadata_ == other.m_lanePositionAttributeMetadata_)) &&
                (m_coveredLaneTypes_ == other.m_coveredLaneTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t LaneRulesLayerIndirectMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMetadata_);
    if (isLanePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredLaneTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void LaneRulesLayerIndirectMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(out);
    }
    m_coveredLaneTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void LaneRulesLayerIndirectMetadata::write(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeMetadata_.value().write(context.getLaneRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeMetadata_.value().write(context.getLanePositionAttributeMetadata(), out);
    }
    m_coveredLaneTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void LaneRulesLayerIndirectMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRulesLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void LaneRulesLayerIndirectMetadata::ZserioElementFactory_coveredLaneTypes::create(LaneRulesLayerIndirectMetadata&        ,
        ::zserio::vector<::nds::core::types::LaneType>& array,
        ::nds::core::types::LaneType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirectMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(in);
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirectMetadata::readContent(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> LaneRulesLayerIndirectMetadata::readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> LaneRulesLayerIndirectMetadata::readLaneRangeAttributeMetadata(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata(context.getLaneRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> LaneRulesLayerIndirectMetadata::readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::nds::rules::instantiations::RulesLanePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> LaneRulesLayerIndirectMetadata::readLanePositionAttributeMetadata(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::nds::rules::instantiations::RulesLanePositionAttributeMetadata(context.getLanePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata>(::zserio::NullOpt);
}
LaneRulesLayerIndirectMetadata::ZserioArrayType_coveredLaneTypes LaneRulesLayerIndirectMetadata::readCoveredLaneTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

LaneRulesLayerIndirectMetadata::ZserioArrayType_coveredLaneTypes LaneRulesLayerIndirectMetadata::readCoveredLaneTypes(LaneRulesLayerIndirectMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredLaneTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> LaneRulesLayerIndirectMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> LaneRulesLayerIndirectMetadata::readAvailableLanguages(LaneRulesLayerIndirectMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/metadata/DisplayLineRulesLayerMetadata.h>
#include <nds/rules/metadata/DisplayLineRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

DisplayLineRulesLayerMetadata::DisplayLineRulesLayerMetadata(const allocator_type& allocator) noexcept :
        m_content_(::nds::rules::metadata::DisplayLineRulesLayerContent()),
        m_displayLineRangeAttributeMetadata_(::zserio::NullOpt),
        m_displayLinePositionAttributeMetadata_(::zserio::NullOpt),
        m_coveredRoadTypes_(allocator),
        m_availableLanguages_(::zserio::NullOpt)
{
}

DisplayLineRulesLayerMetadata::DisplayLineRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(in, allocator)),
        m_displayLinePositionAttributeMetadata_(readDisplayLinePositionAttributeMetadata(in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(in, allocator)),
        m_availableLanguages_(readAvailableLanguages(in, allocator))
{
}

DisplayLineRulesLayerMetadata::DisplayLineRulesLayerMetadata(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_content_(readContent(context, in)),
        m_displayLineRangeAttributeMetadata_(readDisplayLineRangeAttributeMetadata(context, in, allocator)),
        m_displayLinePositionAttributeMetadata_(readDisplayLinePositionAttributeMetadata(context, in, allocator)),
        m_coveredRoadTypes_(readCoveredRoadTypes(context, in, allocator)),
        m_availableLanguages_(readAvailableLanguages(context, in, allocator))
{
}

DisplayLineRulesLayerMetadata::DisplayLineRulesLayerMetadata(::zserio::PropagateAllocatorT,
        const DisplayLineRulesLayerMetadata& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_displayLineRangeAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMetadata_, allocator)),
        m_displayLinePositionAttributeMetadata_(::zserio::allocatorPropagatingCopy(other.m_displayLinePositionAttributeMetadata_, allocator)),
        m_coveredRoadTypes_(::zserio::allocatorPropagatingCopy(other.m_coveredRoadTypes_, allocator)),
        m_availableLanguages_(::zserio::allocatorPropagatingCopy(other.m_availableLanguages_, allocator))
{
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayerMetadata::getContent() const
{
    return m_content_;
}

void DisplayLineRulesLayerMetadata::setContent(::nds::rules::metadata::DisplayLineRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& DisplayLineRulesLayerMetadata::getDisplayLineRangeAttributeMetadata()
{
    return m_displayLineRangeAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& DisplayLineRulesLayerMetadata::getDisplayLineRangeAttributeMetadata() const
{
    return m_displayLineRangeAttributeMetadata_.value();
}

void DisplayLineRulesLayerMetadata::setDisplayLineRangeAttributeMetadata(const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = displayLineRangeAttributeMetadata_;
}

void DisplayLineRulesLayerMetadata::setDisplayLineRangeAttributeMetadata(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_)
{
    m_displayLineRangeAttributeMetadata_ = ::std::move(displayLineRangeAttributeMetadata_);
}

bool DisplayLineRulesLayerMetadata::isDisplayLineRangeAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayLineRulesLayerMetadata::isDisplayLineRangeAttributeMetadataSet() const
{
    return m_displayLineRangeAttributeMetadata_.hasValue();
}

void DisplayLineRulesLayerMetadata::resetDisplayLineRangeAttributeMetadata()
{
    m_displayLineRangeAttributeMetadata_.reset();
}

::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& DisplayLineRulesLayerMetadata::getDisplayLinePositionAttributeMetadata()
{
    return m_displayLinePositionAttributeMetadata_.value();
}

const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& DisplayLineRulesLayerMetadata::getDisplayLinePositionAttributeMetadata() const
{
    return m_displayLinePositionAttributeMetadata_.value();
}

void DisplayLineRulesLayerMetadata::setDisplayLinePositionAttributeMetadata(const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& displayLinePositionAttributeMetadata_)
{
    m_displayLinePositionAttributeMetadata_ = displayLinePositionAttributeMetadata_;
}

void DisplayLineRulesLayerMetadata::setDisplayLinePositionAttributeMetadata(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata&& displayLinePositionAttributeMetadata_)
{
    m_displayLinePositionAttributeMetadata_ = ::std::move(displayLinePositionAttributeMetadata_);
}

bool DisplayLineRulesLayerMetadata::isDisplayLinePositionAttributeMetadataUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS);
}

bool DisplayLineRulesLayerMetadata::isDisplayLinePositionAttributeMetadataSet() const
{
    return m_displayLinePositionAttributeMetadata_.hasValue();
}

void DisplayLineRulesLayerMetadata::resetDisplayLinePositionAttributeMetadata()
{
    m_displayLinePositionAttributeMetadata_.reset();
}

::zserio::vector<::nds::core::types::RoadType>& DisplayLineRulesLayerMetadata::getCoveredRoadTypes()
{
    return m_coveredRoadTypes_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RoadType>& DisplayLineRulesLayerMetadata::getCoveredRoadTypes() const
{
    return m_coveredRoadTypes_.getRawArray();
}

void DisplayLineRulesLayerMetadata::setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(coveredRoadTypes_);
}

void DisplayLineRulesLayerMetadata::setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_)
{
    m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(std::move(coveredRoadTypes_));
}

::nds::core::language::AvailableLanguages& DisplayLineRulesLayerMetadata::getAvailableLanguages()
{
    return m_availableLanguages_.value();
}

const ::nds::core::language::AvailableLanguages& DisplayLineRulesLayerMetadata::getAvailableLanguages() const
{
    return m_availableLanguages_.value();
}

void DisplayLineRulesLayerMetadata::setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_)
{
    m_availableLanguages_ = availableLanguages_;
}

void DisplayLineRulesLayerMetadata::setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_)
{
    m_availableLanguages_ = ::std::move(availableLanguages_);
}

bool DisplayLineRulesLayerMetadata::isAvailableLanguagesUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES);
}

bool DisplayLineRulesLayerMetadata::isAvailableLanguagesSet() const
{
    return m_availableLanguages_.hasValue();
}

void DisplayLineRulesLayerMetadata::resetAvailableLanguages()
{
    m_availableLanguages_.reset();
}

void DisplayLineRulesLayerMetadata::initPackingContext(DisplayLineRulesLayerMetadata::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().initPackingContext(context.getDisplayLineRangeAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().initPackingContext(context.getDisplayLinePositionAttributeMetadata());
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().initPackingContext(context.getAvailableLanguages());
    }
}

size_t DisplayLineRulesLayerMetadata::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeMetadata_.value().bitSizeOf(endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOf(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineRulesLayerMetadata::bitSizeOf(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeMetadata_.value().bitSizeOf(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeMetadata_.value().bitSizeOf(context.getDisplayLinePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition += m_coveredRoadTypes_.bitSizeOfPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition += m_availableLanguages_.value().bitSizeOf(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineRulesLayerMetadata::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeMetadata_.value().initializeOffsets(endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsets(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayLineRulesLayerMetadata::initializeOffsets(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeMetadata_.value().initializeOffsets(context.getDisplayLineRangeAttributeMetadata(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeMetadata_.value().initializeOffsets(context.getDisplayLinePositionAttributeMetadata(), endBitPosition);
    }
    endBitPosition = m_coveredRoadTypes_.initializeOffsetsPacked(*this, endBitPosition);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        endBitPosition = m_availableLanguages_.value().initializeOffsets(context.getAvailableLanguages(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayLineRulesLayerMetadata::operator==(const DisplayLineRulesLayerMetadata& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isDisplayLineRangeAttributeMetadataUsed() ? !other.isDisplayLineRangeAttributeMetadataUsed() : (m_displayLineRangeAttributeMetadata_ == other.m_displayLineRangeAttributeMetadata_)) &&
                (!isDisplayLinePositionAttributeMetadataUsed() ? !other.isDisplayLinePositionAttributeMetadataUsed() : (m_displayLinePositionAttributeMetadata_ == other.m_displayLinePositionAttributeMetadata_)) &&
                (m_coveredRoadTypes_ == other.m_coveredRoadTypes_) &&
                (!isAvailableLanguagesUsed() ? !other.isAvailableLanguagesUsed() : (m_availableLanguages_ == other.m_availableLanguages_));
    }

    return true;
}

uint32_t DisplayLineRulesLayerMetadata::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isDisplayLineRangeAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMetadata_);
    if (isDisplayLinePositionAttributeMetadataUsed())
        result = ::zserio::calcHashCode(result, m_displayLinePositionAttributeMetadata_);
    result = ::zserio::calcHashCode(result, m_coveredRoadTypes_);
    if (isAvailableLanguagesUsed())
        result = ::zserio::calcHashCode(result, m_availableLanguages_);

    return result;
}

void DisplayLineRulesLayerMetadata::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(out);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().write(out);
    }
    m_coveredRoadTypes_.write(*this, out);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(out);
    }
}

void DisplayLineRulesLayerMetadata::write(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeMetadata_.value().write(context.getDisplayLineRangeAttributeMetadata(), out);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeMetadata_.value().write(context.getDisplayLinePositionAttributeMetadata(), out);
    }
    m_coveredRoadTypes_.writePacked(*this, out);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        m_availableLanguages_.value().write(context.getAvailableLanguages(), out);
    }
}

void DisplayLineRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(DisplayLineRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void DisplayLineRulesLayerMetadata::ZserioElementFactory_coveredRoadTypes::create(DisplayLineRulesLayerMetadata&        ,
        ::zserio::vector<::nds::core::types::RoadType>& array,
        ::nds::core::types::RoadType::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayerMetadata::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::DisplayLineRulesLayerContent(in);
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayerMetadata::readContent(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::DisplayLineRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata> DisplayLineRulesLayerMetadata::readDisplayLineRangeAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata> DisplayLineRulesLayerMetadata::readDisplayLineRangeAttributeMetadata(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata(context.getDisplayLineRangeAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata> DisplayLineRulesLayerMetadata::readDisplayLinePositionAttributeMetadata(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata> DisplayLineRulesLayerMetadata::readDisplayLinePositionAttributeMetadata(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS || (getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata(context.getDisplayLinePositionAttributeMetadata(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata>(::zserio::NullOpt);
}
DisplayLineRulesLayerMetadata::ZserioArrayType_coveredRoadTypes DisplayLineRulesLayerMetadata::readCoveredRoadTypes(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.read(*this, in);

    return readField;
}

DisplayLineRulesLayerMetadata::ZserioArrayType_coveredRoadTypes DisplayLineRulesLayerMetadata::readCoveredRoadTypes(DisplayLineRulesLayerMetadata::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_coveredRoadTypes readField(allocator);
    readField.readPacked(*this, in);

    return readField;
}
::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> DisplayLineRulesLayerMetadata::readAvailableLanguages(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> DisplayLineRulesLayerMetadata::readAvailableLanguages(DisplayLineRulesLayerMetadata::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::LANGUAGES)
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::nds::core::language::AvailableLanguages(context.getAvailableLanguages(), in, allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages>(::zserio::NullOpt);
}

} // namespace metadata
} // namespace rules
} // namespace nds
