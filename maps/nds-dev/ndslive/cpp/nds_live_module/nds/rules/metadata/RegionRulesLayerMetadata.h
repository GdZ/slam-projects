/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_METADATA_REGION_RULES_LAYER_METADATA_H
#define NDS_RULES_METADATA_REGION_RULES_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/core/types/RoadType.h>
#include <nds/rules/instantiations/RulesRegionAttributeMetadata.h>
#include <nds/rules/metadata/RegionRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

class RegionRulesLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::rules::instantiations::RulesRegionAttributeMetadata::ZserioPackingContext& getRegionAttributeMetadata()
        {
            return m_regionAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::rules::instantiations::RulesRegionAttributeMetadata::ZserioPackingContext m_regionAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegionRulesLayerMetadata() noexcept :
            RegionRulesLayerMetadata(allocator_type())
    {}

    explicit RegionRulesLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_regionAttributeMetadata = ::nds::rules::instantiations::RulesRegionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    RegionRulesLayerMetadata(
            ::nds::rules::metadata::RegionRulesLayerContent content_,
            ZSERIO_T_regionAttributeMetadata&& regionAttributeMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            RegionRulesLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_regionAttributeMetadata_ = ::std::forward<ZSERIO_T_regionAttributeMetadata>(regionAttributeMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit RegionRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RegionRulesLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RegionRulesLayerMetadata() = default;

    RegionRulesLayerMetadata(const RegionRulesLayerMetadata&) = default;
    RegionRulesLayerMetadata& operator=(const RegionRulesLayerMetadata&) = default;

    RegionRulesLayerMetadata(RegionRulesLayerMetadata&&) = default;
    RegionRulesLayerMetadata& operator=(RegionRulesLayerMetadata&&) = default;

    RegionRulesLayerMetadata(::zserio::PropagateAllocatorT,
            const RegionRulesLayerMetadata& other, const allocator_type& allocator);

    ::nds::rules::metadata::RegionRulesLayerContent getContent() const;
    void setContent(::nds::rules::metadata::RegionRulesLayerContent content_);

    const ::nds::rules::instantiations::RulesRegionAttributeMetadata& getRegionAttributeMetadata() const;
    ::nds::rules::instantiations::RulesRegionAttributeMetadata& getRegionAttributeMetadata();
    void setRegionAttributeMetadata(const ::nds::rules::instantiations::RulesRegionAttributeMetadata& regionAttributeMetadata_);
    void setRegionAttributeMetadata(::nds::rules::instantiations::RulesRegionAttributeMetadata&& regionAttributeMetadata_);
    bool isRegionAttributeMetadataUsed() const;
    bool isRegionAttributeMetadataSet() const;
    void resetRegionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegionRulesLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = RegionRulesLayerMetadata;

        static void create(RegionRulesLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionRulesLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::rules::metadata::RegionRulesLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::rules::metadata::RegionRulesLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata> readRegionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata> readRegionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::language::AvailableLanguages readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::rules::metadata::RegionRulesLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMetadata> m_regionAttributeMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
    ::nds::core::language::AvailableLanguages m_availableLanguages_;
};

} // namespace metadata
} // namespace rules
} // namespace nds

#endif // NDS_RULES_METADATA_REGION_RULES_LAYER_METADATA_H
