/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_METADATA_LANE_RULES_LAYER_INDIRECT_METADATA_H
#define NDS_RULES_METADATA_LANE_RULES_LAYER_INDIRECT_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/core/types/LaneType.h>
#include <nds/rules/instantiations/RulesLanePositionAttributeMetadata.h>
#include <nds/rules/instantiations/RulesLaneRangeAttributeMetadata.h>
#include <nds/rules/metadata/LaneRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

class LaneRulesLayerIndirectMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata::ZserioPackingContext& getLaneRangeAttributeMetadata()
        {
            return m_laneRangeAttributeMetadata_;
        }

        ::nds::rules::instantiations::RulesLanePositionAttributeMetadata::ZserioPackingContext& getLanePositionAttributeMetadata()
        {
            return m_lanePositionAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata::ZserioPackingContext m_laneRangeAttributeMetadata_;
        ::nds::rules::instantiations::RulesLanePositionAttributeMetadata::ZserioPackingContext m_lanePositionAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneRulesLayerIndirectMetadata() noexcept :
            LaneRulesLayerIndirectMetadata(allocator_type())
    {}

    explicit LaneRulesLayerIndirectMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneRangeAttributeMetadata = ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata,
            typename ZSERIO_T_lanePositionAttributeMetadata = ::nds::rules::instantiations::RulesLanePositionAttributeMetadata,
            typename ZSERIO_T_coveredLaneTypes = ::zserio::vector<::nds::core::types::LaneType>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    LaneRulesLayerIndirectMetadata(
            ::nds::rules::metadata::LaneRulesLayerContent content_,
            ZSERIO_T_laneRangeAttributeMetadata&& laneRangeAttributeMetadata_,
            ZSERIO_T_lanePositionAttributeMetadata&& lanePositionAttributeMetadata_,
            ZSERIO_T_coveredLaneTypes&& coveredLaneTypes_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            LaneRulesLayerIndirectMetadata(allocator)
    {
        m_content_ = content_;
        m_laneRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_laneRangeAttributeMetadata>(laneRangeAttributeMetadata_);
        m_lanePositionAttributeMetadata_ = ::std::forward<ZSERIO_T_lanePositionAttributeMetadata>(lanePositionAttributeMetadata_);
        m_coveredLaneTypes_ = ZserioArrayType_coveredLaneTypes(::std::forward<ZSERIO_T_coveredLaneTypes>(coveredLaneTypes_));
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit LaneRulesLayerIndirectMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneRulesLayerIndirectMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneRulesLayerIndirectMetadata() = default;

    LaneRulesLayerIndirectMetadata(const LaneRulesLayerIndirectMetadata&) = default;
    LaneRulesLayerIndirectMetadata& operator=(const LaneRulesLayerIndirectMetadata&) = default;

    LaneRulesLayerIndirectMetadata(LaneRulesLayerIndirectMetadata&&) = default;
    LaneRulesLayerIndirectMetadata& operator=(LaneRulesLayerIndirectMetadata&&) = default;

    LaneRulesLayerIndirectMetadata(::zserio::PropagateAllocatorT,
            const LaneRulesLayerIndirectMetadata& other, const allocator_type& allocator);

    ::nds::rules::metadata::LaneRulesLayerContent getContent() const;
    void setContent(::nds::rules::metadata::LaneRulesLayerContent content_);

    const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata() const;
    ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& getLaneRangeAttributeMetadata();
    void setLaneRangeAttributeMetadata(const ::nds::rules::instantiations::RulesLaneRangeAttributeMetadata& laneRangeAttributeMetadata_);
    void setLaneRangeAttributeMetadata(::nds::rules::instantiations::RulesLaneRangeAttributeMetadata&& laneRangeAttributeMetadata_);
    bool isLaneRangeAttributeMetadataUsed() const;
    bool isLaneRangeAttributeMetadataSet() const;
    void resetLaneRangeAttributeMetadata();

    const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& getLanePositionAttributeMetadata() const;
    ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& getLanePositionAttributeMetadata();
    void setLanePositionAttributeMetadata(const ::nds::rules::instantiations::RulesLanePositionAttributeMetadata& lanePositionAttributeMetadata_);
    void setLanePositionAttributeMetadata(::nds::rules::instantiations::RulesLanePositionAttributeMetadata&& lanePositionAttributeMetadata_);
    bool isLanePositionAttributeMetadataUsed() const;
    bool isLanePositionAttributeMetadataSet() const;
    void resetLanePositionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes() const;
    ::zserio::vector<::nds::core::types::LaneType>& getCoveredLaneTypes();
    void setCoveredLaneTypes(const ::zserio::vector<::nds::core::types::LaneType>& coveredLaneTypes_);
    void setCoveredLaneTypes(::zserio::vector<::nds::core::types::LaneType>&& coveredLaneTypes_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);
    bool isAvailableLanguagesUsed() const;
    bool isAvailableLanguagesSet() const;
    void resetAvailableLanguages();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRulesLayerIndirectMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredLaneTypes
    {
    public:
        using OwnerType = LaneRulesLayerIndirectMetadata;

        static void create(LaneRulesLayerIndirectMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneRulesLayerIndirectMetadata& owner,
                ::zserio::vector<::nds::core::types::LaneType>& array,
                ::nds::core::types::LaneType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredLaneTypes = ::zserio::Array<::zserio::vector<::nds::core::types::LaneType>, ::zserio::ObjectArrayTraits<::nds::core::types::LaneType, ZserioElementFactory_coveredLaneTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::rules::metadata::LaneRulesLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::rules::metadata::LaneRulesLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> readLaneRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> readLanePositionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> readLanePositionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredLaneTypes readCoveredLaneTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::rules::metadata::LaneRulesLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMetadata> m_laneRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMetadata> m_lanePositionAttributeMetadata_;
    ZserioArrayType_coveredLaneTypes m_coveredLaneTypes_;
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> m_availableLanguages_;
};

} // namespace metadata
} // namespace rules
} // namespace nds

#endif // NDS_RULES_METADATA_LANE_RULES_LAYER_INDIRECT_METADATA_H
