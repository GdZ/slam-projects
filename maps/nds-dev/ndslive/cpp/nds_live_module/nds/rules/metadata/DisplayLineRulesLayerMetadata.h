/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_METADATA_DISPLAY_LINE_RULES_LAYER_METADATA_H
#define NDS_RULES_METADATA_DISPLAY_LINE_RULES_LAYER_METADATA_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/language/AvailableLanguages.h>
#include <nds/core/types/RoadType.h>
#include <nds/rules/instantiations/RulesDisplayLinePositionAttributeMetadata.h>
#include <nds/rules/instantiations/RulesDisplayLineRangeAttributeMetadata.h>
#include <nds/rules/metadata/DisplayLineRulesLayerContent.h>

namespace nds
{
namespace rules
{
namespace metadata
{

class DisplayLineRulesLayerMetadata
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata::ZserioPackingContext& getDisplayLineRangeAttributeMetadata()
        {
            return m_displayLineRangeAttributeMetadata_;
        }

        ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata::ZserioPackingContext& getDisplayLinePositionAttributeMetadata()
        {
            return m_displayLinePositionAttributeMetadata_;
        }

        ::nds::core::language::AvailableLanguages::ZserioPackingContext& getAvailableLanguages()
        {
            return m_availableLanguages_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata::ZserioPackingContext m_displayLineRangeAttributeMetadata_;
        ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata::ZserioPackingContext m_displayLinePositionAttributeMetadata_;
        ::nds::core::language::AvailableLanguages::ZserioPackingContext m_availableLanguages_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DisplayLineRulesLayerMetadata() noexcept :
            DisplayLineRulesLayerMetadata(allocator_type())
    {}

    explicit DisplayLineRulesLayerMetadata(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_displayLineRangeAttributeMetadata = ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata,
            typename ZSERIO_T_displayLinePositionAttributeMetadata = ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata,
            typename ZSERIO_T_coveredRoadTypes = ::zserio::vector<::nds::core::types::RoadType>,
            typename ZSERIO_T_availableLanguages = ::nds::core::language::AvailableLanguages>
    DisplayLineRulesLayerMetadata(
            ::nds::rules::metadata::DisplayLineRulesLayerContent content_,
            ZSERIO_T_displayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_,
            ZSERIO_T_displayLinePositionAttributeMetadata&& displayLinePositionAttributeMetadata_,
            ZSERIO_T_coveredRoadTypes&& coveredRoadTypes_,
            ZSERIO_T_availableLanguages&& availableLanguages_,
            const allocator_type& allocator = allocator_type()) :
            DisplayLineRulesLayerMetadata(allocator)
    {
        m_content_ = content_;
        m_displayLineRangeAttributeMetadata_ = ::std::forward<ZSERIO_T_displayLineRangeAttributeMetadata>(displayLineRangeAttributeMetadata_);
        m_displayLinePositionAttributeMetadata_ = ::std::forward<ZSERIO_T_displayLinePositionAttributeMetadata>(displayLinePositionAttributeMetadata_);
        m_coveredRoadTypes_ = ZserioArrayType_coveredRoadTypes(::std::forward<ZSERIO_T_coveredRoadTypes>(coveredRoadTypes_));
        m_availableLanguages_ = ::std::forward<ZSERIO_T_availableLanguages>(availableLanguages_);
    }

    explicit DisplayLineRulesLayerMetadata(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DisplayLineRulesLayerMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DisplayLineRulesLayerMetadata() = default;

    DisplayLineRulesLayerMetadata(const DisplayLineRulesLayerMetadata&) = default;
    DisplayLineRulesLayerMetadata& operator=(const DisplayLineRulesLayerMetadata&) = default;

    DisplayLineRulesLayerMetadata(DisplayLineRulesLayerMetadata&&) = default;
    DisplayLineRulesLayerMetadata& operator=(DisplayLineRulesLayerMetadata&&) = default;

    DisplayLineRulesLayerMetadata(::zserio::PropagateAllocatorT,
            const DisplayLineRulesLayerMetadata& other, const allocator_type& allocator);

    ::nds::rules::metadata::DisplayLineRulesLayerContent getContent() const;
    void setContent(::nds::rules::metadata::DisplayLineRulesLayerContent content_);

    const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& getDisplayLineRangeAttributeMetadata() const;
    ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& getDisplayLineRangeAttributeMetadata();
    void setDisplayLineRangeAttributeMetadata(const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata& displayLineRangeAttributeMetadata_);
    void setDisplayLineRangeAttributeMetadata(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata&& displayLineRangeAttributeMetadata_);
    bool isDisplayLineRangeAttributeMetadataUsed() const;
    bool isDisplayLineRangeAttributeMetadataSet() const;
    void resetDisplayLineRangeAttributeMetadata();

    const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& getDisplayLinePositionAttributeMetadata() const;
    ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& getDisplayLinePositionAttributeMetadata();
    void setDisplayLinePositionAttributeMetadata(const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata& displayLinePositionAttributeMetadata_);
    void setDisplayLinePositionAttributeMetadata(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata&& displayLinePositionAttributeMetadata_);
    bool isDisplayLinePositionAttributeMetadataUsed() const;
    bool isDisplayLinePositionAttributeMetadataSet() const;
    void resetDisplayLinePositionAttributeMetadata();

    const ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes() const;
    ::zserio::vector<::nds::core::types::RoadType>& getCoveredRoadTypes();
    void setCoveredRoadTypes(const ::zserio::vector<::nds::core::types::RoadType>& coveredRoadTypes_);
    void setCoveredRoadTypes(::zserio::vector<::nds::core::types::RoadType>&& coveredRoadTypes_);

    const ::nds::core::language::AvailableLanguages& getAvailableLanguages() const;
    ::nds::core::language::AvailableLanguages& getAvailableLanguages();
    void setAvailableLanguages(const ::nds::core::language::AvailableLanguages& availableLanguages_);
    void setAvailableLanguages(::nds::core::language::AvailableLanguages&& availableLanguages_);
    bool isAvailableLanguagesUsed() const;
    bool isAvailableLanguagesSet() const;
    void resetAvailableLanguages();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DisplayLineRulesLayerMetadata& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_coveredRoadTypes
    {
    public:
        using OwnerType = DisplayLineRulesLayerMetadata;

        static void create(DisplayLineRulesLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(DisplayLineRulesLayerMetadata& owner,
                ::zserio::vector<::nds::core::types::RoadType>& array,
                ::nds::core::types::RoadType::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_coveredRoadTypes = ::zserio::Array<::zserio::vector<::nds::core::types::RoadType>, ::zserio::ObjectArrayTraits<::nds::core::types::RoadType, ZserioElementFactory_coveredRoadTypes>, ::zserio::ArrayType::AUTO>;

    ::nds::rules::metadata::DisplayLineRulesLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::rules::metadata::DisplayLineRulesLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata> readDisplayLineRangeAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata> readDisplayLineRangeAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata> readDisplayLinePositionAttributeMetadata(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata> readDisplayLinePositionAttributeMetadata(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_coveredRoadTypes readCoveredRoadTypes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> readAvailableLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> readAvailableLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::rules::metadata::DisplayLineRulesLayerContent m_content_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMetadata> m_displayLineRangeAttributeMetadata_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMetadata> m_displayLinePositionAttributeMetadata_;
    ZserioArrayType_coveredRoadTypes m_coveredRoadTypes_;
    ::zserio::InplaceOptionalHolder<::nds::core::language::AvailableLanguages> m_availableLanguages_;
};

} // namespace metadata
} // namespace rules
} // namespace nds

#endif // NDS_RULES_METADATA_DISPLAY_LINE_RULES_LAYER_METADATA_H
