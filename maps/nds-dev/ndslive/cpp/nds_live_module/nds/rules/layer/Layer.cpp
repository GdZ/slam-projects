/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/RegionRulesLayerRoads.h>
#include <nds/rules/metadata/RegionRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

RegionRulesLayerRoads::RegionRulesLayerRoads(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_numRegions_(uint16_t()),
        m_regionId_(allocator),
        m_content_(::nds::rules::metadata::RegionRulesLayerContent()),
        m_regionRulesAttributeMaps_(::zserio::NullOpt),
        m_regionRulesAttributeSets_(::zserio::NullOpt),
        m_hasFeatureRelations_(::zserio::NullOpt),
        m_featureRelations_(::zserio::NullOpt)
{
}

RegionRulesLayerRoads::RegionRulesLayerRoads(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRegions_(readNumRegions(in)),
        m_regionId_(readRegionId(in, allocator)),
        m_content_(readContent(in)),
        m_regionRulesAttributeMaps_(readRegionRulesAttributeMaps(in, allocator)),
        m_regionRulesAttributeSets_(readRegionRulesAttributeSets(in, allocator)),
        m_hasFeatureRelations_(readHasFeatureRelations(in)),
        m_featureRelations_(readFeatureRelations(in, allocator))
{
}

RegionRulesLayerRoads::RegionRulesLayerRoads(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRegions_(readNumRegions(context, in)),
        m_regionId_(readRegionId(context, in, allocator)),
        m_content_(readContent(context, in)),
        m_regionRulesAttributeMaps_(readRegionRulesAttributeMaps(context, in, allocator)),
        m_regionRulesAttributeSets_(readRegionRulesAttributeSets(context, in, allocator)),
        m_hasFeatureRelations_(readHasFeatureRelations(in)),
        m_featureRelations_(readFeatureRelations(context, in, allocator))
{
}

RegionRulesLayerRoads::RegionRulesLayerRoads(const RegionRulesLayerRoads& other) :
        m_numRegions_(other.m_numRegions_),
        m_regionId_(other.m_regionId_),
        m_content_(other.m_content_),
        m_regionRulesAttributeMaps_(other.m_regionRulesAttributeMaps_),
        m_regionRulesAttributeSets_(other.m_regionRulesAttributeSets_),
        m_hasFeatureRelations_(other.m_hasFeatureRelations_),
        m_featureRelations_(other.m_featureRelations_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRulesLayerRoads& RegionRulesLayerRoads::operator=(const RegionRulesLayerRoads& other)
{
    m_numRegions_ = other.m_numRegions_;
    m_regionId_ = other.m_regionId_;
    m_content_ = other.m_content_;
    m_regionRulesAttributeMaps_ = other.m_regionRulesAttributeMaps_;
    m_regionRulesAttributeSets_ = other.m_regionRulesAttributeSets_;
    m_hasFeatureRelations_ = other.m_hasFeatureRelations_;
    m_featureRelations_ = other.m_featureRelations_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRulesLayerRoads::RegionRulesLayerRoads(RegionRulesLayerRoads&& other) :
        m_numRegions_(::std::move(other.m_numRegions_)),
        m_regionId_(::std::move(other.m_regionId_)),
        m_content_(::std::move(other.m_content_)),
        m_regionRulesAttributeMaps_(::std::move(other.m_regionRulesAttributeMaps_)),
        m_regionRulesAttributeSets_(::std::move(other.m_regionRulesAttributeSets_)),
        m_hasFeatureRelations_(::std::move(other.m_hasFeatureRelations_)),
        m_featureRelations_(::std::move(other.m_featureRelations_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRulesLayerRoads& RegionRulesLayerRoads::operator=(RegionRulesLayerRoads&& other)
{
    m_numRegions_ = ::std::move(other.m_numRegions_);
    m_regionId_ = ::std::move(other.m_regionId_);
    m_content_ = ::std::move(other.m_content_);
    m_regionRulesAttributeMaps_ = ::std::move(other.m_regionRulesAttributeMaps_);
    m_regionRulesAttributeSets_ = ::std::move(other.m_regionRulesAttributeSets_);
    m_hasFeatureRelations_ = ::std::move(other.m_hasFeatureRelations_);
    m_featureRelations_ = ::std::move(other.m_featureRelations_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRulesLayerRoads::RegionRulesLayerRoads(::zserio::PropagateAllocatorT,
        const RegionRulesLayerRoads& other, const allocator_type& allocator) :
        m_numRegions_(::zserio::allocatorPropagatingCopy(other.m_numRegions_, allocator)),
        m_regionId_(::zserio::allocatorPropagatingCopy(other.m_regionId_, allocator)),
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_regionRulesAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_regionRulesAttributeMaps_, allocator)),
        m_regionRulesAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_regionRulesAttributeSets_, allocator)),
        m_hasFeatureRelations_(::zserio::allocatorPropagatingCopy(other.m_hasFeatureRelations_, allocator)),
        m_featureRelations_(::zserio::allocatorPropagatingCopy(other.m_featureRelations_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RegionRulesLayerRoads::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
        m_regionRulesAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
        m_regionRulesAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if (getNumRegions() > 1 && getHasFeatureRelations())
        m_featureRelations_.value().initializeElements(*this);

    m_areChildrenInitialized = true;
}

uint16_t RegionRulesLayerRoads::getNumRegions() const
{
    return m_numRegions_;
}

void RegionRulesLayerRoads::setNumRegions(uint16_t numRegions_)
{
    m_numRegions_ = numRegions_;
}

::zserio::vector<::nds::core::types::RegionId>& RegionRulesLayerRoads::getRegionId()
{
    return m_regionId_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RegionId>& RegionRulesLayerRoads::getRegionId() const
{
    return m_regionId_.getRawArray();
}

void RegionRulesLayerRoads::setRegionId(const ::zserio::vector<::nds::core::types::RegionId>& regionId_)
{
    m_regionId_ = ZserioArrayType_regionId(regionId_);
}

void RegionRulesLayerRoads::setRegionId(::zserio::vector<::nds::core::types::RegionId>&& regionId_)
{
    m_regionId_ = ZserioArrayType_regionId(std::move(regionId_));
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerRoads::getContent() const
{
    return m_content_;
}

void RegionRulesLayerRoads::setContent(::nds::rules::metadata::RegionRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRegionAttributeMapList& RegionRulesLayerRoads::getRegionRulesAttributeMaps()
{
    return m_regionRulesAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRegionAttributeMapList& RegionRulesLayerRoads::getRegionRulesAttributeMaps() const
{
    return m_regionRulesAttributeMaps_.value();
}

void RegionRulesLayerRoads::setRegionRulesAttributeMaps(const ::nds::rules::instantiations::RulesRegionAttributeMapList& regionRulesAttributeMaps_)
{
    m_regionRulesAttributeMaps_ = regionRulesAttributeMaps_;
}

void RegionRulesLayerRoads::setRegionRulesAttributeMaps(::nds::rules::instantiations::RulesRegionAttributeMapList&& regionRulesAttributeMaps_)
{
    m_regionRulesAttributeMaps_ = ::std::move(regionRulesAttributeMaps_);
}

bool RegionRulesLayerRoads::isRegionRulesAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS);
}

bool RegionRulesLayerRoads::isRegionRulesAttributeMapsSet() const
{
    return m_regionRulesAttributeMaps_.hasValue();
}

void RegionRulesLayerRoads::resetRegionRulesAttributeMaps()
{
    m_regionRulesAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRegionAttributeSetList& RegionRulesLayerRoads::getRegionRulesAttributeSets()
{
    return m_regionRulesAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRegionAttributeSetList& RegionRulesLayerRoads::getRegionRulesAttributeSets() const
{
    return m_regionRulesAttributeSets_.value();
}

void RegionRulesLayerRoads::setRegionRulesAttributeSets(const ::nds::rules::instantiations::RulesRegionAttributeSetList& regionRulesAttributeSets_)
{
    m_regionRulesAttributeSets_ = regionRulesAttributeSets_;
}

void RegionRulesLayerRoads::setRegionRulesAttributeSets(::nds::rules::instantiations::RulesRegionAttributeSetList&& regionRulesAttributeSets_)
{
    m_regionRulesAttributeSets_ = ::std::move(regionRulesAttributeSets_);
}

bool RegionRulesLayerRoads::isRegionRulesAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS);
}

bool RegionRulesLayerRoads::isRegionRulesAttributeSetsSet() const
{
    return m_regionRulesAttributeSets_.hasValue();
}

void RegionRulesLayerRoads::resetRegionRulesAttributeSets()
{
    m_regionRulesAttributeSets_.reset();
}

bool RegionRulesLayerRoads::getHasFeatureRelations() const
{
    return m_hasFeatureRelations_.value();
}

void RegionRulesLayerRoads::setHasFeatureRelations(bool hasFeatureRelations_)
{
    m_hasFeatureRelations_ = hasFeatureRelations_;
}

bool RegionRulesLayerRoads::isHasFeatureRelationsUsed() const
{
    return (getNumRegions() > 1);
}

bool RegionRulesLayerRoads::isHasFeatureRelationsSet() const
{
    return m_hasFeatureRelations_.hasValue();
}

void RegionRulesLayerRoads::resetHasFeatureRelations()
{
    m_hasFeatureRelations_.reset();
}

::zserio::vector<::nds::rules::layer::RegionRoadRelationList>& RegionRulesLayerRoads::getFeatureRelations()
{
    return m_featureRelations_.value().getRawArray();
}

const ::zserio::vector<::nds::rules::layer::RegionRoadRelationList>& RegionRulesLayerRoads::getFeatureRelations() const
{
    return m_featureRelations_.value().getRawArray();
}

void RegionRulesLayerRoads::setFeatureRelations(const ::zserio::vector<::nds::rules::layer::RegionRoadRelationList>& featureRelations_)
{
    m_featureRelations_ = ZserioArrayType_featureRelations(featureRelations_);
}

void RegionRulesLayerRoads::setFeatureRelations(::zserio::vector<::nds::rules::layer::RegionRoadRelationList>&& featureRelations_)
{
    m_featureRelations_ = ZserioArrayType_featureRelations(std::move(featureRelations_));
}

bool RegionRulesLayerRoads::isFeatureRelationsUsed() const
{
    return (getNumRegions() > 1 && getHasFeatureRelations());
}

bool RegionRulesLayerRoads::isFeatureRelationsSet() const
{
    return m_featureRelations_.hasValue();
}

void RegionRulesLayerRoads::resetFeatureRelations()
{
    m_featureRelations_.reset();
}

::nds::system::types::LayerType RegionRulesLayerRoads::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RegionRulesLayerRoads::initPackingContext(RegionRulesLayerRoads::ZserioPackingContext& context) const
{
    context.getNumRegions().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        m_regionRulesAttributeMaps_.value().initPackingContext(context.getRegionRulesAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        m_regionRulesAttributeSets_.value().initPackingContext(context.getRegionRulesAttributeSets());
    }
}

size_t RegionRulesLayerRoads::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_numRegions_);
    endBitPosition += m_regionId_.bitSizeOf(endBitPosition);
    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition += m_regionRulesAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionRulesAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition += m_featureRelations_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerRoads::bitSizeOf(RegionRulesLayerRoads::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRegions().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    endBitPosition += m_regionId_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition += m_regionRulesAttributeMaps_.value().bitSizeOf(context.getRegionRulesAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionRulesAttributeSets_.value().bitSizeOf(context.getRegionRulesAttributeSets(), endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition += m_featureRelations_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerRoads::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_numRegions_);
    endBitPosition = m_regionId_.initializeOffsets(endBitPosition);
    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition = m_regionRulesAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionRulesAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition = m_featureRelations_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t RegionRulesLayerRoads::initializeOffsets(RegionRulesLayerRoads::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRegions().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    endBitPosition = m_regionId_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition = m_regionRulesAttributeMaps_.value().initializeOffsets(context.getRegionRulesAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionRulesAttributeSets_.value().initializeOffsets(context.getRegionRulesAttributeSets(), endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition = m_featureRelations_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool RegionRulesLayerRoads::operator==(const RegionRulesLayerRoads& other) const
{
    if (this != &other)
    {
        return
                (m_numRegions_ == other.m_numRegions_) &&
                (m_regionId_ == other.m_regionId_) &&
                (m_content_ == other.m_content_) &&
                (!isRegionRulesAttributeMapsUsed() ? !other.isRegionRulesAttributeMapsUsed() : (m_regionRulesAttributeMaps_ == other.m_regionRulesAttributeMaps_)) &&
                (!isRegionRulesAttributeSetsUsed() ? !other.isRegionRulesAttributeSetsUsed() : (m_regionRulesAttributeSets_ == other.m_regionRulesAttributeSets_)) &&
                (!isHasFeatureRelationsUsed() ? !other.isHasFeatureRelationsUsed() : (m_hasFeatureRelations_ == other.m_hasFeatureRelations_)) &&
                (!isFeatureRelationsUsed() ? !other.isFeatureRelationsUsed() : (m_featureRelations_ == other.m_featureRelations_));
    }

    return true;
}

uint32_t RegionRulesLayerRoads::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numRegions_);
    result = ::zserio::calcHashCode(result, m_regionId_);
    result = ::zserio::calcHashCode(result, m_content_);
    if (isRegionRulesAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_regionRulesAttributeMaps_);
    if (isRegionRulesAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_regionRulesAttributeSets_);
    if (isHasFeatureRelationsUsed())
        result = ::zserio::calcHashCode(result, m_hasFeatureRelations_);
    if (isFeatureRelationsUsed())
        result = ::zserio::calcHashCode(result, m_featureRelations_);

    return result;
}

void RegionRulesLayerRoads::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getNumRegions() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at RegionRulesLayerRoads.numRegions!");
    out.writeVarUInt16(m_numRegions_);

    // check array length
    if (m_regionId_.getRawArray().size() != static_cast<size_t>(getNumRegions()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerRoads.regionId: ") <<
                m_regionId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRegions()) << "!";
    }
    m_regionId_.write(out);

    m_content_.write(out);

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        // check parameters
        if (m_regionRulesAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerRoads.regionRulesAttributeMaps: ") <<
                    m_regionRulesAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        // check parameters
        if (m_regionRulesAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerRoads.regionRulesAttributeSets: ") <<
                    m_regionRulesAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeSets_.value().write(out);
    }

    if (getNumRegions() > 1)
    {
        out.writeBool(m_hasFeatureRelations_.value());
    }

    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        // check array length
        if (m_featureRelations_.value().getRawArray().size() != static_cast<size_t>(getNumRegions()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerRoads.featureRelations: ") <<
                    m_featureRelations_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumRegions()) << "!";
        }
        m_featureRelations_.value().write(*this, out);
    }
}

void RegionRulesLayerRoads::write(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getNumRegions() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at RegionRulesLayerRoads.numRegions!");
    context.getNumRegions().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_numRegions_);

    // check array length
    if (m_regionId_.getRawArray().size() != static_cast<size_t>(getNumRegions()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerRoads.regionId: ") <<
                m_regionId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRegions()) << "!";
    }
    m_regionId_.writePacked(out);

    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        // check parameters
        if (m_regionRulesAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerRoads.regionRulesAttributeMaps: ") <<
                    m_regionRulesAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeMaps_.value().write(context.getRegionRulesAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        // check parameters
        if (m_regionRulesAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerRoads.regionRulesAttributeSets: ") <<
                    m_regionRulesAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeSets_.value().write(context.getRegionRulesAttributeSets(), out);
    }

    if (getNumRegions() > 1)
    {
        out.writeBool(m_hasFeatureRelations_.value());
    }

    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        // check array length
        if (m_featureRelations_.value().getRawArray().size() != static_cast<size_t>(getNumRegions()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerRoads.featureRelations: ") <<
                    m_featureRelations_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumRegions()) << "!";
        }
        m_featureRelations_.value().writePacked(*this, out);
    }
}

void RegionRulesLayerRoads::ZserioArrayExpressions_featureRelations::initializeElement(RegionRulesLayerRoads&,
        ::nds::rules::layer::RegionRoadRelationList& element, size_t)
{
    element.initializeChildren();
}

void RegionRulesLayerRoads::ZserioElementFactory_featureRelations::create(RegionRulesLayerRoads&        ,
        ::zserio::vector<::nds::rules::layer::RegionRoadRelationList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RegionRulesLayerRoads::ZserioElementFactory_featureRelations::create(RegionRulesLayerRoads&        ,
        ::zserio::vector<::nds::rules::layer::RegionRoadRelationList>& array,
        ::nds::rules::layer::RegionRoadRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint16_t RegionRulesLayerRoads::readNumRegions(::zserio::BitStreamReader& in)
{
    uint16_t readField = static_cast<uint16_t>(in.readVarUInt16());
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at RegionRulesLayerRoads.numRegions!");

    return readField;
}

uint16_t RegionRulesLayerRoads::readNumRegions(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint16_t readField = context.getNumRegions().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in);
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at RegionRulesLayerRoads.numRegions!");

    return readField;
}
RegionRulesLayerRoads::ZserioArrayType_regionId RegionRulesLayerRoads::readRegionId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_regionId readField(allocator);
    readField.read(in, static_cast<size_t>(getNumRegions()));

    return readField;
}

RegionRulesLayerRoads::ZserioArrayType_regionId RegionRulesLayerRoads::readRegionId(RegionRulesLayerRoads::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_regionId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumRegions()));

    return readField;
}
::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerRoads::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(in);
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerRoads::readContent(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList> RegionRulesLayerRoads::readRegionRulesAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::nds::rules::instantiations::RulesRegionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList> RegionRulesLayerRoads::readRegionRulesAttributeMaps(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::nds::rules::instantiations::RulesRegionAttributeMapList(context.getRegionRulesAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList> RegionRulesLayerRoads::readRegionRulesAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::nds::rules::instantiations::RulesRegionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList> RegionRulesLayerRoads::readRegionRulesAttributeSets(RegionRulesLayerRoads::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::nds::rules::instantiations::RulesRegionAttributeSetList(context.getRegionRulesAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<bool> RegionRulesLayerRoads::readHasFeatureRelations(::zserio::BitStreamReader& in)
{
    if (getNumRegions() > 1)
    {
        return ::zserio::InplaceOptionalHolder<bool>(static_cast<bool>(in.readBool()));
    }

    return ::zserio::InplaceOptionalHolder<bool>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<RegionRulesLayerRoads::ZserioArrayType_featureRelations> RegionRulesLayerRoads::readFeatureRelations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        ZserioArrayType_featureRelations readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getNumRegions()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<RegionRulesLayerRoads::ZserioArrayType_featureRelations> RegionRulesLayerRoads::readFeatureRelations(RegionRulesLayerRoads::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        ZserioArrayType_featureRelations readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumRegions()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ConstraintException.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/RegionRulesLayerLanes.h>
#include <nds/rules/metadata/RegionRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

RegionRulesLayerLanes::RegionRulesLayerLanes(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_numRegions_(uint16_t()),
        m_regionId_(allocator),
        m_content_(::nds::rules::metadata::RegionRulesLayerContent()),
        m_regionRulesAttributeMaps_(::zserio::NullOpt),
        m_regionRulesAttributeSets_(::zserio::NullOpt),
        m_hasFeatureRelations_(::zserio::NullOpt),
        m_featureRelations_(::zserio::NullOpt)
{
}

RegionRulesLayerLanes::RegionRulesLayerLanes(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRegions_(readNumRegions(in)),
        m_regionId_(readRegionId(in, allocator)),
        m_content_(readContent(in)),
        m_regionRulesAttributeMaps_(readRegionRulesAttributeMaps(in, allocator)),
        m_regionRulesAttributeSets_(readRegionRulesAttributeSets(in, allocator)),
        m_hasFeatureRelations_(readHasFeatureRelations(in)),
        m_featureRelations_(readFeatureRelations(in, allocator))
{
}

RegionRulesLayerLanes::RegionRulesLayerLanes(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRegions_(readNumRegions(context, in)),
        m_regionId_(readRegionId(context, in, allocator)),
        m_content_(readContent(context, in)),
        m_regionRulesAttributeMaps_(readRegionRulesAttributeMaps(context, in, allocator)),
        m_regionRulesAttributeSets_(readRegionRulesAttributeSets(context, in, allocator)),
        m_hasFeatureRelations_(readHasFeatureRelations(in)),
        m_featureRelations_(readFeatureRelations(context, in, allocator))
{
}

RegionRulesLayerLanes::RegionRulesLayerLanes(const RegionRulesLayerLanes& other) :
        m_numRegions_(other.m_numRegions_),
        m_regionId_(other.m_regionId_),
        m_content_(other.m_content_),
        m_regionRulesAttributeMaps_(other.m_regionRulesAttributeMaps_),
        m_regionRulesAttributeSets_(other.m_regionRulesAttributeSets_),
        m_hasFeatureRelations_(other.m_hasFeatureRelations_),
        m_featureRelations_(other.m_featureRelations_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRulesLayerLanes& RegionRulesLayerLanes::operator=(const RegionRulesLayerLanes& other)
{
    m_numRegions_ = other.m_numRegions_;
    m_regionId_ = other.m_regionId_;
    m_content_ = other.m_content_;
    m_regionRulesAttributeMaps_ = other.m_regionRulesAttributeMaps_;
    m_regionRulesAttributeSets_ = other.m_regionRulesAttributeSets_;
    m_hasFeatureRelations_ = other.m_hasFeatureRelations_;
    m_featureRelations_ = other.m_featureRelations_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRulesLayerLanes::RegionRulesLayerLanes(RegionRulesLayerLanes&& other) :
        m_numRegions_(::std::move(other.m_numRegions_)),
        m_regionId_(::std::move(other.m_regionId_)),
        m_content_(::std::move(other.m_content_)),
        m_regionRulesAttributeMaps_(::std::move(other.m_regionRulesAttributeMaps_)),
        m_regionRulesAttributeSets_(::std::move(other.m_regionRulesAttributeSets_)),
        m_hasFeatureRelations_(::std::move(other.m_hasFeatureRelations_)),
        m_featureRelations_(::std::move(other.m_featureRelations_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRulesLayerLanes& RegionRulesLayerLanes::operator=(RegionRulesLayerLanes&& other)
{
    m_numRegions_ = ::std::move(other.m_numRegions_);
    m_regionId_ = ::std::move(other.m_regionId_);
    m_content_ = ::std::move(other.m_content_);
    m_regionRulesAttributeMaps_ = ::std::move(other.m_regionRulesAttributeMaps_);
    m_regionRulesAttributeSets_ = ::std::move(other.m_regionRulesAttributeSets_);
    m_hasFeatureRelations_ = ::std::move(other.m_hasFeatureRelations_);
    m_featureRelations_ = ::std::move(other.m_featureRelations_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRulesLayerLanes::RegionRulesLayerLanes(::zserio::PropagateAllocatorT,
        const RegionRulesLayerLanes& other, const allocator_type& allocator) :
        m_numRegions_(::zserio::allocatorPropagatingCopy(other.m_numRegions_, allocator)),
        m_regionId_(::zserio::allocatorPropagatingCopy(other.m_regionId_, allocator)),
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_regionRulesAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_regionRulesAttributeMaps_, allocator)),
        m_regionRulesAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_regionRulesAttributeSets_, allocator)),
        m_hasFeatureRelations_(::zserio::allocatorPropagatingCopy(other.m_hasFeatureRelations_, allocator)),
        m_featureRelations_(::zserio::allocatorPropagatingCopy(other.m_featureRelations_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RegionRulesLayerLanes::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
        m_regionRulesAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
        m_regionRulesAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if (getNumRegions() > 1 && getHasFeatureRelations())
        m_featureRelations_.value().initializeElements(*this);

    m_areChildrenInitialized = true;
}

uint16_t RegionRulesLayerLanes::getNumRegions() const
{
    return m_numRegions_;
}

void RegionRulesLayerLanes::setNumRegions(uint16_t numRegions_)
{
    m_numRegions_ = numRegions_;
}

::zserio::vector<::nds::core::types::RegionId>& RegionRulesLayerLanes::getRegionId()
{
    return m_regionId_.getRawArray();
}

const ::zserio::vector<::nds::core::types::RegionId>& RegionRulesLayerLanes::getRegionId() const
{
    return m_regionId_.getRawArray();
}

void RegionRulesLayerLanes::setRegionId(const ::zserio::vector<::nds::core::types::RegionId>& regionId_)
{
    m_regionId_ = ZserioArrayType_regionId(regionId_);
}

void RegionRulesLayerLanes::setRegionId(::zserio::vector<::nds::core::types::RegionId>&& regionId_)
{
    m_regionId_ = ZserioArrayType_regionId(std::move(regionId_));
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerLanes::getContent() const
{
    return m_content_;
}

void RegionRulesLayerLanes::setContent(::nds::rules::metadata::RegionRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesRegionAttributeMapList& RegionRulesLayerLanes::getRegionRulesAttributeMaps()
{
    return m_regionRulesAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRegionAttributeMapList& RegionRulesLayerLanes::getRegionRulesAttributeMaps() const
{
    return m_regionRulesAttributeMaps_.value();
}

void RegionRulesLayerLanes::setRegionRulesAttributeMaps(const ::nds::rules::instantiations::RulesRegionAttributeMapList& regionRulesAttributeMaps_)
{
    m_regionRulesAttributeMaps_ = regionRulesAttributeMaps_;
}

void RegionRulesLayerLanes::setRegionRulesAttributeMaps(::nds::rules::instantiations::RulesRegionAttributeMapList&& regionRulesAttributeMaps_)
{
    m_regionRulesAttributeMaps_ = ::std::move(regionRulesAttributeMaps_);
}

bool RegionRulesLayerLanes::isRegionRulesAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS);
}

bool RegionRulesLayerLanes::isRegionRulesAttributeMapsSet() const
{
    return m_regionRulesAttributeMaps_.hasValue();
}

void RegionRulesLayerLanes::resetRegionRulesAttributeMaps()
{
    m_regionRulesAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRegionAttributeSetList& RegionRulesLayerLanes::getRegionRulesAttributeSets()
{
    return m_regionRulesAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRegionAttributeSetList& RegionRulesLayerLanes::getRegionRulesAttributeSets() const
{
    return m_regionRulesAttributeSets_.value();
}

void RegionRulesLayerLanes::setRegionRulesAttributeSets(const ::nds::rules::instantiations::RulesRegionAttributeSetList& regionRulesAttributeSets_)
{
    m_regionRulesAttributeSets_ = regionRulesAttributeSets_;
}

void RegionRulesLayerLanes::setRegionRulesAttributeSets(::nds::rules::instantiations::RulesRegionAttributeSetList&& regionRulesAttributeSets_)
{
    m_regionRulesAttributeSets_ = ::std::move(regionRulesAttributeSets_);
}

bool RegionRulesLayerLanes::isRegionRulesAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS);
}

bool RegionRulesLayerLanes::isRegionRulesAttributeSetsSet() const
{
    return m_regionRulesAttributeSets_.hasValue();
}

void RegionRulesLayerLanes::resetRegionRulesAttributeSets()
{
    m_regionRulesAttributeSets_.reset();
}

bool RegionRulesLayerLanes::getHasFeatureRelations() const
{
    return m_hasFeatureRelations_.value();
}

void RegionRulesLayerLanes::setHasFeatureRelations(bool hasFeatureRelations_)
{
    m_hasFeatureRelations_ = hasFeatureRelations_;
}

bool RegionRulesLayerLanes::isHasFeatureRelationsUsed() const
{
    return (getNumRegions() > 1);
}

bool RegionRulesLayerLanes::isHasFeatureRelationsSet() const
{
    return m_hasFeatureRelations_.hasValue();
}

void RegionRulesLayerLanes::resetHasFeatureRelations()
{
    m_hasFeatureRelations_.reset();
}

::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>& RegionRulesLayerLanes::getFeatureRelations()
{
    return m_featureRelations_.value().getRawArray();
}

const ::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>& RegionRulesLayerLanes::getFeatureRelations() const
{
    return m_featureRelations_.value().getRawArray();
}

void RegionRulesLayerLanes::setFeatureRelations(const ::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>& featureRelations_)
{
    m_featureRelations_ = ZserioArrayType_featureRelations(featureRelations_);
}

void RegionRulesLayerLanes::setFeatureRelations(::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>&& featureRelations_)
{
    m_featureRelations_ = ZserioArrayType_featureRelations(std::move(featureRelations_));
}

bool RegionRulesLayerLanes::isFeatureRelationsUsed() const
{
    return (getNumRegions() > 1 && getHasFeatureRelations());
}

bool RegionRulesLayerLanes::isFeatureRelationsSet() const
{
    return m_featureRelations_.hasValue();
}

void RegionRulesLayerLanes::resetFeatureRelations()
{
    m_featureRelations_.reset();
}

::nds::system::types::LayerType RegionRulesLayerLanes::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RegionRulesLayerLanes::initPackingContext(RegionRulesLayerLanes::ZserioPackingContext& context) const
{
    context.getNumRegions().init<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        m_regionRulesAttributeMaps_.value().initPackingContext(context.getRegionRulesAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        m_regionRulesAttributeSets_.value().initPackingContext(context.getRegionRulesAttributeSets());
    }
}

size_t RegionRulesLayerLanes::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_numRegions_);
    endBitPosition += m_regionId_.bitSizeOf(endBitPosition);
    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition += m_regionRulesAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionRulesAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition += m_featureRelations_.value().bitSizeOf(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerLanes::bitSizeOf(RegionRulesLayerLanes::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRegions().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    endBitPosition += m_regionId_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition += m_regionRulesAttributeMaps_.value().bitSizeOf(context.getRegionRulesAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition += m_regionRulesAttributeSets_.value().bitSizeOf(context.getRegionRulesAttributeSets(), endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition += m_featureRelations_.value().bitSizeOfPacked(*this, endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RegionRulesLayerLanes::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_numRegions_);
    endBitPosition = m_regionId_.initializeOffsets(endBitPosition);
    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition = m_regionRulesAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionRulesAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition = m_featureRelations_.value().initializeOffsets(*this, endBitPosition);
    }

    return endBitPosition;
}

size_t RegionRulesLayerLanes::initializeOffsets(RegionRulesLayerLanes::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRegions().bitSizeOf<::zserio::VarIntNNArrayTraits<uint16_t>>(m_numRegions_);
    endBitPosition = m_regionId_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        endBitPosition = m_regionRulesAttributeMaps_.value().initializeOffsets(context.getRegionRulesAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        endBitPosition = m_regionRulesAttributeSets_.value().initializeOffsets(context.getRegionRulesAttributeSets(), endBitPosition);
    }
    if (getNumRegions() > 1)
    {
        endBitPosition += UINT8_C(1);
    }
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        endBitPosition = m_featureRelations_.value().initializeOffsetsPacked(*this, endBitPosition);
    }

    return endBitPosition;
}

bool RegionRulesLayerLanes::operator==(const RegionRulesLayerLanes& other) const
{
    if (this != &other)
    {
        return
                (m_numRegions_ == other.m_numRegions_) &&
                (m_regionId_ == other.m_regionId_) &&
                (m_content_ == other.m_content_) &&
                (!isRegionRulesAttributeMapsUsed() ? !other.isRegionRulesAttributeMapsUsed() : (m_regionRulesAttributeMaps_ == other.m_regionRulesAttributeMaps_)) &&
                (!isRegionRulesAttributeSetsUsed() ? !other.isRegionRulesAttributeSetsUsed() : (m_regionRulesAttributeSets_ == other.m_regionRulesAttributeSets_)) &&
                (!isHasFeatureRelationsUsed() ? !other.isHasFeatureRelationsUsed() : (m_hasFeatureRelations_ == other.m_hasFeatureRelations_)) &&
                (!isFeatureRelationsUsed() ? !other.isFeatureRelationsUsed() : (m_featureRelations_ == other.m_featureRelations_));
    }

    return true;
}

uint32_t RegionRulesLayerLanes::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numRegions_);
    result = ::zserio::calcHashCode(result, m_regionId_);
    result = ::zserio::calcHashCode(result, m_content_);
    if (isRegionRulesAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_regionRulesAttributeMaps_);
    if (isRegionRulesAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_regionRulesAttributeSets_);
    if (isHasFeatureRelationsUsed())
        result = ::zserio::calcHashCode(result, m_hasFeatureRelations_);
    if (isFeatureRelationsUsed())
        result = ::zserio::calcHashCode(result, m_featureRelations_);

    return result;
}

void RegionRulesLayerLanes::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getNumRegions() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at RegionRulesLayerLanes.numRegions!");
    out.writeVarUInt16(m_numRegions_);

    // check array length
    if (m_regionId_.getRawArray().size() != static_cast<size_t>(getNumRegions()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerLanes.regionId: ") <<
                m_regionId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRegions()) << "!";
    }
    m_regionId_.write(out);

    m_content_.write(out);

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        // check parameters
        if (m_regionRulesAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeMaps: ") <<
                    m_regionRulesAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        // check parameters
        if (m_regionRulesAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeSets: ") <<
                    m_regionRulesAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeSets_.value().write(out);
    }

    if (getNumRegions() > 1)
    {
        out.writeBool(m_hasFeatureRelations_.value());
    }

    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        // check array length
        if (m_featureRelations_.value().getRawArray().size() != static_cast<size_t>(getNumRegions()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerLanes.featureRelations: ") <<
                    m_featureRelations_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumRegions()) << "!";
        }
        m_featureRelations_.value().write(*this, out);
    }
}

void RegionRulesLayerLanes::write(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getNumRegions() > 0))
        throw ::zserio::ConstraintException("Write: Constraint violated at RegionRulesLayerLanes.numRegions!");
    context.getNumRegions().write<::zserio::VarIntNNArrayTraits<uint16_t>>(out, m_numRegions_);

    // check array length
    if (m_regionId_.getRawArray().size() != static_cast<size_t>(getNumRegions()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerLanes.regionId: ") <<
                m_regionId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRegions()) << "!";
    }
    m_regionId_.writePacked(out);

    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        // check parameters
        if (m_regionRulesAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeMaps: ") <<
                    m_regionRulesAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeMaps_.value().write(context.getRegionRulesAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        // check parameters
        if (m_regionRulesAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RegionRulesLayerLanes.regionRulesAttributeSets: ") <<
                    m_regionRulesAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_regionRulesAttributeSets_.value().write(context.getRegionRulesAttributeSets(), out);
    }

    if (getNumRegions() > 1)
    {
        out.writeBool(m_hasFeatureRelations_.value());
    }

    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        // check array length
        if (m_featureRelations_.value().getRawArray().size() != static_cast<size_t>(getNumRegions()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRulesLayerLanes.featureRelations: ") <<
                    m_featureRelations_.value().getRawArray().size() << " != " <<
                    static_cast<size_t>(getNumRegions()) << "!";
        }
        m_featureRelations_.value().writePacked(*this, out);
    }
}

void RegionRulesLayerLanes::ZserioArrayExpressions_featureRelations::initializeElement(RegionRulesLayerLanes&,
        ::nds::rules::layer::RegionLaneGroupRelationList& element, size_t)
{
    element.initializeChildren();
}

void RegionRulesLayerLanes::ZserioElementFactory_featureRelations::create(RegionRulesLayerLanes&        ,
        ::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RegionRulesLayerLanes::ZserioElementFactory_featureRelations::create(RegionRulesLayerLanes&        ,
        ::zserio::vector<::nds::rules::layer::RegionLaneGroupRelationList>& array,
        ::nds::rules::layer::RegionLaneGroupRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

uint16_t RegionRulesLayerLanes::readNumRegions(::zserio::BitStreamReader& in)
{
    uint16_t readField = static_cast<uint16_t>(in.readVarUInt16());
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at RegionRulesLayerLanes.numRegions!");

    return readField;
}

uint16_t RegionRulesLayerLanes::readNumRegions(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint16_t readField = context.getNumRegions().read<::zserio::VarIntNNArrayTraits<uint16_t>>(in);
    // check constraint
    if (!(readField > 0))
        throw ::zserio::ConstraintException("Read: Constraint violated at RegionRulesLayerLanes.numRegions!");

    return readField;
}
RegionRulesLayerLanes::ZserioArrayType_regionId RegionRulesLayerLanes::readRegionId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_regionId readField(allocator);
    readField.read(in, static_cast<size_t>(getNumRegions()));

    return readField;
}

RegionRulesLayerLanes::ZserioArrayType_regionId RegionRulesLayerLanes::readRegionId(RegionRulesLayerLanes::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_regionId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumRegions()));

    return readField;
}
::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerLanes::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(in);
}

::nds::rules::metadata::RegionRulesLayerContent RegionRulesLayerLanes::readContent(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RegionRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList> RegionRulesLayerLanes::readRegionRulesAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::nds::rules::instantiations::RulesRegionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList> RegionRulesLayerLanes::readRegionRulesAttributeMaps(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::nds::rules::instantiations::RulesRegionAttributeMapList(context.getRegionRulesAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList> RegionRulesLayerLanes::readRegionRulesAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::nds::rules::instantiations::RulesRegionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList> RegionRulesLayerLanes::readRegionRulesAttributeSets(RegionRulesLayerLanes::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS) == ::nds::rules::metadata::RegionRulesLayerContent::Values::REGION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::nds::rules::instantiations::RulesRegionAttributeSetList(context.getRegionRulesAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRegionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<bool> RegionRulesLayerLanes::readHasFeatureRelations(::zserio::BitStreamReader& in)
{
    if (getNumRegions() > 1)
    {
        return ::zserio::InplaceOptionalHolder<bool>(static_cast<bool>(in.readBool()));
    }

    return ::zserio::InplaceOptionalHolder<bool>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<RegionRulesLayerLanes::ZserioArrayType_featureRelations> RegionRulesLayerLanes::readFeatureRelations(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        ZserioArrayType_featureRelations readField(allocator);
        readField.read(*this, in, static_cast<size_t>(getNumRegions()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<RegionRulesLayerLanes::ZserioArrayType_featureRelations> RegionRulesLayerLanes::readFeatureRelations(RegionRulesLayerLanes::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if (getNumRegions() > 1 && getHasFeatureRelations())
    {
        ZserioArrayType_featureRelations readField(allocator);
        readField.readPacked(*this, in, static_cast<size_t>(getNumRegions()));

        return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::std::move(readField));
    }

    return ::zserio::InplaceOptionalHolder<ZserioArrayType_featureRelations>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/rules/layer/RegionLaneGroupRelationList.h>

namespace nds
{
namespace rules
{
namespace layer
{

RegionLaneGroupRelationList::RegionLaneGroupRelationList(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_numRelations_(uint32_t()),
        m_laneGroupIds_(allocator),
        m_laneGroupRangeValidity_(allocator)
{
}

RegionLaneGroupRelationList::RegionLaneGroupRelationList(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRelations_(readNumRelations(in)),
        m_laneGroupIds_(readLaneGroupIds(in, allocator)),
        m_laneGroupRangeValidity_(readLaneGroupRangeValidity(in, allocator))
{
}

RegionLaneGroupRelationList::RegionLaneGroupRelationList(RegionLaneGroupRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_numRelations_(readNumRelations(context, in)),
        m_laneGroupIds_(readLaneGroupIds(context, in, allocator)),
        m_laneGroupRangeValidity_(readLaneGroupRangeValidity(context, in, allocator))
{
}

RegionLaneGroupRelationList::RegionLaneGroupRelationList(const RegionLaneGroupRelationList& other) :
        m_numRelations_(other.m_numRelations_),
        m_laneGroupIds_(other.m_laneGroupIds_),
        m_laneGroupRangeValidity_(other.m_laneGroupRangeValidity_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionLaneGroupRelationList& RegionLaneGroupRelationList::operator=(const RegionLaneGroupRelationList& other)
{
    m_numRelations_ = other.m_numRelations_;
    m_laneGroupIds_ = other.m_laneGroupIds_;
    m_laneGroupRangeValidity_ = other.m_laneGroupRangeValidity_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionLaneGroupRelationList::RegionLaneGroupRelationList(RegionLaneGroupRelationList&& other) :
        m_numRelations_(::std::move(other.m_numRelations_)),
        m_laneGroupIds_(::std::move(other.m_laneGroupIds_)),
        m_laneGroupRangeValidity_(::std::move(other.m_laneGroupRangeValidity_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionLaneGroupRelationList& RegionLaneGroupRelationList::operator=(RegionLaneGroupRelationList&& other)
{
    m_numRelations_ = ::std::move(other.m_numRelations_);
    m_laneGroupIds_ = ::std::move(other.m_laneGroupIds_);
    m_laneGroupRangeValidity_ = ::std::move(other.m_laneGroupRangeValidity_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionLaneGroupRelationList::RegionLaneGroupRelationList(::zserio::PropagateAllocatorT,
        const RegionLaneGroupRelationList& other, const allocator_type& allocator) :
        m_numRelations_(::zserio::allocatorPropagatingCopy(other.m_numRelations_, allocator)),
        m_laneGroupIds_(::zserio::allocatorPropagatingCopy(other.m_laneGroupIds_, allocator)),
        m_laneGroupRangeValidity_(::zserio::allocatorPropagatingCopy(other.m_laneGroupRangeValidity_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RegionLaneGroupRelationList::initializeChildren()
{
    m_laneGroupRangeValidity_.initializeElements(*this);

    m_areChildrenInitialized = true;
}

uint32_t RegionLaneGroupRelationList::getNumRelations() const
{
    return m_numRelations_;
}

void RegionLaneGroupRelationList::setNumRelations(uint32_t numRelations_)
{
    m_numRelations_ = numRelations_;
}

::zserio::vector<::nds::lane::reference::types::LaneGroupId>& RegionLaneGroupRelationList::getLaneGroupIds()
{
    return m_laneGroupIds_.getRawArray();
}

const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& RegionLaneGroupRelationList::getLaneGroupIds() const
{
    return m_laneGroupIds_.getRawArray();
}

void RegionLaneGroupRelationList::setLaneGroupIds(const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& laneGroupIds_)
{
    m_laneGroupIds_ = ZserioArrayType_laneGroupIds(laneGroupIds_);
}

void RegionLaneGroupRelationList::setLaneGroupIds(::zserio::vector<::nds::lane::reference::types::LaneGroupId>&& laneGroupIds_)
{
    m_laneGroupIds_ = ZserioArrayType_laneGroupIds(std::move(laneGroupIds_));
}

::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& RegionLaneGroupRelationList::getLaneGroupRangeValidity()
{
    return m_laneGroupRangeValidity_.getRawArray();
}

const ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& RegionLaneGroupRelationList::getLaneGroupRangeValidity() const
{
    return m_laneGroupRangeValidity_.getRawArray();
}

void RegionLaneGroupRelationList::setLaneGroupRangeValidity(const ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& laneGroupRangeValidity_)
{
    m_laneGroupRangeValidity_ = ZserioArrayType_laneGroupRangeValidity(laneGroupRangeValidity_);
}

void RegionLaneGroupRelationList::setLaneGroupRangeValidity(::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>&& laneGroupRangeValidity_)
{
    m_laneGroupRangeValidity_ = ZserioArrayType_laneGroupRangeValidity(std::move(laneGroupRangeValidity_));
}

void RegionLaneGroupRelationList::initPackingContext(RegionLaneGroupRelationList::ZserioPackingContext& context) const
{
    context.getNumRelations().init<::zserio::VarSizeArrayTraits>(m_numRelations_);
}

size_t RegionLaneGroupRelationList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRelations_);
    endBitPosition += m_laneGroupIds_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_laneGroupRangeValidity_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionLaneGroupRelationList::bitSizeOf(RegionLaneGroupRelationList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRelations().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRelations_);
    endBitPosition += m_laneGroupIds_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_laneGroupRangeValidity_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionLaneGroupRelationList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRelations_);
    endBitPosition = m_laneGroupIds_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_laneGroupRangeValidity_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RegionLaneGroupRelationList::initializeOffsets(RegionLaneGroupRelationList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getNumRelations().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRelations_);
    endBitPosition = m_laneGroupIds_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_laneGroupRangeValidity_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RegionLaneGroupRelationList::operator==(const RegionLaneGroupRelationList& other) const
{
    if (this != &other)
    {
        return
                (m_numRelations_ == other.m_numRelations_) &&
                (m_laneGroupIds_ == other.m_laneGroupIds_) &&
                (m_laneGroupRangeValidity_ == other.m_laneGroupRangeValidity_);
    }

    return true;
}

uint32_t RegionLaneGroupRelationList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_numRelations_);
    result = ::zserio::calcHashCode(result, m_laneGroupIds_);
    result = ::zserio::calcHashCode(result, m_laneGroupRangeValidity_);

    return result;
}

void RegionLaneGroupRelationList::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(m_numRelations_);

    // check array length
    if (m_laneGroupIds_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionLaneGroupRelationList.laneGroupIds: ") <<
                m_laneGroupIds_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_laneGroupIds_.write(*this, out);

    // check array length
    if (m_laneGroupRangeValidity_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionLaneGroupRelationList.laneGroupRangeValidity: ") <<
                m_laneGroupRangeValidity_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_laneGroupRangeValidity_.write(*this, out);
}

void RegionLaneGroupRelationList::write(RegionLaneGroupRelationList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getNumRelations().write<::zserio::VarSizeArrayTraits>(out, m_numRelations_);

    // check array length
    if (m_laneGroupIds_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionLaneGroupRelationList.laneGroupIds: ") <<
                m_laneGroupIds_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_laneGroupIds_.writePacked(*this, out);

    // check array length
    if (m_laneGroupRangeValidity_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionLaneGroupRelationList.laneGroupRangeValidity: ") <<
                m_laneGroupRangeValidity_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_laneGroupRangeValidity_.writePacked(*this, out);
}

void RegionLaneGroupRelationList::ZserioElementFactory_laneGroupIds::create(RegionLaneGroupRelationList&        ,
        ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RegionLaneGroupRelationList::ZserioElementFactory_laneGroupIds::create(RegionLaneGroupRelationList&        ,
        ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
        ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void RegionLaneGroupRelationList::ZserioArrayExpressions_laneGroupRangeValidity::initializeElement(RegionLaneGroupRelationList&,
        ::nds::lane::reference::types::LaneGroupRangeValidity& element, size_t)
{
    element.initialize(static_cast<::nds::core::geometry::CoordShift>(0));
}

void RegionLaneGroupRelationList::ZserioElementFactory_laneGroupRangeValidity::create(RegionLaneGroupRelationList&        ,
        ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, static_cast<::nds::core::geometry::CoordShift>(0), array.get_allocator());
}

void RegionLaneGroupRelationList::ZserioElementFactory_laneGroupRangeValidity::create(RegionLaneGroupRelationList&        ,
        ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& array,
        ::nds::lane::reference::types::LaneGroupRangeValidity::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, static_cast<::nds::core::geometry::CoordShift>(0), array.get_allocator());
}

uint32_t RegionLaneGroupRelationList::readNumRelations(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t RegionLaneGroupRelationList::readNumRelations(RegionLaneGroupRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumRelations().read<::zserio::VarSizeArrayTraits>(in);
}
RegionLaneGroupRelationList::ZserioArrayType_laneGroupIds RegionLaneGroupRelationList::readLaneGroupIds(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_laneGroupIds readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

RegionLaneGroupRelationList::ZserioArrayType_laneGroupIds RegionLaneGroupRelationList::readLaneGroupIds(RegionLaneGroupRelationList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_laneGroupIds readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}
RegionLaneGroupRelationList::ZserioArrayType_laneGroupRangeValidity RegionLaneGroupRelationList::readLaneGroupRangeValidity(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_laneGroupRangeValidity readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

RegionLaneGroupRelationList::ZserioArrayType_laneGroupRangeValidity RegionLaneGroupRelationList::readLaneGroupRangeValidity(RegionLaneGroupRelationList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_laneGroupRangeValidity readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/rules/layer/RegionRoadRelationList.h>

namespace nds
{
namespace rules
{
namespace layer
{

RegionRoadRelationList::RegionRoadRelationList(const allocator_type& allocator) noexcept :
        m_areChildrenInitialized(false),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_numRelations_(uint32_t()),
        m_roadIds_(allocator),
        m_roadRangeValidity_(allocator)
{
}

RegionRoadRelationList::RegionRoadRelationList(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_shift_(readShift(in)),
        m_numRelations_(readNumRelations(in)),
        m_roadIds_(readRoadIds(in, allocator)),
        m_roadRangeValidity_(readRoadRangeValidity(in, allocator))
{
}

RegionRoadRelationList::RegionRoadRelationList(RegionRoadRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_shift_(readShift(context, in)),
        m_numRelations_(readNumRelations(context, in)),
        m_roadIds_(readRoadIds(context, in, allocator)),
        m_roadRangeValidity_(readRoadRangeValidity(context, in, allocator))
{
}

RegionRoadRelationList::RegionRoadRelationList(const RegionRoadRelationList& other) :
        m_shift_(other.m_shift_),
        m_numRelations_(other.m_numRelations_),
        m_roadIds_(other.m_roadIds_),
        m_roadRangeValidity_(other.m_roadRangeValidity_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRoadRelationList& RegionRoadRelationList::operator=(const RegionRoadRelationList& other)
{
    m_shift_ = other.m_shift_;
    m_numRelations_ = other.m_numRelations_;
    m_roadIds_ = other.m_roadIds_;
    m_roadRangeValidity_ = other.m_roadRangeValidity_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRoadRelationList::RegionRoadRelationList(RegionRoadRelationList&& other) :
        m_shift_(::std::move(other.m_shift_)),
        m_numRelations_(::std::move(other.m_numRelations_)),
        m_roadIds_(::std::move(other.m_roadIds_)),
        m_roadRangeValidity_(::std::move(other.m_roadRangeValidity_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RegionRoadRelationList& RegionRoadRelationList::operator=(RegionRoadRelationList&& other)
{
    m_shift_ = ::std::move(other.m_shift_);
    m_numRelations_ = ::std::move(other.m_numRelations_);
    m_roadIds_ = ::std::move(other.m_roadIds_);
    m_roadRangeValidity_ = ::std::move(other.m_roadRangeValidity_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RegionRoadRelationList::RegionRoadRelationList(::zserio::PropagateAllocatorT,
        const RegionRoadRelationList& other, const allocator_type& allocator) :
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_numRelations_(::zserio::allocatorPropagatingCopy(other.m_numRelations_, allocator)),
        m_roadIds_(::zserio::allocatorPropagatingCopy(other.m_roadIds_, allocator)),
        m_roadRangeValidity_(::zserio::allocatorPropagatingCopy(other.m_roadRangeValidity_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RegionRoadRelationList::initializeChildren()
{
    m_roadRangeValidity_.initializeElements(*this);

    m_areChildrenInitialized = true;
}

::nds::core::geometry::CoordShift RegionRoadRelationList::getShift() const
{
    return m_shift_;
}

void RegionRoadRelationList::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

uint32_t RegionRoadRelationList::getNumRelations() const
{
    return m_numRelations_;
}

void RegionRoadRelationList::setNumRelations(uint32_t numRelations_)
{
    m_numRelations_ = numRelations_;
}

::zserio::vector<::nds::road::reference::types::RoadReference>& RegionRoadRelationList::getRoadIds()
{
    return m_roadIds_.getRawArray();
}

const ::zserio::vector<::nds::road::reference::types::RoadReference>& RegionRoadRelationList::getRoadIds() const
{
    return m_roadIds_.getRawArray();
}

void RegionRoadRelationList::setRoadIds(const ::zserio::vector<::nds::road::reference::types::RoadReference>& roadIds_)
{
    m_roadIds_ = ZserioArrayType_roadIds(roadIds_);
}

void RegionRoadRelationList::setRoadIds(::zserio::vector<::nds::road::reference::types::RoadReference>&& roadIds_)
{
    m_roadIds_ = ZserioArrayType_roadIds(std::move(roadIds_));
}

::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& RegionRoadRelationList::getRoadRangeValidity()
{
    return m_roadRangeValidity_.getRawArray();
}

const ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& RegionRoadRelationList::getRoadRangeValidity() const
{
    return m_roadRangeValidity_.getRawArray();
}

void RegionRoadRelationList::setRoadRangeValidity(const ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& roadRangeValidity_)
{
    m_roadRangeValidity_ = ZserioArrayType_roadRangeValidity(roadRangeValidity_);
}

void RegionRoadRelationList::setRoadRangeValidity(::zserio::vector<::nds::road::reference::types::RoadRangeValidity>&& roadRangeValidity_)
{
    m_roadRangeValidity_ = ZserioArrayType_roadRangeValidity(std::move(roadRangeValidity_));
}

void RegionRoadRelationList::initPackingContext(RegionRoadRelationList::ZserioPackingContext& context) const
{
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    context.getNumRelations().init<::zserio::VarSizeArrayTraits>(m_numRelations_);
}

size_t RegionRoadRelationList::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRelations_);
    endBitPosition += m_roadIds_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_roadRangeValidity_.bitSizeOf(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionRoadRelationList::bitSizeOf(RegionRoadRelationList::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition += context.getNumRelations().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRelations_);
    endBitPosition += m_roadIds_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_roadRangeValidity_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t RegionRoadRelationList::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(5);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRelations_);
    endBitPosition = m_roadIds_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_roadRangeValidity_.initializeOffsets(*this, endBitPosition);

    return endBitPosition;
}

size_t RegionRoadRelationList::initializeOffsets(RegionRoadRelationList::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    endBitPosition += context.getNumRelations().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRelations_);
    endBitPosition = m_roadIds_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_roadRangeValidity_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool RegionRoadRelationList::operator==(const RegionRoadRelationList& other) const
{
    if (this != &other)
    {
        return
                (m_shift_ == other.m_shift_) &&
                (m_numRelations_ == other.m_numRelations_) &&
                (m_roadIds_ == other.m_roadIds_) &&
                (m_roadRangeValidity_ == other.m_roadRangeValidity_);
    }

    return true;
}

uint32_t RegionRoadRelationList::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_shift_);
    result = ::zserio::calcHashCode(result, m_numRelations_);
    result = ::zserio::calcHashCode(result, m_roadIds_);
    result = ::zserio::calcHashCode(result, m_roadRangeValidity_);

    return result;
}

void RegionRoadRelationList::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_shift_, UINT8_C(5));

    out.writeVarSize(m_numRelations_);

    // check array length
    if (m_roadIds_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRoadRelationList.roadIds: ") <<
                m_roadIds_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_roadIds_.write(*this, out);

    // check array length
    if (m_roadRangeValidity_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRoadRelationList.roadRangeValidity: ") <<
                m_roadRangeValidity_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_roadRangeValidity_.write(*this, out);
}

void RegionRoadRelationList::write(RegionRoadRelationList::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    context.getNumRelations().write<::zserio::VarSizeArrayTraits>(out, m_numRelations_);

    // check array length
    if (m_roadIds_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRoadRelationList.roadIds: ") <<
                m_roadIds_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_roadIds_.writePacked(*this, out);

    // check array length
    if (m_roadRangeValidity_.getRawArray().size() != static_cast<size_t>(getNumRelations()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field RegionRoadRelationList.roadRangeValidity: ") <<
                m_roadRangeValidity_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRelations()) << "!";
    }
    m_roadRangeValidity_.writePacked(*this, out);
}

void RegionRoadRelationList::ZserioElementFactory_roadIds::create(RegionRoadRelationList&        ,
        ::zserio::vector<::nds::road::reference::types::RoadReference>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void RegionRoadRelationList::ZserioElementFactory_roadIds::create(RegionRoadRelationList&        ,
        ::zserio::vector<::nds::road::reference::types::RoadReference>& array,
        ::nds::road::reference::types::RoadReference::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

void RegionRoadRelationList::ZserioArrayExpressions_roadRangeValidity::initializeElement(RegionRoadRelationList& owner,
        ::nds::road::reference::types::RoadRangeValidity& element, size_t)
{
    element.initialize(static_cast<::nds::core::geometry::CoordShift>(owner.getShift()));
}

void RegionRoadRelationList::ZserioElementFactory_roadRangeValidity::create(RegionRoadRelationList&         owner,
        ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, static_cast<::nds::core::geometry::CoordShift>(owner.getShift()), array.get_allocator());
}

void RegionRoadRelationList::ZserioElementFactory_roadRangeValidity::create(RegionRoadRelationList&         owner,
        ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& array,
        ::nds::road::reference::types::RoadRangeValidity::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, static_cast<::nds::core::geometry::CoordShift>(owner.getShift()), array.get_allocator());
}

::nds::core::geometry::CoordShift RegionRoadRelationList::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RegionRoadRelationList::readShift(RegionRoadRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
uint32_t RegionRoadRelationList::readNumRelations(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t RegionRoadRelationList::readNumRelations(RegionRoadRelationList::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumRelations().read<::zserio::VarSizeArrayTraits>(in);
}
RegionRoadRelationList::ZserioArrayType_roadIds RegionRoadRelationList::readRoadIds(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_roadIds readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

RegionRoadRelationList::ZserioArrayType_roadIds RegionRoadRelationList::readRoadIds(RegionRoadRelationList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_roadIds readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}
RegionRoadRelationList::ZserioArrayType_roadRangeValidity RegionRoadRelationList::readRoadRangeValidity(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_roadRangeValidity readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

RegionRoadRelationList::ZserioArrayType_roadRangeValidity RegionRoadRelationList::readRoadRangeValidity(RegionRoadRelationList::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_roadRangeValidity readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRelations()));

    return readField;
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/RoadRulesLayer.h>
#include <nds/rules/metadata/RoadRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

RoadRulesLayer::RoadRulesLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::RoadRulesLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadRangeAttributeMaps_(::zserio::NullOpt),
        m_roadPositionAttributeMaps_(::zserio::NullOpt),
        m_transitionAttributeMaps_(::zserio::NullOpt),
        m_roadRangeAttributeSets_(::zserio::NullOpt),
        m_roadPositionAttributeSets_(::zserio::NullOpt),
        m_transitionAttributeSets_(::zserio::NullOpt)
{
}

RoadRulesLayer::RoadRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(in, allocator))
{
}

RoadRulesLayer::RoadRulesLayer(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(context, in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(context, in, allocator)),
        m_transitionAttributeMaps_(readTransitionAttributeMaps(context, in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(context, in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(context, in, allocator)),
        m_transitionAttributeSets_(readTransitionAttributeSets(context, in, allocator))
{
}

RoadRulesLayer::RoadRulesLayer(const RoadRulesLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadRangeAttributeMaps_(other.m_roadRangeAttributeMaps_),
        m_roadPositionAttributeMaps_(other.m_roadPositionAttributeMaps_),
        m_transitionAttributeMaps_(other.m_transitionAttributeMaps_),
        m_roadRangeAttributeSets_(other.m_roadRangeAttributeSets_),
        m_roadPositionAttributeSets_(other.m_roadPositionAttributeSets_),
        m_transitionAttributeSets_(other.m_transitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRulesLayer& RoadRulesLayer::operator=(const RoadRulesLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadRangeAttributeMaps_ = other.m_roadRangeAttributeMaps_;
    m_roadPositionAttributeMaps_ = other.m_roadPositionAttributeMaps_;
    m_transitionAttributeMaps_ = other.m_transitionAttributeMaps_;
    m_roadRangeAttributeSets_ = other.m_roadRangeAttributeSets_;
    m_roadPositionAttributeSets_ = other.m_roadPositionAttributeSets_;
    m_transitionAttributeSets_ = other.m_transitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRulesLayer::RoadRulesLayer(RoadRulesLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadRangeAttributeMaps_(::std::move(other.m_roadRangeAttributeMaps_)),
        m_roadPositionAttributeMaps_(::std::move(other.m_roadPositionAttributeMaps_)),
        m_transitionAttributeMaps_(::std::move(other.m_transitionAttributeMaps_)),
        m_roadRangeAttributeSets_(::std::move(other.m_roadRangeAttributeSets_)),
        m_roadPositionAttributeSets_(::std::move(other.m_roadPositionAttributeSets_)),
        m_transitionAttributeSets_(::std::move(other.m_transitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRulesLayer& RoadRulesLayer::operator=(RoadRulesLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadRangeAttributeMaps_ = ::std::move(other.m_roadRangeAttributeMaps_);
    m_roadPositionAttributeMaps_ = ::std::move(other.m_roadPositionAttributeMaps_);
    m_transitionAttributeMaps_ = ::std::move(other.m_transitionAttributeMaps_);
    m_roadRangeAttributeSets_ = ::std::move(other.m_roadRangeAttributeSets_);
    m_roadPositionAttributeSets_ = ::std::move(other.m_roadPositionAttributeSets_);
    m_transitionAttributeSets_ = ::std::move(other.m_transitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRulesLayer::RoadRulesLayer(::zserio::PropagateAllocatorT,
        const RoadRulesLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMaps_, allocator)),
        m_roadPositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMaps_, allocator)),
        m_transitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeMaps_, allocator)),
        m_roadRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeSets_, allocator)),
        m_roadPositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeSets_, allocator)),
        m_transitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_transitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadRulesLayer::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
        m_roadRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
        m_roadPositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
        m_transitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
        m_roadRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
        m_roadPositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
        m_transitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayer::getContent() const
{
    return m_content_;
}

void RoadRulesLayer::setContent(::nds::rules::metadata::RoadRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadRulesLayer::getShift() const
{
    return m_shift_;
}

void RoadRulesLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::rules::instantiations::RulesRoadRangeAttributeMapList& RoadRulesLayer::getRoadRangeAttributeMaps()
{
    return m_roadRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRoadRangeAttributeMapList& RoadRulesLayer::getRoadRangeAttributeMaps() const
{
    return m_roadRangeAttributeMaps_.value();
}

void RoadRulesLayer::setRoadRangeAttributeMaps(const ::nds::rules::instantiations::RulesRoadRangeAttributeMapList& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = roadRangeAttributeMaps_;
}

void RoadRulesLayer::setRoadRangeAttributeMaps(::nds::rules::instantiations::RulesRoadRangeAttributeMapList&& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = ::std::move(roadRangeAttributeMaps_);
}

bool RoadRulesLayer::isRoadRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadRulesLayer::isRoadRangeAttributeMapsSet() const
{
    return m_roadRangeAttributeMaps_.hasValue();
}

void RoadRulesLayer::resetRoadRangeAttributeMaps()
{
    m_roadRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRoadPositionAttributeMapList& RoadRulesLayer::getRoadPositionAttributeMaps()
{
    return m_roadPositionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRoadPositionAttributeMapList& RoadRulesLayer::getRoadPositionAttributeMaps() const
{
    return m_roadPositionAttributeMaps_.value();
}

void RoadRulesLayer::setRoadPositionAttributeMaps(const ::nds::rules::instantiations::RulesRoadPositionAttributeMapList& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = roadPositionAttributeMaps_;
}

void RoadRulesLayer::setRoadPositionAttributeMaps(::nds::rules::instantiations::RulesRoadPositionAttributeMapList&& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = ::std::move(roadPositionAttributeMaps_);
}

bool RoadRulesLayer::isRoadPositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS);
}

bool RoadRulesLayer::isRoadPositionAttributeMapsSet() const
{
    return m_roadPositionAttributeMaps_.hasValue();
}

void RoadRulesLayer::resetRoadPositionAttributeMaps()
{
    m_roadPositionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesTransitionAttributeMapList& RoadRulesLayer::getTransitionAttributeMaps()
{
    return m_transitionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesTransitionAttributeMapList& RoadRulesLayer::getTransitionAttributeMaps() const
{
    return m_transitionAttributeMaps_.value();
}

void RoadRulesLayer::setTransitionAttributeMaps(const ::nds::rules::instantiations::RulesTransitionAttributeMapList& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = transitionAttributeMaps_;
}

void RoadRulesLayer::setTransitionAttributeMaps(::nds::rules::instantiations::RulesTransitionAttributeMapList&& transitionAttributeMaps_)
{
    m_transitionAttributeMaps_ = ::std::move(transitionAttributeMaps_);
}

bool RoadRulesLayer::isTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS);
}

bool RoadRulesLayer::isTransitionAttributeMapsSet() const
{
    return m_transitionAttributeMaps_.hasValue();
}

void RoadRulesLayer::resetTransitionAttributeMaps()
{
    m_transitionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRoadRangeAttributeSetList& RoadRulesLayer::getRoadRangeAttributeSets()
{
    return m_roadRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRoadRangeAttributeSetList& RoadRulesLayer::getRoadRangeAttributeSets() const
{
    return m_roadRangeAttributeSets_.value();
}

void RoadRulesLayer::setRoadRangeAttributeSets(const ::nds::rules::instantiations::RulesRoadRangeAttributeSetList& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = roadRangeAttributeSets_;
}

void RoadRulesLayer::setRoadRangeAttributeSets(::nds::rules::instantiations::RulesRoadRangeAttributeSetList&& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = ::std::move(roadRangeAttributeSets_);
}

bool RoadRulesLayer::isRoadRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRulesLayer::isRoadRangeAttributeSetsSet() const
{
    return m_roadRangeAttributeSets_.hasValue();
}

void RoadRulesLayer::resetRoadRangeAttributeSets()
{
    m_roadRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesRoadPositionAttributeSetList& RoadRulesLayer::getRoadPositionAttributeSets()
{
    return m_roadPositionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRoadPositionAttributeSetList& RoadRulesLayer::getRoadPositionAttributeSets() const
{
    return m_roadPositionAttributeSets_.value();
}

void RoadRulesLayer::setRoadPositionAttributeSets(const ::nds::rules::instantiations::RulesRoadPositionAttributeSetList& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = roadPositionAttributeSets_;
}

void RoadRulesLayer::setRoadPositionAttributeSets(::nds::rules::instantiations::RulesRoadPositionAttributeSetList&& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = ::std::move(roadPositionAttributeSets_);
}

bool RoadRulesLayer::isRoadPositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadRulesLayer::isRoadPositionAttributeSetsSet() const
{
    return m_roadPositionAttributeSets_.hasValue();
}

void RoadRulesLayer::resetRoadPositionAttributeSets()
{
    m_roadPositionAttributeSets_.reset();
}

::nds::rules::instantiations::RulesTransitionAttributeSetList& RoadRulesLayer::getTransitionAttributeSets()
{
    return m_transitionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesTransitionAttributeSetList& RoadRulesLayer::getTransitionAttributeSets() const
{
    return m_transitionAttributeSets_.value();
}

void RoadRulesLayer::setTransitionAttributeSets(const ::nds::rules::instantiations::RulesTransitionAttributeSetList& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = transitionAttributeSets_;
}

void RoadRulesLayer::setTransitionAttributeSets(::nds::rules::instantiations::RulesTransitionAttributeSetList&& transitionAttributeSets_)
{
    m_transitionAttributeSets_ = ::std::move(transitionAttributeSets_);
}

bool RoadRulesLayer::isTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS);
}

bool RoadRulesLayer::isTransitionAttributeSetsSet() const
{
    return m_transitionAttributeSets_.hasValue();
}

void RoadRulesLayer::resetTransitionAttributeSets()
{
    m_transitionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadRulesLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadRulesLayer::initPackingContext(RoadRulesLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_roadRangeAttributeMaps_.value().initPackingContext(context.getRoadRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        m_roadPositionAttributeMaps_.value().initPackingContext(context.getRoadPositionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        m_transitionAttributeMaps_.value().initPackingContext(context.getTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeSets_.value().initPackingContext(context.getRoadRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeSets_.value().initPackingContext(context.getRoadPositionAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        m_transitionAttributeSets_.value().initPackingContext(context.getTransitionAttributeSets());
    }
}

size_t RoadRulesLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayer::bitSizeOf(RoadRulesLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition += m_transitionAttributeMaps_.value().bitSizeOf(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(context.getRoadPositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition += m_transitionAttributeSets_.value().bitSizeOf(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadRulesLayer::initializeOffsets(RoadRulesLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        endBitPosition = m_transitionAttributeMaps_.value().initializeOffsets(context.getTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(context.getRoadPositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        endBitPosition = m_transitionAttributeSets_.value().initializeOffsets(context.getTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadRulesLayer::operator==(const RoadRulesLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadRangeAttributeMapsUsed() ? !other.isRoadRangeAttributeMapsUsed() : (m_roadRangeAttributeMaps_ == other.m_roadRangeAttributeMaps_)) &&
                (!isRoadPositionAttributeMapsUsed() ? !other.isRoadPositionAttributeMapsUsed() : (m_roadPositionAttributeMaps_ == other.m_roadPositionAttributeMaps_)) &&
                (!isTransitionAttributeMapsUsed() ? !other.isTransitionAttributeMapsUsed() : (m_transitionAttributeMaps_ == other.m_transitionAttributeMaps_)) &&
                (!isRoadRangeAttributeSetsUsed() ? !other.isRoadRangeAttributeSetsUsed() : (m_roadRangeAttributeSets_ == other.m_roadRangeAttributeSets_)) &&
                (!isRoadPositionAttributeSetsUsed() ? !other.isRoadPositionAttributeSetsUsed() : (m_roadPositionAttributeSets_ == other.m_roadPositionAttributeSets_)) &&
                (!isTransitionAttributeSetsUsed() ? !other.isTransitionAttributeSetsUsed() : (m_transitionAttributeSets_ == other.m_transitionAttributeSets_));
    }

    return true;
}

uint32_t RoadRulesLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMaps_);
    if (isRoadPositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMaps_);
    if (isTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeMaps_);
    if (isRoadRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeSets_);
    if (isRoadPositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeSets_);
    if (isTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_transitionAttributeSets_);

    return result;
}

void RoadRulesLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(out);
    }
}

void RoadRulesLayer::write(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(context.getRoadRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(context.getRoadPositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        // check parameters
        if (m_transitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.transitionAttributeMaps: ") <<
                    m_transitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeMaps_.value().write(context.getTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(context.getRoadRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(context.getRoadPositionAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        // check parameters
        if (m_transitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayer.transitionAttributeSets: ") <<
                    m_transitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_transitionAttributeSets_.value().write(context.getTransitionAttributeSets(), out);
    }
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(in);
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayer::readContent(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadRulesLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadRulesLayer::readShift(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList> RoadRulesLayer::readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList>(::nds::rules::instantiations::RulesRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList> RoadRulesLayer::readRoadRangeAttributeMaps(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList>(::nds::rules::instantiations::RulesRoadRangeAttributeMapList(context.getRoadRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList> RoadRulesLayer::readRoadPositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList>(::nds::rules::instantiations::RulesRoadPositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList> RoadRulesLayer::readRoadPositionAttributeMaps(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList>(::nds::rules::instantiations::RulesRoadPositionAttributeMapList(context.getRoadPositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList> RoadRulesLayer::readTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList>(::nds::rules::instantiations::RulesTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList> RoadRulesLayer::readTransitionAttributeMaps(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList>(::nds::rules::instantiations::RulesTransitionAttributeMapList(context.getTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList> RoadRulesLayer::readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList>(::nds::rules::instantiations::RulesRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList> RoadRulesLayer::readRoadRangeAttributeSets(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList>(::nds::rules::instantiations::RulesRoadRangeAttributeSetList(context.getRoadRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList> RoadRulesLayer::readRoadPositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList>(::nds::rules::instantiations::RulesRoadPositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList> RoadRulesLayer::readRoadPositionAttributeSets(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList>(::nds::rules::instantiations::RulesRoadPositionAttributeSetList(context.getRoadPositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList> RoadRulesLayer::readTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList>(::nds::rules::instantiations::RulesTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList> RoadRulesLayer::readTransitionAttributeSets(RoadRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList>(::nds::rules::instantiations::RulesTransitionAttributeSetList(context.getTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/RoadRulesLayerIndirect.h>
#include <nds/rules/metadata/RoadRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

RoadRulesLayerIndirect::RoadRulesLayerIndirect(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::RoadRulesLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadRangeAttributeMaps_(::zserio::NullOpt),
        m_roadPositionAttributeMaps_(::zserio::NullOpt),
        m_roadRangeAttributeSets_(::zserio::NullOpt),
        m_roadPositionAttributeSets_(::zserio::NullOpt)
{
}

RoadRulesLayerIndirect::RoadRulesLayerIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(in, allocator))
{
}

RoadRulesLayerIndirect::RoadRulesLayerIndirect(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadRangeAttributeMaps_(readRoadRangeAttributeMaps(context, in, allocator)),
        m_roadPositionAttributeMaps_(readRoadPositionAttributeMaps(context, in, allocator)),
        m_roadRangeAttributeSets_(readRoadRangeAttributeSets(context, in, allocator)),
        m_roadPositionAttributeSets_(readRoadPositionAttributeSets(context, in, allocator))
{
}

RoadRulesLayerIndirect::RoadRulesLayerIndirect(const RoadRulesLayerIndirect& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadRangeAttributeMaps_(other.m_roadRangeAttributeMaps_),
        m_roadPositionAttributeMaps_(other.m_roadPositionAttributeMaps_),
        m_roadRangeAttributeSets_(other.m_roadRangeAttributeSets_),
        m_roadPositionAttributeSets_(other.m_roadPositionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRulesLayerIndirect& RoadRulesLayerIndirect::operator=(const RoadRulesLayerIndirect& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadRangeAttributeMaps_ = other.m_roadRangeAttributeMaps_;
    m_roadPositionAttributeMaps_ = other.m_roadPositionAttributeMaps_;
    m_roadRangeAttributeSets_ = other.m_roadRangeAttributeSets_;
    m_roadPositionAttributeSets_ = other.m_roadPositionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRulesLayerIndirect::RoadRulesLayerIndirect(RoadRulesLayerIndirect&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadRangeAttributeMaps_(::std::move(other.m_roadRangeAttributeMaps_)),
        m_roadPositionAttributeMaps_(::std::move(other.m_roadPositionAttributeMaps_)),
        m_roadRangeAttributeSets_(::std::move(other.m_roadRangeAttributeSets_)),
        m_roadPositionAttributeSets_(::std::move(other.m_roadPositionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadRulesLayerIndirect& RoadRulesLayerIndirect::operator=(RoadRulesLayerIndirect&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadRangeAttributeMaps_ = ::std::move(other.m_roadRangeAttributeMaps_);
    m_roadPositionAttributeMaps_ = ::std::move(other.m_roadPositionAttributeMaps_);
    m_roadRangeAttributeSets_ = ::std::move(other.m_roadRangeAttributeSets_);
    m_roadPositionAttributeSets_ = ::std::move(other.m_roadPositionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadRulesLayerIndirect::RoadRulesLayerIndirect(::zserio::PropagateAllocatorT,
        const RoadRulesLayerIndirect& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeMaps_, allocator)),
        m_roadPositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeMaps_, allocator)),
        m_roadRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadRangeAttributeSets_, allocator)),
        m_roadPositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadPositionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadRulesLayerIndirect::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
        m_roadRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
        m_roadPositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
        m_roadRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
        m_roadPositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirect::getContent() const
{
    return m_content_;
}

void RoadRulesLayerIndirect::setContent(::nds::rules::metadata::RoadRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadRulesLayerIndirect::getShift() const
{
    return m_shift_;
}

void RoadRulesLayerIndirect::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList& RoadRulesLayerIndirect::getRoadRangeAttributeMaps()
{
    return m_roadRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList& RoadRulesLayerIndirect::getRoadRangeAttributeMaps() const
{
    return m_roadRangeAttributeMaps_.value();
}

void RoadRulesLayerIndirect::setRoadRangeAttributeMaps(const ::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = roadRangeAttributeMaps_;
}

void RoadRulesLayerIndirect::setRoadRangeAttributeMaps(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList&& roadRangeAttributeMaps_)
{
    m_roadRangeAttributeMaps_ = ::std::move(roadRangeAttributeMaps_);
}

bool RoadRulesLayerIndirect::isRoadRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS);
}

bool RoadRulesLayerIndirect::isRoadRangeAttributeMapsSet() const
{
    return m_roadRangeAttributeMaps_.hasValue();
}

void RoadRulesLayerIndirect::resetRoadRangeAttributeMaps()
{
    m_roadRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList& RoadRulesLayerIndirect::getRoadPositionAttributeMaps()
{
    return m_roadPositionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList& RoadRulesLayerIndirect::getRoadPositionAttributeMaps() const
{
    return m_roadPositionAttributeMaps_.value();
}

void RoadRulesLayerIndirect::setRoadPositionAttributeMaps(const ::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = roadPositionAttributeMaps_;
}

void RoadRulesLayerIndirect::setRoadPositionAttributeMaps(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList&& roadPositionAttributeMaps_)
{
    m_roadPositionAttributeMaps_ = ::std::move(roadPositionAttributeMaps_);
}

bool RoadRulesLayerIndirect::isRoadPositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS);
}

bool RoadRulesLayerIndirect::isRoadPositionAttributeMapsSet() const
{
    return m_roadPositionAttributeMaps_.hasValue();
}

void RoadRulesLayerIndirect::resetRoadPositionAttributeMaps()
{
    m_roadPositionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList& RoadRulesLayerIndirect::getRoadRangeAttributeSets()
{
    return m_roadRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList& RoadRulesLayerIndirect::getRoadRangeAttributeSets() const
{
    return m_roadRangeAttributeSets_.value();
}

void RoadRulesLayerIndirect::setRoadRangeAttributeSets(const ::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = roadRangeAttributeSets_;
}

void RoadRulesLayerIndirect::setRoadRangeAttributeSets(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList&& roadRangeAttributeSets_)
{
    m_roadRangeAttributeSets_ = ::std::move(roadRangeAttributeSets_);
}

bool RoadRulesLayerIndirect::isRoadRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS);
}

bool RoadRulesLayerIndirect::isRoadRangeAttributeSetsSet() const
{
    return m_roadRangeAttributeSets_.hasValue();
}

void RoadRulesLayerIndirect::resetRoadRangeAttributeSets()
{
    m_roadRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList& RoadRulesLayerIndirect::getRoadPositionAttributeSets()
{
    return m_roadPositionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList& RoadRulesLayerIndirect::getRoadPositionAttributeSets() const
{
    return m_roadPositionAttributeSets_.value();
}

void RoadRulesLayerIndirect::setRoadPositionAttributeSets(const ::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = roadPositionAttributeSets_;
}

void RoadRulesLayerIndirect::setRoadPositionAttributeSets(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList&& roadPositionAttributeSets_)
{
    m_roadPositionAttributeSets_ = ::std::move(roadPositionAttributeSets_);
}

bool RoadRulesLayerIndirect::isRoadPositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS);
}

bool RoadRulesLayerIndirect::isRoadPositionAttributeSetsSet() const
{
    return m_roadPositionAttributeSets_.hasValue();
}

void RoadRulesLayerIndirect::resetRoadPositionAttributeSets()
{
    m_roadPositionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadRulesLayerIndirect::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadRulesLayerIndirect::initPackingContext(RoadRulesLayerIndirect::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        m_roadRangeAttributeMaps_.value().initPackingContext(context.getRoadRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        m_roadPositionAttributeMaps_.value().initPackingContext(context.getRoadPositionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        m_roadRangeAttributeSets_.value().initPackingContext(context.getRoadRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        m_roadPositionAttributeSets_.value().initPackingContext(context.getRoadPositionAttributeSets());
    }
}

size_t RoadRulesLayerIndirect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerIndirect::bitSizeOf(RoadRulesLayerIndirect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition += m_roadRangeAttributeMaps_.value().bitSizeOf(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition += m_roadPositionAttributeMaps_.value().bitSizeOf(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition += m_roadRangeAttributeSets_.value().bitSizeOf(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition += m_roadPositionAttributeSets_.value().bitSizeOf(context.getRoadPositionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadRulesLayerIndirect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadRulesLayerIndirect::initializeOffsets(RoadRulesLayerIndirect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        endBitPosition = m_roadRangeAttributeMaps_.value().initializeOffsets(context.getRoadRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        endBitPosition = m_roadPositionAttributeMaps_.value().initializeOffsets(context.getRoadPositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        endBitPosition = m_roadRangeAttributeSets_.value().initializeOffsets(context.getRoadRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        endBitPosition = m_roadPositionAttributeSets_.value().initializeOffsets(context.getRoadPositionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadRulesLayerIndirect::operator==(const RoadRulesLayerIndirect& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadRangeAttributeMapsUsed() ? !other.isRoadRangeAttributeMapsUsed() : (m_roadRangeAttributeMaps_ == other.m_roadRangeAttributeMaps_)) &&
                (!isRoadPositionAttributeMapsUsed() ? !other.isRoadPositionAttributeMapsUsed() : (m_roadPositionAttributeMaps_ == other.m_roadPositionAttributeMaps_)) &&
                (!isRoadRangeAttributeSetsUsed() ? !other.isRoadRangeAttributeSetsUsed() : (m_roadRangeAttributeSets_ == other.m_roadRangeAttributeSets_)) &&
                (!isRoadPositionAttributeSetsUsed() ? !other.isRoadPositionAttributeSetsUsed() : (m_roadPositionAttributeSets_ == other.m_roadPositionAttributeSets_));
    }

    return true;
}

uint32_t RoadRulesLayerIndirect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeMaps_);
    if (isRoadPositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeMaps_);
    if (isRoadRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadRangeAttributeSets_);
    if (isRoadPositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadPositionAttributeSets_);

    return result;
}

void RoadRulesLayerIndirect::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(out);
    }
}

void RoadRulesLayerIndirect::write(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        // check parameters
        if (m_roadRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadRangeAttributeMaps: ") <<
                    m_roadRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeMaps_.value().write(context.getRoadRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        // check parameters
        if (m_roadPositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadPositionAttributeMaps: ") <<
                    m_roadPositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeMaps_.value().write(context.getRoadPositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        // check parameters
        if (m_roadRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadRangeAttributeSets: ") <<
                    m_roadRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadRangeAttributeSets_.value().write(context.getRoadRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        // check parameters
        if (m_roadPositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadRulesLayerIndirect.roadPositionAttributeSets: ") <<
                    m_roadPositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadPositionAttributeSets_.value().write(context.getRoadPositionAttributeSets(), out);
    }
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirect::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(in);
}

::nds::rules::metadata::RoadRulesLayerContent RoadRulesLayerIndirect::readContent(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadRulesLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadRulesLayerIndirect::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadRulesLayerIndirect::readShift(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList> RoadRulesLayerIndirect::readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList>(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList> RoadRulesLayerIndirect::readRoadRangeAttributeMaps(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList>(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList(context.getRoadRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList> RoadRulesLayerIndirect::readRoadPositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList>(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList> RoadRulesLayerIndirect::readRoadPositionAttributeMaps(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList>(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList(context.getRoadPositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList> RoadRulesLayerIndirect::readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList>(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList> RoadRulesLayerIndirect::readRoadRangeAttributeSets(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList>(::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList(context.getRoadRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList> RoadRulesLayerIndirect::readRoadPositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList>(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList> RoadRulesLayerIndirect::readRoadPositionAttributeSets(RoadRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS) == ::nds::rules::metadata::RoadRulesLayerContent::Values::ROAD_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList>(::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList(context.getRoadPositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectRoadPositionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/RoadLocationRulesLayer.h>
#include <nds/rules/metadata/RoadLocationRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

RoadLocationRulesLayer::RoadLocationRulesLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::RoadLocationRulesLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_roadLocationRangeAttributeMaps_(::zserio::NullOpt),
        m_roadLocationTransitionAttributeMaps_(::zserio::NullOpt),
        m_roadLocationRangeAttributeSets_(::zserio::NullOpt),
        m_roadLocationTransitionAttributeSets_(::zserio::NullOpt)
{
}

RoadLocationRulesLayer::RoadLocationRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_roadLocationRangeAttributeMaps_(readRoadLocationRangeAttributeMaps(in, allocator)),
        m_roadLocationTransitionAttributeMaps_(readRoadLocationTransitionAttributeMaps(in, allocator)),
        m_roadLocationRangeAttributeSets_(readRoadLocationRangeAttributeSets(in, allocator)),
        m_roadLocationTransitionAttributeSets_(readRoadLocationTransitionAttributeSets(in, allocator))
{
}

RoadLocationRulesLayer::RoadLocationRulesLayer(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_roadLocationRangeAttributeMaps_(readRoadLocationRangeAttributeMaps(context, in, allocator)),
        m_roadLocationTransitionAttributeMaps_(readRoadLocationTransitionAttributeMaps(context, in, allocator)),
        m_roadLocationRangeAttributeSets_(readRoadLocationRangeAttributeSets(context, in, allocator)),
        m_roadLocationTransitionAttributeSets_(readRoadLocationTransitionAttributeSets(context, in, allocator))
{
}

RoadLocationRulesLayer::RoadLocationRulesLayer(const RoadLocationRulesLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_roadLocationRangeAttributeMaps_(other.m_roadLocationRangeAttributeMaps_),
        m_roadLocationTransitionAttributeMaps_(other.m_roadLocationTransitionAttributeMaps_),
        m_roadLocationRangeAttributeSets_(other.m_roadLocationRangeAttributeSets_),
        m_roadLocationTransitionAttributeSets_(other.m_roadLocationTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadLocationRulesLayer& RoadLocationRulesLayer::operator=(const RoadLocationRulesLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_roadLocationRangeAttributeMaps_ = other.m_roadLocationRangeAttributeMaps_;
    m_roadLocationTransitionAttributeMaps_ = other.m_roadLocationTransitionAttributeMaps_;
    m_roadLocationRangeAttributeSets_ = other.m_roadLocationRangeAttributeSets_;
    m_roadLocationTransitionAttributeSets_ = other.m_roadLocationTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadLocationRulesLayer::RoadLocationRulesLayer(RoadLocationRulesLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_roadLocationRangeAttributeMaps_(::std::move(other.m_roadLocationRangeAttributeMaps_)),
        m_roadLocationTransitionAttributeMaps_(::std::move(other.m_roadLocationTransitionAttributeMaps_)),
        m_roadLocationRangeAttributeSets_(::std::move(other.m_roadLocationRangeAttributeSets_)),
        m_roadLocationTransitionAttributeSets_(::std::move(other.m_roadLocationTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

RoadLocationRulesLayer& RoadLocationRulesLayer::operator=(RoadLocationRulesLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_roadLocationRangeAttributeMaps_ = ::std::move(other.m_roadLocationRangeAttributeMaps_);
    m_roadLocationTransitionAttributeMaps_ = ::std::move(other.m_roadLocationTransitionAttributeMaps_);
    m_roadLocationRangeAttributeSets_ = ::std::move(other.m_roadLocationRangeAttributeSets_);
    m_roadLocationTransitionAttributeSets_ = ::std::move(other.m_roadLocationTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

RoadLocationRulesLayer::RoadLocationRulesLayer(::zserio::PropagateAllocatorT,
        const RoadLocationRulesLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_roadLocationRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadLocationRangeAttributeMaps_, allocator)),
        m_roadLocationTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_roadLocationTransitionAttributeMaps_, allocator)),
        m_roadLocationRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadLocationRangeAttributeSets_, allocator)),
        m_roadLocationTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_roadLocationTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void RoadLocationRulesLayer::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
        m_roadLocationRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
        m_roadLocationTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
        m_roadLocationRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
        m_roadLocationTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayer::getContent() const
{
    return m_content_;
}

void RoadLocationRulesLayer::setContent(::nds::rules::metadata::RoadLocationRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift RoadLocationRulesLayer::getShift() const
{
    return m_shift_;
}

void RoadLocationRulesLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& RoadLocationRulesLayer::getRoadLocationRangeAttributeMaps()
{
    return m_roadLocationRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& RoadLocationRulesLayer::getRoadLocationRangeAttributeMaps() const
{
    return m_roadLocationRangeAttributeMaps_.value();
}

void RoadLocationRulesLayer::setRoadLocationRangeAttributeMaps(const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& roadLocationRangeAttributeMaps_)
{
    m_roadLocationRangeAttributeMaps_ = roadLocationRangeAttributeMaps_;
}

void RoadLocationRulesLayer::setRoadLocationRangeAttributeMaps(::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList&& roadLocationRangeAttributeMaps_)
{
    m_roadLocationRangeAttributeMaps_ = ::std::move(roadLocationRangeAttributeMaps_);
}

bool RoadLocationRulesLayer::isRoadLocationRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS);
}

bool RoadLocationRulesLayer::isRoadLocationRangeAttributeMapsSet() const
{
    return m_roadLocationRangeAttributeMaps_.hasValue();
}

void RoadLocationRulesLayer::resetRoadLocationRangeAttributeMaps()
{
    m_roadLocationRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& RoadLocationRulesLayer::getRoadLocationTransitionAttributeMaps()
{
    return m_roadLocationTransitionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& RoadLocationRulesLayer::getRoadLocationTransitionAttributeMaps() const
{
    return m_roadLocationTransitionAttributeMaps_.value();
}

void RoadLocationRulesLayer::setRoadLocationTransitionAttributeMaps(const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& roadLocationTransitionAttributeMaps_)
{
    m_roadLocationTransitionAttributeMaps_ = roadLocationTransitionAttributeMaps_;
}

void RoadLocationRulesLayer::setRoadLocationTransitionAttributeMaps(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList&& roadLocationTransitionAttributeMaps_)
{
    m_roadLocationTransitionAttributeMaps_ = ::std::move(roadLocationTransitionAttributeMaps_);
}

bool RoadLocationRulesLayer::isRoadLocationTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS);
}

bool RoadLocationRulesLayer::isRoadLocationTransitionAttributeMapsSet() const
{
    return m_roadLocationTransitionAttributeMaps_.hasValue();
}

void RoadLocationRulesLayer::resetRoadLocationTransitionAttributeMaps()
{
    m_roadLocationTransitionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& RoadLocationRulesLayer::getRoadLocationRangeAttributeSets()
{
    return m_roadLocationRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& RoadLocationRulesLayer::getRoadLocationRangeAttributeSets() const
{
    return m_roadLocationRangeAttributeSets_.value();
}

void RoadLocationRulesLayer::setRoadLocationRangeAttributeSets(const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& roadLocationRangeAttributeSets_)
{
    m_roadLocationRangeAttributeSets_ = roadLocationRangeAttributeSets_;
}

void RoadLocationRulesLayer::setRoadLocationRangeAttributeSets(::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList&& roadLocationRangeAttributeSets_)
{
    m_roadLocationRangeAttributeSets_ = ::std::move(roadLocationRangeAttributeSets_);
}

bool RoadLocationRulesLayer::isRoadLocationRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS);
}

bool RoadLocationRulesLayer::isRoadLocationRangeAttributeSetsSet() const
{
    return m_roadLocationRangeAttributeSets_.hasValue();
}

void RoadLocationRulesLayer::resetRoadLocationRangeAttributeSets()
{
    m_roadLocationRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& RoadLocationRulesLayer::getRoadLocationTransitionAttributeSets()
{
    return m_roadLocationTransitionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& RoadLocationRulesLayer::getRoadLocationTransitionAttributeSets() const
{
    return m_roadLocationTransitionAttributeSets_.value();
}

void RoadLocationRulesLayer::setRoadLocationTransitionAttributeSets(const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& roadLocationTransitionAttributeSets_)
{
    m_roadLocationTransitionAttributeSets_ = roadLocationTransitionAttributeSets_;
}

void RoadLocationRulesLayer::setRoadLocationTransitionAttributeSets(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList&& roadLocationTransitionAttributeSets_)
{
    m_roadLocationTransitionAttributeSets_ = ::std::move(roadLocationTransitionAttributeSets_);
}

bool RoadLocationRulesLayer::isRoadLocationTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS);
}

bool RoadLocationRulesLayer::isRoadLocationTransitionAttributeSetsSet() const
{
    return m_roadLocationTransitionAttributeSets_.hasValue();
}

void RoadLocationRulesLayer::resetRoadLocationTransitionAttributeSets()
{
    m_roadLocationTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType RoadLocationRulesLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void RoadLocationRulesLayer::initPackingContext(RoadLocationRulesLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        m_roadLocationRangeAttributeMaps_.value().initPackingContext(context.getRoadLocationRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        m_roadLocationTransitionAttributeMaps_.value().initPackingContext(context.getRoadLocationTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        m_roadLocationRangeAttributeSets_.value().initPackingContext(context.getRoadLocationRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        m_roadLocationTransitionAttributeSets_.value().initPackingContext(context.getRoadLocationTransitionAttributeSets());
    }
}

size_t RoadLocationRulesLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_roadLocationRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationRulesLayer::bitSizeOf(RoadLocationRulesLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition += m_roadLocationRangeAttributeMaps_.value().bitSizeOf(context.getRoadLocationRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition += m_roadLocationTransitionAttributeMaps_.value().bitSizeOf(context.getRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition += m_roadLocationRangeAttributeSets_.value().bitSizeOf(context.getRoadLocationRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition += m_roadLocationTransitionAttributeSets_.value().bitSizeOf(context.getRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t RoadLocationRulesLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_roadLocationRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t RoadLocationRulesLayer::initializeOffsets(RoadLocationRulesLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        endBitPosition = m_roadLocationRangeAttributeMaps_.value().initializeOffsets(context.getRoadLocationRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        endBitPosition = m_roadLocationTransitionAttributeMaps_.value().initializeOffsets(context.getRoadLocationTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        endBitPosition = m_roadLocationRangeAttributeSets_.value().initializeOffsets(context.getRoadLocationRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        endBitPosition = m_roadLocationTransitionAttributeSets_.value().initializeOffsets(context.getRoadLocationTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool RoadLocationRulesLayer::operator==(const RoadLocationRulesLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isRoadLocationRangeAttributeMapsUsed() ? !other.isRoadLocationRangeAttributeMapsUsed() : (m_roadLocationRangeAttributeMaps_ == other.m_roadLocationRangeAttributeMaps_)) &&
                (!isRoadLocationTransitionAttributeMapsUsed() ? !other.isRoadLocationTransitionAttributeMapsUsed() : (m_roadLocationTransitionAttributeMaps_ == other.m_roadLocationTransitionAttributeMaps_)) &&
                (!isRoadLocationRangeAttributeSetsUsed() ? !other.isRoadLocationRangeAttributeSetsUsed() : (m_roadLocationRangeAttributeSets_ == other.m_roadLocationRangeAttributeSets_)) &&
                (!isRoadLocationTransitionAttributeSetsUsed() ? !other.isRoadLocationTransitionAttributeSetsUsed() : (m_roadLocationTransitionAttributeSets_ == other.m_roadLocationTransitionAttributeSets_));
    }

    return true;
}

uint32_t RoadLocationRulesLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isRoadLocationRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationRangeAttributeMaps_);
    if (isRoadLocationTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationTransitionAttributeMaps_);
    if (isRoadLocationRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationRangeAttributeSets_);
    if (isRoadLocationTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_roadLocationTransitionAttributeSets_);

    return result;
}

void RoadLocationRulesLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationRangeAttributeMaps: ") <<
                    m_roadLocationRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationTransitionAttributeMaps: ") <<
                    m_roadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationRangeAttributeSets: ") <<
                    m_roadLocationRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationTransitionAttributeSets: ") <<
                    m_roadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeSets_.value().write(out);
    }
}

void RoadLocationRulesLayer::write(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationRangeAttributeMaps: ") <<
                    m_roadLocationRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeMaps_.value().write(context.getRoadLocationRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationTransitionAttributeMaps: ") <<
                    m_roadLocationTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeMaps_.value().write(context.getRoadLocationTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        // check parameters
        if (m_roadLocationRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationRangeAttributeSets: ") <<
                    m_roadLocationRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationRangeAttributeSets_.value().write(context.getRoadLocationRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        // check parameters
        if (m_roadLocationTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field RoadLocationRulesLayer.roadLocationTransitionAttributeSets: ") <<
                    m_roadLocationTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_roadLocationTransitionAttributeSets_.value().write(context.getRoadLocationTransitionAttributeSets(), out);
    }
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadLocationRulesLayerContent(in);
}

::nds::rules::metadata::RoadLocationRulesLayerContent RoadLocationRulesLayer::readContent(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::RoadLocationRulesLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift RoadLocationRulesLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift RoadLocationRulesLayer::readShift(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList> RoadLocationRulesLayer::readRoadLocationRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList>(::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList> RoadLocationRulesLayer::readRoadLocationRangeAttributeMaps(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList>(::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList(context.getRoadLocationRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList> RoadLocationRulesLayer::readRoadLocationTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList>(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList> RoadLocationRulesLayer::readRoadLocationTransitionAttributeMaps(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList>(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList(context.getRoadLocationTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList> RoadLocationRulesLayer::readRoadLocationRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList>(::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList> RoadLocationRulesLayer::readRoadLocationRangeAttributeSets(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList>(::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList(context.getRoadLocationRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList> RoadLocationRulesLayer::readRoadLocationTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList>(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList> RoadLocationRulesLayer::readRoadLocationTransitionAttributeSets(RoadLocationRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS) == ::nds::rules::metadata::RoadLocationRulesLayerContent::Values::ROAD_LOCATION_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList>(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList(context.getRoadLocationTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/LaneRulesLayer.h>
#include <nds/rules/metadata/LaneRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

LaneRulesLayer::LaneRulesLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::LaneRulesLayerContent()),
        m_laneRangeAttributeMaps_(::zserio::NullOpt),
        m_lanePositionAttributeMaps_(::zserio::NullOpt),
        m_laneTransitionAttributeMaps_(::zserio::NullOpt),
        m_laneRangeAttributeSets_(::zserio::NullOpt),
        m_lanePositionAttributeSets_(::zserio::NullOpt),
        m_laneTransitionAttributeSets_(::zserio::NullOpt)
{
}

LaneRulesLayer::LaneRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(in, allocator)),
        m_laneTransitionAttributeMaps_(readLaneTransitionAttributeMaps(in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(in, allocator)),
        m_laneTransitionAttributeSets_(readLaneTransitionAttributeSets(in, allocator))
{
}

LaneRulesLayer::LaneRulesLayer(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(context, in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(context, in, allocator)),
        m_laneTransitionAttributeMaps_(readLaneTransitionAttributeMaps(context, in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(context, in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(context, in, allocator)),
        m_laneTransitionAttributeSets_(readLaneTransitionAttributeSets(context, in, allocator))
{
}

LaneRulesLayer::LaneRulesLayer(const LaneRulesLayer& other) :
        m_content_(other.m_content_),
        m_laneRangeAttributeMaps_(other.m_laneRangeAttributeMaps_),
        m_lanePositionAttributeMaps_(other.m_lanePositionAttributeMaps_),
        m_laneTransitionAttributeMaps_(other.m_laneTransitionAttributeMaps_),
        m_laneRangeAttributeSets_(other.m_laneRangeAttributeSets_),
        m_lanePositionAttributeSets_(other.m_lanePositionAttributeSets_),
        m_laneTransitionAttributeSets_(other.m_laneTransitionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRulesLayer& LaneRulesLayer::operator=(const LaneRulesLayer& other)
{
    m_content_ = other.m_content_;
    m_laneRangeAttributeMaps_ = other.m_laneRangeAttributeMaps_;
    m_lanePositionAttributeMaps_ = other.m_lanePositionAttributeMaps_;
    m_laneTransitionAttributeMaps_ = other.m_laneTransitionAttributeMaps_;
    m_laneRangeAttributeSets_ = other.m_laneRangeAttributeSets_;
    m_lanePositionAttributeSets_ = other.m_lanePositionAttributeSets_;
    m_laneTransitionAttributeSets_ = other.m_laneTransitionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRulesLayer::LaneRulesLayer(LaneRulesLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneRangeAttributeMaps_(::std::move(other.m_laneRangeAttributeMaps_)),
        m_lanePositionAttributeMaps_(::std::move(other.m_lanePositionAttributeMaps_)),
        m_laneTransitionAttributeMaps_(::std::move(other.m_laneTransitionAttributeMaps_)),
        m_laneRangeAttributeSets_(::std::move(other.m_laneRangeAttributeSets_)),
        m_lanePositionAttributeSets_(::std::move(other.m_lanePositionAttributeSets_)),
        m_laneTransitionAttributeSets_(::std::move(other.m_laneTransitionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRulesLayer& LaneRulesLayer::operator=(LaneRulesLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneRangeAttributeMaps_ = ::std::move(other.m_laneRangeAttributeMaps_);
    m_lanePositionAttributeMaps_ = ::std::move(other.m_lanePositionAttributeMaps_);
    m_laneTransitionAttributeMaps_ = ::std::move(other.m_laneTransitionAttributeMaps_);
    m_laneRangeAttributeSets_ = ::std::move(other.m_laneRangeAttributeSets_);
    m_lanePositionAttributeSets_ = ::std::move(other.m_lanePositionAttributeSets_);
    m_laneTransitionAttributeSets_ = ::std::move(other.m_laneTransitionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRulesLayer::LaneRulesLayer(::zserio::PropagateAllocatorT,
        const LaneRulesLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMaps_, allocator)),
        m_lanePositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMaps_, allocator)),
        m_laneTransitionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeMaps_, allocator)),
        m_laneRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeSets_, allocator)),
        m_lanePositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeSets_, allocator)),
        m_laneTransitionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneTransitionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneRulesLayer::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
        m_laneRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
        m_lanePositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
        m_laneTransitionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
        m_laneRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
        m_lanePositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
        m_laneTransitionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayer::getContent() const
{
    return m_content_;
}

void LaneRulesLayer::setContent(::nds::rules::metadata::LaneRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesLaneRangeAttributeMapList& LaneRulesLayer::getLaneRangeAttributeMaps()
{
    return m_laneRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesLaneRangeAttributeMapList& LaneRulesLayer::getLaneRangeAttributeMaps() const
{
    return m_laneRangeAttributeMaps_.value();
}

void LaneRulesLayer::setLaneRangeAttributeMaps(const ::nds::rules::instantiations::RulesLaneRangeAttributeMapList& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
}

void LaneRulesLayer::setLaneRangeAttributeMaps(::nds::rules::instantiations::RulesLaneRangeAttributeMapList&& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = ::std::move(laneRangeAttributeMaps_);
}

bool LaneRulesLayer::isLaneRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneRulesLayer::isLaneRangeAttributeMapsSet() const
{
    return m_laneRangeAttributeMaps_.hasValue();
}

void LaneRulesLayer::resetLaneRangeAttributeMaps()
{
    m_laneRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesLanePositionAttributeMapList& LaneRulesLayer::getLanePositionAttributeMaps()
{
    return m_lanePositionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesLanePositionAttributeMapList& LaneRulesLayer::getLanePositionAttributeMaps() const
{
    return m_lanePositionAttributeMaps_.value();
}

void LaneRulesLayer::setLanePositionAttributeMaps(const ::nds::rules::instantiations::RulesLanePositionAttributeMapList& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = lanePositionAttributeMaps_;
}

void LaneRulesLayer::setLanePositionAttributeMaps(::nds::rules::instantiations::RulesLanePositionAttributeMapList&& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = ::std::move(lanePositionAttributeMaps_);
}

bool LaneRulesLayer::isLanePositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS);
}

bool LaneRulesLayer::isLanePositionAttributeMapsSet() const
{
    return m_lanePositionAttributeMaps_.hasValue();
}

void LaneRulesLayer::resetLanePositionAttributeMaps()
{
    m_lanePositionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesLaneTransitionAttributeMapList& LaneRulesLayer::getLaneTransitionAttributeMaps()
{
    return m_laneTransitionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesLaneTransitionAttributeMapList& LaneRulesLayer::getLaneTransitionAttributeMaps() const
{
    return m_laneTransitionAttributeMaps_.value();
}

void LaneRulesLayer::setLaneTransitionAttributeMaps(const ::nds::rules::instantiations::RulesLaneTransitionAttributeMapList& laneTransitionAttributeMaps_)
{
    m_laneTransitionAttributeMaps_ = laneTransitionAttributeMaps_;
}

void LaneRulesLayer::setLaneTransitionAttributeMaps(::nds::rules::instantiations::RulesLaneTransitionAttributeMapList&& laneTransitionAttributeMaps_)
{
    m_laneTransitionAttributeMaps_ = ::std::move(laneTransitionAttributeMaps_);
}

bool LaneRulesLayer::isLaneTransitionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS);
}

bool LaneRulesLayer::isLaneTransitionAttributeMapsSet() const
{
    return m_laneTransitionAttributeMaps_.hasValue();
}

void LaneRulesLayer::resetLaneTransitionAttributeMaps()
{
    m_laneTransitionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesLaneRangeAttributeSetList& LaneRulesLayer::getLaneRangeAttributeSets()
{
    return m_laneRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesLaneRangeAttributeSetList& LaneRulesLayer::getLaneRangeAttributeSets() const
{
    return m_laneRangeAttributeSets_.value();
}

void LaneRulesLayer::setLaneRangeAttributeSets(const ::nds::rules::instantiations::RulesLaneRangeAttributeSetList& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = laneRangeAttributeSets_;
}

void LaneRulesLayer::setLaneRangeAttributeSets(::nds::rules::instantiations::RulesLaneRangeAttributeSetList&& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = ::std::move(laneRangeAttributeSets_);
}

bool LaneRulesLayer::isLaneRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRulesLayer::isLaneRangeAttributeSetsSet() const
{
    return m_laneRangeAttributeSets_.hasValue();
}

void LaneRulesLayer::resetLaneRangeAttributeSets()
{
    m_laneRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesLanePositionAttributeSetList& LaneRulesLayer::getLanePositionAttributeSets()
{
    return m_lanePositionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesLanePositionAttributeSetList& LaneRulesLayer::getLanePositionAttributeSets() const
{
    return m_lanePositionAttributeSets_.value();
}

void LaneRulesLayer::setLanePositionAttributeSets(const ::nds::rules::instantiations::RulesLanePositionAttributeSetList& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = lanePositionAttributeSets_;
}

void LaneRulesLayer::setLanePositionAttributeSets(::nds::rules::instantiations::RulesLanePositionAttributeSetList&& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = ::std::move(lanePositionAttributeSets_);
}

bool LaneRulesLayer::isLanePositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneRulesLayer::isLanePositionAttributeSetsSet() const
{
    return m_lanePositionAttributeSets_.hasValue();
}

void LaneRulesLayer::resetLanePositionAttributeSets()
{
    m_lanePositionAttributeSets_.reset();
}

::nds::rules::instantiations::RulesLaneTransitionAttributeSetList& LaneRulesLayer::getLaneTransitionAttributeSets()
{
    return m_laneTransitionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesLaneTransitionAttributeSetList& LaneRulesLayer::getLaneTransitionAttributeSets() const
{
    return m_laneTransitionAttributeSets_.value();
}

void LaneRulesLayer::setLaneTransitionAttributeSets(const ::nds::rules::instantiations::RulesLaneTransitionAttributeSetList& laneTransitionAttributeSets_)
{
    m_laneTransitionAttributeSets_ = laneTransitionAttributeSets_;
}

void LaneRulesLayer::setLaneTransitionAttributeSets(::nds::rules::instantiations::RulesLaneTransitionAttributeSetList&& laneTransitionAttributeSets_)
{
    m_laneTransitionAttributeSets_ = ::std::move(laneTransitionAttributeSets_);
}

bool LaneRulesLayer::isLaneTransitionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS);
}

bool LaneRulesLayer::isLaneTransitionAttributeSetsSet() const
{
    return m_laneTransitionAttributeSets_.hasValue();
}

void LaneRulesLayer::resetLaneTransitionAttributeSets()
{
    m_laneTransitionAttributeSets_.reset();
}

::nds::system::types::LayerType LaneRulesLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneRulesLayer::initPackingContext(LaneRulesLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_laneRangeAttributeMaps_.value().initPackingContext(context.getLaneRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_lanePositionAttributeMaps_.value().initPackingContext(context.getLanePositionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        m_laneTransitionAttributeMaps_.value().initPackingContext(context.getLaneTransitionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeSets_.value().initPackingContext(context.getLaneRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeSets_.value().initPackingContext(context.getLanePositionAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        m_laneTransitionAttributeSets_.value().initPackingContext(context.getLaneTransitionAttributeSets());
    }
}

size_t LaneRulesLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_laneTransitionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayer::bitSizeOf(LaneRulesLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition += m_laneTransitionAttributeMaps_.value().bitSizeOf(context.getLaneTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(context.getLanePositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition += m_laneTransitionAttributeSets_.value().bitSizeOf(context.getLaneTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_laneTransitionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneRulesLayer::initializeOffsets(LaneRulesLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        endBitPosition = m_laneTransitionAttributeMaps_.value().initializeOffsets(context.getLaneTransitionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(context.getLanePositionAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        endBitPosition = m_laneTransitionAttributeSets_.value().initializeOffsets(context.getLaneTransitionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneRulesLayer::operator==(const LaneRulesLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMapsUsed() ? !other.isLaneRangeAttributeMapsUsed() : (m_laneRangeAttributeMaps_ == other.m_laneRangeAttributeMaps_)) &&
                (!isLanePositionAttributeMapsUsed() ? !other.isLanePositionAttributeMapsUsed() : (m_lanePositionAttributeMaps_ == other.m_lanePositionAttributeMaps_)) &&
                (!isLaneTransitionAttributeMapsUsed() ? !other.isLaneTransitionAttributeMapsUsed() : (m_laneTransitionAttributeMaps_ == other.m_laneTransitionAttributeMaps_)) &&
                (!isLaneRangeAttributeSetsUsed() ? !other.isLaneRangeAttributeSetsUsed() : (m_laneRangeAttributeSets_ == other.m_laneRangeAttributeSets_)) &&
                (!isLanePositionAttributeSetsUsed() ? !other.isLanePositionAttributeSetsUsed() : (m_lanePositionAttributeSets_ == other.m_lanePositionAttributeSets_)) &&
                (!isLaneTransitionAttributeSetsUsed() ? !other.isLaneTransitionAttributeSetsUsed() : (m_laneTransitionAttributeSets_ == other.m_laneTransitionAttributeSets_));
    }

    return true;
}

uint32_t LaneRulesLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMaps_);
    if (isLanePositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMaps_);
    if (isLaneTransitionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeMaps_);
    if (isLaneRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeSets_);
    if (isLanePositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeSets_);
    if (isLaneTransitionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneTransitionAttributeSets_);

    return result;
}

void LaneRulesLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_laneTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeMaps: ") <<
                    m_laneTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_laneTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeSets: ") <<
                    m_laneTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeSets_.value().write(out);
    }
}

void LaneRulesLayer::write(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(context.getLaneRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(context.getLanePositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        // check parameters
        if (m_laneTransitionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeMaps: ") <<
                    m_laneTransitionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeMaps_.value().write(context.getLaneTransitionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(context.getLaneRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(context.getLanePositionAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        // check parameters
        if (m_laneTransitionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayer.laneTransitionAttributeSets: ") <<
                    m_laneTransitionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneTransitionAttributeSets_.value().write(context.getLaneTransitionAttributeSets(), out);
    }
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(in);
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayer::readContent(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList> LaneRulesLayer::readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList>(::nds::rules::instantiations::RulesLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList> LaneRulesLayer::readLaneRangeAttributeMaps(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList>(::nds::rules::instantiations::RulesLaneRangeAttributeMapList(context.getLaneRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList> LaneRulesLayer::readLanePositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList>(::nds::rules::instantiations::RulesLanePositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList> LaneRulesLayer::readLanePositionAttributeMaps(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList>(::nds::rules::instantiations::RulesLanePositionAttributeMapList(context.getLanePositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList> LaneRulesLayer::readLaneTransitionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList>(::nds::rules::instantiations::RulesLaneTransitionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList> LaneRulesLayer::readLaneTransitionAttributeMaps(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList>(::nds::rules::instantiations::RulesLaneTransitionAttributeMapList(context.getLaneTransitionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList> LaneRulesLayer::readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList>(::nds::rules::instantiations::RulesLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList> LaneRulesLayer::readLaneRangeAttributeSets(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList>(::nds::rules::instantiations::RulesLaneRangeAttributeSetList(context.getLaneRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList> LaneRulesLayer::readLanePositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList>(::nds::rules::instantiations::RulesLanePositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList> LaneRulesLayer::readLanePositionAttributeSets(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList>(::nds::rules::instantiations::RulesLanePositionAttributeSetList(context.getLanePositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLanePositionAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList> LaneRulesLayer::readLaneTransitionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList>(::nds::rules::instantiations::RulesLaneTransitionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList> LaneRulesLayer::readLaneTransitionAttributeSets(LaneRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_TRANSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList>(::nds::rules::instantiations::RulesLaneTransitionAttributeSetList(context.getLaneTransitionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesLaneTransitionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/LaneRulesLayerIndirect.h>
#include <nds/rules/metadata/LaneRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

LaneRulesLayerIndirect::LaneRulesLayerIndirect(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::LaneRulesLayerContent()),
        m_laneRangeAttributeMaps_(::zserio::NullOpt),
        m_lanePositionAttributeMaps_(::zserio::NullOpt),
        m_laneRangeAttributeSets_(::zserio::NullOpt),
        m_lanePositionAttributeSets_(::zserio::NullOpt)
{
}

LaneRulesLayerIndirect::LaneRulesLayerIndirect(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(in, allocator))
{
}

LaneRulesLayerIndirect::LaneRulesLayerIndirect(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_laneRangeAttributeMaps_(readLaneRangeAttributeMaps(context, in, allocator)),
        m_lanePositionAttributeMaps_(readLanePositionAttributeMaps(context, in, allocator)),
        m_laneRangeAttributeSets_(readLaneRangeAttributeSets(context, in, allocator)),
        m_lanePositionAttributeSets_(readLanePositionAttributeSets(context, in, allocator))
{
}

LaneRulesLayerIndirect::LaneRulesLayerIndirect(const LaneRulesLayerIndirect& other) :
        m_content_(other.m_content_),
        m_laneRangeAttributeMaps_(other.m_laneRangeAttributeMaps_),
        m_lanePositionAttributeMaps_(other.m_lanePositionAttributeMaps_),
        m_laneRangeAttributeSets_(other.m_laneRangeAttributeSets_),
        m_lanePositionAttributeSets_(other.m_lanePositionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRulesLayerIndirect& LaneRulesLayerIndirect::operator=(const LaneRulesLayerIndirect& other)
{
    m_content_ = other.m_content_;
    m_laneRangeAttributeMaps_ = other.m_laneRangeAttributeMaps_;
    m_lanePositionAttributeMaps_ = other.m_lanePositionAttributeMaps_;
    m_laneRangeAttributeSets_ = other.m_laneRangeAttributeSets_;
    m_lanePositionAttributeSets_ = other.m_lanePositionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRulesLayerIndirect::LaneRulesLayerIndirect(LaneRulesLayerIndirect&& other) :
        m_content_(::std::move(other.m_content_)),
        m_laneRangeAttributeMaps_(::std::move(other.m_laneRangeAttributeMaps_)),
        m_lanePositionAttributeMaps_(::std::move(other.m_lanePositionAttributeMaps_)),
        m_laneRangeAttributeSets_(::std::move(other.m_laneRangeAttributeSets_)),
        m_lanePositionAttributeSets_(::std::move(other.m_lanePositionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

LaneRulesLayerIndirect& LaneRulesLayerIndirect::operator=(LaneRulesLayerIndirect&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_laneRangeAttributeMaps_ = ::std::move(other.m_laneRangeAttributeMaps_);
    m_lanePositionAttributeMaps_ = ::std::move(other.m_lanePositionAttributeMaps_);
    m_laneRangeAttributeSets_ = ::std::move(other.m_laneRangeAttributeSets_);
    m_lanePositionAttributeSets_ = ::std::move(other.m_lanePositionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

LaneRulesLayerIndirect::LaneRulesLayerIndirect(::zserio::PropagateAllocatorT,
        const LaneRulesLayerIndirect& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_laneRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeMaps_, allocator)),
        m_lanePositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeMaps_, allocator)),
        m_laneRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_laneRangeAttributeSets_, allocator)),
        m_lanePositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_lanePositionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void LaneRulesLayerIndirect::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
        m_laneRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
        m_lanePositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
        m_laneRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
        m_lanePositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(0));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirect::getContent() const
{
    return m_content_;
}

void LaneRulesLayerIndirect::setContent(::nds::rules::metadata::LaneRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList& LaneRulesLayerIndirect::getLaneRangeAttributeMaps()
{
    return m_laneRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList& LaneRulesLayerIndirect::getLaneRangeAttributeMaps() const
{
    return m_laneRangeAttributeMaps_.value();
}

void LaneRulesLayerIndirect::setLaneRangeAttributeMaps(const ::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = laneRangeAttributeMaps_;
}

void LaneRulesLayerIndirect::setLaneRangeAttributeMaps(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList&& laneRangeAttributeMaps_)
{
    m_laneRangeAttributeMaps_ = ::std::move(laneRangeAttributeMaps_);
}

bool LaneRulesLayerIndirect::isLaneRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS);
}

bool LaneRulesLayerIndirect::isLaneRangeAttributeMapsSet() const
{
    return m_laneRangeAttributeMaps_.hasValue();
}

void LaneRulesLayerIndirect::resetLaneRangeAttributeMaps()
{
    m_laneRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList& LaneRulesLayerIndirect::getLanePositionAttributeMaps()
{
    return m_lanePositionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList& LaneRulesLayerIndirect::getLanePositionAttributeMaps() const
{
    return m_lanePositionAttributeMaps_.value();
}

void LaneRulesLayerIndirect::setLanePositionAttributeMaps(const ::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = lanePositionAttributeMaps_;
}

void LaneRulesLayerIndirect::setLanePositionAttributeMaps(::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList&& lanePositionAttributeMaps_)
{
    m_lanePositionAttributeMaps_ = ::std::move(lanePositionAttributeMaps_);
}

bool LaneRulesLayerIndirect::isLanePositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS);
}

bool LaneRulesLayerIndirect::isLanePositionAttributeMapsSet() const
{
    return m_lanePositionAttributeMaps_.hasValue();
}

void LaneRulesLayerIndirect::resetLanePositionAttributeMaps()
{
    m_lanePositionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList& LaneRulesLayerIndirect::getLaneRangeAttributeSets()
{
    return m_laneRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList& LaneRulesLayerIndirect::getLaneRangeAttributeSets() const
{
    return m_laneRangeAttributeSets_.value();
}

void LaneRulesLayerIndirect::setLaneRangeAttributeSets(const ::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = laneRangeAttributeSets_;
}

void LaneRulesLayerIndirect::setLaneRangeAttributeSets(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList&& laneRangeAttributeSets_)
{
    m_laneRangeAttributeSets_ = ::std::move(laneRangeAttributeSets_);
}

bool LaneRulesLayerIndirect::isLaneRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS);
}

bool LaneRulesLayerIndirect::isLaneRangeAttributeSetsSet() const
{
    return m_laneRangeAttributeSets_.hasValue();
}

void LaneRulesLayerIndirect::resetLaneRangeAttributeSets()
{
    m_laneRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList& LaneRulesLayerIndirect::getLanePositionAttributeSets()
{
    return m_lanePositionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList& LaneRulesLayerIndirect::getLanePositionAttributeSets() const
{
    return m_lanePositionAttributeSets_.value();
}

void LaneRulesLayerIndirect::setLanePositionAttributeSets(const ::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = lanePositionAttributeSets_;
}

void LaneRulesLayerIndirect::setLanePositionAttributeSets(::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList&& lanePositionAttributeSets_)
{
    m_lanePositionAttributeSets_ = ::std::move(lanePositionAttributeSets_);
}

bool LaneRulesLayerIndirect::isLanePositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS);
}

bool LaneRulesLayerIndirect::isLanePositionAttributeSetsSet() const
{
    return m_lanePositionAttributeSets_.hasValue();
}

void LaneRulesLayerIndirect::resetLanePositionAttributeSets()
{
    m_lanePositionAttributeSets_.reset();
}

::nds::system::types::LayerType LaneRulesLayerIndirect::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void LaneRulesLayerIndirect::initPackingContext(LaneRulesLayerIndirect::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        m_laneRangeAttributeMaps_.value().initPackingContext(context.getLaneRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        m_lanePositionAttributeMaps_.value().initPackingContext(context.getLanePositionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        m_laneRangeAttributeSets_.value().initPackingContext(context.getLaneRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        m_lanePositionAttributeSets_.value().initPackingContext(context.getLanePositionAttributeSets());
    }
}

size_t LaneRulesLayerIndirect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerIndirect::bitSizeOf(LaneRulesLayerIndirect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition += m_laneRangeAttributeMaps_.value().bitSizeOf(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition += m_lanePositionAttributeMaps_.value().bitSizeOf(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition += m_laneRangeAttributeSets_.value().bitSizeOf(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition += m_lanePositionAttributeSets_.value().bitSizeOf(context.getLanePositionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t LaneRulesLayerIndirect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t LaneRulesLayerIndirect::initializeOffsets(LaneRulesLayerIndirect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        endBitPosition = m_laneRangeAttributeMaps_.value().initializeOffsets(context.getLaneRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        endBitPosition = m_lanePositionAttributeMaps_.value().initializeOffsets(context.getLanePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        endBitPosition = m_laneRangeAttributeSets_.value().initializeOffsets(context.getLaneRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        endBitPosition = m_lanePositionAttributeSets_.value().initializeOffsets(context.getLanePositionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool LaneRulesLayerIndirect::operator==(const LaneRulesLayerIndirect& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (!isLaneRangeAttributeMapsUsed() ? !other.isLaneRangeAttributeMapsUsed() : (m_laneRangeAttributeMaps_ == other.m_laneRangeAttributeMaps_)) &&
                (!isLanePositionAttributeMapsUsed() ? !other.isLanePositionAttributeMapsUsed() : (m_lanePositionAttributeMaps_ == other.m_lanePositionAttributeMaps_)) &&
                (!isLaneRangeAttributeSetsUsed() ? !other.isLaneRangeAttributeSetsUsed() : (m_laneRangeAttributeSets_ == other.m_laneRangeAttributeSets_)) &&
                (!isLanePositionAttributeSetsUsed() ? !other.isLanePositionAttributeSetsUsed() : (m_lanePositionAttributeSets_ == other.m_lanePositionAttributeSets_));
    }

    return true;
}

uint32_t LaneRulesLayerIndirect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    if (isLaneRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeMaps_);
    if (isLanePositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeMaps_);
    if (isLaneRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_laneRangeAttributeSets_);
    if (isLanePositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_lanePositionAttributeSets_);

    return result;
}

void LaneRulesLayerIndirect::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(out);
    }
}

void LaneRulesLayerIndirect::write(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        // check parameters
        if (m_laneRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.laneRangeAttributeMaps: ") <<
                    m_laneRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeMaps_.value().write(context.getLaneRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        // check parameters
        if (m_lanePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.lanePositionAttributeMaps: ") <<
                    m_lanePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeMaps_.value().write(context.getLanePositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        // check parameters
        if (m_laneRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.laneRangeAttributeSets: ") <<
                    m_laneRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_laneRangeAttributeSets_.value().write(context.getLaneRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        // check parameters
        if (m_lanePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(0))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field LaneRulesLayerIndirect.lanePositionAttributeSets: ") <<
                    m_lanePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(0) << "!";
        }
        m_lanePositionAttributeSets_.value().write(context.getLanePositionAttributeSets(), out);
    }
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirect::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(in);
}

::nds::rules::metadata::LaneRulesLayerContent LaneRulesLayerIndirect::readContent(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::LaneRulesLayerContent(context.getContent(), in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList> LaneRulesLayerIndirect::readLaneRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList>(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList> LaneRulesLayerIndirect::readLaneRangeAttributeMaps(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList>(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList(context.getLaneRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList> LaneRulesLayerIndirect::readLanePositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList>(::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList> LaneRulesLayerIndirect::readLanePositionAttributeMaps(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList>(::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList(context.getLanePositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList> LaneRulesLayerIndirect::readLaneRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList>(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList> LaneRulesLayerIndirect::readLaneRangeAttributeSets(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList>(::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList(context.getLaneRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLaneRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList> LaneRulesLayerIndirect::readLanePositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList>(::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList> LaneRulesLayerIndirect::readLanePositionAttributeSets(LaneRulesLayerIndirect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS) == ::nds::rules::metadata::LaneRulesLayerContent::Values::LANE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList>(::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList(context.getLanePositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(0), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesIndirectLanePositionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/ArrayTraits.h>

#include <nds/rules/layer/DisplayLineRulesLayer.h>
#include <nds/rules/metadata/DisplayLineRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

DisplayLineRulesLayer::DisplayLineRulesLayer(const allocator_type&) noexcept :
        m_areChildrenInitialized(false),
        m_content_(::nds::rules::metadata::DisplayLineRulesLayerContent()),
        m_shift_(::nds::core::geometry::CoordShift()),
        m_displayLineRangeAttributeMaps_(::zserio::NullOpt),
        m_displayLinePositionAttributeMaps_(::zserio::NullOpt),
        m_displayLineRangeAttributeSets_(::zserio::NullOpt),
        m_displayLinePositionAttributeSets_(::zserio::NullOpt)
{
}

DisplayLineRulesLayer::DisplayLineRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(in)),
        m_shift_(readShift(in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(in, allocator)),
        m_displayLinePositionAttributeMaps_(readDisplayLinePositionAttributeMaps(in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(in, allocator)),
        m_displayLinePositionAttributeSets_(readDisplayLinePositionAttributeSets(in, allocator))
{
}

DisplayLineRulesLayer::DisplayLineRulesLayer(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_areChildrenInitialized(true),
        m_content_(readContent(context, in)),
        m_shift_(readShift(context, in)),
        m_displayLineRangeAttributeMaps_(readDisplayLineRangeAttributeMaps(context, in, allocator)),
        m_displayLinePositionAttributeMaps_(readDisplayLinePositionAttributeMaps(context, in, allocator)),
        m_displayLineRangeAttributeSets_(readDisplayLineRangeAttributeSets(context, in, allocator)),
        m_displayLinePositionAttributeSets_(readDisplayLinePositionAttributeSets(context, in, allocator))
{
}

DisplayLineRulesLayer::DisplayLineRulesLayer(const DisplayLineRulesLayer& other) :
        m_content_(other.m_content_),
        m_shift_(other.m_shift_),
        m_displayLineRangeAttributeMaps_(other.m_displayLineRangeAttributeMaps_),
        m_displayLinePositionAttributeMaps_(other.m_displayLinePositionAttributeMaps_),
        m_displayLineRangeAttributeSets_(other.m_displayLineRangeAttributeSets_),
        m_displayLinePositionAttributeSets_(other.m_displayLinePositionAttributeSets_)
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayLineRulesLayer& DisplayLineRulesLayer::operator=(const DisplayLineRulesLayer& other)
{
    m_content_ = other.m_content_;
    m_shift_ = other.m_shift_;
    m_displayLineRangeAttributeMaps_ = other.m_displayLineRangeAttributeMaps_;
    m_displayLinePositionAttributeMaps_ = other.m_displayLinePositionAttributeMaps_;
    m_displayLineRangeAttributeSets_ = other.m_displayLineRangeAttributeSets_;
    m_displayLinePositionAttributeSets_ = other.m_displayLinePositionAttributeSets_;
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayLineRulesLayer::DisplayLineRulesLayer(DisplayLineRulesLayer&& other) :
        m_content_(::std::move(other.m_content_)),
        m_shift_(::std::move(other.m_shift_)),
        m_displayLineRangeAttributeMaps_(::std::move(other.m_displayLineRangeAttributeMaps_)),
        m_displayLinePositionAttributeMaps_(::std::move(other.m_displayLinePositionAttributeMaps_)),
        m_displayLineRangeAttributeSets_(::std::move(other.m_displayLineRangeAttributeSets_)),
        m_displayLinePositionAttributeSets_(::std::move(other.m_displayLinePositionAttributeSets_))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

DisplayLineRulesLayer& DisplayLineRulesLayer::operator=(DisplayLineRulesLayer&& other)
{
    m_content_ = ::std::move(other.m_content_);
    m_shift_ = ::std::move(other.m_shift_);
    m_displayLineRangeAttributeMaps_ = ::std::move(other.m_displayLineRangeAttributeMaps_);
    m_displayLinePositionAttributeMaps_ = ::std::move(other.m_displayLinePositionAttributeMaps_);
    m_displayLineRangeAttributeSets_ = ::std::move(other.m_displayLineRangeAttributeSets_);
    m_displayLinePositionAttributeSets_ = ::std::move(other.m_displayLinePositionAttributeSets_);
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;

    return *this;
}

DisplayLineRulesLayer::DisplayLineRulesLayer(::zserio::PropagateAllocatorT,
        const DisplayLineRulesLayer& other, const allocator_type& allocator) :
        m_content_(::zserio::allocatorPropagatingCopy(other.m_content_, allocator)),
        m_shift_(::zserio::allocatorPropagatingCopy(other.m_shift_, allocator)),
        m_displayLineRangeAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeMaps_, allocator)),
        m_displayLinePositionAttributeMaps_(::zserio::allocatorPropagatingCopy(other.m_displayLinePositionAttributeMaps_, allocator)),
        m_displayLineRangeAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayLineRangeAttributeSets_, allocator)),
        m_displayLinePositionAttributeSets_(::zserio::allocatorPropagatingCopy(other.m_displayLinePositionAttributeSets_, allocator))
{
    if (other.m_areChildrenInitialized)
        initializeChildren();
    else
        m_areChildrenInitialized = false;
}

void DisplayLineRulesLayer::initializeChildren()
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
        m_displayLineRangeAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
        m_displayLinePositionAttributeMaps_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
        m_displayLineRangeAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
        m_displayLinePositionAttributeSets_.value().initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));

    m_areChildrenInitialized = true;
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayer::getContent() const
{
    return m_content_;
}

void DisplayLineRulesLayer::setContent(::nds::rules::metadata::DisplayLineRulesLayerContent content_)
{
    m_content_ = content_;
}

::nds::core::geometry::CoordShift DisplayLineRulesLayer::getShift() const
{
    return m_shift_;
}

void DisplayLineRulesLayer::setShift(::nds::core::geometry::CoordShift shift_)
{
    m_shift_ = shift_;
}

::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList& DisplayLineRulesLayer::getDisplayLineRangeAttributeMaps()
{
    return m_displayLineRangeAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList& DisplayLineRulesLayer::getDisplayLineRangeAttributeMaps() const
{
    return m_displayLineRangeAttributeMaps_.value();
}

void DisplayLineRulesLayer::setDisplayLineRangeAttributeMaps(const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = displayLineRangeAttributeMaps_;
}

void DisplayLineRulesLayer::setDisplayLineRangeAttributeMaps(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList&& displayLineRangeAttributeMaps_)
{
    m_displayLineRangeAttributeMaps_ = ::std::move(displayLineRangeAttributeMaps_);
}

bool DisplayLineRulesLayer::isDisplayLineRangeAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS);
}

bool DisplayLineRulesLayer::isDisplayLineRangeAttributeMapsSet() const
{
    return m_displayLineRangeAttributeMaps_.hasValue();
}

void DisplayLineRulesLayer::resetDisplayLineRangeAttributeMaps()
{
    m_displayLineRangeAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList& DisplayLineRulesLayer::getDisplayLinePositionAttributeMaps()
{
    return m_displayLinePositionAttributeMaps_.value();
}

const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList& DisplayLineRulesLayer::getDisplayLinePositionAttributeMaps() const
{
    return m_displayLinePositionAttributeMaps_.value();
}

void DisplayLineRulesLayer::setDisplayLinePositionAttributeMaps(const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList& displayLinePositionAttributeMaps_)
{
    m_displayLinePositionAttributeMaps_ = displayLinePositionAttributeMaps_;
}

void DisplayLineRulesLayer::setDisplayLinePositionAttributeMaps(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList&& displayLinePositionAttributeMaps_)
{
    m_displayLinePositionAttributeMaps_ = ::std::move(displayLinePositionAttributeMaps_);
}

bool DisplayLineRulesLayer::isDisplayLinePositionAttributeMapsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS);
}

bool DisplayLineRulesLayer::isDisplayLinePositionAttributeMapsSet() const
{
    return m_displayLinePositionAttributeMaps_.hasValue();
}

void DisplayLineRulesLayer::resetDisplayLinePositionAttributeMaps()
{
    m_displayLinePositionAttributeMaps_.reset();
}

::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList& DisplayLineRulesLayer::getDisplayLineRangeAttributeSets()
{
    return m_displayLineRangeAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList& DisplayLineRulesLayer::getDisplayLineRangeAttributeSets() const
{
    return m_displayLineRangeAttributeSets_.value();
}

void DisplayLineRulesLayer::setDisplayLineRangeAttributeSets(const ::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = displayLineRangeAttributeSets_;
}

void DisplayLineRulesLayer::setDisplayLineRangeAttributeSets(::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList&& displayLineRangeAttributeSets_)
{
    m_displayLineRangeAttributeSets_ = ::std::move(displayLineRangeAttributeSets_);
}

bool DisplayLineRulesLayer::isDisplayLineRangeAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS);
}

bool DisplayLineRulesLayer::isDisplayLineRangeAttributeSetsSet() const
{
    return m_displayLineRangeAttributeSets_.hasValue();
}

void DisplayLineRulesLayer::resetDisplayLineRangeAttributeSets()
{
    m_displayLineRangeAttributeSets_.reset();
}

::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList& DisplayLineRulesLayer::getDisplayLinePositionAttributeSets()
{
    return m_displayLinePositionAttributeSets_.value();
}

const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList& DisplayLineRulesLayer::getDisplayLinePositionAttributeSets() const
{
    return m_displayLinePositionAttributeSets_.value();
}

void DisplayLineRulesLayer::setDisplayLinePositionAttributeSets(const ::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList& displayLinePositionAttributeSets_)
{
    m_displayLinePositionAttributeSets_ = displayLinePositionAttributeSets_;
}

void DisplayLineRulesLayer::setDisplayLinePositionAttributeSets(::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList&& displayLinePositionAttributeSets_)
{
    m_displayLinePositionAttributeSets_ = ::std::move(displayLinePositionAttributeSets_);
}

bool DisplayLineRulesLayer::isDisplayLinePositionAttributeSetsUsed() const
{
    return ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS);
}

bool DisplayLineRulesLayer::isDisplayLinePositionAttributeSetsSet() const
{
    return m_displayLinePositionAttributeSets_.hasValue();
}

void DisplayLineRulesLayer::resetDisplayLinePositionAttributeSets()
{
    m_displayLinePositionAttributeSets_.reset();
}

::nds::system::types::LayerType DisplayLineRulesLayer::funcGetLayerType() const
{
    return static_cast<::nds::system::types::LayerType>(::nds::system::types::LayerType::ATTRIBUTE);
}

void DisplayLineRulesLayer::initPackingContext(DisplayLineRulesLayer::ZserioPackingContext& context) const
{
    m_content_.initPackingContext(context.getContent());
    context.getShift().init<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        m_displayLineRangeAttributeMaps_.value().initPackingContext(context.getDisplayLineRangeAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        m_displayLinePositionAttributeMaps_.value().initPackingContext(context.getDisplayLinePositionAttributeMaps());
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        m_displayLineRangeAttributeSets_.value().initPackingContext(context.getDisplayLineRangeAttributeSets());
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        m_displayLinePositionAttributeSets_.value().initPackingContext(context.getDisplayLinePositionAttributeSets());
    }
}

size_t DisplayLineRulesLayer::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        endBitPosition += m_displayLinePositionAttributeMaps_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeSets_.value().bitSizeOf(endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineRulesLayer::bitSizeOf(DisplayLineRulesLayer::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_content_.bitSizeOf(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition += m_displayLineRangeAttributeMaps_.value().bitSizeOf(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        endBitPosition += m_displayLinePositionAttributeMaps_.value().bitSizeOf(context.getDisplayLinePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition += m_displayLineRangeAttributeSets_.value().bitSizeOf(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition += m_displayLinePositionAttributeSets_.value().bitSizeOf(context.getDisplayLinePositionAttributeSets(), endBitPosition);
    }

    return endBitPosition - bitPosition;
}

size_t DisplayLineRulesLayer::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(5);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        endBitPosition = m_displayLinePositionAttributeMaps_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeSets_.value().initializeOffsets(endBitPosition);
    }

    return endBitPosition;
}

size_t DisplayLineRulesLayer::initializeOffsets(DisplayLineRulesLayer::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_content_.initializeOffsets(context.getContent(), endBitPosition);
    endBitPosition += context.getShift().bitSizeOf<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(m_shift_);
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        endBitPosition = m_displayLineRangeAttributeMaps_.value().initializeOffsets(context.getDisplayLineRangeAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        endBitPosition = m_displayLinePositionAttributeMaps_.value().initializeOffsets(context.getDisplayLinePositionAttributeMaps(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        endBitPosition = m_displayLineRangeAttributeSets_.value().initializeOffsets(context.getDisplayLineRangeAttributeSets(), endBitPosition);
    }
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        endBitPosition = m_displayLinePositionAttributeSets_.value().initializeOffsets(context.getDisplayLinePositionAttributeSets(), endBitPosition);
    }

    return endBitPosition;
}

bool DisplayLineRulesLayer::operator==(const DisplayLineRulesLayer& other) const
{
    if (this != &other)
    {
        return
                (m_content_ == other.m_content_) &&
                (m_shift_ == other.m_shift_) &&
                (!isDisplayLineRangeAttributeMapsUsed() ? !other.isDisplayLineRangeAttributeMapsUsed() : (m_displayLineRangeAttributeMaps_ == other.m_displayLineRangeAttributeMaps_)) &&
                (!isDisplayLinePositionAttributeMapsUsed() ? !other.isDisplayLinePositionAttributeMapsUsed() : (m_displayLinePositionAttributeMaps_ == other.m_displayLinePositionAttributeMaps_)) &&
                (!isDisplayLineRangeAttributeSetsUsed() ? !other.isDisplayLineRangeAttributeSetsUsed() : (m_displayLineRangeAttributeSets_ == other.m_displayLineRangeAttributeSets_)) &&
                (!isDisplayLinePositionAttributeSetsUsed() ? !other.isDisplayLinePositionAttributeSetsUsed() : (m_displayLinePositionAttributeSets_ == other.m_displayLinePositionAttributeSets_));
    }

    return true;
}

uint32_t DisplayLineRulesLayer::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_content_);
    result = ::zserio::calcHashCode(result, m_shift_);
    if (isDisplayLineRangeAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeMaps_);
    if (isDisplayLinePositionAttributeMapsUsed())
        result = ::zserio::calcHashCode(result, m_displayLinePositionAttributeMaps_);
    if (isDisplayLineRangeAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayLineRangeAttributeSets_);
    if (isDisplayLinePositionAttributeSetsUsed())
        result = ::zserio::calcHashCode(result, m_displayLinePositionAttributeSets_);

    return result;
}

void DisplayLineRulesLayer::write(::zserio::BitStreamWriter& out) const
{
    m_content_.write(out);

    out.writeBits(m_shift_, UINT8_C(5));

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        // check parameters
        if (m_displayLinePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLinePositionAttributeMaps: ") <<
                    m_displayLinePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLinePositionAttributeMaps_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        // check parameters
        if (m_displayLinePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLinePositionAttributeSets: ") <<
                    m_displayLinePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLinePositionAttributeSets_.value().write(out);
    }
}

void DisplayLineRulesLayer::write(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    m_content_.write(context.getContent(), out);

    context.getShift().write<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(out, m_shift_);

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        // check parameters
        if (m_displayLineRangeAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLineRangeAttributeMaps: ") <<
                    m_displayLineRangeAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeMaps_.value().write(context.getDisplayLineRangeAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        // check parameters
        if (m_displayLinePositionAttributeMaps_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLinePositionAttributeMaps: ") <<
                    m_displayLinePositionAttributeMaps_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLinePositionAttributeMaps_.value().write(context.getDisplayLinePositionAttributeMaps(), out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        // check parameters
        if (m_displayLineRangeAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLineRangeAttributeSets: ") <<
                    m_displayLineRangeAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLineRangeAttributeSets_.value().write(context.getDisplayLineRangeAttributeSets(), out);
    }

    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        // check parameters
        if (m_displayLinePositionAttributeSets_.value().getCoordShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
        {
            throw ::zserio::CppRuntimeException("Write: Wrong parameter coordShift for field DisplayLineRulesLayer.displayLinePositionAttributeSets: ") <<
                    m_displayLinePositionAttributeSets_.value().getCoordShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
        }
        m_displayLinePositionAttributeSets_.value().write(context.getDisplayLinePositionAttributeSets(), out);
    }
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayer::readContent(::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::DisplayLineRulesLayerContent(in);
}

::nds::rules::metadata::DisplayLineRulesLayerContent DisplayLineRulesLayer::readContent(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::nds::rules::metadata::DisplayLineRulesLayerContent(context.getContent(), in);
}
::nds::core::geometry::CoordShift DisplayLineRulesLayer::readShift(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::geometry::CoordShift>(in.readBits(UINT8_C(5)));
}

::nds::core::geometry::CoordShift DisplayLineRulesLayer::readShift(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getShift().read<::zserio::BitFieldArrayTraits<::nds::core::geometry::CoordShift, UINT8_C(5)>>(in);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList> DisplayLineRulesLayer::readDisplayLineRangeAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList> DisplayLineRulesLayer::readDisplayLineRangeAttributeMaps(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList(context.getDisplayLineRangeAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList> DisplayLineRulesLayer::readDisplayLinePositionAttributeMaps(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList> DisplayLineRulesLayer::readDisplayLinePositionAttributeMaps(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_MAPS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList(context.getDisplayLinePositionAttributeMaps(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeMapList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList> DisplayLineRulesLayer::readDisplayLineRangeAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList> DisplayLineRulesLayer::readDisplayLineRangeAttributeSets(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_RANGE_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList>(::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList(context.getDisplayLineRangeAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLineRangeAttributeSetList>(::zserio::NullOpt);
}
::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList> DisplayLineRulesLayer::readDisplayLinePositionAttributeSets(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList> DisplayLineRulesLayer::readDisplayLinePositionAttributeSets(DisplayLineRulesLayer::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    if ((getContent() & ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS) == ::nds::rules::metadata::DisplayLineRulesLayerContent::Values::DISPLAY_LINE_POSITION_SETS)
    {
        return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList>(::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList(context.getDisplayLinePositionAttributeSets(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator));
    }

    return ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesDisplayLinePositionAttributeSetList>(::zserio::NullOpt);
}

} // namespace layer
} // namespace rules
} // namespace nds
