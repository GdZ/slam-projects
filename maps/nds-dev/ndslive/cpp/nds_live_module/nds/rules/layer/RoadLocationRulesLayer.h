/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_LAYER_ROAD_LOCATION_RULES_LAYER_H
#define NDS_RULES_LAYER_ROAD_LOCATION_RULES_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/rules/instantiations/RulesRoadLocationRangeAttributeMapList.h>
#include <nds/rules/instantiations/RulesRoadLocationRangeAttributeSetList.h>
#include <nds/rules/instantiations/RulesRoadLocationTransitionAttributeMapList.h>
#include <nds/rules/instantiations/RulesRoadLocationTransitionAttributeSetList.h>
#include <nds/rules/metadata/RoadLocationRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

class RoadLocationRulesLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList::ZserioPackingContext& getRoadLocationRangeAttributeMaps()
        {
            return m_roadLocationRangeAttributeMaps_;
        }

        ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList::ZserioPackingContext& getRoadLocationTransitionAttributeMaps()
        {
            return m_roadLocationTransitionAttributeMaps_;
        }

        ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList::ZserioPackingContext& getRoadLocationRangeAttributeSets()
        {
            return m_roadLocationRangeAttributeSets_;
        }

        ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList::ZserioPackingContext& getRoadLocationTransitionAttributeSets()
        {
            return m_roadLocationTransitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList::ZserioPackingContext m_roadLocationRangeAttributeMaps_;
        ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList::ZserioPackingContext m_roadLocationTransitionAttributeMaps_;
        ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList::ZserioPackingContext m_roadLocationRangeAttributeSets_;
        ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList::ZserioPackingContext m_roadLocationTransitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationRulesLayer() noexcept :
            RoadLocationRulesLayer(allocator_type())
    {}

    explicit RoadLocationRulesLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadLocationRangeAttributeMaps = ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList,
            typename ZSERIO_T_roadLocationTransitionAttributeMaps = ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList,
            typename ZSERIO_T_roadLocationRangeAttributeSets = ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList,
            typename ZSERIO_T_roadLocationTransitionAttributeSets = ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList>
    RoadLocationRulesLayer(
            ::nds::rules::metadata::RoadLocationRulesLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_roadLocationRangeAttributeMaps&& roadLocationRangeAttributeMaps_,
            ZSERIO_T_roadLocationTransitionAttributeMaps&& roadLocationTransitionAttributeMaps_,
            ZSERIO_T_roadLocationRangeAttributeSets&& roadLocationRangeAttributeSets_,
            ZSERIO_T_roadLocationTransitionAttributeSets&& roadLocationTransitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationRulesLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_roadLocationRangeAttributeMaps_ = ::std::forward<ZSERIO_T_roadLocationRangeAttributeMaps>(roadLocationRangeAttributeMaps_);
        m_roadLocationTransitionAttributeMaps_ = ::std::forward<ZSERIO_T_roadLocationTransitionAttributeMaps>(roadLocationTransitionAttributeMaps_);
        m_roadLocationRangeAttributeSets_ = ::std::forward<ZSERIO_T_roadLocationRangeAttributeSets>(roadLocationRangeAttributeSets_);
        m_roadLocationTransitionAttributeSets_ = ::std::forward<ZSERIO_T_roadLocationTransitionAttributeSets>(roadLocationTransitionAttributeSets_);
    }

    explicit RoadLocationRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationRulesLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationRulesLayer() = default;

    RoadLocationRulesLayer(const RoadLocationRulesLayer& other);
    RoadLocationRulesLayer& operator=(const RoadLocationRulesLayer& other);

    RoadLocationRulesLayer(RoadLocationRulesLayer&& other);
    RoadLocationRulesLayer& operator=(RoadLocationRulesLayer&& other);

    RoadLocationRulesLayer(::zserio::PropagateAllocatorT,
            const RoadLocationRulesLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::rules::metadata::RoadLocationRulesLayerContent getContent() const;
    void setContent(::nds::rules::metadata::RoadLocationRulesLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& getRoadLocationRangeAttributeMaps() const;
    ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& getRoadLocationRangeAttributeMaps();
    void setRoadLocationRangeAttributeMaps(const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList& roadLocationRangeAttributeMaps_);
    void setRoadLocationRangeAttributeMaps(::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList&& roadLocationRangeAttributeMaps_);
    bool isRoadLocationRangeAttributeMapsUsed() const;
    bool isRoadLocationRangeAttributeMapsSet() const;
    void resetRoadLocationRangeAttributeMaps();

    const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& getRoadLocationTransitionAttributeMaps() const;
    ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& getRoadLocationTransitionAttributeMaps();
    void setRoadLocationTransitionAttributeMaps(const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList& roadLocationTransitionAttributeMaps_);
    void setRoadLocationTransitionAttributeMaps(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList&& roadLocationTransitionAttributeMaps_);
    bool isRoadLocationTransitionAttributeMapsUsed() const;
    bool isRoadLocationTransitionAttributeMapsSet() const;
    void resetRoadLocationTransitionAttributeMaps();

    const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& getRoadLocationRangeAttributeSets() const;
    ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& getRoadLocationRangeAttributeSets();
    void setRoadLocationRangeAttributeSets(const ::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList& roadLocationRangeAttributeSets_);
    void setRoadLocationRangeAttributeSets(::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList&& roadLocationRangeAttributeSets_);
    bool isRoadLocationRangeAttributeSetsUsed() const;
    bool isRoadLocationRangeAttributeSetsSet() const;
    void resetRoadLocationRangeAttributeSets();

    const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& getRoadLocationTransitionAttributeSets() const;
    ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& getRoadLocationTransitionAttributeSets();
    void setRoadLocationTransitionAttributeSets(const ::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList& roadLocationTransitionAttributeSets_);
    void setRoadLocationTransitionAttributeSets(::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList&& roadLocationTransitionAttributeSets_);
    bool isRoadLocationTransitionAttributeSetsUsed() const;
    bool isRoadLocationTransitionAttributeSetsSet() const;
    void resetRoadLocationTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationRulesLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::rules::metadata::RoadLocationRulesLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::rules::metadata::RoadLocationRulesLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList> readRoadLocationRangeAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList> readRoadLocationRangeAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList> readRoadLocationTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList> readRoadLocationTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList> readRoadLocationRangeAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList> readRoadLocationRangeAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList> readRoadLocationTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList> readRoadLocationTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::rules::metadata::RoadLocationRulesLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeMapList> m_roadLocationRangeAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeMapList> m_roadLocationTransitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationRangeAttributeSetList> m_roadLocationRangeAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadLocationTransitionAttributeSetList> m_roadLocationTransitionAttributeSets_;
};

} // namespace layer
} // namespace rules
} // namespace nds

#endif // NDS_RULES_LAYER_ROAD_LOCATION_RULES_LAYER_H
