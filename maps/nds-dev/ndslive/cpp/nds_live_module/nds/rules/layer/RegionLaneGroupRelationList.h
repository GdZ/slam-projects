/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_LAYER_REGION_LANE_GROUP_RELATION_LIST_H
#define NDS_RULES_LAYER_REGION_LANE_GROUP_RELATION_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/lane/reference/types/LaneGroupId.h>
#include <nds/lane/reference/types/LaneGroupRangeValidity.h>

namespace nds
{
namespace rules
{
namespace layer
{

class RegionLaneGroupRelationList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumRelations()
        {
            return m_numRelations_;
        }

    private:
        ::zserio::DeltaContext m_numRelations_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegionLaneGroupRelationList() noexcept :
            RegionLaneGroupRelationList(allocator_type())
    {}

    explicit RegionLaneGroupRelationList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_laneGroupIds = ::zserio::vector<::nds::lane::reference::types::LaneGroupId>,
            typename ZSERIO_T_laneGroupRangeValidity = ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>>
    RegionLaneGroupRelationList(
            uint32_t numRelations_,
            ZSERIO_T_laneGroupIds&& laneGroupIds_,
            ZSERIO_T_laneGroupRangeValidity&& laneGroupRangeValidity_,
            const allocator_type& allocator = allocator_type()) :
            RegionLaneGroupRelationList(allocator)
    {
        m_numRelations_ = numRelations_;
        m_laneGroupIds_ = ZserioArrayType_laneGroupIds(::std::forward<ZSERIO_T_laneGroupIds>(laneGroupIds_));
        m_laneGroupRangeValidity_ = ZserioArrayType_laneGroupRangeValidity(::std::forward<ZSERIO_T_laneGroupRangeValidity>(laneGroupRangeValidity_));
    }

    explicit RegionLaneGroupRelationList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RegionLaneGroupRelationList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RegionLaneGroupRelationList() = default;

    RegionLaneGroupRelationList(const RegionLaneGroupRelationList& other);
    RegionLaneGroupRelationList& operator=(const RegionLaneGroupRelationList& other);

    RegionLaneGroupRelationList(RegionLaneGroupRelationList&& other);
    RegionLaneGroupRelationList& operator=(RegionLaneGroupRelationList&& other);

    RegionLaneGroupRelationList(::zserio::PropagateAllocatorT,
            const RegionLaneGroupRelationList& other, const allocator_type& allocator);

    void initializeChildren();

    uint32_t getNumRelations() const;
    void setNumRelations(uint32_t numRelations_);

    const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& getLaneGroupIds() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& getLaneGroupIds();
    void setLaneGroupIds(const ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& laneGroupIds_);
    void setLaneGroupIds(::zserio::vector<::nds::lane::reference::types::LaneGroupId>&& laneGroupIds_);

    const ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& getLaneGroupRangeValidity() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& getLaneGroupRangeValidity();
    void setLaneGroupRangeValidity(const ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& laneGroupRangeValidity_);
    void setLaneGroupRangeValidity(::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>&& laneGroupRangeValidity_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegionLaneGroupRelationList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_laneGroupIds
    {
    public:
        using OwnerType = RegionLaneGroupRelationList;

        static void create(RegionLaneGroupRelationList& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionLaneGroupRelationList& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupId>& array,
                ::nds::lane::reference::types::LaneGroupId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_laneGroupRangeValidity
    {
    public:
        using OwnerType = RegionLaneGroupRelationList;

        static void initializeElement(RegionLaneGroupRelationList& owner,
                ::nds::lane::reference::types::LaneGroupRangeValidity& element, size_t index);
    };

    class ZserioElementFactory_laneGroupRangeValidity
    {
    public:
        using OwnerType = RegionLaneGroupRelationList;

        static void create(RegionLaneGroupRelationList& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionLaneGroupRelationList& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>& array,
                ::nds::lane::reference::types::LaneGroupRangeValidity::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_laneGroupIds = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGroupId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGroupId, ZserioElementFactory_laneGroupIds>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_laneGroupRangeValidity = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGroupRangeValidity>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGroupRangeValidity, ZserioElementFactory_laneGroupRangeValidity>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_laneGroupRangeValidity>;

    uint32_t readNumRelations(::zserio::BitStreamReader& in);
    uint32_t readNumRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_laneGroupIds readLaneGroupIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_laneGroupIds readLaneGroupIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_laneGroupRangeValidity readLaneGroupRangeValidity(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_laneGroupRangeValidity readLaneGroupRangeValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    uint32_t m_numRelations_;
    ZserioArrayType_laneGroupIds m_laneGroupIds_;
    ZserioArrayType_laneGroupRangeValidity m_laneGroupRangeValidity_;
};

} // namespace layer
} // namespace rules
} // namespace nds

#endif // NDS_RULES_LAYER_REGION_LANE_GROUP_RELATION_LIST_H
