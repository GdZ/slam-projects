/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_LAYER_REGION_ROAD_RELATION_LIST_H
#define NDS_RULES_LAYER_REGION_ROAD_RELATION_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/road/reference/types/RoadRangeValidity.h>
#include <nds/road/reference/types/RoadReference.h>

namespace nds
{
namespace rules
{
namespace layer
{

class RegionRoadRelationList
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::zserio::DeltaContext& getNumRelations()
        {
            return m_numRelations_;
        }

    private:
        ::zserio::DeltaContext m_shift_;
        ::zserio::DeltaContext m_numRelations_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegionRoadRelationList() noexcept :
            RegionRoadRelationList(allocator_type())
    {}

    explicit RegionRoadRelationList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadIds = ::zserio::vector<::nds::road::reference::types::RoadReference>,
            typename ZSERIO_T_roadRangeValidity = ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>>
    RegionRoadRelationList(
            ::nds::core::geometry::CoordShift shift_,
            uint32_t numRelations_,
            ZSERIO_T_roadIds&& roadIds_,
            ZSERIO_T_roadRangeValidity&& roadRangeValidity_,
            const allocator_type& allocator = allocator_type()) :
            RegionRoadRelationList(allocator)
    {
        m_shift_ = shift_;
        m_numRelations_ = numRelations_;
        m_roadIds_ = ZserioArrayType_roadIds(::std::forward<ZSERIO_T_roadIds>(roadIds_));
        m_roadRangeValidity_ = ZserioArrayType_roadRangeValidity(::std::forward<ZSERIO_T_roadRangeValidity>(roadRangeValidity_));
    }

    explicit RegionRoadRelationList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RegionRoadRelationList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RegionRoadRelationList() = default;

    RegionRoadRelationList(const RegionRoadRelationList& other);
    RegionRoadRelationList& operator=(const RegionRoadRelationList& other);

    RegionRoadRelationList(RegionRoadRelationList&& other);
    RegionRoadRelationList& operator=(RegionRoadRelationList&& other);

    RegionRoadRelationList(::zserio::PropagateAllocatorT,
            const RegionRoadRelationList& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    uint32_t getNumRelations() const;
    void setNumRelations(uint32_t numRelations_);

    const ::zserio::vector<::nds::road::reference::types::RoadReference>& getRoadIds() const;
    ::zserio::vector<::nds::road::reference::types::RoadReference>& getRoadIds();
    void setRoadIds(const ::zserio::vector<::nds::road::reference::types::RoadReference>& roadIds_);
    void setRoadIds(::zserio::vector<::nds::road::reference::types::RoadReference>&& roadIds_);

    const ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& getRoadRangeValidity() const;
    ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& getRoadRangeValidity();
    void setRoadRangeValidity(const ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& roadRangeValidity_);
    void setRoadRangeValidity(::zserio::vector<::nds::road::reference::types::RoadRangeValidity>&& roadRangeValidity_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegionRoadRelationList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_roadIds
    {
    public:
        using OwnerType = RegionRoadRelationList;

        static void create(RegionRoadRelationList& owner,
                ::zserio::vector<::nds::road::reference::types::RoadReference>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionRoadRelationList& owner,
                ::zserio::vector<::nds::road::reference::types::RoadReference>& array,
                ::nds::road::reference::types::RoadReference::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_roadRangeValidity
    {
    public:
        using OwnerType = RegionRoadRelationList;

        static void initializeElement(RegionRoadRelationList& owner,
                ::nds::road::reference::types::RoadRangeValidity& element, size_t index);
    };

    class ZserioElementFactory_roadRangeValidity
    {
    public:
        using OwnerType = RegionRoadRelationList;

        static void create(RegionRoadRelationList& owner,
                ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionRoadRelationList& owner,
                ::zserio::vector<::nds::road::reference::types::RoadRangeValidity>& array,
                ::nds::road::reference::types::RoadRangeValidity::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_roadIds = ::zserio::Array<::zserio::vector<::nds::road::reference::types::RoadReference>, ::zserio::ObjectArrayTraits<::nds::road::reference::types::RoadReference, ZserioElementFactory_roadIds>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_roadRangeValidity = ::zserio::Array<::zserio::vector<::nds::road::reference::types::RoadRangeValidity>, ::zserio::ObjectArrayTraits<::nds::road::reference::types::RoadRangeValidity, ZserioElementFactory_roadRangeValidity>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_roadRangeValidity>;

    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readNumRelations(::zserio::BitStreamReader& in);
    uint32_t readNumRelations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_roadIds readRoadIds(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_roadIds readRoadIds(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_roadRangeValidity readRoadRangeValidity(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_roadRangeValidity readRoadRangeValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::CoordShift m_shift_;
    uint32_t m_numRelations_;
    ZserioArrayType_roadIds m_roadIds_;
    ZserioArrayType_roadRangeValidity m_roadRangeValidity_;
};

} // namespace layer
} // namespace rules
} // namespace nds

#endif // NDS_RULES_LAYER_REGION_ROAD_RELATION_LIST_H
