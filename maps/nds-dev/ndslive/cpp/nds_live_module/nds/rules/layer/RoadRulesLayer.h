/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_LAYER_ROAD_RULES_LAYER_H
#define NDS_RULES_LAYER_ROAD_RULES_LAYER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/rules/instantiations/RulesRoadPositionAttributeMapList.h>
#include <nds/rules/instantiations/RulesRoadPositionAttributeSetList.h>
#include <nds/rules/instantiations/RulesRoadRangeAttributeMapList.h>
#include <nds/rules/instantiations/RulesRoadRangeAttributeSetList.h>
#include <nds/rules/instantiations/RulesTransitionAttributeMapList.h>
#include <nds/rules/instantiations/RulesTransitionAttributeSetList.h>
#include <nds/rules/metadata/RoadRulesLayerContent.h>
#include <nds/system/types/LayerType.h>

namespace nds
{
namespace rules
{
namespace layer
{

class RoadRulesLayer
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getContent()
        {
            return m_content_;
        }

        ::zserio::DeltaContext& getShift()
        {
            return m_shift_;
        }

        ::nds::rules::instantiations::RulesRoadRangeAttributeMapList::ZserioPackingContext& getRoadRangeAttributeMaps()
        {
            return m_roadRangeAttributeMaps_;
        }

        ::nds::rules::instantiations::RulesRoadPositionAttributeMapList::ZserioPackingContext& getRoadPositionAttributeMaps()
        {
            return m_roadPositionAttributeMaps_;
        }

        ::nds::rules::instantiations::RulesTransitionAttributeMapList::ZserioPackingContext& getTransitionAttributeMaps()
        {
            return m_transitionAttributeMaps_;
        }

        ::nds::rules::instantiations::RulesRoadRangeAttributeSetList::ZserioPackingContext& getRoadRangeAttributeSets()
        {
            return m_roadRangeAttributeSets_;
        }

        ::nds::rules::instantiations::RulesRoadPositionAttributeSetList::ZserioPackingContext& getRoadPositionAttributeSets()
        {
            return m_roadPositionAttributeSets_;
        }

        ::nds::rules::instantiations::RulesTransitionAttributeSetList::ZserioPackingContext& getTransitionAttributeSets()
        {
            return m_transitionAttributeSets_;
        }

    private:
        ::zserio::DeltaContext m_content_;
        ::zserio::DeltaContext m_shift_;
        ::nds::rules::instantiations::RulesRoadRangeAttributeMapList::ZserioPackingContext m_roadRangeAttributeMaps_;
        ::nds::rules::instantiations::RulesRoadPositionAttributeMapList::ZserioPackingContext m_roadPositionAttributeMaps_;
        ::nds::rules::instantiations::RulesTransitionAttributeMapList::ZserioPackingContext m_transitionAttributeMaps_;
        ::nds::rules::instantiations::RulesRoadRangeAttributeSetList::ZserioPackingContext m_roadRangeAttributeSets_;
        ::nds::rules::instantiations::RulesRoadPositionAttributeSetList::ZserioPackingContext m_roadPositionAttributeSets_;
        ::nds::rules::instantiations::RulesTransitionAttributeSetList::ZserioPackingContext m_transitionAttributeSets_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadRulesLayer() noexcept :
            RoadRulesLayer(allocator_type())
    {}

    explicit RoadRulesLayer(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadRangeAttributeMaps = ::nds::rules::instantiations::RulesRoadRangeAttributeMapList,
            typename ZSERIO_T_roadPositionAttributeMaps = ::nds::rules::instantiations::RulesRoadPositionAttributeMapList,
            typename ZSERIO_T_transitionAttributeMaps = ::nds::rules::instantiations::RulesTransitionAttributeMapList,
            typename ZSERIO_T_roadRangeAttributeSets = ::nds::rules::instantiations::RulesRoadRangeAttributeSetList,
            typename ZSERIO_T_roadPositionAttributeSets = ::nds::rules::instantiations::RulesRoadPositionAttributeSetList,
            typename ZSERIO_T_transitionAttributeSets = ::nds::rules::instantiations::RulesTransitionAttributeSetList>
    RoadRulesLayer(
            ::nds::rules::metadata::RoadRulesLayerContent content_,
            ::nds::core::geometry::CoordShift shift_,
            ZSERIO_T_roadRangeAttributeMaps&& roadRangeAttributeMaps_,
            ZSERIO_T_roadPositionAttributeMaps&& roadPositionAttributeMaps_,
            ZSERIO_T_transitionAttributeMaps&& transitionAttributeMaps_,
            ZSERIO_T_roadRangeAttributeSets&& roadRangeAttributeSets_,
            ZSERIO_T_roadPositionAttributeSets&& roadPositionAttributeSets_,
            ZSERIO_T_transitionAttributeSets&& transitionAttributeSets_,
            const allocator_type& allocator = allocator_type()) :
            RoadRulesLayer(allocator)
    {
        m_content_ = content_;
        m_shift_ = shift_;
        m_roadRangeAttributeMaps_ = ::std::forward<ZSERIO_T_roadRangeAttributeMaps>(roadRangeAttributeMaps_);
        m_roadPositionAttributeMaps_ = ::std::forward<ZSERIO_T_roadPositionAttributeMaps>(roadPositionAttributeMaps_);
        m_transitionAttributeMaps_ = ::std::forward<ZSERIO_T_transitionAttributeMaps>(transitionAttributeMaps_);
        m_roadRangeAttributeSets_ = ::std::forward<ZSERIO_T_roadRangeAttributeSets>(roadRangeAttributeSets_);
        m_roadPositionAttributeSets_ = ::std::forward<ZSERIO_T_roadPositionAttributeSets>(roadPositionAttributeSets_);
        m_transitionAttributeSets_ = ::std::forward<ZSERIO_T_transitionAttributeSets>(transitionAttributeSets_);
    }

    explicit RoadRulesLayer(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadRulesLayer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadRulesLayer() = default;

    RoadRulesLayer(const RoadRulesLayer& other);
    RoadRulesLayer& operator=(const RoadRulesLayer& other);

    RoadRulesLayer(RoadRulesLayer&& other);
    RoadRulesLayer& operator=(RoadRulesLayer&& other);

    RoadRulesLayer(::zserio::PropagateAllocatorT,
            const RoadRulesLayer& other, const allocator_type& allocator);

    void initializeChildren();

    ::nds::rules::metadata::RoadRulesLayerContent getContent() const;
    void setContent(::nds::rules::metadata::RoadRulesLayerContent content_);

    ::nds::core::geometry::CoordShift getShift() const;
    void setShift(::nds::core::geometry::CoordShift shift_);

    const ::nds::rules::instantiations::RulesRoadRangeAttributeMapList& getRoadRangeAttributeMaps() const;
    ::nds::rules::instantiations::RulesRoadRangeAttributeMapList& getRoadRangeAttributeMaps();
    void setRoadRangeAttributeMaps(const ::nds::rules::instantiations::RulesRoadRangeAttributeMapList& roadRangeAttributeMaps_);
    void setRoadRangeAttributeMaps(::nds::rules::instantiations::RulesRoadRangeAttributeMapList&& roadRangeAttributeMaps_);
    bool isRoadRangeAttributeMapsUsed() const;
    bool isRoadRangeAttributeMapsSet() const;
    void resetRoadRangeAttributeMaps();

    const ::nds::rules::instantiations::RulesRoadPositionAttributeMapList& getRoadPositionAttributeMaps() const;
    ::nds::rules::instantiations::RulesRoadPositionAttributeMapList& getRoadPositionAttributeMaps();
    void setRoadPositionAttributeMaps(const ::nds::rules::instantiations::RulesRoadPositionAttributeMapList& roadPositionAttributeMaps_);
    void setRoadPositionAttributeMaps(::nds::rules::instantiations::RulesRoadPositionAttributeMapList&& roadPositionAttributeMaps_);
    bool isRoadPositionAttributeMapsUsed() const;
    bool isRoadPositionAttributeMapsSet() const;
    void resetRoadPositionAttributeMaps();

    const ::nds::rules::instantiations::RulesTransitionAttributeMapList& getTransitionAttributeMaps() const;
    ::nds::rules::instantiations::RulesTransitionAttributeMapList& getTransitionAttributeMaps();
    void setTransitionAttributeMaps(const ::nds::rules::instantiations::RulesTransitionAttributeMapList& transitionAttributeMaps_);
    void setTransitionAttributeMaps(::nds::rules::instantiations::RulesTransitionAttributeMapList&& transitionAttributeMaps_);
    bool isTransitionAttributeMapsUsed() const;
    bool isTransitionAttributeMapsSet() const;
    void resetTransitionAttributeMaps();

    const ::nds::rules::instantiations::RulesRoadRangeAttributeSetList& getRoadRangeAttributeSets() const;
    ::nds::rules::instantiations::RulesRoadRangeAttributeSetList& getRoadRangeAttributeSets();
    void setRoadRangeAttributeSets(const ::nds::rules::instantiations::RulesRoadRangeAttributeSetList& roadRangeAttributeSets_);
    void setRoadRangeAttributeSets(::nds::rules::instantiations::RulesRoadRangeAttributeSetList&& roadRangeAttributeSets_);
    bool isRoadRangeAttributeSetsUsed() const;
    bool isRoadRangeAttributeSetsSet() const;
    void resetRoadRangeAttributeSets();

    const ::nds::rules::instantiations::RulesRoadPositionAttributeSetList& getRoadPositionAttributeSets() const;
    ::nds::rules::instantiations::RulesRoadPositionAttributeSetList& getRoadPositionAttributeSets();
    void setRoadPositionAttributeSets(const ::nds::rules::instantiations::RulesRoadPositionAttributeSetList& roadPositionAttributeSets_);
    void setRoadPositionAttributeSets(::nds::rules::instantiations::RulesRoadPositionAttributeSetList&& roadPositionAttributeSets_);
    bool isRoadPositionAttributeSetsUsed() const;
    bool isRoadPositionAttributeSetsSet() const;
    void resetRoadPositionAttributeSets();

    const ::nds::rules::instantiations::RulesTransitionAttributeSetList& getTransitionAttributeSets() const;
    ::nds::rules::instantiations::RulesTransitionAttributeSetList& getTransitionAttributeSets();
    void setTransitionAttributeSets(const ::nds::rules::instantiations::RulesTransitionAttributeSetList& transitionAttributeSets_);
    void setTransitionAttributeSets(::nds::rules::instantiations::RulesTransitionAttributeSetList&& transitionAttributeSets_);
    bool isTransitionAttributeSetsUsed() const;
    bool isTransitionAttributeSetsSet() const;
    void resetTransitionAttributeSets();

    ::nds::system::types::LayerType funcGetLayerType() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadRulesLayer& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::rules::metadata::RoadRulesLayerContent readContent(::zserio::BitStreamReader& in);
    ::nds::rules::metadata::RoadRulesLayerContent readContent(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordShift readShift(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList> readRoadRangeAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList> readRoadRangeAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList> readRoadPositionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList> readRoadPositionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList> readTransitionAttributeMaps(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList> readTransitionAttributeMaps(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList> readRoadRangeAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList> readRoadRangeAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList> readRoadPositionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList> readRoadPositionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList> readTransitionAttributeSets(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList> readTransitionAttributeSets(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::rules::metadata::RoadRulesLayerContent m_content_;
    ::nds::core::geometry::CoordShift m_shift_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeMapList> m_roadRangeAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeMapList> m_roadPositionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeMapList> m_transitionAttributeMaps_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadRangeAttributeSetList> m_roadRangeAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesRoadPositionAttributeSetList> m_roadPositionAttributeSets_;
    ::zserio::InplaceOptionalHolder<::nds::rules::instantiations::RulesTransitionAttributeSetList> m_transitionAttributeSets_;
};

} // namespace layer
} // namespace rules
} // namespace nds

#endif // NDS_RULES_LAYER_ROAD_RULES_LAYER_H
