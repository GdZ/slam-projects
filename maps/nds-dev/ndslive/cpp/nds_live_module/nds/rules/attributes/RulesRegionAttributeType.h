/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_TYPE_H
#define NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace attributes
{

enum class RulesRegionAttributeType : uint16_t
{
    BLOOD_ALCOHOL_CONTENT_LIMIT = UINT16_C(0),
    WARNING_TRIANGLE_REQUIRED = UINT16_C(1),
    FIRST_AID_KIT_REQUIRED = UINT16_C(2),
    SAFETY_VESTS_REQUIRED = UINT16_C(3),
    BREATHALIZER_REQUIRED = UINT16_C(4),
    TURN_ON_RED_ALLOWED = UINT16_C(5),
    DAYTIME_RUNNING_LIGHT = UINT16_C(6),
    ADMIN_SPEED_LIMIT_METRIC = UINT16_C(7),
    ADMIN_SPEED_LIMIT_IMPERIAL = UINT16_C(8),
    ADMIN_MINIMUM_SPEED_METRIC = UINT16_C(9),
    ADMIN_MINIMUM_SPEED_IMPERIAL = UINT16_C(10),
    ADMIN_ADVISORY_SPEED_LIMIT_METRIC = UINT16_C(11),
    ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL = UINT16_C(12),
    TOLL_VIGNETTE_INFO = UINT16_C(13),
    REGION_CURRENCIES = UINT16_C(14),
    REGION_DRIVING_RULES = UINT16_C(15),
    LIGHT_CONDITIONS = UINT16_C(16),
    REQUIRES_TOLL_REGISTRATION = UINT16_C(17),
    WINTER_SEASON = UINT16_C(18),
    WINTER_TIRES_REQUIRED = UINT16_C(19),
    FIRE_EXTINGUISHER_REQUIRED = UINT16_C(20),
    TOW_ROPE_REQUIRED = UINT16_C(21),
    ISO_DETAILS = UINT16_C(22),
    RIGHT_HAND_TRAFFIC = UINT16_C(23),
    SYSTEM_OF_MEASUREMENT = UINT16_C(24),
    PROHIBITED_PASSAGE = UINT16_C(25),
    TIME_ZONE = UINT16_C(26),
    OFFICIAL_LANGUAGES = UINT16_C(27)
};

} // namespace attributes
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RulesRegionAttributeType enumeration.
template <>
struct EnumTraits<::nds::rules::attributes::RulesRegionAttributeType>
{
    static constexpr ::std::array<const char*, 28> names =
    {{
        "BLOOD_ALCOHOL_CONTENT_LIMIT",
        "WARNING_TRIANGLE_REQUIRED",
        "FIRST_AID_KIT_REQUIRED",
        "SAFETY_VESTS_REQUIRED",
        "BREATHALIZER_REQUIRED",
        "TURN_ON_RED_ALLOWED",
        "DAYTIME_RUNNING_LIGHT",
        "ADMIN_SPEED_LIMIT_METRIC",
        "ADMIN_SPEED_LIMIT_IMPERIAL",
        "ADMIN_MINIMUM_SPEED_METRIC",
        "ADMIN_MINIMUM_SPEED_IMPERIAL",
        "ADMIN_ADVISORY_SPEED_LIMIT_METRIC",
        "ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL",
        "TOLL_VIGNETTE_INFO",
        "REGION_CURRENCIES",
        "REGION_DRIVING_RULES",
        "LIGHT_CONDITIONS",
        "REQUIRES_TOLL_REGISTRATION",
        "WINTER_SEASON",
        "WINTER_TIRES_REQUIRED",
        "FIRE_EXTINGUISHER_REQUIRED",
        "TOW_ROPE_REQUIRED",
        "ISO_DETAILS",
        "RIGHT_HAND_TRAFFIC",
        "SYSTEM_OF_MEASUREMENT",
        "PROHIBITED_PASSAGE",
        "TIME_ZONE",
        "OFFICIAL_LANGUAGES"
    }};

    static constexpr ::std::array<::nds::rules::attributes::RulesRegionAttributeType, 28> values =
    {{
        ::nds::rules::attributes::RulesRegionAttributeType::BLOOD_ALCOHOL_CONTENT_LIMIT,
        ::nds::rules::attributes::RulesRegionAttributeType::WARNING_TRIANGLE_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::FIRST_AID_KIT_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::SAFETY_VESTS_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::BREATHALIZER_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::TURN_ON_RED_ALLOWED,
        ::nds::rules::attributes::RulesRegionAttributeType::DAYTIME_RUNNING_LIGHT,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_SPEED_LIMIT_METRIC,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_SPEED_LIMIT_IMPERIAL,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_MINIMUM_SPEED_METRIC,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_MINIMUM_SPEED_IMPERIAL,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_ADVISORY_SPEED_LIMIT_METRIC,
        ::nds::rules::attributes::RulesRegionAttributeType::ADMIN_ADVISORY_SPEED_LIMIT_IMPERIAL,
        ::nds::rules::attributes::RulesRegionAttributeType::TOLL_VIGNETTE_INFO,
        ::nds::rules::attributes::RulesRegionAttributeType::REGION_CURRENCIES,
        ::nds::rules::attributes::RulesRegionAttributeType::REGION_DRIVING_RULES,
        ::nds::rules::attributes::RulesRegionAttributeType::LIGHT_CONDITIONS,
        ::nds::rules::attributes::RulesRegionAttributeType::REQUIRES_TOLL_REGISTRATION,
        ::nds::rules::attributes::RulesRegionAttributeType::WINTER_SEASON,
        ::nds::rules::attributes::RulesRegionAttributeType::WINTER_TIRES_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::FIRE_EXTINGUISHER_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::TOW_ROPE_REQUIRED,
        ::nds::rules::attributes::RulesRegionAttributeType::ISO_DETAILS,
        ::nds::rules::attributes::RulesRegionAttributeType::RIGHT_HAND_TRAFFIC,
        ::nds::rules::attributes::RulesRegionAttributeType::SYSTEM_OF_MEASUREMENT,
        ::nds::rules::attributes::RulesRegionAttributeType::PROHIBITED_PASSAGE,
        ::nds::rules::attributes::RulesRegionAttributeType::TIME_ZONE,
        ::nds::rules::attributes::RulesRegionAttributeType::OFFICIAL_LANGUAGES
    }};

    static constexpr const char* enumName = "RulesRegionAttributeType";
};

template <>
size_t enumToOrdinal<::nds::rules::attributes::RulesRegionAttributeType>(::nds::rules::attributes::RulesRegionAttributeType value);

template <>
::nds::rules::attributes::RulesRegionAttributeType valueToEnum<::nds::rules::attributes::RulesRegionAttributeType>(
        typename ::std::underlying_type<::nds::rules::attributes::RulesRegionAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::attributes::RulesRegionAttributeType>(::nds::rules::attributes::RulesRegionAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::attributes::RulesRegionAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesRegionAttributeType value);

template <>
size_t bitSizeOf<::nds::rules::attributes::RulesRegionAttributeType>(::nds::rules::attributes::RulesRegionAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::attributes::RulesRegionAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesRegionAttributeType value);

template <>
size_t initializeOffsets<::nds::rules::attributes::RulesRegionAttributeType>(size_t bitPosition, ::nds::rules::attributes::RulesRegionAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::attributes::RulesRegionAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::attributes::RulesRegionAttributeType value);

template <>
::nds::rules::attributes::RulesRegionAttributeType read<::nds::rules::attributes::RulesRegionAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::attributes::RulesRegionAttributeType read<::nds::rules::attributes::RulesRegionAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::attributes::RulesRegionAttributeType>(::zserio::BitStreamWriter& out, ::nds::rules::attributes::RulesRegionAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::attributes::RulesRegionAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::attributes::RulesRegionAttributeType value);

} // namespace zserio

#endif // NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_TYPE_H
