/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_TYPE_H
#define NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace attributes
{

enum class RulesLaneTransitionAttributeType : uint16_t
{
    TURN_ON_RED_ALLOWED = UINT16_C(0),
    PROHIBITED_TRANSITION = UINT16_C(1),
    PREFERRED_U_TURN = UINT16_C(2)
};

} // namespace attributes
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RulesLaneTransitionAttributeType enumeration.
template <>
struct EnumTraits<::nds::rules::attributes::RulesLaneTransitionAttributeType>
{
    static constexpr ::std::array<const char*, 3> names =
    {{
        "TURN_ON_RED_ALLOWED",
        "PROHIBITED_TRANSITION",
        "PREFERRED_U_TURN"
    }};

    static constexpr ::std::array<::nds::rules::attributes::RulesLaneTransitionAttributeType, 3> values =
    {{
        ::nds::rules::attributes::RulesLaneTransitionAttributeType::TURN_ON_RED_ALLOWED,
        ::nds::rules::attributes::RulesLaneTransitionAttributeType::PROHIBITED_TRANSITION,
        ::nds::rules::attributes::RulesLaneTransitionAttributeType::PREFERRED_U_TURN
    }};

    static constexpr const char* enumName = "RulesLaneTransitionAttributeType";
};

template <>
size_t enumToOrdinal<::nds::rules::attributes::RulesLaneTransitionAttributeType>(::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
::nds::rules::attributes::RulesLaneTransitionAttributeType valueToEnum<::nds::rules::attributes::RulesLaneTransitionAttributeType>(
        typename ::std::underlying_type<::nds::rules::attributes::RulesLaneTransitionAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::attributes::RulesLaneTransitionAttributeType>(::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
size_t bitSizeOf<::nds::rules::attributes::RulesLaneTransitionAttributeType>(::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
size_t initializeOffsets<::nds::rules::attributes::RulesLaneTransitionAttributeType>(size_t bitPosition, ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
::nds::rules::attributes::RulesLaneTransitionAttributeType read<::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::attributes::RulesLaneTransitionAttributeType read<::nds::rules::attributes::RulesLaneTransitionAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::BitStreamWriter& out, ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::attributes::RulesLaneTransitionAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::attributes::RulesLaneTransitionAttributeType value);

} // namespace zserio

#endif // NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_TYPE_H
