/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_VALUE_H
#define NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/rules/attributes/RulesLaneTransitionAttributeType.h>
#include <nds/rules/types/PreferredUTurn.h>
#include <nds/rules/types/ProhibitedTransition.h>
#include <nds/rules/types/TurnOnRedAllowed.h>

namespace nds
{
namespace rules
{
namespace attributes
{

class RulesLaneTransitionAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_turnOnRedAllowed = 0,
        CHOICE_prohibitedTransition = 1,
        CHOICE_preferredUTurn = 2,
        UNDEFINED_CHOICE = -1
    };

    RulesLaneTransitionAttributeValue() noexcept :
            RulesLaneTransitionAttributeValue(allocator_type())
    {}

    explicit RulesLaneTransitionAttributeValue(const allocator_type& allocator) noexcept;

    explicit RulesLaneTransitionAttributeValue(::zserio::BitStreamReader& in,
            ::nds::rules::attributes::RulesLaneTransitionAttributeType type_, const allocator_type& allocator = allocator_type());

    ~RulesLaneTransitionAttributeValue() = default;

    RulesLaneTransitionAttributeValue(const RulesLaneTransitionAttributeValue& other);
    RulesLaneTransitionAttributeValue& operator=(const RulesLaneTransitionAttributeValue& other);

    RulesLaneTransitionAttributeValue(RulesLaneTransitionAttributeValue&& other);
    RulesLaneTransitionAttributeValue& operator=(RulesLaneTransitionAttributeValue&& other);

    RulesLaneTransitionAttributeValue(::zserio::PropagateAllocatorT,
            const RulesLaneTransitionAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::rules::attributes::RulesLaneTransitionAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::rules::attributes::RulesLaneTransitionAttributeType getType() const;

    ::nds::rules::types::TurnOnRedAllowed getTurnOnRedAllowed() const;
    void setTurnOnRedAllowed(::nds::rules::types::TurnOnRedAllowed turnOnRedAllowed_);

    const ::nds::rules::types::ProhibitedTransition& getProhibitedTransition() const;
    ::nds::rules::types::ProhibitedTransition& getProhibitedTransition();
    void setProhibitedTransition(const ::nds::rules::types::ProhibitedTransition& prohibitedTransition_);
    void setProhibitedTransition(::nds::rules::types::ProhibitedTransition&& prohibitedTransition_);

    const ::nds::rules::types::PreferredUTurn& getPreferredUTurn() const;
    ::nds::rules::types::PreferredUTurn& getPreferredUTurn();
    void setPreferredUTurn(const ::nds::rules::types::PreferredUTurn& preferredUTurn_);
    void setPreferredUTurn(::nds::rules::types::PreferredUTurn&& preferredUTurn_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const RulesLaneTransitionAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::rules::attributes::RulesLaneTransitionAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace rules
} // namespace nds

#endif // NDS_RULES_ATTRIBUTES_RULES_LANE_TRANSITION_ATTRIBUTE_VALUE_H
