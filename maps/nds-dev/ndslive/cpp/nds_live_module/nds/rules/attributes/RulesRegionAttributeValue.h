/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_VALUE_H
#define NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/rules/attributes/RulesRegionAttributeType.h>
#include <nds/rules/types/AdminAdvisorySpeedLimitKmh.h>
#include <nds/rules/types/AdminAdvisorySpeedLimitMph.h>
#include <nds/rules/types/AdminMinimumSpeedKmh.h>
#include <nds/rules/types/AdminMinimumSpeedMph.h>
#include <nds/rules/types/AdminSpeedLimitKmh.h>
#include <nds/rules/types/AdminSpeedLimitMph.h>
#include <nds/rules/types/BloodAlcoholContentLimit.h>
#include <nds/rules/types/BreathalizerRequired.h>
#include <nds/rules/types/DaytimeRunningLight.h>
#include <nds/rules/types/FireExtinguisherRequired.h>
#include <nds/rules/types/FirstAidKitRequired.h>
#include <nds/rules/types/IsoDetails.h>
#include <nds/rules/types/OfficialLanguages.h>
#include <nds/rules/types/ProhibitedPassage.h>
#include <nds/rules/types/RegionCurrencies.h>
#include <nds/rules/types/RegionDrivingRules.h>
#include <nds/rules/types/RequiresTollRegistration.h>
#include <nds/rules/types/RightHandTraffic.h>
#include <nds/rules/types/SafetyVestsRequired.h>
#include <nds/rules/types/SystemOfMeasurement.h>
#include <nds/rules/types/TimeZone.h>
#include <nds/rules/types/TollVignetteInfo.h>
#include <nds/rules/types/TowRopeRequired.h>
#include <nds/rules/types/TurnOnRedAllowed.h>
#include <nds/rules/types/VehicleLightConditions.h>
#include <nds/rules/types/WarningTriangleRequired.h>
#include <nds/rules/types/WinterSeason.h>
#include <nds/rules/types/WinterTiresRequired.h>

namespace nds
{
namespace rules
{
namespace attributes
{

class RulesRegionAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_bloodAlcoholContentLimit = 0,
        CHOICE_warningTriangleRequired = 1,
        CHOICE_firstAidKitRequired = 2,
        CHOICE_safetyVestsRequired = 3,
        CHOICE_breathalizerRequired = 4,
        CHOICE_turnOnRedAllowed = 5,
        CHOICE_daytimeRunningLight = 6,
        CHOICE_adminSpeedLimitKmh = 7,
        CHOICE_adminSpeedLimitMph = 8,
        CHOICE_adminMinimumSpeedKmh = 9,
        CHOICE_adminMinimumSpeedMph = 10,
        CHOICE_adminAdvisorySpeedLimitKmh = 11,
        CHOICE_adminAdvisorySpeedLimitMph = 12,
        CHOICE_tollVignetteInfo = 13,
        CHOICE_regionCurrencies = 14,
        CHOICE_regionDrivingRules = 15,
        CHOICE_vehicleLightConditions = 16,
        CHOICE_requiresTollRegistration = 17,
        CHOICE_winterSeason = 18,
        CHOICE_winterTiresRequired = 19,
        CHOICE_fireExtinguisherRequired = 20,
        CHOICE_towRopeRequired = 21,
        CHOICE_IsoDetails = 22,
        CHOICE_rightHandTraffic = 23,
        CHOICE_systemOfMeasurement = 24,
        CHOICE_prohibitedPassage = 25,
        CHOICE_timeZone = 26,
        CHOICE_officialLanguages = 27,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getBloodAlcoholContentLimit()
        {
            return m_bloodAlcoholContentLimit_;
        }

        ::zserio::DeltaContext& getAdminSpeedLimitKmh()
        {
            return m_adminSpeedLimitKmh_;
        }

        ::zserio::DeltaContext& getAdminSpeedLimitMph()
        {
            return m_adminSpeedLimitMph_;
        }

        ::zserio::DeltaContext& getAdminMinimumSpeedKmh()
        {
            return m_adminMinimumSpeedKmh_;
        }

        ::zserio::DeltaContext& getAdminMinimumSpeedMph()
        {
            return m_adminMinimumSpeedMph_;
        }

        ::zserio::DeltaContext& getAdminAdvisorySpeedLimitKmh()
        {
            return m_adminAdvisorySpeedLimitKmh_;
        }

        ::zserio::DeltaContext& getAdminAdvisorySpeedLimitMph()
        {
            return m_adminAdvisorySpeedLimitMph_;
        }

        ::nds::rules::types::RegionCurrencies::ZserioPackingContext& getRegionCurrencies()
        {
            return m_regionCurrencies_;
        }

        ::nds::rules::types::RegionDrivingRules::ZserioPackingContext& getRegionDrivingRules()
        {
            return m_regionDrivingRules_;
        }

        ::nds::rules::types::WinterSeason::ZserioPackingContext& getWinterSeason()
        {
            return m_winterSeason_;
        }

        ::zserio::DeltaContext& getSystemOfMeasurement()
        {
            return m_systemOfMeasurement_;
        }

        ::nds::rules::types::TimeZone::ZserioPackingContext& getTimeZone()
        {
            return m_timeZone_;
        }

        ::nds::rules::types::OfficialLanguages::ZserioPackingContext& getOfficialLanguages()
        {
            return m_officialLanguages_;
        }

    private:
        ::zserio::DeltaContext m_bloodAlcoholContentLimit_;
        ::zserio::DeltaContext m_adminSpeedLimitKmh_;
        ::zserio::DeltaContext m_adminSpeedLimitMph_;
        ::zserio::DeltaContext m_adminMinimumSpeedKmh_;
        ::zserio::DeltaContext m_adminMinimumSpeedMph_;
        ::zserio::DeltaContext m_adminAdvisorySpeedLimitKmh_;
        ::zserio::DeltaContext m_adminAdvisorySpeedLimitMph_;
        ::nds::rules::types::RegionCurrencies::ZserioPackingContext m_regionCurrencies_;
        ::nds::rules::types::RegionDrivingRules::ZserioPackingContext m_regionDrivingRules_;
        ::nds::rules::types::WinterSeason::ZserioPackingContext m_winterSeason_;
        ::zserio::DeltaContext m_systemOfMeasurement_;
        ::nds::rules::types::TimeZone::ZserioPackingContext m_timeZone_;
        ::nds::rules::types::OfficialLanguages::ZserioPackingContext m_officialLanguages_;
    };

    RulesRegionAttributeValue() noexcept :
            RulesRegionAttributeValue(allocator_type())
    {}

    explicit RulesRegionAttributeValue(const allocator_type& allocator) noexcept;

    explicit RulesRegionAttributeValue(::zserio::BitStreamReader& in,
            ::nds::rules::attributes::RulesRegionAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit RulesRegionAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::rules::attributes::RulesRegionAttributeType type_, const allocator_type& allocator = allocator_type());

    ~RulesRegionAttributeValue() = default;

    RulesRegionAttributeValue(const RulesRegionAttributeValue& other);
    RulesRegionAttributeValue& operator=(const RulesRegionAttributeValue& other);

    RulesRegionAttributeValue(RulesRegionAttributeValue&& other);
    RulesRegionAttributeValue& operator=(RulesRegionAttributeValue&& other);

    RulesRegionAttributeValue(::zserio::PropagateAllocatorT,
            const RulesRegionAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::rules::attributes::RulesRegionAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::rules::attributes::RulesRegionAttributeType getType() const;

    ::nds::rules::types::BloodAlcoholContentLimit getBloodAlcoholContentLimit() const;
    void setBloodAlcoholContentLimit(::nds::rules::types::BloodAlcoholContentLimit bloodAlcoholContentLimit_);

    const ::nds::rules::types::WarningTriangleRequired& getWarningTriangleRequired() const;
    ::nds::rules::types::WarningTriangleRequired& getWarningTriangleRequired();
    void setWarningTriangleRequired(const ::nds::rules::types::WarningTriangleRequired& warningTriangleRequired_);
    void setWarningTriangleRequired(::nds::rules::types::WarningTriangleRequired&& warningTriangleRequired_);

    const ::nds::rules::types::FirstAidKitRequired& getFirstAidKitRequired() const;
    ::nds::rules::types::FirstAidKitRequired& getFirstAidKitRequired();
    void setFirstAidKitRequired(const ::nds::rules::types::FirstAidKitRequired& firstAidKitRequired_);
    void setFirstAidKitRequired(::nds::rules::types::FirstAidKitRequired&& firstAidKitRequired_);

    const ::nds::rules::types::SafetyVestsRequired& getSafetyVestsRequired() const;
    ::nds::rules::types::SafetyVestsRequired& getSafetyVestsRequired();
    void setSafetyVestsRequired(const ::nds::rules::types::SafetyVestsRequired& safetyVestsRequired_);
    void setSafetyVestsRequired(::nds::rules::types::SafetyVestsRequired&& safetyVestsRequired_);

    const ::nds::rules::types::BreathalizerRequired& getBreathalizerRequired() const;
    ::nds::rules::types::BreathalizerRequired& getBreathalizerRequired();
    void setBreathalizerRequired(const ::nds::rules::types::BreathalizerRequired& breathalizerRequired_);
    void setBreathalizerRequired(::nds::rules::types::BreathalizerRequired&& breathalizerRequired_);

    ::nds::rules::types::TurnOnRedAllowed getTurnOnRedAllowed() const;
    void setTurnOnRedAllowed(::nds::rules::types::TurnOnRedAllowed turnOnRedAllowed_);

    ::nds::rules::types::DaytimeRunningLight getDaytimeRunningLight() const;
    void setDaytimeRunningLight(::nds::rules::types::DaytimeRunningLight daytimeRunningLight_);

    ::nds::rules::types::AdminSpeedLimitKmh getAdminSpeedLimitKmh() const;
    void setAdminSpeedLimitKmh(::nds::rules::types::AdminSpeedLimitKmh adminSpeedLimitKmh_);

    ::nds::rules::types::AdminSpeedLimitMph getAdminSpeedLimitMph() const;
    void setAdminSpeedLimitMph(::nds::rules::types::AdminSpeedLimitMph adminSpeedLimitMph_);

    ::nds::rules::types::AdminMinimumSpeedKmh getAdminMinimumSpeedKmh() const;
    void setAdminMinimumSpeedKmh(::nds::rules::types::AdminMinimumSpeedKmh adminMinimumSpeedKmh_);

    ::nds::rules::types::AdminMinimumSpeedMph getAdminMinimumSpeedMph() const;
    void setAdminMinimumSpeedMph(::nds::rules::types::AdminMinimumSpeedMph adminMinimumSpeedMph_);

    ::nds::rules::types::AdminAdvisorySpeedLimitKmh getAdminAdvisorySpeedLimitKmh() const;
    void setAdminAdvisorySpeedLimitKmh(::nds::rules::types::AdminAdvisorySpeedLimitKmh adminAdvisorySpeedLimitKmh_);

    ::nds::rules::types::AdminAdvisorySpeedLimitMph getAdminAdvisorySpeedLimitMph() const;
    void setAdminAdvisorySpeedLimitMph(::nds::rules::types::AdminAdvisorySpeedLimitMph adminAdvisorySpeedLimitMph_);

    const ::nds::rules::types::TollVignetteInfo& getTollVignetteInfo() const;
    ::nds::rules::types::TollVignetteInfo& getTollVignetteInfo();
    void setTollVignetteInfo(const ::nds::rules::types::TollVignetteInfo& tollVignetteInfo_);
    void setTollVignetteInfo(::nds::rules::types::TollVignetteInfo&& tollVignetteInfo_);

    const ::nds::rules::types::RegionCurrencies& getRegionCurrencies() const;
    ::nds::rules::types::RegionCurrencies& getRegionCurrencies();
    void setRegionCurrencies(const ::nds::rules::types::RegionCurrencies& regionCurrencies_);
    void setRegionCurrencies(::nds::rules::types::RegionCurrencies&& regionCurrencies_);

    const ::nds::rules::types::RegionDrivingRules& getRegionDrivingRules() const;
    ::nds::rules::types::RegionDrivingRules& getRegionDrivingRules();
    void setRegionDrivingRules(const ::nds::rules::types::RegionDrivingRules& regionDrivingRules_);
    void setRegionDrivingRules(::nds::rules::types::RegionDrivingRules&& regionDrivingRules_);

    const ::nds::rules::types::VehicleLightConditions& getVehicleLightConditions() const;
    ::nds::rules::types::VehicleLightConditions& getVehicleLightConditions();
    void setVehicleLightConditions(const ::nds::rules::types::VehicleLightConditions& vehicleLightConditions_);
    void setVehicleLightConditions(::nds::rules::types::VehicleLightConditions&& vehicleLightConditions_);

    const ::nds::rules::types::RequiresTollRegistration& getRequiresTollRegistration() const;
    ::nds::rules::types::RequiresTollRegistration& getRequiresTollRegistration();
    void setRequiresTollRegistration(const ::nds::rules::types::RequiresTollRegistration& requiresTollRegistration_);
    void setRequiresTollRegistration(::nds::rules::types::RequiresTollRegistration&& requiresTollRegistration_);

    const ::nds::rules::types::WinterSeason& getWinterSeason() const;
    ::nds::rules::types::WinterSeason& getWinterSeason();
    void setWinterSeason(const ::nds::rules::types::WinterSeason& winterSeason_);
    void setWinterSeason(::nds::rules::types::WinterSeason&& winterSeason_);

    const ::nds::rules::types::WinterTiresRequired& getWinterTiresRequired() const;
    ::nds::rules::types::WinterTiresRequired& getWinterTiresRequired();
    void setWinterTiresRequired(const ::nds::rules::types::WinterTiresRequired& winterTiresRequired_);
    void setWinterTiresRequired(::nds::rules::types::WinterTiresRequired&& winterTiresRequired_);

    const ::nds::rules::types::FireExtinguisherRequired& getFireExtinguisherRequired() const;
    ::nds::rules::types::FireExtinguisherRequired& getFireExtinguisherRequired();
    void setFireExtinguisherRequired(const ::nds::rules::types::FireExtinguisherRequired& fireExtinguisherRequired_);
    void setFireExtinguisherRequired(::nds::rules::types::FireExtinguisherRequired&& fireExtinguisherRequired_);

    const ::nds::rules::types::TowRopeRequired& getTowRopeRequired() const;
    ::nds::rules::types::TowRopeRequired& getTowRopeRequired();
    void setTowRopeRequired(const ::nds::rules::types::TowRopeRequired& towRopeRequired_);
    void setTowRopeRequired(::nds::rules::types::TowRopeRequired&& towRopeRequired_);

    const ::nds::rules::types::IsoDetails& getIsoDetails() const;
    ::nds::rules::types::IsoDetails& getIsoDetails();
    void setIsoDetails(const ::nds::rules::types::IsoDetails& IsoDetails_);
    void setIsoDetails(::nds::rules::types::IsoDetails&& IsoDetails_);

    ::nds::rules::types::RightHandTraffic getRightHandTraffic() const;
    void setRightHandTraffic(::nds::rules::types::RightHandTraffic rightHandTraffic_);

    ::nds::rules::types::SystemOfMeasurement getSystemOfMeasurement() const;
    void setSystemOfMeasurement(::nds::rules::types::SystemOfMeasurement systemOfMeasurement_);

    const ::nds::rules::types::ProhibitedPassage& getProhibitedPassage() const;
    ::nds::rules::types::ProhibitedPassage& getProhibitedPassage();
    void setProhibitedPassage(const ::nds::rules::types::ProhibitedPassage& prohibitedPassage_);
    void setProhibitedPassage(::nds::rules::types::ProhibitedPassage&& prohibitedPassage_);

    const ::nds::rules::types::TimeZone& getTimeZone() const;
    ::nds::rules::types::TimeZone& getTimeZone();
    void setTimeZone(const ::nds::rules::types::TimeZone& timeZone_);
    void setTimeZone(::nds::rules::types::TimeZone&& timeZone_);

    const ::nds::rules::types::OfficialLanguages& getOfficialLanguages() const;
    ::nds::rules::types::OfficialLanguages& getOfficialLanguages();
    void setOfficialLanguages(const ::nds::rules::types::OfficialLanguages& officialLanguages_);
    void setOfficialLanguages(::nds::rules::types::OfficialLanguages&& officialLanguages_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RulesRegionAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::rules::attributes::RulesRegionAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace rules
} // namespace nds

#endif // NDS_RULES_ATTRIBUTES_RULES_REGION_ATTRIBUTE_VALUE_H
