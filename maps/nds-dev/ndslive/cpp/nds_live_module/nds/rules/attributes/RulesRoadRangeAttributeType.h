/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_ROAD_RANGE_ATTRIBUTE_TYPE_H
#define NDS_RULES_ATTRIBUTES_RULES_ROAD_RANGE_ATTRIBUTE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace attributes
{

enum class RulesRoadRangeAttributeType : uint16_t
{
    PROHIBITED_PASSAGE = UINT16_C(0),
    OVERTAKING_PROHIBITION = UINT16_C(1),
    SPEED_LIMIT_METRIC = UINT16_C(2),
    SPEED_LIMIT_IMPERIAL = UINT16_C(3),
    MINIMUM_SPEED_METRIC = UINT16_C(4),
    MINIMUM_SPEED_IMPERIAL = UINT16_C(5),
    ADVISORY_SPEED_LIMIT_METRIC = UINT16_C(6),
    ADVISORY_SPEED_LIMIT_IMPERIAL = UINT16_C(7),
    TRAFFIC_ENFORCEMENT_ZONE = UINT16_C(8),
    NON_DEFAULT_DRIVING_SIDE = UINT16_C(9),
    TRAFFIC_ZONE = UINT16_C(10),
    ADR_TUNNEL_CATEGORY = UINT16_C(11),
    LICENSE_PLATE_RESTRICTION = UINT16_C(12),
    SEASONAL_CLOSED = UINT16_C(13),
    PROHIBITED_PARKING = UINT16_C(14),
    PROHIBITED_STOPPING = UINT16_C(15),
    DONT_STOP_ZONE = UINT16_C(16),
    AUTOMATED_DRIVING_CLEARANCE = UINT16_C(17),
    ROADWORKS = UINT16_C(18)
};

} // namespace attributes
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RulesRoadRangeAttributeType enumeration.
template <>
struct EnumTraits<::nds::rules::attributes::RulesRoadRangeAttributeType>
{
    static constexpr ::std::array<const char*, 19> names =
    {{
        "PROHIBITED_PASSAGE",
        "OVERTAKING_PROHIBITION",
        "SPEED_LIMIT_METRIC",
        "SPEED_LIMIT_IMPERIAL",
        "MINIMUM_SPEED_METRIC",
        "MINIMUM_SPEED_IMPERIAL",
        "ADVISORY_SPEED_LIMIT_METRIC",
        "ADVISORY_SPEED_LIMIT_IMPERIAL",
        "TRAFFIC_ENFORCEMENT_ZONE",
        "NON_DEFAULT_DRIVING_SIDE",
        "TRAFFIC_ZONE",
        "ADR_TUNNEL_CATEGORY",
        "LICENSE_PLATE_RESTRICTION",
        "SEASONAL_CLOSED",
        "PROHIBITED_PARKING",
        "PROHIBITED_STOPPING",
        "DONT_STOP_ZONE",
        "AUTOMATED_DRIVING_CLEARANCE",
        "ROADWORKS"
    }};

    static constexpr ::std::array<::nds::rules::attributes::RulesRoadRangeAttributeType, 19> values =
    {{
        ::nds::rules::attributes::RulesRoadRangeAttributeType::PROHIBITED_PASSAGE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::OVERTAKING_PROHIBITION,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::SPEED_LIMIT_METRIC,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::SPEED_LIMIT_IMPERIAL,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::MINIMUM_SPEED_METRIC,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::MINIMUM_SPEED_IMPERIAL,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::ADVISORY_SPEED_LIMIT_METRIC,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::ADVISORY_SPEED_LIMIT_IMPERIAL,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::TRAFFIC_ENFORCEMENT_ZONE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::NON_DEFAULT_DRIVING_SIDE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::TRAFFIC_ZONE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::ADR_TUNNEL_CATEGORY,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::LICENSE_PLATE_RESTRICTION,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::SEASONAL_CLOSED,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::PROHIBITED_PARKING,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::PROHIBITED_STOPPING,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::DONT_STOP_ZONE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::AUTOMATED_DRIVING_CLEARANCE,
        ::nds::rules::attributes::RulesRoadRangeAttributeType::ROADWORKS
    }};

    static constexpr const char* enumName = "RulesRoadRangeAttributeType";
};

template <>
size_t enumToOrdinal<::nds::rules::attributes::RulesRoadRangeAttributeType>(::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
::nds::rules::attributes::RulesRoadRangeAttributeType valueToEnum<::nds::rules::attributes::RulesRoadRangeAttributeType>(
        typename ::std::underlying_type<::nds::rules::attributes::RulesRoadRangeAttributeType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::attributes::RulesRoadRangeAttributeType>(::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
size_t bitSizeOf<::nds::rules::attributes::RulesRoadRangeAttributeType>(::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::DeltaContext& context, ::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
size_t initializeOffsets<::nds::rules::attributes::RulesRoadRangeAttributeType>(size_t bitPosition, ::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
::nds::rules::attributes::RulesRoadRangeAttributeType read<::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::attributes::RulesRoadRangeAttributeType read<::nds::rules::attributes::RulesRoadRangeAttributeType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::BitStreamWriter& out, ::nds::rules::attributes::RulesRoadRangeAttributeType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::attributes::RulesRoadRangeAttributeType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::attributes::RulesRoadRangeAttributeType value);

} // namespace zserio

#endif // NDS_RULES_ATTRIBUTES_RULES_ROAD_RANGE_ATTRIBUTE_TYPE_H
