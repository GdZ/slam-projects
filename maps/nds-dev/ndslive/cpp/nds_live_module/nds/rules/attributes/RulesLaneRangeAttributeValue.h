/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_ATTRIBUTES_RULES_LANE_RANGE_ATTRIBUTE_VALUE_H
#define NDS_RULES_ATTRIBUTES_RULES_LANE_RANGE_ATTRIBUTE_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/rules/attributes/RulesLaneRangeAttributeType.h>
#include <nds/rules/types/AdvisorySpeedLimitKmh.h>
#include <nds/rules/types/AdvisorySpeedLimitMph.h>
#include <nds/rules/types/AutomatedDrivingClearance.h>
#include <nds/rules/types/DontStopZone.h>
#include <nds/rules/types/LaneRightOfWayRegulation.h>
#include <nds/rules/types/LaneTrafficPriority.h>
#include <nds/rules/types/MinimumSpeedKmh.h>
#include <nds/rules/types/MinimumSpeedMph.h>
#include <nds/rules/types/OvertakingProhibition.h>
#include <nds/rules/types/ProhibitedParking.h>
#include <nds/rules/types/ProhibitedPassage.h>
#include <nds/rules/types/ProhibitedStopping.h>
#include <nds/rules/types/Roadworks.h>
#include <nds/rules/types/SeasonalClosed.h>
#include <nds/rules/types/SpeedLimitKmh.h>
#include <nds/rules/types/SpeedLimitMph.h>
#include <nds/rules/types/TrafficEnforcementZone.h>
#include <nds/rules/types/TrafficZone.h>

namespace nds
{
namespace rules
{
namespace attributes
{

class RulesLaneRangeAttributeValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_prohibitedPassage = 0,
        CHOICE_overtakingProhibition = 1,
        CHOICE_speedLimitKmh = 2,
        CHOICE_speedLimitMph = 3,
        CHOICE_minimumSpeedKmh = 4,
        CHOICE_minimumSpeedMph = 5,
        CHOICE_advisorySpeedLimitKmh = 6,
        CHOICE_advisorySpeedLimitMph = 7,
        CHOICE_trafficEnforcementZone = 8,
        CHOICE_trafficZone = 9,
        CHOICE_seasonalClosed = 10,
        CHOICE_dontStopZone = 11,
        CHOICE_prohibitedParking = 12,
        CHOICE_prohibitedStopping = 13,
        CHOICE_automatedDrivingClearance = 14,
        CHOICE_roadworks = 15,
        CHOICE_laneRightOfWayRegulation = 16,
        CHOICE_laneTrafficPriority = 17,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getSpeedLimitKmh()
        {
            return m_speedLimitKmh_;
        }

        ::zserio::DeltaContext& getSpeedLimitMph()
        {
            return m_speedLimitMph_;
        }

        ::zserio::DeltaContext& getMinimumSpeedKmh()
        {
            return m_minimumSpeedKmh_;
        }

        ::zserio::DeltaContext& getMinimumSpeedMph()
        {
            return m_minimumSpeedMph_;
        }

        ::zserio::DeltaContext& getAdvisorySpeedLimitKmh()
        {
            return m_advisorySpeedLimitKmh_;
        }

        ::zserio::DeltaContext& getAdvisorySpeedLimitMph()
        {
            return m_advisorySpeedLimitMph_;
        }

        ::nds::rules::types::TrafficEnforcementZone::ZserioPackingContext& getTrafficEnforcementZone()
        {
            return m_trafficEnforcementZone_;
        }

        ::zserio::DeltaContext& getTrafficZone()
        {
            return m_trafficZone_;
        }

        ::zserio::DeltaContext& getAutomatedDrivingClearance()
        {
            return m_automatedDrivingClearance_;
        }

        ::nds::rules::types::LaneRightOfWayRegulation::ZserioPackingContext& getLaneRightOfWayRegulation()
        {
            return m_laneRightOfWayRegulation_;
        }

        ::nds::rules::types::LaneTrafficPriority::ZserioPackingContext& getLaneTrafficPriority()
        {
            return m_laneTrafficPriority_;
        }

    private:
        ::zserio::DeltaContext m_speedLimitKmh_;
        ::zserio::DeltaContext m_speedLimitMph_;
        ::zserio::DeltaContext m_minimumSpeedKmh_;
        ::zserio::DeltaContext m_minimumSpeedMph_;
        ::zserio::DeltaContext m_advisorySpeedLimitKmh_;
        ::zserio::DeltaContext m_advisorySpeedLimitMph_;
        ::nds::rules::types::TrafficEnforcementZone::ZserioPackingContext m_trafficEnforcementZone_;
        ::zserio::DeltaContext m_trafficZone_;
        ::zserio::DeltaContext m_automatedDrivingClearance_;
        ::nds::rules::types::LaneRightOfWayRegulation::ZserioPackingContext m_laneRightOfWayRegulation_;
        ::nds::rules::types::LaneTrafficPriority::ZserioPackingContext m_laneTrafficPriority_;
    };

    RulesLaneRangeAttributeValue() noexcept :
            RulesLaneRangeAttributeValue(allocator_type())
    {}

    explicit RulesLaneRangeAttributeValue(const allocator_type& allocator) noexcept;

    explicit RulesLaneRangeAttributeValue(::zserio::BitStreamReader& in,
            ::nds::rules::attributes::RulesLaneRangeAttributeType type_, const allocator_type& allocator = allocator_type());
    explicit RulesLaneRangeAttributeValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::rules::attributes::RulesLaneRangeAttributeType type_, const allocator_type& allocator = allocator_type());

    ~RulesLaneRangeAttributeValue() = default;

    RulesLaneRangeAttributeValue(const RulesLaneRangeAttributeValue& other);
    RulesLaneRangeAttributeValue& operator=(const RulesLaneRangeAttributeValue& other);

    RulesLaneRangeAttributeValue(RulesLaneRangeAttributeValue&& other);
    RulesLaneRangeAttributeValue& operator=(RulesLaneRangeAttributeValue&& other);

    RulesLaneRangeAttributeValue(::zserio::PropagateAllocatorT,
            const RulesLaneRangeAttributeValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::rules::attributes::RulesLaneRangeAttributeType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::rules::attributes::RulesLaneRangeAttributeType getType() const;

    const ::nds::rules::types::ProhibitedPassage& getProhibitedPassage() const;
    ::nds::rules::types::ProhibitedPassage& getProhibitedPassage();
    void setProhibitedPassage(const ::nds::rules::types::ProhibitedPassage& prohibitedPassage_);
    void setProhibitedPassage(::nds::rules::types::ProhibitedPassage&& prohibitedPassage_);

    const ::nds::rules::types::OvertakingProhibition& getOvertakingProhibition() const;
    ::nds::rules::types::OvertakingProhibition& getOvertakingProhibition();
    void setOvertakingProhibition(const ::nds::rules::types::OvertakingProhibition& overtakingProhibition_);
    void setOvertakingProhibition(::nds::rules::types::OvertakingProhibition&& overtakingProhibition_);

    ::nds::rules::types::SpeedLimitKmh getSpeedLimitKmh() const;
    void setSpeedLimitKmh(::nds::rules::types::SpeedLimitKmh speedLimitKmh_);

    ::nds::rules::types::SpeedLimitMph getSpeedLimitMph() const;
    void setSpeedLimitMph(::nds::rules::types::SpeedLimitMph speedLimitMph_);

    ::nds::rules::types::MinimumSpeedKmh getMinimumSpeedKmh() const;
    void setMinimumSpeedKmh(::nds::rules::types::MinimumSpeedKmh minimumSpeedKmh_);

    ::nds::rules::types::MinimumSpeedMph getMinimumSpeedMph() const;
    void setMinimumSpeedMph(::nds::rules::types::MinimumSpeedMph minimumSpeedMph_);

    ::nds::rules::types::AdvisorySpeedLimitKmh getAdvisorySpeedLimitKmh() const;
    void setAdvisorySpeedLimitKmh(::nds::rules::types::AdvisorySpeedLimitKmh advisorySpeedLimitKmh_);

    ::nds::rules::types::AdvisorySpeedLimitMph getAdvisorySpeedLimitMph() const;
    void setAdvisorySpeedLimitMph(::nds::rules::types::AdvisorySpeedLimitMph advisorySpeedLimitMph_);

    const ::nds::rules::types::TrafficEnforcementZone& getTrafficEnforcementZone() const;
    ::nds::rules::types::TrafficEnforcementZone& getTrafficEnforcementZone();
    void setTrafficEnforcementZone(const ::nds::rules::types::TrafficEnforcementZone& trafficEnforcementZone_);
    void setTrafficEnforcementZone(::nds::rules::types::TrafficEnforcementZone&& trafficEnforcementZone_);

    ::nds::rules::types::TrafficZone getTrafficZone() const;
    void setTrafficZone(::nds::rules::types::TrafficZone trafficZone_);

    const ::nds::rules::types::SeasonalClosed& getSeasonalClosed() const;
    ::nds::rules::types::SeasonalClosed& getSeasonalClosed();
    void setSeasonalClosed(const ::nds::rules::types::SeasonalClosed& seasonalClosed_);
    void setSeasonalClosed(::nds::rules::types::SeasonalClosed&& seasonalClosed_);

    const ::nds::rules::types::DontStopZone& getDontStopZone() const;
    ::nds::rules::types::DontStopZone& getDontStopZone();
    void setDontStopZone(const ::nds::rules::types::DontStopZone& dontStopZone_);
    void setDontStopZone(::nds::rules::types::DontStopZone&& dontStopZone_);

    const ::nds::rules::types::ProhibitedParking& getProhibitedParking() const;
    ::nds::rules::types::ProhibitedParking& getProhibitedParking();
    void setProhibitedParking(const ::nds::rules::types::ProhibitedParking& prohibitedParking_);
    void setProhibitedParking(::nds::rules::types::ProhibitedParking&& prohibitedParking_);

    const ::nds::rules::types::ProhibitedStopping& getProhibitedStopping() const;
    ::nds::rules::types::ProhibitedStopping& getProhibitedStopping();
    void setProhibitedStopping(const ::nds::rules::types::ProhibitedStopping& prohibitedStopping_);
    void setProhibitedStopping(::nds::rules::types::ProhibitedStopping&& prohibitedStopping_);

    ::nds::rules::types::AutomatedDrivingClearance getAutomatedDrivingClearance() const;
    void setAutomatedDrivingClearance(::nds::rules::types::AutomatedDrivingClearance automatedDrivingClearance_);

    const ::nds::rules::types::Roadworks& getRoadworks() const;
    ::nds::rules::types::Roadworks& getRoadworks();
    void setRoadworks(const ::nds::rules::types::Roadworks& roadworks_);
    void setRoadworks(::nds::rules::types::Roadworks&& roadworks_);

    const ::nds::rules::types::LaneRightOfWayRegulation& getLaneRightOfWayRegulation() const;
    ::nds::rules::types::LaneRightOfWayRegulation& getLaneRightOfWayRegulation();
    void setLaneRightOfWayRegulation(const ::nds::rules::types::LaneRightOfWayRegulation& laneRightOfWayRegulation_);
    void setLaneRightOfWayRegulation(::nds::rules::types::LaneRightOfWayRegulation&& laneRightOfWayRegulation_);

    const ::nds::rules::types::LaneTrafficPriority& getLaneTrafficPriority() const;
    ::nds::rules::types::LaneTrafficPriority& getLaneTrafficPriority();
    void setLaneTrafficPriority(const ::nds::rules::types::LaneTrafficPriority& laneTrafficPriority_);
    void setLaneTrafficPriority(::nds::rules::types::LaneTrafficPriority&& laneTrafficPriority_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RulesLaneRangeAttributeValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::rules::attributes::RulesLaneRangeAttributeType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace attributes
} // namespace rules
} // namespace nds

#endif // NDS_RULES_ATTRIBUTES_RULES_LANE_RANGE_ATTRIBUTE_VALUE_H
