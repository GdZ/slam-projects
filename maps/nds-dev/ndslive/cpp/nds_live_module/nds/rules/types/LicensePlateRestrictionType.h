/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_TYPE_H
#define NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class LicensePlateRestrictionType : uint8_t
{
    AREA = UINT8_C(0),
    ROAD = UINT8_C(1)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for LicensePlateRestrictionType enumeration.
template <>
struct EnumTraits<::nds::rules::types::LicensePlateRestrictionType>
{
    static constexpr ::std::array<const char*, 2> names =
    {{
        "AREA",
        "ROAD"
    }};

    static constexpr ::std::array<::nds::rules::types::LicensePlateRestrictionType, 2> values =
    {{
        ::nds::rules::types::LicensePlateRestrictionType::AREA,
        ::nds::rules::types::LicensePlateRestrictionType::ROAD
    }};

    static constexpr const char* enumName = "LicensePlateRestrictionType";
};

template <>
size_t enumToOrdinal<::nds::rules::types::LicensePlateRestrictionType>(::nds::rules::types::LicensePlateRestrictionType value);

template <>
::nds::rules::types::LicensePlateRestrictionType valueToEnum<::nds::rules::types::LicensePlateRestrictionType>(
        typename ::std::underlying_type<::nds::rules::types::LicensePlateRestrictionType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::LicensePlateRestrictionType>(::nds::rules::types::LicensePlateRestrictionType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::LicensePlateRestrictionType>(::zserio::DeltaContext& context, ::nds::rules::types::LicensePlateRestrictionType value);

template <>
size_t bitSizeOf<::nds::rules::types::LicensePlateRestrictionType>(::nds::rules::types::LicensePlateRestrictionType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::LicensePlateRestrictionType>(::zserio::DeltaContext& context, ::nds::rules::types::LicensePlateRestrictionType value);

template <>
size_t initializeOffsets<::nds::rules::types::LicensePlateRestrictionType>(size_t bitPosition, ::nds::rules::types::LicensePlateRestrictionType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::LicensePlateRestrictionType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::LicensePlateRestrictionType value);

template <>
::nds::rules::types::LicensePlateRestrictionType read<::nds::rules::types::LicensePlateRestrictionType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::LicensePlateRestrictionType read<::nds::rules::types::LicensePlateRestrictionType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::LicensePlateRestrictionType>(::zserio::BitStreamWriter& out, ::nds::rules::types::LicensePlateRestrictionType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::LicensePlateRestrictionType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::LicensePlateRestrictionType value);

} // namespace zserio

#endif // NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_TYPE_H
