/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_H
#define NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/rules/types/LicensePlateRestrictionRule.h>
#include <nds/rules/types/LicensePlateRestrictionType.h>

namespace nds
{
namespace rules
{
namespace types
{

class LicensePlateRestriction
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLicensePlateRestrictionType()
        {
            return m_licensePlateRestrictionType_;
        }

        ::nds::rules::types::LicensePlateRestrictionRule::ZserioPackingContext& getLicensePlateRestrictionRule()
        {
            return m_licensePlateRestrictionRule_;
        }

    private:
        ::zserio::DeltaContext m_licensePlateRestrictionType_;
        ::nds::rules::types::LicensePlateRestrictionRule::ZserioPackingContext m_licensePlateRestrictionRule_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LicensePlateRestriction() noexcept :
            LicensePlateRestriction(allocator_type())
    {}

    explicit LicensePlateRestriction(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_licensePlateRestrictionRule = ::nds::rules::types::LicensePlateRestrictionRule,
            typename ZSERIO_T_licensePlateRestrictionDescription = ::zserio::string<>>
    LicensePlateRestriction(
            ::nds::rules::types::LicensePlateRestrictionType licensePlateRestrictionType_,
            ZSERIO_T_licensePlateRestrictionRule&& licensePlateRestrictionRule_,
            ZSERIO_T_licensePlateRestrictionDescription&& licensePlateRestrictionDescription_,
            const allocator_type& allocator = allocator_type()) :
            LicensePlateRestriction(allocator)
    {
        m_licensePlateRestrictionType_ = licensePlateRestrictionType_;
        m_licensePlateRestrictionRule_ = ::std::forward<ZSERIO_T_licensePlateRestrictionRule>(licensePlateRestrictionRule_);
        m_licensePlateRestrictionDescription_ = ::std::forward<ZSERIO_T_licensePlateRestrictionDescription>(licensePlateRestrictionDescription_);
    }

    explicit LicensePlateRestriction(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LicensePlateRestriction(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LicensePlateRestriction() = default;

    LicensePlateRestriction(const LicensePlateRestriction&) = default;
    LicensePlateRestriction& operator=(const LicensePlateRestriction&) = default;

    LicensePlateRestriction(LicensePlateRestriction&&) = default;
    LicensePlateRestriction& operator=(LicensePlateRestriction&&) = default;

    LicensePlateRestriction(::zserio::PropagateAllocatorT,
            const LicensePlateRestriction& other, const allocator_type& allocator);

    ::nds::rules::types::LicensePlateRestrictionType getLicensePlateRestrictionType() const;
    void setLicensePlateRestrictionType(::nds::rules::types::LicensePlateRestrictionType licensePlateRestrictionType_);

    const ::nds::rules::types::LicensePlateRestrictionRule& getLicensePlateRestrictionRule() const;
    ::nds::rules::types::LicensePlateRestrictionRule& getLicensePlateRestrictionRule();
    void setLicensePlateRestrictionRule(const ::nds::rules::types::LicensePlateRestrictionRule& licensePlateRestrictionRule_);
    void setLicensePlateRestrictionRule(::nds::rules::types::LicensePlateRestrictionRule&& licensePlateRestrictionRule_);

    const ::zserio::string<>& getLicensePlateRestrictionDescription() const;
    ::zserio::string<>& getLicensePlateRestrictionDescription();
    void setLicensePlateRestrictionDescription(const ::zserio::string<>& licensePlateRestrictionDescription_);
    void setLicensePlateRestrictionDescription(::zserio::string<>&& licensePlateRestrictionDescription_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LicensePlateRestriction& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::rules::types::LicensePlateRestrictionType readLicensePlateRestrictionType(::zserio::BitStreamReader& in);
    ::nds::rules::types::LicensePlateRestrictionType readLicensePlateRestrictionType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::rules::types::LicensePlateRestrictionRule readLicensePlateRestrictionRule(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::rules::types::LicensePlateRestrictionRule readLicensePlateRestrictionRule(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::string<> readLicensePlateRestrictionDescription(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::rules::types::LicensePlateRestrictionType m_licensePlateRestrictionType_;
    ::nds::rules::types::LicensePlateRestrictionRule m_licensePlateRestrictionRule_;
    ::zserio::string<> m_licensePlateRestrictionDescription_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_H
