/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_SUPPLEMENTARY_WARNING_SIGN_TEXT_H
#define NDS_RULES_TYPES_SUPPLEMENTARY_WARNING_SIGN_TEXT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/types/LanguageCode.h>

namespace nds
{
namespace rules
{
namespace types
{

class SupplementaryWarningSignText
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLanguageCode()
        {
            return m_languageCode_;
        }

    private:
        ::zserio::DeltaContext m_languageCode_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SupplementaryWarningSignText() noexcept :
            SupplementaryWarningSignText(allocator_type())
    {}

    explicit SupplementaryWarningSignText(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_languageCode = ::nds::core::types::LanguageCode,
            typename ZSERIO_T_text = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_languageCode, SupplementaryWarningSignText, allocator_type> = 0>
    SupplementaryWarningSignText(
            ZSERIO_T_languageCode&& languageCode_,
            ZSERIO_T_text&& text_,
            const allocator_type& allocator = allocator_type()) :
            SupplementaryWarningSignText(allocator)
    {
        m_languageCode_ = ::std::forward<ZSERIO_T_languageCode>(languageCode_);
        m_text_ = ::std::forward<ZSERIO_T_text>(text_);
    }

    explicit SupplementaryWarningSignText(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SupplementaryWarningSignText(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SupplementaryWarningSignText() = default;

    SupplementaryWarningSignText(const SupplementaryWarningSignText&) = default;
    SupplementaryWarningSignText& operator=(const SupplementaryWarningSignText&) = default;

    SupplementaryWarningSignText(SupplementaryWarningSignText&&) = default;
    SupplementaryWarningSignText& operator=(SupplementaryWarningSignText&&) = default;

    SupplementaryWarningSignText(::zserio::PropagateAllocatorT,
            const SupplementaryWarningSignText& other, const allocator_type& allocator);

    ::nds::core::types::LanguageCode getLanguageCode() const;
    void setLanguageCode(::nds::core::types::LanguageCode languageCode_);
    bool isLanguageCodeUsed() const;
    bool isLanguageCodeSet() const;
    void resetLanguageCode();

    const ::zserio::string<>& getText() const;
    ::zserio::string<>& getText();
    void setText(const ::zserio::string<>& text_);
    void setText(::zserio::string<>&& text_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SupplementaryWarningSignText& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode> readLanguageCode(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode> readLanguageCode(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readText(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::InplaceOptionalHolder<::nds::core::types::LanguageCode> m_languageCode_;
    ::zserio::string<> m_text_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_SUPPLEMENTARY_WARNING_SIGN_TEXT_H
