/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LANE_TRAFFIC_PRIORITY_H
#define NDS_RULES_TYPES_LANE_TRAFFIC_PRIORITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/lane/reference/types/LaneGeometryRange.h>
#include <nds/lane/reference/types/LaneId.h>
#include <nds/rules/types/LaneTrafficPriorityReason.h>

namespace nds
{
namespace rules
{
namespace types
{

class LaneTrafficPriority
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getReason()
        {
            return m_reason_;
        }

        ::zserio::DeltaContext& getNumLanes()
        {
            return m_numLanes_;
        }

    private:
        ::zserio::DeltaContext m_reason_;
        ::zserio::DeltaContext m_numLanes_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneTrafficPriority() noexcept :
            LaneTrafficPriority(allocator_type())
    {}

    explicit LaneTrafficPriority(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_otherLanes = ::zserio::vector<::nds::lane::reference::types::LaneId>,
            typename ZSERIO_T_range = ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>>
    LaneTrafficPriority(
            ::nds::rules::types::LaneTrafficPriorityReason reason_,
            uint32_t numLanes_,
            ZSERIO_T_otherLanes&& otherLanes_,
            ZSERIO_T_range&& range_,
            const allocator_type& allocator = allocator_type()) :
            LaneTrafficPriority(allocator)
    {
        m_reason_ = reason_;
        m_numLanes_ = numLanes_;
        m_otherLanes_ = ZserioArrayType_otherLanes(::std::forward<ZSERIO_T_otherLanes>(otherLanes_));
        m_range_ = ZserioArrayType_range(::std::forward<ZSERIO_T_range>(range_));
    }

    explicit LaneTrafficPriority(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneTrafficPriority(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneTrafficPriority() = default;

    LaneTrafficPriority(const LaneTrafficPriority&) = default;
    LaneTrafficPriority& operator=(const LaneTrafficPriority&) = default;

    LaneTrafficPriority(LaneTrafficPriority&&) = default;
    LaneTrafficPriority& operator=(LaneTrafficPriority&&) = default;

    LaneTrafficPriority(::zserio::PropagateAllocatorT,
            const LaneTrafficPriority& other, const allocator_type& allocator);

    ::nds::rules::types::LaneTrafficPriorityReason getReason() const;
    void setReason(::nds::rules::types::LaneTrafficPriorityReason reason_);

    uint32_t getNumLanes() const;
    void setNumLanes(uint32_t numLanes_);

    const ::zserio::vector<::nds::lane::reference::types::LaneId>& getOtherLanes() const;
    ::zserio::vector<::nds::lane::reference::types::LaneId>& getOtherLanes();
    void setOtherLanes(const ::zserio::vector<::nds::lane::reference::types::LaneId>& otherLanes_);
    void setOtherLanes(::zserio::vector<::nds::lane::reference::types::LaneId>&& otherLanes_);

    const ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& getRange() const;
    ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& getRange();
    void setRange(const ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& range_);
    void setRange(::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>&& range_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneTrafficPriority& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_otherLanes
    {
    public:
        using OwnerType = LaneTrafficPriority;

        static void create(LaneTrafficPriority& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneTrafficPriority& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneId>& array,
                ::nds::lane::reference::types::LaneId::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_range
    {
    public:
        using OwnerType = LaneTrafficPriority;

        static void create(LaneTrafficPriority& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(LaneTrafficPriority& owner,
                ::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>& array,
                ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_otherLanes = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneId>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneId, ZserioElementFactory_otherLanes>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_range = ::zserio::Array<::zserio::vector<::nds::lane::reference::types::LaneGeometryRange>, ::zserio::ObjectArrayTraits<::nds::lane::reference::types::LaneGeometryRange, ZserioElementFactory_range>, ::zserio::ArrayType::NORMAL>;

    ::nds::rules::types::LaneTrafficPriorityReason readReason(::zserio::BitStreamReader& in);
    ::nds::rules::types::LaneTrafficPriorityReason readReason(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readNumLanes(::zserio::BitStreamReader& in);
    uint32_t readNumLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_otherLanes readOtherLanes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_otherLanes readOtherLanes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_range readRange(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_range readRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::rules::types::LaneTrafficPriorityReason m_reason_;
    uint32_t m_numLanes_;
    ZserioArrayType_otherLanes m_otherLanes_;
    ZserioArrayType_range m_range_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_LANE_TRAFFIC_PRIORITY_H
