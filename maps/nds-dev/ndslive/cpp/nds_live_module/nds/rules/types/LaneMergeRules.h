/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LANE_MERGE_RULES_H
#define NDS_RULES_TYPES_LANE_MERGE_RULES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace rules
{
namespace types
{

class LaneMergeRules
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    LaneMergeRules() noexcept :
            LaneMergeRules(allocator_type())
    {}

    explicit LaneMergeRules(const allocator_type& allocator) noexcept;

    LaneMergeRules(
            bool yieldToOngoingLane_,
            bool yieldToCurb_,
            bool yieldToTrafficAhead_,
            bool noDividerYieldToCurb_,
            const allocator_type& allocator = allocator_type()) :
            LaneMergeRules(allocator)
    {
        m_yieldToOngoingLane_ = yieldToOngoingLane_;
        m_yieldToCurb_ = yieldToCurb_;
        m_yieldToTrafficAhead_ = yieldToTrafficAhead_;
        m_noDividerYieldToCurb_ = noDividerYieldToCurb_;
    }

    explicit LaneMergeRules(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneMergeRules() = default;

    LaneMergeRules(const LaneMergeRules&) = default;
    LaneMergeRules& operator=(const LaneMergeRules&) = default;

    LaneMergeRules(LaneMergeRules&&) = default;
    LaneMergeRules& operator=(LaneMergeRules&&) = default;

    LaneMergeRules(::zserio::PropagateAllocatorT,
            const LaneMergeRules& other, const allocator_type& allocator);

    bool getYieldToOngoingLane() const;
    void setYieldToOngoingLane(bool yieldToOngoingLane_);

    bool getYieldToCurb() const;
    void setYieldToCurb(bool yieldToCurb_);

    bool getYieldToTrafficAhead() const;
    void setYieldToTrafficAhead(bool yieldToTrafficAhead_);

    bool getNoDividerYieldToCurb() const;
    void setNoDividerYieldToCurb(bool noDividerYieldToCurb_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const LaneMergeRules& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readYieldToOngoingLane(::zserio::BitStreamReader& in);
    bool readYieldToCurb(::zserio::BitStreamReader& in);
    bool readYieldToTrafficAhead(::zserio::BitStreamReader& in);
    bool readNoDividerYieldToCurb(::zserio::BitStreamReader& in);

    bool m_yieldToOngoingLane_;
    bool m_yieldToCurb_;
    bool m_yieldToTrafficAhead_;
    bool m_noDividerYieldToCurb_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_LANE_MERGE_RULES_H
