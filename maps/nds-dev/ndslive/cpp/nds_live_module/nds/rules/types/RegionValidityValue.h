/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_REGION_VALIDITY_VALUE_H
#define NDS_RULES_TYPES_REGION_VALIDITY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/PriorityRoadClass.h>
#include <nds/rules/types/MetricRoadWidth.h>
#include <nds/rules/types/RegionValidityType.h>
#include <nds/rules/types/TrafficZone.h>

namespace nds
{
namespace rules
{
namespace types
{

class RegionValidityValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_numLanes = 0,
        CHOICE_minLanes = 1,
        CHOICE_paved = 2,
        CHOICE_trafficZone = 3,
        CHOICE_priorityRoadClass = 4,
        CHOICE_roadMinimumWidth = 5,
        CHOICE_roadMaximumWidth = 6,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumLanes()
        {
            return m_numLanes_;
        }

        ::zserio::DeltaContext& getMinLanes()
        {
            return m_minLanes_;
        }

        ::zserio::DeltaContext& getTrafficZone()
        {
            return m_trafficZone_;
        }

        ::zserio::DeltaContext& getPriorityRoadClass()
        {
            return m_priorityRoadClass_;
        }

        ::zserio::DeltaContext& getRoadMinimumWidth()
        {
            return m_roadMinimumWidth_;
        }

        ::zserio::DeltaContext& getRoadMaximumWidth()
        {
            return m_roadMaximumWidth_;
        }

    private:
        ::zserio::DeltaContext m_numLanes_;
        ::zserio::DeltaContext m_minLanes_;
        ::zserio::DeltaContext m_trafficZone_;
        ::zserio::DeltaContext m_priorityRoadClass_;
        ::zserio::DeltaContext m_roadMinimumWidth_;
        ::zserio::DeltaContext m_roadMaximumWidth_;
    };

    RegionValidityValue() noexcept :
            RegionValidityValue(allocator_type())
    {}

    explicit RegionValidityValue(const allocator_type& allocator) noexcept;

    explicit RegionValidityValue(::zserio::BitStreamReader& in,
            ::nds::rules::types::RegionValidityType type_, const allocator_type& allocator = allocator_type());
    explicit RegionValidityValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::rules::types::RegionValidityType type_, const allocator_type& allocator = allocator_type());

    ~RegionValidityValue() = default;

    RegionValidityValue(const RegionValidityValue& other);
    RegionValidityValue& operator=(const RegionValidityValue& other);

    RegionValidityValue(RegionValidityValue&& other);
    RegionValidityValue& operator=(RegionValidityValue&& other);

    RegionValidityValue(::zserio::PropagateAllocatorT,
            const RegionValidityValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::rules::types::RegionValidityType type_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::rules::types::RegionValidityType getType() const;

    uint16_t getNumLanes() const;
    void setNumLanes(uint16_t numLanes_);

    uint16_t getMinLanes() const;
    void setMinLanes(uint16_t minLanes_);

    bool getPaved() const;
    void setPaved(bool paved_);

    ::nds::rules::types::TrafficZone getTrafficZone() const;
    void setTrafficZone(::nds::rules::types::TrafficZone trafficZone_);

    ::nds::core::types::PriorityRoadClass getPriorityRoadClass() const;
    void setPriorityRoadClass(::nds::core::types::PriorityRoadClass priorityRoadClass_);

    ::nds::rules::types::MetricRoadWidth getRoadMinimumWidth() const;
    void setRoadMinimumWidth(::nds::rules::types::MetricRoadWidth roadMinimumWidth_);

    ::nds::rules::types::MetricRoadWidth getRoadMaximumWidth() const;
    void setRoadMaximumWidth(::nds::rules::types::MetricRoadWidth roadMaximumWidth_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegionValidityValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::rules::types::RegionValidityType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_REGION_VALIDITY_VALUE_H
