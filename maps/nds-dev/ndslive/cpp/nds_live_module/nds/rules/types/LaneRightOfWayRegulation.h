/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LANE_RIGHT_OF_WAY_REGULATION_H
#define NDS_RULES_TYPES_LANE_RIGHT_OF_WAY_REGULATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/lane/reference/types/LaneGeometryRange.h>
#include <nds/lane/reference/types/LaneId.h>
#include <nds/rules/types/RightOfWayType.h>

namespace nds
{
namespace rules
{
namespace types
{

class LaneRightOfWayRegulation
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::lane::reference::types::LaneId::ZserioPackingContext& getOtherLane()
        {
            return m_otherLane_;
        }

        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext& getOtherLaneRange()
        {
            return m_otherLaneRange_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

    private:
        ::nds::lane::reference::types::LaneId::ZserioPackingContext m_otherLane_;
        ::nds::lane::reference::types::LaneGeometryRange::ZserioPackingContext m_otherLaneRange_;
        ::zserio::DeltaContext m_type_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneRightOfWayRegulation() noexcept :
            LaneRightOfWayRegulation(allocator_type())
    {}

    explicit LaneRightOfWayRegulation(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_otherLane = ::nds::lane::reference::types::LaneId,
            typename ZSERIO_T_otherLaneRange = ::nds::lane::reference::types::LaneGeometryRange,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_otherLane, LaneRightOfWayRegulation, allocator_type> = 0>
    LaneRightOfWayRegulation(
            ZSERIO_T_otherLane&& otherLane_,
            ZSERIO_T_otherLaneRange&& otherLaneRange_,
            ::nds::rules::types::RightOfWayType type_,
            const allocator_type& allocator = allocator_type()) :
            LaneRightOfWayRegulation(allocator)
    {
        m_otherLane_ = ::std::forward<ZSERIO_T_otherLane>(otherLane_);
        m_otherLaneRange_ = ::std::forward<ZSERIO_T_otherLaneRange>(otherLaneRange_);
        m_type_ = type_;
    }

    explicit LaneRightOfWayRegulation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneRightOfWayRegulation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneRightOfWayRegulation() = default;

    LaneRightOfWayRegulation(const LaneRightOfWayRegulation&) = default;
    LaneRightOfWayRegulation& operator=(const LaneRightOfWayRegulation&) = default;

    LaneRightOfWayRegulation(LaneRightOfWayRegulation&&) = default;
    LaneRightOfWayRegulation& operator=(LaneRightOfWayRegulation&&) = default;

    LaneRightOfWayRegulation(::zserio::PropagateAllocatorT,
            const LaneRightOfWayRegulation& other, const allocator_type& allocator);

    const ::nds::lane::reference::types::LaneId& getOtherLane() const;
    ::nds::lane::reference::types::LaneId& getOtherLane();
    void setOtherLane(const ::nds::lane::reference::types::LaneId& otherLane_);
    void setOtherLane(::nds::lane::reference::types::LaneId&& otherLane_);

    const ::nds::lane::reference::types::LaneGeometryRange& getOtherLaneRange() const;
    ::nds::lane::reference::types::LaneGeometryRange& getOtherLaneRange();
    void setOtherLaneRange(const ::nds::lane::reference::types::LaneGeometryRange& otherLaneRange_);
    void setOtherLaneRange(::nds::lane::reference::types::LaneGeometryRange&& otherLaneRange_);

    ::nds::rules::types::RightOfWayType getType() const;
    void setType(::nds::rules::types::RightOfWayType type_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneRightOfWayRegulation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::lane::reference::types::LaneId readOtherLane(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneId readOtherLane(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGeometryRange readOtherLaneRange(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::lane::reference::types::LaneGeometryRange readOtherLaneRange(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::rules::types::RightOfWayType readType(::zserio::BitStreamReader& in);
    ::nds::rules::types::RightOfWayType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::lane::reference::types::LaneId m_otherLane_;
    ::nds::lane::reference::types::LaneGeometryRange m_otherLaneRange_;
    ::nds::rules::types::RightOfWayType m_type_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_LANE_RIGHT_OF_WAY_REGULATION_H
