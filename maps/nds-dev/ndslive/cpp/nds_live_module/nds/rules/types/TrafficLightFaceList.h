/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_LIST_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/rules/types/TrafficLightFace.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficLightFaceList
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficLightFaceList() noexcept :
            TrafficLightFaceList(allocator_type())
    {}

    explicit TrafficLightFaceList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_faces = ::zserio::vector<::nds::rules::types::TrafficLightFace>>
    TrafficLightFaceList(
            bool hasLensPositions_,
            ZSERIO_T_faces&& faces_,
            const allocator_type& allocator = allocator_type()) :
            TrafficLightFaceList(allocator)
    {
        m_hasLensPositions_ = hasLensPositions_;
        m_faces_ = ZserioArrayType_faces(::std::forward<ZSERIO_T_faces>(faces_));
    }

    explicit TrafficLightFaceList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficLightFaceList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficLightFaceList() = default;

    TrafficLightFaceList(const TrafficLightFaceList& other);
    TrafficLightFaceList& operator=(const TrafficLightFaceList& other);

    TrafficLightFaceList(TrafficLightFaceList&& other);
    TrafficLightFaceList& operator=(TrafficLightFaceList&& other);

    TrafficLightFaceList(::zserio::PropagateAllocatorT,
            const TrafficLightFaceList& other, const allocator_type& allocator);

    void initializeChildren();

    bool getHasLensPositions() const;
    void setHasLensPositions(bool hasLensPositions_);

    const ::zserio::vector<::nds::rules::types::TrafficLightFace>& getFaces() const;
    ::zserio::vector<::nds::rules::types::TrafficLightFace>& getFaces();
    void setFaces(const ::zserio::vector<::nds::rules::types::TrafficLightFace>& faces_);
    void setFaces(::zserio::vector<::nds::rules::types::TrafficLightFace>&& faces_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficLightFaceList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_faces
    {
    public:
        using OwnerType = TrafficLightFaceList;

        static void initializeElement(TrafficLightFaceList& owner,
                ::nds::rules::types::TrafficLightFace& element, size_t index);
    };

    class ZserioElementFactory_faces
    {
    public:
        using OwnerType = TrafficLightFaceList;

        static void create(TrafficLightFaceList& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightFace>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TrafficLightFaceList& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightFace>& array,
                ::nds::rules::types::TrafficLightFace::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_faces = ::zserio::Array<::zserio::vector<::nds::rules::types::TrafficLightFace>, ::zserio::ObjectArrayTraits<::nds::rules::types::TrafficLightFace, ZserioElementFactory_faces>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_faces>;

    bool readHasLensPositions(::zserio::BitStreamReader& in);
    ZserioArrayType_faces readFaces(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_faces readFaces(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    bool m_hasLensPositions_;
    ZserioArrayType_faces m_faces_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_LIST_H
