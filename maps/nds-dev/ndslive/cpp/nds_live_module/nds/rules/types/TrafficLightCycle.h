/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_CYCLE_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_CYCLE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/rules/types/TrafficLightPhase.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficLightCycle
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumLenses()
        {
            return m_numLenses_;
        }

    private:
        ::zserio::DeltaContext m_numLenses_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficLightCycle() noexcept :
            TrafficLightCycle(allocator_type())
    {}

    explicit TrafficLightCycle(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_phases = ::zserio::vector<::nds::rules::types::TrafficLightPhase>>
    TrafficLightCycle(
            uint8_t numLenses_,
            ZSERIO_T_phases&& phases_,
            const allocator_type& allocator = allocator_type()) :
            TrafficLightCycle(allocator)
    {
        m_numLenses_ = numLenses_;
        m_phases_ = ZserioArrayType_phases(::std::forward<ZSERIO_T_phases>(phases_));
    }

    explicit TrafficLightCycle(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficLightCycle(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficLightCycle() = default;

    TrafficLightCycle(const TrafficLightCycle& other);
    TrafficLightCycle& operator=(const TrafficLightCycle& other);

    TrafficLightCycle(TrafficLightCycle&& other);
    TrafficLightCycle& operator=(TrafficLightCycle&& other);

    TrafficLightCycle(::zserio::PropagateAllocatorT,
            const TrafficLightCycle& other, const allocator_type& allocator);

    void initializeChildren();

    uint8_t getNumLenses() const;
    void setNumLenses(uint8_t numLenses_);

    const ::zserio::vector<::nds::rules::types::TrafficLightPhase>& getPhases() const;
    ::zserio::vector<::nds::rules::types::TrafficLightPhase>& getPhases();
    void setPhases(const ::zserio::vector<::nds::rules::types::TrafficLightPhase>& phases_);
    void setPhases(::zserio::vector<::nds::rules::types::TrafficLightPhase>&& phases_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficLightCycle& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_phases
    {
    public:
        using OwnerType = TrafficLightCycle;

        static void initializeElement(TrafficLightCycle& owner,
                ::nds::rules::types::TrafficLightPhase& element, size_t index);
    };

    class ZserioElementFactory_phases
    {
    public:
        using OwnerType = TrafficLightCycle;

        static void create(TrafficLightCycle& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightPhase>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TrafficLightCycle& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightPhase>& array,
                ::nds::rules::types::TrafficLightPhase::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_phases = ::zserio::Array<::zserio::vector<::nds::rules::types::TrafficLightPhase>, ::zserio::ObjectArrayTraits<::nds::rules::types::TrafficLightPhase, ZserioElementFactory_phases>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_phases>;

    uint8_t readNumLenses(::zserio::BitStreamReader& in);
    uint8_t readNumLenses(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_phases readPhases(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_phases readPhases(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    uint8_t m_numLenses_;
    ZserioArrayType_phases m_phases_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_CYCLE_H
