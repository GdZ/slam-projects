/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TIME_ZONE_CONFIGURATION_H
#define NDS_RULES_TYPES_TIME_ZONE_CONFIGURATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/conditions/DayOfYear.h>
#include <nds/core/types/QuarterHourTimeOffset.h>
#include <nds/rules/types/DayLightSavingTime.h>
#include <nds/rules/types/TimeZoneName.h>

namespace nds
{
namespace rules
{
namespace types
{

class TimeZoneConfiguration
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::conditions::DayOfYear::ZserioPackingContext& getValidFromDate()
        {
            return m_validFromDate_;
        }

        ::zserio::DeltaContext& getUtcOffset()
        {
            return m_utcOffset_;
        }

        ::nds::rules::types::DayLightSavingTime::ZserioPackingContext& getDayLightSavingTime()
        {
            return m_dayLightSavingTime_;
        }

    private:
        ::nds::core::conditions::DayOfYear::ZserioPackingContext m_validFromDate_;
        ::zserio::DeltaContext m_utcOffset_;
        ::nds::rules::types::DayLightSavingTime::ZserioPackingContext m_dayLightSavingTime_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimeZoneConfiguration() noexcept :
            TimeZoneConfiguration(allocator_type())
    {}

    explicit TimeZoneConfiguration(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_validFromDate = ::nds::core::conditions::DayOfYear,
            typename ZSERIO_T_timeZoneNames = ::zserio::vector<::nds::rules::types::TimeZoneName>,
            typename ZSERIO_T_timeZoneAbbreviations = ::zserio::vector<::nds::rules::types::TimeZoneName>,
            typename ZSERIO_T_dayLightSavingTime = ::nds::rules::types::DayLightSavingTime,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_validFromDate, TimeZoneConfiguration, allocator_type> = 0>
    TimeZoneConfiguration(
            ZSERIO_T_validFromDate&& validFromDate_,
            ::nds::core::types::QuarterHourTimeOffset utcOffset_,
            ZSERIO_T_timeZoneNames&& timeZoneNames_,
            ZSERIO_T_timeZoneAbbreviations&& timeZoneAbbreviations_,
            ZSERIO_T_dayLightSavingTime&& dayLightSavingTime_,
            const allocator_type& allocator = allocator_type()) :
            TimeZoneConfiguration(allocator)
    {
        m_validFromDate_ = ::std::forward<ZSERIO_T_validFromDate>(validFromDate_);
        m_utcOffset_ = utcOffset_;
        m_timeZoneNames_ = ::zserio::createOptionalArray<ZserioArrayType_timeZoneNames>(::std::forward<ZSERIO_T_timeZoneNames>(timeZoneNames_));
        m_timeZoneAbbreviations_ = ::zserio::createOptionalArray<ZserioArrayType_timeZoneAbbreviations>(::std::forward<ZSERIO_T_timeZoneAbbreviations>(timeZoneAbbreviations_));
        m_dayLightSavingTime_ = ::std::forward<ZSERIO_T_dayLightSavingTime>(dayLightSavingTime_);
    }

    explicit TimeZoneConfiguration(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimeZoneConfiguration(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimeZoneConfiguration() = default;

    TimeZoneConfiguration(const TimeZoneConfiguration&) = default;
    TimeZoneConfiguration& operator=(const TimeZoneConfiguration&) = default;

    TimeZoneConfiguration(TimeZoneConfiguration&&) = default;
    TimeZoneConfiguration& operator=(TimeZoneConfiguration&&) = default;

    TimeZoneConfiguration(::zserio::PropagateAllocatorT,
            const TimeZoneConfiguration& other, const allocator_type& allocator);

    const ::nds::core::conditions::DayOfYear& getValidFromDate() const;
    ::nds::core::conditions::DayOfYear& getValidFromDate();
    void setValidFromDate(const ::nds::core::conditions::DayOfYear& validFromDate_);
    void setValidFromDate(::nds::core::conditions::DayOfYear&& validFromDate_);

    ::nds::core::types::QuarterHourTimeOffset getUtcOffset() const;
    void setUtcOffset(::nds::core::types::QuarterHourTimeOffset utcOffset_);

    const ::zserio::vector<::nds::rules::types::TimeZoneName>& getTimeZoneNames() const;
    ::zserio::vector<::nds::rules::types::TimeZoneName>& getTimeZoneNames();
    void setTimeZoneNames(const ::zserio::vector<::nds::rules::types::TimeZoneName>& timeZoneNames_);
    void setTimeZoneNames(::zserio::vector<::nds::rules::types::TimeZoneName>&& timeZoneNames_);
    bool isTimeZoneNamesUsed() const;
    bool isTimeZoneNamesSet() const;
    void resetTimeZoneNames();

    const ::zserio::vector<::nds::rules::types::TimeZoneName>& getTimeZoneAbbreviations() const;
    ::zserio::vector<::nds::rules::types::TimeZoneName>& getTimeZoneAbbreviations();
    void setTimeZoneAbbreviations(const ::zserio::vector<::nds::rules::types::TimeZoneName>& timeZoneAbbreviations_);
    void setTimeZoneAbbreviations(::zserio::vector<::nds::rules::types::TimeZoneName>&& timeZoneAbbreviations_);
    bool isTimeZoneAbbreviationsUsed() const;
    bool isTimeZoneAbbreviationsSet() const;
    void resetTimeZoneAbbreviations();

    const ::nds::rules::types::DayLightSavingTime& getDayLightSavingTime() const;
    ::nds::rules::types::DayLightSavingTime& getDayLightSavingTime();
    void setDayLightSavingTime(const ::nds::rules::types::DayLightSavingTime& dayLightSavingTime_);
    void setDayLightSavingTime(::nds::rules::types::DayLightSavingTime&& dayLightSavingTime_);
    bool isDayLightSavingTimeUsed() const;
    bool isDayLightSavingTimeSet() const;
    void resetDayLightSavingTime();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimeZoneConfiguration& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_timeZoneNames
    {
    public:
        using OwnerType = TimeZoneConfiguration;

        static void create(TimeZoneConfiguration& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TimeZoneConfiguration& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::nds::rules::types::TimeZoneName::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_timeZoneAbbreviations
    {
    public:
        using OwnerType = TimeZoneConfiguration;

        static void create(TimeZoneConfiguration& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TimeZoneConfiguration& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::nds::rules::types::TimeZoneName::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_timeZoneNames = ::zserio::Array<::zserio::vector<::nds::rules::types::TimeZoneName>, ::zserio::ObjectArrayTraits<::nds::rules::types::TimeZoneName, ZserioElementFactory_timeZoneNames>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_timeZoneAbbreviations = ::zserio::Array<::zserio::vector<::nds::rules::types::TimeZoneName>, ::zserio::ObjectArrayTraits<::nds::rules::types::TimeZoneName, ZserioElementFactory_timeZoneAbbreviations>, ::zserio::ArrayType::AUTO>;

    ::nds::core::conditions::DayOfYear readValidFromDate(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::DayOfYear readValidFromDate(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::types::QuarterHourTimeOffset readUtcOffset(::zserio::BitStreamReader& in);
    ::nds::core::types::QuarterHourTimeOffset readUtcOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneNames> readTimeZoneNames(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneNames> readTimeZoneNames(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneAbbreviations> readTimeZoneAbbreviations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneAbbreviations> readTimeZoneAbbreviations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::DayLightSavingTime> readDayLightSavingTime(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::DayLightSavingTime> readDayLightSavingTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::conditions::DayOfYear m_validFromDate_;
    ::nds::core::types::QuarterHourTimeOffset m_utcOffset_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneNames> m_timeZoneNames_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_timeZoneAbbreviations> m_timeZoneAbbreviations_;
    ::zserio::InplaceOptionalHolder<::nds::rules::types::DayLightSavingTime> m_dayLightSavingTime_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TIME_ZONE_CONFIGURATION_H
