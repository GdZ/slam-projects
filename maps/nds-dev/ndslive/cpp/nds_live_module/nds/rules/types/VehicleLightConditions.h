/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_VEHICLE_LIGHT_CONDITIONS_H
#define NDS_RULES_TYPES_VEHICLE_LIGHT_CONDITIONS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace rules
{
namespace types
{

class VehicleLightConditions
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    VehicleLightConditions() noexcept :
            VehicleLightConditions(allocator_type())
    {}

    explicit VehicleLightConditions(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_afterSunset = bool,
            typename ZSERIO_T_withWindshieldWipers = bool,
            typename ZSERIO_T_lowVisibility = bool>
    VehicleLightConditions(
            bool alwaysRequired_,
            ZSERIO_T_afterSunset&& afterSunset_,
            ZSERIO_T_withWindshieldWipers&& withWindshieldWipers_,
            ZSERIO_T_lowVisibility&& lowVisibility_,
            const allocator_type& allocator = allocator_type()) :
            VehicleLightConditions(allocator)
    {
        m_alwaysRequired_ = alwaysRequired_;
        m_afterSunset_ = ::std::forward<ZSERIO_T_afterSunset>(afterSunset_);
        m_withWindshieldWipers_ = ::std::forward<ZSERIO_T_withWindshieldWipers>(withWindshieldWipers_);
        m_lowVisibility_ = ::std::forward<ZSERIO_T_lowVisibility>(lowVisibility_);
    }

    explicit VehicleLightConditions(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleLightConditions() = default;

    VehicleLightConditions(const VehicleLightConditions&) = default;
    VehicleLightConditions& operator=(const VehicleLightConditions&) = default;

    VehicleLightConditions(VehicleLightConditions&&) = default;
    VehicleLightConditions& operator=(VehicleLightConditions&&) = default;

    VehicleLightConditions(::zserio::PropagateAllocatorT,
            const VehicleLightConditions& other, const allocator_type& allocator);

    bool getAlwaysRequired() const;
    void setAlwaysRequired(bool alwaysRequired_);

    bool getAfterSunset() const;
    void setAfterSunset(bool afterSunset_);
    bool isAfterSunsetUsed() const;
    bool isAfterSunsetSet() const;
    void resetAfterSunset();

    bool getWithWindshieldWipers() const;
    void setWithWindshieldWipers(bool withWindshieldWipers_);
    bool isWithWindshieldWipersUsed() const;
    bool isWithWindshieldWipersSet() const;
    void resetWithWindshieldWipers();

    bool getLowVisibility() const;
    void setLowVisibility(bool lowVisibility_);
    bool isLowVisibilityUsed() const;
    bool isLowVisibilitySet() const;
    void resetLowVisibility();

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const VehicleLightConditions& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readAlwaysRequired(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<bool> readAfterSunset(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<bool> readWithWindshieldWipers(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<bool> readLowVisibility(::zserio::BitStreamReader& in);

    bool m_alwaysRequired_;
    ::zserio::InplaceOptionalHolder<bool> m_afterSunset_;
    ::zserio::InplaceOptionalHolder<bool> m_withWindshieldWipers_;
    ::zserio::InplaceOptionalHolder<bool> m_lowVisibility_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_VEHICLE_LIGHT_CONDITIONS_H
