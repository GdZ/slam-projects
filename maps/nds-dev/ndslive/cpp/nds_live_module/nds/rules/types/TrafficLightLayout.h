/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_LAYOUT_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_LAYOUT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/rules/types/TrafficLightConstructionType.h>
#include <nds/rules/types/TrafficLightLens.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficLightLayout
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getConstructionType()
        {
            return m_constructionType_;
        }

        ::zserio::DeltaContext& getNumLenses()
        {
            return m_numLenses_;
        }

    private:
        ::zserio::DeltaContext m_constructionType_;
        ::zserio::DeltaContext m_numLenses_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficLightLayout() noexcept :
            TrafficLightLayout(allocator_type())
    {}

    explicit TrafficLightLayout(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_lensValue = ::zserio::vector<::nds::rules::types::TrafficLightLens>>
    TrafficLightLayout(
            ::nds::rules::types::TrafficLightConstructionType constructionType_,
            uint8_t numLenses_,
            ZSERIO_T_lensValue&& lensValue_,
            const allocator_type& allocator = allocator_type()) :
            TrafficLightLayout(allocator)
    {
        m_constructionType_ = constructionType_;
        m_numLenses_ = numLenses_;
        m_lensValue_ = ZserioArrayType_lensValue(::std::forward<ZSERIO_T_lensValue>(lensValue_));
    }

    explicit TrafficLightLayout(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficLightLayout(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficLightLayout() = default;

    TrafficLightLayout(const TrafficLightLayout&) = default;
    TrafficLightLayout& operator=(const TrafficLightLayout&) = default;

    TrafficLightLayout(TrafficLightLayout&&) = default;
    TrafficLightLayout& operator=(TrafficLightLayout&&) = default;

    TrafficLightLayout(::zserio::PropagateAllocatorT,
            const TrafficLightLayout& other, const allocator_type& allocator);

    ::nds::rules::types::TrafficLightConstructionType getConstructionType() const;
    void setConstructionType(::nds::rules::types::TrafficLightConstructionType constructionType_);

    uint8_t getNumLenses() const;
    void setNumLenses(uint8_t numLenses_);

    const ::zserio::vector<::nds::rules::types::TrafficLightLens>& getLensValue() const;
    ::zserio::vector<::nds::rules::types::TrafficLightLens>& getLensValue();
    void setLensValue(const ::zserio::vector<::nds::rules::types::TrafficLightLens>& lensValue_);
    void setLensValue(::zserio::vector<::nds::rules::types::TrafficLightLens>&& lensValue_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficLightLayout& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_lensValue
    {
    public:
        using OwnerType = TrafficLightLayout;

        static void create(TrafficLightLayout& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightLens>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TrafficLightLayout& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightLens>& array,
                ::nds::rules::types::TrafficLightLens::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_lensValue = ::zserio::Array<::zserio::vector<::nds::rules::types::TrafficLightLens>, ::zserio::ObjectArrayTraits<::nds::rules::types::TrafficLightLens, ZserioElementFactory_lensValue>, ::zserio::ArrayType::NORMAL>;

    ::nds::rules::types::TrafficLightConstructionType readConstructionType(::zserio::BitStreamReader& in);
    ::nds::rules::types::TrafficLightConstructionType readConstructionType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint8_t readNumLenses(::zserio::BitStreamReader& in);
    uint8_t readNumLenses(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_lensValue readLensValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_lensValue readLensValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::rules::types::TrafficLightConstructionType m_constructionType_;
    uint8_t m_numLenses_;
    ZserioArrayType_lensValue m_lensValue_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_LAYOUT_H
