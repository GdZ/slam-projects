/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/BoundingPolygon3D.h>
#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Position3D.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficLightFace
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::BoundingPolygon3D::ZserioPackingContext& getFace()
        {
            return m_face_;
        }

    private:
        ::nds::core::geometry::BoundingPolygon3D::ZserioPackingContext m_face_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficLightFace() noexcept :
            TrafficLightFace(allocator_type())
    {}

    explicit TrafficLightFace(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_face = ::nds::core::geometry::BoundingPolygon3D,
            typename ZSERIO_T_lensPositions = ::zserio::vector<::nds::core::geometry::Position3D>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_face, TrafficLightFace, allocator_type> = 0>
    TrafficLightFace(
            ZSERIO_T_face&& face_,
            ZSERIO_T_lensPositions&& lensPositions_,
            const allocator_type& allocator = allocator_type()) :
            TrafficLightFace(allocator)
    {
        m_face_ = ::std::forward<ZSERIO_T_face>(face_);
        m_lensPositions_ = ZserioArrayType_lensPositions(::std::forward<ZSERIO_T_lensPositions>(lensPositions_));
    }

    explicit TrafficLightFace(::zserio::BitStreamReader& in,
            bool hasLensPositions_, const allocator_type& allocator = allocator_type());
    explicit TrafficLightFace(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            bool hasLensPositions_, const allocator_type& allocator = allocator_type());

    ~TrafficLightFace() = default;

    TrafficLightFace(const TrafficLightFace& other);
    TrafficLightFace& operator=(const TrafficLightFace& other);

    TrafficLightFace(TrafficLightFace&& other);
    TrafficLightFace& operator=(TrafficLightFace&& other);

    TrafficLightFace(::zserio::PropagateAllocatorT,
            const TrafficLightFace& other, const allocator_type& allocator);

    void initialize(
            bool hasLensPositions_);
    bool isInitialized() const;
    void initializeChildren();

    bool getHasLensPositions() const;

    const ::nds::core::geometry::BoundingPolygon3D& getFace() const;
    ::nds::core::geometry::BoundingPolygon3D& getFace();
    void setFace(const ::nds::core::geometry::BoundingPolygon3D& face_);
    void setFace(::nds::core::geometry::BoundingPolygon3D&& face_);

    const ::zserio::vector<::nds::core::geometry::Position3D>& getLensPositions() const;
    ::zserio::vector<::nds::core::geometry::Position3D>& getLensPositions();
    void setLensPositions(const ::zserio::vector<::nds::core::geometry::Position3D>& lensPositions_);
    void setLensPositions(::zserio::vector<::nds::core::geometry::Position3D>&& lensPositions_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficLightFace& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_lensPositions
    {
    public:
        using OwnerType = TrafficLightFace;

        static void initializeElement(TrafficLightFace& owner,
                ::nds::core::geometry::Position3D& element, size_t index);
    };

    class ZserioElementFactory_lensPositions
    {
    public:
        using OwnerType = TrafficLightFace;

        static void create(TrafficLightFace& owner,
                ::zserio::vector<::nds::core::geometry::Position3D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TrafficLightFace& owner,
                ::zserio::vector<::nds::core::geometry::Position3D>& array,
                ::nds::core::geometry::Position3D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_lensPositions = ::zserio::Array<::zserio::vector<::nds::core::geometry::Position3D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Position3D, ZserioElementFactory_lensPositions>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_lensPositions>;

    ::nds::core::geometry::BoundingPolygon3D readFace(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::BoundingPolygon3D readFace(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_lensPositions readLensPositions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_lensPositions readLensPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_hasLensPositions_;
    bool m_isInitialized;
    ::nds::core::geometry::BoundingPolygon3D m_face_;
    ZserioArrayType_lensPositions m_lensPositions_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_FACE_H
