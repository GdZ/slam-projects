/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_INLAY_TYPE_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_INLAY_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class TrafficLightInlayType : uint8_t
{
    UNKNOWN = UINT8_C(0),
    NONE = UINT8_C(1),
    ARROW_UP = UINT8_C(2),
    ARROW_DOWN = UINT8_C(3),
    ARROW_LEFT = UINT8_C(4),
    ARROW_UP_LEFT = UINT8_C(5),
    ARROW_DOWN_LEFT = UINT8_C(6),
    ARROW_RIGHT = UINT8_C(7),
    ARROW_UP_RIGHT = UINT8_C(8),
    ARROW_DOWN_RIGHT = UINT8_C(9),
    ARROW_U_TURN = UINT8_C(10),
    ARROW_LEFT_RIGHT = UINT8_C(11),
    ARROW_STRAIGHT_LEFT = UINT8_C(12),
    ARROW_STRAIGHT_RIGHT = UINT8_C(13),
    ARROW_STRAIGHT_LEFT_RIGHT = UINT8_C(14),
    PEDESTRIAN = UINT8_C(15),
    BICYCLE = UINT8_C(16),
    PEDESTRIAN_BICYCLE = UINT8_C(17),
    HAND = UINT8_C(18),
    TRAM = UINT8_C(19),
    BUS = UINT8_C(20),
    COUNTDOWN = UINT8_C(21),
    BAR_HORIZONTAL = UINT8_C(22),
    BAR_STRAIGHT = UINT8_C(23),
    BAR_LEFT = UINT8_C(24),
    BAR_RIGHT = UINT8_C(25),
    BAR_DOUBLE_STRAIGHT = UINT8_C(26),
    TRIANGLE = UINT8_C(27),
    CIRCLE = UINT8_C(28),
    PLUS = UINT8_C(29),
    CROSS = UINT8_C(30),
    CIRCLE_RING = UINT8_C(31),
    CIRCLE_MATRIX = UINT8_C(32),
    LETTER = UINT8_C(33),
    TEXT = UINT8_C(34),
    NUMBERS = UINT8_C(35),
    OTHER = UINT8_C(36)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficLightInlayType enumeration.
template <>
struct EnumTraits<::nds::rules::types::TrafficLightInlayType>
{
    static constexpr ::std::array<const char*, 37> names =
    {{
        "UNKNOWN",
        "NONE",
        "ARROW_UP",
        "ARROW_DOWN",
        "ARROW_LEFT",
        "ARROW_UP_LEFT",
        "ARROW_DOWN_LEFT",
        "ARROW_RIGHT",
        "ARROW_UP_RIGHT",
        "ARROW_DOWN_RIGHT",
        "ARROW_U_TURN",
        "ARROW_LEFT_RIGHT",
        "ARROW_STRAIGHT_LEFT",
        "ARROW_STRAIGHT_RIGHT",
        "ARROW_STRAIGHT_LEFT_RIGHT",
        "PEDESTRIAN",
        "BICYCLE",
        "PEDESTRIAN_BICYCLE",
        "HAND",
        "TRAM",
        "BUS",
        "COUNTDOWN",
        "BAR_HORIZONTAL",
        "BAR_STRAIGHT",
        "BAR_LEFT",
        "BAR_RIGHT",
        "BAR_DOUBLE_STRAIGHT",
        "TRIANGLE",
        "CIRCLE",
        "PLUS",
        "CROSS",
        "CIRCLE_RING",
        "CIRCLE_MATRIX",
        "LETTER",
        "TEXT",
        "NUMBERS",
        "OTHER"
    }};

    static constexpr ::std::array<::nds::rules::types::TrafficLightInlayType, 37> values =
    {{
        ::nds::rules::types::TrafficLightInlayType::UNKNOWN,
        ::nds::rules::types::TrafficLightInlayType::NONE,
        ::nds::rules::types::TrafficLightInlayType::ARROW_UP,
        ::nds::rules::types::TrafficLightInlayType::ARROW_DOWN,
        ::nds::rules::types::TrafficLightInlayType::ARROW_LEFT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_UP_LEFT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_DOWN_LEFT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_UP_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_DOWN_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_U_TURN,
        ::nds::rules::types::TrafficLightInlayType::ARROW_LEFT_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_STRAIGHT_LEFT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_STRAIGHT_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::ARROW_STRAIGHT_LEFT_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::PEDESTRIAN,
        ::nds::rules::types::TrafficLightInlayType::BICYCLE,
        ::nds::rules::types::TrafficLightInlayType::PEDESTRIAN_BICYCLE,
        ::nds::rules::types::TrafficLightInlayType::HAND,
        ::nds::rules::types::TrafficLightInlayType::TRAM,
        ::nds::rules::types::TrafficLightInlayType::BUS,
        ::nds::rules::types::TrafficLightInlayType::COUNTDOWN,
        ::nds::rules::types::TrafficLightInlayType::BAR_HORIZONTAL,
        ::nds::rules::types::TrafficLightInlayType::BAR_STRAIGHT,
        ::nds::rules::types::TrafficLightInlayType::BAR_LEFT,
        ::nds::rules::types::TrafficLightInlayType::BAR_RIGHT,
        ::nds::rules::types::TrafficLightInlayType::BAR_DOUBLE_STRAIGHT,
        ::nds::rules::types::TrafficLightInlayType::TRIANGLE,
        ::nds::rules::types::TrafficLightInlayType::CIRCLE,
        ::nds::rules::types::TrafficLightInlayType::PLUS,
        ::nds::rules::types::TrafficLightInlayType::CROSS,
        ::nds::rules::types::TrafficLightInlayType::CIRCLE_RING,
        ::nds::rules::types::TrafficLightInlayType::CIRCLE_MATRIX,
        ::nds::rules::types::TrafficLightInlayType::LETTER,
        ::nds::rules::types::TrafficLightInlayType::TEXT,
        ::nds::rules::types::TrafficLightInlayType::NUMBERS,
        ::nds::rules::types::TrafficLightInlayType::OTHER
    }};

    static constexpr const char* enumName = "TrafficLightInlayType";
};

template <>
size_t enumToOrdinal<::nds::rules::types::TrafficLightInlayType>(::nds::rules::types::TrafficLightInlayType value);

template <>
::nds::rules::types::TrafficLightInlayType valueToEnum<::nds::rules::types::TrafficLightInlayType>(
        typename ::std::underlying_type<::nds::rules::types::TrafficLightInlayType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::TrafficLightInlayType>(::nds::rules::types::TrafficLightInlayType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::TrafficLightInlayType>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightInlayType value);

template <>
size_t bitSizeOf<::nds::rules::types::TrafficLightInlayType>(::nds::rules::types::TrafficLightInlayType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::TrafficLightInlayType>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightInlayType value);

template <>
size_t initializeOffsets<::nds::rules::types::TrafficLightInlayType>(size_t bitPosition, ::nds::rules::types::TrafficLightInlayType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::TrafficLightInlayType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::TrafficLightInlayType value);

template <>
::nds::rules::types::TrafficLightInlayType read<::nds::rules::types::TrafficLightInlayType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::TrafficLightInlayType read<::nds::rules::types::TrafficLightInlayType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::TrafficLightInlayType>(::zserio::BitStreamWriter& out, ::nds::rules::types::TrafficLightInlayType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::TrafficLightInlayType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::TrafficLightInlayType value);

} // namespace zserio

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_INLAY_TYPE_H
