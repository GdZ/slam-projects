/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_DAY_LIGHT_SAVING_TIME_H
#define NDS_RULES_TYPES_DAY_LIGHT_SAVING_TIME_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/conditions/MonthOfYear.h>
#include <nds/core/conditions/TimeOfDay.h>
#include <nds/core/conditions/WeekdayInMonth.h>
#include <nds/core/types/QuarterHourTimeOffset.h>
#include <nds/rules/types/TimeZoneName.h>

namespace nds
{
namespace rules
{
namespace types
{

class DayLightSavingTime
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getUtcOffset()
        {
            return m_utcOffset_;
        }

        ::nds::core::conditions::TimeOfDay::ZserioPackingContext& getStartTimeOfDay()
        {
            return m_startTimeOfDay_;
        }

        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext& getStartWeekdayInMonth()
        {
            return m_startWeekdayInMonth_;
        }

        ::zserio::DeltaContext& getStartMonthOfYear()
        {
            return m_startMonthOfYear_;
        }

        ::nds::core::conditions::TimeOfDay::ZserioPackingContext& getEndTimeOfDay()
        {
            return m_endTimeOfDay_;
        }

        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext& getEndWeekdayInMonth()
        {
            return m_endWeekdayInMonth_;
        }

        ::zserio::DeltaContext& getEndMonthOfYear()
        {
            return m_endMonthOfYear_;
        }

    private:
        ::zserio::DeltaContext m_utcOffset_;
        ::nds::core::conditions::TimeOfDay::ZserioPackingContext m_startTimeOfDay_;
        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext m_startWeekdayInMonth_;
        ::zserio::DeltaContext m_startMonthOfYear_;
        ::nds::core::conditions::TimeOfDay::ZserioPackingContext m_endTimeOfDay_;
        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext m_endWeekdayInMonth_;
        ::zserio::DeltaContext m_endMonthOfYear_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DayLightSavingTime() noexcept :
            DayLightSavingTime(allocator_type())
    {}

    explicit DayLightSavingTime(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_names = ::zserio::vector<::nds::rules::types::TimeZoneName>,
            typename ZSERIO_T_abbreviationNames = ::zserio::vector<::nds::rules::types::TimeZoneName>,
            typename ZSERIO_T_startTimeOfDay = ::nds::core::conditions::TimeOfDay,
            typename ZSERIO_T_startWeekdayInMonth = ::nds::core::conditions::WeekdayInMonth,
            typename ZSERIO_T_endTimeOfDay = ::nds::core::conditions::TimeOfDay,
            typename ZSERIO_T_endWeekdayInMonth = ::nds::core::conditions::WeekdayInMonth>
    DayLightSavingTime(
            ::nds::core::types::QuarterHourTimeOffset utcOffset_,
            ZSERIO_T_names&& names_,
            ZSERIO_T_abbreviationNames&& abbreviationNames_,
            ZSERIO_T_startTimeOfDay&& startTimeOfDay_,
            ZSERIO_T_startWeekdayInMonth&& startWeekdayInMonth_,
            ::nds::core::conditions::MonthOfYear startMonthOfYear_,
            ZSERIO_T_endTimeOfDay&& endTimeOfDay_,
            ZSERIO_T_endWeekdayInMonth&& endWeekdayInMonth_,
            ::nds::core::conditions::MonthOfYear endMonthOfYear_,
            const allocator_type& allocator = allocator_type()) :
            DayLightSavingTime(allocator)
    {
        m_utcOffset_ = utcOffset_;
        m_names_ = ::zserio::createOptionalArray<ZserioArrayType_names>(::std::forward<ZSERIO_T_names>(names_));
        m_abbreviationNames_ = ::zserio::createOptionalArray<ZserioArrayType_abbreviationNames>(::std::forward<ZSERIO_T_abbreviationNames>(abbreviationNames_));
        m_startTimeOfDay_ = ::std::forward<ZSERIO_T_startTimeOfDay>(startTimeOfDay_);
        m_startWeekdayInMonth_ = ::std::forward<ZSERIO_T_startWeekdayInMonth>(startWeekdayInMonth_);
        m_startMonthOfYear_ = startMonthOfYear_;
        m_endTimeOfDay_ = ::std::forward<ZSERIO_T_endTimeOfDay>(endTimeOfDay_);
        m_endWeekdayInMonth_ = ::std::forward<ZSERIO_T_endWeekdayInMonth>(endWeekdayInMonth_);
        m_endMonthOfYear_ = endMonthOfYear_;
    }

    explicit DayLightSavingTime(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DayLightSavingTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DayLightSavingTime() = default;

    DayLightSavingTime(const DayLightSavingTime&) = default;
    DayLightSavingTime& operator=(const DayLightSavingTime&) = default;

    DayLightSavingTime(DayLightSavingTime&&) = default;
    DayLightSavingTime& operator=(DayLightSavingTime&&) = default;

    DayLightSavingTime(::zserio::PropagateAllocatorT,
            const DayLightSavingTime& other, const allocator_type& allocator);

    ::nds::core::types::QuarterHourTimeOffset getUtcOffset() const;
    void setUtcOffset(::nds::core::types::QuarterHourTimeOffset utcOffset_);

    const ::zserio::vector<::nds::rules::types::TimeZoneName>& getNames() const;
    ::zserio::vector<::nds::rules::types::TimeZoneName>& getNames();
    void setNames(const ::zserio::vector<::nds::rules::types::TimeZoneName>& names_);
    void setNames(::zserio::vector<::nds::rules::types::TimeZoneName>&& names_);
    bool isNamesUsed() const;
    bool isNamesSet() const;
    void resetNames();

    const ::zserio::vector<::nds::rules::types::TimeZoneName>& getAbbreviationNames() const;
    ::zserio::vector<::nds::rules::types::TimeZoneName>& getAbbreviationNames();
    void setAbbreviationNames(const ::zserio::vector<::nds::rules::types::TimeZoneName>& abbreviationNames_);
    void setAbbreviationNames(::zserio::vector<::nds::rules::types::TimeZoneName>&& abbreviationNames_);
    bool isAbbreviationNamesUsed() const;
    bool isAbbreviationNamesSet() const;
    void resetAbbreviationNames();

    const ::nds::core::conditions::TimeOfDay& getStartTimeOfDay() const;
    ::nds::core::conditions::TimeOfDay& getStartTimeOfDay();
    void setStartTimeOfDay(const ::nds::core::conditions::TimeOfDay& startTimeOfDay_);
    void setStartTimeOfDay(::nds::core::conditions::TimeOfDay&& startTimeOfDay_);

    const ::nds::core::conditions::WeekdayInMonth& getStartWeekdayInMonth() const;
    ::nds::core::conditions::WeekdayInMonth& getStartWeekdayInMonth();
    void setStartWeekdayInMonth(const ::nds::core::conditions::WeekdayInMonth& startWeekdayInMonth_);
    void setStartWeekdayInMonth(::nds::core::conditions::WeekdayInMonth&& startWeekdayInMonth_);

    ::nds::core::conditions::MonthOfYear getStartMonthOfYear() const;
    void setStartMonthOfYear(::nds::core::conditions::MonthOfYear startMonthOfYear_);

    const ::nds::core::conditions::TimeOfDay& getEndTimeOfDay() const;
    ::nds::core::conditions::TimeOfDay& getEndTimeOfDay();
    void setEndTimeOfDay(const ::nds::core::conditions::TimeOfDay& endTimeOfDay_);
    void setEndTimeOfDay(::nds::core::conditions::TimeOfDay&& endTimeOfDay_);

    const ::nds::core::conditions::WeekdayInMonth& getEndWeekdayInMonth() const;
    ::nds::core::conditions::WeekdayInMonth& getEndWeekdayInMonth();
    void setEndWeekdayInMonth(const ::nds::core::conditions::WeekdayInMonth& endWeekdayInMonth_);
    void setEndWeekdayInMonth(::nds::core::conditions::WeekdayInMonth&& endWeekdayInMonth_);

    ::nds::core::conditions::MonthOfYear getEndMonthOfYear() const;
    void setEndMonthOfYear(::nds::core::conditions::MonthOfYear endMonthOfYear_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DayLightSavingTime& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_names
    {
    public:
        using OwnerType = DayLightSavingTime;

        static void create(DayLightSavingTime& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(DayLightSavingTime& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::nds::rules::types::TimeZoneName::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioElementFactory_abbreviationNames
    {
    public:
        using OwnerType = DayLightSavingTime;

        static void create(DayLightSavingTime& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(DayLightSavingTime& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneName>& array,
                ::nds::rules::types::TimeZoneName::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_names = ::zserio::Array<::zserio::vector<::nds::rules::types::TimeZoneName>, ::zserio::ObjectArrayTraits<::nds::rules::types::TimeZoneName, ZserioElementFactory_names>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_abbreviationNames = ::zserio::Array<::zserio::vector<::nds::rules::types::TimeZoneName>, ::zserio::ObjectArrayTraits<::nds::rules::types::TimeZoneName, ZserioElementFactory_abbreviationNames>, ::zserio::ArrayType::AUTO>;

    ::nds::core::types::QuarterHourTimeOffset readUtcOffset(::zserio::BitStreamReader& in);
    ::nds::core::types::QuarterHourTimeOffset readUtcOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_names> readNames(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_names> readNames(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_abbreviationNames> readAbbreviationNames(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_abbreviationNames> readAbbreviationNames(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::TimeOfDay readStartTimeOfDay(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::TimeOfDay readStartTimeOfDay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::WeekdayInMonth readStartWeekdayInMonth(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::WeekdayInMonth readStartWeekdayInMonth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::MonthOfYear readStartMonthOfYear(::zserio::BitStreamReader& in);
    ::nds::core::conditions::MonthOfYear readStartMonthOfYear(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::conditions::TimeOfDay readEndTimeOfDay(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::TimeOfDay readEndTimeOfDay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::WeekdayInMonth readEndWeekdayInMonth(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::conditions::WeekdayInMonth readEndWeekdayInMonth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::conditions::MonthOfYear readEndMonthOfYear(::zserio::BitStreamReader& in);
    ::nds::core::conditions::MonthOfYear readEndMonthOfYear(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::types::QuarterHourTimeOffset m_utcOffset_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_names> m_names_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_abbreviationNames> m_abbreviationNames_;
    ::nds::core::conditions::TimeOfDay m_startTimeOfDay_;
    ::nds::core::conditions::WeekdayInMonth m_startWeekdayInMonth_;
    ::nds::core::conditions::MonthOfYear m_startMonthOfYear_;
    ::nds::core::conditions::TimeOfDay m_endTimeOfDay_;
    ::nds::core::conditions::WeekdayInMonth m_endWeekdayInMonth_;
    ::nds::core::conditions::MonthOfYear m_endMonthOfYear_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_DAY_LIGHT_SAVING_TIME_H
