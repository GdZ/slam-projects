/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_COLOR_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_COLOR_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class TrafficLightLensColor : uint8_t
{
    UNKNOWN = UINT8_C(0),
    RED = UINT8_C(1),
    AMBER = UINT8_C(2),
    GREEN = UINT8_C(3),
    WHITE = UINT8_C(4),
    BLUE = UINT8_C(5),
    OTHER_COLOR = UINT8_C(6)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficLightLensColor enumeration.
template <>
struct EnumTraits<::nds::rules::types::TrafficLightLensColor>
{
    static constexpr ::std::array<const char*, 7> names =
    {{
        "UNKNOWN",
        "RED",
        "AMBER",
        "GREEN",
        "WHITE",
        "BLUE",
        "OTHER_COLOR"
    }};

    static constexpr ::std::array<::nds::rules::types::TrafficLightLensColor, 7> values =
    {{
        ::nds::rules::types::TrafficLightLensColor::UNKNOWN,
        ::nds::rules::types::TrafficLightLensColor::RED,
        ::nds::rules::types::TrafficLightLensColor::AMBER,
        ::nds::rules::types::TrafficLightLensColor::GREEN,
        ::nds::rules::types::TrafficLightLensColor::WHITE,
        ::nds::rules::types::TrafficLightLensColor::BLUE,
        ::nds::rules::types::TrafficLightLensColor::OTHER_COLOR
    }};

    static constexpr const char* enumName = "TrafficLightLensColor";
};

template <>
size_t enumToOrdinal<::nds::rules::types::TrafficLightLensColor>(::nds::rules::types::TrafficLightLensColor value);

template <>
::nds::rules::types::TrafficLightLensColor valueToEnum<::nds::rules::types::TrafficLightLensColor>(
        typename ::std::underlying_type<::nds::rules::types::TrafficLightLensColor>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::TrafficLightLensColor>(::nds::rules::types::TrafficLightLensColor value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::TrafficLightLensColor>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightLensColor value);

template <>
size_t bitSizeOf<::nds::rules::types::TrafficLightLensColor>(::nds::rules::types::TrafficLightLensColor value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::TrafficLightLensColor>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightLensColor value);

template <>
size_t initializeOffsets<::nds::rules::types::TrafficLightLensColor>(size_t bitPosition, ::nds::rules::types::TrafficLightLensColor value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::TrafficLightLensColor>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::TrafficLightLensColor value);

template <>
::nds::rules::types::TrafficLightLensColor read<::nds::rules::types::TrafficLightLensColor>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::TrafficLightLensColor read<::nds::rules::types::TrafficLightLensColor, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::TrafficLightLensColor>(::zserio::BitStreamWriter& out, ::nds::rules::types::TrafficLightLensColor value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::TrafficLightLensColor>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::TrafficLightLensColor value);

} // namespace zserio

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_COLOR_H
