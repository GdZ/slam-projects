/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TIME_ZONE_NAME_H
#define NDS_RULES_TYPES_TIME_ZONE_NAME_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/types/LanguageCode.h>

namespace nds
{
namespace rules
{
namespace types
{

class TimeZoneName
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLanguageCode()
        {
            return m_languageCode_;
        }

    private:
        ::zserio::DeltaContext m_languageCode_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimeZoneName() noexcept :
            TimeZoneName(allocator_type())
    {}

    explicit TimeZoneName(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_nameString = ::zserio::string<>>
    TimeZoneName(
            ::nds::core::types::LanguageCode languageCode_,
            ZSERIO_T_nameString&& nameString_,
            const allocator_type& allocator = allocator_type()) :
            TimeZoneName(allocator)
    {
        m_languageCode_ = languageCode_;
        m_nameString_ = ::std::forward<ZSERIO_T_nameString>(nameString_);
    }

    explicit TimeZoneName(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimeZoneName(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimeZoneName() = default;

    TimeZoneName(const TimeZoneName&) = default;
    TimeZoneName& operator=(const TimeZoneName&) = default;

    TimeZoneName(TimeZoneName&&) = default;
    TimeZoneName& operator=(TimeZoneName&&) = default;

    TimeZoneName(::zserio::PropagateAllocatorT,
            const TimeZoneName& other, const allocator_type& allocator);

    ::nds::core::types::LanguageCode getLanguageCode() const;
    void setLanguageCode(::nds::core::types::LanguageCode languageCode_);

    const ::zserio::string<>& getNameString() const;
    ::zserio::string<>& getNameString();
    void setNameString(const ::zserio::string<>& nameString_);
    void setNameString(::zserio::string<>&& nameString_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimeZoneName& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::LanguageCode readLanguageCode(::zserio::BitStreamReader& in);
    ::nds::core::types::LanguageCode readLanguageCode(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readNameString(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::types::LanguageCode m_languageCode_;
    ::zserio::string<> m_nameString_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TIME_ZONE_NAME_H
