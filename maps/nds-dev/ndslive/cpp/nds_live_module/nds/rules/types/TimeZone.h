/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TIME_ZONE_H
#define NDS_RULES_TYPES_TIME_ZONE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Vector.h>

#include <nds/rules/types/TimeZoneConfiguration.h>

namespace nds
{
namespace rules
{
namespace types
{

class TimeZone
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimeZone() noexcept :
            TimeZone(allocator_type())
    {}

    explicit TimeZone(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_olsonId = ::zserio::string<>,
            typename ZSERIO_T_timeZoneConfigurations = ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_olsonId, TimeZone, allocator_type> = 0>
    TimeZone(
            ZSERIO_T_olsonId&& olsonId_,
            ZSERIO_T_timeZoneConfigurations&& timeZoneConfigurations_,
            const allocator_type& allocator = allocator_type()) :
            TimeZone(allocator)
    {
        m_olsonId_ = ::std::forward<ZSERIO_T_olsonId>(olsonId_);
        m_timeZoneConfigurations_ = ZserioArrayType_timeZoneConfigurations(::std::forward<ZSERIO_T_timeZoneConfigurations>(timeZoneConfigurations_));
    }

    explicit TimeZone(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimeZone(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimeZone() = default;

    TimeZone(const TimeZone&) = default;
    TimeZone& operator=(const TimeZone&) = default;

    TimeZone(TimeZone&&) = default;
    TimeZone& operator=(TimeZone&&) = default;

    TimeZone(::zserio::PropagateAllocatorT,
            const TimeZone& other, const allocator_type& allocator);

    const ::zserio::string<>& getOlsonId() const;
    ::zserio::string<>& getOlsonId();
    void setOlsonId(const ::zserio::string<>& olsonId_);
    void setOlsonId(::zserio::string<>&& olsonId_);
    bool isOlsonIdUsed() const;
    bool isOlsonIdSet() const;
    void resetOlsonId();

    const ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>& getTimeZoneConfigurations() const;
    ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>& getTimeZoneConfigurations();
    void setTimeZoneConfigurations(const ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>& timeZoneConfigurations_);
    void setTimeZoneConfigurations(::zserio::vector<::nds::rules::types::TimeZoneConfiguration>&& timeZoneConfigurations_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimeZone& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_timeZoneConfigurations
    {
    public:
        using OwnerType = TimeZone;

        static void create(TimeZone& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TimeZone& owner,
                ::zserio::vector<::nds::rules::types::TimeZoneConfiguration>& array,
                ::nds::rules::types::TimeZoneConfiguration::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_timeZoneConfigurations = ::zserio::Array<::zserio::vector<::nds::rules::types::TimeZoneConfiguration>, ::zserio::ObjectArrayTraits<::nds::rules::types::TimeZoneConfiguration, ZserioElementFactory_timeZoneConfigurations>, ::zserio::ArrayType::AUTO>;

    ::zserio::InplaceOptionalHolder<::zserio::string<>> readOlsonId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_timeZoneConfigurations readTimeZoneConfigurations(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_timeZoneConfigurations readTimeZoneConfigurations(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_olsonId_;
    ZserioArrayType_timeZoneConfigurations m_timeZoneConfigurations_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TIME_ZONE_H
