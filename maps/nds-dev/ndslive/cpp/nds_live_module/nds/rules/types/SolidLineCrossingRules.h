/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_SOLID_LINE_CROSSING_RULES_H
#define NDS_RULES_TYPES_SOLID_LINE_CROSSING_RULES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace rules
{
namespace types
{

class SolidLineCrossingRules
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    SolidLineCrossingRules() noexcept :
            SolidLineCrossingRules(allocator_type())
    {}

    explicit SolidLineCrossingRules(const allocator_type& allocator) noexcept;

    SolidLineCrossingRules(
            bool duringEmergencies_,
            bool enterShoulderLane_,
            bool enterBusLane_,
            bool overtakeSlowTraffic_,
            bool enterPremisesOrSideRoads_,
            bool avoidObstacles_,
            const allocator_type& allocator = allocator_type()) :
            SolidLineCrossingRules(allocator)
    {
        m_duringEmergencies_ = duringEmergencies_;
        m_enterShoulderLane_ = enterShoulderLane_;
        m_enterBusLane_ = enterBusLane_;
        m_overtakeSlowTraffic_ = overtakeSlowTraffic_;
        m_enterPremisesOrSideRoads_ = enterPremisesOrSideRoads_;
        m_avoidObstacles_ = avoidObstacles_;
    }

    explicit SolidLineCrossingRules(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SolidLineCrossingRules() = default;

    SolidLineCrossingRules(const SolidLineCrossingRules&) = default;
    SolidLineCrossingRules& operator=(const SolidLineCrossingRules&) = default;

    SolidLineCrossingRules(SolidLineCrossingRules&&) = default;
    SolidLineCrossingRules& operator=(SolidLineCrossingRules&&) = default;

    SolidLineCrossingRules(::zserio::PropagateAllocatorT,
            const SolidLineCrossingRules& other, const allocator_type& allocator);

    bool getDuringEmergencies() const;
    void setDuringEmergencies(bool duringEmergencies_);

    bool getEnterShoulderLane() const;
    void setEnterShoulderLane(bool enterShoulderLane_);

    bool getEnterBusLane() const;
    void setEnterBusLane(bool enterBusLane_);

    bool getOvertakeSlowTraffic() const;
    void setOvertakeSlowTraffic(bool overtakeSlowTraffic_);

    bool getEnterPremisesOrSideRoads() const;
    void setEnterPremisesOrSideRoads(bool enterPremisesOrSideRoads_);

    bool getAvoidObstacles() const;
    void setAvoidObstacles(bool avoidObstacles_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const SolidLineCrossingRules& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readDuringEmergencies(::zserio::BitStreamReader& in);
    bool readEnterShoulderLane(::zserio::BitStreamReader& in);
    bool readEnterBusLane(::zserio::BitStreamReader& in);
    bool readOvertakeSlowTraffic(::zserio::BitStreamReader& in);
    bool readEnterPremisesOrSideRoads(::zserio::BitStreamReader& in);
    bool readAvoidObstacles(::zserio::BitStreamReader& in);

    bool m_duringEmergencies_;
    bool m_enterShoulderLane_;
    bool m_enterBusLane_;
    bool m_overtakeSlowTraffic_;
    bool m_enterPremisesOrSideRoads_;
    bool m_avoidObstacles_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_SOLID_LINE_CROSSING_RULES_H
