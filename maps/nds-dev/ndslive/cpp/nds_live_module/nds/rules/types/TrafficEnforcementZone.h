/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_ENFORCEMENT_ZONE_H
#define NDS_RULES_TYPES_TRAFFIC_ENFORCEMENT_ZONE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/LengthMeters.h>
#include <nds/core/types/TrafficEnforcementZoneType.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficEnforcementZone
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getTrafficEnforcementZoneType()
        {
            return m_trafficEnforcementZoneType_;
        }

        ::zserio::DeltaContext& getZoneLength()
        {
            return m_zoneLength_;
        }

    private:
        ::zserio::DeltaContext m_trafficEnforcementZoneType_;
        ::zserio::DeltaContext m_zoneLength_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficEnforcementZone() noexcept :
            TrafficEnforcementZone(allocator_type())
    {}

    explicit TrafficEnforcementZone(const allocator_type& allocator) noexcept;

    TrafficEnforcementZone(
            ::nds::core::types::TrafficEnforcementZoneType trafficEnforcementZoneType_,
            ::nds::core::types::LengthMeters zoneLength_,
            const allocator_type& allocator = allocator_type()) :
            TrafficEnforcementZone(allocator)
    {
        m_trafficEnforcementZoneType_ = trafficEnforcementZoneType_;
        m_zoneLength_ = zoneLength_;
    }

    explicit TrafficEnforcementZone(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficEnforcementZone(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficEnforcementZone() = default;

    TrafficEnforcementZone(const TrafficEnforcementZone&) = default;
    TrafficEnforcementZone& operator=(const TrafficEnforcementZone&) = default;

    TrafficEnforcementZone(TrafficEnforcementZone&&) = default;
    TrafficEnforcementZone& operator=(TrafficEnforcementZone&&) = default;

    TrafficEnforcementZone(::zserio::PropagateAllocatorT,
            const TrafficEnforcementZone& other, const allocator_type& allocator);

    ::nds::core::types::TrafficEnforcementZoneType getTrafficEnforcementZoneType() const;
    void setTrafficEnforcementZoneType(::nds::core::types::TrafficEnforcementZoneType trafficEnforcementZoneType_);

    ::nds::core::types::LengthMeters getZoneLength() const;
    void setZoneLength(::nds::core::types::LengthMeters zoneLength_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficEnforcementZone& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::TrafficEnforcementZoneType readTrafficEnforcementZoneType(::zserio::BitStreamReader& in);
    ::nds::core::types::TrafficEnforcementZoneType readTrafficEnforcementZoneType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::LengthMeters readZoneLength(::zserio::BitStreamReader& in);
    ::nds::core::types::LengthMeters readZoneLength(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::types::TrafficEnforcementZoneType m_trafficEnforcementZoneType_;
    ::nds::core::types::LengthMeters m_zoneLength_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_ENFORCEMENT_ZONE_H
