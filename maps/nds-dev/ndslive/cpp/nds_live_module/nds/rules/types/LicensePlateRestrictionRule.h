/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_RULE_H
#define NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_RULE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/rules/types/LicensePlateDigitRuleType.h>

namespace nds
{
namespace rules
{
namespace types
{

class LicensePlateRestrictionRule
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getFirstDigitRuleType()
        {
            return m_firstDigitRuleType_;
        }

        ::zserio::DeltaContext& getNumFirstSpecialDigits()
        {
            return m_numFirstSpecialDigits_;
        }

        ::zserio::DeltaContext& getLastDigitRuleType()
        {
            return m_lastDigitRuleType_;
        }

        ::zserio::DeltaContext& getNumLastSpecialDigits()
        {
            return m_numLastSpecialDigits_;
        }

        ::zserio::DeltaContext& getNumSpecificPlates()
        {
            return m_numSpecificPlates_;
        }

    private:
        ::zserio::DeltaContext m_firstDigitRuleType_;
        ::zserio::DeltaContext m_numFirstSpecialDigits_;
        ::zserio::DeltaContext m_lastDigitRuleType_;
        ::zserio::DeltaContext m_numLastSpecialDigits_;
        ::zserio::DeltaContext m_numSpecificPlates_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LicensePlateRestrictionRule() noexcept :
            LicensePlateRestrictionRule(allocator_type())
    {}

    explicit LicensePlateRestrictionRule(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_firstDigitRuleType = ::nds::rules::types::LicensePlateDigitRuleType,
            typename ZSERIO_T_numFirstSpecialDigits = uint8_t,
            typename ZSERIO_T_firstSpecialDigit = ::zserio::vector<::zserio::string<>>,
            typename ZSERIO_T_lastDigitRuleType = ::nds::rules::types::LicensePlateDigitRuleType,
            typename ZSERIO_T_numLastSpecialDigits = uint8_t,
            typename ZSERIO_T_lastSpecialDigit = ::zserio::vector<::zserio::string<>>,
            typename ZSERIO_T_numSpecificPlates = uint8_t,
            typename ZSERIO_T_specificPlates = ::zserio::vector<::zserio::string<>>>
    LicensePlateRestrictionRule(
            bool noPermitPaper_,
            bool isSpecificPlates_,
            bool isFirstDigitRule_,
            bool isLastDigitRule_,
            ZSERIO_T_firstDigitRuleType&& firstDigitRuleType_,
            ZSERIO_T_numFirstSpecialDigits&& numFirstSpecialDigits_,
            ZSERIO_T_firstSpecialDigit&& firstSpecialDigit_,
            ZSERIO_T_lastDigitRuleType&& lastDigitRuleType_,
            ZSERIO_T_numLastSpecialDigits&& numLastSpecialDigits_,
            ZSERIO_T_lastSpecialDigit&& lastSpecialDigit_,
            ZSERIO_T_numSpecificPlates&& numSpecificPlates_,
            ZSERIO_T_specificPlates&& specificPlates_,
            const allocator_type& allocator = allocator_type()) :
            LicensePlateRestrictionRule(allocator)
    {
        m_noPermitPaper_ = noPermitPaper_;
        m_isSpecificPlates_ = isSpecificPlates_;
        m_isFirstDigitRule_ = isFirstDigitRule_;
        m_isLastDigitRule_ = isLastDigitRule_;
        m_firstDigitRuleType_ = ::std::forward<ZSERIO_T_firstDigitRuleType>(firstDigitRuleType_);
        m_numFirstSpecialDigits_ = ::std::forward<ZSERIO_T_numFirstSpecialDigits>(numFirstSpecialDigits_);
        m_firstSpecialDigit_ = ::zserio::createOptionalArray<ZserioArrayType_firstSpecialDigit>(::std::forward<ZSERIO_T_firstSpecialDigit>(firstSpecialDigit_));
        m_lastDigitRuleType_ = ::std::forward<ZSERIO_T_lastDigitRuleType>(lastDigitRuleType_);
        m_numLastSpecialDigits_ = ::std::forward<ZSERIO_T_numLastSpecialDigits>(numLastSpecialDigits_);
        m_lastSpecialDigit_ = ::zserio::createOptionalArray<ZserioArrayType_lastSpecialDigit>(::std::forward<ZSERIO_T_lastSpecialDigit>(lastSpecialDigit_));
        m_numSpecificPlates_ = ::std::forward<ZSERIO_T_numSpecificPlates>(numSpecificPlates_);
        m_specificPlates_ = ::zserio::createOptionalArray<ZserioArrayType_specificPlates>(::std::forward<ZSERIO_T_specificPlates>(specificPlates_));
    }

    explicit LicensePlateRestrictionRule(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LicensePlateRestrictionRule(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LicensePlateRestrictionRule() = default;

    LicensePlateRestrictionRule(const LicensePlateRestrictionRule&) = default;
    LicensePlateRestrictionRule& operator=(const LicensePlateRestrictionRule&) = default;

    LicensePlateRestrictionRule(LicensePlateRestrictionRule&&) = default;
    LicensePlateRestrictionRule& operator=(LicensePlateRestrictionRule&&) = default;

    LicensePlateRestrictionRule(::zserio::PropagateAllocatorT,
            const LicensePlateRestrictionRule& other, const allocator_type& allocator);

    bool getNoPermitPaper() const;
    void setNoPermitPaper(bool noPermitPaper_);

    bool getIsSpecificPlates() const;
    void setIsSpecificPlates(bool isSpecificPlates_);

    bool getIsFirstDigitRule() const;
    void setIsFirstDigitRule(bool isFirstDigitRule_);

    bool getIsLastDigitRule() const;
    void setIsLastDigitRule(bool isLastDigitRule_);

    ::nds::rules::types::LicensePlateDigitRuleType getFirstDigitRuleType() const;
    void setFirstDigitRuleType(::nds::rules::types::LicensePlateDigitRuleType firstDigitRuleType_);
    bool isFirstDigitRuleTypeUsed() const;
    bool isFirstDigitRuleTypeSet() const;
    void resetFirstDigitRuleType();

    uint8_t getNumFirstSpecialDigits() const;
    void setNumFirstSpecialDigits(uint8_t numFirstSpecialDigits_);
    bool isNumFirstSpecialDigitsUsed() const;
    bool isNumFirstSpecialDigitsSet() const;
    void resetNumFirstSpecialDigits();

    const ::zserio::vector<::zserio::string<>>& getFirstSpecialDigit() const;
    ::zserio::vector<::zserio::string<>>& getFirstSpecialDigit();
    void setFirstSpecialDigit(const ::zserio::vector<::zserio::string<>>& firstSpecialDigit_);
    void setFirstSpecialDigit(::zserio::vector<::zserio::string<>>&& firstSpecialDigit_);
    bool isFirstSpecialDigitUsed() const;
    bool isFirstSpecialDigitSet() const;
    void resetFirstSpecialDigit();

    ::nds::rules::types::LicensePlateDigitRuleType getLastDigitRuleType() const;
    void setLastDigitRuleType(::nds::rules::types::LicensePlateDigitRuleType lastDigitRuleType_);
    bool isLastDigitRuleTypeUsed() const;
    bool isLastDigitRuleTypeSet() const;
    void resetLastDigitRuleType();

    uint8_t getNumLastSpecialDigits() const;
    void setNumLastSpecialDigits(uint8_t numLastSpecialDigits_);
    bool isNumLastSpecialDigitsUsed() const;
    bool isNumLastSpecialDigitsSet() const;
    void resetNumLastSpecialDigits();

    const ::zserio::vector<::zserio::string<>>& getLastSpecialDigit() const;
    ::zserio::vector<::zserio::string<>>& getLastSpecialDigit();
    void setLastSpecialDigit(const ::zserio::vector<::zserio::string<>>& lastSpecialDigit_);
    void setLastSpecialDigit(::zserio::vector<::zserio::string<>>&& lastSpecialDigit_);
    bool isLastSpecialDigitUsed() const;
    bool isLastSpecialDigitSet() const;
    void resetLastSpecialDigit();

    uint8_t getNumSpecificPlates() const;
    void setNumSpecificPlates(uint8_t numSpecificPlates_);
    bool isNumSpecificPlatesUsed() const;
    bool isNumSpecificPlatesSet() const;
    void resetNumSpecificPlates();

    const ::zserio::vector<::zserio::string<>>& getSpecificPlates() const;
    ::zserio::vector<::zserio::string<>>& getSpecificPlates();
    void setSpecificPlates(const ::zserio::vector<::zserio::string<>>& specificPlates_);
    void setSpecificPlates(::zserio::vector<::zserio::string<>>&& specificPlates_);
    bool isSpecificPlatesUsed() const;
    bool isSpecificPlatesSet() const;
    void resetSpecificPlates();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LicensePlateRestrictionRule& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_firstSpecialDigit = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_lastSpecialDigit = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_specificPlates = ::zserio::Array<::zserio::vector<::zserio::string<>>, ::zserio::StringArrayTraits, ::zserio::ArrayType::NORMAL>;

    bool readNoPermitPaper(::zserio::BitStreamReader& in);
    bool readIsSpecificPlates(::zserio::BitStreamReader& in);
    bool readIsFirstDigitRule(::zserio::BitStreamReader& in);
    bool readIsLastDigitRule(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> readFirstDigitRuleType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> readFirstDigitRuleType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumFirstSpecialDigits(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumFirstSpecialDigits(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_firstSpecialDigit> readFirstSpecialDigit(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> readLastDigitRuleType(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> readLastDigitRuleType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumLastSpecialDigits(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumLastSpecialDigits(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_lastSpecialDigit> readLastSpecialDigit(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumSpecificPlates(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint8_t> readNumSpecificPlates(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_specificPlates> readSpecificPlates(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_noPermitPaper_;
    bool m_isSpecificPlates_;
    bool m_isFirstDigitRule_;
    bool m_isLastDigitRule_;
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> m_firstDigitRuleType_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_numFirstSpecialDigits_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_firstSpecialDigit> m_firstSpecialDigit_;
    ::zserio::InplaceOptionalHolder<::nds::rules::types::LicensePlateDigitRuleType> m_lastDigitRuleType_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_numLastSpecialDigits_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_lastSpecialDigit> m_lastSpecialDigit_;
    ::zserio::InplaceOptionalHolder<uint8_t> m_numSpecificPlates_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_specificPlates> m_specificPlates_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_LICENSE_PLATE_RESTRICTION_RULE_H
