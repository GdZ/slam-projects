/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_PHASE_MEANING_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_PHASE_MEANING_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class TrafficLightPhaseMeaning : uint8_t
{
    OFF = UINT8_C(0),
    STOP_WAIT = UINT8_C(1),
    GO = UINT8_C(2),
    PROTECTED_GO = UINT8_C(3),
    STOP_WAIT_EXPECTED = UINT8_C(4),
    PREPARE_TO_GO = UINT8_C(5),
    STOP_GO = UINT8_C(6)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficLightPhaseMeaning enumeration.
template <>
struct EnumTraits<::nds::rules::types::TrafficLightPhaseMeaning>
{
    static constexpr ::std::array<const char*, 7> names =
    {{
        "OFF",
        "STOP_WAIT",
        "GO",
        "PROTECTED_GO",
        "STOP_WAIT_EXPECTED",
        "PREPARE_TO_GO",
        "STOP_GO"
    }};

    static constexpr ::std::array<::nds::rules::types::TrafficLightPhaseMeaning, 7> values =
    {{
        ::nds::rules::types::TrafficLightPhaseMeaning::OFF,
        ::nds::rules::types::TrafficLightPhaseMeaning::STOP_WAIT,
        ::nds::rules::types::TrafficLightPhaseMeaning::GO,
        ::nds::rules::types::TrafficLightPhaseMeaning::PROTECTED_GO,
        ::nds::rules::types::TrafficLightPhaseMeaning::STOP_WAIT_EXPECTED,
        ::nds::rules::types::TrafficLightPhaseMeaning::PREPARE_TO_GO,
        ::nds::rules::types::TrafficLightPhaseMeaning::STOP_GO
    }};

    static constexpr const char* enumName = "TrafficLightPhaseMeaning";
};

template <>
size_t enumToOrdinal<::nds::rules::types::TrafficLightPhaseMeaning>(::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
::nds::rules::types::TrafficLightPhaseMeaning valueToEnum<::nds::rules::types::TrafficLightPhaseMeaning>(
        typename ::std::underlying_type<::nds::rules::types::TrafficLightPhaseMeaning>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::TrafficLightPhaseMeaning>(::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
size_t bitSizeOf<::nds::rules::types::TrafficLightPhaseMeaning>(::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
size_t initializeOffsets<::nds::rules::types::TrafficLightPhaseMeaning>(size_t bitPosition, ::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
::nds::rules::types::TrafficLightPhaseMeaning read<::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::TrafficLightPhaseMeaning read<::nds::rules::types::TrafficLightPhaseMeaning, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::BitStreamWriter& out, ::nds::rules::types::TrafficLightPhaseMeaning value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::TrafficLightPhaseMeaning>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::TrafficLightPhaseMeaning value);

} // namespace zserio

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_PHASE_MEANING_H
