/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/rules/types/TrafficLightLensDetails.h>
#include <nds/rules/types/TrafficLightLensGroup.h>
#include <nds/rules/types/TrafficLightLensType.h>

namespace nds
{
namespace rules
{
namespace types
{

class TrafficLightLens
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getGroup()
        {
            return m_group_;
        }

        ::zserio::DeltaContext& getLensType()
        {
            return m_lensType_;
        }

        ::nds::rules::types::TrafficLightLensDetails::ZserioPackingContext& getLensDetails()
        {
            return m_lensDetails_;
        }

    private:
        ::zserio::DeltaContext m_group_;
        ::zserio::DeltaContext m_lensType_;
        ::nds::rules::types::TrafficLightLensDetails::ZserioPackingContext m_lensDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TrafficLightLens() noexcept :
            TrafficLightLens(allocator_type())
    {}

    explicit TrafficLightLens(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_group = ::nds::rules::types::TrafficLightLensGroup,
            typename ZSERIO_T_lensDetails = ::nds::rules::types::TrafficLightLensDetails,
            typename ZSERIO_T_lensDetailList = ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>>
    TrafficLightLens(
            bool groupedLens_,
            ZSERIO_T_group&& group_,
            ::nds::rules::types::TrafficLightLensType lensType_,
            ZSERIO_T_lensDetails&& lensDetails_,
            ZSERIO_T_lensDetailList&& lensDetailList_,
            const allocator_type& allocator = allocator_type()) :
            TrafficLightLens(allocator)
    {
        m_groupedLens_ = groupedLens_;
        m_group_ = ::std::forward<ZSERIO_T_group>(group_);
        m_lensType_ = lensType_;
        m_lensDetails_ = ::std::forward<ZSERIO_T_lensDetails>(lensDetails_);
        m_lensDetailList_ = ::zserio::createOptionalArray<ZserioArrayType_lensDetailList>(::std::forward<ZSERIO_T_lensDetailList>(lensDetailList_));
    }

    explicit TrafficLightLens(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TrafficLightLens(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TrafficLightLens() = default;

    TrafficLightLens(const TrafficLightLens&) = default;
    TrafficLightLens& operator=(const TrafficLightLens&) = default;

    TrafficLightLens(TrafficLightLens&&) = default;
    TrafficLightLens& operator=(TrafficLightLens&&) = default;

    TrafficLightLens(::zserio::PropagateAllocatorT,
            const TrafficLightLens& other, const allocator_type& allocator);

    bool getGroupedLens() const;
    void setGroupedLens(bool groupedLens_);

    ::nds::rules::types::TrafficLightLensGroup getGroup() const;
    void setGroup(::nds::rules::types::TrafficLightLensGroup group_);
    bool isGroupUsed() const;
    bool isGroupSet() const;
    void resetGroup();

    ::nds::rules::types::TrafficLightLensType getLensType() const;
    void setLensType(::nds::rules::types::TrafficLightLensType lensType_);

    const ::nds::rules::types::TrafficLightLensDetails& getLensDetails() const;
    ::nds::rules::types::TrafficLightLensDetails& getLensDetails();
    void setLensDetails(const ::nds::rules::types::TrafficLightLensDetails& lensDetails_);
    void setLensDetails(::nds::rules::types::TrafficLightLensDetails&& lensDetails_);
    bool isLensDetailsUsed() const;
    bool isLensDetailsSet() const;
    void resetLensDetails();

    const ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>& getLensDetailList() const;
    ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>& getLensDetailList();
    void setLensDetailList(const ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>& lensDetailList_);
    void setLensDetailList(::zserio::vector<::nds::rules::types::TrafficLightLensDetails>&& lensDetailList_);
    bool isLensDetailListUsed() const;
    bool isLensDetailListSet() const;
    void resetLensDetailList();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TrafficLightLens& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_lensDetailList
    {
    public:
        using OwnerType = TrafficLightLens;

        static void create(TrafficLightLens& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TrafficLightLens& owner,
                ::zserio::vector<::nds::rules::types::TrafficLightLensDetails>& array,
                ::nds::rules::types::TrafficLightLensDetails::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_lensDetailList = ::zserio::Array<::zserio::vector<::nds::rules::types::TrafficLightLensDetails>, ::zserio::ObjectArrayTraits<::nds::rules::types::TrafficLightLensDetails, ZserioElementFactory_lensDetailList>, ::zserio::ArrayType::AUTO>;

    bool readGroupedLens(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensGroup> readGroup(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensGroup> readGroup(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::rules::types::TrafficLightLensType readLensType(::zserio::BitStreamReader& in);
    ::nds::rules::types::TrafficLightLensType readLensType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensDetails> readLensDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensDetails> readLensDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_lensDetailList> readLensDetailList(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_lensDetailList> readLensDetailList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_groupedLens_;
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensGroup> m_group_;
    ::nds::rules::types::TrafficLightLensType m_lensType_;
    ::zserio::InplaceOptionalHolder<::nds::rules::types::TrafficLightLensDetails> m_lensDetails_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_lensDetailList> m_lensDetailList_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_LENS_H
