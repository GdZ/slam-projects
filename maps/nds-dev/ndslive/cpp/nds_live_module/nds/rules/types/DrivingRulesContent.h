/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_DRIVING_RULES_CONTENT_H
#define NDS_RULES_TYPES_DRIVING_RULES_CONTENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

class DrivingRulesContent
{
public:
    using underlying_type = uint32_t;

    enum class Values : underlying_type
    {
        STAY_CURBSIDE = UINT32_C(1),
        TEMPORARY_LANE_MARKING_COLOR = UINT32_C(2),
        CURBSIDE_PASSING = UINT32_C(4),
        EMERGENCY_RULES = UINT32_C(8),
        YIELD_RULES = UINT32_C(16),
        SOLID_LINE_RULES = UINT32_C(32),
        ROADSIDE_PARKING_RULES = UINT32_C(64),
        LANE_MERGE_RULES = UINT32_C(128)
    };

    constexpr DrivingRulesContent() noexcept :
            m_value(0)
    {}

    explicit DrivingRulesContent(::zserio::BitStreamReader& in);
    DrivingRulesContent(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr DrivingRulesContent(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit DrivingRulesContent(underlying_type value);

    ~DrivingRulesContent() = default;

    DrivingRulesContent(const DrivingRulesContent&) = default;
    DrivingRulesContent& operator=(const DrivingRulesContent&) = default;

    DrivingRulesContent(DrivingRulesContent&&) = default;
    DrivingRulesContent& operator=(DrivingRulesContent&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline DrivingRulesContent operator|(DrivingRulesContent::Values lhs, DrivingRulesContent::Values rhs)
{
    return DrivingRulesContent(static_cast<DrivingRulesContent::underlying_type>(lhs) | static_cast<DrivingRulesContent::underlying_type>(rhs));
}

inline DrivingRulesContent operator|(const DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    return DrivingRulesContent(lhs.getValue() | rhs.getValue());
}

inline DrivingRulesContent operator&(DrivingRulesContent::Values lhs, DrivingRulesContent::Values rhs)
{
    return DrivingRulesContent(static_cast<DrivingRulesContent::underlying_type>(lhs) & static_cast<DrivingRulesContent::underlying_type>(rhs));
}

inline DrivingRulesContent operator&(const DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    return DrivingRulesContent(lhs.getValue() & rhs.getValue());
}

inline DrivingRulesContent operator^(DrivingRulesContent::Values lhs, DrivingRulesContent::Values rhs)
{
    return DrivingRulesContent(static_cast<DrivingRulesContent::underlying_type>(lhs) ^ static_cast<DrivingRulesContent::underlying_type>(rhs));
}

inline DrivingRulesContent operator^(const DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    return DrivingRulesContent(lhs.getValue() ^ rhs.getValue());
}

inline DrivingRulesContent operator~(DrivingRulesContent::Values lhs)
{
    return DrivingRulesContent(~static_cast<DrivingRulesContent::underlying_type>(lhs) & UINT32_C(536870911));
}

inline DrivingRulesContent operator~(const DrivingRulesContent& lhs)
{
    return DrivingRulesContent(~lhs.getValue() & UINT32_C(536870911));
}

inline DrivingRulesContent operator|=(DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    lhs = DrivingRulesContent(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline DrivingRulesContent operator&=(DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    lhs = DrivingRulesContent(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline DrivingRulesContent operator^=(DrivingRulesContent& lhs, const DrivingRulesContent& rhs)
{
    lhs = DrivingRulesContent(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_DRIVING_RULES_CONTENT_H
