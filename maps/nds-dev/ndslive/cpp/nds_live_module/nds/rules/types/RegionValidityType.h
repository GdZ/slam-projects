/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_REGION_VALIDITY_TYPE_H
#define NDS_RULES_TYPES_REGION_VALIDITY_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class RegionValidityType : uint8_t
{
    NUM_LANES = UINT8_C(0),
    MIN_LANES = UINT8_C(1),
    PAVED = UINT8_C(2),
    TRAFFIC_ZONE = UINT8_C(3),
    PRIORITY_ROAD_CLASS = UINT8_C(4),
    BEGINNER = UINT8_C(5),
    NO_MARKINGS = UINT8_C(6),
    ROAD_MINIMUM_WIDTH = UINT8_C(7),
    ROAD_MAXIMUM_WIDTH = UINT8_C(8),
    HAS_STREET_LIGHTS = UINT8_C(9),
    SHARED_ROAD_SURFACE_WITH_PEDESTRIANS = UINT8_C(10),
    IN_BUSINESS_DISTRICT = UINT8_C(11)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RegionValidityType enumeration.
template <>
struct EnumTraits<::nds::rules::types::RegionValidityType>
{
    static constexpr ::std::array<const char*, 12> names =
    {{
        "NUM_LANES",
        "MIN_LANES",
        "PAVED",
        "TRAFFIC_ZONE",
        "PRIORITY_ROAD_CLASS",
        "BEGINNER",
        "NO_MARKINGS",
        "ROAD_MINIMUM_WIDTH",
        "ROAD_MAXIMUM_WIDTH",
        "HAS_STREET_LIGHTS",
        "SHARED_ROAD_SURFACE_WITH_PEDESTRIANS",
        "IN_BUSINESS_DISTRICT"
    }};

    static constexpr ::std::array<::nds::rules::types::RegionValidityType, 12> values =
    {{
        ::nds::rules::types::RegionValidityType::NUM_LANES,
        ::nds::rules::types::RegionValidityType::MIN_LANES,
        ::nds::rules::types::RegionValidityType::PAVED,
        ::nds::rules::types::RegionValidityType::TRAFFIC_ZONE,
        ::nds::rules::types::RegionValidityType::PRIORITY_ROAD_CLASS,
        ::nds::rules::types::RegionValidityType::BEGINNER,
        ::nds::rules::types::RegionValidityType::NO_MARKINGS,
        ::nds::rules::types::RegionValidityType::ROAD_MINIMUM_WIDTH,
        ::nds::rules::types::RegionValidityType::ROAD_MAXIMUM_WIDTH,
        ::nds::rules::types::RegionValidityType::HAS_STREET_LIGHTS,
        ::nds::rules::types::RegionValidityType::SHARED_ROAD_SURFACE_WITH_PEDESTRIANS,
        ::nds::rules::types::RegionValidityType::IN_BUSINESS_DISTRICT
    }};

    static constexpr const char* enumName = "RegionValidityType";
};

template <>
size_t enumToOrdinal<::nds::rules::types::RegionValidityType>(::nds::rules::types::RegionValidityType value);

template <>
::nds::rules::types::RegionValidityType valueToEnum<::nds::rules::types::RegionValidityType>(
        typename ::std::underlying_type<::nds::rules::types::RegionValidityType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::RegionValidityType>(::nds::rules::types::RegionValidityType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::RegionValidityType>(::zserio::DeltaContext& context, ::nds::rules::types::RegionValidityType value);

template <>
size_t bitSizeOf<::nds::rules::types::RegionValidityType>(::nds::rules::types::RegionValidityType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::RegionValidityType>(::zserio::DeltaContext& context, ::nds::rules::types::RegionValidityType value);

template <>
size_t initializeOffsets<::nds::rules::types::RegionValidityType>(size_t bitPosition, ::nds::rules::types::RegionValidityType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::RegionValidityType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::RegionValidityType value);

template <>
::nds::rules::types::RegionValidityType read<::nds::rules::types::RegionValidityType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::RegionValidityType read<::nds::rules::types::RegionValidityType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::RegionValidityType>(::zserio::BitStreamWriter& out, ::nds::rules::types::RegionValidityType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::RegionValidityType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::RegionValidityType value);

} // namespace zserio

#endif // NDS_RULES_TYPES_REGION_VALIDITY_TYPE_H
