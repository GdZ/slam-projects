/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_REGION_VALIDITY_H
#define NDS_RULES_TYPES_REGION_VALIDITY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/types/RoadTypeSet.h>
#include <nds/rules/types/RegionValidityAttribute.h>

namespace nds
{
namespace rules
{
namespace types
{

class RegionValidity
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::types::RoadTypeSet::ZserioPackingContext& getRoads()
        {
            return m_roads_;
        }

    private:
        ::nds::core::types::RoadTypeSet::ZserioPackingContext m_roads_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RegionValidity() noexcept :
            RegionValidity(allocator_type())
    {}

    explicit RegionValidity(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roads = ::nds::core::types::RoadTypeSet,
            typename ZSERIO_T_attributes = ::zserio::vector<::nds::rules::types::RegionValidityAttribute>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_roads, RegionValidity, allocator_type> = 0>
    RegionValidity(
            ZSERIO_T_roads&& roads_,
            ZSERIO_T_attributes&& attributes_,
            const allocator_type& allocator = allocator_type()) :
            RegionValidity(allocator)
    {
        m_roads_ = ::std::forward<ZSERIO_T_roads>(roads_);
        m_attributes_ = ::zserio::createOptionalArray<ZserioArrayType_attributes>(::std::forward<ZSERIO_T_attributes>(attributes_));
    }

    explicit RegionValidity(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit RegionValidity(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~RegionValidity() = default;

    RegionValidity(const RegionValidity& other);
    RegionValidity& operator=(const RegionValidity& other);

    RegionValidity(RegionValidity&& other);
    RegionValidity& operator=(RegionValidity&& other);

    RegionValidity(::zserio::PropagateAllocatorT,
            const RegionValidity& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::core::types::RoadTypeSet& getRoads() const;
    ::nds::core::types::RoadTypeSet& getRoads();
    void setRoads(const ::nds::core::types::RoadTypeSet& roads_);
    void setRoads(::nds::core::types::RoadTypeSet&& roads_);

    const ::zserio::vector<::nds::rules::types::RegionValidityAttribute>& getAttributes() const;
    ::zserio::vector<::nds::rules::types::RegionValidityAttribute>& getAttributes();
    void setAttributes(const ::zserio::vector<::nds::rules::types::RegionValidityAttribute>& attributes_);
    void setAttributes(::zserio::vector<::nds::rules::types::RegionValidityAttribute>&& attributes_);
    bool isAttributesUsed() const;
    bool isAttributesSet() const;
    void resetAttributes();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RegionValidity& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_attributes
    {
    public:
        using OwnerType = RegionValidity;

        static void initializeElement(RegionValidity& owner,
                ::nds::rules::types::RegionValidityAttribute& element, size_t index);
    };

    class ZserioElementFactory_attributes
    {
    public:
        using OwnerType = RegionValidity;

        static void create(RegionValidity& owner,
                ::zserio::vector<::nds::rules::types::RegionValidityAttribute>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RegionValidity& owner,
                ::zserio::vector<::nds::rules::types::RegionValidityAttribute>& array,
                ::nds::rules::types::RegionValidityAttribute::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_attributes = ::zserio::Array<::zserio::vector<::nds::rules::types::RegionValidityAttribute>, ::zserio::ObjectArrayTraits<::nds::rules::types::RegionValidityAttribute, ZserioElementFactory_attributes>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_attributes>;

    ::nds::core::types::RoadTypeSet readRoads(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::RoadTypeSet readRoads(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> readAttributes(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> readAttributes(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::core::types::RoadTypeSet m_roads_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_attributes> m_attributes_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_REGION_VALIDITY_H
