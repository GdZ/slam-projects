/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_OFFICIAL_LANGUAGES_H
#define NDS_RULES_TYPES_OFFICIAL_LANGUAGES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/LanguageCode.h>

namespace nds
{
namespace rules
{
namespace types
{

class OfficialLanguages
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    OfficialLanguages() noexcept :
            OfficialLanguages(allocator_type())
    {}

    explicit OfficialLanguages(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_officialLanguages = ::zserio::vector<::nds::core::types::LanguageCode>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_officialLanguages, OfficialLanguages, allocator_type> = 0>
    explicit OfficialLanguages(
            ZSERIO_T_officialLanguages&& officialLanguages_,
            const allocator_type& allocator = allocator_type()) :
            OfficialLanguages(allocator)
    {
        m_officialLanguages_ = ZserioArrayType_officialLanguages(::std::forward<ZSERIO_T_officialLanguages>(officialLanguages_));
    }

    explicit OfficialLanguages(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit OfficialLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~OfficialLanguages() = default;

    OfficialLanguages(const OfficialLanguages&) = default;
    OfficialLanguages& operator=(const OfficialLanguages&) = default;

    OfficialLanguages(OfficialLanguages&&) = default;
    OfficialLanguages& operator=(OfficialLanguages&&) = default;

    OfficialLanguages(::zserio::PropagateAllocatorT,
            const OfficialLanguages& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::types::LanguageCode>& getOfficialLanguages() const;
    ::zserio::vector<::nds::core::types::LanguageCode>& getOfficialLanguages();
    void setOfficialLanguages(const ::zserio::vector<::nds::core::types::LanguageCode>& officialLanguages_);
    void setOfficialLanguages(::zserio::vector<::nds::core::types::LanguageCode>&& officialLanguages_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const OfficialLanguages& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_officialLanguages = ::zserio::Array<::zserio::vector<::nds::core::types::LanguageCode>, ::zserio::VarIntNNArrayTraits<::nds::core::types::LanguageCode>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_officialLanguages readOfficialLanguages(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_officialLanguages readOfficialLanguages(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_officialLanguages m_officialLanguages_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_OFFICIAL_LANGUAGES_H
