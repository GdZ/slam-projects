/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_TRAFFIC_LIGHT_USAGE_TYPE_H
#define NDS_RULES_TYPES_TRAFFIC_LIGHT_USAGE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace rules
{
namespace types
{

enum class TrafficLightUsageType : uint8_t
{
    INTERSECTION = UINT8_C(0),
    RAMP_METER = UINT8_C(1),
    TOLL_BOOTH = UINT8_C(2),
    PEDESTRIAN_CROSSING = UINT8_C(3),
    BICYCLE_CROSSING = UINT8_C(4),
    TUNNEL = UINT8_C(5),
    BRIDGE = UINT8_C(6),
    LANE_CONTROL = UINT8_C(7),
    RAILWAY_CROSSING = UINT8_C(8),
    TRAM_CROSSING = UINT8_C(9),
    SPEED_SIGN = UINT8_C(10),
    WARNING_LIGHT = UINT8_C(11),
    ADVANCE_WARNING_LIGHT = UINT8_C(12),
    PEDESTRIAN = UINT8_C(13)
};

} // namespace types
} // namespace rules
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficLightUsageType enumeration.
template <>
struct EnumTraits<::nds::rules::types::TrafficLightUsageType>
{
    static constexpr ::std::array<const char*, 14> names =
    {{
        "INTERSECTION",
        "RAMP_METER",
        "TOLL_BOOTH",
        "PEDESTRIAN_CROSSING",
        "BICYCLE_CROSSING",
        "TUNNEL",
        "BRIDGE",
        "LANE_CONTROL",
        "RAILWAY_CROSSING",
        "TRAM_CROSSING",
        "SPEED_SIGN",
        "WARNING_LIGHT",
        "ADVANCE_WARNING_LIGHT",
        "PEDESTRIAN"
    }};

    static constexpr ::std::array<::nds::rules::types::TrafficLightUsageType, 14> values =
    {{
        ::nds::rules::types::TrafficLightUsageType::INTERSECTION,
        ::nds::rules::types::TrafficLightUsageType::RAMP_METER,
        ::nds::rules::types::TrafficLightUsageType::TOLL_BOOTH,
        ::nds::rules::types::TrafficLightUsageType::PEDESTRIAN_CROSSING,
        ::nds::rules::types::TrafficLightUsageType::BICYCLE_CROSSING,
        ::nds::rules::types::TrafficLightUsageType::TUNNEL,
        ::nds::rules::types::TrafficLightUsageType::BRIDGE,
        ::nds::rules::types::TrafficLightUsageType::LANE_CONTROL,
        ::nds::rules::types::TrafficLightUsageType::RAILWAY_CROSSING,
        ::nds::rules::types::TrafficLightUsageType::TRAM_CROSSING,
        ::nds::rules::types::TrafficLightUsageType::SPEED_SIGN,
        ::nds::rules::types::TrafficLightUsageType::WARNING_LIGHT,
        ::nds::rules::types::TrafficLightUsageType::ADVANCE_WARNING_LIGHT,
        ::nds::rules::types::TrafficLightUsageType::PEDESTRIAN
    }};

    static constexpr const char* enumName = "TrafficLightUsageType";
};

template <>
size_t enumToOrdinal<::nds::rules::types::TrafficLightUsageType>(::nds::rules::types::TrafficLightUsageType value);

template <>
::nds::rules::types::TrafficLightUsageType valueToEnum<::nds::rules::types::TrafficLightUsageType>(
        typename ::std::underlying_type<::nds::rules::types::TrafficLightUsageType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::rules::types::TrafficLightUsageType>(::nds::rules::types::TrafficLightUsageType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::rules::types::TrafficLightUsageType>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightUsageType value);

template <>
size_t bitSizeOf<::nds::rules::types::TrafficLightUsageType>(::nds::rules::types::TrafficLightUsageType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::rules::types::TrafficLightUsageType>(::zserio::DeltaContext& context, ::nds::rules::types::TrafficLightUsageType value);

template <>
size_t initializeOffsets<::nds::rules::types::TrafficLightUsageType>(size_t bitPosition, ::nds::rules::types::TrafficLightUsageType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::rules::types::TrafficLightUsageType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::rules::types::TrafficLightUsageType value);

template <>
::nds::rules::types::TrafficLightUsageType read<::nds::rules::types::TrafficLightUsageType>(::zserio::BitStreamReader& in);

template <>
::nds::rules::types::TrafficLightUsageType read<::nds::rules::types::TrafficLightUsageType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::rules::types::TrafficLightUsageType>(::zserio::BitStreamWriter& out, ::nds::rules::types::TrafficLightUsageType value);

template <>
void write<::zserio::DeltaContext, ::nds::rules::types::TrafficLightUsageType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::rules::types::TrafficLightUsageType value);

} // namespace zserio

#endif // NDS_RULES_TYPES_TRAFFIC_LIGHT_USAGE_TYPE_H
