/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_RULES_TYPES_ROAD_SIDE_PARKING_RULES_H
#define NDS_RULES_TYPES_ROAD_SIDE_PARKING_RULES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace rules
{
namespace types
{

class RoadSideParkingRules
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    RoadSideParkingRules() noexcept :
            RoadSideParkingRules(allocator_type())
    {}

    explicit RoadSideParkingRules(const allocator_type& allocator) noexcept;

    RoadSideParkingRules(
            bool bothSidesOfOneWay_,
            bool oppositeDirection_,
            const allocator_type& allocator = allocator_type()) :
            RoadSideParkingRules(allocator)
    {
        m_bothSidesOfOneWay_ = bothSidesOfOneWay_;
        m_oppositeDirection_ = oppositeDirection_;
    }

    explicit RoadSideParkingRules(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadSideParkingRules() = default;

    RoadSideParkingRules(const RoadSideParkingRules&) = default;
    RoadSideParkingRules& operator=(const RoadSideParkingRules&) = default;

    RoadSideParkingRules(RoadSideParkingRules&&) = default;
    RoadSideParkingRules& operator=(RoadSideParkingRules&&) = default;

    RoadSideParkingRules(::zserio::PropagateAllocatorT,
            const RoadSideParkingRules& other, const allocator_type& allocator);

    bool getBothSidesOfOneWay() const;
    void setBothSidesOfOneWay(bool bothSidesOfOneWay_);

    bool getOppositeDirection() const;
    void setOppositeDirection(bool oppositeDirection_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const RoadSideParkingRules& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readBothSidesOfOneWay(::zserio::BitStreamReader& in);
    bool readOppositeDirection(::zserio::BitStreamReader& in);

    bool m_bothSidesOfOneWay_;
    bool m_oppositeDirection_;
};

} // namespace types
} // namespace rules
} // namespace nds

#endif // NDS_RULES_TYPES_ROAD_SIDE_PARKING_RULES_H
