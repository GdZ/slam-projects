/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_ICONS_ICON_USAGE_TYPE_H
#define NDS_CORE_ICONS_ICON_USAGE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace icons
{

class IconUsageType
{
public:
    using underlying_type = uint64_t;

    enum class Values : underlying_type
    {
        TWO_D = UINT64_C(1),
        THREE_D = UINT64_C(2),
        NIGHT = UINT64_C(4),
        DAY = UINT64_C(8),
        HIGHLIGHTED = UINT64_C(16),
        MAP = UINT64_C(32),
        LIST = UINT64_C(64),
        STACKED = UINT64_C(128),
        ON_ROUTE = UINT64_C(256),
        OFF_ROUTE = UINT64_C(512),
        GUIDANCE = UINT64_C(1024),
        ICD = UINT64_C(2048),
        HUD = UINT64_C(4096),
        NOT_HIGHLIGHTED = UINT64_C(8192),
        NOT_STACKED = UINT64_C(16384),
        BUTTON = UINT64_C(32768),
        CID = UINT64_C(65536),
        IN_FOCUS = UINT64_C(131072),
        OUT_OF_FOCUS = UINT64_C(262144)
    };

    constexpr IconUsageType() noexcept :
            m_value(0)
    {}

    explicit IconUsageType(::zserio::BitStreamReader& in);
    IconUsageType(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);
    constexpr IconUsageType(Values value) noexcept :
            m_value(static_cast<underlying_type>(value))
    {}

    explicit IconUsageType(underlying_type value);

    ~IconUsageType() = default;

    IconUsageType(const IconUsageType&) = default;
    IconUsageType& operator=(const IconUsageType&) = default;

    IconUsageType(IconUsageType&&) = default;
    IconUsageType& operator=(IconUsageType&&) = default;

    constexpr explicit operator underlying_type() const
    {
        return m_value;
    }

    constexpr underlying_type getValue() const
    {
        return m_value;
    }

    void initPackingContext(::zserio::DeltaContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::DeltaContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0) const;
    size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const;

    ::zserio::string<> toString(const ::zserio::string<>::allocator_type& allocator =
            ::zserio::string<>::allocator_type()) const;

private:
    static underlying_type readValue(::zserio::BitStreamReader& in);
    static underlying_type readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

    underlying_type m_value;
};

inline bool operator==(const IconUsageType& lhs, const IconUsageType& rhs)
{
    return lhs.getValue() == rhs.getValue();
}

inline bool operator!=(const IconUsageType& lhs, const IconUsageType& rhs)
{
    return lhs.getValue() != rhs.getValue();
}

inline IconUsageType operator|(IconUsageType::Values lhs, IconUsageType::Values rhs)
{
    return IconUsageType(static_cast<IconUsageType::underlying_type>(lhs) | static_cast<IconUsageType::underlying_type>(rhs));
}

inline IconUsageType operator|(const IconUsageType& lhs, const IconUsageType& rhs)
{
    return IconUsageType(lhs.getValue() | rhs.getValue());
}

inline IconUsageType operator&(IconUsageType::Values lhs, IconUsageType::Values rhs)
{
    return IconUsageType(static_cast<IconUsageType::underlying_type>(lhs) & static_cast<IconUsageType::underlying_type>(rhs));
}

inline IconUsageType operator&(const IconUsageType& lhs, const IconUsageType& rhs)
{
    return IconUsageType(lhs.getValue() & rhs.getValue());
}

inline IconUsageType operator^(IconUsageType::Values lhs, IconUsageType::Values rhs)
{
    return IconUsageType(static_cast<IconUsageType::underlying_type>(lhs) ^ static_cast<IconUsageType::underlying_type>(rhs));
}

inline IconUsageType operator^(const IconUsageType& lhs, const IconUsageType& rhs)
{
    return IconUsageType(lhs.getValue() ^ rhs.getValue());
}

inline IconUsageType operator~(IconUsageType::Values lhs)
{
    return IconUsageType(~static_cast<IconUsageType::underlying_type>(lhs) & UINT64_C(144115188075855871));
}

inline IconUsageType operator~(const IconUsageType& lhs)
{
    return IconUsageType(~lhs.getValue() & UINT64_C(144115188075855871));
}

inline IconUsageType operator|=(IconUsageType& lhs, const IconUsageType& rhs)
{
    lhs = IconUsageType(lhs.getValue() | rhs.getValue());
    return lhs;
}

inline IconUsageType operator&=(IconUsageType& lhs, const IconUsageType& rhs)
{
    lhs = IconUsageType(lhs.getValue() & rhs.getValue());
    return lhs;
}

inline IconUsageType operator^=(IconUsageType& lhs, const IconUsageType& rhs)
{
    lhs = IconUsageType(lhs.getValue() ^ rhs.getValue());
    return lhs;
}

} // namespace icons
} // namespace core
} // namespace nds

#endif // NDS_CORE_ICONS_ICON_USAGE_TYPE_H
