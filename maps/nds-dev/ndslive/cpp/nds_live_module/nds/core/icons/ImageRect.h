/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_ICONS_IMAGE_RECT_H
#define NDS_CORE_ICONS_IMAGE_RECT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/icons/NumPixels.h>

namespace nds
{
namespace core
{
namespace icons
{

class ImageRect
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getXTopLeftPos()
        {
            return m_xTopLeftPos_;
        }

        ::zserio::DeltaContext& getYTopLeftPos()
        {
            return m_yTopLeftPos_;
        }

        ::zserio::DeltaContext& getPixWidth()
        {
            return m_pixWidth_;
        }

        ::zserio::DeltaContext& getPixHeight()
        {
            return m_pixHeight_;
        }

    private:
        ::zserio::DeltaContext m_xTopLeftPos_;
        ::zserio::DeltaContext m_yTopLeftPos_;
        ::zserio::DeltaContext m_pixWidth_;
        ::zserio::DeltaContext m_pixHeight_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ImageRect() noexcept :
            ImageRect(allocator_type())
    {}

    explicit ImageRect(const allocator_type& allocator) noexcept;

    ImageRect(
            ::nds::core::icons::NumPixels xTopLeftPos_,
            ::nds::core::icons::NumPixels yTopLeftPos_,
            ::nds::core::icons::NumPixels pixWidth_,
            ::nds::core::icons::NumPixels pixHeight_,
            const allocator_type& allocator = allocator_type()) :
            ImageRect(allocator)
    {
        m_xTopLeftPos_ = xTopLeftPos_;
        m_yTopLeftPos_ = yTopLeftPos_;
        m_pixWidth_ = pixWidth_;
        m_pixHeight_ = pixHeight_;
    }

    explicit ImageRect(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ImageRect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ImageRect() = default;

    ImageRect(const ImageRect&) = default;
    ImageRect& operator=(const ImageRect&) = default;

    ImageRect(ImageRect&&) = default;
    ImageRect& operator=(ImageRect&&) = default;

    ImageRect(::zserio::PropagateAllocatorT,
            const ImageRect& other, const allocator_type& allocator);

    ::nds::core::icons::NumPixels getXTopLeftPos() const;
    void setXTopLeftPos(::nds::core::icons::NumPixels xTopLeftPos_);

    ::nds::core::icons::NumPixels getYTopLeftPos() const;
    void setYTopLeftPos(::nds::core::icons::NumPixels yTopLeftPos_);

    ::nds::core::icons::NumPixels getPixWidth() const;
    void setPixWidth(::nds::core::icons::NumPixels pixWidth_);

    ::nds::core::icons::NumPixels getPixHeight() const;
    void setPixHeight(::nds::core::icons::NumPixels pixHeight_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ImageRect& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::icons::NumPixels readXTopLeftPos(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readXTopLeftPos(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readYTopLeftPos(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readYTopLeftPos(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixWidth(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixWidth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixHeight(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixHeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::icons::NumPixels m_xTopLeftPos_;
    ::nds::core::icons::NumPixels m_yTopLeftPos_;
    ::nds::core::icons::NumPixels m_pixWidth_;
    ::nds::core::icons::NumPixels m_pixHeight_;
};

} // namespace icons
} // namespace core
} // namespace nds

#endif // NDS_CORE_ICONS_IMAGE_RECT_H
