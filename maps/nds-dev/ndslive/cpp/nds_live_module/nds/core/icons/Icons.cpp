/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/icons/IconFormat.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for IconFormat enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::core::icons::IconFormat>::names;
constexpr ::std::array<::nds::core::icons::IconFormat, 4> EnumTraits<::nds::core::icons::IconFormat>::values;
constexpr const char* EnumTraits<::nds::core::icons::IconFormat>::enumName;

template <>
size_t enumToOrdinal(::nds::core::icons::IconFormat value)
{
    switch (value)
    {
    case ::nds::core::icons::IconFormat::PNG:
        return 0;
    case ::nds::core::icons::IconFormat::PNG_9_PATCH:
        return 1;
    case ::nds::core::icons::IconFormat::SVG:
        return 2;
    case ::nds::core::icons::IconFormat::GLTF_V20:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration IconFormat: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>(value) << "!";
    }
}

template <>
::nds::core::icons::IconFormat valueToEnum(
        typename ::std::underlying_type<::nds::core::icons::IconFormat>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::core::icons::IconFormat>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration IconFormat: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::icons::IconFormat>(::nds::core::icons::IconFormat value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::icons::IconFormat value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::icons::IconFormat)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::icons::IconFormat value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::icons::IconFormat value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::icons::IconFormat value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::icons::IconFormat read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::icons::IconFormat>(
            static_cast<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::icons::IconFormat read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::icons::IconFormat>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::icons::IconFormat value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::icons::IconFormat value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconFormat>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/icons/IconDisplayArrangements.h>

namespace zserio
{

// This is full specialization of enumeration traits and methods for IconDisplayArrangements enumeration.
constexpr ::std::array<const char*, 4> EnumTraits<::nds::core::icons::IconDisplayArrangements>::names;
constexpr ::std::array<::nds::core::icons::IconDisplayArrangements, 4> EnumTraits<::nds::core::icons::IconDisplayArrangements>::values;
constexpr const char* EnumTraits<::nds::core::icons::IconDisplayArrangements>::enumName;

template <>
size_t enumToOrdinal(::nds::core::icons::IconDisplayArrangements value)
{
    switch (value)
    {
    case ::nds::core::icons::IconDisplayArrangements::NO_ARRANGEMENT:
        return 0;
    case ::nds::core::icons::IconDisplayArrangements::STACKABLE:
        return 1;
    case ::nds::core::icons::IconDisplayArrangements::DISPLACE:
        return 2;
    case ::nds::core::icons::IconDisplayArrangements::OVERLAP:
        return 3;
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration IconDisplayArrangements: ") <<
                static_cast<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>(value) << "!";
    }
}

template <>
::nds::core::icons::IconDisplayArrangements valueToEnum(
        typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type rawValue)
{
    switch (rawValue)
    {
    case UINT8_C(0):
    case UINT8_C(1):
    case UINT8_C(2):
    case UINT8_C(3):
        return static_cast<::nds::core::icons::IconDisplayArrangements>(rawValue);
    default:
        throw ::zserio::CppRuntimeException("Unknown value for enumeration IconDisplayArrangements: ") << rawValue << "!";
    }
}

template <>
uint32_t enumHashCode<::nds::core::icons::IconDisplayArrangements>(::nds::core::icons::IconDisplayArrangements value)
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, enumToValue(value));
    return result;
}

template <>
void initPackingContext(::zserio::DeltaContext& context, ::nds::core::icons::IconDisplayArrangements value)
{
    context.init<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t bitSizeOf(::nds::core::icons::IconDisplayArrangements)
{
    return UINT8_C(8);
}

template <>
size_t bitSizeOf(::zserio::DeltaContext& context, ::nds::core::icons::IconDisplayArrangements value)
{
    return context.bitSizeOf<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>>(
            ::zserio::enumToValue(value));
}

template <>
size_t initializeOffsets(size_t bitPosition, ::nds::core::icons::IconDisplayArrangements value)
{
    return bitPosition + bitSizeOf(value);
}

template <>
size_t initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition, ::nds::core::icons::IconDisplayArrangements value)
{
    return bitPosition + bitSizeOf(context, value);
}

template <>
::nds::core::icons::IconDisplayArrangements read(::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::icons::IconDisplayArrangements>(
            static_cast<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>(
                    in.readBits(UINT8_C(8))));
}

template <>
::nds::core::icons::IconDisplayArrangements read(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return valueToEnum<::nds::core::icons::IconDisplayArrangements>(context.read<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>>(
            in));
}

template <>
void write(::zserio::BitStreamWriter& out, ::nds::core::icons::IconDisplayArrangements value)
{
    out.writeBits(::zserio::enumToValue(value), UINT8_C(8));
}

template <>
void write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out, ::nds::core::icons::IconDisplayArrangements value)
{
    context.write<::zserio::StdIntArrayTraits<typename ::std::underlying_type<::nds::core::icons::IconDisplayArrangements>::type>>(
            out, ::zserio::enumToValue(value));
}

} // namespace zserio

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>

#include <nds/core/icons/IconUsageType.h>

namespace nds
{
namespace core
{
namespace icons
{

IconUsageType::IconUsageType(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

IconUsageType::IconUsageType(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in) :
        m_value(readValue(context, in))
{}

IconUsageType::IconUsageType(underlying_type value) :
        m_value(value)
{
    if (m_value > UINT64_C(144115188075855871))
        throw ::zserio::CppRuntimeException("Value for bitmask 'IconUsageType' out of bounds: ") << value << "!";
}

void IconUsageType::initPackingContext(::zserio::DeltaContext& context) const
{
    context.init<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconUsageType::underlying_type>>(m_value);
}

size_t IconUsageType::bitSizeOf(size_t) const
{
    return ::zserio::bitSizeOfVarUInt64(m_value);
}

size_t IconUsageType::bitSizeOf(::zserio::DeltaContext& context, size_t) const
{
    return context.bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconUsageType::underlying_type>>(m_value);
}

size_t IconUsageType::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

size_t IconUsageType::initializeOffsets(::zserio::DeltaContext& context, size_t bitPosition) const
{
    return bitPosition + bitSizeOf(context, bitPosition);
}

uint32_t IconUsageType::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void IconUsageType::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt64(m_value);
}

void IconUsageType::write(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out) const
{
    context.write<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconUsageType::underlying_type>>(out, m_value);
}

::zserio::string<> IconUsageType::toString(const ::zserio::string<>::allocator_type& allocator) const
{
    ::zserio::string<> result(allocator);
    if ((*this & IconUsageType::Values::TWO_D) == IconUsageType::Values::TWO_D)
        result += result.empty() ? "TWO_D" : " | TWO_D";
    if ((*this & IconUsageType::Values::THREE_D) == IconUsageType::Values::THREE_D)
        result += result.empty() ? "THREE_D" : " | THREE_D";
    if ((*this & IconUsageType::Values::NIGHT) == IconUsageType::Values::NIGHT)
        result += result.empty() ? "NIGHT" : " | NIGHT";
    if ((*this & IconUsageType::Values::DAY) == IconUsageType::Values::DAY)
        result += result.empty() ? "DAY" : " | DAY";
    if ((*this & IconUsageType::Values::HIGHLIGHTED) == IconUsageType::Values::HIGHLIGHTED)
        result += result.empty() ? "HIGHLIGHTED" : " | HIGHLIGHTED";
    if ((*this & IconUsageType::Values::MAP) == IconUsageType::Values::MAP)
        result += result.empty() ? "MAP" : " | MAP";
    if ((*this & IconUsageType::Values::LIST) == IconUsageType::Values::LIST)
        result += result.empty() ? "LIST" : " | LIST";
    if ((*this & IconUsageType::Values::STACKED) == IconUsageType::Values::STACKED)
        result += result.empty() ? "STACKED" : " | STACKED";
    if ((*this & IconUsageType::Values::ON_ROUTE) == IconUsageType::Values::ON_ROUTE)
        result += result.empty() ? "ON_ROUTE" : " | ON_ROUTE";
    if ((*this & IconUsageType::Values::OFF_ROUTE) == IconUsageType::Values::OFF_ROUTE)
        result += result.empty() ? "OFF_ROUTE" : " | OFF_ROUTE";
    if ((*this & IconUsageType::Values::GUIDANCE) == IconUsageType::Values::GUIDANCE)
        result += result.empty() ? "GUIDANCE" : " | GUIDANCE";
    if ((*this & IconUsageType::Values::ICD) == IconUsageType::Values::ICD)
        result += result.empty() ? "ICD" : " | ICD";
    if ((*this & IconUsageType::Values::HUD) == IconUsageType::Values::HUD)
        result += result.empty() ? "HUD" : " | HUD";
    if ((*this & IconUsageType::Values::NOT_HIGHLIGHTED) == IconUsageType::Values::NOT_HIGHLIGHTED)
        result += result.empty() ? "NOT_HIGHLIGHTED" : " | NOT_HIGHLIGHTED";
    if ((*this & IconUsageType::Values::NOT_STACKED) == IconUsageType::Values::NOT_STACKED)
        result += result.empty() ? "NOT_STACKED" : " | NOT_STACKED";
    if ((*this & IconUsageType::Values::BUTTON) == IconUsageType::Values::BUTTON)
        result += result.empty() ? "BUTTON" : " | BUTTON";
    if ((*this & IconUsageType::Values::CID) == IconUsageType::Values::CID)
        result += result.empty() ? "CID" : " | CID";
    if ((*this & IconUsageType::Values::IN_FOCUS) == IconUsageType::Values::IN_FOCUS)
        result += result.empty() ? "IN_FOCUS" : " | IN_FOCUS";
    if ((*this & IconUsageType::Values::OUT_OF_FOCUS) == IconUsageType::Values::OUT_OF_FOCUS)
        result += result.empty() ? "OUT_OF_FOCUS" : " | OUT_OF_FOCUS";

    return ::zserio::toString<::zserio::string<>::allocator_type>(m_value, allocator) + "[" + result + "]";
}

IconUsageType::underlying_type IconUsageType::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readVarUInt64());
}

IconUsageType::underlying_type IconUsageType::readValue(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in)
{
    return context.read<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconUsageType::underlying_type>>(
            in);
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/IconImage.h>

namespace nds
{
namespace core
{
namespace icons
{

IconImage::IconImage(const allocator_type& allocator) noexcept :
        m_iconId_(::nds::core::icons::IconId()),
        m_minResolution_(::nds::core::icons::DisplayResolution()),
        m_maxResolution_(::nds::core::icons::DisplayResolution()),
        m_textBoundingRect_(allocator),
        m_textColor_(allocator),
        m_pixWidth_(::nds::core::icons::NumPixels()),
        m_pixHeight_(::nds::core::icons::NumPixels()),
        m_iconFormat_(::nds::core::icons::IconFormat()),
        m_imageAnchorPos_(allocator),
        m_iconHeading_(::nds::core::icons::IconHeading()),
        m_imageBoundingRect_(allocator),
        m_image_(allocator)
{
}

IconImage::IconImage(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_iconId_(readIconId(in)),
        m_minResolution_(readMinResolution(in)),
        m_maxResolution_(readMaxResolution(in)),
        m_textBoundingRect_(readTextBoundingRect(in, allocator)),
        m_textColor_(readTextColor(in, allocator)),
        m_pixWidth_(readPixWidth(in)),
        m_pixHeight_(readPixHeight(in)),
        m_iconFormat_(readIconFormat(in)),
        m_imageAnchorPos_(readImageAnchorPos(in, allocator)),
        m_iconHeading_(readIconHeading(in)),
        m_imageBoundingRect_(readImageBoundingRect(in, allocator)),
        m_image_(readImage(in, allocator))
{
}

IconImage::IconImage(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_iconId_(readIconId(context, in)),
        m_minResolution_(readMinResolution(context, in)),
        m_maxResolution_(readMaxResolution(context, in)),
        m_textBoundingRect_(readTextBoundingRect(context, in, allocator)),
        m_textColor_(readTextColor(context, in, allocator)),
        m_pixWidth_(readPixWidth(context, in)),
        m_pixHeight_(readPixHeight(context, in)),
        m_iconFormat_(readIconFormat(context, in)),
        m_imageAnchorPos_(readImageAnchorPos(context, in, allocator)),
        m_iconHeading_(readIconHeading(context, in)),
        m_imageBoundingRect_(readImageBoundingRect(context, in, allocator)),
        m_image_(readImage(in, allocator))
{
}

IconImage::IconImage(::zserio::PropagateAllocatorT,
        const IconImage& other, const allocator_type& allocator) :
        m_iconId_(::zserio::allocatorPropagatingCopy(other.m_iconId_, allocator)),
        m_minResolution_(::zserio::allocatorPropagatingCopy(other.m_minResolution_, allocator)),
        m_maxResolution_(::zserio::allocatorPropagatingCopy(other.m_maxResolution_, allocator)),
        m_textBoundingRect_(::zserio::allocatorPropagatingCopy(other.m_textBoundingRect_, allocator)),
        m_textColor_(::zserio::allocatorPropagatingCopy(other.m_textColor_, allocator)),
        m_pixWidth_(::zserio::allocatorPropagatingCopy(other.m_pixWidth_, allocator)),
        m_pixHeight_(::zserio::allocatorPropagatingCopy(other.m_pixHeight_, allocator)),
        m_iconFormat_(::zserio::allocatorPropagatingCopy(other.m_iconFormat_, allocator)),
        m_imageAnchorPos_(::zserio::allocatorPropagatingCopy(other.m_imageAnchorPos_, allocator)),
        m_iconHeading_(::zserio::allocatorPropagatingCopy(other.m_iconHeading_, allocator)),
        m_imageBoundingRect_(::zserio::allocatorPropagatingCopy(other.m_imageBoundingRect_, allocator)),
        m_image_(::zserio::allocatorPropagatingCopy(other.m_image_, allocator))
{
}

::nds::core::icons::IconId IconImage::getIconId() const
{
    return m_iconId_;
}

void IconImage::setIconId(::nds::core::icons::IconId iconId_)
{
    m_iconId_ = iconId_;
}

::nds::core::icons::DisplayResolution IconImage::getMinResolution() const
{
    return m_minResolution_;
}

void IconImage::setMinResolution(::nds::core::icons::DisplayResolution minResolution_)
{
    m_minResolution_ = minResolution_;
}

::nds::core::icons::DisplayResolution IconImage::getMaxResolution() const
{
    return m_maxResolution_;
}

void IconImage::setMaxResolution(::nds::core::icons::DisplayResolution maxResolution_)
{
    m_maxResolution_ = maxResolution_;
}

::nds::core::icons::ImageRect& IconImage::getTextBoundingRect()
{
    return m_textBoundingRect_;
}

const ::nds::core::icons::ImageRect& IconImage::getTextBoundingRect() const
{
    return m_textBoundingRect_;
}

void IconImage::setTextBoundingRect(const ::nds::core::icons::ImageRect& textBoundingRect_)
{
    m_textBoundingRect_ = textBoundingRect_;
}

void IconImage::setTextBoundingRect(::nds::core::icons::ImageRect&& textBoundingRect_)
{
    m_textBoundingRect_ = ::std::move(textBoundingRect_);
}

::nds::core::color::ColorRgba& IconImage::getTextColor()
{
    return m_textColor_;
}

const ::nds::core::color::ColorRgba& IconImage::getTextColor() const
{
    return m_textColor_;
}

void IconImage::setTextColor(const ::nds::core::color::ColorRgba& textColor_)
{
    m_textColor_ = textColor_;
}

void IconImage::setTextColor(::nds::core::color::ColorRgba&& textColor_)
{
    m_textColor_ = ::std::move(textColor_);
}

::nds::core::icons::NumPixels IconImage::getPixWidth() const
{
    return m_pixWidth_;
}

void IconImage::setPixWidth(::nds::core::icons::NumPixels pixWidth_)
{
    m_pixWidth_ = pixWidth_;
}

::nds::core::icons::NumPixels IconImage::getPixHeight() const
{
    return m_pixHeight_;
}

void IconImage::setPixHeight(::nds::core::icons::NumPixels pixHeight_)
{
    m_pixHeight_ = pixHeight_;
}

::nds::core::icons::IconFormat IconImage::getIconFormat() const
{
    return m_iconFormat_;
}

void IconImage::setIconFormat(::nds::core::icons::IconFormat iconFormat_)
{
    m_iconFormat_ = iconFormat_;
}

::nds::core::icons::ImageAnchorPos& IconImage::getImageAnchorPos()
{
    return m_imageAnchorPos_;
}

const ::nds::core::icons::ImageAnchorPos& IconImage::getImageAnchorPos() const
{
    return m_imageAnchorPos_;
}

void IconImage::setImageAnchorPos(const ::nds::core::icons::ImageAnchorPos& imageAnchorPos_)
{
    m_imageAnchorPos_ = imageAnchorPos_;
}

void IconImage::setImageAnchorPos(::nds::core::icons::ImageAnchorPos&& imageAnchorPos_)
{
    m_imageAnchorPos_ = ::std::move(imageAnchorPos_);
}

::nds::core::icons::IconHeading IconImage::getIconHeading() const
{
    return m_iconHeading_;
}

void IconImage::setIconHeading(::nds::core::icons::IconHeading iconHeading_)
{
    m_iconHeading_ = iconHeading_;
}

::nds::core::icons::ImageRect& IconImage::getImageBoundingRect()
{
    return m_imageBoundingRect_;
}

const ::nds::core::icons::ImageRect& IconImage::getImageBoundingRect() const
{
    return m_imageBoundingRect_;
}

void IconImage::setImageBoundingRect(const ::nds::core::icons::ImageRect& imageBoundingRect_)
{
    m_imageBoundingRect_ = imageBoundingRect_;
}

void IconImage::setImageBoundingRect(::nds::core::icons::ImageRect&& imageBoundingRect_)
{
    m_imageBoundingRect_ = ::std::move(imageBoundingRect_);
}

::zserio::BitBuffer& IconImage::getImage()
{
    return m_image_;
}

const ::zserio::BitBuffer& IconImage::getImage() const
{
    return m_image_;
}

void IconImage::setImage(const ::zserio::BitBuffer& image_)
{
    m_image_ = image_;
}

void IconImage::setImage(::zserio::BitBuffer&& image_)
{
    m_image_ = ::std::move(image_);
}

void IconImage::initPackingContext(IconImage::ZserioPackingContext& context) const
{
    context.getIconId().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconId>>(m_iconId_);
    context.getMinResolution().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_minResolution_);
    context.getMaxResolution().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_maxResolution_);
    m_textBoundingRect_.initPackingContext(context.getTextBoundingRect());
    m_textColor_.initPackingContext(context.getTextColor());
    context.getPixWidth().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    context.getPixHeight().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);
    ::zserio::initPackingContext(context.getIconFormat(), m_iconFormat_);
    m_imageAnchorPos_.initPackingContext(context.getImageAnchorPos());
    context.getIconHeading().init<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);
    m_imageBoundingRect_.initPackingContext(context.getImageBoundingRect());
}

size_t IconImage::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_iconId_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_minResolution_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_maxResolution_);
    endBitPosition += m_textBoundingRect_.bitSizeOf(endBitPosition);
    endBitPosition += m_textColor_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixWidth_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixHeight_);
    endBitPosition += ::zserio::bitSizeOf(m_iconFormat_);
    endBitPosition += m_imageAnchorPos_.bitSizeOf(endBitPosition);
    endBitPosition += UINT8_C(8);
    endBitPosition += m_imageBoundingRect_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_image_);

    return endBitPosition - bitPosition;
}

size_t IconImage::bitSizeOf(IconImage::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconId>>(m_iconId_);
    endBitPosition += context.getMinResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_minResolution_);
    endBitPosition += context.getMaxResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_maxResolution_);
    endBitPosition += m_textBoundingRect_.bitSizeOf(context.getTextBoundingRect(), endBitPosition);
    endBitPosition += m_textColor_.bitSizeOf(context.getTextColor(), endBitPosition);
    endBitPosition += context.getPixWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    endBitPosition += context.getPixHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);
    endBitPosition += ::zserio::bitSizeOf(context.getIconFormat(), m_iconFormat_);
    endBitPosition += m_imageAnchorPos_.bitSizeOf(context.getImageAnchorPos(), endBitPosition);
    endBitPosition += context.getIconHeading().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);
    endBitPosition += m_imageBoundingRect_.bitSizeOf(context.getImageBoundingRect(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_image_);

    return endBitPosition - bitPosition;
}

size_t IconImage::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_iconId_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_minResolution_);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_maxResolution_);
    endBitPosition = m_textBoundingRect_.initializeOffsets(endBitPosition);
    endBitPosition = m_textColor_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixWidth_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixHeight_);
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_iconFormat_);
    endBitPosition = m_imageAnchorPos_.initializeOffsets(endBitPosition);
    endBitPosition += UINT8_C(8);
    endBitPosition = m_imageBoundingRect_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_image_);

    return endBitPosition;
}

size_t IconImage::initializeOffsets(IconImage::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconId>>(m_iconId_);
    endBitPosition += context.getMinResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_minResolution_);
    endBitPosition += context.getMaxResolution().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(m_maxResolution_);
    endBitPosition = m_textBoundingRect_.initializeOffsets(context.getTextBoundingRect(), endBitPosition);
    endBitPosition = m_textColor_.initializeOffsets(context.getTextColor(), endBitPosition);
    endBitPosition += context.getPixWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    endBitPosition += context.getPixHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);
    endBitPosition = ::zserio::initializeOffsets(context.getIconFormat(), endBitPosition,
        m_iconFormat_);
    endBitPosition = m_imageAnchorPos_.initializeOffsets(context.getImageAnchorPos(), endBitPosition);
    endBitPosition += context.getIconHeading().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);
    endBitPosition = m_imageBoundingRect_.initializeOffsets(context.getImageBoundingRect(), endBitPosition);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_image_);

    return endBitPosition;
}

bool IconImage::operator==(const IconImage& other) const
{
    if (this != &other)
    {
        return
                (m_iconId_ == other.m_iconId_) &&
                (m_minResolution_ == other.m_minResolution_) &&
                (m_maxResolution_ == other.m_maxResolution_) &&
                (m_textBoundingRect_ == other.m_textBoundingRect_) &&
                (m_textColor_ == other.m_textColor_) &&
                (m_pixWidth_ == other.m_pixWidth_) &&
                (m_pixHeight_ == other.m_pixHeight_) &&
                (m_iconFormat_ == other.m_iconFormat_) &&
                (m_imageAnchorPos_ == other.m_imageAnchorPos_) &&
                (m_iconHeading_ == other.m_iconHeading_) &&
                (m_imageBoundingRect_ == other.m_imageBoundingRect_) &&
                (m_image_ == other.m_image_);
    }

    return true;
}

uint32_t IconImage::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_iconId_);
    result = ::zserio::calcHashCode(result, m_minResolution_);
    result = ::zserio::calcHashCode(result, m_maxResolution_);
    result = ::zserio::calcHashCode(result, m_textBoundingRect_);
    result = ::zserio::calcHashCode(result, m_textColor_);
    result = ::zserio::calcHashCode(result, m_pixWidth_);
    result = ::zserio::calcHashCode(result, m_pixHeight_);
    result = ::zserio::calcHashCode(result, m_iconFormat_);
    result = ::zserio::calcHashCode(result, m_imageAnchorPos_);
    result = ::zserio::calcHashCode(result, m_iconHeading_);
    result = ::zserio::calcHashCode(result, m_imageBoundingRect_);
    result = ::zserio::calcHashCode(result, m_image_);

    return result;
}

void IconImage::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt32(m_iconId_);
    out.writeVarUInt16(m_minResolution_);
    out.writeVarUInt16(m_maxResolution_);
    m_textBoundingRect_.write(out);
    m_textColor_.write(out);
    out.writeVarInt32(m_pixWidth_);
    out.writeVarInt32(m_pixHeight_);
    ::zserio::write(out, m_iconFormat_);
    m_imageAnchorPos_.write(out);
    out.writeBits(m_iconHeading_, UINT8_C(8));
    m_imageBoundingRect_.write(out);
    out.writeBitBuffer(m_image_);
}

void IconImage::write(IconImage::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getIconId().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconId>>(out, m_iconId_);
    context.getMinResolution().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(out, m_minResolution_);
    context.getMaxResolution().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(out, m_maxResolution_);
    m_textBoundingRect_.write(context.getTextBoundingRect(), out);
    m_textColor_.write(context.getTextColor(), out);
    context.getPixWidth().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_pixWidth_);
    context.getPixHeight().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_pixHeight_);
    ::zserio::write(context.getIconFormat(), out, m_iconFormat_);
    m_imageAnchorPos_.write(context.getImageAnchorPos(), out);
    context.getIconHeading().write<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(out, m_iconHeading_);
    m_imageBoundingRect_.write(context.getImageBoundingRect(), out);
    out.writeBitBuffer(m_image_);
}

::nds::core::icons::IconId IconImage::readIconId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconId>(in.readVarUInt32());
}

::nds::core::icons::IconId IconImage::readIconId(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconId().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconId>>(in);
}
::nds::core::icons::DisplayResolution IconImage::readMinResolution(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::DisplayResolution>(in.readVarUInt16());
}

::nds::core::icons::DisplayResolution IconImage::readMinResolution(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMinResolution().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(in);
}
::nds::core::icons::DisplayResolution IconImage::readMaxResolution(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::DisplayResolution>(in.readVarUInt16());
}

::nds::core::icons::DisplayResolution IconImage::readMaxResolution(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getMaxResolution().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::DisplayResolution>>(in);
}
::nds::core::icons::ImageRect IconImage::readTextBoundingRect(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::icons::ImageRect(in, allocator);
}

::nds::core::icons::ImageRect IconImage::readTextBoundingRect(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::icons::ImageRect(context.getTextBoundingRect(), in, allocator);
}
::nds::core::color::ColorRgba IconImage::readTextColor(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::color::ColorRgba(in, allocator);
}

::nds::core::color::ColorRgba IconImage::readTextColor(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::color::ColorRgba(context.getTextColor(), in, allocator);
}
::nds::core::icons::NumPixels IconImage::readPixWidth(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels IconImage::readPixWidth(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPixWidth().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels IconImage::readPixHeight(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels IconImage::readPixHeight(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPixHeight().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::IconFormat IconImage::readIconFormat(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::icons::IconFormat>(in);
}

::nds::core::icons::IconFormat IconImage::readIconFormat(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return ::zserio::read<::nds::core::icons::IconFormat>(context.getIconFormat(), in);
}
::nds::core::icons::ImageAnchorPos IconImage::readImageAnchorPos(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::icons::ImageAnchorPos(in, allocator);
}

::nds::core::icons::ImageAnchorPos IconImage::readImageAnchorPos(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::icons::ImageAnchorPos(context.getImageAnchorPos(), in, allocator);
}
::nds::core::icons::IconHeading IconImage::readIconHeading(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconHeading>(in.readBits(UINT8_C(8)));
}

::nds::core::icons::IconHeading IconImage::readIconHeading(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconHeading().read<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(in);
}
::nds::core::icons::ImageRect IconImage::readImageBoundingRect(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::icons::ImageRect(in, allocator);
}

::nds::core::icons::ImageRect IconImage::readImageBoundingRect(IconImage::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::icons::ImageRect(context.getImageBoundingRect(), in, allocator);
}
::zserio::BitBuffer IconImage::readImage(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::BitBuffer>(in.readBitBuffer(allocator));
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/ImageRect.h>

namespace nds
{
namespace core
{
namespace icons
{

ImageRect::ImageRect(const allocator_type&) noexcept :
        m_xTopLeftPos_(::nds::core::icons::NumPixels()),
        m_yTopLeftPos_(::nds::core::icons::NumPixels()),
        m_pixWidth_(::nds::core::icons::NumPixels()),
        m_pixHeight_(::nds::core::icons::NumPixels())
{
}

ImageRect::ImageRect(::zserio::BitStreamReader& in, const allocator_type&) :
        m_xTopLeftPos_(readXTopLeftPos(in)),
        m_yTopLeftPos_(readYTopLeftPos(in)),
        m_pixWidth_(readPixWidth(in)),
        m_pixHeight_(readPixHeight(in))
{
}

ImageRect::ImageRect(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_xTopLeftPos_(readXTopLeftPos(context, in)),
        m_yTopLeftPos_(readYTopLeftPos(context, in)),
        m_pixWidth_(readPixWidth(context, in)),
        m_pixHeight_(readPixHeight(context, in))
{
}

ImageRect::ImageRect(::zserio::PropagateAllocatorT,
        const ImageRect& other, const allocator_type& allocator) :
        m_xTopLeftPos_(::zserio::allocatorPropagatingCopy(other.m_xTopLeftPos_, allocator)),
        m_yTopLeftPos_(::zserio::allocatorPropagatingCopy(other.m_yTopLeftPos_, allocator)),
        m_pixWidth_(::zserio::allocatorPropagatingCopy(other.m_pixWidth_, allocator)),
        m_pixHeight_(::zserio::allocatorPropagatingCopy(other.m_pixHeight_, allocator))
{
}

::nds::core::icons::NumPixels ImageRect::getXTopLeftPos() const
{
    return m_xTopLeftPos_;
}

void ImageRect::setXTopLeftPos(::nds::core::icons::NumPixels xTopLeftPos_)
{
    m_xTopLeftPos_ = xTopLeftPos_;
}

::nds::core::icons::NumPixels ImageRect::getYTopLeftPos() const
{
    return m_yTopLeftPos_;
}

void ImageRect::setYTopLeftPos(::nds::core::icons::NumPixels yTopLeftPos_)
{
    m_yTopLeftPos_ = yTopLeftPos_;
}

::nds::core::icons::NumPixels ImageRect::getPixWidth() const
{
    return m_pixWidth_;
}

void ImageRect::setPixWidth(::nds::core::icons::NumPixels pixWidth_)
{
    m_pixWidth_ = pixWidth_;
}

::nds::core::icons::NumPixels ImageRect::getPixHeight() const
{
    return m_pixHeight_;
}

void ImageRect::setPixHeight(::nds::core::icons::NumPixels pixHeight_)
{
    m_pixHeight_ = pixHeight_;
}

void ImageRect::initPackingContext(ImageRect::ZserioPackingContext& context) const
{
    context.getXTopLeftPos().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xTopLeftPos_);
    context.getYTopLeftPos().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yTopLeftPos_);
    context.getPixWidth().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    context.getPixHeight().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);
}

size_t ImageRect::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_xTopLeftPos_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_yTopLeftPos_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixWidth_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixHeight_);

    return endBitPosition - bitPosition;
}

size_t ImageRect::bitSizeOf(ImageRect::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getXTopLeftPos().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xTopLeftPos_);
    endBitPosition += context.getYTopLeftPos().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yTopLeftPos_);
    endBitPosition += context.getPixWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    endBitPosition += context.getPixHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);

    return endBitPosition - bitPosition;
}

size_t ImageRect::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_xTopLeftPos_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_yTopLeftPos_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixWidth_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_pixHeight_);

    return endBitPosition;
}

size_t ImageRect::initializeOffsets(ImageRect::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getXTopLeftPos().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xTopLeftPos_);
    endBitPosition += context.getYTopLeftPos().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yTopLeftPos_);
    endBitPosition += context.getPixWidth().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixWidth_);
    endBitPosition += context.getPixHeight().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_pixHeight_);

    return endBitPosition;
}

bool ImageRect::operator==(const ImageRect& other) const
{
    if (this != &other)
    {
        return
                (m_xTopLeftPos_ == other.m_xTopLeftPos_) &&
                (m_yTopLeftPos_ == other.m_yTopLeftPos_) &&
                (m_pixWidth_ == other.m_pixWidth_) &&
                (m_pixHeight_ == other.m_pixHeight_);
    }

    return true;
}

uint32_t ImageRect::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_xTopLeftPos_);
    result = ::zserio::calcHashCode(result, m_yTopLeftPos_);
    result = ::zserio::calcHashCode(result, m_pixWidth_);
    result = ::zserio::calcHashCode(result, m_pixHeight_);

    return result;
}

void ImageRect::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarInt32(m_xTopLeftPos_);
    out.writeVarInt32(m_yTopLeftPos_);
    out.writeVarInt32(m_pixWidth_);
    out.writeVarInt32(m_pixHeight_);
}

void ImageRect::write(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getXTopLeftPos().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_xTopLeftPos_);
    context.getYTopLeftPos().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_yTopLeftPos_);
    context.getPixWidth().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_pixWidth_);
    context.getPixHeight().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_pixHeight_);
}

::nds::core::icons::NumPixels ImageRect::readXTopLeftPos(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageRect::readXTopLeftPos(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getXTopLeftPos().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels ImageRect::readYTopLeftPos(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageRect::readYTopLeftPos(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getYTopLeftPos().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels ImageRect::readPixWidth(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageRect::readPixWidth(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPixWidth().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels ImageRect::readPixHeight(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageRect::readPixHeight(ImageRect::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getPixHeight().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/ImageAnchorPos.h>

namespace nds
{
namespace core
{
namespace icons
{

ImageAnchorPos::ImageAnchorPos(const allocator_type&) noexcept :
        m_xPosImageAnchor_(::nds::core::icons::NumPixels()),
        m_yPosImageAnchor_(::nds::core::icons::NumPixels())
{
}

ImageAnchorPos::ImageAnchorPos(::zserio::BitStreamReader& in, const allocator_type&) :
        m_xPosImageAnchor_(readXPosImageAnchor(in)),
        m_yPosImageAnchor_(readYPosImageAnchor(in))
{
}

ImageAnchorPos::ImageAnchorPos(ImageAnchorPos::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_xPosImageAnchor_(readXPosImageAnchor(context, in)),
        m_yPosImageAnchor_(readYPosImageAnchor(context, in))
{
}

ImageAnchorPos::ImageAnchorPos(::zserio::PropagateAllocatorT,
        const ImageAnchorPos& other, const allocator_type& allocator) :
        m_xPosImageAnchor_(::zserio::allocatorPropagatingCopy(other.m_xPosImageAnchor_, allocator)),
        m_yPosImageAnchor_(::zserio::allocatorPropagatingCopy(other.m_yPosImageAnchor_, allocator))
{
}

::nds::core::icons::NumPixels ImageAnchorPos::getXPosImageAnchor() const
{
    return m_xPosImageAnchor_;
}

void ImageAnchorPos::setXPosImageAnchor(::nds::core::icons::NumPixels xPosImageAnchor_)
{
    m_xPosImageAnchor_ = xPosImageAnchor_;
}

::nds::core::icons::NumPixels ImageAnchorPos::getYPosImageAnchor() const
{
    return m_yPosImageAnchor_;
}

void ImageAnchorPos::setYPosImageAnchor(::nds::core::icons::NumPixels yPosImageAnchor_)
{
    m_yPosImageAnchor_ = yPosImageAnchor_;
}

void ImageAnchorPos::initPackingContext(ImageAnchorPos::ZserioPackingContext& context) const
{
    context.getXPosImageAnchor().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xPosImageAnchor_);
    context.getYPosImageAnchor().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yPosImageAnchor_);
}

size_t ImageAnchorPos::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_xPosImageAnchor_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_yPosImageAnchor_);

    return endBitPosition - bitPosition;
}

size_t ImageAnchorPos::bitSizeOf(ImageAnchorPos::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getXPosImageAnchor().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xPosImageAnchor_);
    endBitPosition += context.getYPosImageAnchor().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yPosImageAnchor_);

    return endBitPosition - bitPosition;
}

size_t ImageAnchorPos::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarInt32(m_xPosImageAnchor_);
    endBitPosition += ::zserio::bitSizeOfVarInt32(m_yPosImageAnchor_);

    return endBitPosition;
}

size_t ImageAnchorPos::initializeOffsets(ImageAnchorPos::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getXPosImageAnchor().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_xPosImageAnchor_);
    endBitPosition += context.getYPosImageAnchor().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(m_yPosImageAnchor_);

    return endBitPosition;
}

bool ImageAnchorPos::operator==(const ImageAnchorPos& other) const
{
    if (this != &other)
    {
        return
                (m_xPosImageAnchor_ == other.m_xPosImageAnchor_) &&
                (m_yPosImageAnchor_ == other.m_yPosImageAnchor_);
    }

    return true;
}

uint32_t ImageAnchorPos::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_xPosImageAnchor_);
    result = ::zserio::calcHashCode(result, m_yPosImageAnchor_);

    return result;
}

void ImageAnchorPos::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarInt32(m_xPosImageAnchor_);
    out.writeVarInt32(m_yPosImageAnchor_);
}

void ImageAnchorPos::write(ImageAnchorPos::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getXPosImageAnchor().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_xPosImageAnchor_);
    context.getYPosImageAnchor().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(out, m_yPosImageAnchor_);
}

::nds::core::icons::NumPixels ImageAnchorPos::readXPosImageAnchor(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageAnchorPos::readXPosImageAnchor(ImageAnchorPos::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getXPosImageAnchor().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}
::nds::core::icons::NumPixels ImageAnchorPos::readYPosImageAnchor(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::NumPixels>(in.readVarInt32());
}

::nds::core::icons::NumPixels ImageAnchorPos::readYPosImageAnchor(ImageAnchorPos::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getYPosImageAnchor().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::NumPixels>>(in);
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/IconSet.h>

namespace nds
{
namespace core
{
namespace icons
{

IconSet::IconSet(const allocator_type& allocator) noexcept :
        m_iconSetId_(::nds::core::icons::IconSetId()),
        m_scaleRangeId_(::nds::core::types::ScaleRangeId()),
        m_numIcons_(uint32_t()),
        m_iconUsage_(allocator),
        m_iconId_(allocator),
        m_iconDisplayArrangement_(allocator),
        m_iconDrawingPriority_(static_cast<::nds::core::icons::IconDrawingPriority>(0)),
        m_iconTemplateSetId_(::zserio::NullOpt)
{
}

IconSet::IconSet(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_iconSetId_(readIconSetId(in)),
        m_scaleRangeId_(readScaleRangeId(in)),
        m_numIcons_(readNumIcons(in)),
        m_iconUsage_(readIconUsage(in, allocator)),
        m_iconId_(readIconId(in, allocator)),
        m_iconDisplayArrangement_(readIconDisplayArrangement(in, allocator)),
        m_iconDrawingPriority_(readIconDrawingPriority(in)),
        m_iconTemplateSetId_(readIconTemplateSetId(in))
{
}

IconSet::IconSet(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_iconSetId_(readIconSetId(context, in)),
        m_scaleRangeId_(readScaleRangeId(context, in)),
        m_numIcons_(readNumIcons(context, in)),
        m_iconUsage_(readIconUsage(context, in, allocator)),
        m_iconId_(readIconId(context, in, allocator)),
        m_iconDisplayArrangement_(readIconDisplayArrangement(context, in, allocator)),
        m_iconDrawingPriority_(readIconDrawingPriority(context, in)),
        m_iconTemplateSetId_(readIconTemplateSetId(context, in))
{
}

IconSet::IconSet(::zserio::PropagateAllocatorT,
        const IconSet& other, const allocator_type& allocator) :
        m_iconSetId_(::zserio::allocatorPropagatingCopy(other.m_iconSetId_, allocator)),
        m_scaleRangeId_(::zserio::allocatorPropagatingCopy(other.m_scaleRangeId_, allocator)),
        m_numIcons_(::zserio::allocatorPropagatingCopy(other.m_numIcons_, allocator)),
        m_iconUsage_(::zserio::allocatorPropagatingCopy(other.m_iconUsage_, allocator)),
        m_iconId_(::zserio::allocatorPropagatingCopy(other.m_iconId_, allocator)),
        m_iconDisplayArrangement_(::zserio::allocatorPropagatingCopy(other.m_iconDisplayArrangement_, allocator)),
        m_iconDrawingPriority_(::zserio::allocatorPropagatingCopy(other.m_iconDrawingPriority_, allocator)),
        m_iconTemplateSetId_(::zserio::allocatorPropagatingCopy(other.m_iconTemplateSetId_, allocator))
{
}

::nds::core::icons::IconSetId IconSet::getIconSetId() const
{
    return m_iconSetId_;
}

void IconSet::setIconSetId(::nds::core::icons::IconSetId iconSetId_)
{
    m_iconSetId_ = iconSetId_;
}

::nds::core::types::ScaleRangeId IconSet::getScaleRangeId() const
{
    return m_scaleRangeId_;
}

void IconSet::setScaleRangeId(::nds::core::types::ScaleRangeId scaleRangeId_)
{
    m_scaleRangeId_ = scaleRangeId_;
}

uint32_t IconSet::getNumIcons() const
{
    return m_numIcons_;
}

void IconSet::setNumIcons(uint32_t numIcons_)
{
    m_numIcons_ = numIcons_;
}

::zserio::vector<::nds::core::icons::IconUsageType>& IconSet::getIconUsage()
{
    return m_iconUsage_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconUsageType>& IconSet::getIconUsage() const
{
    return m_iconUsage_.getRawArray();
}

void IconSet::setIconUsage(const ::zserio::vector<::nds::core::icons::IconUsageType>& iconUsage_)
{
    m_iconUsage_ = ZserioArrayType_iconUsage(iconUsage_);
}

void IconSet::setIconUsage(::zserio::vector<::nds::core::icons::IconUsageType>&& iconUsage_)
{
    m_iconUsage_ = ZserioArrayType_iconUsage(std::move(iconUsage_));
}

::zserio::vector<::nds::core::icons::IconId>& IconSet::getIconId()
{
    return m_iconId_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconId>& IconSet::getIconId() const
{
    return m_iconId_.getRawArray();
}

void IconSet::setIconId(const ::zserio::vector<::nds::core::icons::IconId>& iconId_)
{
    m_iconId_ = ZserioArrayType_iconId(iconId_);
}

void IconSet::setIconId(::zserio::vector<::nds::core::icons::IconId>&& iconId_)
{
    m_iconId_ = ZserioArrayType_iconId(std::move(iconId_));
}

::zserio::vector<::nds::core::icons::IconDisplayArrangements>& IconSet::getIconDisplayArrangement()
{
    return m_iconDisplayArrangement_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconDisplayArrangements>& IconSet::getIconDisplayArrangement() const
{
    return m_iconDisplayArrangement_.getRawArray();
}

void IconSet::setIconDisplayArrangement(const ::zserio::vector<::nds::core::icons::IconDisplayArrangements>& iconDisplayArrangement_)
{
    m_iconDisplayArrangement_ = ZserioArrayType_iconDisplayArrangement(iconDisplayArrangement_);
}

void IconSet::setIconDisplayArrangement(::zserio::vector<::nds::core::icons::IconDisplayArrangements>&& iconDisplayArrangement_)
{
    m_iconDisplayArrangement_ = ZserioArrayType_iconDisplayArrangement(std::move(iconDisplayArrangement_));
}

::nds::core::icons::IconDrawingPriority IconSet::getIconDrawingPriority() const
{
    return m_iconDrawingPriority_;
}

void IconSet::setIconDrawingPriority(::nds::core::icons::IconDrawingPriority iconDrawingPriority_)
{
    m_iconDrawingPriority_ = iconDrawingPriority_;
}

::nds::core::icons::IconTemplateSetId IconSet::getIconTemplateSetId() const
{
    return m_iconTemplateSetId_.value();
}

void IconSet::setIconTemplateSetId(::nds::core::icons::IconTemplateSetId iconTemplateSetId_)
{
    m_iconTemplateSetId_ = iconTemplateSetId_;
}

bool IconSet::isIconTemplateSetIdUsed() const
{
    return (isIconTemplateSetIdSet());
}

bool IconSet::isIconTemplateSetIdSet() const
{
    return m_iconTemplateSetId_.hasValue();
}

void IconSet::resetIconTemplateSetId()
{
    m_iconTemplateSetId_.reset();
}

void IconSet::initPackingContext(IconSet::ZserioPackingContext& context) const
{
    context.getIconSetId().init<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetId>>(m_iconSetId_);
    context.getScaleRangeId().init<::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>>(m_scaleRangeId_);
    context.getNumIcons().init<::zserio::VarSizeArrayTraits>(m_numIcons_);
    context.getIconDrawingPriority().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconDrawingPriority>>(m_iconDrawingPriority_);
    if (isIconTemplateSetIdSet())
    {
        context.getIconTemplateSetId().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_iconTemplateSetId_.value());
    }
}

size_t IconSet::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetId_);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_scaleRangeId_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numIcons_);
    endBitPosition += m_iconUsage_.bitSizeOf(endBitPosition);
    endBitPosition += m_iconId_.bitSizeOf(endBitPosition);
    endBitPosition += m_iconDisplayArrangement_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_iconDrawingPriority_);
    endBitPosition += 1;
    if (isIconTemplateSetIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_iconTemplateSetId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t IconSet::bitSizeOf(IconSet::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconSetId().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetId>>(m_iconSetId_);
    endBitPosition += context.getScaleRangeId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>>(m_scaleRangeId_);
    endBitPosition += context.getNumIcons().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numIcons_);
    endBitPosition += m_iconUsage_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_iconId_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_iconDisplayArrangement_.bitSizeOfPacked(endBitPosition);
    endBitPosition += context.getIconDrawingPriority().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconDrawingPriority>>(m_iconDrawingPriority_);
    endBitPosition += 1;
    if (isIconTemplateSetIdSet())
    {
        endBitPosition += context.getIconTemplateSetId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_iconTemplateSetId_.value());
    }

    return endBitPosition - bitPosition;
}

size_t IconSet::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetId_);
    endBitPosition += ::zserio::bitSizeOfVarUInt32(m_scaleRangeId_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numIcons_);
    endBitPosition = m_iconUsage_.initializeOffsets(endBitPosition);
    endBitPosition = m_iconId_.initializeOffsets(endBitPosition);
    endBitPosition = m_iconDisplayArrangement_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_iconDrawingPriority_);
    endBitPosition += 1;
    if (isIconTemplateSetIdSet())
    {
        endBitPosition += ::zserio::bitSizeOfVarUInt16(m_iconTemplateSetId_.value());
    }

    return endBitPosition;
}

size_t IconSet::initializeOffsets(IconSet::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconSetId().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetId>>(m_iconSetId_);
    endBitPosition += context.getScaleRangeId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>>(m_scaleRangeId_);
    endBitPosition += context.getNumIcons().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numIcons_);
    endBitPosition = m_iconUsage_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_iconId_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_iconDisplayArrangement_.initializeOffsetsPacked(endBitPosition);
    endBitPosition += context.getIconDrawingPriority().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconDrawingPriority>>(m_iconDrawingPriority_);
    endBitPosition += 1;
    if (isIconTemplateSetIdSet())
    {
        endBitPosition += context.getIconTemplateSetId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_iconTemplateSetId_.value());
    }

    return endBitPosition;
}

bool IconSet::operator==(const IconSet& other) const
{
    if (this != &other)
    {
        return
                (m_iconSetId_ == other.m_iconSetId_) &&
                (m_scaleRangeId_ == other.m_scaleRangeId_) &&
                (m_numIcons_ == other.m_numIcons_) &&
                (m_iconUsage_ == other.m_iconUsage_) &&
                (m_iconId_ == other.m_iconId_) &&
                (m_iconDisplayArrangement_ == other.m_iconDisplayArrangement_) &&
                (m_iconDrawingPriority_ == other.m_iconDrawingPriority_) &&
                (!isIconTemplateSetIdUsed() ? !other.isIconTemplateSetIdUsed() : (m_iconTemplateSetId_ == other.m_iconTemplateSetId_));
    }

    return true;
}

uint32_t IconSet::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_iconSetId_);
    result = ::zserio::calcHashCode(result, m_scaleRangeId_);
    result = ::zserio::calcHashCode(result, m_numIcons_);
    result = ::zserio::calcHashCode(result, m_iconUsage_);
    result = ::zserio::calcHashCode(result, m_iconId_);
    result = ::zserio::calcHashCode(result, m_iconDisplayArrangement_);
    result = ::zserio::calcHashCode(result, m_iconDrawingPriority_);
    if (isIconTemplateSetIdUsed())
        result = ::zserio::calcHashCode(result, m_iconTemplateSetId_);

    return result;
}

void IconSet::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt(m_iconSetId_);

    out.writeVarUInt32(m_scaleRangeId_);

    out.writeVarSize(m_numIcons_);

    // check array length
    if (m_iconUsage_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconUsage: ") <<
                m_iconUsage_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconUsage_.write(out);

    // check array length
    if (m_iconId_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconId: ") <<
                m_iconId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconId_.write(out);

    // check array length
    if (m_iconDisplayArrangement_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconDisplayArrangement: ") <<
                m_iconDisplayArrangement_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconDisplayArrangement_.write(out);

    out.writeVarUInt16(m_iconDrawingPriority_);

    if (isIconTemplateSetIdSet())
    {
        out.writeBool(true);
        out.writeVarUInt16(m_iconTemplateSetId_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

void IconSet::write(IconSet::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getIconSetId().write<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetId>>(out, m_iconSetId_);

    context.getScaleRangeId().write<::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>>(out, m_scaleRangeId_);

    context.getNumIcons().write<::zserio::VarSizeArrayTraits>(out, m_numIcons_);

    // check array length
    if (m_iconUsage_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconUsage: ") <<
                m_iconUsage_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconUsage_.writePacked(out);

    // check array length
    if (m_iconId_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconId: ") <<
                m_iconId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconId_.writePacked(out);

    // check array length
    if (m_iconDisplayArrangement_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconSet.iconDisplayArrangement: ") <<
                m_iconDisplayArrangement_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconDisplayArrangement_.writePacked(out);

    context.getIconDrawingPriority().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconDrawingPriority>>(out, m_iconDrawingPriority_);

    if (isIconTemplateSetIdSet())
    {
        out.writeBool(true);
        context.getIconTemplateSetId().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(out, m_iconTemplateSetId_.value());
    }
    else
    {
        out.writeBool(false);
    }
}

::nds::core::icons::IconSetId IconSet::readIconSetId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconSetId>(in.readVarUInt());
}

::nds::core::icons::IconSetId IconSet::readIconSetId(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconSetId().read<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetId>>(in);
}
::nds::core::types::ScaleRangeId IconSet::readScaleRangeId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::types::ScaleRangeId>(in.readVarUInt32());
}

::nds::core::types::ScaleRangeId IconSet::readScaleRangeId(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getScaleRangeId().read<::zserio::VarIntNNArrayTraits<::nds::core::types::ScaleRangeId>>(in);
}
uint32_t IconSet::readNumIcons(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t IconSet::readNumIcons(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumIcons().read<::zserio::VarSizeArrayTraits>(in);
}
IconSet::ZserioArrayType_iconUsage IconSet::readIconUsage(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_iconUsage readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconSet::ZserioArrayType_iconUsage IconSet::readIconUsage(IconSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_iconUsage readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}
IconSet::ZserioArrayType_iconId IconSet::readIconId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_iconId readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconSet::ZserioArrayType_iconId IconSet::readIconId(IconSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_iconId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}
IconSet::ZserioArrayType_iconDisplayArrangement IconSet::readIconDisplayArrangement(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_iconDisplayArrangement readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconSet::ZserioArrayType_iconDisplayArrangement IconSet::readIconDisplayArrangement(IconSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_iconDisplayArrangement readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}
::nds::core::icons::IconDrawingPriority IconSet::readIconDrawingPriority(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconDrawingPriority>(in.readVarUInt16());
}

::nds::core::icons::IconDrawingPriority IconSet::readIconDrawingPriority(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconDrawingPriority().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconDrawingPriority>>(in);
}
::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId> IconSet::readIconTemplateSetId(::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId>(static_cast<::nds::core::icons::IconTemplateSetId>(in.readVarUInt16()));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId>(::zserio::NullOpt);
}

::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId> IconSet::readIconTemplateSetId(IconSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    if (in.readBool())
    {
        return ::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId>(context.getIconTemplateSetId().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(in));
    }

    return ::zserio::InplaceOptionalHolder<::nds::core::icons::IconTemplateSetId>(::zserio::NullOpt);
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/IconSetReferenceWithHeading.h>

namespace nds
{
namespace core
{
namespace icons
{

IconSetReferenceWithHeading::IconSetReferenceWithHeading(const allocator_type&) noexcept :
        m_iconSetReference_(::nds::core::icons::IconSetReference()),
        m_iconHeading_(::nds::core::icons::IconHeading())
{
}

IconSetReferenceWithHeading::IconSetReferenceWithHeading(::zserio::BitStreamReader& in, const allocator_type&) :
        m_iconSetReference_(readIconSetReference(in)),
        m_iconHeading_(readIconHeading(in))
{
}

IconSetReferenceWithHeading::IconSetReferenceWithHeading(IconSetReferenceWithHeading::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_iconSetReference_(readIconSetReference(context, in)),
        m_iconHeading_(readIconHeading(context, in))
{
}

IconSetReferenceWithHeading::IconSetReferenceWithHeading(::zserio::PropagateAllocatorT,
        const IconSetReferenceWithHeading& other, const allocator_type& allocator) :
        m_iconSetReference_(::zserio::allocatorPropagatingCopy(other.m_iconSetReference_, allocator)),
        m_iconHeading_(::zserio::allocatorPropagatingCopy(other.m_iconHeading_, allocator))
{
}

::nds::core::icons::IconSetReference IconSetReferenceWithHeading::getIconSetReference() const
{
    return m_iconSetReference_;
}

void IconSetReferenceWithHeading::setIconSetReference(::nds::core::icons::IconSetReference iconSetReference_)
{
    m_iconSetReference_ = iconSetReference_;
}

::nds::core::icons::IconHeading IconSetReferenceWithHeading::getIconHeading() const
{
    return m_iconHeading_;
}

void IconSetReferenceWithHeading::setIconHeading(::nds::core::icons::IconHeading iconHeading_)
{
    m_iconHeading_ = iconHeading_;
}

void IconSetReferenceWithHeading::initPackingContext(IconSetReferenceWithHeading::ZserioPackingContext& context) const
{
    context.getIconSetReference().init<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetReference>>(m_iconSetReference_);
    context.getIconHeading().init<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);
}

size_t IconSetReferenceWithHeading::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetReference_);
    endBitPosition += UINT8_C(8);

    return endBitPosition - bitPosition;
}

size_t IconSetReferenceWithHeading::bitSizeOf(IconSetReferenceWithHeading::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetReference>>(m_iconSetReference_);
    endBitPosition += context.getIconHeading().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);

    return endBitPosition - bitPosition;
}

size_t IconSetReferenceWithHeading::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt(m_iconSetReference_);
    endBitPosition += UINT8_C(8);

    return endBitPosition;
}

size_t IconSetReferenceWithHeading::initializeOffsets(IconSetReferenceWithHeading::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getIconSetReference().bitSizeOf<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetReference>>(m_iconSetReference_);
    endBitPosition += context.getIconHeading().bitSizeOf<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(m_iconHeading_);

    return endBitPosition;
}

bool IconSetReferenceWithHeading::operator==(const IconSetReferenceWithHeading& other) const
{
    if (this != &other)
    {
        return
                (m_iconSetReference_ == other.m_iconSetReference_) &&
                (m_iconHeading_ == other.m_iconHeading_);
    }

    return true;
}

uint32_t IconSetReferenceWithHeading::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_iconSetReference_);
    result = ::zserio::calcHashCode(result, m_iconHeading_);

    return result;
}

void IconSetReferenceWithHeading::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt(m_iconSetReference_);
    out.writeBits(m_iconHeading_, UINT8_C(8));
}

void IconSetReferenceWithHeading::write(IconSetReferenceWithHeading::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getIconSetReference().write<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetReference>>(out, m_iconSetReference_);
    context.getIconHeading().write<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(out, m_iconHeading_);
}

::nds::core::icons::IconSetReference IconSetReferenceWithHeading::readIconSetReference(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconSetReference>(in.readVarUInt());
}

::nds::core::icons::IconSetReference IconSetReferenceWithHeading::readIconSetReference(IconSetReferenceWithHeading::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconSetReference().read<::zserio::VarIntArrayTraits<::nds::core::icons::IconSetReference>>(in);
}
::nds::core::icons::IconHeading IconSetReferenceWithHeading::readIconHeading(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconHeading>(in.readBits(UINT8_C(8)));
}

::nds::core::icons::IconHeading IconSetReferenceWithHeading::readIconHeading(IconSetReferenceWithHeading::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getIconHeading().read<::zserio::StdIntArrayTraits<::nds::core::icons::IconHeading>>(in);
}

} // namespace icons
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/icons/IconTemplateSet.h>

namespace nds
{
namespace core
{
namespace icons
{

IconTemplateSet::IconTemplateSet(const allocator_type& allocator) noexcept :
        m_templateSetId_(::nds::core::icons::IconTemplateSetId()),
        m_numIcons_(uint32_t()),
        m_usageType_(allocator),
        m_drawingLayer_(allocator),
        m_templateConnectionPoint_(allocator),
        m_iconId_(allocator)
{
}

IconTemplateSet::IconTemplateSet(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_templateSetId_(readTemplateSetId(in)),
        m_numIcons_(readNumIcons(in)),
        m_usageType_(readUsageType(in, allocator)),
        m_drawingLayer_(readDrawingLayer(in, allocator)),
        m_templateConnectionPoint_(readTemplateConnectionPoint(in, allocator)),
        m_iconId_(readIconId(in, allocator))
{
}

IconTemplateSet::IconTemplateSet(IconTemplateSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_templateSetId_(readTemplateSetId(context, in)),
        m_numIcons_(readNumIcons(context, in)),
        m_usageType_(readUsageType(context, in, allocator)),
        m_drawingLayer_(readDrawingLayer(context, in, allocator)),
        m_templateConnectionPoint_(readTemplateConnectionPoint(context, in, allocator)),
        m_iconId_(readIconId(context, in, allocator))
{
}

IconTemplateSet::IconTemplateSet(::zserio::PropagateAllocatorT,
        const IconTemplateSet& other, const allocator_type& allocator) :
        m_templateSetId_(::zserio::allocatorPropagatingCopy(other.m_templateSetId_, allocator)),
        m_numIcons_(::zserio::allocatorPropagatingCopy(other.m_numIcons_, allocator)),
        m_usageType_(::zserio::allocatorPropagatingCopy(other.m_usageType_, allocator)),
        m_drawingLayer_(::zserio::allocatorPropagatingCopy(other.m_drawingLayer_, allocator)),
        m_templateConnectionPoint_(::zserio::allocatorPropagatingCopy(other.m_templateConnectionPoint_, allocator)),
        m_iconId_(::zserio::allocatorPropagatingCopy(other.m_iconId_, allocator))
{
}

::nds::core::icons::IconTemplateSetId IconTemplateSet::getTemplateSetId() const
{
    return m_templateSetId_;
}

void IconTemplateSet::setTemplateSetId(::nds::core::icons::IconTemplateSetId templateSetId_)
{
    m_templateSetId_ = templateSetId_;
}

uint32_t IconTemplateSet::getNumIcons() const
{
    return m_numIcons_;
}

void IconTemplateSet::setNumIcons(uint32_t numIcons_)
{
    m_numIcons_ = numIcons_;
}

::zserio::vector<::nds::core::icons::IconUsageType>& IconTemplateSet::getUsageType()
{
    return m_usageType_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconUsageType>& IconTemplateSet::getUsageType() const
{
    return m_usageType_.getRawArray();
}

void IconTemplateSet::setUsageType(const ::zserio::vector<::nds::core::icons::IconUsageType>& usageType_)
{
    m_usageType_ = ZserioArrayType_usageType(usageType_);
}

void IconTemplateSet::setUsageType(::zserio::vector<::nds::core::icons::IconUsageType>&& usageType_)
{
    m_usageType_ = ZserioArrayType_usageType(std::move(usageType_));
}

::zserio::vector<int8_t>& IconTemplateSet::getDrawingLayer()
{
    return m_drawingLayer_.getRawArray();
}

const ::zserio::vector<int8_t>& IconTemplateSet::getDrawingLayer() const
{
    return m_drawingLayer_.getRawArray();
}

void IconTemplateSet::setDrawingLayer(const ::zserio::vector<int8_t>& drawingLayer_)
{
    m_drawingLayer_ = ZserioArrayType_drawingLayer(drawingLayer_);
}

void IconTemplateSet::setDrawingLayer(::zserio::vector<int8_t>&& drawingLayer_)
{
    m_drawingLayer_ = ZserioArrayType_drawingLayer(std::move(drawingLayer_));
}

::zserio::vector<::nds::core::icons::ImageAnchorPos>& IconTemplateSet::getTemplateConnectionPoint()
{
    return m_templateConnectionPoint_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::ImageAnchorPos>& IconTemplateSet::getTemplateConnectionPoint() const
{
    return m_templateConnectionPoint_.getRawArray();
}

void IconTemplateSet::setTemplateConnectionPoint(const ::zserio::vector<::nds::core::icons::ImageAnchorPos>& templateConnectionPoint_)
{
    m_templateConnectionPoint_ = ZserioArrayType_templateConnectionPoint(templateConnectionPoint_);
}

void IconTemplateSet::setTemplateConnectionPoint(::zserio::vector<::nds::core::icons::ImageAnchorPos>&& templateConnectionPoint_)
{
    m_templateConnectionPoint_ = ZserioArrayType_templateConnectionPoint(std::move(templateConnectionPoint_));
}

::zserio::vector<::nds::core::icons::IconId>& IconTemplateSet::getIconId()
{
    return m_iconId_.getRawArray();
}

const ::zserio::vector<::nds::core::icons::IconId>& IconTemplateSet::getIconId() const
{
    return m_iconId_.getRawArray();
}

void IconTemplateSet::setIconId(const ::zserio::vector<::nds::core::icons::IconId>& iconId_)
{
    m_iconId_ = ZserioArrayType_iconId(iconId_);
}

void IconTemplateSet::setIconId(::zserio::vector<::nds::core::icons::IconId>&& iconId_)
{
    m_iconId_ = ZserioArrayType_iconId(std::move(iconId_));
}

void IconTemplateSet::initPackingContext(IconTemplateSet::ZserioPackingContext& context) const
{
    context.getTemplateSetId().init<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_templateSetId_);
    context.getNumIcons().init<::zserio::VarSizeArrayTraits>(m_numIcons_);
}

size_t IconTemplateSet::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_templateSetId_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numIcons_);
    endBitPosition += m_usageType_.bitSizeOf(endBitPosition);
    endBitPosition += m_drawingLayer_.bitSizeOf(endBitPosition);
    endBitPosition += m_templateConnectionPoint_.bitSizeOf(*this, endBitPosition);
    endBitPosition += m_iconId_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t IconTemplateSet::bitSizeOf(IconTemplateSet::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTemplateSetId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_templateSetId_);
    endBitPosition += context.getNumIcons().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numIcons_);
    endBitPosition += m_usageType_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_drawingLayer_.bitSizeOfPacked(endBitPosition);
    endBitPosition += m_templateConnectionPoint_.bitSizeOfPacked(*this, endBitPosition);
    endBitPosition += m_iconId_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t IconTemplateSet::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarUInt16(m_templateSetId_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numIcons_);
    endBitPosition = m_usageType_.initializeOffsets(endBitPosition);
    endBitPosition = m_drawingLayer_.initializeOffsets(endBitPosition);
    endBitPosition = m_templateConnectionPoint_.initializeOffsets(*this, endBitPosition);
    endBitPosition = m_iconId_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t IconTemplateSet::initializeOffsets(IconTemplateSet::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getTemplateSetId().bitSizeOf<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(m_templateSetId_);
    endBitPosition += context.getNumIcons().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numIcons_);
    endBitPosition = m_usageType_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_drawingLayer_.initializeOffsetsPacked(endBitPosition);
    endBitPosition = m_templateConnectionPoint_.initializeOffsetsPacked(*this, endBitPosition);
    endBitPosition = m_iconId_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool IconTemplateSet::operator==(const IconTemplateSet& other) const
{
    if (this != &other)
    {
        return
                (m_templateSetId_ == other.m_templateSetId_) &&
                (m_numIcons_ == other.m_numIcons_) &&
                (m_usageType_ == other.m_usageType_) &&
                (m_drawingLayer_ == other.m_drawingLayer_) &&
                (m_templateConnectionPoint_ == other.m_templateConnectionPoint_) &&
                (m_iconId_ == other.m_iconId_);
    }

    return true;
}

uint32_t IconTemplateSet::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_templateSetId_);
    result = ::zserio::calcHashCode(result, m_numIcons_);
    result = ::zserio::calcHashCode(result, m_usageType_);
    result = ::zserio::calcHashCode(result, m_drawingLayer_);
    result = ::zserio::calcHashCode(result, m_templateConnectionPoint_);
    result = ::zserio::calcHashCode(result, m_iconId_);

    return result;
}

void IconTemplateSet::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarUInt16(m_templateSetId_);

    out.writeVarSize(m_numIcons_);

    // check array length
    if (m_usageType_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.usageType: ") <<
                m_usageType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_usageType_.write(out);

    // check array length
    if (m_drawingLayer_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.drawingLayer: ") <<
                m_drawingLayer_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_drawingLayer_.write(out);

    // check array length
    if (m_templateConnectionPoint_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.templateConnectionPoint: ") <<
                m_templateConnectionPoint_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_templateConnectionPoint_.write(*this, out);

    // check array length
    if (m_iconId_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.iconId: ") <<
                m_iconId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconId_.write(out);
}

void IconTemplateSet::write(IconTemplateSet::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    context.getTemplateSetId().write<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(out, m_templateSetId_);

    context.getNumIcons().write<::zserio::VarSizeArrayTraits>(out, m_numIcons_);

    // check array length
    if (m_usageType_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.usageType: ") <<
                m_usageType_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_usageType_.writePacked(out);

    // check array length
    if (m_drawingLayer_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.drawingLayer: ") <<
                m_drawingLayer_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_drawingLayer_.writePacked(out);

    // check array length
    if (m_templateConnectionPoint_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.templateConnectionPoint: ") <<
                m_templateConnectionPoint_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_templateConnectionPoint_.writePacked(*this, out);

    // check array length
    if (m_iconId_.getRawArray().size() != static_cast<size_t>(getNumIcons()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field IconTemplateSet.iconId: ") <<
                m_iconId_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumIcons()) << "!";
    }
    m_iconId_.writePacked(out);
}

void IconTemplateSet::ZserioElementFactory_templateConnectionPoint::create(IconTemplateSet&        ,
        ::zserio::vector<::nds::core::icons::ImageAnchorPos>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void IconTemplateSet::ZserioElementFactory_templateConnectionPoint::create(IconTemplateSet&        ,
        ::zserio::vector<::nds::core::icons::ImageAnchorPos>& array,
        ::nds::core::icons::ImageAnchorPos::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::icons::IconTemplateSetId IconTemplateSet::readTemplateSetId(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::icons::IconTemplateSetId>(in.readVarUInt16());
}

::nds::core::icons::IconTemplateSetId IconTemplateSet::readTemplateSetId(IconTemplateSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getTemplateSetId().read<::zserio::VarIntNNArrayTraits<::nds::core::icons::IconTemplateSetId>>(in);
}
uint32_t IconTemplateSet::readNumIcons(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readVarSize());
}

uint32_t IconTemplateSet::readNumIcons(IconTemplateSet::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumIcons().read<::zserio::VarSizeArrayTraits>(in);
}
IconTemplateSet::ZserioArrayType_usageType IconTemplateSet::readUsageType(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_usageType readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconTemplateSet::ZserioArrayType_usageType IconTemplateSet::readUsageType(IconTemplateSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_usageType readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}
IconTemplateSet::ZserioArrayType_drawingLayer IconTemplateSet::readDrawingLayer(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_drawingLayer readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconTemplateSet::ZserioArrayType_drawingLayer IconTemplateSet::readDrawingLayer(IconTemplateSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_drawingLayer readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}
IconTemplateSet::ZserioArrayType_templateConnectionPoint IconTemplateSet::readTemplateConnectionPoint(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_templateConnectionPoint readField(allocator);
    readField.read(*this, in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconTemplateSet::ZserioArrayType_templateConnectionPoint IconTemplateSet::readTemplateConnectionPoint(IconTemplateSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_templateConnectionPoint readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumIcons()));

    return readField;
}
IconTemplateSet::ZserioArrayType_iconId IconTemplateSet::readIconId(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_iconId readField(allocator);
    readField.read(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

IconTemplateSet::ZserioArrayType_iconId IconTemplateSet::readIconId(IconTemplateSet::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_iconId readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumIcons()));

    return readField;
}

} // namespace icons
} // namespace core
} // namespace nds
