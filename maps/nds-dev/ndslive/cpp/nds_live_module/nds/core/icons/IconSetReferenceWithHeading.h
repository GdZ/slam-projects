/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_ICONS_ICON_SET_REFERENCE_WITH_HEADING_H
#define NDS_CORE_ICONS_ICON_SET_REFERENCE_WITH_HEADING_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/icons/IconHeading.h>
#include <nds/core/icons/IconSetReference.h>

namespace nds
{
namespace core
{
namespace icons
{

class IconSetReferenceWithHeading
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIconSetReference()
        {
            return m_iconSetReference_;
        }

        ::zserio::DeltaContext& getIconHeading()
        {
            return m_iconHeading_;
        }

    private:
        ::zserio::DeltaContext m_iconSetReference_;
        ::zserio::DeltaContext m_iconHeading_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IconSetReferenceWithHeading() noexcept :
            IconSetReferenceWithHeading(allocator_type())
    {}

    explicit IconSetReferenceWithHeading(const allocator_type& allocator) noexcept;

    IconSetReferenceWithHeading(
            ::nds::core::icons::IconSetReference iconSetReference_,
            ::nds::core::icons::IconHeading iconHeading_,
            const allocator_type& allocator = allocator_type()) :
            IconSetReferenceWithHeading(allocator)
    {
        m_iconSetReference_ = iconSetReference_;
        m_iconHeading_ = iconHeading_;
    }

    explicit IconSetReferenceWithHeading(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit IconSetReferenceWithHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~IconSetReferenceWithHeading() = default;

    IconSetReferenceWithHeading(const IconSetReferenceWithHeading&) = default;
    IconSetReferenceWithHeading& operator=(const IconSetReferenceWithHeading&) = default;

    IconSetReferenceWithHeading(IconSetReferenceWithHeading&&) = default;
    IconSetReferenceWithHeading& operator=(IconSetReferenceWithHeading&&) = default;

    IconSetReferenceWithHeading(::zserio::PropagateAllocatorT,
            const IconSetReferenceWithHeading& other, const allocator_type& allocator);

    ::nds::core::icons::IconSetReference getIconSetReference() const;
    void setIconSetReference(::nds::core::icons::IconSetReference iconSetReference_);

    ::nds::core::icons::IconHeading getIconHeading() const;
    void setIconHeading(::nds::core::icons::IconHeading iconHeading_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IconSetReferenceWithHeading& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::icons::IconSetReference readIconSetReference(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconSetReference readIconSetReference(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::IconHeading readIconHeading(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconHeading readIconHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::icons::IconSetReference m_iconSetReference_;
    ::nds::core::icons::IconHeading m_iconHeading_;
};

} // namespace icons
} // namespace core
} // namespace nds

#endif // NDS_CORE_ICONS_ICON_SET_REFERENCE_WITH_HEADING_H
