/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_ICONS_ICON_IMAGE_H
#define NDS_CORE_ICONS_ICON_IMAGE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/BitBuffer.h>

#include <nds/core/color/ColorRgba.h>
#include <nds/core/icons/DisplayResolution.h>
#include <nds/core/icons/IconFormat.h>
#include <nds/core/icons/IconHeading.h>
#include <nds/core/icons/IconId.h>
#include <nds/core/icons/ImageAnchorPos.h>
#include <nds/core/icons/ImageRect.h>
#include <nds/core/icons/NumPixels.h>

namespace nds
{
namespace core
{
namespace icons
{

class IconImage
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIconId()
        {
            return m_iconId_;
        }

        ::zserio::DeltaContext& getMinResolution()
        {
            return m_minResolution_;
        }

        ::zserio::DeltaContext& getMaxResolution()
        {
            return m_maxResolution_;
        }

        ::nds::core::icons::ImageRect::ZserioPackingContext& getTextBoundingRect()
        {
            return m_textBoundingRect_;
        }

        ::nds::core::color::ColorRgba::ZserioPackingContext& getTextColor()
        {
            return m_textColor_;
        }

        ::zserio::DeltaContext& getPixWidth()
        {
            return m_pixWidth_;
        }

        ::zserio::DeltaContext& getPixHeight()
        {
            return m_pixHeight_;
        }

        ::zserio::DeltaContext& getIconFormat()
        {
            return m_iconFormat_;
        }

        ::nds::core::icons::ImageAnchorPos::ZserioPackingContext& getImageAnchorPos()
        {
            return m_imageAnchorPos_;
        }

        ::zserio::DeltaContext& getIconHeading()
        {
            return m_iconHeading_;
        }

        ::nds::core::icons::ImageRect::ZserioPackingContext& getImageBoundingRect()
        {
            return m_imageBoundingRect_;
        }

    private:
        ::zserio::DeltaContext m_iconId_;
        ::zserio::DeltaContext m_minResolution_;
        ::zserio::DeltaContext m_maxResolution_;
        ::nds::core::icons::ImageRect::ZserioPackingContext m_textBoundingRect_;
        ::nds::core::color::ColorRgba::ZserioPackingContext m_textColor_;
        ::zserio::DeltaContext m_pixWidth_;
        ::zserio::DeltaContext m_pixHeight_;
        ::zserio::DeltaContext m_iconFormat_;
        ::nds::core::icons::ImageAnchorPos::ZserioPackingContext m_imageAnchorPos_;
        ::zserio::DeltaContext m_iconHeading_;
        ::nds::core::icons::ImageRect::ZserioPackingContext m_imageBoundingRect_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IconImage() noexcept :
            IconImage(allocator_type())
    {}

    explicit IconImage(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_textBoundingRect = ::nds::core::icons::ImageRect,
            typename ZSERIO_T_textColor = ::nds::core::color::ColorRgba,
            typename ZSERIO_T_imageAnchorPos = ::nds::core::icons::ImageAnchorPos,
            typename ZSERIO_T_imageBoundingRect = ::nds::core::icons::ImageRect,
            typename ZSERIO_T_image = ::zserio::BitBuffer>
    IconImage(
            ::nds::core::icons::IconId iconId_,
            ::nds::core::icons::DisplayResolution minResolution_,
            ::nds::core::icons::DisplayResolution maxResolution_,
            ZSERIO_T_textBoundingRect&& textBoundingRect_,
            ZSERIO_T_textColor&& textColor_,
            ::nds::core::icons::NumPixels pixWidth_,
            ::nds::core::icons::NumPixels pixHeight_,
            ::nds::core::icons::IconFormat iconFormat_,
            ZSERIO_T_imageAnchorPos&& imageAnchorPos_,
            ::nds::core::icons::IconHeading iconHeading_,
            ZSERIO_T_imageBoundingRect&& imageBoundingRect_,
            ZSERIO_T_image&& image_,
            const allocator_type& allocator = allocator_type()) :
            IconImage(allocator)
    {
        m_iconId_ = iconId_;
        m_minResolution_ = minResolution_;
        m_maxResolution_ = maxResolution_;
        m_textBoundingRect_ = ::std::forward<ZSERIO_T_textBoundingRect>(textBoundingRect_);
        m_textColor_ = ::std::forward<ZSERIO_T_textColor>(textColor_);
        m_pixWidth_ = pixWidth_;
        m_pixHeight_ = pixHeight_;
        m_iconFormat_ = iconFormat_;
        m_imageAnchorPos_ = ::std::forward<ZSERIO_T_imageAnchorPos>(imageAnchorPos_);
        m_iconHeading_ = iconHeading_;
        m_imageBoundingRect_ = ::std::forward<ZSERIO_T_imageBoundingRect>(imageBoundingRect_);
        m_image_ = ::std::forward<ZSERIO_T_image>(image_);
    }

    explicit IconImage(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit IconImage(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~IconImage() = default;

    IconImage(const IconImage&) = default;
    IconImage& operator=(const IconImage&) = default;

    IconImage(IconImage&&) = default;
    IconImage& operator=(IconImage&&) = default;

    IconImage(::zserio::PropagateAllocatorT,
            const IconImage& other, const allocator_type& allocator);

    ::nds::core::icons::IconId getIconId() const;
    void setIconId(::nds::core::icons::IconId iconId_);

    ::nds::core::icons::DisplayResolution getMinResolution() const;
    void setMinResolution(::nds::core::icons::DisplayResolution minResolution_);

    ::nds::core::icons::DisplayResolution getMaxResolution() const;
    void setMaxResolution(::nds::core::icons::DisplayResolution maxResolution_);

    const ::nds::core::icons::ImageRect& getTextBoundingRect() const;
    ::nds::core::icons::ImageRect& getTextBoundingRect();
    void setTextBoundingRect(const ::nds::core::icons::ImageRect& textBoundingRect_);
    void setTextBoundingRect(::nds::core::icons::ImageRect&& textBoundingRect_);

    const ::nds::core::color::ColorRgba& getTextColor() const;
    ::nds::core::color::ColorRgba& getTextColor();
    void setTextColor(const ::nds::core::color::ColorRgba& textColor_);
    void setTextColor(::nds::core::color::ColorRgba&& textColor_);

    ::nds::core::icons::NumPixels getPixWidth() const;
    void setPixWidth(::nds::core::icons::NumPixels pixWidth_);

    ::nds::core::icons::NumPixels getPixHeight() const;
    void setPixHeight(::nds::core::icons::NumPixels pixHeight_);

    ::nds::core::icons::IconFormat getIconFormat() const;
    void setIconFormat(::nds::core::icons::IconFormat iconFormat_);

    const ::nds::core::icons::ImageAnchorPos& getImageAnchorPos() const;
    ::nds::core::icons::ImageAnchorPos& getImageAnchorPos();
    void setImageAnchorPos(const ::nds::core::icons::ImageAnchorPos& imageAnchorPos_);
    void setImageAnchorPos(::nds::core::icons::ImageAnchorPos&& imageAnchorPos_);

    ::nds::core::icons::IconHeading getIconHeading() const;
    void setIconHeading(::nds::core::icons::IconHeading iconHeading_);

    const ::nds::core::icons::ImageRect& getImageBoundingRect() const;
    ::nds::core::icons::ImageRect& getImageBoundingRect();
    void setImageBoundingRect(const ::nds::core::icons::ImageRect& imageBoundingRect_);
    void setImageBoundingRect(::nds::core::icons::ImageRect&& imageBoundingRect_);

    const ::zserio::BitBuffer& getImage() const;
    ::zserio::BitBuffer& getImage();
    void setImage(const ::zserio::BitBuffer& image_);
    void setImage(::zserio::BitBuffer&& image_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IconImage& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::icons::IconId readIconId(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconId readIconId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::DisplayResolution readMinResolution(::zserio::BitStreamReader& in);
    ::nds::core::icons::DisplayResolution readMinResolution(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::DisplayResolution readMaxResolution(::zserio::BitStreamReader& in);
    ::nds::core::icons::DisplayResolution readMaxResolution(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::ImageRect readTextBoundingRect(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::icons::ImageRect readTextBoundingRect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::color::ColorRgba readTextColor(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::color::ColorRgba readTextColor(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::icons::NumPixels readPixWidth(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixWidth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixHeight(::zserio::BitStreamReader& in);
    ::nds::core::icons::NumPixels readPixHeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::IconFormat readIconFormat(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconFormat readIconFormat(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::ImageAnchorPos readImageAnchorPos(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::icons::ImageAnchorPos readImageAnchorPos(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::icons::IconHeading readIconHeading(::zserio::BitStreamReader& in);
    ::nds::core::icons::IconHeading readIconHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::icons::ImageRect readImageBoundingRect(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::icons::ImageRect readImageBoundingRect(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::BitBuffer readImage(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::icons::IconId m_iconId_;
    ::nds::core::icons::DisplayResolution m_minResolution_;
    ::nds::core::icons::DisplayResolution m_maxResolution_;
    ::nds::core::icons::ImageRect m_textBoundingRect_;
    ::nds::core::color::ColorRgba m_textColor_;
    ::nds::core::icons::NumPixels m_pixWidth_;
    ::nds::core::icons::NumPixels m_pixHeight_;
    ::nds::core::icons::IconFormat m_iconFormat_;
    ::nds::core::icons::ImageAnchorPos m_imageAnchorPos_;
    ::nds::core::icons::IconHeading m_iconHeading_;
    ::nds::core::icons::ImageRect m_imageBoundingRect_;
    ::zserio::BitBuffer m_image_;
};

} // namespace icons
} // namespace core
} // namespace nds

#endif // NDS_CORE_ICONS_ICON_IMAGE_H
