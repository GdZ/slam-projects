/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_LOCATION_LOCATION_GEOMETRY_H
#define NDS_CORE_LOCATION_LOCATION_GEOMETRY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Line2D.h>

namespace nds
{
namespace core
{
namespace location
{

class LocationGeometry
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Line2D::ZserioPackingContext& getLine()
        {
            return m_line_;
        }

    private:
        ::nds::core::geometry::Line2D::ZserioPackingContext m_line_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LocationGeometry() noexcept :
            LocationGeometry(allocator_type())
    {}

    explicit LocationGeometry(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_line = ::nds::core::geometry::Line2D,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_line, LocationGeometry, allocator_type> = 0>
    explicit LocationGeometry(
            ZSERIO_T_line&& line_,
            const allocator_type& allocator = allocator_type()) :
            LocationGeometry(allocator)
    {
        m_line_ = ::std::forward<ZSERIO_T_line>(line_);
    }

    explicit LocationGeometry(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LocationGeometry(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LocationGeometry() = default;

    LocationGeometry(const LocationGeometry& other);
    LocationGeometry& operator=(const LocationGeometry& other);

    LocationGeometry(LocationGeometry&& other);
    LocationGeometry& operator=(LocationGeometry&& other);

    LocationGeometry(::zserio::PropagateAllocatorT,
            const LocationGeometry& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::geometry::Line2D& getLine() const;
    ::nds::core::geometry::Line2D& getLine();
    void setLine(const ::nds::core::geometry::Line2D& line_);
    void setLine(::nds::core::geometry::Line2D&& line_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LocationGeometry& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::Line2D readLine(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Line2D readLine(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::Line2D m_line_;
};

} // namespace location
} // namespace core
} // namespace nds

#endif // NDS_CORE_LOCATION_LOCATION_GEOMETRY_H
