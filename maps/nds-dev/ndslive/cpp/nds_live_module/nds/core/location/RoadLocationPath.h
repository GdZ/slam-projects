/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_LOCATION_ROAD_LOCATION_PATH_H
#define NDS_CORE_LOCATION_ROAD_LOCATION_PATH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/location/LocationGeometry.h>
#include <nds/core/location/LocationSegment.h>

namespace nds
{
namespace core
{
namespace location
{

class RoadLocationPath
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::location::LocationGeometry::ZserioPackingContext& getPathGeometry()
        {
            return m_pathGeometry_;
        }

    private:
        ::nds::core::location::LocationGeometry::ZserioPackingContext m_pathGeometry_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationPath() noexcept :
            RoadLocationPath(allocator_type())
    {}

    explicit RoadLocationPath(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_pathGeometry = ::nds::core::location::LocationGeometry,
            typename ZSERIO_T_locationPathSegments = ::zserio::vector<::nds::core::location::LocationSegment>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_pathGeometry, RoadLocationPath, allocator_type> = 0>
    RoadLocationPath(
            ZSERIO_T_pathGeometry&& pathGeometry_,
            ZSERIO_T_locationPathSegments&& locationPathSegments_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationPath(allocator)
    {
        m_pathGeometry_ = ::std::forward<ZSERIO_T_pathGeometry>(pathGeometry_);
        m_locationPathSegments_ = ZserioArrayType_locationPathSegments(::std::forward<ZSERIO_T_locationPathSegments>(locationPathSegments_));
    }

    explicit RoadLocationPath(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationPath(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationPath() = default;

    RoadLocationPath(const RoadLocationPath& other);
    RoadLocationPath& operator=(const RoadLocationPath& other);

    RoadLocationPath(RoadLocationPath&& other);
    RoadLocationPath& operator=(RoadLocationPath&& other);

    RoadLocationPath(::zserio::PropagateAllocatorT,
            const RoadLocationPath& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::location::LocationGeometry& getPathGeometry() const;
    ::nds::core::location::LocationGeometry& getPathGeometry();
    void setPathGeometry(const ::nds::core::location::LocationGeometry& pathGeometry_);
    void setPathGeometry(::nds::core::location::LocationGeometry&& pathGeometry_);

    const ::zserio::vector<::nds::core::location::LocationSegment>& getLocationPathSegments() const;
    ::zserio::vector<::nds::core::location::LocationSegment>& getLocationPathSegments();
    void setLocationPathSegments(const ::zserio::vector<::nds::core::location::LocationSegment>& locationPathSegments_);
    void setLocationPathSegments(::zserio::vector<::nds::core::location::LocationSegment>&& locationPathSegments_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationPath& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_locationPathSegments
    {
    public:
        using OwnerType = RoadLocationPath;

        static void initializeElement(RoadLocationPath& owner,
                ::nds::core::location::LocationSegment& element, size_t index);
    };

    class ZserioElementFactory_locationPathSegments
    {
    public:
        using OwnerType = RoadLocationPath;

        static void create(RoadLocationPath& owner,
                ::zserio::vector<::nds::core::location::LocationSegment>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(RoadLocationPath& owner,
                ::zserio::vector<::nds::core::location::LocationSegment>& array,
                ::nds::core::location::LocationSegment::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_locationPathSegments = ::zserio::Array<::zserio::vector<::nds::core::location::LocationSegment>, ::zserio::ObjectArrayTraits<::nds::core::location::LocationSegment, ZserioElementFactory_locationPathSegments>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_locationPathSegments>;

    ::nds::core::location::LocationGeometry readPathGeometry(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::location::LocationGeometry readPathGeometry(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_locationPathSegments readLocationPathSegments(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_locationPathSegments readLocationPathSegments(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::location::LocationGeometry m_pathGeometry_;
    ZserioArrayType_locationPathSegments m_locationPathSegments_;
};

} // namespace location
} // namespace core
} // namespace nds

#endif // NDS_CORE_LOCATION_ROAD_LOCATION_PATH_H
