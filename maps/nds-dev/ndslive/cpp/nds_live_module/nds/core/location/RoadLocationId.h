/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_LOCATION_ROAD_LOCATION_ID_H
#define NDS_CORE_LOCATION_ROAD_LOCATION_ID_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/location/RoadLocationBranchId.h>

namespace nds
{
namespace core
{
namespace location
{

class RoadLocationId
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getBranchId()
        {
            return m_branchId_;
        }

    private:
        ::zserio::DeltaContext m_branchId_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    RoadLocationId() noexcept :
            RoadLocationId(allocator_type())
    {}

    explicit RoadLocationId(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_value = ::zserio::vector<uint8_t>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_value, RoadLocationId, allocator_type> = 0>
    RoadLocationId(
            ZSERIO_T_value&& value_,
            ::nds::core::location::RoadLocationBranchId branchId_,
            const allocator_type& allocator = allocator_type()) :
            RoadLocationId(allocator)
    {
        m_value_ = ZserioArrayType_value(::std::forward<ZSERIO_T_value>(value_));
        m_branchId_ = branchId_;
    }

    explicit RoadLocationId(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit RoadLocationId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~RoadLocationId() = default;

    RoadLocationId(const RoadLocationId&) = default;
    RoadLocationId& operator=(const RoadLocationId&) = default;

    RoadLocationId(RoadLocationId&&) = default;
    RoadLocationId& operator=(RoadLocationId&&) = default;

    RoadLocationId(::zserio::PropagateAllocatorT,
            const RoadLocationId& other, const allocator_type& allocator);

    const ::zserio::vector<uint8_t>& getValue() const;
    ::zserio::vector<uint8_t>& getValue();
    void setValue(const ::zserio::vector<uint8_t>& value_);
    void setValue(::zserio::vector<uint8_t>&& value_);

    ::nds::core::location::RoadLocationBranchId getBranchId() const;
    void setBranchId(::nds::core::location::RoadLocationBranchId branchId_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const RoadLocationId& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_value = ::zserio::Array<::zserio::vector<uint8_t>, ::zserio::StdIntArrayTraits<uint8_t>, ::zserio::ArrayType::NORMAL>;

    ZserioArrayType_value readValue(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_value readValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::location::RoadLocationBranchId readBranchId(::zserio::BitStreamReader& in);
    ::nds::core::location::RoadLocationBranchId readBranchId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ZserioArrayType_value m_value_;
    ::nds::core::location::RoadLocationBranchId m_branchId_;
};

} // namespace location
} // namespace core
} // namespace nds

#endif // NDS_CORE_LOCATION_ROAD_LOCATION_ID_H
