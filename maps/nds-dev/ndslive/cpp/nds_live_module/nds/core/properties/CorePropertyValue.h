/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_PROPERTIES_CORE_PROPERTY_VALUE_H
#define NDS_CORE_PROPERTIES_CORE_PROPERTY_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/icons/IconSetReference.h>
#include <nds/core/icons/IconSetReferenceWithHeading.h>
#include <nds/core/properties/AttributeAge.h>
#include <nds/core/properties/AttributeConfidence.h>
#include <nds/core/properties/AttributeReason.h>
#include <nds/core/properties/AttributeSourceType.h>
#include <nds/core/properties/CorePropertyType.h>
#include <nds/core/properties/TollPaymentMethod.h>

namespace nds
{
namespace core
{
namespace properties
{

class CorePropertyValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_reason = 0,
        CHOICE_confidence = 1,
        CHOICE_age = 2,
        CHOICE_source = 3,
        CHOICE_iconSetReference = 4,
        CHOICE_iconSetReferenceWithHeading = 5,
        CHOICE_globalIconSetReference = 6,
        CHOICE_globalIconSetReferenceWithHeading = 7,
        CHOICE_tollPaymentMethod = 8,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::core::properties::AttributeReason::ZserioPackingContext& getReason()
        {
            return m_reason_;
        }

        ::zserio::DeltaContext& getConfidence()
        {
            return m_confidence_;
        }

        ::nds::core::properties::AttributeAge::ZserioPackingContext& getAge()
        {
            return m_age_;
        }

        ::zserio::DeltaContext& getSource()
        {
            return m_source_;
        }

        ::zserio::DeltaContext& getIconSetReference()
        {
            return m_iconSetReference_;
        }

        ::nds::core::icons::IconSetReferenceWithHeading::ZserioPackingContext& getIconSetReferenceWithHeading()
        {
            return m_iconSetReferenceWithHeading_;
        }

        ::zserio::DeltaContext& getGlobalIconSetReference()
        {
            return m_globalIconSetReference_;
        }

        ::nds::core::icons::IconSetReferenceWithHeading::ZserioPackingContext& getGlobalIconSetReferenceWithHeading()
        {
            return m_globalIconSetReferenceWithHeading_;
        }

    private:
        ::nds::core::properties::AttributeReason::ZserioPackingContext m_reason_;
        ::zserio::DeltaContext m_confidence_;
        ::nds::core::properties::AttributeAge::ZserioPackingContext m_age_;
        ::zserio::DeltaContext m_source_;
        ::zserio::DeltaContext m_iconSetReference_;
        ::nds::core::icons::IconSetReferenceWithHeading::ZserioPackingContext m_iconSetReferenceWithHeading_;
        ::zserio::DeltaContext m_globalIconSetReference_;
        ::nds::core::icons::IconSetReferenceWithHeading::ZserioPackingContext m_globalIconSetReferenceWithHeading_;
    };

    CorePropertyValue() noexcept :
            CorePropertyValue(allocator_type())
    {}

    explicit CorePropertyValue(const allocator_type& allocator) noexcept;

    explicit CorePropertyValue(::zserio::BitStreamReader& in,
            ::nds::core::properties::CorePropertyType type_, const allocator_type& allocator = allocator_type());
    explicit CorePropertyValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::properties::CorePropertyType type_, const allocator_type& allocator = allocator_type());

    ~CorePropertyValue() = default;

    CorePropertyValue(const CorePropertyValue& other);
    CorePropertyValue& operator=(const CorePropertyValue& other);

    CorePropertyValue(CorePropertyValue&& other);
    CorePropertyValue& operator=(CorePropertyValue&& other);

    CorePropertyValue(::zserio::PropagateAllocatorT,
            const CorePropertyValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::properties::CorePropertyType type_);
    bool isInitialized() const;
    void initializeChildren();

    ChoiceTag choiceTag() const;

    ::nds::core::properties::CorePropertyType getType() const;

    const ::nds::core::properties::AttributeReason& getReason() const;
    ::nds::core::properties::AttributeReason& getReason();
    void setReason(const ::nds::core::properties::AttributeReason& reason_);
    void setReason(::nds::core::properties::AttributeReason&& reason_);

    ::nds::core::properties::AttributeConfidence getConfidence() const;
    void setConfidence(::nds::core::properties::AttributeConfidence confidence_);

    const ::nds::core::properties::AttributeAge& getAge() const;
    ::nds::core::properties::AttributeAge& getAge();
    void setAge(const ::nds::core::properties::AttributeAge& age_);
    void setAge(::nds::core::properties::AttributeAge&& age_);

    ::nds::core::properties::AttributeSourceType getSource() const;
    void setSource(::nds::core::properties::AttributeSourceType source_);

    ::nds::core::icons::IconSetReference getIconSetReference() const;
    void setIconSetReference(::nds::core::icons::IconSetReference iconSetReference_);

    const ::nds::core::icons::IconSetReferenceWithHeading& getIconSetReferenceWithHeading() const;
    ::nds::core::icons::IconSetReferenceWithHeading& getIconSetReferenceWithHeading();
    void setIconSetReferenceWithHeading(const ::nds::core::icons::IconSetReferenceWithHeading& iconSetReferenceWithHeading_);
    void setIconSetReferenceWithHeading(::nds::core::icons::IconSetReferenceWithHeading&& iconSetReferenceWithHeading_);

    ::nds::core::icons::IconSetReference getGlobalIconSetReference() const;
    void setGlobalIconSetReference(::nds::core::icons::IconSetReference globalIconSetReference_);

    const ::nds::core::icons::IconSetReferenceWithHeading& getGlobalIconSetReferenceWithHeading() const;
    ::nds::core::icons::IconSetReferenceWithHeading& getGlobalIconSetReferenceWithHeading();
    void setGlobalIconSetReferenceWithHeading(const ::nds::core::icons::IconSetReferenceWithHeading& globalIconSetReferenceWithHeading_);
    void setGlobalIconSetReferenceWithHeading(::nds::core::icons::IconSetReferenceWithHeading&& globalIconSetReferenceWithHeading_);

    const ::zserio::vector<::nds::core::properties::TollPaymentMethod>& getTollPaymentMethod() const;
    ::zserio::vector<::nds::core::properties::TollPaymentMethod>& getTollPaymentMethod();
    void setTollPaymentMethod(const ::zserio::vector<::nds::core::properties::TollPaymentMethod>& tollPaymentMethod_);
    void setTollPaymentMethod(::zserio::vector<::nds::core::properties::TollPaymentMethod>&& tollPaymentMethod_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CorePropertyValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_tollPaymentMethod
    {
    public:
        using OwnerType = CorePropertyValue;

        static void create(CorePropertyValue& owner,
                ::zserio::vector<::nds::core::properties::TollPaymentMethod>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(CorePropertyValue& owner,
                ::zserio::vector<::nds::core::properties::TollPaymentMethod>& array,
                ::nds::core::properties::TollPaymentMethod::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_tollPaymentMethod = ::zserio::Array<::zserio::vector<::nds::core::properties::TollPaymentMethod>, ::zserio::ObjectArrayTraits<::nds::core::properties::TollPaymentMethod, ZserioElementFactory_tollPaymentMethod>, ::zserio::ArrayType::AUTO>;

    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::core::properties::CorePropertyType m_type_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace properties
} // namespace core
} // namespace nds

#endif // NDS_CORE_PROPERTIES_CORE_PROPERTY_VALUE_H
