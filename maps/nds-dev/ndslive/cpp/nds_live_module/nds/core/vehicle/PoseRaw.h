/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_POSE_RAW_H
#define NDS_CORE_VEHICLE_POSE_RAW_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/Elevation.h>
#include <nds/core/geometry/Latitude.h>
#include <nds/core/geometry/Longitude.h>
#include <nds/core/types/SpeedKmh.h>
#include <nds/core/vehicle/Heading.h>
#include <nds/core/vehicle/Pitch.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class PoseRaw
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLongitude()
        {
            return m_longitude_;
        }

        ::zserio::DeltaContext& getLatitude()
        {
            return m_latitude_;
        }

        ::zserio::DeltaContext& getElevation()
        {
            return m_elevation_;
        }

        ::zserio::DeltaContext& getHeading()
        {
            return m_heading_;
        }

        ::zserio::DeltaContext& getPitch()
        {
            return m_pitch_;
        }

        ::zserio::DeltaContext& getSpeed()
        {
            return m_speed_;
        }

    private:
        ::zserio::DeltaContext m_longitude_;
        ::zserio::DeltaContext m_latitude_;
        ::zserio::DeltaContext m_elevation_;
        ::zserio::DeltaContext m_heading_;
        ::zserio::DeltaContext m_pitch_;
        ::zserio::DeltaContext m_speed_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoseRaw() noexcept :
            PoseRaw(allocator_type())
    {}

    explicit PoseRaw(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_elevation = ::nds::core::geometry::Elevation,
            typename ZSERIO_T_heading = ::nds::core::vehicle::Heading,
            typename ZSERIO_T_pitch = ::nds::core::vehicle::Pitch,
            typename ZSERIO_T_speed = ::nds::core::types::SpeedKmh>
    PoseRaw(
            ::nds::core::geometry::Longitude longitude_,
            ::nds::core::geometry::Latitude latitude_,
            ZSERIO_T_elevation&& elevation_,
            ZSERIO_T_heading&& heading_,
            ZSERIO_T_pitch&& pitch_,
            ZSERIO_T_speed&& speed_,
            const allocator_type& allocator = allocator_type()) :
            PoseRaw(allocator)
    {
        m_longitude_ = longitude_;
        m_latitude_ = latitude_;
        m_elevation_ = ::std::forward<ZSERIO_T_elevation>(elevation_);
        m_heading_ = ::std::forward<ZSERIO_T_heading>(heading_);
        m_pitch_ = ::std::forward<ZSERIO_T_pitch>(pitch_);
        m_speed_ = ::std::forward<ZSERIO_T_speed>(speed_);
    }

    explicit PoseRaw(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoseRaw(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoseRaw() = default;

    PoseRaw(const PoseRaw&) = default;
    PoseRaw& operator=(const PoseRaw&) = default;

    PoseRaw(PoseRaw&&) = default;
    PoseRaw& operator=(PoseRaw&&) = default;

    PoseRaw(::zserio::PropagateAllocatorT,
            const PoseRaw& other, const allocator_type& allocator);

    ::nds::core::geometry::Longitude getLongitude() const;
    void setLongitude(::nds::core::geometry::Longitude longitude_);

    ::nds::core::geometry::Latitude getLatitude() const;
    void setLatitude(::nds::core::geometry::Latitude latitude_);

    ::nds::core::geometry::Elevation getElevation() const;
    void setElevation(::nds::core::geometry::Elevation elevation_);
    bool isElevationUsed() const;
    bool isElevationSet() const;
    void resetElevation();

    ::nds::core::vehicle::Heading getHeading() const;
    void setHeading(::nds::core::vehicle::Heading heading_);
    bool isHeadingUsed() const;
    bool isHeadingSet() const;
    void resetHeading();

    ::nds::core::vehicle::Pitch getPitch() const;
    void setPitch(::nds::core::vehicle::Pitch pitch_);
    bool isPitchUsed() const;
    bool isPitchSet() const;
    void resetPitch();

    ::nds::core::types::SpeedKmh getSpeed() const;
    void setSpeed(::nds::core::types::SpeedKmh speed_);
    bool isSpeedUsed() const;
    bool isSpeedSet() const;
    void resetSpeed();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoseRaw& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::Longitude readLongitude(::zserio::BitStreamReader& in);
    ::nds::core::geometry::Longitude readLongitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::Latitude readLatitude(::zserio::BitStreamReader& in);
    ::nds::core::geometry::Latitude readLatitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> readElevation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> readElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Pitch> readPitch(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Pitch> readPitch(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::geometry::Longitude m_longitude_;
    ::nds::core::geometry::Latitude m_latitude_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> m_elevation_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> m_heading_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Pitch> m_pitch_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> m_speed_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_POSE_RAW_H
