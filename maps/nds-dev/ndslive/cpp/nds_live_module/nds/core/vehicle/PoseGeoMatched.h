/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_POSE_GEO_MATCHED_H
#define NDS_CORE_VEHICLE_POSE_GEO_MATCHED_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Elevation.h>
#include <nds/core/geometry/Position2D.h>
#include <nds/core/types/FunctionalRoadClass.h>
#include <nds/core/types/SpeedKmh.h>
#include <nds/core/vehicle/Heading.h>
#include <nds/core/vehicle/MatchProbability.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class PoseGeoMatched
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Position2D::ZserioPackingContext& getCoordinate()
        {
            return m_coordinate_;
        }

        ::zserio::DeltaContext& getElevation()
        {
            return m_elevation_;
        }

        ::zserio::DeltaContext& getZLevel()
        {
            return m_zLevel_;
        }

        ::zserio::DeltaContext& getFrc()
        {
            return m_frc_;
        }

        ::zserio::DeltaContext& getHeading()
        {
            return m_heading_;
        }

        ::zserio::DeltaContext& getSpeed()
        {
            return m_speed_;
        }

        ::nds::core::vehicle::MatchProbability::ZserioPackingContext& getProbability()
        {
            return m_probability_;
        }

    private:
        ::nds::core::geometry::Position2D::ZserioPackingContext m_coordinate_;
        ::zserio::DeltaContext m_elevation_;
        ::zserio::DeltaContext m_zLevel_;
        ::zserio::DeltaContext m_frc_;
        ::zserio::DeltaContext m_heading_;
        ::zserio::DeltaContext m_speed_;
        ::nds::core::vehicle::MatchProbability::ZserioPackingContext m_probability_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PoseGeoMatched() noexcept :
            PoseGeoMatched(allocator_type())
    {}

    explicit PoseGeoMatched(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_coordinate = ::nds::core::geometry::Position2D,
            typename ZSERIO_T_elevation = ::nds::core::geometry::Elevation,
            typename ZSERIO_T_zLevel = int8_t,
            typename ZSERIO_T_frc = ::nds::core::types::FunctionalRoadClass,
            typename ZSERIO_T_heading = ::nds::core::vehicle::Heading,
            typename ZSERIO_T_speed = ::nds::core::types::SpeedKmh,
            typename ZSERIO_T_probability = ::nds::core::vehicle::MatchProbability,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_coordinate, PoseGeoMatched, allocator_type> = 0>
    PoseGeoMatched(
            ZSERIO_T_coordinate&& coordinate_,
            ZSERIO_T_elevation&& elevation_,
            ZSERIO_T_zLevel&& zLevel_,
            ZSERIO_T_frc&& frc_,
            ZSERIO_T_heading&& heading_,
            ZSERIO_T_speed&& speed_,
            ZSERIO_T_probability&& probability_,
            const allocator_type& allocator = allocator_type()) :
            PoseGeoMatched(allocator)
    {
        m_coordinate_ = ::std::forward<ZSERIO_T_coordinate>(coordinate_);
        m_elevation_ = ::std::forward<ZSERIO_T_elevation>(elevation_);
        m_zLevel_ = ::std::forward<ZSERIO_T_zLevel>(zLevel_);
        m_frc_ = ::std::forward<ZSERIO_T_frc>(frc_);
        m_heading_ = ::std::forward<ZSERIO_T_heading>(heading_);
        m_speed_ = ::std::forward<ZSERIO_T_speed>(speed_);
        m_probability_ = ::std::forward<ZSERIO_T_probability>(probability_);
    }

    explicit PoseGeoMatched(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PoseGeoMatched(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PoseGeoMatched() = default;

    PoseGeoMatched(const PoseGeoMatched& other);
    PoseGeoMatched& operator=(const PoseGeoMatched& other);

    PoseGeoMatched(PoseGeoMatched&& other);
    PoseGeoMatched& operator=(PoseGeoMatched&& other);

    PoseGeoMatched(::zserio::PropagateAllocatorT,
            const PoseGeoMatched& other, const allocator_type& allocator);

    void initializeChildren();

    const ::nds::core::geometry::Position2D& getCoordinate() const;
    ::nds::core::geometry::Position2D& getCoordinate();
    void setCoordinate(const ::nds::core::geometry::Position2D& coordinate_);
    void setCoordinate(::nds::core::geometry::Position2D&& coordinate_);

    ::nds::core::geometry::Elevation getElevation() const;
    void setElevation(::nds::core::geometry::Elevation elevation_);
    bool isElevationUsed() const;
    bool isElevationSet() const;
    void resetElevation();

    int8_t getZLevel() const;
    void setZLevel(int8_t zLevel_);
    bool isZLevelUsed() const;
    bool isZLevelSet() const;
    void resetZLevel();

    ::nds::core::types::FunctionalRoadClass getFrc() const;
    void setFrc(::nds::core::types::FunctionalRoadClass frc_);
    bool isFrcUsed() const;
    bool isFrcSet() const;
    void resetFrc();

    ::nds::core::vehicle::Heading getHeading() const;
    void setHeading(::nds::core::vehicle::Heading heading_);
    bool isHeadingUsed() const;
    bool isHeadingSet() const;
    void resetHeading();

    ::nds::core::types::SpeedKmh getSpeed() const;
    void setSpeed(::nds::core::types::SpeedKmh speed_);
    bool isSpeedUsed() const;
    bool isSpeedSet() const;
    void resetSpeed();

    const ::nds::core::vehicle::MatchProbability& getProbability() const;
    ::nds::core::vehicle::MatchProbability& getProbability();
    void setProbability(const ::nds::core::vehicle::MatchProbability& probability_);
    void setProbability(::nds::core::vehicle::MatchProbability&& probability_);
    bool isProbabilityUsed() const;
    bool isProbabilitySet() const;
    void resetProbability();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PoseGeoMatched& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::Position2D readCoordinate(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Position2D readCoordinate(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> readElevation(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> readElevation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int8_t> readZLevel(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<int8_t> readZLevel(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::FunctionalRoadClass> readFrc(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::FunctionalRoadClass> readFrc(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> readHeading(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> readSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> readProbability(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> readProbability(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ::nds::core::geometry::Position2D m_coordinate_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::Elevation> m_elevation_;
    ::zserio::InplaceOptionalHolder<int8_t> m_zLevel_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::FunctionalRoadClass> m_frc_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::Heading> m_heading_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::SpeedKmh> m_speed_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::MatchProbability> m_probability_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_POSE_GEO_MATCHED_H
