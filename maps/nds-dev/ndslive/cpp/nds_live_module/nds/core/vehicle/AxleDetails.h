/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_AXLE_DETAILS_H
#define NDS_CORE_VEHICLE_AXLE_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/vehicle/AxleWeight.h>
#include <nds/core/vehicle/NumAxles.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class AxleDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumAxles()
        {
            return m_numAxles_;
        }

        ::zserio::DeltaContext& getMaxTandemAxleWeight()
        {
            return m_maxTandemAxleWeight_;
        }

        ::zserio::DeltaContext& getMaxTridemAxleWeight()
        {
            return m_maxTridemAxleWeight_;
        }

        ::zserio::DeltaContext& getMaxSteeringAxleWeight()
        {
            return m_maxSteeringAxleWeight_;
        }

    private:
        ::zserio::DeltaContext m_numAxles_;
        ::zserio::DeltaContext m_maxTandemAxleWeight_;
        ::zserio::DeltaContext m_maxTridemAxleWeight_;
        ::zserio::DeltaContext m_maxSteeringAxleWeight_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    AxleDetails() noexcept :
            AxleDetails(allocator_type())
    {}

    explicit AxleDetails(const allocator_type& allocator) noexcept;

    AxleDetails(
            ::nds::core::vehicle::NumAxles numAxles_,
            ::nds::core::vehicle::AxleWeight maxTandemAxleWeight_,
            ::nds::core::vehicle::AxleWeight maxTridemAxleWeight_,
            ::nds::core::vehicle::AxleWeight maxSteeringAxleWeight_,
            const allocator_type& allocator = allocator_type()) :
            AxleDetails(allocator)
    {
        m_numAxles_ = numAxles_;
        m_maxTandemAxleWeight_ = maxTandemAxleWeight_;
        m_maxTridemAxleWeight_ = maxTridemAxleWeight_;
        m_maxSteeringAxleWeight_ = maxSteeringAxleWeight_;
    }

    explicit AxleDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit AxleDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~AxleDetails() = default;

    AxleDetails(const AxleDetails&) = default;
    AxleDetails& operator=(const AxleDetails&) = default;

    AxleDetails(AxleDetails&&) = default;
    AxleDetails& operator=(AxleDetails&&) = default;

    AxleDetails(::zserio::PropagateAllocatorT,
            const AxleDetails& other, const allocator_type& allocator);

    ::nds::core::vehicle::NumAxles getNumAxles() const;
    void setNumAxles(::nds::core::vehicle::NumAxles numAxles_);

    ::nds::core::vehicle::AxleWeight getMaxTandemAxleWeight() const;
    void setMaxTandemAxleWeight(::nds::core::vehicle::AxleWeight maxTandemAxleWeight_);

    ::nds::core::vehicle::AxleWeight getMaxTridemAxleWeight() const;
    void setMaxTridemAxleWeight(::nds::core::vehicle::AxleWeight maxTridemAxleWeight_);

    ::nds::core::vehicle::AxleWeight getMaxSteeringAxleWeight() const;
    void setMaxSteeringAxleWeight(::nds::core::vehicle::AxleWeight maxSteeringAxleWeight_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const AxleDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::vehicle::NumAxles readNumAxles(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::NumAxles readNumAxles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxTandemAxleWeight(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxTandemAxleWeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxTridemAxleWeight(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxTridemAxleWeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxSteeringAxleWeight(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleWeight readMaxSteeringAxleWeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::vehicle::NumAxles m_numAxles_;
    ::nds::core::vehicle::AxleWeight m_maxTandemAxleWeight_;
    ::nds::core::vehicle::AxleWeight m_maxTridemAxleWeight_;
    ::nds::core::vehicle::AxleWeight m_maxSteeringAxleWeight_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_AXLE_DETAILS_H
