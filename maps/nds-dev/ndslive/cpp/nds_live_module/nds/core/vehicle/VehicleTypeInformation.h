/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_VEHICLE_TYPE_INFORMATION_H
#define NDS_CORE_VEHICLE_VEHICLE_TYPE_INFORMATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/vehicle/BigVehicleTypes.h>
#include <nds/core/vehicle/EmergencyMilitaryDetailTypes.h>
#include <nds/core/vehicle/FrequentlyUsedVehicleTypes.h>
#include <nds/core/vehicle/PublicServiceVehicleTypes.h>
#include <nds/core/vehicle/SlowRoadUserTypes.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class VehicleTypeInformation
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getFrequentlyUsedVehicles()
        {
            return m_frequentlyUsedVehicles_;
        }

        ::zserio::DeltaContext& getBigVehicles()
        {
            return m_bigVehicles_;
        }

        ::zserio::DeltaContext& getPublicServiceVehicles()
        {
            return m_publicServiceVehicles_;
        }

        ::zserio::DeltaContext& getSlowRoadUsers()
        {
            return m_slowRoadUsers_;
        }

        ::zserio::DeltaContext& getEmergencyMilitaryDetails()
        {
            return m_emergencyMilitaryDetails_;
        }

    private:
        ::zserio::DeltaContext m_frequentlyUsedVehicles_;
        ::zserio::DeltaContext m_bigVehicles_;
        ::zserio::DeltaContext m_publicServiceVehicles_;
        ::zserio::DeltaContext m_slowRoadUsers_;
        ::zserio::DeltaContext m_emergencyMilitaryDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    VehicleTypeInformation() noexcept :
            VehicleTypeInformation(allocator_type())
    {}

    explicit VehicleTypeInformation(const allocator_type& allocator) noexcept;

    VehicleTypeInformation(
            ::nds::core::vehicle::FrequentlyUsedVehicleTypes frequentlyUsedVehicles_,
            ::nds::core::vehicle::BigVehicleTypes bigVehicles_,
            ::nds::core::vehicle::PublicServiceVehicleTypes publicServiceVehicles_,
            ::nds::core::vehicle::SlowRoadUserTypes slowRoadUsers_,
            ::nds::core::vehicle::EmergencyMilitaryDetailTypes emergencyMilitaryDetails_,
            const allocator_type& allocator = allocator_type()) :
            VehicleTypeInformation(allocator)
    {
        m_frequentlyUsedVehicles_ = frequentlyUsedVehicles_;
        m_bigVehicles_ = bigVehicles_;
        m_publicServiceVehicles_ = publicServiceVehicles_;
        m_slowRoadUsers_ = slowRoadUsers_;
        m_emergencyMilitaryDetails_ = emergencyMilitaryDetails_;
    }

    explicit VehicleTypeInformation(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit VehicleTypeInformation(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleTypeInformation() = default;

    VehicleTypeInformation(const VehicleTypeInformation&) = default;
    VehicleTypeInformation& operator=(const VehicleTypeInformation&) = default;

    VehicleTypeInformation(VehicleTypeInformation&&) = default;
    VehicleTypeInformation& operator=(VehicleTypeInformation&&) = default;

    VehicleTypeInformation(::zserio::PropagateAllocatorT,
            const VehicleTypeInformation& other, const allocator_type& allocator);

    ::nds::core::vehicle::FrequentlyUsedVehicleTypes getFrequentlyUsedVehicles() const;
    void setFrequentlyUsedVehicles(::nds::core::vehicle::FrequentlyUsedVehicleTypes frequentlyUsedVehicles_);

    ::nds::core::vehicle::BigVehicleTypes getBigVehicles() const;
    void setBigVehicles(::nds::core::vehicle::BigVehicleTypes bigVehicles_);

    ::nds::core::vehicle::PublicServiceVehicleTypes getPublicServiceVehicles() const;
    void setPublicServiceVehicles(::nds::core::vehicle::PublicServiceVehicleTypes publicServiceVehicles_);

    ::nds::core::vehicle::SlowRoadUserTypes getSlowRoadUsers() const;
    void setSlowRoadUsers(::nds::core::vehicle::SlowRoadUserTypes slowRoadUsers_);

    ::nds::core::vehicle::EmergencyMilitaryDetailTypes getEmergencyMilitaryDetails() const;
    void setEmergencyMilitaryDetails(::nds::core::vehicle::EmergencyMilitaryDetailTypes emergencyMilitaryDetails_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const VehicleTypeInformation& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::vehicle::FrequentlyUsedVehicleTypes readFrequentlyUsedVehicles(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::FrequentlyUsedVehicleTypes readFrequentlyUsedVehicles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::BigVehicleTypes readBigVehicles(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::BigVehicleTypes readBigVehicles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::PublicServiceVehicleTypes readPublicServiceVehicles(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::PublicServiceVehicleTypes readPublicServiceVehicles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::SlowRoadUserTypes readSlowRoadUsers(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::SlowRoadUserTypes readSlowRoadUsers(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::EmergencyMilitaryDetailTypes readEmergencyMilitaryDetails(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::EmergencyMilitaryDetailTypes readEmergencyMilitaryDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::vehicle::FrequentlyUsedVehicleTypes m_frequentlyUsedVehicles_;
    ::nds::core::vehicle::BigVehicleTypes m_bigVehicles_;
    ::nds::core::vehicle::PublicServiceVehicleTypes m_publicServiceVehicles_;
    ::nds::core::vehicle::SlowRoadUserTypes m_slowRoadUsers_;
    ::nds::core::vehicle::EmergencyMilitaryDetailTypes m_emergencyMilitaryDetails_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_VEHICLE_TYPE_INFORMATION_H
