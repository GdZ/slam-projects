/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_CURVE_H
#define NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_CURVE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/SpeedKmh.h>
#include <nds/core/vehicle/LitersPer100km.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class CombustionConsumptionCurve
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumEntries()
        {
            return m_numEntries_;
        }

    private:
        ::zserio::DeltaContext m_numEntries_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    CombustionConsumptionCurve() noexcept :
            CombustionConsumptionCurve(allocator_type())
    {}

    explicit CombustionConsumptionCurve(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_speed = ::zserio::vector<::nds::core::types::SpeedKmh>,
            typename ZSERIO_T_consumption = ::zserio::vector<::nds::core::vehicle::LitersPer100km>>
    CombustionConsumptionCurve(
            uint8_t numEntries_,
            ZSERIO_T_speed&& speed_,
            ZSERIO_T_consumption&& consumption_,
            const allocator_type& allocator = allocator_type()) :
            CombustionConsumptionCurve(allocator)
    {
        m_numEntries_ = numEntries_;
        m_speed_ = ZserioArrayType_speed(::std::forward<ZSERIO_T_speed>(speed_));
        m_consumption_ = ZserioArrayType_consumption(::std::forward<ZSERIO_T_consumption>(consumption_));
    }

    explicit CombustionConsumptionCurve(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit CombustionConsumptionCurve(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~CombustionConsumptionCurve() = default;

    CombustionConsumptionCurve(const CombustionConsumptionCurve&) = default;
    CombustionConsumptionCurve& operator=(const CombustionConsumptionCurve&) = default;

    CombustionConsumptionCurve(CombustionConsumptionCurve&&) = default;
    CombustionConsumptionCurve& operator=(CombustionConsumptionCurve&&) = default;

    CombustionConsumptionCurve(::zserio::PropagateAllocatorT,
            const CombustionConsumptionCurve& other, const allocator_type& allocator);

    uint8_t getNumEntries() const;
    void setNumEntries(uint8_t numEntries_);

    const ::zserio::vector<::nds::core::types::SpeedKmh>& getSpeed() const;
    ::zserio::vector<::nds::core::types::SpeedKmh>& getSpeed();
    void setSpeed(const ::zserio::vector<::nds::core::types::SpeedKmh>& speed_);
    void setSpeed(::zserio::vector<::nds::core::types::SpeedKmh>&& speed_);

    const ::zserio::vector<::nds::core::vehicle::LitersPer100km>& getConsumption() const;
    ::zserio::vector<::nds::core::vehicle::LitersPer100km>& getConsumption();
    void setConsumption(const ::zserio::vector<::nds::core::vehicle::LitersPer100km>& consumption_);
    void setConsumption(::zserio::vector<::nds::core::vehicle::LitersPer100km>&& consumption_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CombustionConsumptionCurve& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_speed = ::zserio::Array<::zserio::vector<::nds::core::types::SpeedKmh>, ::zserio::StdIntArrayTraits<::nds::core::types::SpeedKmh>, ::zserio::ArrayType::NORMAL>;
    using ZserioArrayType_consumption = ::zserio::Array<::zserio::vector<::nds::core::vehicle::LitersPer100km>, ::zserio::Float16ArrayTraits, ::zserio::ArrayType::NORMAL>;

    uint8_t readNumEntries(::zserio::BitStreamReader& in);
    uint8_t readNumEntries(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_speed readSpeed(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_speed readSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_consumption readConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    uint8_t m_numEntries_;
    ZserioArrayType_speed m_speed_;
    ZserioArrayType_consumption m_consumption_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_CURVE_H
