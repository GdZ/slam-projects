/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_VEHICLE_DETAILS_H
#define NDS_CORE_VEHICLE_VEHICLE_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

#include <nds/core/types/IsoCountryCode.h>
#include <nds/core/types/SpeedKmh.h>
#include <nds/core/types/Year.h>
#include <nds/core/vehicle/AdrTunnelRestriction.h>
#include <nds/core/vehicle/CombustionConsumption.h>
#include <nds/core/vehicle/ElectricConsumption.h>
#include <nds/core/vehicle/VehicleClassSpecification.h>
#include <nds/core/vehicle/VehicleTypeInformation.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class VehicleDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::vehicle::VehicleTypeInformation::ZserioPackingContext& getVehicleType()
        {
            return m_vehicleType_;
        }

        ::nds::core::vehicle::VehicleClassSpecification::ZserioPackingContext& getVehicleClassSpecification()
        {
            return m_vehicleClassSpecification_;
        }

        ::zserio::DeltaContext& getTunnelRestriction()
        {
            return m_tunnelRestriction_;
        }

        ::zserio::DeltaContext& getMaxSpeed()
        {
            return m_maxSpeed_;
        }

        ::nds::core::vehicle::CombustionConsumption::ZserioPackingContext& getCombustionConsumption()
        {
            return m_combustionConsumption_;
        }

        ::nds::core::vehicle::ElectricConsumption::ZserioPackingContext& getElectricConsumption()
        {
            return m_electricConsumption_;
        }

        ::zserio::DeltaContext& getEngineManufacturingYear()
        {
            return m_engineManufacturingYear_;
        }

        ::zserio::DeltaContext& getCurrentOccupancy()
        {
            return m_currentOccupancy_;
        }

    private:
        ::nds::core::vehicle::VehicleTypeInformation::ZserioPackingContext m_vehicleType_;
        ::nds::core::vehicle::VehicleClassSpecification::ZserioPackingContext m_vehicleClassSpecification_;
        ::zserio::DeltaContext m_tunnelRestriction_;
        ::zserio::DeltaContext m_maxSpeed_;
        ::nds::core::vehicle::CombustionConsumption::ZserioPackingContext m_combustionConsumption_;
        ::nds::core::vehicle::ElectricConsumption::ZserioPackingContext m_electricConsumption_;
        ::zserio::DeltaContext m_engineManufacturingYear_;
        ::zserio::DeltaContext m_currentOccupancy_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    VehicleDetails() noexcept :
            VehicleDetails(allocator_type())
    {}

    explicit VehicleDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_vehicleType = ::nds::core::vehicle::VehicleTypeInformation,
            typename ZSERIO_T_vehicleClassSpecification = ::nds::core::vehicle::VehicleClassSpecification,
            typename ZSERIO_T_combustionConsumption = ::nds::core::vehicle::CombustionConsumption,
            typename ZSERIO_T_electricConsumption = ::nds::core::vehicle::ElectricConsumption,
            typename ZSERIO_T_engineManufacturingYear = ::nds::core::types::Year,
            typename ZSERIO_T_licensePlate = ::zserio::string<>,
            typename ZSERIO_T_registrationCountry = ::nds::core::types::IsoCountryCode,
            typename ZSERIO_T_currentOccupancy = uint16_t,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_vehicleType, VehicleDetails, allocator_type> = 0>
    VehicleDetails(
            ZSERIO_T_vehicleType&& vehicleType_,
            ZSERIO_T_vehicleClassSpecification&& vehicleClassSpecification_,
            ::nds::core::vehicle::AdrTunnelRestriction tunnelRestriction_,
            ::nds::core::types::SpeedKmh maxSpeed_,
            ZSERIO_T_combustionConsumption&& combustionConsumption_,
            ZSERIO_T_electricConsumption&& electricConsumption_,
            ZSERIO_T_engineManufacturingYear&& engineManufacturingYear_,
            ZSERIO_T_licensePlate&& licensePlate_,
            ZSERIO_T_registrationCountry&& registrationCountry_,
            ZSERIO_T_currentOccupancy&& currentOccupancy_,
            const allocator_type& allocator = allocator_type()) :
            VehicleDetails(allocator)
    {
        m_vehicleType_ = ::std::forward<ZSERIO_T_vehicleType>(vehicleType_);
        m_vehicleClassSpecification_ = ::std::forward<ZSERIO_T_vehicleClassSpecification>(vehicleClassSpecification_);
        m_tunnelRestriction_ = tunnelRestriction_;
        m_maxSpeed_ = maxSpeed_;
        m_combustionConsumption_ = ::std::forward<ZSERIO_T_combustionConsumption>(combustionConsumption_);
        m_electricConsumption_ = ::std::forward<ZSERIO_T_electricConsumption>(electricConsumption_);
        m_engineManufacturingYear_ = ::std::forward<ZSERIO_T_engineManufacturingYear>(engineManufacturingYear_);
        m_licensePlate_ = ::std::forward<ZSERIO_T_licensePlate>(licensePlate_);
        m_registrationCountry_ = ::std::forward<ZSERIO_T_registrationCountry>(registrationCountry_);
        m_currentOccupancy_ = ::std::forward<ZSERIO_T_currentOccupancy>(currentOccupancy_);
    }

    explicit VehicleDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit VehicleDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleDetails() = default;

    VehicleDetails(const VehicleDetails&) = default;
    VehicleDetails& operator=(const VehicleDetails&) = default;

    VehicleDetails(VehicleDetails&&) = default;
    VehicleDetails& operator=(VehicleDetails&&) = default;

    VehicleDetails(::zserio::PropagateAllocatorT,
            const VehicleDetails& other, const allocator_type& allocator);

    const ::nds::core::vehicle::VehicleTypeInformation& getVehicleType() const;
    ::nds::core::vehicle::VehicleTypeInformation& getVehicleType();
    void setVehicleType(const ::nds::core::vehicle::VehicleTypeInformation& vehicleType_);
    void setVehicleType(::nds::core::vehicle::VehicleTypeInformation&& vehicleType_);

    const ::nds::core::vehicle::VehicleClassSpecification& getVehicleClassSpecification() const;
    ::nds::core::vehicle::VehicleClassSpecification& getVehicleClassSpecification();
    void setVehicleClassSpecification(const ::nds::core::vehicle::VehicleClassSpecification& vehicleClassSpecification_);
    void setVehicleClassSpecification(::nds::core::vehicle::VehicleClassSpecification&& vehicleClassSpecification_);

    ::nds::core::vehicle::AdrTunnelRestriction getTunnelRestriction() const;
    void setTunnelRestriction(::nds::core::vehicle::AdrTunnelRestriction tunnelRestriction_);

    ::nds::core::types::SpeedKmh getMaxSpeed() const;
    void setMaxSpeed(::nds::core::types::SpeedKmh maxSpeed_);

    const ::nds::core::vehicle::CombustionConsumption& getCombustionConsumption() const;
    ::nds::core::vehicle::CombustionConsumption& getCombustionConsumption();
    void setCombustionConsumption(const ::nds::core::vehicle::CombustionConsumption& combustionConsumption_);
    void setCombustionConsumption(::nds::core::vehicle::CombustionConsumption&& combustionConsumption_);
    bool isCombustionConsumptionUsed() const;
    bool isCombustionConsumptionSet() const;
    void resetCombustionConsumption();

    const ::nds::core::vehicle::ElectricConsumption& getElectricConsumption() const;
    ::nds::core::vehicle::ElectricConsumption& getElectricConsumption();
    void setElectricConsumption(const ::nds::core::vehicle::ElectricConsumption& electricConsumption_);
    void setElectricConsumption(::nds::core::vehicle::ElectricConsumption&& electricConsumption_);
    bool isElectricConsumptionUsed() const;
    bool isElectricConsumptionSet() const;
    void resetElectricConsumption();

    ::nds::core::types::Year getEngineManufacturingYear() const;
    void setEngineManufacturingYear(::nds::core::types::Year engineManufacturingYear_);
    bool isEngineManufacturingYearUsed() const;
    bool isEngineManufacturingYearSet() const;
    void resetEngineManufacturingYear();

    const ::zserio::string<>& getLicensePlate() const;
    ::zserio::string<>& getLicensePlate();
    void setLicensePlate(const ::zserio::string<>& licensePlate_);
    void setLicensePlate(::zserio::string<>&& licensePlate_);
    bool isLicensePlateUsed() const;
    bool isLicensePlateSet() const;
    void resetLicensePlate();

    const ::nds::core::types::IsoCountryCode& getRegistrationCountry() const;
    ::nds::core::types::IsoCountryCode& getRegistrationCountry();
    void setRegistrationCountry(const ::nds::core::types::IsoCountryCode& registrationCountry_);
    void setRegistrationCountry(::nds::core::types::IsoCountryCode&& registrationCountry_);
    bool isRegistrationCountryUsed() const;
    bool isRegistrationCountrySet() const;
    void resetRegistrationCountry();

    uint16_t getCurrentOccupancy() const;
    void setCurrentOccupancy(uint16_t currentOccupancy_);
    bool isCurrentOccupancyUsed() const;
    bool isCurrentOccupancySet() const;
    void resetCurrentOccupancy();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const VehicleDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::vehicle::VehicleTypeInformation readVehicleType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::VehicleTypeInformation readVehicleType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::VehicleClassSpecification readVehicleClassSpecification(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::VehicleClassSpecification readVehicleClassSpecification(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::AdrTunnelRestriction readTunnelRestriction(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AdrTunnelRestriction readTunnelRestriction(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::SpeedKmh readMaxSpeed(::zserio::BitStreamReader& in);
    ::nds::core::types::SpeedKmh readMaxSpeed(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumption> readCombustionConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumption> readCombustionConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ElectricConsumption> readElectricConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ElectricConsumption> readElectricConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::Year> readEngineManufacturingYear(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::Year> readEngineManufacturingYear(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readLicensePlate(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::types::IsoCountryCode> readRegistrationCountry(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<uint16_t> readCurrentOccupancy(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<uint16_t> readCurrentOccupancy(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::vehicle::VehicleTypeInformation m_vehicleType_;
    ::nds::core::vehicle::VehicleClassSpecification m_vehicleClassSpecification_;
    ::nds::core::vehicle::AdrTunnelRestriction m_tunnelRestriction_;
    ::nds::core::types::SpeedKmh m_maxSpeed_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumption> m_combustionConsumption_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ElectricConsumption> m_electricConsumption_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::Year> m_engineManufacturingYear_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_licensePlate_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::IsoCountryCode> m_registrationCountry_;
    ::zserio::InplaceOptionalHolder<uint16_t> m_currentOccupancy_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_VEHICLE_DETAILS_H
