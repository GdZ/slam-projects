/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_VEHICLE_CLASS_SPECIFICATION_H
#define NDS_CORE_VEHICLE_VEHICLE_CLASS_SPECIFICATION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/vehicle/AxleDetails.h>
#include <nds/core/vehicle/DriverAssistFunctions.h>
#include <nds/core/vehicle/Engine.h>
#include <nds/core/vehicle/Equipment.h>
#include <nds/core/vehicle/LoadType.h>
#include <nds/core/vehicle/VehicleDimensions.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class VehicleClassSpecification
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::vehicle::Engine::ZserioPackingContext& getEngine()
        {
            return m_engine_;
        }

        ::zserio::DeltaContext& getEquipment()
        {
            return m_equipment_;
        }

        ::nds::core::vehicle::VehicleDimensions::ZserioPackingContext& getMaxDimensions()
        {
            return m_maxDimensions_;
        }

        ::nds::core::vehicle::VehicleDimensions::ZserioPackingContext& getMinDimensions()
        {
            return m_minDimensions_;
        }

        ::zserio::DeltaContext& getLoad()
        {
            return m_load_;
        }

        ::nds::core::vehicle::AxleDetails::ZserioPackingContext& getAxles()
        {
            return m_axles_;
        }

        ::zserio::DeltaContext& getAssistFunctions()
        {
            return m_assistFunctions_;
        }

    private:
        ::nds::core::vehicle::Engine::ZserioPackingContext m_engine_;
        ::zserio::DeltaContext m_equipment_;
        ::nds::core::vehicle::VehicleDimensions::ZserioPackingContext m_maxDimensions_;
        ::nds::core::vehicle::VehicleDimensions::ZserioPackingContext m_minDimensions_;
        ::zserio::DeltaContext m_load_;
        ::nds::core::vehicle::AxleDetails::ZserioPackingContext m_axles_;
        ::zserio::DeltaContext m_assistFunctions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    VehicleClassSpecification() noexcept :
            VehicleClassSpecification(allocator_type())
    {}

    explicit VehicleClassSpecification(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_engine = ::nds::core::vehicle::Engine,
            typename ZSERIO_T_maxDimensions = ::nds::core::vehicle::VehicleDimensions,
            typename ZSERIO_T_minDimensions = ::nds::core::vehicle::VehicleDimensions,
            typename ZSERIO_T_axles = ::nds::core::vehicle::AxleDetails,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_engine, VehicleClassSpecification, allocator_type> = 0>
    VehicleClassSpecification(
            ZSERIO_T_engine&& engine_,
            ::nds::core::vehicle::Equipment equipment_,
            ZSERIO_T_maxDimensions&& maxDimensions_,
            ZSERIO_T_minDimensions&& minDimensions_,
            ::nds::core::vehicle::LoadType load_,
            ZSERIO_T_axles&& axles_,
            ::nds::core::vehicle::DriverAssistFunctions assistFunctions_,
            const allocator_type& allocator = allocator_type()) :
            VehicleClassSpecification(allocator)
    {
        m_engine_ = ::std::forward<ZSERIO_T_engine>(engine_);
        m_equipment_ = equipment_;
        m_maxDimensions_ = ::std::forward<ZSERIO_T_maxDimensions>(maxDimensions_);
        m_minDimensions_ = ::std::forward<ZSERIO_T_minDimensions>(minDimensions_);
        m_load_ = load_;
        m_axles_ = ::std::forward<ZSERIO_T_axles>(axles_);
        m_assistFunctions_ = assistFunctions_;
    }

    explicit VehicleClassSpecification(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit VehicleClassSpecification(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~VehicleClassSpecification() = default;

    VehicleClassSpecification(const VehicleClassSpecification&) = default;
    VehicleClassSpecification& operator=(const VehicleClassSpecification&) = default;

    VehicleClassSpecification(VehicleClassSpecification&&) = default;
    VehicleClassSpecification& operator=(VehicleClassSpecification&&) = default;

    VehicleClassSpecification(::zserio::PropagateAllocatorT,
            const VehicleClassSpecification& other, const allocator_type& allocator);

    const ::nds::core::vehicle::Engine& getEngine() const;
    ::nds::core::vehicle::Engine& getEngine();
    void setEngine(const ::nds::core::vehicle::Engine& engine_);
    void setEngine(::nds::core::vehicle::Engine&& engine_);

    ::nds::core::vehicle::Equipment getEquipment() const;
    void setEquipment(::nds::core::vehicle::Equipment equipment_);

    const ::nds::core::vehicle::VehicleDimensions& getMaxDimensions() const;
    ::nds::core::vehicle::VehicleDimensions& getMaxDimensions();
    void setMaxDimensions(const ::nds::core::vehicle::VehicleDimensions& maxDimensions_);
    void setMaxDimensions(::nds::core::vehicle::VehicleDimensions&& maxDimensions_);

    const ::nds::core::vehicle::VehicleDimensions& getMinDimensions() const;
    ::nds::core::vehicle::VehicleDimensions& getMinDimensions();
    void setMinDimensions(const ::nds::core::vehicle::VehicleDimensions& minDimensions_);
    void setMinDimensions(::nds::core::vehicle::VehicleDimensions&& minDimensions_);

    ::nds::core::vehicle::LoadType getLoad() const;
    void setLoad(::nds::core::vehicle::LoadType load_);

    const ::nds::core::vehicle::AxleDetails& getAxles() const;
    ::nds::core::vehicle::AxleDetails& getAxles();
    void setAxles(const ::nds::core::vehicle::AxleDetails& axles_);
    void setAxles(::nds::core::vehicle::AxleDetails&& axles_);

    ::nds::core::vehicle::DriverAssistFunctions getAssistFunctions() const;
    void setAssistFunctions(::nds::core::vehicle::DriverAssistFunctions assistFunctions_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const VehicleClassSpecification& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::vehicle::Engine readEngine(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::Engine readEngine(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::Equipment readEquipment(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::Equipment readEquipment(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::VehicleDimensions readMaxDimensions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::VehicleDimensions readMaxDimensions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::VehicleDimensions readMinDimensions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::VehicleDimensions readMinDimensions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::LoadType readLoad(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::LoadType readLoad(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::AxleDetails readAxles(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::AxleDetails readAxles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::vehicle::DriverAssistFunctions readAssistFunctions(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::DriverAssistFunctions readAssistFunctions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::vehicle::Engine m_engine_;
    ::nds::core::vehicle::Equipment m_equipment_;
    ::nds::core::vehicle::VehicleDimensions m_maxDimensions_;
    ::nds::core::vehicle::VehicleDimensions m_minDimensions_;
    ::nds::core::vehicle::LoadType m_load_;
    ::nds::core::vehicle::AxleDetails m_axles_;
    ::nds::core::vehicle::DriverAssistFunctions m_assistFunctions_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_VEHICLE_CLASS_SPECIFICATION_H
