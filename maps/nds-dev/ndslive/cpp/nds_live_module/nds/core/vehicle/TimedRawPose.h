/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_TIMED_RAW_POSE_H
#define NDS_CORE_VEHICLE_TIMED_RAW_POSE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/Milliseconds.h>
#include <nds/core/vehicle/PoseRaw.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class TimedRawPose
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAge()
        {
            return m_age_;
        }

        ::nds::core::vehicle::PoseRaw::ZserioPackingContext& getPose()
        {
            return m_pose_;
        }

    private:
        ::zserio::DeltaContext m_age_;
        ::nds::core::vehicle::PoseRaw::ZserioPackingContext m_pose_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimedRawPose() noexcept :
            TimedRawPose(allocator_type())
    {}

    explicit TimedRawPose(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_pose = ::nds::core::vehicle::PoseRaw>
    TimedRawPose(
            ::nds::core::types::Milliseconds age_,
            ZSERIO_T_pose&& pose_,
            const allocator_type& allocator = allocator_type()) :
            TimedRawPose(allocator)
    {
        m_age_ = age_;
        m_pose_ = ::std::forward<ZSERIO_T_pose>(pose_);
    }

    explicit TimedRawPose(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimedRawPose(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimedRawPose() = default;

    TimedRawPose(const TimedRawPose&) = default;
    TimedRawPose& operator=(const TimedRawPose&) = default;

    TimedRawPose(TimedRawPose&&) = default;
    TimedRawPose& operator=(TimedRawPose&&) = default;

    TimedRawPose(::zserio::PropagateAllocatorT,
            const TimedRawPose& other, const allocator_type& allocator);

    ::nds::core::types::Milliseconds getAge() const;
    void setAge(::nds::core::types::Milliseconds age_);

    const ::nds::core::vehicle::PoseRaw& getPose() const;
    ::nds::core::vehicle::PoseRaw& getPose();
    void setPose(const ::nds::core::vehicle::PoseRaw& pose_);
    void setPose(::nds::core::vehicle::PoseRaw&& pose_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimedRawPose& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::Milliseconds readAge(::zserio::BitStreamReader& in);
    ::nds::core::types::Milliseconds readAge(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::vehicle::PoseRaw readPose(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::PoseRaw readPose(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::Milliseconds m_age_;
    ::nds::core::vehicle::PoseRaw m_pose_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_TIMED_RAW_POSE_H
