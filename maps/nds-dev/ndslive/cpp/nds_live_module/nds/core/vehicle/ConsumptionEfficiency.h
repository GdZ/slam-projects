/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_CONSUMPTION_EFFICIENCY_H
#define NDS_CORE_VEHICLE_CONSUMPTION_EFFICIENCY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/Weight10Kilogram.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class ConsumptionEfficiency
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getGrossWeight()
        {
            return m_grossWeight_;
        }

    private:
        ::zserio::DeltaContext m_grossWeight_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    ConsumptionEfficiency() noexcept :
            ConsumptionEfficiency(allocator_type())
    {}

    explicit ConsumptionEfficiency(const allocator_type& allocator) noexcept;

    ConsumptionEfficiency(
            ::nds::core::types::Weight10Kilogram grossWeight_,
            float accelerationEfficiency_,
            float decelerationEfficiency_,
            float uphillEfficiency_,
            float downhillEfficiency_,
            const allocator_type& allocator = allocator_type()) :
            ConsumptionEfficiency(allocator)
    {
        m_grossWeight_ = grossWeight_;
        m_accelerationEfficiency_ = accelerationEfficiency_;
        m_decelerationEfficiency_ = decelerationEfficiency_;
        m_uphillEfficiency_ = uphillEfficiency_;
        m_downhillEfficiency_ = downhillEfficiency_;
    }

    explicit ConsumptionEfficiency(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit ConsumptionEfficiency(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ConsumptionEfficiency() = default;

    ConsumptionEfficiency(const ConsumptionEfficiency&) = default;
    ConsumptionEfficiency& operator=(const ConsumptionEfficiency&) = default;

    ConsumptionEfficiency(ConsumptionEfficiency&&) = default;
    ConsumptionEfficiency& operator=(ConsumptionEfficiency&&) = default;

    ConsumptionEfficiency(::zserio::PropagateAllocatorT,
            const ConsumptionEfficiency& other, const allocator_type& allocator);

    ::nds::core::types::Weight10Kilogram getGrossWeight() const;
    void setGrossWeight(::nds::core::types::Weight10Kilogram grossWeight_);

    float getAccelerationEfficiency() const;
    void setAccelerationEfficiency(float accelerationEfficiency_);

    float getDecelerationEfficiency() const;
    void setDecelerationEfficiency(float decelerationEfficiency_);

    float getUphillEfficiency() const;
    void setUphillEfficiency(float uphillEfficiency_);

    float getDownhillEfficiency() const;
    void setDownhillEfficiency(float downhillEfficiency_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ConsumptionEfficiency& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::Weight10Kilogram readGrossWeight(::zserio::BitStreamReader& in);
    ::nds::core::types::Weight10Kilogram readGrossWeight(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    float readAccelerationEfficiency(::zserio::BitStreamReader& in);
    float readDecelerationEfficiency(::zserio::BitStreamReader& in);
    float readUphillEfficiency(::zserio::BitStreamReader& in);
    float readDownhillEfficiency(::zserio::BitStreamReader& in);

    ::nds::core::types::Weight10Kilogram m_grossWeight_;
    float m_accelerationEfficiency_;
    float m_decelerationEfficiency_;
    float m_uphillEfficiency_;
    float m_downhillEfficiency_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_CONSUMPTION_EFFICIENCY_H
