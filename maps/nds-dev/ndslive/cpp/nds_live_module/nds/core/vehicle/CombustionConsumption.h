/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_H
#define NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/vehicle/CombustionConsumptionCurve.h>
#include <nds/core/vehicle/ConsumptionEfficiency.h>
#include <nds/core/vehicle/FuelLiters.h>
#include <nds/core/vehicle/LitersPerHour.h>

namespace nds
{
namespace core
{
namespace vehicle
{

class CombustionConsumption
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::vehicle::CombustionConsumptionCurve::ZserioPackingContext& getNormalConsumption()
        {
            return m_normalConsumption_;
        }

        ::nds::core::vehicle::CombustionConsumptionCurve::ZserioPackingContext& getTrafficConsumption()
        {
            return m_trafficConsumption_;
        }

        ::nds::core::vehicle::ConsumptionEfficiency::ZserioPackingContext& getEfficiency()
        {
            return m_efficiency_;
        }

    private:
        ::nds::core::vehicle::CombustionConsumptionCurve::ZserioPackingContext m_normalConsumption_;
        ::nds::core::vehicle::CombustionConsumptionCurve::ZserioPackingContext m_trafficConsumption_;
        ::nds::core::vehicle::ConsumptionEfficiency::ZserioPackingContext m_efficiency_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    CombustionConsumption() noexcept :
            CombustionConsumption(allocator_type())
    {}

    explicit CombustionConsumption(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_auxConsumption = ::nds::core::vehicle::LitersPerHour,
            typename ZSERIO_T_normalConsumption = ::nds::core::vehicle::CombustionConsumptionCurve,
            typename ZSERIO_T_trafficConsumption = ::nds::core::vehicle::CombustionConsumptionCurve,
            typename ZSERIO_T_efficiency = ::nds::core::vehicle::ConsumptionEfficiency>
    CombustionConsumption(
            ::nds::core::vehicle::FuelLiters currentFuelSupply_,
            ZSERIO_T_auxConsumption&& auxConsumption_,
            ZSERIO_T_normalConsumption&& normalConsumption_,
            ZSERIO_T_trafficConsumption&& trafficConsumption_,
            ZSERIO_T_efficiency&& efficiency_,
            const allocator_type& allocator = allocator_type()) :
            CombustionConsumption(allocator)
    {
        m_currentFuelSupply_ = currentFuelSupply_;
        m_auxConsumption_ = ::std::forward<ZSERIO_T_auxConsumption>(auxConsumption_);
        m_normalConsumption_ = ::std::forward<ZSERIO_T_normalConsumption>(normalConsumption_);
        m_trafficConsumption_ = ::std::forward<ZSERIO_T_trafficConsumption>(trafficConsumption_);
        m_efficiency_ = ::std::forward<ZSERIO_T_efficiency>(efficiency_);
    }

    explicit CombustionConsumption(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit CombustionConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~CombustionConsumption() = default;

    CombustionConsumption(const CombustionConsumption&) = default;
    CombustionConsumption& operator=(const CombustionConsumption&) = default;

    CombustionConsumption(CombustionConsumption&&) = default;
    CombustionConsumption& operator=(CombustionConsumption&&) = default;

    CombustionConsumption(::zserio::PropagateAllocatorT,
            const CombustionConsumption& other, const allocator_type& allocator);

    ::nds::core::vehicle::FuelLiters getCurrentFuelSupply() const;
    void setCurrentFuelSupply(::nds::core::vehicle::FuelLiters currentFuelSupply_);

    ::nds::core::vehicle::LitersPerHour getAuxConsumption() const;
    void setAuxConsumption(::nds::core::vehicle::LitersPerHour auxConsumption_);
    bool isAuxConsumptionUsed() const;
    bool isAuxConsumptionSet() const;
    void resetAuxConsumption();

    const ::nds::core::vehicle::CombustionConsumptionCurve& getNormalConsumption() const;
    ::nds::core::vehicle::CombustionConsumptionCurve& getNormalConsumption();
    void setNormalConsumption(const ::nds::core::vehicle::CombustionConsumptionCurve& normalConsumption_);
    void setNormalConsumption(::nds::core::vehicle::CombustionConsumptionCurve&& normalConsumption_);

    const ::nds::core::vehicle::CombustionConsumptionCurve& getTrafficConsumption() const;
    ::nds::core::vehicle::CombustionConsumptionCurve& getTrafficConsumption();
    void setTrafficConsumption(const ::nds::core::vehicle::CombustionConsumptionCurve& trafficConsumption_);
    void setTrafficConsumption(::nds::core::vehicle::CombustionConsumptionCurve&& trafficConsumption_);
    bool isTrafficConsumptionUsed() const;
    bool isTrafficConsumptionSet() const;
    void resetTrafficConsumption();

    const ::nds::core::vehicle::ConsumptionEfficiency& getEfficiency() const;
    ::nds::core::vehicle::ConsumptionEfficiency& getEfficiency();
    void setEfficiency(const ::nds::core::vehicle::ConsumptionEfficiency& efficiency_);
    void setEfficiency(::nds::core::vehicle::ConsumptionEfficiency&& efficiency_);
    bool isEfficiencyUsed() const;
    bool isEfficiencySet() const;
    void resetEfficiency();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CombustionConsumption& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::vehicle::FuelLiters readCurrentFuelSupply(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::LitersPerHour> readAuxConsumption(::zserio::BitStreamReader& in);
    ::nds::core::vehicle::CombustionConsumptionCurve readNormalConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::vehicle::CombustionConsumptionCurve readNormalConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumptionCurve> readTrafficConsumption(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumptionCurve> readTrafficConsumption(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ConsumptionEfficiency> readEfficiency(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ConsumptionEfficiency> readEfficiency(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::vehicle::FuelLiters m_currentFuelSupply_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::LitersPerHour> m_auxConsumption_;
    ::nds::core::vehicle::CombustionConsumptionCurve m_normalConsumption_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::CombustionConsumptionCurve> m_trafficConsumption_;
    ::zserio::InplaceOptionalHolder<::nds::core::vehicle::ConsumptionEfficiency> m_efficiency_;
};

} // namespace vehicle
} // namespace core
} // namespace nds

#endif // NDS_CORE_VEHICLE_COMBUSTION_CONSUMPTION_H
