/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_PACKAGING_SIGNATURE_DEFINITION_H
#define NDS_CORE_PACKAGING_SIGNATURE_DEFINITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/packaging/HashType.h>
#include <nds/core/packaging/SignatureId.h>
#include <nds/core/packaging/SignatureSize.h>
#include <nds/core/packaging/SignatureType.h>

namespace nds
{
namespace core
{
namespace packaging
{

class SignatureDefinition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getId()
        {
            return m_id_;
        }

        ::zserio::DeltaContext& getType()
        {
            return m_type_;
        }

        ::zserio::DeltaContext& getSize()
        {
            return m_size_;
        }

        ::zserio::DeltaContext& getHashType()
        {
            return m_hashType_;
        }

    private:
        ::zserio::DeltaContext m_id_;
        ::zserio::DeltaContext m_type_;
        ::zserio::DeltaContext m_size_;
        ::zserio::DeltaContext m_hashType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    SignatureDefinition() noexcept :
            SignatureDefinition(allocator_type())
    {}

    explicit SignatureDefinition(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_name = ::zserio::string<>,
            typename ZSERIO_T_keyUri = ::zserio::string<>>
    SignatureDefinition(
            ::nds::core::packaging::SignatureId id_,
            ::nds::core::packaging::SignatureType type_,
            ::nds::core::packaging::SignatureSize size_,
            ::nds::core::packaging::HashType hashType_,
            ZSERIO_T_name&& name_,
            ZSERIO_T_keyUri&& keyUri_,
            const allocator_type& allocator = allocator_type()) :
            SignatureDefinition(allocator)
    {
        m_id_ = id_;
        m_type_ = type_;
        m_size_ = size_;
        m_hashType_ = hashType_;
        m_name_ = ::std::forward<ZSERIO_T_name>(name_);
        m_keyUri_ = ::std::forward<ZSERIO_T_keyUri>(keyUri_);
    }

    explicit SignatureDefinition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit SignatureDefinition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~SignatureDefinition() = default;

    SignatureDefinition(const SignatureDefinition&) = default;
    SignatureDefinition& operator=(const SignatureDefinition&) = default;

    SignatureDefinition(SignatureDefinition&&) = default;
    SignatureDefinition& operator=(SignatureDefinition&&) = default;

    SignatureDefinition(::zserio::PropagateAllocatorT,
            const SignatureDefinition& other, const allocator_type& allocator);

    ::nds::core::packaging::SignatureId getId() const;
    void setId(::nds::core::packaging::SignatureId id_);

    ::nds::core::packaging::SignatureType getType() const;
    void setType(::nds::core::packaging::SignatureType type_);

    ::nds::core::packaging::SignatureSize getSize() const;
    void setSize(::nds::core::packaging::SignatureSize size_);

    ::nds::core::packaging::HashType getHashType() const;
    void setHashType(::nds::core::packaging::HashType hashType_);

    const ::zserio::string<>& getName() const;
    ::zserio::string<>& getName();
    void setName(const ::zserio::string<>& name_);
    void setName(::zserio::string<>&& name_);

    const ::zserio::string<>& getKeyUri() const;
    ::zserio::string<>& getKeyUri();
    void setKeyUri(const ::zserio::string<>& keyUri_);
    void setKeyUri(::zserio::string<>&& keyUri_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const SignatureDefinition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::packaging::SignatureId readId(::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureId readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureType readType(::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureType readType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureSize readSize(::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureSize readSize(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::HashType readHashType(::zserio::BitStreamReader& in);
    ::nds::core::packaging::HashType readHashType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readName(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::string<> readKeyUri(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::packaging::SignatureId m_id_;
    ::nds::core::packaging::SignatureType m_type_;
    ::nds::core::packaging::SignatureSize m_size_;
    ::nds::core::packaging::HashType m_hashType_;
    ::zserio::string<> m_name_;
    ::zserio::string<> m_keyUri_;
};

} // namespace packaging
} // namespace core
} // namespace nds

#endif // NDS_CORE_PACKAGING_SIGNATURE_DEFINITION_H
