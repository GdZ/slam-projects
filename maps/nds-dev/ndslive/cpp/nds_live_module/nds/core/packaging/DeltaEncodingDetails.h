/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_PACKAGING_DELTA_ENCODING_DETAILS_H
#define NDS_CORE_PACKAGING_DELTA_ENCODING_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/packaging/DeltaEncodingType.h>
#include <nds/core/types/VersionId.h>

namespace nds
{
namespace core
{
namespace packaging
{

class DeltaEncodingDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getDeltaEncodingType()
        {
            return m_deltaEncodingType_;
        }

        ::zserio::DeltaContext& getSourceVersion()
        {
            return m_sourceVersion_;
        }

    private:
        ::zserio::DeltaContext m_deltaEncodingType_;
        ::zserio::DeltaContext m_sourceVersion_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    DeltaEncodingDetails() noexcept :
            DeltaEncodingDetails(allocator_type())
    {}

    explicit DeltaEncodingDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_sourceVersion = ::nds::core::types::VersionId>
    DeltaEncodingDetails(
            ::nds::core::packaging::DeltaEncodingType deltaEncodingType_,
            ZSERIO_T_sourceVersion&& sourceVersion_,
            const allocator_type& allocator = allocator_type()) :
            DeltaEncodingDetails(allocator)
    {
        m_deltaEncodingType_ = deltaEncodingType_;
        m_sourceVersion_ = ::std::forward<ZSERIO_T_sourceVersion>(sourceVersion_);
    }

    explicit DeltaEncodingDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit DeltaEncodingDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DeltaEncodingDetails() = default;

    DeltaEncodingDetails(const DeltaEncodingDetails&) = default;
    DeltaEncodingDetails& operator=(const DeltaEncodingDetails&) = default;

    DeltaEncodingDetails(DeltaEncodingDetails&&) = default;
    DeltaEncodingDetails& operator=(DeltaEncodingDetails&&) = default;

    DeltaEncodingDetails(::zserio::PropagateAllocatorT,
            const DeltaEncodingDetails& other, const allocator_type& allocator);

    ::nds::core::packaging::DeltaEncodingType getDeltaEncodingType() const;
    void setDeltaEncodingType(::nds::core::packaging::DeltaEncodingType deltaEncodingType_);

    ::nds::core::types::VersionId getSourceVersion() const;
    void setSourceVersion(::nds::core::types::VersionId sourceVersion_);
    bool isSourceVersionUsed() const;
    bool isSourceVersionSet() const;
    void resetSourceVersion();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const DeltaEncodingDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::packaging::DeltaEncodingType readDeltaEncodingType(::zserio::BitStreamReader& in);
    ::nds::core::packaging::DeltaEncodingType readDeltaEncodingType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> readSourceVersion(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> readSourceVersion(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::packaging::DeltaEncodingType m_deltaEncodingType_;
    ::zserio::InplaceOptionalHolder<::nds::core::types::VersionId> m_sourceVersion_;
};

} // namespace packaging
} // namespace core
} // namespace nds

#endif // NDS_CORE_PACKAGING_DELTA_ENCODING_DETAILS_H
