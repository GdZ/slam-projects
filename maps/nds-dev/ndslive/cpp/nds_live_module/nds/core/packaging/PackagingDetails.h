/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_PACKAGING_PACKAGING_DETAILS_H
#define NDS_CORE_PACKAGING_PACKAGING_DETAILS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/packaging/CompressionType.h>
#include <nds/core/packaging/DeltaEncodingDetails.h>
#include <nds/core/packaging/EncryptionKeyId.h>
#include <nds/core/packaging/EncryptionType.h>
#include <nds/core/packaging/SignatureId.h>

namespace nds
{
namespace core
{
namespace packaging
{

class PackagingDetails
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getSignatureId()
        {
            return m_signatureId_;
        }

        ::zserio::DeltaContext& getCompressionType()
        {
            return m_compressionType_;
        }

        ::zserio::DeltaContext& getEncryptionType()
        {
            return m_encryptionType_;
        }

        ::zserio::DeltaContext& getEncryptionKeyId()
        {
            return m_encryptionKeyId_;
        }

        ::nds::core::packaging::DeltaEncodingDetails::ZserioPackingContext& getDeltaEncodingDetails()
        {
            return m_deltaEncodingDetails_;
        }

    private:
        ::zserio::DeltaContext m_signatureId_;
        ::zserio::DeltaContext m_compressionType_;
        ::zserio::DeltaContext m_encryptionType_;
        ::zserio::DeltaContext m_encryptionKeyId_;
        ::nds::core::packaging::DeltaEncodingDetails::ZserioPackingContext m_deltaEncodingDetails_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PackagingDetails() noexcept :
            PackagingDetails(allocator_type())
    {}

    explicit PackagingDetails(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_encryptionKeyId = ::nds::core::packaging::EncryptionKeyId,
            typename ZSERIO_T_deltaEncodingDetails = ::nds::core::packaging::DeltaEncodingDetails>
    PackagingDetails(
            ::nds::core::packaging::SignatureId signatureId_,
            ::nds::core::packaging::CompressionType compressionType_,
            ::nds::core::packaging::EncryptionType encryptionType_,
            ZSERIO_T_encryptionKeyId&& encryptionKeyId_,
            ZSERIO_T_deltaEncodingDetails&& deltaEncodingDetails_,
            const allocator_type& allocator = allocator_type()) :
            PackagingDetails(allocator)
    {
        m_signatureId_ = signatureId_;
        m_compressionType_ = compressionType_;
        m_encryptionType_ = encryptionType_;
        m_encryptionKeyId_ = ::std::forward<ZSERIO_T_encryptionKeyId>(encryptionKeyId_);
        m_deltaEncodingDetails_ = ::std::forward<ZSERIO_T_deltaEncodingDetails>(deltaEncodingDetails_);
    }

    explicit PackagingDetails(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PackagingDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PackagingDetails() = default;

    PackagingDetails(const PackagingDetails&) = default;
    PackagingDetails& operator=(const PackagingDetails&) = default;

    PackagingDetails(PackagingDetails&&) = default;
    PackagingDetails& operator=(PackagingDetails&&) = default;

    PackagingDetails(::zserio::PropagateAllocatorT,
            const PackagingDetails& other, const allocator_type& allocator);

    ::nds::core::packaging::SignatureId getSignatureId() const;
    void setSignatureId(::nds::core::packaging::SignatureId signatureId_);

    ::nds::core::packaging::CompressionType getCompressionType() const;
    void setCompressionType(::nds::core::packaging::CompressionType compressionType_);

    ::nds::core::packaging::EncryptionType getEncryptionType() const;
    void setEncryptionType(::nds::core::packaging::EncryptionType encryptionType_);

    ::nds::core::packaging::EncryptionKeyId getEncryptionKeyId() const;
    void setEncryptionKeyId(::nds::core::packaging::EncryptionKeyId encryptionKeyId_);
    bool isEncryptionKeyIdUsed() const;
    bool isEncryptionKeyIdSet() const;
    void resetEncryptionKeyId();

    const ::nds::core::packaging::DeltaEncodingDetails& getDeltaEncodingDetails() const;
    ::nds::core::packaging::DeltaEncodingDetails& getDeltaEncodingDetails();
    void setDeltaEncodingDetails(const ::nds::core::packaging::DeltaEncodingDetails& deltaEncodingDetails_);
    void setDeltaEncodingDetails(::nds::core::packaging::DeltaEncodingDetails&& deltaEncodingDetails_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PackagingDetails& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::packaging::SignatureId readSignatureId(::zserio::BitStreamReader& in);
    ::nds::core::packaging::SignatureId readSignatureId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::CompressionType readCompressionType(::zserio::BitStreamReader& in);
    ::nds::core::packaging::CompressionType readCompressionType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::EncryptionType readEncryptionType(::zserio::BitStreamReader& in);
    ::nds::core::packaging::EncryptionType readEncryptionType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::EncryptionKeyId> readEncryptionKeyId(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::EncryptionKeyId> readEncryptionKeyId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::packaging::DeltaEncodingDetails readDeltaEncodingDetails(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::packaging::DeltaEncodingDetails readDeltaEncodingDetails(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::packaging::SignatureId m_signatureId_;
    ::nds::core::packaging::CompressionType m_compressionType_;
    ::nds::core::packaging::EncryptionType m_encryptionType_;
    ::zserio::InplaceOptionalHolder<::nds::core::packaging::EncryptionKeyId> m_encryptionKeyId_;
    ::nds::core::packaging::DeltaEncodingDetails m_deltaEncodingDetails_;
};

} // namespace packaging
} // namespace core
} // namespace nds

#endif // NDS_CORE_PACKAGING_PACKAGING_DETAILS_H
