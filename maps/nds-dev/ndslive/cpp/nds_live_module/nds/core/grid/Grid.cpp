/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/grid/Grid_OccupancyProbability.h>

namespace nds
{
namespace core
{
namespace grid
{

Grid_OccupancyProbability::Grid_OccupancyProbability(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_southWestCorner_(allocator),
        m_numRows_(::nds::core::grid::NumGridCells()),
        m_numColumns_(::nds::core::grid::NumGridCells()),
        m_grid_(allocator)
{
}

Grid_OccupancyProbability::Grid_OccupancyProbability(::zserio::BitStreamReader& in,
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator) :
        m_size_(size_),
        m_shift_(shift_),
        m_isInitialized(true),
        m_southWestCorner_(readSouthWestCorner(in, allocator)),
        m_numRows_(readNumRows(in)),
        m_numColumns_(readNumColumns(in)),
        m_grid_(readGrid(in, allocator))
{
}

Grid_OccupancyProbability::Grid_OccupancyProbability(Grid_OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator) :
        m_size_(size_),
        m_shift_(shift_),
        m_isInitialized(true),
        m_southWestCorner_(readSouthWestCorner(context, in, allocator)),
        m_numRows_(readNumRows(context, in)),
        m_numColumns_(readNumColumns(context, in)),
        m_grid_(readGrid(context, in, allocator))
{
}

Grid_OccupancyProbability::Grid_OccupancyProbability(const Grid_OccupancyProbability& other) :
        m_southWestCorner_(other.m_southWestCorner_),
        m_numRows_(other.m_numRows_),
        m_numColumns_(other.m_numColumns_),
        m_grid_(other.m_grid_)
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

Grid_OccupancyProbability& Grid_OccupancyProbability::operator=(const Grid_OccupancyProbability& other)
{
    m_southWestCorner_ = other.m_southWestCorner_;
    m_numRows_ = other.m_numRows_;
    m_numColumns_ = other.m_numColumns_;
    m_grid_ = other.m_grid_;
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;

    return *this;
}

Grid_OccupancyProbability::Grid_OccupancyProbability(Grid_OccupancyProbability&& other) :
        m_southWestCorner_(::std::move(other.m_southWestCorner_)),
        m_numRows_(::std::move(other.m_numRows_)),
        m_numColumns_(::std::move(other.m_numColumns_)),
        m_grid_(::std::move(other.m_grid_))
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

Grid_OccupancyProbability& Grid_OccupancyProbability::operator=(Grid_OccupancyProbability&& other)
{
    m_southWestCorner_ = ::std::move(other.m_southWestCorner_);
    m_numRows_ = ::std::move(other.m_numRows_);
    m_numColumns_ = ::std::move(other.m_numColumns_);
    m_grid_ = ::std::move(other.m_grid_);
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;

    return *this;
}

Grid_OccupancyProbability::Grid_OccupancyProbability(::zserio::PropagateAllocatorT,
        const Grid_OccupancyProbability& other, const allocator_type& allocator) :
        m_southWestCorner_(::zserio::allocatorPropagatingCopy(other.m_southWestCorner_, allocator)),
        m_numRows_(::zserio::allocatorPropagatingCopy(other.m_numRows_, allocator)),
        m_numColumns_(::zserio::allocatorPropagatingCopy(other.m_numColumns_, allocator)),
        m_grid_(::zserio::allocatorPropagatingCopy(other.m_grid_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

void Grid_OccupancyProbability::initialize(
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_)
{
    m_size_ = size_;
    m_shift_ = shift_;
    m_isInitialized = true;

    initializeChildren();
}

bool Grid_OccupancyProbability::isInitialized() const
{
    return m_isInitialized;
}

void Grid_OccupancyProbability::initializeChildren()
{
    m_southWestCorner_.initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
}

::nds::core::grid::GridCellSize Grid_OccupancyProbability::getSize() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'size' of compound 'Grid_OccupancyProbability' is not initialized!");

    return m_size_;
}

::nds::core::geometry::CoordShift Grid_OccupancyProbability::getShift() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'shift' of compound 'Grid_OccupancyProbability' is not initialized!");

    return m_shift_;
}

::nds::core::geometry::Position2D& Grid_OccupancyProbability::getSouthWestCorner()
{
    return m_southWestCorner_;
}

const ::nds::core::geometry::Position2D& Grid_OccupancyProbability::getSouthWestCorner() const
{
    return m_southWestCorner_;
}

void Grid_OccupancyProbability::setSouthWestCorner(const ::nds::core::geometry::Position2D& southWestCorner_)
{
    m_southWestCorner_ = southWestCorner_;
}

void Grid_OccupancyProbability::setSouthWestCorner(::nds::core::geometry::Position2D&& southWestCorner_)
{
    m_southWestCorner_ = ::std::move(southWestCorner_);
}

::nds::core::grid::NumGridCells Grid_OccupancyProbability::getNumRows() const
{
    return m_numRows_;
}

void Grid_OccupancyProbability::setNumRows(::nds::core::grid::NumGridCells numRows_)
{
    m_numRows_ = numRows_;
}

::nds::core::grid::NumGridCells Grid_OccupancyProbability::getNumColumns() const
{
    return m_numColumns_;
}

void Grid_OccupancyProbability::setNumColumns(::nds::core::grid::NumGridCells numColumns_)
{
    m_numColumns_ = numColumns_;
}

::zserio::vector<::nds::localization::types::OccupancyProbability>& Grid_OccupancyProbability::getGrid()
{
    return m_grid_.getRawArray();
}

const ::zserio::vector<::nds::localization::types::OccupancyProbability>& Grid_OccupancyProbability::getGrid() const
{
    return m_grid_.getRawArray();
}

void Grid_OccupancyProbability::setGrid(const ::zserio::vector<::nds::localization::types::OccupancyProbability>& grid_)
{
    m_grid_ = ZserioArrayType_grid(grid_);
}

void Grid_OccupancyProbability::setGrid(::zserio::vector<::nds::localization::types::OccupancyProbability>&& grid_)
{
    m_grid_ = ZserioArrayType_grid(std::move(grid_));
}

::nds::core::grid::GridCellSize Grid_OccupancyProbability::funcCellSize() const
{
    return static_cast<::nds::core::grid::GridCellSize>(getSize());
}

uint64_t Grid_OccupancyProbability::funcWidth() const
{
    return static_cast<uint64_t>(getNumColumns() * getSize());
}

uint64_t Grid_OccupancyProbability::funcHeight() const
{
    return static_cast<uint64_t>(getNumRows() * getSize());
}

void Grid_OccupancyProbability::initPackingContext(Grid_OccupancyProbability::ZserioPackingContext& context) const
{
    m_southWestCorner_.initPackingContext(context.getSouthWestCorner());
    context.getNumRows().init<::zserio::VarSizeArrayTraits>(m_numRows_);
    context.getNumColumns().init<::zserio::VarSizeArrayTraits>(m_numColumns_);
}

size_t Grid_OccupancyProbability::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_southWestCorner_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRows_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numColumns_);
    endBitPosition += m_grid_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Grid_OccupancyProbability::bitSizeOf(Grid_OccupancyProbability::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_southWestCorner_.bitSizeOf(context.getSouthWestCorner(), endBitPosition);
    endBitPosition += context.getNumRows().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRows_);
    endBitPosition += context.getNumColumns().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numColumns_);
    endBitPosition += m_grid_.bitSizeOfPacked(*this, endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Grid_OccupancyProbability::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_southWestCorner_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRows_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numColumns_);
    endBitPosition = m_grid_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

size_t Grid_OccupancyProbability::initializeOffsets(Grid_OccupancyProbability::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_southWestCorner_.initializeOffsets(context.getSouthWestCorner(), endBitPosition);
    endBitPosition += context.getNumRows().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRows_);
    endBitPosition += context.getNumColumns().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numColumns_);
    endBitPosition = m_grid_.initializeOffsetsPacked(*this, endBitPosition);

    return endBitPosition;
}

bool Grid_OccupancyProbability::operator==(const Grid_OccupancyProbability& other) const
{
    if (this != &other)
    {
        return
                (getSize() == other.getSize()) &&
                (getShift() == other.getShift()) &&
                (m_southWestCorner_ == other.m_southWestCorner_) &&
                (m_numRows_ == other.m_numRows_) &&
                (m_numColumns_ == other.m_numColumns_) &&
                (m_grid_ == other.m_grid_);
    }

    return true;
}

uint32_t Grid_OccupancyProbability::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getSize());
    result = ::zserio::calcHashCode(result, getShift());
    result = ::zserio::calcHashCode(result, m_southWestCorner_);
    result = ::zserio::calcHashCode(result, m_numRows_);
    result = ::zserio::calcHashCode(result, m_numColumns_);
    result = ::zserio::calcHashCode(result, m_grid_);

    return result;
}

void Grid_OccupancyProbability::write(::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_southWestCorner_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Grid_OccupancyProbability.southWestCorner: ") <<
                m_southWestCorner_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_southWestCorner_.write(out);

    out.writeVarSize(m_numRows_);

    out.writeVarSize(m_numColumns_);

    // check array length
    if (m_grid_.getRawArray().size() != static_cast<size_t>(getNumRows() * getNumColumns()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Grid_OccupancyProbability.grid: ") <<
                m_grid_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRows() * getNumColumns()) << "!";
    }
    m_grid_.writePacked(*this, out);
}

void Grid_OccupancyProbability::write(Grid_OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_southWestCorner_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Grid_OccupancyProbability.southWestCorner: ") <<
                m_southWestCorner_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_southWestCorner_.write(context.getSouthWestCorner(), out);

    context.getNumRows().write<::zserio::VarSizeArrayTraits>(out, m_numRows_);

    context.getNumColumns().write<::zserio::VarSizeArrayTraits>(out, m_numColumns_);

    // check array length
    if (m_grid_.getRawArray().size() != static_cast<size_t>(getNumRows() * getNumColumns()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Grid_OccupancyProbability.grid: ") <<
                m_grid_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRows() * getNumColumns()) << "!";
    }
    m_grid_.writePacked(*this, out);
}

void Grid_OccupancyProbability::ZserioElementFactory_grid::create(Grid_OccupancyProbability&        ,
        ::zserio::vector<::nds::localization::types::OccupancyProbability>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

void Grid_OccupancyProbability::ZserioElementFactory_grid::create(Grid_OccupancyProbability&        ,
        ::zserio::vector<::nds::localization::types::OccupancyProbability>& array,
        ::nds::localization::types::OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        size_t)
{
    array.emplace_back(context, in, array.get_allocator());
}

::nds::core::geometry::Position2D Grid_OccupancyProbability::readSouthWestCorner(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}

::nds::core::geometry::Position2D Grid_OccupancyProbability::readSouthWestCorner(Grid_OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getSouthWestCorner(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}
::nds::core::grid::NumGridCells Grid_OccupancyProbability::readNumRows(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::grid::NumGridCells>(in.readVarSize());
}

::nds::core::grid::NumGridCells Grid_OccupancyProbability::readNumRows(Grid_OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumRows().read<::zserio::VarSizeArrayTraits>(in);
}
::nds::core::grid::NumGridCells Grid_OccupancyProbability::readNumColumns(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::grid::NumGridCells>(in.readVarSize());
}

::nds::core::grid::NumGridCells Grid_OccupancyProbability::readNumColumns(Grid_OccupancyProbability::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumColumns().read<::zserio::VarSizeArrayTraits>(in);
}
Grid_OccupancyProbability::ZserioArrayType_grid Grid_OccupancyProbability::readGrid(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_grid readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRows() * getNumColumns()));

    return readField;
}

Grid_OccupancyProbability::ZserioArrayType_grid Grid_OccupancyProbability::readGrid(Grid_OccupancyProbability::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_grid readField(allocator);
    readField.readPacked(*this, in, static_cast<size_t>(getNumRows() * getNumColumns()));

    return readField;
}

} // namespace grid
} // namespace core
} // namespace nds

/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <nds/core/grid/Grid_varint32.h>

namespace nds
{
namespace core
{
namespace grid
{

Grid_varint32::Grid_varint32(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_southWestCorner_(allocator),
        m_numRows_(::nds::core::grid::NumGridCells()),
        m_numColumns_(::nds::core::grid::NumGridCells()),
        m_grid_(allocator)
{
}

Grid_varint32::Grid_varint32(::zserio::BitStreamReader& in,
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator) :
        m_size_(size_),
        m_shift_(shift_),
        m_isInitialized(true),
        m_southWestCorner_(readSouthWestCorner(in, allocator)),
        m_numRows_(readNumRows(in)),
        m_numColumns_(readNumColumns(in)),
        m_grid_(readGrid(in, allocator))
{
}

Grid_varint32::Grid_varint32(Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator) :
        m_size_(size_),
        m_shift_(shift_),
        m_isInitialized(true),
        m_southWestCorner_(readSouthWestCorner(context, in, allocator)),
        m_numRows_(readNumRows(context, in)),
        m_numColumns_(readNumColumns(context, in)),
        m_grid_(readGrid(context, in, allocator))
{
}

Grid_varint32::Grid_varint32(const Grid_varint32& other) :
        m_southWestCorner_(other.m_southWestCorner_),
        m_numRows_(other.m_numRows_),
        m_numColumns_(other.m_numColumns_),
        m_grid_(other.m_grid_)
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

Grid_varint32& Grid_varint32::operator=(const Grid_varint32& other)
{
    m_southWestCorner_ = other.m_southWestCorner_;
    m_numRows_ = other.m_numRows_;
    m_numColumns_ = other.m_numColumns_;
    m_grid_ = other.m_grid_;
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;

    return *this;
}

Grid_varint32::Grid_varint32(Grid_varint32&& other) :
        m_southWestCorner_(::std::move(other.m_southWestCorner_)),
        m_numRows_(::std::move(other.m_numRows_)),
        m_numColumns_(::std::move(other.m_numColumns_)),
        m_grid_(::std::move(other.m_grid_))
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

Grid_varint32& Grid_varint32::operator=(Grid_varint32&& other)
{
    m_southWestCorner_ = ::std::move(other.m_southWestCorner_);
    m_numRows_ = ::std::move(other.m_numRows_);
    m_numColumns_ = ::std::move(other.m_numColumns_);
    m_grid_ = ::std::move(other.m_grid_);
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;

    return *this;
}

Grid_varint32::Grid_varint32(::zserio::PropagateAllocatorT,
        const Grid_varint32& other, const allocator_type& allocator) :
        m_southWestCorner_(::zserio::allocatorPropagatingCopy(other.m_southWestCorner_, allocator)),
        m_numRows_(::zserio::allocatorPropagatingCopy(other.m_numRows_, allocator)),
        m_numColumns_(::zserio::allocatorPropagatingCopy(other.m_numColumns_, allocator)),
        m_grid_(::zserio::allocatorPropagatingCopy(other.m_grid_, allocator))
{
    if (other.m_isInitialized)
        initialize(other.m_size_, other.m_shift_);
    else
        m_isInitialized = false;
}

void Grid_varint32::initialize(
        ::nds::core::grid::GridCellSize size_,
        ::nds::core::geometry::CoordShift shift_)
{
    m_size_ = size_;
    m_shift_ = shift_;
    m_isInitialized = true;

    initializeChildren();
}

bool Grid_varint32::isInitialized() const
{
    return m_isInitialized;
}

void Grid_varint32::initializeChildren()
{
    m_southWestCorner_.initialize(static_cast<::nds::core::geometry::CoordShift>(getShift()));
}

::nds::core::grid::GridCellSize Grid_varint32::getSize() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'size' of compound 'Grid_varint32' is not initialized!");

    return m_size_;
}

::nds::core::geometry::CoordShift Grid_varint32::getShift() const
{
    if (!m_isInitialized)
        throw ::zserio::CppRuntimeException("Parameter 'shift' of compound 'Grid_varint32' is not initialized!");

    return m_shift_;
}

::nds::core::geometry::Position2D& Grid_varint32::getSouthWestCorner()
{
    return m_southWestCorner_;
}

const ::nds::core::geometry::Position2D& Grid_varint32::getSouthWestCorner() const
{
    return m_southWestCorner_;
}

void Grid_varint32::setSouthWestCorner(const ::nds::core::geometry::Position2D& southWestCorner_)
{
    m_southWestCorner_ = southWestCorner_;
}

void Grid_varint32::setSouthWestCorner(::nds::core::geometry::Position2D&& southWestCorner_)
{
    m_southWestCorner_ = ::std::move(southWestCorner_);
}

::nds::core::grid::NumGridCells Grid_varint32::getNumRows() const
{
    return m_numRows_;
}

void Grid_varint32::setNumRows(::nds::core::grid::NumGridCells numRows_)
{
    m_numRows_ = numRows_;
}

::nds::core::grid::NumGridCells Grid_varint32::getNumColumns() const
{
    return m_numColumns_;
}

void Grid_varint32::setNumColumns(::nds::core::grid::NumGridCells numColumns_)
{
    m_numColumns_ = numColumns_;
}

::zserio::vector<::nds::core::geometry::Elevation>& Grid_varint32::getGrid()
{
    return m_grid_.getRawArray();
}

const ::zserio::vector<::nds::core::geometry::Elevation>& Grid_varint32::getGrid() const
{
    return m_grid_.getRawArray();
}

void Grid_varint32::setGrid(const ::zserio::vector<::nds::core::geometry::Elevation>& grid_)
{
    m_grid_ = ZserioArrayType_grid(grid_);
}

void Grid_varint32::setGrid(::zserio::vector<::nds::core::geometry::Elevation>&& grid_)
{
    m_grid_ = ZserioArrayType_grid(std::move(grid_));
}

::nds::core::grid::GridCellSize Grid_varint32::funcCellSize() const
{
    return static_cast<::nds::core::grid::GridCellSize>(getSize());
}

uint64_t Grid_varint32::funcWidth() const
{
    return static_cast<uint64_t>(getNumColumns() * getSize());
}

uint64_t Grid_varint32::funcHeight() const
{
    return static_cast<uint64_t>(getNumRows() * getSize());
}

void Grid_varint32::initPackingContext(Grid_varint32::ZserioPackingContext& context) const
{
    m_southWestCorner_.initPackingContext(context.getSouthWestCorner());
    context.getNumRows().init<::zserio::VarSizeArrayTraits>(m_numRows_);
    context.getNumColumns().init<::zserio::VarSizeArrayTraits>(m_numColumns_);
}

size_t Grid_varint32::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_southWestCorner_.bitSizeOf(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRows_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numColumns_);
    endBitPosition += m_grid_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Grid_varint32::bitSizeOf(Grid_varint32::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_southWestCorner_.bitSizeOf(context.getSouthWestCorner(), endBitPosition);
    endBitPosition += context.getNumRows().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRows_);
    endBitPosition += context.getNumColumns().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numColumns_);
    endBitPosition += m_grid_.bitSizeOfPacked(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Grid_varint32::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_southWestCorner_.initializeOffsets(endBitPosition);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numRows_);
    endBitPosition += ::zserio::bitSizeOfVarSize(m_numColumns_);
    endBitPosition = m_grid_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

size_t Grid_varint32::initializeOffsets(Grid_varint32::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_southWestCorner_.initializeOffsets(context.getSouthWestCorner(), endBitPosition);
    endBitPosition += context.getNumRows().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numRows_);
    endBitPosition += context.getNumColumns().bitSizeOf<::zserio::VarSizeArrayTraits>(m_numColumns_);
    endBitPosition = m_grid_.initializeOffsetsPacked(endBitPosition);

    return endBitPosition;
}

bool Grid_varint32::operator==(const Grid_varint32& other) const
{
    if (this != &other)
    {
        return
                (getSize() == other.getSize()) &&
                (getShift() == other.getShift()) &&
                (m_southWestCorner_ == other.m_southWestCorner_) &&
                (m_numRows_ == other.m_numRows_) &&
                (m_numColumns_ == other.m_numColumns_) &&
                (m_grid_ == other.m_grid_);
    }

    return true;
}

uint32_t Grid_varint32::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getSize());
    result = ::zserio::calcHashCode(result, getShift());
    result = ::zserio::calcHashCode(result, m_southWestCorner_);
    result = ::zserio::calcHashCode(result, m_numRows_);
    result = ::zserio::calcHashCode(result, m_numColumns_);
    result = ::zserio::calcHashCode(result, m_grid_);

    return result;
}

void Grid_varint32::write(::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_southWestCorner_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Grid_varint32.southWestCorner: ") <<
                m_southWestCorner_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_southWestCorner_.write(out);

    out.writeVarSize(m_numRows_);

    out.writeVarSize(m_numColumns_);

    // check array length
    if (m_grid_.getRawArray().size() != static_cast<size_t>(getNumRows() * getNumColumns()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Grid_varint32.grid: ") <<
                m_grid_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRows() * getNumColumns()) << "!";
    }
    m_grid_.writePacked(out);
}

void Grid_varint32::write(Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check parameters
    if (m_southWestCorner_.getShift() != static_cast<::nds::core::geometry::CoordShift>(getShift()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong parameter shift for field Grid_varint32.southWestCorner: ") <<
                m_southWestCorner_.getShift() << " != " << static_cast<::nds::core::geometry::CoordShift>(getShift()) << "!";
    }
    m_southWestCorner_.write(context.getSouthWestCorner(), out);

    context.getNumRows().write<::zserio::VarSizeArrayTraits>(out, m_numRows_);

    context.getNumColumns().write<::zserio::VarSizeArrayTraits>(out, m_numColumns_);

    // check array length
    if (m_grid_.getRawArray().size() != static_cast<size_t>(getNumRows() * getNumColumns()))
    {
        throw ::zserio::CppRuntimeException("Write: Wrong array length for field Grid_varint32.grid: ") <<
                m_grid_.getRawArray().size() << " != " <<
                static_cast<size_t>(getNumRows() * getNumColumns()) << "!";
    }
    m_grid_.writePacked(out);
}

::nds::core::geometry::Position2D Grid_varint32::readSouthWestCorner(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}

::nds::core::geometry::Position2D Grid_varint32::readSouthWestCorner(Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::nds::core::geometry::Position2D(context.getSouthWestCorner(), in, static_cast<::nds::core::geometry::CoordShift>(getShift()), allocator);
}
::nds::core::grid::NumGridCells Grid_varint32::readNumRows(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::grid::NumGridCells>(in.readVarSize());
}

::nds::core::grid::NumGridCells Grid_varint32::readNumRows(Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumRows().read<::zserio::VarSizeArrayTraits>(in);
}
::nds::core::grid::NumGridCells Grid_varint32::readNumColumns(::zserio::BitStreamReader& in)
{
    return static_cast<::nds::core::grid::NumGridCells>(in.readVarSize());
}

::nds::core::grid::NumGridCells Grid_varint32::readNumColumns(Grid_varint32::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    return context.getNumColumns().read<::zserio::VarSizeArrayTraits>(in);
}
Grid_varint32::ZserioArrayType_grid Grid_varint32::readGrid(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    ZserioArrayType_grid readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumRows() * getNumColumns()));

    return readField;
}

Grid_varint32::ZserioArrayType_grid Grid_varint32::readGrid(Grid_varint32::ZserioPackingContext&, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    ZserioArrayType_grid readField(allocator);
    readField.readPacked(in, static_cast<size_t>(getNumRows() * getNumColumns()));

    return readField;
}

} // namespace grid
} // namespace core
} // namespace nds
