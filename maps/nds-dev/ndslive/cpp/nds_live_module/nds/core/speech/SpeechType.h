/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_SPEECH_SPEECH_TYPE_H
#define NDS_CORE_SPEECH_SPEECH_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace speech
{

enum class SpeechType : uint8_t
{
    NOT_AVAILABLE = UINT8_C(0),
    FIRST_APPROPRIATE = UINT8_C(1),
    STANDARD = UINT8_C(2),
    FLUENT = UINT8_C(3),
    FOREIGN = UINT8_C(4),
    LOCAL = UINT8_C(5),
    LITERAL = UINT8_C(6)
};

} // namespace speech
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for SpeechType enumeration.
template <>
struct EnumTraits<::nds::core::speech::SpeechType>
{
    static constexpr ::std::array<const char*, 7> names =
    {{
        "NOT_AVAILABLE",
        "FIRST_APPROPRIATE",
        "STANDARD",
        "FLUENT",
        "FOREIGN",
        "LOCAL",
        "LITERAL"
    }};

    static constexpr ::std::array<::nds::core::speech::SpeechType, 7> values =
    {{
        ::nds::core::speech::SpeechType::NOT_AVAILABLE,
        ::nds::core::speech::SpeechType::FIRST_APPROPRIATE,
        ::nds::core::speech::SpeechType::STANDARD,
        ::nds::core::speech::SpeechType::FLUENT,
        ::nds::core::speech::SpeechType::FOREIGN,
        ::nds::core::speech::SpeechType::LOCAL,
        ::nds::core::speech::SpeechType::LITERAL
    }};

    static constexpr const char* enumName = "SpeechType";
};

template <>
size_t enumToOrdinal<::nds::core::speech::SpeechType>(::nds::core::speech::SpeechType value);

template <>
::nds::core::speech::SpeechType valueToEnum<::nds::core::speech::SpeechType>(
        typename ::std::underlying_type<::nds::core::speech::SpeechType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::speech::SpeechType>(::nds::core::speech::SpeechType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::speech::SpeechType>(::zserio::DeltaContext& context, ::nds::core::speech::SpeechType value);

template <>
size_t bitSizeOf<::nds::core::speech::SpeechType>(::nds::core::speech::SpeechType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::speech::SpeechType>(::zserio::DeltaContext& context, ::nds::core::speech::SpeechType value);

template <>
size_t initializeOffsets<::nds::core::speech::SpeechType>(size_t bitPosition, ::nds::core::speech::SpeechType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::speech::SpeechType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::speech::SpeechType value);

template <>
::nds::core::speech::SpeechType read<::nds::core::speech::SpeechType>(::zserio::BitStreamReader& in);

template <>
::nds::core::speech::SpeechType read<::nds::core::speech::SpeechType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::speech::SpeechType>(::zserio::BitStreamWriter& out, ::nds::core::speech::SpeechType value);

template <>
void write<::zserio::DeltaContext, ::nds::core::speech::SpeechType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::speech::SpeechType value);

} // namespace zserio

#endif // NDS_CORE_SPEECH_SPEECH_TYPE_H
