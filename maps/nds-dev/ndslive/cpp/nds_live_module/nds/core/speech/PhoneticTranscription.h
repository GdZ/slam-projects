/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_SPEECH_PHONETIC_TRANSCRIPTION_H
#define NDS_CORE_SPEECH_PHONETIC_TRANSCRIPTION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Vector.h>

#include <nds/core/speech/GrammaticalCase.h>
#include <nds/core/speech/PhoneticPrefix.h>

namespace nds
{
namespace core
{
namespace speech
{

class PhoneticTranscription
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::speech::PhoneticPrefix::ZserioPackingContext& getPrefix()
        {
            return m_prefix_;
        }

    private:
        ::nds::core::speech::PhoneticPrefix::ZserioPackingContext m_prefix_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PhoneticTranscription() noexcept :
            PhoneticTranscription(allocator_type())
    {}

    explicit PhoneticTranscription(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_grammaticalCase = ::zserio::vector<::nds::core::speech::GrammaticalCase>,
            typename ZSERIO_T_phoneticTranscriptionString = ::zserio::string<>,
            typename ZSERIO_T_prefix = ::nds::core::speech::PhoneticPrefix,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_grammaticalCase, PhoneticTranscription, allocator_type> = 0>
    PhoneticTranscription(
            ZSERIO_T_grammaticalCase&& grammaticalCase_,
            ZSERIO_T_phoneticTranscriptionString&& phoneticTranscriptionString_,
            ZSERIO_T_prefix&& prefix_,
            const allocator_type& allocator = allocator_type()) :
            PhoneticTranscription(allocator)
    {
        m_grammaticalCase_ = ::zserio::createOptionalArray<ZserioArrayType_grammaticalCase>(::std::forward<ZSERIO_T_grammaticalCase>(grammaticalCase_));
        m_phoneticTranscriptionString_ = ::std::forward<ZSERIO_T_phoneticTranscriptionString>(phoneticTranscriptionString_);
        m_prefix_ = ::std::forward<ZSERIO_T_prefix>(prefix_);
    }

    explicit PhoneticTranscription(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PhoneticTranscription(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PhoneticTranscription() = default;

    PhoneticTranscription(const PhoneticTranscription&) = default;
    PhoneticTranscription& operator=(const PhoneticTranscription&) = default;

    PhoneticTranscription(PhoneticTranscription&&) = default;
    PhoneticTranscription& operator=(PhoneticTranscription&&) = default;

    PhoneticTranscription(::zserio::PropagateAllocatorT,
            const PhoneticTranscription& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::speech::GrammaticalCase>& getGrammaticalCase() const;
    ::zserio::vector<::nds::core::speech::GrammaticalCase>& getGrammaticalCase();
    void setGrammaticalCase(const ::zserio::vector<::nds::core::speech::GrammaticalCase>& grammaticalCase_);
    void setGrammaticalCase(::zserio::vector<::nds::core::speech::GrammaticalCase>&& grammaticalCase_);
    bool isGrammaticalCaseUsed() const;
    bool isGrammaticalCaseSet() const;
    void resetGrammaticalCase();

    const ::zserio::string<>& getPhoneticTranscriptionString() const;
    ::zserio::string<>& getPhoneticTranscriptionString();
    void setPhoneticTranscriptionString(const ::zserio::string<>& phoneticTranscriptionString_);
    void setPhoneticTranscriptionString(::zserio::string<>&& phoneticTranscriptionString_);

    const ::nds::core::speech::PhoneticPrefix& getPrefix() const;
    ::nds::core::speech::PhoneticPrefix& getPrefix();
    void setPrefix(const ::nds::core::speech::PhoneticPrefix& prefix_);
    void setPrefix(::nds::core::speech::PhoneticPrefix&& prefix_);
    bool isPrefixUsed() const;
    bool isPrefixSet() const;
    void resetPrefix();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PhoneticTranscription& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_grammaticalCase = ::zserio::Array<::zserio::vector<::nds::core::speech::GrammaticalCase>, ::zserio::EnumArrayTraits<::nds::core::speech::GrammaticalCase>, ::zserio::ArrayType::AUTO>;

    ::zserio::InplaceOptionalHolder<ZserioArrayType_grammaticalCase> readGrammaticalCase(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_grammaticalCase> readGrammaticalCase(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::string<> readPhoneticTranscriptionString(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticPrefix> readPrefix(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticPrefix> readPrefix(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::zserio::InplaceOptionalHolder<ZserioArrayType_grammaticalCase> m_grammaticalCase_;
    ::zserio::string<> m_phoneticTranscriptionString_;
    ::zserio::InplaceOptionalHolder<::nds::core::speech::PhoneticPrefix> m_prefix_;
};

} // namespace speech
} // namespace core
} // namespace nds

#endif // NDS_CORE_SPEECH_PHONETIC_TRANSCRIPTION_H
