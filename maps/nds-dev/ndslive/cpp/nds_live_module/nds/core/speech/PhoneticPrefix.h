/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_SPEECH_PHONETIC_PREFIX_H
#define NDS_CORE_SPEECH_PHONETIC_PREFIX_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

#include <nds/core/speech/PhoneticPrefixUsageType.h>

namespace nds
{
namespace core
{
namespace speech
{

class PhoneticPrefix
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getUsageType()
        {
            return m_usageType_;
        }

    private:
        ::zserio::DeltaContext m_usageType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PhoneticPrefix() noexcept :
            PhoneticPrefix(allocator_type())
    {}

    explicit PhoneticPrefix(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_prefixString = ::zserio::string<>>
    PhoneticPrefix(
            ::nds::core::speech::PhoneticPrefixUsageType usageType_,
            ZSERIO_T_prefixString&& prefixString_,
            const allocator_type& allocator = allocator_type()) :
            PhoneticPrefix(allocator)
    {
        m_usageType_ = usageType_;
        m_prefixString_ = ::std::forward<ZSERIO_T_prefixString>(prefixString_);
    }

    explicit PhoneticPrefix(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PhoneticPrefix(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PhoneticPrefix() = default;

    PhoneticPrefix(const PhoneticPrefix&) = default;
    PhoneticPrefix& operator=(const PhoneticPrefix&) = default;

    PhoneticPrefix(PhoneticPrefix&&) = default;
    PhoneticPrefix& operator=(PhoneticPrefix&&) = default;

    PhoneticPrefix(::zserio::PropagateAllocatorT,
            const PhoneticPrefix& other, const allocator_type& allocator);

    ::nds::core::speech::PhoneticPrefixUsageType getUsageType() const;
    void setUsageType(::nds::core::speech::PhoneticPrefixUsageType usageType_);

    const ::zserio::string<>& getPrefixString() const;
    ::zserio::string<>& getPrefixString();
    void setPrefixString(const ::zserio::string<>& prefixString_);
    void setPrefixString(::zserio::string<>&& prefixString_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PhoneticPrefix& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::speech::PhoneticPrefixUsageType readUsageType(::zserio::BitStreamReader& in);
    ::nds::core::speech::PhoneticPrefixUsageType readUsageType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::string<> readPrefixString(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::nds::core::speech::PhoneticPrefixUsageType m_usageType_;
    ::zserio::string<> m_prefixString_;
};

} // namespace speech
} // namespace core
} // namespace nds

#endif // NDS_CORE_SPEECH_PHONETIC_PREFIX_H
