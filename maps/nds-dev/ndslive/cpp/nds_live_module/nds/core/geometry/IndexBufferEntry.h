/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_INDEX_BUFFER_ENTRY_H
#define NDS_CORE_GEOMETRY_INDEX_BUFFER_ENTRY_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace geometry
{

class IndexBufferEntry
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIndex()
        {
            return m_index_;
        }

    private:
        ::zserio::DeltaContext m_index_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    IndexBufferEntry() noexcept :
            IndexBufferEntry(allocator_type())
    {}

    explicit IndexBufferEntry(const allocator_type& allocator) noexcept;

    explicit IndexBufferEntry(
            uint32_t index_,
            const allocator_type& allocator = allocator_type()) :
            IndexBufferEntry(allocator)
    {
        m_index_ = index_;
    }

    explicit IndexBufferEntry(::zserio::BitStreamReader& in,
            uint32_t positionBufferSize_, const allocator_type& allocator = allocator_type());
    explicit IndexBufferEntry(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            uint32_t positionBufferSize_, const allocator_type& allocator = allocator_type());

    ~IndexBufferEntry() = default;

    IndexBufferEntry(const IndexBufferEntry& other);
    IndexBufferEntry& operator=(const IndexBufferEntry& other);

    IndexBufferEntry(IndexBufferEntry&& other);
    IndexBufferEntry& operator=(IndexBufferEntry&& other);

    IndexBufferEntry(::zserio::PropagateAllocatorT,
            const IndexBufferEntry& other, const allocator_type& allocator);

    void initialize(
            uint32_t positionBufferSize_);
    bool isInitialized() const;

    uint32_t getPositionBufferSize() const;

    uint32_t getIndex() const;
    void setIndex(uint32_t index_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const IndexBufferEntry& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_index
    {
    public:
        using OwnerType = IndexBufferEntry;

        static uint8_t get(const IndexBufferEntry& owner);
    };

    uint32_t readIndex(::zserio::BitStreamReader& in);
    uint32_t readIndex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint32_t m_positionBufferSize_;
    bool m_isInitialized;
    uint32_t m_index_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_INDEX_BUFFER_ENTRY_H
