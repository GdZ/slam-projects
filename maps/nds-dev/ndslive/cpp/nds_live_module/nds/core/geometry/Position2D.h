/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_POSITION2_D_H
#define NDS_CORE_GEOMETRY_POSITION2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Latitude.h>
#include <nds/core/geometry/Longitude.h>

namespace nds
{
namespace core
{
namespace geometry
{

class Position2D
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getLongitude()
        {
            return m_longitude_;
        }

        ::zserio::DeltaContext& getLatitude()
        {
            return m_latitude_;
        }

    private:
        ::zserio::DeltaContext m_longitude_;
        ::zserio::DeltaContext m_latitude_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Position2D() noexcept :
            Position2D(allocator_type())
    {}

    explicit Position2D(const allocator_type& allocator) noexcept;

    Position2D(
            int32_t longitude_,
            int32_t latitude_,
            const allocator_type& allocator = allocator_type()) :
            Position2D(allocator)
    {
        m_longitude_ = longitude_;
        m_latitude_ = latitude_;
    }

    explicit Position2D(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit Position2D(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~Position2D() = default;

    Position2D(const Position2D& other);
    Position2D& operator=(const Position2D& other);

    Position2D(Position2D&& other);
    Position2D& operator=(Position2D&& other);

    Position2D(::zserio::PropagateAllocatorT,
            const Position2D& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;

    ::nds::core::geometry::CoordShift getShift() const;

    int32_t getLongitude() const;
    void setLongitude(int32_t longitude_);

    int32_t getLatitude() const;
    void setLatitude(int32_t latitude_);

    ::nds::core::geometry::Longitude funcLon() const;

    ::nds::core::geometry::Latitude funcLat() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Position2D& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_longitude
    {
    public:
        using OwnerType = Position2D;

        static uint8_t get(const Position2D& owner);
    };

    class ZserioElementBitSize_latitude
    {
    public:
        using OwnerType = Position2D;

        static uint8_t get(const Position2D& owner);
    };

    int32_t readLongitude(::zserio::BitStreamReader& in);
    int32_t readLongitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    int32_t readLatitude(::zserio::BitStreamReader& in);
    int32_t readLatitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    int32_t m_longitude_;
    int32_t m_latitude_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_POSITION2_D_H
