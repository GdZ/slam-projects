/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_LINE_RANGE_OFFSET2_D_H
#define NDS_CORE_GEOMETRY_LINE_RANGE_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/CoordWidth.h>
#include <nds/core/geometry/LinePosition.h>
#include <nds/core/geometry/PositionOffset2D.h>
#include <nds/core/geometry/RangeOffsetType.h>

namespace nds
{
namespace core
{
namespace geometry
{

class LineRangeOffset2D
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getOffsetType()
        {
            return m_offsetType_;
        }

        ::zserio::DeltaContext& getNumBits()
        {
            return m_numBits_;
        }

        ::zserio::DeltaContext& getStartPosition()
        {
            return m_startPosition_;
        }

        ::zserio::DeltaContext& getEndPosition()
        {
            return m_endPosition_;
        }

        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext& getStartOffset()
        {
            return m_startOffset_;
        }

        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext& getEndOffset()
        {
            return m_endOffset_;
        }

    private:
        ::zserio::DeltaContext m_offsetType_;
        ::zserio::DeltaContext m_numBits_;
        ::zserio::DeltaContext m_startPosition_;
        ::zserio::DeltaContext m_endPosition_;
        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext m_startOffset_;
        ::nds::core::geometry::PositionOffset2D::ZserioPackingContext m_endOffset_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LineRangeOffset2D() noexcept :
            LineRangeOffset2D(allocator_type())
    {}

    explicit LineRangeOffset2D(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_startOffset = ::nds::core::geometry::PositionOffset2D,
            typename ZSERIO_T_endOffset = ::nds::core::geometry::PositionOffset2D>
    LineRangeOffset2D(
            ::nds::core::geometry::RangeOffsetType offsetType_,
            ::nds::core::geometry::CoordWidth numBits_,
            ::nds::core::geometry::LinePosition startPosition_,
            ::nds::core::geometry::LinePosition endPosition_,
            ZSERIO_T_startOffset&& startOffset_,
            ZSERIO_T_endOffset&& endOffset_,
            const allocator_type& allocator = allocator_type()) :
            LineRangeOffset2D(allocator)
    {
        m_offsetType_ = offsetType_;
        m_numBits_ = numBits_;
        m_startPosition_ = startPosition_;
        m_endPosition_ = endPosition_;
        m_startOffset_ = ::std::forward<ZSERIO_T_startOffset>(startOffset_);
        m_endOffset_ = ::std::forward<ZSERIO_T_endOffset>(endOffset_);
    }

    explicit LineRangeOffset2D(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit LineRangeOffset2D(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~LineRangeOffset2D() = default;

    LineRangeOffset2D(const LineRangeOffset2D& other);
    LineRangeOffset2D& operator=(const LineRangeOffset2D& other);

    LineRangeOffset2D(LineRangeOffset2D&& other);
    LineRangeOffset2D& operator=(LineRangeOffset2D&& other);

    LineRangeOffset2D(::zserio::PropagateAllocatorT,
            const LineRangeOffset2D& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    ::nds::core::geometry::RangeOffsetType getOffsetType() const;
    void setOffsetType(::nds::core::geometry::RangeOffsetType offsetType_);

    ::nds::core::geometry::CoordWidth getNumBits() const;
    void setNumBits(::nds::core::geometry::CoordWidth numBits_);

    ::nds::core::geometry::LinePosition getStartPosition() const;
    void setStartPosition(::nds::core::geometry::LinePosition startPosition_);

    ::nds::core::geometry::LinePosition getEndPosition() const;
    void setEndPosition(::nds::core::geometry::LinePosition endPosition_);

    const ::nds::core::geometry::PositionOffset2D& getStartOffset() const;
    ::nds::core::geometry::PositionOffset2D& getStartOffset();
    void setStartOffset(const ::nds::core::geometry::PositionOffset2D& startOffset_);
    void setStartOffset(::nds::core::geometry::PositionOffset2D&& startOffset_);
    bool isStartOffsetUsed() const;
    bool isStartOffsetSet() const;
    void resetStartOffset();

    const ::nds::core::geometry::PositionOffset2D& getEndOffset() const;
    ::nds::core::geometry::PositionOffset2D& getEndOffset();
    void setEndOffset(const ::nds::core::geometry::PositionOffset2D& endOffset_);
    void setEndOffset(::nds::core::geometry::PositionOffset2D&& endOffset_);
    bool isEndOffsetUsed() const;
    bool isEndOffsetSet() const;
    void resetEndOffset();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LineRangeOffset2D& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::RangeOffsetType readOffsetType(::zserio::BitStreamReader& in);
    ::nds::core::geometry::RangeOffsetType readOffsetType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordWidth readNumBits(::zserio::BitStreamReader& in);
    ::nds::core::geometry::CoordWidth readNumBits(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readStartPosition(::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readStartPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readEndPosition(::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readEndPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> readStartOffset(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> readStartOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> readEndOffset(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> readEndOffset(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::core::geometry::RangeOffsetType m_offsetType_;
    ::nds::core::geometry::CoordWidth m_numBits_;
    ::nds::core::geometry::LinePosition m_startPosition_;
    ::nds::core::geometry::LinePosition m_endPosition_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> m_startOffset_;
    ::zserio::InplaceOptionalHolder<::nds::core::geometry::PositionOffset2D> m_endOffset_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_LINE_RANGE_OFFSET2_D_H
