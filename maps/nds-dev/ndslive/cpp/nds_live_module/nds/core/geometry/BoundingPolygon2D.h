/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_BOUNDING_POLYGON2_D_H
#define NDS_CORE_GEOMETRY_BOUNDING_POLYGON2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/Ring2D.h>

namespace nds
{
namespace core
{
namespace geometry
{

class BoundingPolygon2D
{
public:
    class ZserioPackingContext
    {
    public:
        ::nds::core::geometry::Ring2D::ZserioPackingContext& getOutline()
        {
            return m_outline_;
        }

    private:
        ::nds::core::geometry::Ring2D::ZserioPackingContext m_outline_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    BoundingPolygon2D() noexcept :
            BoundingPolygon2D(allocator_type())
    {}

    explicit BoundingPolygon2D(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_outline = ::nds::core::geometry::Ring2D,
            typename ZSERIO_T_holes = ::zserio::vector<::nds::core::geometry::Ring2D>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_outline, BoundingPolygon2D, allocator_type> = 0>
    BoundingPolygon2D(
            ZSERIO_T_outline&& outline_,
            bool hasHoles_,
            ZSERIO_T_holes&& holes_,
            const allocator_type& allocator = allocator_type()) :
            BoundingPolygon2D(allocator)
    {
        m_outline_ = ::std::forward<ZSERIO_T_outline>(outline_);
        m_hasHoles_ = hasHoles_;
        m_holes_ = ::zserio::createOptionalArray<ZserioArrayType_holes>(::std::forward<ZSERIO_T_holes>(holes_));
    }

    explicit BoundingPolygon2D(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit BoundingPolygon2D(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~BoundingPolygon2D() = default;

    BoundingPolygon2D(const BoundingPolygon2D& other);
    BoundingPolygon2D& operator=(const BoundingPolygon2D& other);

    BoundingPolygon2D(BoundingPolygon2D&& other);
    BoundingPolygon2D& operator=(BoundingPolygon2D&& other);

    BoundingPolygon2D(::zserio::PropagateAllocatorT,
            const BoundingPolygon2D& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    const ::nds::core::geometry::Ring2D& getOutline() const;
    ::nds::core::geometry::Ring2D& getOutline();
    void setOutline(const ::nds::core::geometry::Ring2D& outline_);
    void setOutline(::nds::core::geometry::Ring2D&& outline_);

    bool getHasHoles() const;
    void setHasHoles(bool hasHoles_);

    const ::zserio::vector<::nds::core::geometry::Ring2D>& getHoles() const;
    ::zserio::vector<::nds::core::geometry::Ring2D>& getHoles();
    void setHoles(const ::zserio::vector<::nds::core::geometry::Ring2D>& holes_);
    void setHoles(::zserio::vector<::nds::core::geometry::Ring2D>&& holes_);
    bool isHolesUsed() const;
    bool isHolesSet() const;
    void resetHoles();

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const BoundingPolygon2D& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_holes
    {
    public:
        using OwnerType = BoundingPolygon2D;

        static void initializeElement(BoundingPolygon2D& owner,
                ::nds::core::geometry::Ring2D& element, size_t index);
    };

    class ZserioElementFactory_holes
    {
    public:
        using OwnerType = BoundingPolygon2D;

        static void create(BoundingPolygon2D& owner,
                ::zserio::vector<::nds::core::geometry::Ring2D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(BoundingPolygon2D& owner,
                ::zserio::vector<::nds::core::geometry::Ring2D>& array,
                ::nds::core::geometry::Ring2D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_holes = ::zserio::Array<::zserio::vector<::nds::core::geometry::Ring2D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Ring2D, ZserioElementFactory_holes>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_holes>;

    ::nds::core::geometry::Ring2D readOutline(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::Ring2D readOutline(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    bool readHasHoles(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_holes> readHoles(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_holes> readHoles(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    ::nds::core::geometry::Ring2D m_outline_;
    bool m_hasHoles_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_holes> m_holes_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_BOUNDING_POLYGON2_D_H
