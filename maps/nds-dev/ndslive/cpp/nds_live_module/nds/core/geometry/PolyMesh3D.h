/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_POLY_MESH3_D_H
#define NDS_CORE_GEOMETRY_POLY_MESH3_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/IndexBuffer.h>
#include <nds/core/geometry/IndexType.h>
#include <nds/core/geometry/PolyMesh3DType.h>

namespace nds
{
namespace core
{
namespace geometry
{

class PolyMesh3D
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getIndexType()
        {
            return m_indexType_;
        }

        ::zserio::DeltaContext& getStartIndex()
        {
            return m_startIndex_;
        }

        ::zserio::DeltaContext& getNumPositions()
        {
            return m_numPositions_;
        }

    private:
        ::zserio::DeltaContext m_indexType_;
        ::zserio::DeltaContext m_startIndex_;
        ::zserio::DeltaContext m_numPositions_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PolyMesh3D() noexcept :
            PolyMesh3D(allocator_type())
    {}

    explicit PolyMesh3D(const allocator_type& allocator) noexcept;

    PolyMesh3D(
            ::nds::core::geometry::IndexType indexType_,
            uint32_t startIndex_,
            uint32_t numPositions_,
            const allocator_type& allocator = allocator_type()) :
            PolyMesh3D(allocator)
    {
        m_indexType_ = indexType_;
        m_startIndex_ = startIndex_;
        m_numPositions_ = numPositions_;
    }

    explicit PolyMesh3D(::zserio::BitStreamReader& in,
            ::nds::core::geometry::IndexBuffer& ib_,
            ::nds::core::geometry::PolyMesh3DType type_, const allocator_type& allocator = allocator_type());
    explicit PolyMesh3D(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::IndexBuffer& ib_,
            ::nds::core::geometry::PolyMesh3DType type_, const allocator_type& allocator = allocator_type());

    ~PolyMesh3D() = default;

    PolyMesh3D(const PolyMesh3D& other);
    PolyMesh3D& operator=(const PolyMesh3D& other);

    PolyMesh3D(PolyMesh3D&& other);
    PolyMesh3D& operator=(PolyMesh3D&& other);

    PolyMesh3D(::zserio::PropagateAllocatorT,
            const PolyMesh3D& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::IndexBuffer& ib_,
            ::nds::core::geometry::PolyMesh3DType type_);
    bool isInitialized() const;

    ::nds::core::geometry::IndexBuffer& getIb();
    const ::nds::core::geometry::IndexBuffer& getIb() const;

    ::nds::core::geometry::PolyMesh3DType getType() const;

    ::nds::core::geometry::IndexType getIndexType() const;
    void setIndexType(::nds::core::geometry::IndexType indexType_);

    uint32_t getStartIndex() const;
    void setStartIndex(uint32_t startIndex_);

    uint32_t getNumPositions() const;
    void setNumPositions(uint32_t numPositions_);

    bool funcIsPlanar() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PolyMesh3D& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::IndexType readIndexType(::zserio::BitStreamReader& in);
    ::nds::core::geometry::IndexType readIndexType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readStartIndex(::zserio::BitStreamReader& in);
    uint32_t readStartIndex(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readNumPositions(::zserio::BitStreamReader& in);
    uint32_t readNumPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::geometry::IndexBuffer* m_ib_;
    ::nds::core::geometry::PolyMesh3DType m_type_;
    bool m_isInitialized;
    ::nds::core::geometry::IndexType m_indexType_;
    uint32_t m_startIndex_;
    uint32_t m_numPositions_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_POLY_MESH3_D_H
