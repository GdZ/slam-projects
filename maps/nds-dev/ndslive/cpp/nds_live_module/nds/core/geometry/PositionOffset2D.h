/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_POSITION_OFFSET2_D_H
#define NDS_CORE_GEOMETRY_POSITION_OFFSET2_D_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/CoordWidth.h>
#include <nds/core/geometry/DeltaLatitude.h>
#include <nds/core/geometry/DeltaLongitude.h>

namespace nds
{
namespace core
{
namespace geometry
{

class PositionOffset2D
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getDeltaLongitude()
        {
            return m_deltaLongitude_;
        }

        ::zserio::DeltaContext& getDeltaLatitude()
        {
            return m_deltaLatitude_;
        }

    private:
        ::zserio::DeltaContext m_deltaLongitude_;
        ::zserio::DeltaContext m_deltaLatitude_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PositionOffset2D() noexcept :
            PositionOffset2D(allocator_type())
    {}

    explicit PositionOffset2D(const allocator_type& allocator) noexcept;

    PositionOffset2D(
            int32_t deltaLongitude_,
            int32_t deltaLatitude_,
            const allocator_type& allocator = allocator_type()) :
            PositionOffset2D(allocator)
    {
        m_deltaLongitude_ = deltaLongitude_;
        m_deltaLatitude_ = deltaLatitude_;
    }

    explicit PositionOffset2D(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordWidth numBits_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());
    explicit PositionOffset2D(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordWidth numBits_,
            ::nds::core::geometry::CoordShift shift_, const allocator_type& allocator = allocator_type());

    ~PositionOffset2D() = default;

    PositionOffset2D(const PositionOffset2D& other);
    PositionOffset2D& operator=(const PositionOffset2D& other);

    PositionOffset2D(PositionOffset2D&& other);
    PositionOffset2D& operator=(PositionOffset2D&& other);

    PositionOffset2D(::zserio::PropagateAllocatorT,
            const PositionOffset2D& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordWidth numBits_,
            ::nds::core::geometry::CoordShift shift_);
    bool isInitialized() const;

    ::nds::core::geometry::CoordWidth getNumBits() const;

    ::nds::core::geometry::CoordShift getShift() const;

    int32_t getDeltaLongitude() const;
    void setDeltaLongitude(int32_t deltaLongitude_);

    int32_t getDeltaLatitude() const;
    void setDeltaLatitude(int32_t deltaLatitude_);

    ::nds::core::geometry::DeltaLongitude funcLon() const;

    ::nds::core::geometry::DeltaLatitude funcLat() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PositionOffset2D& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_deltaLongitude
    {
    public:
        using OwnerType = PositionOffset2D;

        static uint8_t get(const PositionOffset2D& owner);
    };

    class ZserioElementBitSize_deltaLatitude
    {
    public:
        using OwnerType = PositionOffset2D;

        static uint8_t get(const PositionOffset2D& owner);
    };

    int32_t readDeltaLongitude(::zserio::BitStreamReader& in);
    int32_t readDeltaLongitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    int32_t readDeltaLatitude(::zserio::BitStreamReader& in);
    int32_t readDeltaLatitude(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::geometry::CoordWidth m_numBits_;
    ::nds::core::geometry::CoordShift m_shift_;
    bool m_isInitialized;
    int32_t m_deltaLongitude_;
    int32_t m_deltaLatitude_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_POSITION_OFFSET2_D_H
