/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_LINE_RANGE_UNCHECKED_H
#define NDS_CORE_GEOMETRY_LINE_RANGE_UNCHECKED_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/geometry/LinePosition.h>

namespace nds
{
namespace core
{
namespace geometry
{

class LineRangeUnchecked
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getStart()
        {
            return m_start_;
        }

        ::zserio::DeltaContext& getEnd()
        {
            return m_end_;
        }

    private:
        ::zserio::DeltaContext m_start_;
        ::zserio::DeltaContext m_end_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LineRangeUnchecked() noexcept :
            LineRangeUnchecked(allocator_type())
    {}

    explicit LineRangeUnchecked(const allocator_type& allocator) noexcept;

    LineRangeUnchecked(
            ::nds::core::geometry::LinePosition start_,
            ::nds::core::geometry::LinePosition end_,
            const allocator_type& allocator = allocator_type()) :
            LineRangeUnchecked(allocator)
    {
        m_start_ = start_;
        m_end_ = end_;
    }

    explicit LineRangeUnchecked(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LineRangeUnchecked(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LineRangeUnchecked() = default;

    LineRangeUnchecked(const LineRangeUnchecked&) = default;
    LineRangeUnchecked& operator=(const LineRangeUnchecked&) = default;

    LineRangeUnchecked(LineRangeUnchecked&&) = default;
    LineRangeUnchecked& operator=(LineRangeUnchecked&&) = default;

    LineRangeUnchecked(::zserio::PropagateAllocatorT,
            const LineRangeUnchecked& other, const allocator_type& allocator);

    ::nds::core::geometry::LinePosition getStart() const;
    void setStart(::nds::core::geometry::LinePosition start_);

    ::nds::core::geometry::LinePosition getEnd() const;
    void setEnd(::nds::core::geometry::LinePosition end_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LineRangeUnchecked& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::geometry::LinePosition readStart(::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readStart(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readEnd(::zserio::BitStreamReader& in);
    ::nds::core::geometry::LinePosition readEnd(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::geometry::LinePosition m_start_;
    ::nds::core::geometry::LinePosition m_end_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_LINE_RANGE_UNCHECKED_H
