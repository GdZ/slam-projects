/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_GEOMETRY_POLYGON2_DBUFFERS_H
#define NDS_CORE_GEOMETRY_POLYGON2_DBUFFERS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/geometry/CoordShift.h>
#include <nds/core/geometry/IndexBuffer.h>
#include <nds/core/geometry/Polygon2D.h>
#include <nds/core/geometry/Position2D.h>

namespace nds
{
namespace core
{
namespace geometry
{

class Polygon2DBuffers
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumPositions()
        {
            return m_numPositions_;
        }

        ::nds::core::geometry::IndexBuffer::ZserioPackingContext& getIndexBuffer()
        {
            return m_indexBuffer_;
        }

    private:
        ::zserio::DeltaContext m_numPositions_;
        ::nds::core::geometry::IndexBuffer::ZserioPackingContext m_indexBuffer_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Polygon2DBuffers() noexcept :
            Polygon2DBuffers(allocator_type())
    {}

    explicit Polygon2DBuffers(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_positions = ::zserio::vector<::nds::core::geometry::Position2D>,
            typename ZSERIO_T_indexBuffer = ::nds::core::geometry::IndexBuffer,
            typename ZSERIO_T_polygons = ::zserio::vector<::nds::core::geometry::Polygon2D>>
    Polygon2DBuffers(
            uint32_t numPositions_,
            ZSERIO_T_positions&& positions_,
            ZSERIO_T_indexBuffer&& indexBuffer_,
            ZSERIO_T_polygons&& polygons_,
            const allocator_type& allocator = allocator_type()) :
            Polygon2DBuffers(allocator)
    {
        m_numPositions_ = numPositions_;
        m_positions_ = ZserioArrayType_positions(::std::forward<ZSERIO_T_positions>(positions_));
        m_indexBuffer_ = ::std::forward<ZSERIO_T_indexBuffer>(indexBuffer_);
        m_polygons_ = ZserioArrayType_polygons(::std::forward<ZSERIO_T_polygons>(polygons_));
    }

    explicit Polygon2DBuffers(::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_,
            uint32_t numElements_, const allocator_type& allocator = allocator_type());
    explicit Polygon2DBuffers(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::geometry::CoordShift shift_,
            uint32_t numElements_, const allocator_type& allocator = allocator_type());

    ~Polygon2DBuffers() = default;

    Polygon2DBuffers(const Polygon2DBuffers& other);
    Polygon2DBuffers& operator=(const Polygon2DBuffers& other);

    Polygon2DBuffers(Polygon2DBuffers&& other);
    Polygon2DBuffers& operator=(Polygon2DBuffers&& other);

    Polygon2DBuffers(::zserio::PropagateAllocatorT,
            const Polygon2DBuffers& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::geometry::CoordShift shift_,
            uint32_t numElements_);
    bool isInitialized() const;
    void initializeChildren();

    ::nds::core::geometry::CoordShift getShift() const;

    uint32_t getNumElements() const;

    uint32_t getNumPositions() const;
    void setNumPositions(uint32_t numPositions_);

    const ::zserio::vector<::nds::core::geometry::Position2D>& getPositions() const;
    ::zserio::vector<::nds::core::geometry::Position2D>& getPositions();
    void setPositions(const ::zserio::vector<::nds::core::geometry::Position2D>& positions_);
    void setPositions(::zserio::vector<::nds::core::geometry::Position2D>&& positions_);

    const ::nds::core::geometry::IndexBuffer& getIndexBuffer() const;
    ::nds::core::geometry::IndexBuffer& getIndexBuffer();
    void setIndexBuffer(const ::nds::core::geometry::IndexBuffer& indexBuffer_);
    void setIndexBuffer(::nds::core::geometry::IndexBuffer&& indexBuffer_);

    const ::zserio::vector<::nds::core::geometry::Polygon2D>& getPolygons() const;
    ::zserio::vector<::nds::core::geometry::Polygon2D>& getPolygons();
    void setPolygons(const ::zserio::vector<::nds::core::geometry::Polygon2D>& polygons_);
    void setPolygons(::zserio::vector<::nds::core::geometry::Polygon2D>&& polygons_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Polygon2DBuffers& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_positions
    {
    public:
        using OwnerType = Polygon2DBuffers;

        static void initializeElement(Polygon2DBuffers& owner,
                ::nds::core::geometry::Position2D& element, size_t index);
    };

    class ZserioElementFactory_positions
    {
    public:
        using OwnerType = Polygon2DBuffers;

        static void create(Polygon2DBuffers& owner,
                ::zserio::vector<::nds::core::geometry::Position2D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Polygon2DBuffers& owner,
                ::zserio::vector<::nds::core::geometry::Position2D>& array,
                ::nds::core::geometry::Position2D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_polygons
    {
    public:
        using OwnerType = Polygon2DBuffers;

        static void initializeElement(Polygon2DBuffers& owner,
                ::nds::core::geometry::Polygon2D& element, size_t index);
    };

    class ZserioElementFactory_polygons
    {
    public:
        using OwnerType = Polygon2DBuffers;

        static void create(Polygon2DBuffers& owner,
                ::zserio::vector<::nds::core::geometry::Polygon2D>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(Polygon2DBuffers& owner,
                ::zserio::vector<::nds::core::geometry::Polygon2D>& array,
                ::nds::core::geometry::Polygon2D::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_positions = ::zserio::Array<::zserio::vector<::nds::core::geometry::Position2D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Position2D, ZserioElementFactory_positions>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_positions>;
    using ZserioArrayType_polygons = ::zserio::Array<::zserio::vector<::nds::core::geometry::Polygon2D>, ::zserio::ObjectArrayTraits<::nds::core::geometry::Polygon2D, ZserioElementFactory_polygons>, ::zserio::ArrayType::NORMAL, ZserioArrayExpressions_polygons>;

    uint32_t readNumPositions(::zserio::BitStreamReader& in);
    uint32_t readNumPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_positions readPositions(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_positions readPositions(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::nds::core::geometry::IndexBuffer readIndexBuffer(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::geometry::IndexBuffer readIndexBuffer(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ZserioArrayType_polygons readPolygons(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_polygons readPolygons(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::geometry::CoordShift m_shift_;
    uint32_t m_numElements_;
    bool m_isInitialized;
    uint32_t m_numPositions_;
    ZserioArrayType_positions m_positions_;
    ::nds::core::geometry::IndexBuffer m_indexBuffer_;
    ZserioArrayType_polygons m_polygons_;
};

} // namespace geometry
} // namespace core
} // namespace nds

#endif // NDS_CORE_GEOMETRY_POLYGON2_DBUFFERS_H
