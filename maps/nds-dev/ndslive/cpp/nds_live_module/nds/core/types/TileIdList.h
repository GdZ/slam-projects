/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_TILE_ID_LIST_H
#define NDS_CORE_TYPES_TILE_ID_LIST_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/types/PackedTileId.h>

namespace nds
{
namespace core
{
namespace types
{

class TileIdList
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TileIdList() noexcept :
            TileIdList(allocator_type())
    {}

    explicit TileIdList(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_id = ::zserio::vector<::nds::core::types::PackedTileId>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_id, TileIdList, allocator_type> = 0>
    explicit TileIdList(
            ZSERIO_T_id&& id_,
            const allocator_type& allocator = allocator_type()) :
            TileIdList(allocator)
    {
        m_id_ = ZserioArrayType_id(::std::forward<ZSERIO_T_id>(id_));
    }

    explicit TileIdList(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TileIdList(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TileIdList() = default;

    TileIdList(const TileIdList&) = default;
    TileIdList& operator=(const TileIdList&) = default;

    TileIdList(TileIdList&&) = default;
    TileIdList& operator=(TileIdList&&) = default;

    TileIdList(::zserio::PropagateAllocatorT,
            const TileIdList& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::types::PackedTileId>& getId() const;
    ::zserio::vector<::nds::core::types::PackedTileId>& getId();
    void setId(const ::zserio::vector<::nds::core::types::PackedTileId>& id_);
    void setId(::zserio::vector<::nds::core::types::PackedTileId>&& id_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TileIdList& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_id = ::zserio::Array<::zserio::vector<::nds::core::types::PackedTileId>, ::zserio::StdIntArrayTraits<::nds::core::types::PackedTileId>, ::zserio::ArrayType::AUTO>;

    ZserioArrayType_id readId(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_id readId(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_id m_id_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_TILE_ID_LIST_H
