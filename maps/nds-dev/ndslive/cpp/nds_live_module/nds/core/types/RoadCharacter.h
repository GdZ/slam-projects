/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_ROAD_CHARACTER_H
#define NDS_CORE_TYPES_ROAD_CHARACTER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace types
{

enum class RoadCharacter : uint8_t
{
    URBAN = UINT8_C(0),
    SERVICE_AREA = UINT8_C(1),
    PARKING = UINT8_C(2),
    COVERED = UINT8_C(3),
    MOTORWAY = UINT8_C(4),
    EXPRESSWAY = UINT8_C(5),
    FERRY = UINT8_C(6),
    TUNNEL = UINT8_C(7),
    BRIDGE = UINT8_C(8),
    MULTI_DIGITIZED = UINT8_C(9),
    COMPLEX_INTERSECTION = UINT8_C(10),
    IS_ELEVATED_ROAD = UINT8_C(11),
    OVERPASS = UINT8_C(12),
    UNDERPASS = UINT8_C(13),
    RACE_TRACK = UINT8_C(14),
    INSIDE_CITY_LIMITS = UINT8_C(15),
    PEDESTRIAN_ZONE = UINT8_C(16),
    CONTROLLED_ACCESS = UINT8_C(17),
    PHYSICALLY_SEPARATED = UINT8_C(18),
    TRACKS_ON_ROAD = UINT8_C(19),
    BICYCLE_PATH = UINT8_C(20),
    BUS_ROAD = UINT8_C(21),
    HORSE_WAY = UINT8_C(22),
    TAXI_ROAD = UINT8_C(23),
    EMERGENCY_ROAD = UINT8_C(24),
    TRUCK_ESCAPE_RAMP = UINT8_C(25),
    EXPRESS_ROAD = UINT8_C(26),
    STATION_PLAZA = UINT8_C(27),
    HAS_SHOULDER_LANE = UINT8_C(28),
    TOLL_ROAD = UINT8_C(29),
    MAIN_ROAD = UINT8_C(30),
    U_TURN_ROAD = UINT8_C(31)
};

} // namespace types
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoadCharacter enumeration.
template <>
struct EnumTraits<::nds::core::types::RoadCharacter>
{
    static constexpr ::std::array<const char*, 32> names =
    {{
        "URBAN",
        "SERVICE_AREA",
        "PARKING",
        "COVERED",
        "MOTORWAY",
        "EXPRESSWAY",
        "FERRY",
        "TUNNEL",
        "BRIDGE",
        "MULTI_DIGITIZED",
        "COMPLEX_INTERSECTION",
        "IS_ELEVATED_ROAD",
        "OVERPASS",
        "UNDERPASS",
        "RACE_TRACK",
        "INSIDE_CITY_LIMITS",
        "PEDESTRIAN_ZONE",
        "CONTROLLED_ACCESS",
        "PHYSICALLY_SEPARATED",
        "TRACKS_ON_ROAD",
        "BICYCLE_PATH",
        "BUS_ROAD",
        "HORSE_WAY",
        "TAXI_ROAD",
        "EMERGENCY_ROAD",
        "TRUCK_ESCAPE_RAMP",
        "EXPRESS_ROAD",
        "STATION_PLAZA",
        "HAS_SHOULDER_LANE",
        "TOLL_ROAD",
        "MAIN_ROAD",
        "U_TURN_ROAD"
    }};

    static constexpr ::std::array<::nds::core::types::RoadCharacter, 32> values =
    {{
        ::nds::core::types::RoadCharacter::URBAN,
        ::nds::core::types::RoadCharacter::SERVICE_AREA,
        ::nds::core::types::RoadCharacter::PARKING,
        ::nds::core::types::RoadCharacter::COVERED,
        ::nds::core::types::RoadCharacter::MOTORWAY,
        ::nds::core::types::RoadCharacter::EXPRESSWAY,
        ::nds::core::types::RoadCharacter::FERRY,
        ::nds::core::types::RoadCharacter::TUNNEL,
        ::nds::core::types::RoadCharacter::BRIDGE,
        ::nds::core::types::RoadCharacter::MULTI_DIGITIZED,
        ::nds::core::types::RoadCharacter::COMPLEX_INTERSECTION,
        ::nds::core::types::RoadCharacter::IS_ELEVATED_ROAD,
        ::nds::core::types::RoadCharacter::OVERPASS,
        ::nds::core::types::RoadCharacter::UNDERPASS,
        ::nds::core::types::RoadCharacter::RACE_TRACK,
        ::nds::core::types::RoadCharacter::INSIDE_CITY_LIMITS,
        ::nds::core::types::RoadCharacter::PEDESTRIAN_ZONE,
        ::nds::core::types::RoadCharacter::CONTROLLED_ACCESS,
        ::nds::core::types::RoadCharacter::PHYSICALLY_SEPARATED,
        ::nds::core::types::RoadCharacter::TRACKS_ON_ROAD,
        ::nds::core::types::RoadCharacter::BICYCLE_PATH,
        ::nds::core::types::RoadCharacter::BUS_ROAD,
        ::nds::core::types::RoadCharacter::HORSE_WAY,
        ::nds::core::types::RoadCharacter::TAXI_ROAD,
        ::nds::core::types::RoadCharacter::EMERGENCY_ROAD,
        ::nds::core::types::RoadCharacter::TRUCK_ESCAPE_RAMP,
        ::nds::core::types::RoadCharacter::EXPRESS_ROAD,
        ::nds::core::types::RoadCharacter::STATION_PLAZA,
        ::nds::core::types::RoadCharacter::HAS_SHOULDER_LANE,
        ::nds::core::types::RoadCharacter::TOLL_ROAD,
        ::nds::core::types::RoadCharacter::MAIN_ROAD,
        ::nds::core::types::RoadCharacter::U_TURN_ROAD
    }};

    static constexpr const char* enumName = "RoadCharacter";
};

template <>
size_t enumToOrdinal<::nds::core::types::RoadCharacter>(::nds::core::types::RoadCharacter value);

template <>
::nds::core::types::RoadCharacter valueToEnum<::nds::core::types::RoadCharacter>(
        typename ::std::underlying_type<::nds::core::types::RoadCharacter>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::types::RoadCharacter>(::nds::core::types::RoadCharacter value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::types::RoadCharacter>(::zserio::DeltaContext& context, ::nds::core::types::RoadCharacter value);

template <>
size_t bitSizeOf<::nds::core::types::RoadCharacter>(::nds::core::types::RoadCharacter value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::types::RoadCharacter>(::zserio::DeltaContext& context, ::nds::core::types::RoadCharacter value);

template <>
size_t initializeOffsets<::nds::core::types::RoadCharacter>(size_t bitPosition, ::nds::core::types::RoadCharacter value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::types::RoadCharacter>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::types::RoadCharacter value);

template <>
::nds::core::types::RoadCharacter read<::nds::core::types::RoadCharacter>(::zserio::BitStreamReader& in);

template <>
::nds::core::types::RoadCharacter read<::nds::core::types::RoadCharacter, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::types::RoadCharacter>(::zserio::BitStreamWriter& out, ::nds::core::types::RoadCharacter value);

template <>
void write<::zserio::DeltaContext, ::nds::core::types::RoadCharacter>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::types::RoadCharacter value);

} // namespace zserio

#endif // NDS_CORE_TYPES_ROAD_CHARACTER_H
