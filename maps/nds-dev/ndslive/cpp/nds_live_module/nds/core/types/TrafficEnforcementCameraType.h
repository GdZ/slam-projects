/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_TRAFFIC_ENFORCEMENT_CAMERA_TYPE_H
#define NDS_CORE_TYPES_TRAFFIC_ENFORCEMENT_CAMERA_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace types
{

enum class TrafficEnforcementCameraType : uint8_t
{
    FIXED_SPEED = UINT8_C(0),
    MOBILE_SPEED = UINT8_C(1),
    REDLIGHT = UINT8_C(2),
    TOLLROAD = UINT8_C(3),
    PECCANCY = UINT8_C(4),
    SPECIAL_LANE = UINT8_C(5),
    FIXED_SPEED_AND_RED_LIGHT = UINT8_C(6),
    BUS_LANE = UINT8_C(7),
    FAKE = UINT8_C(8),
    PARKING_VIOLATION = UINT8_C(9),
    TRAFFIC_ENFORCEMENT_ZONE_ENTRY = UINT8_C(10),
    TRAFFIC_ENFORCEMENT_ZONE_EXIT = UINT8_C(11),
    MARKING_VIOLATION = UINT8_C(12),
    TRAFFIC_INFORMATION_COLLECTION = UINT8_C(13),
    BUS_LANE_AND_FIXED_SPEED = UINT8_C(14),
    SHOULDER_LANE = UINT8_C(15),
    MERGING_TRAFFIC = UINT8_C(16),
    RAMP_METERING = UINT8_C(17),
    NON_MOTORIZED_VEHICLE = UINT8_C(18),
    YIELD_TO_PEDESTRIANS = UINT8_C(19),
    ILLEGAL_LANE_OCCUPATION = UINT8_C(20),
    PHONE_USAGE = UINT8_C(21),
    SEAT_BELT = UINT8_C(22),
    HORN_USAGE = UINT8_C(23),
    ILLEGAL_LAMP_USAGE = UINT8_C(24),
    OTHER = UINT8_C(31)
};

} // namespace types
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for TrafficEnforcementCameraType enumeration.
template <>
struct EnumTraits<::nds::core::types::TrafficEnforcementCameraType>
{
    static constexpr ::std::array<const char*, 26> names =
    {{
        "FIXED_SPEED",
        "MOBILE_SPEED",
        "REDLIGHT",
        "TOLLROAD",
        "PECCANCY",
        "SPECIAL_LANE",
        "FIXED_SPEED_AND_RED_LIGHT",
        "BUS_LANE",
        "FAKE",
        "PARKING_VIOLATION",
        "TRAFFIC_ENFORCEMENT_ZONE_ENTRY",
        "TRAFFIC_ENFORCEMENT_ZONE_EXIT",
        "MARKING_VIOLATION",
        "TRAFFIC_INFORMATION_COLLECTION",
        "BUS_LANE_AND_FIXED_SPEED",
        "SHOULDER_LANE",
        "MERGING_TRAFFIC",
        "RAMP_METERING",
        "NON_MOTORIZED_VEHICLE",
        "YIELD_TO_PEDESTRIANS",
        "ILLEGAL_LANE_OCCUPATION",
        "PHONE_USAGE",
        "SEAT_BELT",
        "HORN_USAGE",
        "ILLEGAL_LAMP_USAGE",
        "OTHER"
    }};

    static constexpr ::std::array<::nds::core::types::TrafficEnforcementCameraType, 26> values =
    {{
        ::nds::core::types::TrafficEnforcementCameraType::FIXED_SPEED,
        ::nds::core::types::TrafficEnforcementCameraType::MOBILE_SPEED,
        ::nds::core::types::TrafficEnforcementCameraType::REDLIGHT,
        ::nds::core::types::TrafficEnforcementCameraType::TOLLROAD,
        ::nds::core::types::TrafficEnforcementCameraType::PECCANCY,
        ::nds::core::types::TrafficEnforcementCameraType::SPECIAL_LANE,
        ::nds::core::types::TrafficEnforcementCameraType::FIXED_SPEED_AND_RED_LIGHT,
        ::nds::core::types::TrafficEnforcementCameraType::BUS_LANE,
        ::nds::core::types::TrafficEnforcementCameraType::FAKE,
        ::nds::core::types::TrafficEnforcementCameraType::PARKING_VIOLATION,
        ::nds::core::types::TrafficEnforcementCameraType::TRAFFIC_ENFORCEMENT_ZONE_ENTRY,
        ::nds::core::types::TrafficEnforcementCameraType::TRAFFIC_ENFORCEMENT_ZONE_EXIT,
        ::nds::core::types::TrafficEnforcementCameraType::MARKING_VIOLATION,
        ::nds::core::types::TrafficEnforcementCameraType::TRAFFIC_INFORMATION_COLLECTION,
        ::nds::core::types::TrafficEnforcementCameraType::BUS_LANE_AND_FIXED_SPEED,
        ::nds::core::types::TrafficEnforcementCameraType::SHOULDER_LANE,
        ::nds::core::types::TrafficEnforcementCameraType::MERGING_TRAFFIC,
        ::nds::core::types::TrafficEnforcementCameraType::RAMP_METERING,
        ::nds::core::types::TrafficEnforcementCameraType::NON_MOTORIZED_VEHICLE,
        ::nds::core::types::TrafficEnforcementCameraType::YIELD_TO_PEDESTRIANS,
        ::nds::core::types::TrafficEnforcementCameraType::ILLEGAL_LANE_OCCUPATION,
        ::nds::core::types::TrafficEnforcementCameraType::PHONE_USAGE,
        ::nds::core::types::TrafficEnforcementCameraType::SEAT_BELT,
        ::nds::core::types::TrafficEnforcementCameraType::HORN_USAGE,
        ::nds::core::types::TrafficEnforcementCameraType::ILLEGAL_LAMP_USAGE,
        ::nds::core::types::TrafficEnforcementCameraType::OTHER
    }};

    static constexpr const char* enumName = "TrafficEnforcementCameraType";
};

template <>
size_t enumToOrdinal<::nds::core::types::TrafficEnforcementCameraType>(::nds::core::types::TrafficEnforcementCameraType value);

template <>
::nds::core::types::TrafficEnforcementCameraType valueToEnum<::nds::core::types::TrafficEnforcementCameraType>(
        typename ::std::underlying_type<::nds::core::types::TrafficEnforcementCameraType>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::types::TrafficEnforcementCameraType>(::nds::core::types::TrafficEnforcementCameraType value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::types::TrafficEnforcementCameraType>(::zserio::DeltaContext& context, ::nds::core::types::TrafficEnforcementCameraType value);

template <>
size_t bitSizeOf<::nds::core::types::TrafficEnforcementCameraType>(::nds::core::types::TrafficEnforcementCameraType value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::types::TrafficEnforcementCameraType>(::zserio::DeltaContext& context, ::nds::core::types::TrafficEnforcementCameraType value);

template <>
size_t initializeOffsets<::nds::core::types::TrafficEnforcementCameraType>(size_t bitPosition, ::nds::core::types::TrafficEnforcementCameraType value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::types::TrafficEnforcementCameraType>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::types::TrafficEnforcementCameraType value);

template <>
::nds::core::types::TrafficEnforcementCameraType read<::nds::core::types::TrafficEnforcementCameraType>(::zserio::BitStreamReader& in);

template <>
::nds::core::types::TrafficEnforcementCameraType read<::nds::core::types::TrafficEnforcementCameraType, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::types::TrafficEnforcementCameraType>(::zserio::BitStreamWriter& out, ::nds::core::types::TrafficEnforcementCameraType value);

template <>
void write<::zserio::DeltaContext, ::nds::core::types::TrafficEnforcementCameraType>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::types::TrafficEnforcementCameraType value);

} // namespace zserio

#endif // NDS_CORE_TYPES_TRAFFIC_ENFORCEMENT_CAMERA_TYPE_H
