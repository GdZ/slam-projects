/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_MONETARY_AMOUNT_H
#define NDS_CORE_TYPES_MONETARY_AMOUNT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

#include <nds/core/types/Currency.h>

namespace nds
{
namespace core
{
namespace types
{

class MonetaryAmount
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getAmount()
        {
            return m_amount_;
        }

        ::zserio::DeltaContext& getCurrency()
        {
            return m_currency_;
        }

    private:
        ::zserio::DeltaContext m_amount_;
        ::zserio::DeltaContext m_currency_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    MonetaryAmount() noexcept :
            MonetaryAmount(allocator_type())
    {}

    explicit MonetaryAmount(const allocator_type& allocator) noexcept;

    MonetaryAmount(
            int64_t amount_,
            ::nds::core::types::Currency currency_,
            const allocator_type& allocator = allocator_type()) :
            MonetaryAmount(allocator)
    {
        m_amount_ = amount_;
        m_currency_ = currency_;
    }

    explicit MonetaryAmount(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit MonetaryAmount(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~MonetaryAmount() = default;

    MonetaryAmount(const MonetaryAmount&) = default;
    MonetaryAmount& operator=(const MonetaryAmount&) = default;

    MonetaryAmount(MonetaryAmount&&) = default;
    MonetaryAmount& operator=(MonetaryAmount&&) = default;

    MonetaryAmount(::zserio::PropagateAllocatorT,
            const MonetaryAmount& other, const allocator_type& allocator);

    int64_t getAmount() const;
    void setAmount(int64_t amount_);

    ::nds::core::types::Currency getCurrency() const;
    void setCurrency(::nds::core::types::Currency currency_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const MonetaryAmount& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    int64_t readAmount(::zserio::BitStreamReader& in);
    int64_t readAmount(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::Currency readCurrency(::zserio::BitStreamReader& in);
    ::nds::core::types::Currency readCurrency(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    int64_t m_amount_;
    ::nds::core::types::Currency m_currency_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_MONETARY_AMOUNT_H
