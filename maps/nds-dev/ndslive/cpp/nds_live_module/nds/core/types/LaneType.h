/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_LANE_TYPE_H
#define NDS_CORE_TYPES_LANE_TYPE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/types/LaneAccessType.h>
#include <nds/core/types/LaneFunctionalType.h>
#include <nds/core/types/RoadType.h>

namespace nds
{
namespace core
{
namespace types
{

class LaneType
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getFunctionalLaneType()
        {
            return m_functionalLaneType_;
        }

        ::zserio::DeltaContext& getAccessLaneType()
        {
            return m_accessLaneType_;
        }

        ::nds::core::types::RoadType::ZserioPackingContext& getRoadType()
        {
            return m_roadType_;
        }

    private:
        ::zserio::DeltaContext m_functionalLaneType_;
        ::zserio::DeltaContext m_accessLaneType_;
        ::nds::core::types::RoadType::ZserioPackingContext m_roadType_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    LaneType() noexcept :
            LaneType(allocator_type())
    {}

    explicit LaneType(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_roadType = ::nds::core::types::RoadType>
    LaneType(
            ::nds::core::types::LaneFunctionalType functionalLaneType_,
            ::nds::core::types::LaneAccessType accessLaneType_,
            ZSERIO_T_roadType&& roadType_,
            const allocator_type& allocator = allocator_type()) :
            LaneType(allocator)
    {
        m_functionalLaneType_ = functionalLaneType_;
        m_accessLaneType_ = accessLaneType_;
        m_roadType_ = ::std::forward<ZSERIO_T_roadType>(roadType_);
    }

    explicit LaneType(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit LaneType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~LaneType() = default;

    LaneType(const LaneType&) = default;
    LaneType& operator=(const LaneType&) = default;

    LaneType(LaneType&&) = default;
    LaneType& operator=(LaneType&&) = default;

    LaneType(::zserio::PropagateAllocatorT,
            const LaneType& other, const allocator_type& allocator);

    ::nds::core::types::LaneFunctionalType getFunctionalLaneType() const;
    void setFunctionalLaneType(::nds::core::types::LaneFunctionalType functionalLaneType_);

    ::nds::core::types::LaneAccessType getAccessLaneType() const;
    void setAccessLaneType(::nds::core::types::LaneAccessType accessLaneType_);

    const ::nds::core::types::RoadType& getRoadType() const;
    ::nds::core::types::RoadType& getRoadType();
    void setRoadType(const ::nds::core::types::RoadType& roadType_);
    void setRoadType(::nds::core::types::RoadType&& roadType_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const LaneType& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::types::LaneFunctionalType readFunctionalLaneType(::zserio::BitStreamReader& in);
    ::nds::core::types::LaneFunctionalType readFunctionalLaneType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::LaneAccessType readAccessLaneType(::zserio::BitStreamReader& in);
    ::nds::core::types::LaneAccessType readAccessLaneType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::types::RoadType readRoadType(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::nds::core::types::RoadType readRoadType(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::nds::core::types::LaneFunctionalType m_functionalLaneType_;
    ::nds::core::types::LaneAccessType m_accessLaneType_;
    ::nds::core::types::RoadType m_roadType_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_LANE_TYPE_H
