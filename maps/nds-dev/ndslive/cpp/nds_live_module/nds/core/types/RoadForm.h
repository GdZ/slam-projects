/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_ROAD_FORM_H
#define NDS_CORE_TYPES_ROAD_FORM_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace types
{

enum class RoadForm : uint8_t
{
    ANY = UINT8_C(0),
    NORMAL = UINT8_C(1),
    DUAL_CARRIAGEWAY = UINT8_C(2),
    SLIP_ROAD = UINT8_C(3),
    RAMP = UINT8_C(4),
    INTERCHANGE = UINT8_C(5),
    ROUNDABOUT = UINT8_C(6),
    ROUNDABOUT_INTERIOR = UINT8_C(7),
    SQUARE = UINT8_C(8),
    PEDESTRIAN_WAY = UINT8_C(9),
    SPECIAL_TRAFFIC_FIGURE = UINT8_C(10),
    PARALLEL_ROAD = UINT8_C(11),
    SERVICE_ROAD = UINT8_C(12),
    MINI_ROUNDABOUT = UINT8_C(13)
};

} // namespace types
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for RoadForm enumeration.
template <>
struct EnumTraits<::nds::core::types::RoadForm>
{
    static constexpr ::std::array<const char*, 14> names =
    {{
        "ANY",
        "NORMAL",
        "DUAL_CARRIAGEWAY",
        "SLIP_ROAD",
        "RAMP",
        "INTERCHANGE",
        "ROUNDABOUT",
        "ROUNDABOUT_INTERIOR",
        "SQUARE",
        "PEDESTRIAN_WAY",
        "SPECIAL_TRAFFIC_FIGURE",
        "PARALLEL_ROAD",
        "SERVICE_ROAD",
        "MINI_ROUNDABOUT"
    }};

    static constexpr ::std::array<::nds::core::types::RoadForm, 14> values =
    {{
        ::nds::core::types::RoadForm::ANY,
        ::nds::core::types::RoadForm::NORMAL,
        ::nds::core::types::RoadForm::DUAL_CARRIAGEWAY,
        ::nds::core::types::RoadForm::SLIP_ROAD,
        ::nds::core::types::RoadForm::RAMP,
        ::nds::core::types::RoadForm::INTERCHANGE,
        ::nds::core::types::RoadForm::ROUNDABOUT,
        ::nds::core::types::RoadForm::ROUNDABOUT_INTERIOR,
        ::nds::core::types::RoadForm::SQUARE,
        ::nds::core::types::RoadForm::PEDESTRIAN_WAY,
        ::nds::core::types::RoadForm::SPECIAL_TRAFFIC_FIGURE,
        ::nds::core::types::RoadForm::PARALLEL_ROAD,
        ::nds::core::types::RoadForm::SERVICE_ROAD,
        ::nds::core::types::RoadForm::MINI_ROUNDABOUT
    }};

    static constexpr const char* enumName = "RoadForm";
};

template <>
size_t enumToOrdinal<::nds::core::types::RoadForm>(::nds::core::types::RoadForm value);

template <>
::nds::core::types::RoadForm valueToEnum<::nds::core::types::RoadForm>(
        typename ::std::underlying_type<::nds::core::types::RoadForm>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::types::RoadForm>(::nds::core::types::RoadForm value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::types::RoadForm>(::zserio::DeltaContext& context, ::nds::core::types::RoadForm value);

template <>
size_t bitSizeOf<::nds::core::types::RoadForm>(::nds::core::types::RoadForm value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::types::RoadForm>(::zserio::DeltaContext& context, ::nds::core::types::RoadForm value);

template <>
size_t initializeOffsets<::nds::core::types::RoadForm>(size_t bitPosition, ::nds::core::types::RoadForm value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::types::RoadForm>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::types::RoadForm value);

template <>
::nds::core::types::RoadForm read<::nds::core::types::RoadForm>(::zserio::BitStreamReader& in);

template <>
::nds::core::types::RoadForm read<::nds::core::types::RoadForm, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::types::RoadForm>(::zserio::BitStreamWriter& out, ::nds::core::types::RoadForm value);

template <>
void write<::zserio::DeltaContext, ::nds::core::types::RoadForm>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::types::RoadForm value);

} // namespace zserio

#endif // NDS_CORE_TYPES_ROAD_FORM_H
