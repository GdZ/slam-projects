/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_ISO3166_CODES_H
#define NDS_CORE_TYPES_ISO3166_CODES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/OptionalHolder.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>

namespace nds
{
namespace core
{
namespace types
{

class Iso3166Codes
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    Iso3166Codes() noexcept :
            Iso3166Codes(allocator_type())
    {}

    explicit Iso3166Codes(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_isoCountryCode = ::zserio::string<>,
            typename ZSERIO_T_isoSubCountryCode = ::zserio::string<>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_isoCountryCode, Iso3166Codes, allocator_type> = 0>
    Iso3166Codes(
            ZSERIO_T_isoCountryCode&& isoCountryCode_,
            ZSERIO_T_isoSubCountryCode&& isoSubCountryCode_,
            const allocator_type& allocator = allocator_type()) :
            Iso3166Codes(allocator)
    {
        m_isoCountryCode_ = ::std::forward<ZSERIO_T_isoCountryCode>(isoCountryCode_);
        m_isoSubCountryCode_ = ::std::forward<ZSERIO_T_isoSubCountryCode>(isoSubCountryCode_);
    }

    explicit Iso3166Codes(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Iso3166Codes() = default;

    Iso3166Codes(const Iso3166Codes&) = default;
    Iso3166Codes& operator=(const Iso3166Codes&) = default;

    Iso3166Codes(Iso3166Codes&&) = default;
    Iso3166Codes& operator=(Iso3166Codes&&) = default;

    Iso3166Codes(::zserio::PropagateAllocatorT,
            const Iso3166Codes& other, const allocator_type& allocator);

    const ::zserio::string<>& getIsoCountryCode() const;
    ::zserio::string<>& getIsoCountryCode();
    void setIsoCountryCode(const ::zserio::string<>& isoCountryCode_);
    void setIsoCountryCode(::zserio::string<>&& isoCountryCode_);

    const ::zserio::string<>& getIsoSubCountryCode() const;
    ::zserio::string<>& getIsoSubCountryCode();
    void setIsoSubCountryCode(const ::zserio::string<>& isoSubCountryCode_);
    void setIsoSubCountryCode(::zserio::string<>&& isoSubCountryCode_);
    bool isIsoSubCountryCodeUsed() const;
    bool isIsoSubCountryCodeSet() const;
    void resetIsoSubCountryCode();

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const Iso3166Codes& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    ::zserio::string<> readIsoCountryCode(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<::zserio::string<>> readIsoSubCountryCode(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    ::zserio::string<> m_isoCountryCode_;
    ::zserio::InplaceOptionalHolder<::zserio::string<>> m_isoSubCountryCode_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_ISO3166_CODES_H
