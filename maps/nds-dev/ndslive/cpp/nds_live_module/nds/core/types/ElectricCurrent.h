/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_ELECTRIC_CURRENT_H
#define NDS_CORE_TYPES_ELECTRIC_CURRENT_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace types
{

enum class ElectricCurrent : uint8_t
{
    AC = UINT8_C(0),
    DC = UINT8_C(1)
};

} // namespace types
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for ElectricCurrent enumeration.
template <>
struct EnumTraits<::nds::core::types::ElectricCurrent>
{
    static constexpr ::std::array<const char*, 2> names =
    {{
        "AC",
        "DC"
    }};

    static constexpr ::std::array<::nds::core::types::ElectricCurrent, 2> values =
    {{
        ::nds::core::types::ElectricCurrent::AC,
        ::nds::core::types::ElectricCurrent::DC
    }};

    static constexpr const char* enumName = "ElectricCurrent";
};

template <>
size_t enumToOrdinal<::nds::core::types::ElectricCurrent>(::nds::core::types::ElectricCurrent value);

template <>
::nds::core::types::ElectricCurrent valueToEnum<::nds::core::types::ElectricCurrent>(
        typename ::std::underlying_type<::nds::core::types::ElectricCurrent>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::types::ElectricCurrent>(::nds::core::types::ElectricCurrent value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::types::ElectricCurrent>(::zserio::DeltaContext& context, ::nds::core::types::ElectricCurrent value);

template <>
size_t bitSizeOf<::nds::core::types::ElectricCurrent>(::nds::core::types::ElectricCurrent value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::types::ElectricCurrent>(::zserio::DeltaContext& context, ::nds::core::types::ElectricCurrent value);

template <>
size_t initializeOffsets<::nds::core::types::ElectricCurrent>(size_t bitPosition, ::nds::core::types::ElectricCurrent value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::types::ElectricCurrent>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::types::ElectricCurrent value);

template <>
::nds::core::types::ElectricCurrent read<::nds::core::types::ElectricCurrent>(::zserio::BitStreamReader& in);

template <>
::nds::core::types::ElectricCurrent read<::nds::core::types::ElectricCurrent, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::types::ElectricCurrent>(::zserio::BitStreamWriter& out, ::nds::core::types::ElectricCurrent value);

template <>
void write<::zserio::DeltaContext, ::nds::core::types::ElectricCurrent>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::types::ElectricCurrent value);

} // namespace zserio

#endif // NDS_CORE_TYPES_ELECTRIC_CURRENT_H
