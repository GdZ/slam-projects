/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_PERCENTAGE_POSITION_H
#define NDS_CORE_TYPES_PERCENTAGE_POSITION_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace types
{

class PercentagePosition
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumBits()
        {
            return m_numBits_;
        }

        ::zserio::DeltaContext& getPosition()
        {
            return m_position_;
        }

    private:
        ::zserio::DeltaContext m_numBits_;
        ::zserio::DeltaContext m_position_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    PercentagePosition() noexcept :
            PercentagePosition(allocator_type())
    {}

    explicit PercentagePosition(const allocator_type& allocator) noexcept;

    PercentagePosition(
            uint8_t numBits_,
            uint32_t position_,
            const allocator_type& allocator = allocator_type()) :
            PercentagePosition(allocator)
    {
        m_numBits_ = numBits_;
        m_position_ = position_;
    }

    explicit PercentagePosition(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit PercentagePosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~PercentagePosition() = default;

    PercentagePosition(const PercentagePosition&) = default;
    PercentagePosition& operator=(const PercentagePosition&) = default;

    PercentagePosition(PercentagePosition&&) = default;
    PercentagePosition& operator=(PercentagePosition&&) = default;

    PercentagePosition(::zserio::PropagateAllocatorT,
            const PercentagePosition& other, const allocator_type& allocator);

    uint8_t getNumBits() const;
    void setNumBits(uint8_t numBits_);

    uint32_t getPosition() const;
    void setPosition(uint32_t position_);

    double funcPercentageValue() const;

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const PercentagePosition& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementBitSize_position
    {
    public:
        using OwnerType = PercentagePosition;

        static uint8_t get(const PercentagePosition& owner);
    };

    uint8_t readNumBits(::zserio::BitStreamReader& in);
    uint8_t readNumBits(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    uint32_t readPosition(::zserio::BitStreamReader& in);
    uint32_t readPosition(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint8_t m_numBits_;
    uint32_t m_position_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_PERCENTAGE_POSITION_H
