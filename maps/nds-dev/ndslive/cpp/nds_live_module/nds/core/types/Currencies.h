/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_TYPES_CURRENCIES_H
#define NDS_CORE_TYPES_CURRENCIES_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

#include <nds/core/types/Currency.h>

namespace nds
{
namespace core
{
namespace types
{

class Currencies
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNumCurrencies()
        {
            return m_numCurrencies_;
        }

    private:
        ::zserio::DeltaContext m_numCurrencies_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    Currencies() noexcept :
            Currencies(allocator_type())
    {}

    explicit Currencies(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_currencies = ::zserio::vector<::nds::core::types::Currency>>
    Currencies(
            uint8_t numCurrencies_,
            ZSERIO_T_currencies&& currencies_,
            const allocator_type& allocator = allocator_type()) :
            Currencies(allocator)
    {
        m_numCurrencies_ = numCurrencies_;
        m_currencies_ = ZserioArrayType_currencies(::std::forward<ZSERIO_T_currencies>(currencies_));
    }

    explicit Currencies(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Currencies(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Currencies() = default;

    Currencies(const Currencies&) = default;
    Currencies& operator=(const Currencies&) = default;

    Currencies(Currencies&&) = default;
    Currencies& operator=(Currencies&&) = default;

    Currencies(::zserio::PropagateAllocatorT,
            const Currencies& other, const allocator_type& allocator);

    uint8_t getNumCurrencies() const;
    void setNumCurrencies(uint8_t numCurrencies_);

    const ::zserio::vector<::nds::core::types::Currency>& getCurrencies() const;
    ::zserio::vector<::nds::core::types::Currency>& getCurrencies();
    void setCurrencies(const ::zserio::vector<::nds::core::types::Currency>& currencies_);
    void setCurrencies(::zserio::vector<::nds::core::types::Currency>&& currencies_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const Currencies& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    using ZserioArrayType_currencies = ::zserio::Array<::zserio::vector<::nds::core::types::Currency>, ::zserio::EnumArrayTraits<::nds::core::types::Currency>, ::zserio::ArrayType::NORMAL>;

    uint8_t readNumCurrencies(::zserio::BitStreamReader& in);
    uint8_t readNumCurrencies(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_currencies readCurrencies(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_currencies readCurrencies(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_numCurrencies_;
    ZserioArrayType_currencies m_currencies_;
};

} // namespace types
} // namespace core
} // namespace nds

#endif // NDS_CORE_TYPES_CURRENCIES_H
