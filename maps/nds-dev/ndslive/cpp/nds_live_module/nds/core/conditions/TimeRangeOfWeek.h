/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_H
#define NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/conditions/TimeOfWeek.h>

namespace nds
{
namespace core
{
namespace conditions
{

class TimeRangeOfWeek
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getStartTime()
        {
            return m_startTime_;
        }

        ::zserio::DeltaContext& getEndTime()
        {
            return m_endTime_;
        }

    private:
        ::zserio::DeltaContext m_startTime_;
        ::zserio::DeltaContext m_endTime_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimeRangeOfWeek() noexcept :
            TimeRangeOfWeek(allocator_type())
    {}

    explicit TimeRangeOfWeek(const allocator_type& allocator) noexcept;

    TimeRangeOfWeek(
            ::nds::core::conditions::TimeOfWeek startTime_,
            ::nds::core::conditions::TimeOfWeek endTime_,
            const allocator_type& allocator = allocator_type()) :
            TimeRangeOfWeek(allocator)
    {
        m_startTime_ = startTime_;
        m_endTime_ = endTime_;
    }

    explicit TimeRangeOfWeek(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimeRangeOfWeek(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimeRangeOfWeek() = default;

    TimeRangeOfWeek(const TimeRangeOfWeek&) = default;
    TimeRangeOfWeek& operator=(const TimeRangeOfWeek&) = default;

    TimeRangeOfWeek(TimeRangeOfWeek&&) = default;
    TimeRangeOfWeek& operator=(TimeRangeOfWeek&&) = default;

    TimeRangeOfWeek(::zserio::PropagateAllocatorT,
            const TimeRangeOfWeek& other, const allocator_type& allocator);

    ::nds::core::conditions::TimeOfWeek getStartTime() const;
    void setStartTime(::nds::core::conditions::TimeOfWeek startTime_);

    ::nds::core::conditions::TimeOfWeek getEndTime() const;
    void setEndTime(::nds::core::conditions::TimeOfWeek endTime_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimeRangeOfWeek& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::nds::core::conditions::TimeOfWeek readStartTime(::zserio::BitStreamReader& in);
    ::nds::core::conditions::TimeOfWeek readStartTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);
    ::nds::core::conditions::TimeOfWeek readEndTime(::zserio::BitStreamReader& in);
    ::nds::core::conditions::TimeOfWeek readEndTime(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    ::nds::core::conditions::TimeOfWeek m_startTime_;
    ::nds::core::conditions::TimeOfWeek m_endTime_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_H
