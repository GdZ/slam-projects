/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_DAYS_OF_WEEK_H
#define NDS_CORE_CONDITIONS_DAYS_OF_WEEK_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/ArrayTraits.h>

namespace nds
{
namespace core
{
namespace conditions
{

class DaysOfWeek
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    DaysOfWeek() noexcept :
            DaysOfWeek(allocator_type())
    {}

    explicit DaysOfWeek(const allocator_type& allocator) noexcept;

    DaysOfWeek(
            bool isSunday_,
            bool isMonday_,
            bool isTuesday_,
            bool isWednesday_,
            bool isThursday_,
            bool isFriday_,
            bool isSaturday_,
            bool isInclusive_,
            const allocator_type& allocator = allocator_type()) :
            DaysOfWeek(allocator)
    {
        m_isSunday_ = isSunday_;
        m_isMonday_ = isMonday_;
        m_isTuesday_ = isTuesday_;
        m_isWednesday_ = isWednesday_;
        m_isThursday_ = isThursday_;
        m_isFriday_ = isFriday_;
        m_isSaturday_ = isSaturday_;
        m_isInclusive_ = isInclusive_;
    }

    explicit DaysOfWeek(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~DaysOfWeek() = default;

    DaysOfWeek(const DaysOfWeek&) = default;
    DaysOfWeek& operator=(const DaysOfWeek&) = default;

    DaysOfWeek(DaysOfWeek&&) = default;
    DaysOfWeek& operator=(DaysOfWeek&&) = default;

    DaysOfWeek(::zserio::PropagateAllocatorT,
            const DaysOfWeek& other, const allocator_type& allocator);

    bool getIsSunday() const;
    void setIsSunday(bool isSunday_);

    bool getIsMonday() const;
    void setIsMonday(bool isMonday_);

    bool getIsTuesday() const;
    void setIsTuesday(bool isTuesday_);

    bool getIsWednesday() const;
    void setIsWednesday(bool isWednesday_);

    bool getIsThursday() const;
    void setIsThursday(bool isThursday_);

    bool getIsFriday() const;
    void setIsFriday(bool isFriday_);

    bool getIsSaturday() const;
    void setIsSaturday(bool isSaturday_);

    bool getIsInclusive() const;
    void setIsInclusive(bool isInclusive_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const DaysOfWeek& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    bool readIsSunday(::zserio::BitStreamReader& in);
    bool readIsMonday(::zserio::BitStreamReader& in);
    bool readIsTuesday(::zserio::BitStreamReader& in);
    bool readIsWednesday(::zserio::BitStreamReader& in);
    bool readIsThursday(::zserio::BitStreamReader& in);
    bool readIsFriday(::zserio::BitStreamReader& in);
    bool readIsSaturday(::zserio::BitStreamReader& in);
    bool readIsInclusive(::zserio::BitStreamReader& in);

    bool m_isSunday_;
    bool m_isMonday_;
    bool m_isTuesday_;
    bool m_isWednesday_;
    bool m_isThursday_;
    bool m_isFriday_;
    bool m_isSaturday_;
    bool m_isInclusive_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_DAYS_OF_WEEK_H
