/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_CONDITION_VALUE_H
#define NDS_CORE_CONDITIONS_CONDITION_VALUE_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <zserio/AnyHolder.h>
#include <memory>
#include <zserio/ArrayTraits.h>

#include <nds/core/conditions/AuthorizationCondition.h>
#include <nds/core/conditions/BigVehiclesCondition.h>
#include <nds/core/conditions/BrakedTrailer.h>
#include <nds/core/conditions/CalendarWeek.h>
#include <nds/core/conditions/ConditionTypeCode.h>
#include <nds/core/conditions/DateRangeOfYear.h>
#include <nds/core/conditions/DayOfYear.h>
#include <nds/core/conditions/DaysOfMonth.h>
#include <nds/core/conditions/DaysOfWeek.h>
#include <nds/core/conditions/EmergencyMilitaryDetailCondition.h>
#include <nds/core/conditions/EnergyTypeCondition.h>
#include <nds/core/conditions/EquipmentCondition.h>
#include <nds/core/conditions/EuroEmissionClassCondition.h>
#include <nds/core/conditions/FrequentlyUsedVehicleTypesCondition.h>
#include <nds/core/conditions/FuzzyTimeDomainCondition.h>
#include <nds/core/conditions/LoadCondition.h>
#include <nds/core/conditions/MonthsOfYear.h>
#include <nds/core/conditions/NumAxles.h>
#include <nds/core/conditions/NumTrailersCondition.h>
#include <nds/core/conditions/Occupancy.h>
#include <nds/core/conditions/OddOrEvenDays.h>
#include <nds/core/conditions/PublicBusTypeCondition.h>
#include <nds/core/conditions/PublicServiceVehiclesCondition.h>
#include <nds/core/conditions/SlowRoadUsersCondition.h>
#include <nds/core/conditions/Surface.h>
#include <nds/core/conditions/TimeDuration.h>
#include <nds/core/conditions/TimeDurationHours.h>
#include <nds/core/conditions/TimeRangeOfDay.h>
#include <nds/core/conditions/TimeRangeOfWeek.h>
#include <nds/core/conditions/TimeRangeOfWeekDays.h>
#include <nds/core/conditions/TimeRangeOfYear.h>
#include <nds/core/conditions/TrailerLengthImperialCondition.h>
#include <nds/core/conditions/TrailerLengthMetricCondition.h>
#include <nds/core/conditions/Visibility.h>
#include <nds/core/conditions/WeatherCondition.h>
#include <nds/core/conditions/WeekInMonth.h>
#include <nds/core/conditions/WeekdayInMonth.h>
#include <nds/core/types/HeightCentimeters.h>
#include <nds/core/types/HeightInch.h>
#include <nds/core/types/LengthCentimeters.h>
#include <nds/core/types/LengthInch.h>
#include <nds/core/types/Weight10Kilogram.h>
#include <nds/core/types/Weight10Lbs.h>
#include <nds/core/types/WidthCentimeters.h>
#include <nds/core/types/WidthInch.h>
#include <nds/core/vehicle/EngineDisplacement.h>

namespace nds
{
namespace core
{
namespace conditions
{

class ConditionValue
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    enum ChoiceTag : int32_t
    {
        CHOICE_timeRangeOfDay = 0,
        CHOICE_timeRangeOfWeek = 1,
        CHOICE_dateRangeOfYear = 2,
        CHOICE_daysOfWeek = 3,
        CHOICE_daysOfMonth = 4,
        CHOICE_dayOfYear = 5,
        CHOICE_monthsOfYear = 6,
        CHOICE_weekInMonth = 7,
        CHOICE_weekdayInMonth = 8,
        CHOICE_calendarWeek = 9,
        CHOICE_timeDuration = 10,
        CHOICE_oddOrEvenDays = 11,
        CHOICE_fuzzyTimeDomain = 12,
        CHOICE_weather = 13,
        CHOICE_frequentlyUsedVehicles = 14,
        CHOICE_slowRoadUsers = 15,
        CHOICE_bigVehicles = 16,
        CHOICE_publicServiceVehicles = 17,
        CHOICE_emergencyMilitaryDetails = 18,
        CHOICE_equipment = 19,
        CHOICE_authorization = 20,
        CHOICE_load = 21,
        CHOICE_numAxles = 22,
        CHOICE_occupancy = 23,
        CHOICE_vehicleLengthMetric = 24,
        CHOICE_vehicleLengthImperial = 25,
        CHOICE_vehicleHeightMetric = 26,
        CHOICE_vehicleHeightImperial = 27,
        CHOICE_vehicleWidthMetric = 28,
        CHOICE_vehicleWidthImperial = 29,
        CHOICE_weightMetric = 30,
        CHOICE_weightImperial = 31,
        CHOICE_weightPerAxleMetric = 32,
        CHOICE_weightPerAxleImperial = 33,
        CHOICE_weightPerTandemAxleMetric = 34,
        CHOICE_weightPerTandemAxleImperial = 35,
        CHOICE_weightPerTridemAxleMetric = 36,
        CHOICE_weightPerTridemAxleImperial = 37,
        CHOICE_timeRangeOfWeekDays = 38,
        CHOICE_visibility = 39,
        CHOICE_surface = 40,
        CHOICE_euroEmissionClass = 41,
        CHOICE_timeDurationHours = 42,
        CHOICE_timeRangeOfYear = 43,
        CHOICE_numTrailers = 44,
        CHOICE_trailerLengthMetric = 45,
        CHOICE_trailerLengthImperial = 46,
        CHOICE_engineDisplacement = 47,
        CHOICE_energyType = 48,
        CHOICE_brakedTrailer = 49,
        CHOICE_publicBusTypes = 50,
        UNDEFINED_CHOICE = -1
    };

    class ZserioPackingContext
    {
    public:
        ::nds::core::conditions::TimeRangeOfDay::ZserioPackingContext& getTimeRangeOfDay()
        {
            return m_timeRangeOfDay_;
        }

        ::nds::core::conditions::TimeRangeOfWeek::ZserioPackingContext& getTimeRangeOfWeek()
        {
            return m_timeRangeOfWeek_;
        }

        ::nds::core::conditions::DateRangeOfYear::ZserioPackingContext& getDateRangeOfYear()
        {
            return m_dateRangeOfYear_;
        }

        ::nds::core::conditions::DayOfYear::ZserioPackingContext& getDayOfYear()
        {
            return m_dayOfYear_;
        }

        ::nds::core::conditions::WeekInMonth::ZserioPackingContext& getWeekInMonth()
        {
            return m_weekInMonth_;
        }

        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext& getWeekdayInMonth()
        {
            return m_weekdayInMonth_;
        }

        ::nds::core::conditions::CalendarWeek::ZserioPackingContext& getCalendarWeek()
        {
            return m_calendarWeek_;
        }

        ::nds::core::conditions::TimeDuration::ZserioPackingContext& getTimeDuration()
        {
            return m_timeDuration_;
        }

        ::nds::core::conditions::FuzzyTimeDomainCondition::ZserioPackingContext& getFuzzyTimeDomain()
        {
            return m_fuzzyTimeDomain_;
        }

        ::nds::core::conditions::WeatherCondition::ZserioPackingContext& getWeather()
        {
            return m_weather_;
        }

        ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition::ZserioPackingContext& getFrequentlyUsedVehicles()
        {
            return m_frequentlyUsedVehicles_;
        }

        ::nds::core::conditions::SlowRoadUsersCondition::ZserioPackingContext& getSlowRoadUsers()
        {
            return m_slowRoadUsers_;
        }

        ::nds::core::conditions::BigVehiclesCondition::ZserioPackingContext& getBigVehicles()
        {
            return m_bigVehicles_;
        }

        ::nds::core::conditions::PublicServiceVehiclesCondition::ZserioPackingContext& getPublicServiceVehicles()
        {
            return m_publicServiceVehicles_;
        }

        ::nds::core::conditions::EmergencyMilitaryDetailCondition::ZserioPackingContext& getEmergencyMilitaryDetails()
        {
            return m_emergencyMilitaryDetails_;
        }

        ::nds::core::conditions::EquipmentCondition::ZserioPackingContext& getEquipment()
        {
            return m_equipment_;
        }

        ::nds::core::conditions::AuthorizationCondition::ZserioPackingContext& getAuthorization()
        {
            return m_authorization_;
        }

        ::nds::core::conditions::LoadCondition::ZserioPackingContext& getLoad()
        {
            return m_load_;
        }

        ::zserio::DeltaContext& getNumAxles()
        {
            return m_numAxles_;
        }

        ::nds::core::conditions::Occupancy::ZserioPackingContext& getOccupancy()
        {
            return m_occupancy_;
        }

        ::zserio::DeltaContext& getVehicleLengthMetric()
        {
            return m_vehicleLengthMetric_;
        }

        ::zserio::DeltaContext& getVehicleLengthImperial()
        {
            return m_vehicleLengthImperial_;
        }

        ::zserio::DeltaContext& getVehicleHeightMetric()
        {
            return m_vehicleHeightMetric_;
        }

        ::zserio::DeltaContext& getVehicleHeightImperial()
        {
            return m_vehicleHeightImperial_;
        }

        ::zserio::DeltaContext& getVehicleWidthMetric()
        {
            return m_vehicleWidthMetric_;
        }

        ::zserio::DeltaContext& getVehicleWidthImperial()
        {
            return m_vehicleWidthImperial_;
        }

        ::zserio::DeltaContext& getWeightMetric()
        {
            return m_weightMetric_;
        }

        ::zserio::DeltaContext& getWeightImperial()
        {
            return m_weightImperial_;
        }

        ::zserio::DeltaContext& getWeightPerAxleMetric()
        {
            return m_weightPerAxleMetric_;
        }

        ::zserio::DeltaContext& getWeightPerAxleImperial()
        {
            return m_weightPerAxleImperial_;
        }

        ::zserio::DeltaContext& getWeightPerTandemAxleMetric()
        {
            return m_weightPerTandemAxleMetric_;
        }

        ::zserio::DeltaContext& getWeightPerTandemAxleImperial()
        {
            return m_weightPerTandemAxleImperial_;
        }

        ::zserio::DeltaContext& getWeightPerTridemAxleMetric()
        {
            return m_weightPerTridemAxleMetric_;
        }

        ::zserio::DeltaContext& getWeightPerTridemAxleImperial()
        {
            return m_weightPerTridemAxleImperial_;
        }

        ::nds::core::conditions::TimeRangeOfWeekDays::ZserioPackingContext& getTimeRangeOfWeekDays()
        {
            return m_timeRangeOfWeekDays_;
        }

        ::zserio::DeltaContext& getVisibility()
        {
            return m_visibility_;
        }

        ::zserio::DeltaContext& getSurface()
        {
            return m_surface_;
        }

        ::zserio::DeltaContext& getEuroEmissionClass()
        {
            return m_euroEmissionClass_;
        }

        ::nds::core::conditions::TimeDurationHours::ZserioPackingContext& getTimeDurationHours()
        {
            return m_timeDurationHours_;
        }

        ::nds::core::conditions::TimeRangeOfYear::ZserioPackingContext& getTimeRangeOfYear()
        {
            return m_timeRangeOfYear_;
        }

        ::nds::core::conditions::NumTrailersCondition::ZserioPackingContext& getNumTrailers()
        {
            return m_numTrailers_;
        }

        ::nds::core::conditions::TrailerLengthMetricCondition::ZserioPackingContext& getTrailerLengthMetric()
        {
            return m_trailerLengthMetric_;
        }

        ::nds::core::conditions::TrailerLengthImperialCondition::ZserioPackingContext& getTrailerLengthImperial()
        {
            return m_trailerLengthImperial_;
        }

        ::zserio::DeltaContext& getEngineDisplacement()
        {
            return m_engineDisplacement_;
        }

        ::nds::core::conditions::EnergyTypeCondition::ZserioPackingContext& getEnergyType()
        {
            return m_energyType_;
        }

        ::nds::core::conditions::PublicBusTypeCondition::ZserioPackingContext& getPublicBusTypes()
        {
            return m_publicBusTypes_;
        }

    private:
        ::nds::core::conditions::TimeRangeOfDay::ZserioPackingContext m_timeRangeOfDay_;
        ::nds::core::conditions::TimeRangeOfWeek::ZserioPackingContext m_timeRangeOfWeek_;
        ::nds::core::conditions::DateRangeOfYear::ZserioPackingContext m_dateRangeOfYear_;
        ::nds::core::conditions::DayOfYear::ZserioPackingContext m_dayOfYear_;
        ::nds::core::conditions::WeekInMonth::ZserioPackingContext m_weekInMonth_;
        ::nds::core::conditions::WeekdayInMonth::ZserioPackingContext m_weekdayInMonth_;
        ::nds::core::conditions::CalendarWeek::ZserioPackingContext m_calendarWeek_;
        ::nds::core::conditions::TimeDuration::ZserioPackingContext m_timeDuration_;
        ::nds::core::conditions::FuzzyTimeDomainCondition::ZserioPackingContext m_fuzzyTimeDomain_;
        ::nds::core::conditions::WeatherCondition::ZserioPackingContext m_weather_;
        ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition::ZserioPackingContext m_frequentlyUsedVehicles_;
        ::nds::core::conditions::SlowRoadUsersCondition::ZserioPackingContext m_slowRoadUsers_;
        ::nds::core::conditions::BigVehiclesCondition::ZserioPackingContext m_bigVehicles_;
        ::nds::core::conditions::PublicServiceVehiclesCondition::ZserioPackingContext m_publicServiceVehicles_;
        ::nds::core::conditions::EmergencyMilitaryDetailCondition::ZserioPackingContext m_emergencyMilitaryDetails_;
        ::nds::core::conditions::EquipmentCondition::ZserioPackingContext m_equipment_;
        ::nds::core::conditions::AuthorizationCondition::ZserioPackingContext m_authorization_;
        ::nds::core::conditions::LoadCondition::ZserioPackingContext m_load_;
        ::zserio::DeltaContext m_numAxles_;
        ::nds::core::conditions::Occupancy::ZserioPackingContext m_occupancy_;
        ::zserio::DeltaContext m_vehicleLengthMetric_;
        ::zserio::DeltaContext m_vehicleLengthImperial_;
        ::zserio::DeltaContext m_vehicleHeightMetric_;
        ::zserio::DeltaContext m_vehicleHeightImperial_;
        ::zserio::DeltaContext m_vehicleWidthMetric_;
        ::zserio::DeltaContext m_vehicleWidthImperial_;
        ::zserio::DeltaContext m_weightMetric_;
        ::zserio::DeltaContext m_weightImperial_;
        ::zserio::DeltaContext m_weightPerAxleMetric_;
        ::zserio::DeltaContext m_weightPerAxleImperial_;
        ::zserio::DeltaContext m_weightPerTandemAxleMetric_;
        ::zserio::DeltaContext m_weightPerTandemAxleImperial_;
        ::zserio::DeltaContext m_weightPerTridemAxleMetric_;
        ::zserio::DeltaContext m_weightPerTridemAxleImperial_;
        ::nds::core::conditions::TimeRangeOfWeekDays::ZserioPackingContext m_timeRangeOfWeekDays_;
        ::zserio::DeltaContext m_visibility_;
        ::zserio::DeltaContext m_surface_;
        ::zserio::DeltaContext m_euroEmissionClass_;
        ::nds::core::conditions::TimeDurationHours::ZserioPackingContext m_timeDurationHours_;
        ::nds::core::conditions::TimeRangeOfYear::ZserioPackingContext m_timeRangeOfYear_;
        ::nds::core::conditions::NumTrailersCondition::ZserioPackingContext m_numTrailers_;
        ::nds::core::conditions::TrailerLengthMetricCondition::ZserioPackingContext m_trailerLengthMetric_;
        ::nds::core::conditions::TrailerLengthImperialCondition::ZserioPackingContext m_trailerLengthImperial_;
        ::zserio::DeltaContext m_engineDisplacement_;
        ::nds::core::conditions::EnergyTypeCondition::ZserioPackingContext m_energyType_;
        ::nds::core::conditions::PublicBusTypeCondition::ZserioPackingContext m_publicBusTypes_;
    };

    ConditionValue() noexcept :
            ConditionValue(allocator_type())
    {}

    explicit ConditionValue(const allocator_type& allocator) noexcept;

    explicit ConditionValue(::zserio::BitStreamReader& in,
            ::nds::core::conditions::ConditionTypeCode code_, const allocator_type& allocator = allocator_type());
    explicit ConditionValue(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in,
            ::nds::core::conditions::ConditionTypeCode code_, const allocator_type& allocator = allocator_type());

    ~ConditionValue() = default;

    ConditionValue(const ConditionValue& other);
    ConditionValue& operator=(const ConditionValue& other);

    ConditionValue(ConditionValue&& other);
    ConditionValue& operator=(ConditionValue&& other);

    ConditionValue(::zserio::PropagateAllocatorT,
            const ConditionValue& other, const allocator_type& allocator);

    void initialize(
            ::nds::core::conditions::ConditionTypeCode code_);
    bool isInitialized() const;

    ChoiceTag choiceTag() const;

    ::nds::core::conditions::ConditionTypeCode getCode() const;

    const ::nds::core::conditions::TimeRangeOfDay& getTimeRangeOfDay() const;
    ::nds::core::conditions::TimeRangeOfDay& getTimeRangeOfDay();
    void setTimeRangeOfDay(const ::nds::core::conditions::TimeRangeOfDay& timeRangeOfDay_);
    void setTimeRangeOfDay(::nds::core::conditions::TimeRangeOfDay&& timeRangeOfDay_);

    const ::nds::core::conditions::TimeRangeOfWeek& getTimeRangeOfWeek() const;
    ::nds::core::conditions::TimeRangeOfWeek& getTimeRangeOfWeek();
    void setTimeRangeOfWeek(const ::nds::core::conditions::TimeRangeOfWeek& timeRangeOfWeek_);
    void setTimeRangeOfWeek(::nds::core::conditions::TimeRangeOfWeek&& timeRangeOfWeek_);

    const ::nds::core::conditions::DateRangeOfYear& getDateRangeOfYear() const;
    ::nds::core::conditions::DateRangeOfYear& getDateRangeOfYear();
    void setDateRangeOfYear(const ::nds::core::conditions::DateRangeOfYear& dateRangeOfYear_);
    void setDateRangeOfYear(::nds::core::conditions::DateRangeOfYear&& dateRangeOfYear_);

    const ::nds::core::conditions::DaysOfWeek& getDaysOfWeek() const;
    ::nds::core::conditions::DaysOfWeek& getDaysOfWeek();
    void setDaysOfWeek(const ::nds::core::conditions::DaysOfWeek& daysOfWeek_);
    void setDaysOfWeek(::nds::core::conditions::DaysOfWeek&& daysOfWeek_);

    const ::nds::core::conditions::DaysOfMonth& getDaysOfMonth() const;
    ::nds::core::conditions::DaysOfMonth& getDaysOfMonth();
    void setDaysOfMonth(const ::nds::core::conditions::DaysOfMonth& daysOfMonth_);
    void setDaysOfMonth(::nds::core::conditions::DaysOfMonth&& daysOfMonth_);

    const ::nds::core::conditions::DayOfYear& getDayOfYear() const;
    ::nds::core::conditions::DayOfYear& getDayOfYear();
    void setDayOfYear(const ::nds::core::conditions::DayOfYear& dayOfYear_);
    void setDayOfYear(::nds::core::conditions::DayOfYear&& dayOfYear_);

    const ::nds::core::conditions::MonthsOfYear& getMonthsOfYear() const;
    ::nds::core::conditions::MonthsOfYear& getMonthsOfYear();
    void setMonthsOfYear(const ::nds::core::conditions::MonthsOfYear& monthsOfYear_);
    void setMonthsOfYear(::nds::core::conditions::MonthsOfYear&& monthsOfYear_);

    const ::nds::core::conditions::WeekInMonth& getWeekInMonth() const;
    ::nds::core::conditions::WeekInMonth& getWeekInMonth();
    void setWeekInMonth(const ::nds::core::conditions::WeekInMonth& weekInMonth_);
    void setWeekInMonth(::nds::core::conditions::WeekInMonth&& weekInMonth_);

    const ::nds::core::conditions::WeekdayInMonth& getWeekdayInMonth() const;
    ::nds::core::conditions::WeekdayInMonth& getWeekdayInMonth();
    void setWeekdayInMonth(const ::nds::core::conditions::WeekdayInMonth& weekdayInMonth_);
    void setWeekdayInMonth(::nds::core::conditions::WeekdayInMonth&& weekdayInMonth_);

    const ::nds::core::conditions::CalendarWeek& getCalendarWeek() const;
    ::nds::core::conditions::CalendarWeek& getCalendarWeek();
    void setCalendarWeek(const ::nds::core::conditions::CalendarWeek& calendarWeek_);
    void setCalendarWeek(::nds::core::conditions::CalendarWeek&& calendarWeek_);

    const ::nds::core::conditions::TimeDuration& getTimeDuration() const;
    ::nds::core::conditions::TimeDuration& getTimeDuration();
    void setTimeDuration(const ::nds::core::conditions::TimeDuration& timeDuration_);
    void setTimeDuration(::nds::core::conditions::TimeDuration&& timeDuration_);

    ::nds::core::conditions::OddOrEvenDays getOddOrEvenDays() const;
    void setOddOrEvenDays(::nds::core::conditions::OddOrEvenDays oddOrEvenDays_);

    const ::nds::core::conditions::FuzzyTimeDomainCondition& getFuzzyTimeDomain() const;
    ::nds::core::conditions::FuzzyTimeDomainCondition& getFuzzyTimeDomain();
    void setFuzzyTimeDomain(const ::nds::core::conditions::FuzzyTimeDomainCondition& fuzzyTimeDomain_);
    void setFuzzyTimeDomain(::nds::core::conditions::FuzzyTimeDomainCondition&& fuzzyTimeDomain_);

    const ::nds::core::conditions::WeatherCondition& getWeather() const;
    ::nds::core::conditions::WeatherCondition& getWeather();
    void setWeather(const ::nds::core::conditions::WeatherCondition& weather_);
    void setWeather(::nds::core::conditions::WeatherCondition&& weather_);

    const ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& getFrequentlyUsedVehicles() const;
    ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& getFrequentlyUsedVehicles();
    void setFrequentlyUsedVehicles(const ::nds::core::conditions::FrequentlyUsedVehicleTypesCondition& frequentlyUsedVehicles_);
    void setFrequentlyUsedVehicles(::nds::core::conditions::FrequentlyUsedVehicleTypesCondition&& frequentlyUsedVehicles_);

    const ::nds::core::conditions::SlowRoadUsersCondition& getSlowRoadUsers() const;
    ::nds::core::conditions::SlowRoadUsersCondition& getSlowRoadUsers();
    void setSlowRoadUsers(const ::nds::core::conditions::SlowRoadUsersCondition& slowRoadUsers_);
    void setSlowRoadUsers(::nds::core::conditions::SlowRoadUsersCondition&& slowRoadUsers_);

    const ::nds::core::conditions::BigVehiclesCondition& getBigVehicles() const;
    ::nds::core::conditions::BigVehiclesCondition& getBigVehicles();
    void setBigVehicles(const ::nds::core::conditions::BigVehiclesCondition& bigVehicles_);
    void setBigVehicles(::nds::core::conditions::BigVehiclesCondition&& bigVehicles_);

    const ::nds::core::conditions::PublicServiceVehiclesCondition& getPublicServiceVehicles() const;
    ::nds::core::conditions::PublicServiceVehiclesCondition& getPublicServiceVehicles();
    void setPublicServiceVehicles(const ::nds::core::conditions::PublicServiceVehiclesCondition& publicServiceVehicles_);
    void setPublicServiceVehicles(::nds::core::conditions::PublicServiceVehiclesCondition&& publicServiceVehicles_);

    const ::nds::core::conditions::EmergencyMilitaryDetailCondition& getEmergencyMilitaryDetails() const;
    ::nds::core::conditions::EmergencyMilitaryDetailCondition& getEmergencyMilitaryDetails();
    void setEmergencyMilitaryDetails(const ::nds::core::conditions::EmergencyMilitaryDetailCondition& emergencyMilitaryDetails_);
    void setEmergencyMilitaryDetails(::nds::core::conditions::EmergencyMilitaryDetailCondition&& emergencyMilitaryDetails_);

    const ::nds::core::conditions::EquipmentCondition& getEquipment() const;
    ::nds::core::conditions::EquipmentCondition& getEquipment();
    void setEquipment(const ::nds::core::conditions::EquipmentCondition& equipment_);
    void setEquipment(::nds::core::conditions::EquipmentCondition&& equipment_);

    const ::nds::core::conditions::AuthorizationCondition& getAuthorization() const;
    ::nds::core::conditions::AuthorizationCondition& getAuthorization();
    void setAuthorization(const ::nds::core::conditions::AuthorizationCondition& authorization_);
    void setAuthorization(::nds::core::conditions::AuthorizationCondition&& authorization_);

    const ::nds::core::conditions::LoadCondition& getLoad() const;
    ::nds::core::conditions::LoadCondition& getLoad();
    void setLoad(const ::nds::core::conditions::LoadCondition& load_);
    void setLoad(::nds::core::conditions::LoadCondition&& load_);

    ::nds::core::conditions::NumAxles getNumAxles() const;
    void setNumAxles(::nds::core::conditions::NumAxles numAxles_);

    const ::nds::core::conditions::Occupancy& getOccupancy() const;
    ::nds::core::conditions::Occupancy& getOccupancy();
    void setOccupancy(const ::nds::core::conditions::Occupancy& occupancy_);
    void setOccupancy(::nds::core::conditions::Occupancy&& occupancy_);

    ::nds::core::types::LengthCentimeters getVehicleLengthMetric() const;
    void setVehicleLengthMetric(::nds::core::types::LengthCentimeters vehicleLengthMetric_);

    ::nds::core::types::LengthInch getVehicleLengthImperial() const;
    void setVehicleLengthImperial(::nds::core::types::LengthInch vehicleLengthImperial_);

    ::nds::core::types::HeightCentimeters getVehicleHeightMetric() const;
    void setVehicleHeightMetric(::nds::core::types::HeightCentimeters vehicleHeightMetric_);

    ::nds::core::types::HeightInch getVehicleHeightImperial() const;
    void setVehicleHeightImperial(::nds::core::types::HeightInch vehicleHeightImperial_);

    ::nds::core::types::WidthCentimeters getVehicleWidthMetric() const;
    void setVehicleWidthMetric(::nds::core::types::WidthCentimeters vehicleWidthMetric_);

    ::nds::core::types::WidthInch getVehicleWidthImperial() const;
    void setVehicleWidthImperial(::nds::core::types::WidthInch vehicleWidthImperial_);

    ::nds::core::types::Weight10Kilogram getWeightMetric() const;
    void setWeightMetric(::nds::core::types::Weight10Kilogram weightMetric_);

    ::nds::core::types::Weight10Lbs getWeightImperial() const;
    void setWeightImperial(::nds::core::types::Weight10Lbs weightImperial_);

    ::nds::core::types::Weight10Kilogram getWeightPerAxleMetric() const;
    void setWeightPerAxleMetric(::nds::core::types::Weight10Kilogram weightPerAxleMetric_);

    ::nds::core::types::Weight10Lbs getWeightPerAxleImperial() const;
    void setWeightPerAxleImperial(::nds::core::types::Weight10Lbs weightPerAxleImperial_);

    ::nds::core::types::Weight10Kilogram getWeightPerTandemAxleMetric() const;
    void setWeightPerTandemAxleMetric(::nds::core::types::Weight10Kilogram weightPerTandemAxleMetric_);

    ::nds::core::types::Weight10Lbs getWeightPerTandemAxleImperial() const;
    void setWeightPerTandemAxleImperial(::nds::core::types::Weight10Lbs weightPerTandemAxleImperial_);

    ::nds::core::types::Weight10Kilogram getWeightPerTridemAxleMetric() const;
    void setWeightPerTridemAxleMetric(::nds::core::types::Weight10Kilogram weightPerTridemAxleMetric_);

    ::nds::core::types::Weight10Lbs getWeightPerTridemAxleImperial() const;
    void setWeightPerTridemAxleImperial(::nds::core::types::Weight10Lbs weightPerTridemAxleImperial_);

    const ::nds::core::conditions::TimeRangeOfWeekDays& getTimeRangeOfWeekDays() const;
    ::nds::core::conditions::TimeRangeOfWeekDays& getTimeRangeOfWeekDays();
    void setTimeRangeOfWeekDays(const ::nds::core::conditions::TimeRangeOfWeekDays& timeRangeOfWeekDays_);
    void setTimeRangeOfWeekDays(::nds::core::conditions::TimeRangeOfWeekDays&& timeRangeOfWeekDays_);

    ::nds::core::conditions::Visibility getVisibility() const;
    void setVisibility(::nds::core::conditions::Visibility visibility_);

    ::nds::core::conditions::Surface getSurface() const;
    void setSurface(::nds::core::conditions::Surface surface_);

    ::nds::core::conditions::EuroEmissionClassCondition getEuroEmissionClass() const;
    void setEuroEmissionClass(::nds::core::conditions::EuroEmissionClassCondition euroEmissionClass_);

    const ::nds::core::conditions::TimeDurationHours& getTimeDurationHours() const;
    ::nds::core::conditions::TimeDurationHours& getTimeDurationHours();
    void setTimeDurationHours(const ::nds::core::conditions::TimeDurationHours& timeDurationHours_);
    void setTimeDurationHours(::nds::core::conditions::TimeDurationHours&& timeDurationHours_);

    const ::nds::core::conditions::TimeRangeOfYear& getTimeRangeOfYear() const;
    ::nds::core::conditions::TimeRangeOfYear& getTimeRangeOfYear();
    void setTimeRangeOfYear(const ::nds::core::conditions::TimeRangeOfYear& timeRangeOfYear_);
    void setTimeRangeOfYear(::nds::core::conditions::TimeRangeOfYear&& timeRangeOfYear_);

    const ::nds::core::conditions::NumTrailersCondition& getNumTrailers() const;
    ::nds::core::conditions::NumTrailersCondition& getNumTrailers();
    void setNumTrailers(const ::nds::core::conditions::NumTrailersCondition& numTrailers_);
    void setNumTrailers(::nds::core::conditions::NumTrailersCondition&& numTrailers_);

    const ::nds::core::conditions::TrailerLengthMetricCondition& getTrailerLengthMetric() const;
    ::nds::core::conditions::TrailerLengthMetricCondition& getTrailerLengthMetric();
    void setTrailerLengthMetric(const ::nds::core::conditions::TrailerLengthMetricCondition& trailerLengthMetric_);
    void setTrailerLengthMetric(::nds::core::conditions::TrailerLengthMetricCondition&& trailerLengthMetric_);

    const ::nds::core::conditions::TrailerLengthImperialCondition& getTrailerLengthImperial() const;
    ::nds::core::conditions::TrailerLengthImperialCondition& getTrailerLengthImperial();
    void setTrailerLengthImperial(const ::nds::core::conditions::TrailerLengthImperialCondition& trailerLengthImperial_);
    void setTrailerLengthImperial(::nds::core::conditions::TrailerLengthImperialCondition&& trailerLengthImperial_);

    ::nds::core::vehicle::EngineDisplacement getEngineDisplacement() const;
    void setEngineDisplacement(::nds::core::vehicle::EngineDisplacement engineDisplacement_);

    const ::nds::core::conditions::EnergyTypeCondition& getEnergyType() const;
    ::nds::core::conditions::EnergyTypeCondition& getEnergyType();
    void setEnergyType(const ::nds::core::conditions::EnergyTypeCondition& energyType_);
    void setEnergyType(::nds::core::conditions::EnergyTypeCondition&& energyType_);

    ::nds::core::conditions::BrakedTrailer getBrakedTrailer() const;
    void setBrakedTrailer(::nds::core::conditions::BrakedTrailer brakedTrailer_);

    const ::nds::core::conditions::PublicBusTypeCondition& getPublicBusTypes() const;
    ::nds::core::conditions::PublicBusTypeCondition& getPublicBusTypes();
    void setPublicBusTypes(const ::nds::core::conditions::PublicBusTypeCondition& publicBusTypes_);
    void setPublicBusTypes(::nds::core::conditions::PublicBusTypeCondition&& publicBusTypes_);
    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const ConditionValue& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    ::zserio::AnyHolder<> readObject(::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::zserio::AnyHolder<> readObject(ZserioPackingContext& context, ::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::AnyHolder<> copyObject(const allocator_type& allocator) const;

    ::nds::core::conditions::ConditionTypeCode m_code_;
    bool m_isInitialized;
    ::zserio::AnyHolder<> m_objectChoice;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_CONDITION_VALUE_H
