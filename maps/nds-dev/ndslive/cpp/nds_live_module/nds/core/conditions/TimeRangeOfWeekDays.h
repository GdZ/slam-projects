/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_DAYS_H
#define NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_DAYS_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Vector.h>

#include <nds/core/conditions/TimeRangeOfDay.h>

namespace nds
{
namespace core
{
namespace conditions
{

class TimeRangeOfWeekDays
{
public:
    class ZserioPackingContext
    {
    };

    using allocator_type = ::std::allocator<uint8_t>;

    TimeRangeOfWeekDays() noexcept :
            TimeRangeOfWeekDays(allocator_type())
    {}

    explicit TimeRangeOfWeekDays(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_rangeOfWeekDay = ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_rangeOfWeekDay, TimeRangeOfWeekDays, allocator_type> = 0>
    explicit TimeRangeOfWeekDays(
            ZSERIO_T_rangeOfWeekDay&& rangeOfWeekDay_,
            const allocator_type& allocator = allocator_type()) :
            TimeRangeOfWeekDays(allocator)
    {
        m_rangeOfWeekDay_ = ZserioArrayType_rangeOfWeekDay(::std::forward<ZSERIO_T_rangeOfWeekDay>(rangeOfWeekDay_));
    }

    explicit TimeRangeOfWeekDays(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit TimeRangeOfWeekDays(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~TimeRangeOfWeekDays() = default;

    TimeRangeOfWeekDays(const TimeRangeOfWeekDays&) = default;
    TimeRangeOfWeekDays& operator=(const TimeRangeOfWeekDays&) = default;

    TimeRangeOfWeekDays(TimeRangeOfWeekDays&&) = default;
    TimeRangeOfWeekDays& operator=(TimeRangeOfWeekDays&&) = default;

    TimeRangeOfWeekDays(::zserio::PropagateAllocatorT,
            const TimeRangeOfWeekDays& other, const allocator_type& allocator);

    const ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& getRangeOfWeekDay() const;
    ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& getRangeOfWeekDay();
    void setRangeOfWeekDay(const ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& rangeOfWeekDay_);
    void setRangeOfWeekDay(::zserio::vector<::nds::core::conditions::TimeRangeOfDay>&& rangeOfWeekDay_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const TimeRangeOfWeekDays& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_rangeOfWeekDay
    {
    public:
        using OwnerType = TimeRangeOfWeekDays;

        static void create(TimeRangeOfWeekDays& owner,
                ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(TimeRangeOfWeekDays& owner,
                ::zserio::vector<::nds::core::conditions::TimeRangeOfDay>& array,
                ::nds::core::conditions::TimeRangeOfDay::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_rangeOfWeekDay = ::zserio::Array<::zserio::vector<::nds::core::conditions::TimeRangeOfDay>, ::zserio::ObjectArrayTraits<::nds::core::conditions::TimeRangeOfDay, ZserioElementFactory_rangeOfWeekDay>, ::zserio::ArrayType::NORMAL>;

    ZserioArrayType_rangeOfWeekDay readRangeOfWeekDay(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_rangeOfWeekDay readRangeOfWeekDay(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ZserioArrayType_rangeOfWeekDay m_rangeOfWeekDay_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_TIME_RANGE_OF_WEEK_DAYS_H
