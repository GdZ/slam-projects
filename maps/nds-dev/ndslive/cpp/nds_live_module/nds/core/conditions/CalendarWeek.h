/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_CALENDAR_WEEK_H
#define NDS_CORE_CONDITIONS_CALENDAR_WEEK_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace conditions
{

class CalendarWeek
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getWeek()
        {
            return m_week_;
        }

    private:
        ::zserio::DeltaContext m_week_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    CalendarWeek() noexcept :
            CalendarWeek(allocator_type())
    {}

    explicit CalendarWeek(const allocator_type& allocator) noexcept;

    explicit CalendarWeek(
            uint8_t week_,
            const allocator_type& allocator = allocator_type()) :
            CalendarWeek(allocator)
    {
        m_week_ = week_;
    }

    explicit CalendarWeek(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit CalendarWeek(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~CalendarWeek() = default;

    CalendarWeek(const CalendarWeek&) = default;
    CalendarWeek& operator=(const CalendarWeek&) = default;

    CalendarWeek(CalendarWeek&&) = default;
    CalendarWeek& operator=(CalendarWeek&&) = default;

    CalendarWeek(::zserio::PropagateAllocatorT,
            const CalendarWeek& other, const allocator_type& allocator);

    uint8_t getWeek() const;
    void setWeek(uint8_t week_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const CalendarWeek& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    uint8_t readWeek(::zserio::BitStreamReader& in);
    uint8_t readWeek(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    uint8_t m_week_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_CALENDAR_WEEK_H
