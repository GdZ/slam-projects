/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_WEATHER_H
#define NDS_CORE_CONDITIONS_WEATHER_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace conditions
{

enum class Weather : uint8_t
{
    SNOW = UINT8_C(0),
    RAIN = UINT8_C(1),
    SUNSHINE = UINT8_C(2),
    FOG = UINT8_C(3),
    THAW = UINT8_C(4),
    STRONG_WIND = UINT8_C(5),
    AVALANCHE = UINT8_C(6),
    INDEPENDENT = UINT8_C(7),
    ICE = UINT8_C(8)
};

} // namespace conditions
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for Weather enumeration.
template <>
struct EnumTraits<::nds::core::conditions::Weather>
{
    static constexpr ::std::array<const char*, 9> names =
    {{
        "SNOW",
        "RAIN",
        "SUNSHINE",
        "FOG",
        "THAW",
        "STRONG_WIND",
        "AVALANCHE",
        "INDEPENDENT",
        "ICE"
    }};

    static constexpr ::std::array<::nds::core::conditions::Weather, 9> values =
    {{
        ::nds::core::conditions::Weather::SNOW,
        ::nds::core::conditions::Weather::RAIN,
        ::nds::core::conditions::Weather::SUNSHINE,
        ::nds::core::conditions::Weather::FOG,
        ::nds::core::conditions::Weather::THAW,
        ::nds::core::conditions::Weather::STRONG_WIND,
        ::nds::core::conditions::Weather::AVALANCHE,
        ::nds::core::conditions::Weather::INDEPENDENT,
        ::nds::core::conditions::Weather::ICE
    }};

    static constexpr const char* enumName = "Weather";
};

template <>
size_t enumToOrdinal<::nds::core::conditions::Weather>(::nds::core::conditions::Weather value);

template <>
::nds::core::conditions::Weather valueToEnum<::nds::core::conditions::Weather>(
        typename ::std::underlying_type<::nds::core::conditions::Weather>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::conditions::Weather>(::nds::core::conditions::Weather value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::conditions::Weather>(::zserio::DeltaContext& context, ::nds::core::conditions::Weather value);

template <>
size_t bitSizeOf<::nds::core::conditions::Weather>(::nds::core::conditions::Weather value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::conditions::Weather>(::zserio::DeltaContext& context, ::nds::core::conditions::Weather value);

template <>
size_t initializeOffsets<::nds::core::conditions::Weather>(size_t bitPosition, ::nds::core::conditions::Weather value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::conditions::Weather>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::conditions::Weather value);

template <>
::nds::core::conditions::Weather read<::nds::core::conditions::Weather>(::zserio::BitStreamReader& in);

template <>
::nds::core::conditions::Weather read<::nds::core::conditions::Weather, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::conditions::Weather>(::zserio::BitStreamWriter& out, ::nds::core::conditions::Weather value);

template <>
void write<::zserio::DeltaContext, ::nds::core::conditions::Weather>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::conditions::Weather value);

} // namespace zserio

#endif // NDS_CORE_CONDITIONS_WEATHER_H
