/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_FUZZY_TIME_DOMAIN_H
#define NDS_CORE_CONDITIONS_FUZZY_TIME_DOMAIN_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <array>

#include <zserio/Enums.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/DeltaContext.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace conditions
{

enum class FuzzyTimeDomain : uint8_t
{
    EXTERNAL = UINT8_C(0),
    DAWN = UINT8_C(1),
    DUSK = UINT8_C(2),
    SCHOOL = UINT8_C(3),
    HOLIDAY = UINT8_C(4),
    WINTER = UINT8_C(5),
    SPRING = UINT8_C(6),
    SUMMER = UINT8_C(7),
    AUTUMN = UINT8_C(8),
    HIGH_TIDE = UINT8_C(9),
    LOW_TIDE = UINT8_C(10),
    HIGH_WATER = UINT8_C(11),
    LOW_WATER = UINT8_C(12),
    WET = UINT8_C(13),
    DRY = UINT8_C(14),
    PEAK_HOURS = UINT8_C(15),
    OFF_PEAK_HOURS = UINT8_C(16),
    MORNING = UINT8_C(17),
    EVENING_RUSH_HOUR = UINT8_C(18),
    MORNING_RUSH_HOUR = UINT8_C(19),
    DAY = UINT8_C(20),
    NIGHT = UINT8_C(21),
    NON_SCHOOL_HOURS = UINT8_C(22),
    SCHOOL_HOURS = UINT8_C(23),
    WHEN_CHILDREN_ARE_PRESENT = UINT8_C(24),
    SUNRISE_TILL_SUNSET = UINT8_C(25),
    SUNSET_TILL_SUNRISE = UINT8_C(26),
    AFTERNOON = UINT8_C(27),
    EVENT = UINT8_C(28),
    MARKET_HOURS = UINT8_C(29),
    UNDEFINED_OCCASION = UINT8_C(30),
    RACE_DAYS = UINT8_C(31),
    POLLUTION = UINT8_C(32),
    EVENING = UINT8_C(33),
    BUSINESS_HOURS = UINT8_C(34),
    SKI_SEASON = UINT8_C(35),
    TOURIST_SEASON = UINT8_C(36),
    CHURCH_HOURS = UINT8_C(37),
    SUMMER_SCHOOL = UINT8_C(38),
    FUNERAL = UINT8_C(39),
    HUNTING_SEASON = UINT8_C(40),
    MILITARY_EXERCISE = UINT8_C(41)
};

} // namespace conditions
} // namespace core
} // namespace nds

namespace zserio
{

// This is full specialization of enumeration traits and methods for FuzzyTimeDomain enumeration.
template <>
struct EnumTraits<::nds::core::conditions::FuzzyTimeDomain>
{
    static constexpr ::std::array<const char*, 42> names =
    {{
        "EXTERNAL",
        "DAWN",
        "DUSK",
        "SCHOOL",
        "HOLIDAY",
        "WINTER",
        "SPRING",
        "SUMMER",
        "AUTUMN",
        "HIGH_TIDE",
        "LOW_TIDE",
        "HIGH_WATER",
        "LOW_WATER",
        "WET",
        "DRY",
        "PEAK_HOURS",
        "OFF_PEAK_HOURS",
        "MORNING",
        "EVENING_RUSH_HOUR",
        "MORNING_RUSH_HOUR",
        "DAY",
        "NIGHT",
        "NON_SCHOOL_HOURS",
        "SCHOOL_HOURS",
        "WHEN_CHILDREN_ARE_PRESENT",
        "SUNRISE_TILL_SUNSET",
        "SUNSET_TILL_SUNRISE",
        "AFTERNOON",
        "EVENT",
        "MARKET_HOURS",
        "UNDEFINED_OCCASION",
        "RACE_DAYS",
        "POLLUTION",
        "EVENING",
        "BUSINESS_HOURS",
        "SKI_SEASON",
        "TOURIST_SEASON",
        "CHURCH_HOURS",
        "SUMMER_SCHOOL",
        "FUNERAL",
        "HUNTING_SEASON",
        "MILITARY_EXERCISE"
    }};

    static constexpr ::std::array<::nds::core::conditions::FuzzyTimeDomain, 42> values =
    {{
        ::nds::core::conditions::FuzzyTimeDomain::EXTERNAL,
        ::nds::core::conditions::FuzzyTimeDomain::DAWN,
        ::nds::core::conditions::FuzzyTimeDomain::DUSK,
        ::nds::core::conditions::FuzzyTimeDomain::SCHOOL,
        ::nds::core::conditions::FuzzyTimeDomain::HOLIDAY,
        ::nds::core::conditions::FuzzyTimeDomain::WINTER,
        ::nds::core::conditions::FuzzyTimeDomain::SPRING,
        ::nds::core::conditions::FuzzyTimeDomain::SUMMER,
        ::nds::core::conditions::FuzzyTimeDomain::AUTUMN,
        ::nds::core::conditions::FuzzyTimeDomain::HIGH_TIDE,
        ::nds::core::conditions::FuzzyTimeDomain::LOW_TIDE,
        ::nds::core::conditions::FuzzyTimeDomain::HIGH_WATER,
        ::nds::core::conditions::FuzzyTimeDomain::LOW_WATER,
        ::nds::core::conditions::FuzzyTimeDomain::WET,
        ::nds::core::conditions::FuzzyTimeDomain::DRY,
        ::nds::core::conditions::FuzzyTimeDomain::PEAK_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::OFF_PEAK_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::MORNING,
        ::nds::core::conditions::FuzzyTimeDomain::EVENING_RUSH_HOUR,
        ::nds::core::conditions::FuzzyTimeDomain::MORNING_RUSH_HOUR,
        ::nds::core::conditions::FuzzyTimeDomain::DAY,
        ::nds::core::conditions::FuzzyTimeDomain::NIGHT,
        ::nds::core::conditions::FuzzyTimeDomain::NON_SCHOOL_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::SCHOOL_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::WHEN_CHILDREN_ARE_PRESENT,
        ::nds::core::conditions::FuzzyTimeDomain::SUNRISE_TILL_SUNSET,
        ::nds::core::conditions::FuzzyTimeDomain::SUNSET_TILL_SUNRISE,
        ::nds::core::conditions::FuzzyTimeDomain::AFTERNOON,
        ::nds::core::conditions::FuzzyTimeDomain::EVENT,
        ::nds::core::conditions::FuzzyTimeDomain::MARKET_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::UNDEFINED_OCCASION,
        ::nds::core::conditions::FuzzyTimeDomain::RACE_DAYS,
        ::nds::core::conditions::FuzzyTimeDomain::POLLUTION,
        ::nds::core::conditions::FuzzyTimeDomain::EVENING,
        ::nds::core::conditions::FuzzyTimeDomain::BUSINESS_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::SKI_SEASON,
        ::nds::core::conditions::FuzzyTimeDomain::TOURIST_SEASON,
        ::nds::core::conditions::FuzzyTimeDomain::CHURCH_HOURS,
        ::nds::core::conditions::FuzzyTimeDomain::SUMMER_SCHOOL,
        ::nds::core::conditions::FuzzyTimeDomain::FUNERAL,
        ::nds::core::conditions::FuzzyTimeDomain::HUNTING_SEASON,
        ::nds::core::conditions::FuzzyTimeDomain::MILITARY_EXERCISE
    }};

    static constexpr const char* enumName = "FuzzyTimeDomain";
};

template <>
size_t enumToOrdinal<::nds::core::conditions::FuzzyTimeDomain>(::nds::core::conditions::FuzzyTimeDomain value);

template <>
::nds::core::conditions::FuzzyTimeDomain valueToEnum<::nds::core::conditions::FuzzyTimeDomain>(
        typename ::std::underlying_type<::nds::core::conditions::FuzzyTimeDomain>::type rawValue);

template <>
uint32_t enumHashCode<::nds::core::conditions::FuzzyTimeDomain>(::nds::core::conditions::FuzzyTimeDomain value);

template <>
void initPackingContext<::zserio::DeltaContext, ::nds::core::conditions::FuzzyTimeDomain>(::zserio::DeltaContext& context, ::nds::core::conditions::FuzzyTimeDomain value);

template <>
size_t bitSizeOf<::nds::core::conditions::FuzzyTimeDomain>(::nds::core::conditions::FuzzyTimeDomain value);

template <>
size_t bitSizeOf<::zserio::DeltaContext, ::nds::core::conditions::FuzzyTimeDomain>(::zserio::DeltaContext& context, ::nds::core::conditions::FuzzyTimeDomain value);

template <>
size_t initializeOffsets<::nds::core::conditions::FuzzyTimeDomain>(size_t bitPosition, ::nds::core::conditions::FuzzyTimeDomain value);

template <>
size_t initializeOffsets<::zserio::DeltaContext, ::nds::core::conditions::FuzzyTimeDomain>(::zserio::DeltaContext& context, size_t bitPosition,
        ::nds::core::conditions::FuzzyTimeDomain value);

template <>
::nds::core::conditions::FuzzyTimeDomain read<::nds::core::conditions::FuzzyTimeDomain>(::zserio::BitStreamReader& in);

template <>
::nds::core::conditions::FuzzyTimeDomain read<::nds::core::conditions::FuzzyTimeDomain, ::zserio::DeltaContext>(::zserio::DeltaContext& context, ::zserio::BitStreamReader& in);

template <>
void write<::nds::core::conditions::FuzzyTimeDomain>(::zserio::BitStreamWriter& out, ::nds::core::conditions::FuzzyTimeDomain value);

template <>
void write<::zserio::DeltaContext, ::nds::core::conditions::FuzzyTimeDomain>(::zserio::DeltaContext& context, ::zserio::BitStreamWriter& out,
        ::nds::core::conditions::FuzzyTimeDomain value);

} // namespace zserio

#endif // NDS_CORE_CONDITIONS_FUZZY_TIME_DOMAIN_H
