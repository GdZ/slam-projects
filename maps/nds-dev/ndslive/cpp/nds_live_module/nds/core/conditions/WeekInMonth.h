/**
 * Automatically generated by Zserio C++ extension version 2.12.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef NDS_CORE_CONDITIONS_WEEK_IN_MONTH_H
#define NDS_CORE_CONDITIONS_WEEK_IN_MONTH_H

#include <zserio/CppRuntimeVersion.h>
#if CPP_EXTENSION_RUNTIME_VERSION_NUMBER != 2012000
    #error Version mismatch between Zserio runtime library and Zserio compiler!
    #error Please update your Zserio runtime library to the version 2.12.0.
#endif

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/DeltaContext.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>

namespace nds
{
namespace core
{
namespace conditions
{

class WeekInMonth
{
public:
    class ZserioPackingContext
    {
    public:
        ::zserio::DeltaContext& getNThWeekInMonth()
        {
            return m_nThWeekInMonth_;
        }

    private:
        ::zserio::DeltaContext m_nThWeekInMonth_;
    };

    using allocator_type = ::std::allocator<uint8_t>;

    WeekInMonth() noexcept :
            WeekInMonth(allocator_type())
    {}

    explicit WeekInMonth(const allocator_type& allocator) noexcept;

    WeekInMonth(
            bool countBackwardWeekInMonth_,
            uint8_t nThWeekInMonth_,
            const allocator_type& allocator = allocator_type()) :
            WeekInMonth(allocator)
    {
        m_countBackwardWeekInMonth_ = countBackwardWeekInMonth_;
        m_nThWeekInMonth_ = nThWeekInMonth_;
    }

    explicit WeekInMonth(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit WeekInMonth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~WeekInMonth() = default;

    WeekInMonth(const WeekInMonth&) = default;
    WeekInMonth& operator=(const WeekInMonth&) = default;

    WeekInMonth(WeekInMonth&&) = default;
    WeekInMonth& operator=(WeekInMonth&&) = default;

    WeekInMonth(::zserio::PropagateAllocatorT,
            const WeekInMonth& other, const allocator_type& allocator);

    bool getCountBackwardWeekInMonth() const;
    void setCountBackwardWeekInMonth(bool countBackwardWeekInMonth_);

    uint8_t getNThWeekInMonth() const;
    void setNThWeekInMonth(uint8_t nThWeekInMonth_);

    void initPackingContext(ZserioPackingContext& context) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(ZserioPackingContext& context, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(ZserioPackingContext& context, size_t bitPosition);

    bool operator==(const WeekInMonth& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const;

private:
    bool readCountBackwardWeekInMonth(::zserio::BitStreamReader& in);
    uint8_t readNThWeekInMonth(::zserio::BitStreamReader& in);
    uint8_t readNThWeekInMonth(ZserioPackingContext& context,
            ::zserio::BitStreamReader& in);

    bool m_countBackwardWeekInMonth_;
    uint8_t m_nThWeekInMonth_;
};

} // namespace conditions
} // namespace core
} // namespace nds

#endif // NDS_CORE_CONDITIONS_WEEK_IN_MONTH_H
